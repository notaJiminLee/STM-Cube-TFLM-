
552_cifar10_tflite.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021908  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004850  08021b00  08021b00  00031b00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08026350  08026350  00056f20  2**0
                  CONTENTS
  4 .ARM          00000008  08026350  08026350  00036350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08026358  08026358  00056f20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08026358  08026358  00036358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802635c  0802635c  0003635c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00016f20  20000000  08026360  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00016274  20016f20  0803d280  00056f20  2**4
                  ALLOC
 10 ._user_heap_stack 00000604  2002d194  0803d280  0005d194  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00056f20  2**0
                  CONTENTS, READONLY
 12 .debug_info   001ae2c7  00000000  00000000  00056f56  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0001007c  00000000  00000000  0020521d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00006898  00000000  00000000  002152a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00006680  00000000  00000000  0021bb38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003a1f9  00000000  00000000  002221b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0003ea92  00000000  00000000  0025c3b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001abdaf  00000000  00000000  0029ae43  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00446bf2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0001efd8  00000000  00000000  00446c70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	e000      	b.n	800020a <__do_global_dtors_aux+0x12>
 8000208:	bf00      	nop
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20016f20 	.word	0x20016f20
 8000214:	00000000 	.word	0x00000000
 8000218:	08021ae8 	.word	0x08021ae8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	e000      	b.n	800022a <frame_dummy+0xe>
 8000228:	bf00      	nop
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20016f24 	.word	0x20016f24
 8000234:	08021ae8 	.word	0x08021ae8

08000238 <strcmp>:
 8000238:	f810 2b01 	ldrb.w	r2, [r0], #1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000240:	2a01      	cmp	r2, #1
 8000242:	bf28      	it	cs
 8000244:	429a      	cmpcs	r2, r3
 8000246:	d0f7      	beq.n	8000238 <strcmp>
 8000248:	1ad0      	subs	r0, r2, r3
 800024a:	4770      	bx	lr

0800024c <strlen>:
 800024c:	4603      	mov	r3, r0
 800024e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000252:	2a00      	cmp	r2, #0
 8000254:	d1fb      	bne.n	800024e <strlen+0x2>
 8000256:	1a18      	subs	r0, r3, r0
 8000258:	3801      	subs	r0, #1
 800025a:	4770      	bx	lr

0800025c <__aeabi_drsub>:
 800025c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000260:	e002      	b.n	8000268 <__adddf3>
 8000262:	bf00      	nop

08000264 <__aeabi_dsub>:
 8000264:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000268 <__adddf3>:
 8000268:	b530      	push	{r4, r5, lr}
 800026a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800026e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000272:	ea94 0f05 	teq	r4, r5
 8000276:	bf08      	it	eq
 8000278:	ea90 0f02 	teqeq	r0, r2
 800027c:	bf1f      	itttt	ne
 800027e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000282:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000286:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800028a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800028e:	f000 80e2 	beq.w	8000456 <__adddf3+0x1ee>
 8000292:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000296:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800029a:	bfb8      	it	lt
 800029c:	426d      	neglt	r5, r5
 800029e:	dd0c      	ble.n	80002ba <__adddf3+0x52>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea80 0202 	eor.w	r2, r0, r2
 80002a6:	ea81 0303 	eor.w	r3, r1, r3
 80002aa:	ea82 0000 	eor.w	r0, r2, r0
 80002ae:	ea83 0101 	eor.w	r1, r3, r1
 80002b2:	ea80 0202 	eor.w	r2, r0, r2
 80002b6:	ea81 0303 	eor.w	r3, r1, r3
 80002ba:	2d36      	cmp	r5, #54	; 0x36
 80002bc:	bf88      	it	hi
 80002be:	bd30      	pophi	{r4, r5, pc}
 80002c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002d0:	d002      	beq.n	80002d8 <__adddf3+0x70>
 80002d2:	4240      	negs	r0, r0
 80002d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x84>
 80002e6:	4252      	negs	r2, r2
 80002e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002ec:	ea94 0f05 	teq	r4, r5
 80002f0:	f000 80a7 	beq.w	8000442 <__adddf3+0x1da>
 80002f4:	f1a4 0401 	sub.w	r4, r4, #1
 80002f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80002fc:	db0d      	blt.n	800031a <__adddf3+0xb2>
 80002fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000302:	fa22 f205 	lsr.w	r2, r2, r5
 8000306:	1880      	adds	r0, r0, r2
 8000308:	f141 0100 	adc.w	r1, r1, #0
 800030c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000310:	1880      	adds	r0, r0, r2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	4159      	adcs	r1, r3
 8000318:	e00e      	b.n	8000338 <__adddf3+0xd0>
 800031a:	f1a5 0520 	sub.w	r5, r5, #32
 800031e:	f10e 0e20 	add.w	lr, lr, #32
 8000322:	2a01      	cmp	r2, #1
 8000324:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000328:	bf28      	it	cs
 800032a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800032e:	fa43 f305 	asr.w	r3, r3, r5
 8000332:	18c0      	adds	r0, r0, r3
 8000334:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800033c:	d507      	bpl.n	800034e <__adddf3+0xe6>
 800033e:	f04f 0e00 	mov.w	lr, #0
 8000342:	f1dc 0c00 	rsbs	ip, ip, #0
 8000346:	eb7e 0000 	sbcs.w	r0, lr, r0
 800034a:	eb6e 0101 	sbc.w	r1, lr, r1
 800034e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000352:	d31b      	bcc.n	800038c <__adddf3+0x124>
 8000354:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000358:	d30c      	bcc.n	8000374 <__adddf3+0x10c>
 800035a:	0849      	lsrs	r1, r1, #1
 800035c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000360:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000364:	f104 0401 	add.w	r4, r4, #1
 8000368:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800036c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000370:	f080 809a 	bcs.w	80004a8 <__adddf3+0x240>
 8000374:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000378:	bf08      	it	eq
 800037a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800037e:	f150 0000 	adcs.w	r0, r0, #0
 8000382:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000386:	ea41 0105 	orr.w	r1, r1, r5
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000390:	4140      	adcs	r0, r0
 8000392:	eb41 0101 	adc.w	r1, r1, r1
 8000396:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800039a:	f1a4 0401 	sub.w	r4, r4, #1
 800039e:	d1e9      	bne.n	8000374 <__adddf3+0x10c>
 80003a0:	f091 0f00 	teq	r1, #0
 80003a4:	bf04      	itt	eq
 80003a6:	4601      	moveq	r1, r0
 80003a8:	2000      	moveq	r0, #0
 80003aa:	fab1 f381 	clz	r3, r1
 80003ae:	bf08      	it	eq
 80003b0:	3320      	addeq	r3, #32
 80003b2:	f1a3 030b 	sub.w	r3, r3, #11
 80003b6:	f1b3 0220 	subs.w	r2, r3, #32
 80003ba:	da0c      	bge.n	80003d6 <__adddf3+0x16e>
 80003bc:	320c      	adds	r2, #12
 80003be:	dd08      	ble.n	80003d2 <__adddf3+0x16a>
 80003c0:	f102 0c14 	add.w	ip, r2, #20
 80003c4:	f1c2 020c 	rsb	r2, r2, #12
 80003c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80003cc:	fa21 f102 	lsr.w	r1, r1, r2
 80003d0:	e00c      	b.n	80003ec <__adddf3+0x184>
 80003d2:	f102 0214 	add.w	r2, r2, #20
 80003d6:	bfd8      	it	le
 80003d8:	f1c2 0c20 	rsble	ip, r2, #32
 80003dc:	fa01 f102 	lsl.w	r1, r1, r2
 80003e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003e4:	bfdc      	itt	le
 80003e6:	ea41 010c 	orrle.w	r1, r1, ip
 80003ea:	4090      	lslle	r0, r2
 80003ec:	1ae4      	subs	r4, r4, r3
 80003ee:	bfa2      	ittt	ge
 80003f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003f4:	4329      	orrge	r1, r5
 80003f6:	bd30      	popge	{r4, r5, pc}
 80003f8:	ea6f 0404 	mvn.w	r4, r4
 80003fc:	3c1f      	subs	r4, #31
 80003fe:	da1c      	bge.n	800043a <__adddf3+0x1d2>
 8000400:	340c      	adds	r4, #12
 8000402:	dc0e      	bgt.n	8000422 <__adddf3+0x1ba>
 8000404:	f104 0414 	add.w	r4, r4, #20
 8000408:	f1c4 0220 	rsb	r2, r4, #32
 800040c:	fa20 f004 	lsr.w	r0, r0, r4
 8000410:	fa01 f302 	lsl.w	r3, r1, r2
 8000414:	ea40 0003 	orr.w	r0, r0, r3
 8000418:	fa21 f304 	lsr.w	r3, r1, r4
 800041c:	ea45 0103 	orr.w	r1, r5, r3
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	f1c4 040c 	rsb	r4, r4, #12
 8000426:	f1c4 0220 	rsb	r2, r4, #32
 800042a:	fa20 f002 	lsr.w	r0, r0, r2
 800042e:	fa01 f304 	lsl.w	r3, r1, r4
 8000432:	ea40 0003 	orr.w	r0, r0, r3
 8000436:	4629      	mov	r1, r5
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	fa21 f004 	lsr.w	r0, r1, r4
 800043e:	4629      	mov	r1, r5
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	f094 0f00 	teq	r4, #0
 8000446:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800044a:	bf06      	itte	eq
 800044c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000450:	3401      	addeq	r4, #1
 8000452:	3d01      	subne	r5, #1
 8000454:	e74e      	b.n	80002f4 <__adddf3+0x8c>
 8000456:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045a:	bf18      	it	ne
 800045c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000460:	d029      	beq.n	80004b6 <__adddf3+0x24e>
 8000462:	ea94 0f05 	teq	r4, r5
 8000466:	bf08      	it	eq
 8000468:	ea90 0f02 	teqeq	r0, r2
 800046c:	d005      	beq.n	800047a <__adddf3+0x212>
 800046e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000472:	bf04      	itt	eq
 8000474:	4619      	moveq	r1, r3
 8000476:	4610      	moveq	r0, r2
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea91 0f03 	teq	r1, r3
 800047e:	bf1e      	ittt	ne
 8000480:	2100      	movne	r1, #0
 8000482:	2000      	movne	r0, #0
 8000484:	bd30      	popne	{r4, r5, pc}
 8000486:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800048a:	d105      	bne.n	8000498 <__adddf3+0x230>
 800048c:	0040      	lsls	r0, r0, #1
 800048e:	4149      	adcs	r1, r1
 8000490:	bf28      	it	cs
 8000492:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000496:	bd30      	pop	{r4, r5, pc}
 8000498:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800049c:	bf3c      	itt	cc
 800049e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004a2:	bd30      	popcc	{r4, r5, pc}
 80004a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ba:	bf1a      	itte	ne
 80004bc:	4619      	movne	r1, r3
 80004be:	4610      	movne	r0, r2
 80004c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004c4:	bf1c      	itt	ne
 80004c6:	460b      	movne	r3, r1
 80004c8:	4602      	movne	r2, r0
 80004ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004ce:	bf06      	itte	eq
 80004d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004d4:	ea91 0f03 	teqeq	r1, r3
 80004d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	bf00      	nop

080004e0 <__aeabi_ui2d>:
 80004e0:	f090 0f00 	teq	r0, #0
 80004e4:	bf04      	itt	eq
 80004e6:	2100      	moveq	r1, #0
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f4:	f04f 0500 	mov.w	r5, #0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e750      	b.n	80003a0 <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_i2d>:
 8000500:	f090 0f00 	teq	r0, #0
 8000504:	bf04      	itt	eq
 8000506:	2100      	moveq	r1, #0
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000510:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000514:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000518:	bf48      	it	mi
 800051a:	4240      	negmi	r0, r0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e73e      	b.n	80003a0 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_f2d>:
 8000524:	0042      	lsls	r2, r0, #1
 8000526:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800052a:	ea4f 0131 	mov.w	r1, r1, rrx
 800052e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000532:	bf1f      	itttt	ne
 8000534:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000538:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800053c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000540:	4770      	bxne	lr
 8000542:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000546:	bf08      	it	eq
 8000548:	4770      	bxeq	lr
 800054a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800054e:	bf04      	itt	eq
 8000550:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 7460 	mov.w	r4, #896	; 0x380
 800055c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000560:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000564:	e71c      	b.n	80003a0 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_ul2d>:
 8000568:	ea50 0201 	orrs.w	r2, r0, r1
 800056c:	bf08      	it	eq
 800056e:	4770      	bxeq	lr
 8000570:	b530      	push	{r4, r5, lr}
 8000572:	f04f 0500 	mov.w	r5, #0
 8000576:	e00a      	b.n	800058e <__aeabi_l2d+0x16>

08000578 <__aeabi_l2d>:
 8000578:	ea50 0201 	orrs.w	r2, r0, r1
 800057c:	bf08      	it	eq
 800057e:	4770      	bxeq	lr
 8000580:	b530      	push	{r4, r5, lr}
 8000582:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000586:	d502      	bpl.n	800058e <__aeabi_l2d+0x16>
 8000588:	4240      	negs	r0, r0
 800058a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800058e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000592:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000596:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800059a:	f43f aed8 	beq.w	800034e <__adddf3+0xe6>
 800059e:	f04f 0203 	mov.w	r2, #3
 80005a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a6:	bf18      	it	ne
 80005a8:	3203      	addne	r2, #3
 80005aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ae:	bf18      	it	ne
 80005b0:	3203      	addne	r2, #3
 80005b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005b6:	f1c2 0320 	rsb	r3, r2, #32
 80005ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80005be:	fa20 f002 	lsr.w	r0, r0, r2
 80005c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80005c6:	ea40 000e 	orr.w	r0, r0, lr
 80005ca:	fa21 f102 	lsr.w	r1, r1, r2
 80005ce:	4414      	add	r4, r2
 80005d0:	e6bd      	b.n	800034e <__adddf3+0xe6>
 80005d2:	bf00      	nop

080005d4 <__aeabi_dmul>:
 80005d4:	b570      	push	{r4, r5, r6, lr}
 80005d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005e2:	bf1d      	ittte	ne
 80005e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005e8:	ea94 0f0c 	teqne	r4, ip
 80005ec:	ea95 0f0c 	teqne	r5, ip
 80005f0:	f000 f8de 	bleq	80007b0 <__aeabi_dmul+0x1dc>
 80005f4:	442c      	add	r4, r5
 80005f6:	ea81 0603 	eor.w	r6, r1, r3
 80005fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000602:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000606:	bf18      	it	ne
 8000608:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000614:	d038      	beq.n	8000688 <__aeabi_dmul+0xb4>
 8000616:	fba0 ce02 	umull	ip, lr, r0, r2
 800061a:	f04f 0500 	mov.w	r5, #0
 800061e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000622:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000626:	fbe0 e503 	umlal	lr, r5, r0, r3
 800062a:	f04f 0600 	mov.w	r6, #0
 800062e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000632:	f09c 0f00 	teq	ip, #0
 8000636:	bf18      	it	ne
 8000638:	f04e 0e01 	orrne.w	lr, lr, #1
 800063c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000640:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000644:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000648:	d204      	bcs.n	8000654 <__aeabi_dmul+0x80>
 800064a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800064e:	416d      	adcs	r5, r5
 8000650:	eb46 0606 	adc.w	r6, r6, r6
 8000654:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000658:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800065c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000660:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000664:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000668:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800066c:	bf88      	it	hi
 800066e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000672:	d81e      	bhi.n	80006b2 <__aeabi_dmul+0xde>
 8000674:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000678:	bf08      	it	eq
 800067a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800067e:	f150 0000 	adcs.w	r0, r0, #0
 8000682:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800068c:	ea46 0101 	orr.w	r1, r6, r1
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	ea81 0103 	eor.w	r1, r1, r3
 8000698:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800069c:	bfc2      	ittt	gt
 800069e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006a6:	bd70      	popgt	{r4, r5, r6, pc}
 80006a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006ac:	f04f 0e00 	mov.w	lr, #0
 80006b0:	3c01      	subs	r4, #1
 80006b2:	f300 80ab 	bgt.w	800080c <__aeabi_dmul+0x238>
 80006b6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ba:	bfde      	ittt	le
 80006bc:	2000      	movle	r0, #0
 80006be:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006c2:	bd70      	pople	{r4, r5, r6, pc}
 80006c4:	f1c4 0400 	rsb	r4, r4, #0
 80006c8:	3c20      	subs	r4, #32
 80006ca:	da35      	bge.n	8000738 <__aeabi_dmul+0x164>
 80006cc:	340c      	adds	r4, #12
 80006ce:	dc1b      	bgt.n	8000708 <__aeabi_dmul+0x134>
 80006d0:	f104 0414 	add.w	r4, r4, #20
 80006d4:	f1c4 0520 	rsb	r5, r4, #32
 80006d8:	fa00 f305 	lsl.w	r3, r0, r5
 80006dc:	fa20 f004 	lsr.w	r0, r0, r4
 80006e0:	fa01 f205 	lsl.w	r2, r1, r5
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	fa21 f604 	lsr.w	r6, r1, r4
 80006f8:	eb42 0106 	adc.w	r1, r2, r6
 80006fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000700:	bf08      	it	eq
 8000702:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000706:	bd70      	pop	{r4, r5, r6, pc}
 8000708:	f1c4 040c 	rsb	r4, r4, #12
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f304 	lsl.w	r3, r0, r4
 8000714:	fa20 f005 	lsr.w	r0, r0, r5
 8000718:	fa01 f204 	lsl.w	r2, r1, r4
 800071c:	ea40 0002 	orr.w	r0, r0, r2
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	f141 0100 	adc.w	r1, r1, #0
 800072c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000730:	bf08      	it	eq
 8000732:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000736:	bd70      	pop	{r4, r5, r6, pc}
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f205 	lsl.w	r2, r0, r5
 8000740:	ea4e 0e02 	orr.w	lr, lr, r2
 8000744:	fa20 f304 	lsr.w	r3, r0, r4
 8000748:	fa01 f205 	lsl.w	r2, r1, r5
 800074c:	ea43 0302 	orr.w	r3, r3, r2
 8000750:	fa21 f004 	lsr.w	r0, r1, r4
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	fa21 f204 	lsr.w	r2, r1, r4
 800075c:	ea20 0002 	bic.w	r0, r0, r2
 8000760:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000768:	bf08      	it	eq
 800076a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f094 0f00 	teq	r4, #0
 8000774:	d10f      	bne.n	8000796 <__aeabi_dmul+0x1c2>
 8000776:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800077a:	0040      	lsls	r0, r0, #1
 800077c:	eb41 0101 	adc.w	r1, r1, r1
 8000780:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000784:	bf08      	it	eq
 8000786:	3c01      	subeq	r4, #1
 8000788:	d0f7      	beq.n	800077a <__aeabi_dmul+0x1a6>
 800078a:	ea41 0106 	orr.w	r1, r1, r6
 800078e:	f095 0f00 	teq	r5, #0
 8000792:	bf18      	it	ne
 8000794:	4770      	bxne	lr
 8000796:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800079a:	0052      	lsls	r2, r2, #1
 800079c:	eb43 0303 	adc.w	r3, r3, r3
 80007a0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007a4:	bf08      	it	eq
 80007a6:	3d01      	subeq	r5, #1
 80007a8:	d0f7      	beq.n	800079a <__aeabi_dmul+0x1c6>
 80007aa:	ea43 0306 	orr.w	r3, r3, r6
 80007ae:	4770      	bx	lr
 80007b0:	ea94 0f0c 	teq	r4, ip
 80007b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007b8:	bf18      	it	ne
 80007ba:	ea95 0f0c 	teqne	r5, ip
 80007be:	d00c      	beq.n	80007da <__aeabi_dmul+0x206>
 80007c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c4:	bf18      	it	ne
 80007c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ca:	d1d1      	bne.n	8000770 <__aeabi_dmul+0x19c>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007de:	bf06      	itte	eq
 80007e0:	4610      	moveq	r0, r2
 80007e2:	4619      	moveq	r1, r3
 80007e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e8:	d019      	beq.n	800081e <__aeabi_dmul+0x24a>
 80007ea:	ea94 0f0c 	teq	r4, ip
 80007ee:	d102      	bne.n	80007f6 <__aeabi_dmul+0x222>
 80007f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007f4:	d113      	bne.n	800081e <__aeabi_dmul+0x24a>
 80007f6:	ea95 0f0c 	teq	r5, ip
 80007fa:	d105      	bne.n	8000808 <__aeabi_dmul+0x234>
 80007fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000800:	bf1c      	itt	ne
 8000802:	4610      	movne	r0, r2
 8000804:	4619      	movne	r1, r3
 8000806:	d10a      	bne.n	800081e <__aeabi_dmul+0x24a>
 8000808:	ea81 0103 	eor.w	r1, r1, r3
 800080c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000810:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000814:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000822:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000826:	bd70      	pop	{r4, r5, r6, pc}

08000828 <__aeabi_ddiv>:
 8000828:	b570      	push	{r4, r5, r6, lr}
 800082a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800082e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000832:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000836:	bf1d      	ittte	ne
 8000838:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800083c:	ea94 0f0c 	teqne	r4, ip
 8000840:	ea95 0f0c 	teqne	r5, ip
 8000844:	f000 f8a7 	bleq	8000996 <__aeabi_ddiv+0x16e>
 8000848:	eba4 0405 	sub.w	r4, r4, r5
 800084c:	ea81 0e03 	eor.w	lr, r1, r3
 8000850:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000854:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000858:	f000 8088 	beq.w	800096c <__aeabi_ddiv+0x144>
 800085c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000860:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000864:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000868:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800086c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000870:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000874:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000878:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800087c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000880:	429d      	cmp	r5, r3
 8000882:	bf08      	it	eq
 8000884:	4296      	cmpeq	r6, r2
 8000886:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800088a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800088e:	d202      	bcs.n	8000896 <__aeabi_ddiv+0x6e>
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	1ab6      	subs	r6, r6, r2
 8000898:	eb65 0503 	sbc.w	r5, r5, r3
 800089c:	085b      	lsrs	r3, r3, #1
 800089e:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008a6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b2:	bf22      	ittt	cs
 80008b4:	1ab6      	subcs	r6, r6, r2
 80008b6:	4675      	movcs	r5, lr
 80008b8:	ea40 000c 	orrcs.w	r0, r0, ip
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ca:	bf22      	ittt	cs
 80008cc:	1ab6      	subcs	r6, r6, r2
 80008ce:	4675      	movcs	r5, lr
 80008d0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	ebb6 0e02 	subs.w	lr, r6, r2
 80008de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e2:	bf22      	ittt	cs
 80008e4:	1ab6      	subcs	r6, r6, r2
 80008e6:	4675      	movcs	r5, lr
 80008e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fa:	bf22      	ittt	cs
 80008fc:	1ab6      	subcs	r6, r6, r2
 80008fe:	4675      	movcs	r5, lr
 8000900:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000904:	ea55 0e06 	orrs.w	lr, r5, r6
 8000908:	d018      	beq.n	800093c <__aeabi_ddiv+0x114>
 800090a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800090e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000912:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000916:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800091a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800091e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000922:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000926:	d1c0      	bne.n	80008aa <__aeabi_ddiv+0x82>
 8000928:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800092c:	d10b      	bne.n	8000946 <__aeabi_ddiv+0x11e>
 800092e:	ea41 0100 	orr.w	r1, r1, r0
 8000932:	f04f 0000 	mov.w	r0, #0
 8000936:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800093a:	e7b6      	b.n	80008aa <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	bf04      	itt	eq
 8000942:	4301      	orreq	r1, r0
 8000944:	2000      	moveq	r0, #0
 8000946:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800094a:	bf88      	it	hi
 800094c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000950:	f63f aeaf 	bhi.w	80006b2 <__aeabi_dmul+0xde>
 8000954:	ebb5 0c03 	subs.w	ip, r5, r3
 8000958:	bf04      	itt	eq
 800095a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800095e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000962:	f150 0000 	adcs.w	r0, r0, #0
 8000966:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800096a:	bd70      	pop	{r4, r5, r6, pc}
 800096c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000970:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000974:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000978:	bfc2      	ittt	gt
 800097a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800097e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000982:	bd70      	popgt	{r4, r5, r6, pc}
 8000984:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000988:	f04f 0e00 	mov.w	lr, #0
 800098c:	3c01      	subs	r4, #1
 800098e:	e690      	b.n	80006b2 <__aeabi_dmul+0xde>
 8000990:	ea45 0e06 	orr.w	lr, r5, r6
 8000994:	e68d      	b.n	80006b2 <__aeabi_dmul+0xde>
 8000996:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800099a:	ea94 0f0c 	teq	r4, ip
 800099e:	bf08      	it	eq
 80009a0:	ea95 0f0c 	teqeq	r5, ip
 80009a4:	f43f af3b 	beq.w	800081e <__aeabi_dmul+0x24a>
 80009a8:	ea94 0f0c 	teq	r4, ip
 80009ac:	d10a      	bne.n	80009c4 <__aeabi_ddiv+0x19c>
 80009ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009b2:	f47f af34 	bne.w	800081e <__aeabi_dmul+0x24a>
 80009b6:	ea95 0f0c 	teq	r5, ip
 80009ba:	f47f af25 	bne.w	8000808 <__aeabi_dmul+0x234>
 80009be:	4610      	mov	r0, r2
 80009c0:	4619      	mov	r1, r3
 80009c2:	e72c      	b.n	800081e <__aeabi_dmul+0x24a>
 80009c4:	ea95 0f0c 	teq	r5, ip
 80009c8:	d106      	bne.n	80009d8 <__aeabi_ddiv+0x1b0>
 80009ca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ce:	f43f aefd 	beq.w	80007cc <__aeabi_dmul+0x1f8>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e722      	b.n	800081e <__aeabi_dmul+0x24a>
 80009d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009dc:	bf18      	it	ne
 80009de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009e2:	f47f aec5 	bne.w	8000770 <__aeabi_dmul+0x19c>
 80009e6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ea:	f47f af0d 	bne.w	8000808 <__aeabi_dmul+0x234>
 80009ee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009f2:	f47f aeeb 	bne.w	80007cc <__aeabi_dmul+0x1f8>
 80009f6:	e712      	b.n	800081e <__aeabi_dmul+0x24a>

080009f8 <__gedf2>:
 80009f8:	f04f 3cff 	mov.w	ip, #4294967295
 80009fc:	e006      	b.n	8000a0c <__cmpdf2+0x4>
 80009fe:	bf00      	nop

08000a00 <__ledf2>:
 8000a00:	f04f 0c01 	mov.w	ip, #1
 8000a04:	e002      	b.n	8000a0c <__cmpdf2+0x4>
 8000a06:	bf00      	nop

08000a08 <__cmpdf2>:
 8000a08:	f04f 0c01 	mov.w	ip, #1
 8000a0c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	bf18      	it	ne
 8000a1e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a22:	d01b      	beq.n	8000a5c <__cmpdf2+0x54>
 8000a24:	b001      	add	sp, #4
 8000a26:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a2a:	bf0c      	ite	eq
 8000a2c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a30:	ea91 0f03 	teqne	r1, r3
 8000a34:	bf02      	ittt	eq
 8000a36:	ea90 0f02 	teqeq	r0, r2
 8000a3a:	2000      	moveq	r0, #0
 8000a3c:	4770      	bxeq	lr
 8000a3e:	f110 0f00 	cmn.w	r0, #0
 8000a42:	ea91 0f03 	teq	r1, r3
 8000a46:	bf58      	it	pl
 8000a48:	4299      	cmppl	r1, r3
 8000a4a:	bf08      	it	eq
 8000a4c:	4290      	cmpeq	r0, r2
 8000a4e:	bf2c      	ite	cs
 8000a50:	17d8      	asrcs	r0, r3, #31
 8000a52:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a56:	f040 0001 	orr.w	r0, r0, #1
 8000a5a:	4770      	bx	lr
 8000a5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a64:	d102      	bne.n	8000a6c <__cmpdf2+0x64>
 8000a66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a6a:	d107      	bne.n	8000a7c <__cmpdf2+0x74>
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	d1d6      	bne.n	8000a24 <__cmpdf2+0x1c>
 8000a76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a7a:	d0d3      	beq.n	8000a24 <__cmpdf2+0x1c>
 8000a7c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_cdrcmple>:
 8000a84:	4684      	mov	ip, r0
 8000a86:	4610      	mov	r0, r2
 8000a88:	4662      	mov	r2, ip
 8000a8a:	468c      	mov	ip, r1
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4663      	mov	r3, ip
 8000a90:	e000      	b.n	8000a94 <__aeabi_cdcmpeq>
 8000a92:	bf00      	nop

08000a94 <__aeabi_cdcmpeq>:
 8000a94:	b501      	push	{r0, lr}
 8000a96:	f7ff ffb7 	bl	8000a08 <__cmpdf2>
 8000a9a:	2800      	cmp	r0, #0
 8000a9c:	bf48      	it	mi
 8000a9e:	f110 0f00 	cmnmi.w	r0, #0
 8000aa2:	bd01      	pop	{r0, pc}

08000aa4 <__aeabi_dcmpeq>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff fff4 	bl	8000a94 <__aeabi_cdcmpeq>
 8000aac:	bf0c      	ite	eq
 8000aae:	2001      	moveq	r0, #1
 8000ab0:	2000      	movne	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmplt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffea 	bl	8000a94 <__aeabi_cdcmpeq>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmple>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffe0 	bl	8000a94 <__aeabi_cdcmpeq>
 8000ad4:	bf94      	ite	ls
 8000ad6:	2001      	movls	r0, #1
 8000ad8:	2000      	movhi	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmpge>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffce 	bl	8000a84 <__aeabi_cdrcmple>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpgt>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffc4 	bl	8000a84 <__aeabi_cdrcmple>
 8000afc:	bf34      	ite	cc
 8000afe:	2001      	movcc	r0, #1
 8000b00:	2000      	movcs	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpun>:
 8000b08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b10:	d102      	bne.n	8000b18 <__aeabi_dcmpun+0x10>
 8000b12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b16:	d10a      	bne.n	8000b2e <__aeabi_dcmpun+0x26>
 8000b18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b20:	d102      	bne.n	8000b28 <__aeabi_dcmpun+0x20>
 8000b22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b26:	d102      	bne.n	8000b2e <__aeabi_dcmpun+0x26>
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	f04f 0001 	mov.w	r0, #1
 8000b32:	4770      	bx	lr

08000b34 <__aeabi_d2iz>:
 8000b34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b3c:	d215      	bcs.n	8000b6a <__aeabi_d2iz+0x36>
 8000b3e:	d511      	bpl.n	8000b64 <__aeabi_d2iz+0x30>
 8000b40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b48:	d912      	bls.n	8000b70 <__aeabi_d2iz+0x3c>
 8000b4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b5e:	bf18      	it	ne
 8000b60:	4240      	negne	r0, r0
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b6e:	d105      	bne.n	8000b7c <__aeabi_d2iz+0x48>
 8000b70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b74:	bf08      	it	eq
 8000b76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop

08000b84 <__aeabi_d2f>:
 8000b84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b8c:	bf24      	itt	cs
 8000b8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b96:	d90d      	bls.n	8000bb4 <__aeabi_d2f+0x30>
 8000b98:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bac:	bf08      	it	eq
 8000bae:	f020 0001 	biceq.w	r0, r0, #1
 8000bb2:	4770      	bx	lr
 8000bb4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb8:	d121      	bne.n	8000bfe <__aeabi_d2f+0x7a>
 8000bba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bbe:	bfbc      	itt	lt
 8000bc0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bc4:	4770      	bxlt	lr
 8000bc6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bce:	f1c2 0218 	rsb	r2, r2, #24
 8000bd2:	f1c2 0c20 	rsb	ip, r2, #32
 8000bd6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bda:	fa20 f002 	lsr.w	r0, r0, r2
 8000bde:	bf18      	it	ne
 8000be0:	f040 0001 	orrne.w	r0, r0, #1
 8000be4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf0:	ea40 000c 	orr.w	r0, r0, ip
 8000bf4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bfc:	e7cc      	b.n	8000b98 <__aeabi_d2f+0x14>
 8000bfe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c02:	d107      	bne.n	8000c14 <__aeabi_d2f+0x90>
 8000c04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c08:	bf1e      	ittt	ne
 8000c0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c12:	4770      	bxne	lr
 8000c14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop

08000c24 <__aeabi_uldivmod>:
 8000c24:	b953      	cbnz	r3, 8000c3c <__aeabi_uldivmod+0x18>
 8000c26:	b94a      	cbnz	r2, 8000c3c <__aeabi_uldivmod+0x18>
 8000c28:	2900      	cmp	r1, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	2800      	cmpeq	r0, #0
 8000c2e:	bf1c      	itt	ne
 8000c30:	f04f 31ff 	movne.w	r1, #4294967295
 8000c34:	f04f 30ff 	movne.w	r0, #4294967295
 8000c38:	f000 b9b6 	b.w	8000fa8 <__aeabi_idiv0>
 8000c3c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c40:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c44:	f000 f840 	bl	8000cc8 <__udivmoddi4>
 8000c48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c50:	b004      	add	sp, #16
 8000c52:	4770      	bx	lr

08000c54 <__aeabi_d2lz>:
 8000c54:	b538      	push	{r3, r4, r5, lr}
 8000c56:	2200      	movs	r2, #0
 8000c58:	2300      	movs	r3, #0
 8000c5a:	4604      	mov	r4, r0
 8000c5c:	460d      	mov	r5, r1
 8000c5e:	f7ff ff2b 	bl	8000ab8 <__aeabi_dcmplt>
 8000c62:	b928      	cbnz	r0, 8000c70 <__aeabi_d2lz+0x1c>
 8000c64:	4620      	mov	r0, r4
 8000c66:	4629      	mov	r1, r5
 8000c68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c6c:	f000 b80a 	b.w	8000c84 <__aeabi_d2ulz>
 8000c70:	4620      	mov	r0, r4
 8000c72:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c76:	f000 f805 	bl	8000c84 <__aeabi_d2ulz>
 8000c7a:	4240      	negs	r0, r0
 8000c7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c80:	bd38      	pop	{r3, r4, r5, pc}
 8000c82:	bf00      	nop

08000c84 <__aeabi_d2ulz>:
 8000c84:	b5d0      	push	{r4, r6, r7, lr}
 8000c86:	2200      	movs	r2, #0
 8000c88:	4b0d      	ldr	r3, [pc, #52]	; (8000cc0 <__aeabi_d2ulz+0x3c>)
 8000c8a:	4606      	mov	r6, r0
 8000c8c:	460f      	mov	r7, r1
 8000c8e:	f7ff fca1 	bl	80005d4 <__aeabi_dmul>
 8000c92:	f000 f98b 	bl	8000fac <__aeabi_d2uiz>
 8000c96:	4604      	mov	r4, r0
 8000c98:	f7ff fc22 	bl	80004e0 <__aeabi_ui2d>
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <__aeabi_d2ulz+0x40>)
 8000ca0:	f7ff fc98 	bl	80005d4 <__aeabi_dmul>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	460b      	mov	r3, r1
 8000ca8:	4630      	mov	r0, r6
 8000caa:	4639      	mov	r1, r7
 8000cac:	f7ff fada 	bl	8000264 <__aeabi_dsub>
 8000cb0:	f000 f97c 	bl	8000fac <__aeabi_d2uiz>
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	4623      	mov	r3, r4
 8000cb8:	4310      	orrs	r0, r2
 8000cba:	4619      	mov	r1, r3
 8000cbc:	bdd0      	pop	{r4, r6, r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	3df00000 	.word	0x3df00000
 8000cc4:	41f00000 	.word	0x41f00000

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	468c      	mov	ip, r1
 8000cce:	9d08      	ldr	r5, [sp, #32]
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	468a      	mov	sl, r1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d14a      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4617      	mov	r7, r2
 8000cdc:	d962      	bls.n	8000da4 <__udivmoddi4+0xdc>
 8000cde:	fab2 f682 	clz	r6, r2
 8000ce2:	b14e      	cbz	r6, 8000cf8 <__udivmoddi4+0x30>
 8000ce4:	f1c6 0e20 	rsb	lr, r6, #32
 8000ce8:	fa01 f306 	lsl.w	r3, r1, r6
 8000cec:	40b7      	lsls	r7, r6
 8000cee:	40b4      	lsls	r4, r6
 8000cf0:	fa20 fe0e 	lsr.w	lr, r0, lr
 8000cf4:	ea4e 0a03 	orr.w	sl, lr, r3
 8000cf8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cfc:	0c23      	lsrs	r3, r4, #16
 8000cfe:	fa1f f987 	uxth.w	r9, r7
 8000d02:	fbba fef8 	udiv	lr, sl, r8
 8000d06:	fb08 aa1e 	mls	sl, r8, lr, sl
 8000d0a:	fb0e f209 	mul.w	r2, lr, r9
 8000d0e:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d90b      	bls.n	8000d2e <__udivmoddi4+0x66>
 8000d16:	18fb      	adds	r3, r7, r3
 8000d18:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000d1c:	bf2c      	ite	cs
 8000d1e:	2001      	movcs	r0, #1
 8000d20:	2000      	movcc	r0, #0
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d902      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d26:	2800      	cmp	r0, #0
 8000d28:	f000 812a 	beq.w	8000f80 <__udivmoddi4+0x2b8>
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	1a9a      	subs	r2, r3, r2
 8000d30:	b2a3      	uxth	r3, r4
 8000d32:	fbb2 f0f8 	udiv	r0, r2, r8
 8000d36:	fb08 2210 	mls	r2, r8, r0, r2
 8000d3a:	fb00 f909 	mul.w	r9, r0, r9
 8000d3e:	ea43 4402 	orr.w	r4, r3, r2, lsl #16
 8000d42:	45a1      	cmp	r9, r4
 8000d44:	d907      	bls.n	8000d56 <__udivmoddi4+0x8e>
 8000d46:	193c      	adds	r4, r7, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x8c>
 8000d4e:	45a1      	cmp	r9, r4
 8000d50:	f200 8110 	bhi.w	8000f74 <__udivmoddi4+0x2ac>
 8000d54:	4618      	mov	r0, r3
 8000d56:	eba4 0409 	sub.w	r4, r4, r9
 8000d5a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000d5e:	2100      	movs	r1, #0
 8000d60:	b11d      	cbz	r5, 8000d6a <__udivmoddi4+0xa2>
 8000d62:	40f4      	lsrs	r4, r6
 8000d64:	2300      	movs	r3, #0
 8000d66:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0xbc>
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	f000 80f2 	beq.w	8000f5c <__udivmoddi4+0x294>
 8000d78:	2100      	movs	r1, #0
 8000d7a:	e9c5 0c00 	strd	r0, ip, [r5]
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d84:	fab3 f183 	clz	r1, r3
 8000d88:	2900      	cmp	r1, #0
 8000d8a:	d14e      	bne.n	8000e2a <__udivmoddi4+0x162>
 8000d8c:	4563      	cmp	r3, ip
 8000d8e:	f0c0 80e8 	bcc.w	8000f62 <__udivmoddi4+0x29a>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f240 80e5 	bls.w	8000f62 <__udivmoddi4+0x29a>
 8000d98:	4608      	mov	r0, r1
 8000d9a:	2d00      	cmp	r5, #0
 8000d9c:	d0e5      	beq.n	8000d6a <__udivmoddi4+0xa2>
 8000d9e:	e9c5 4a00 	strd	r4, sl, [r5]
 8000da2:	e7e2      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000da4:	b902      	cbnz	r2, 8000da8 <__udivmoddi4+0xe0>
 8000da6:	deff      	udf	#255	; 0xff
 8000da8:	fab2 f682 	clz	r6, r2
 8000dac:	2e00      	cmp	r6, #0
 8000dae:	f040 8099 	bne.w	8000ee4 <__udivmoddi4+0x21c>
 8000db2:	1a8b      	subs	r3, r1, r2
 8000db4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000db8:	fa1f f882 	uxth.w	r8, r2
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000dc2:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dc6:	fb0e 3012 	mls	r0, lr, r2, r3
 8000dca:	fb08 f902 	mul.w	r9, r8, r2
 8000dce:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
 8000dd2:	45e1      	cmp	r9, ip
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x120>
 8000dd6:	eb17 0c0c 	adds.w	ip, r7, ip
 8000dda:	f102 33ff 	add.w	r3, r2, #4294967295
 8000dde:	d202      	bcs.n	8000de6 <__udivmoddi4+0x11e>
 8000de0:	45e1      	cmp	r9, ip
 8000de2:	f200 80ca 	bhi.w	8000f7a <__udivmoddi4+0x2b2>
 8000de6:	461a      	mov	r2, r3
 8000de8:	ebac 0c09 	sub.w	ip, ip, r9
 8000dec:	b2a3      	uxth	r3, r4
 8000dee:	fbbc f0fe 	udiv	r0, ip, lr
 8000df2:	fb0e cc10 	mls	ip, lr, r0, ip
 8000df6:	fb08 f800 	mul.w	r8, r8, r0
 8000dfa:	ea43 440c 	orr.w	r4, r3, ip, lsl #16
 8000dfe:	45a0      	cmp	r8, r4
 8000e00:	d90e      	bls.n	8000e20 <__udivmoddi4+0x158>
 8000e02:	193c      	adds	r4, r7, r4
 8000e04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e08:	bf2c      	ite	cs
 8000e0a:	f04f 0c01 	movcs.w	ip, #1
 8000e0e:	f04f 0c00 	movcc.w	ip, #0
 8000e12:	45a0      	cmp	r8, r4
 8000e14:	d903      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e16:	f1bc 0f00 	cmp.w	ip, #0
 8000e1a:	f000 80a8 	beq.w	8000f6e <__udivmoddi4+0x2a6>
 8000e1e:	4618      	mov	r0, r3
 8000e20:	eba4 0408 	sub.w	r4, r4, r8
 8000e24:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000e28:	e79a      	b.n	8000d60 <__udivmoddi4+0x98>
 8000e2a:	f1c1 0420 	rsb	r4, r1, #32
 8000e2e:	408b      	lsls	r3, r1
 8000e30:	fa02 fe01 	lsl.w	lr, r2, r1
 8000e34:	fa0c f601 	lsl.w	r6, ip, r1
 8000e38:	40e2      	lsrs	r2, r4
 8000e3a:	fa20 f704 	lsr.w	r7, r0, r4
 8000e3e:	fa2c fc04 	lsr.w	ip, ip, r4
 8000e42:	fa00 f801 	lsl.w	r8, r0, r1
 8000e46:	4313      	orrs	r3, r2
 8000e48:	433e      	orrs	r6, r7
 8000e4a:	0c1f      	lsrs	r7, r3, #16
 8000e4c:	0c32      	lsrs	r2, r6, #16
 8000e4e:	fa1f f983 	uxth.w	r9, r3
 8000e52:	fbbc f0f7 	udiv	r0, ip, r7
 8000e56:	fb07 cc10 	mls	ip, r7, r0, ip
 8000e5a:	fb00 fa09 	mul.w	sl, r0, r9
 8000e5e:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
 8000e62:	45e2      	cmp	sl, ip
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e66:	eb13 0c0c 	adds.w	ip, r3, ip
 8000e6a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x1ae>
 8000e70:	45e2      	cmp	sl, ip
 8000e72:	f200 8089 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000e76:	4610      	mov	r0, r2
 8000e78:	ebac 0c0a 	sub.w	ip, ip, sl
 8000e7c:	b2b6      	uxth	r6, r6
 8000e7e:	fbbc faf7 	udiv	sl, ip, r7
 8000e82:	fb07 cc1a 	mls	ip, r7, sl, ip
 8000e86:	fb0a f909 	mul.w	r9, sl, r9
 8000e8a:	ea46 420c 	orr.w	r2, r6, ip, lsl #16
 8000e8e:	4591      	cmp	r9, r2
 8000e90:	d906      	bls.n	8000ea0 <__udivmoddi4+0x1d8>
 8000e92:	189a      	adds	r2, r3, r2
 8000e94:	f10a 36ff 	add.w	r6, sl, #4294967295
 8000e98:	d201      	bcs.n	8000e9e <__udivmoddi4+0x1d6>
 8000e9a:	4591      	cmp	r9, r2
 8000e9c:	d87a      	bhi.n	8000f94 <__udivmoddi4+0x2cc>
 8000e9e:	46b2      	mov	sl, r6
 8000ea0:	ea4a 4000 	orr.w	r0, sl, r0, lsl #16
 8000ea4:	eba2 0209 	sub.w	r2, r2, r9
 8000ea8:	fba0 670e 	umull	r6, r7, r0, lr
 8000eac:	42ba      	cmp	r2, r7
 8000eae:	46b4      	mov	ip, r6
 8000eb0:	46b9      	mov	r9, r7
 8000eb2:	d302      	bcc.n	8000eba <__udivmoddi4+0x1f2>
 8000eb4:	d107      	bne.n	8000ec6 <__udivmoddi4+0x1fe>
 8000eb6:	45b0      	cmp	r8, r6
 8000eb8:	d205      	bcs.n	8000ec6 <__udivmoddi4+0x1fe>
 8000eba:	ebb6 0c0e 	subs.w	ip, r6, lr
 8000ebe:	eb67 0303 	sbc.w	r3, r7, r3
 8000ec2:	3801      	subs	r0, #1
 8000ec4:	4699      	mov	r9, r3
 8000ec6:	2d00      	cmp	r5, #0
 8000ec8:	d06b      	beq.n	8000fa2 <__udivmoddi4+0x2da>
 8000eca:	ebb8 030c 	subs.w	r3, r8, ip
 8000ece:	eb62 0209 	sbc.w	r2, r2, r9
 8000ed2:	fa02 f404 	lsl.w	r4, r2, r4
 8000ed6:	40cb      	lsrs	r3, r1
 8000ed8:	40ca      	lsrs	r2, r1
 8000eda:	2100      	movs	r1, #0
 8000edc:	431c      	orrs	r4, r3
 8000ede:	e9c5 4200 	strd	r4, r2, [r5]
 8000ee2:	e742      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000ee4:	40b7      	lsls	r7, r6
 8000ee6:	f1c6 0220 	rsb	r2, r6, #32
 8000eea:	fa01 f306 	lsl.w	r3, r1, r6
 8000eee:	40b4      	lsls	r4, r6
 8000ef0:	fa21 fc02 	lsr.w	ip, r1, r2
 8000ef4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ef8:	fa20 f202 	lsr.w	r2, r0, r2
 8000efc:	fa1f f887 	uxth.w	r8, r7
 8000f00:	fbbc f1fe 	udiv	r1, ip, lr
 8000f04:	431a      	orrs	r2, r3
 8000f06:	fb0e cc11 	mls	ip, lr, r1, ip
 8000f0a:	fb01 f008 	mul.w	r0, r1, r8
 8000f0e:	0c13      	lsrs	r3, r2, #16
 8000f10:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
 8000f14:	4560      	cmp	r0, ip
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f18:	eb17 0c0c 	adds.w	ip, r7, ip
 8000f1c:	f101 33ff 	add.w	r3, r1, #4294967295
 8000f20:	d201      	bcs.n	8000f26 <__udivmoddi4+0x25e>
 8000f22:	4560      	cmp	r0, ip
 8000f24:	d833      	bhi.n	8000f8e <__udivmoddi4+0x2c6>
 8000f26:	4619      	mov	r1, r3
 8000f28:	ebac 0c00 	sub.w	ip, ip, r0
 8000f2c:	b292      	uxth	r2, r2
 8000f2e:	fbbc f0fe 	udiv	r0, ip, lr
 8000f32:	fb0e cc10 	mls	ip, lr, r0, ip
 8000f36:	fb00 f308 	mul.w	r3, r0, r8
 8000f3a:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
 8000f3e:	4563      	cmp	r3, ip
 8000f40:	d907      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f42:	eb17 0c0c 	adds.w	ip, r7, ip
 8000f46:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f4a:	d201      	bcs.n	8000f50 <__udivmoddi4+0x288>
 8000f4c:	4563      	cmp	r3, ip
 8000f4e:	d825      	bhi.n	8000f9c <__udivmoddi4+0x2d4>
 8000f50:	4610      	mov	r0, r2
 8000f52:	ebac 0303 	sub.w	r3, ip, r3
 8000f56:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f5a:	e730      	b.n	8000dbe <__udivmoddi4+0xf6>
 8000f5c:	4629      	mov	r1, r5
 8000f5e:	4628      	mov	r0, r5
 8000f60:	e703      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000f62:	1a84      	subs	r4, r0, r2
 8000f64:	eb6c 0303 	sbc.w	r3, ip, r3
 8000f68:	2001      	movs	r0, #1
 8000f6a:	469a      	mov	sl, r3
 8000f6c:	e715      	b.n	8000d9a <__udivmoddi4+0xd2>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	443c      	add	r4, r7
 8000f72:	e755      	b.n	8000e20 <__udivmoddi4+0x158>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e6ed      	b.n	8000d56 <__udivmoddi4+0x8e>
 8000f7a:	3a02      	subs	r2, #2
 8000f7c:	44bc      	add	ip, r7
 8000f7e:	e733      	b.n	8000de8 <__udivmoddi4+0x120>
 8000f80:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f84:	443b      	add	r3, r7
 8000f86:	e6d2      	b.n	8000d2e <__udivmoddi4+0x66>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	449c      	add	ip, r3
 8000f8c:	e774      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f8e:	3902      	subs	r1, #2
 8000f90:	44bc      	add	ip, r7
 8000f92:	e7c9      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f94:	f1aa 0a02 	sub.w	sl, sl, #2
 8000f98:	441a      	add	r2, r3
 8000f9a:	e781      	b.n	8000ea0 <__udivmoddi4+0x1d8>
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	44bc      	add	ip, r7
 8000fa0:	e7d7      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000fa2:	4629      	mov	r1, r5
 8000fa4:	e6e1      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000fa6:	bf00      	nop

08000fa8 <__aeabi_idiv0>:
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop

08000fac <__aeabi_d2uiz>:
 8000fac:	004a      	lsls	r2, r1, #1
 8000fae:	d211      	bcs.n	8000fd4 <__aeabi_d2uiz+0x28>
 8000fb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000fb4:	d211      	bcs.n	8000fda <__aeabi_d2uiz+0x2e>
 8000fb6:	d50d      	bpl.n	8000fd4 <__aeabi_d2uiz+0x28>
 8000fb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000fbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000fc0:	d40e      	bmi.n	8000fe0 <__aeabi_d2uiz+0x34>
 8000fc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000fc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000fce:	fa23 f002 	lsr.w	r0, r3, r2
 8000fd2:	4770      	bx	lr
 8000fd4:	f04f 0000 	mov.w	r0, #0
 8000fd8:	4770      	bx	lr
 8000fda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000fde:	d102      	bne.n	8000fe6 <__aeabi_d2uiz+0x3a>
 8000fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe4:	4770      	bx	lr
 8000fe6:	f04f 0000 	mov.w	r0, #0
 8000fea:	4770      	bx	lr

08000fec <_ZN6tflite13ErrorReporterD1Ev>:
/// Subclass ErrorReporter to provide another reporting destination.
/// For example, if you have a GUI program, you might redirect to a buffer
/// that drives a GUI error log box.
class ErrorReporter {
 public:
  virtual ~ErrorReporter() {}
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	4a04      	ldr	r2, [pc, #16]	; (8001008 <_ZN6tflite13ErrorReporterD1Ev+0x1c>)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	0802553c 	.word	0x0802553c

0800100c <_ZN6tflite13ErrorReporterD0Ev>:
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff ffe9 	bl	8000fec <_ZN6tflite13ErrorReporterD1Ev>
 800101a:	2104      	movs	r1, #4
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f01d fc8e 	bl	801e93e <_ZdlPvj>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4618      	mov	r0, r3
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <_ZN6tflite18MicroErrorReporterD1Ev>:

namespace tflite {

class MicroErrorReporter : public ErrorReporter {
 public:
  ~MicroErrorReporter() override {}
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	4a05      	ldr	r2, [pc, #20]	; (800104c <_ZN6tflite18MicroErrorReporterD1Ev+0x20>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ffd5 	bl	8000fec <_ZN6tflite13ErrorReporterD1Ev>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4618      	mov	r0, r3
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	08025f70 	.word	0x08025f70

08001050 <_ZN6tflite18MicroErrorReporterD0Ev>:
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f7ff ffe7 	bl	800102c <_ZN6tflite18MicroErrorReporterD1Ev>
 800105e:	2104      	movs	r1, #4
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f01d fc6c 	bl	801e93e <_ZdlPvj>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4618      	mov	r0, r3
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <_ZN11flatbuffers11EndianCheckEv>:
  Offset(uoffset_t _o) : o(_o) {}
  Offset<void> Union() const { return Offset<void>(o); }
  bool IsNull() const { return !o; }
};

inline void EndianCheck() {
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
  int endiantest = 1;
 8001076:	2301      	movs	r3, #1
 8001078:	607b      	str	r3, [r7, #4]
  // If this fails, see FLATBUFFERS_LITTLEENDIAN above.
  FLATBUFFERS_ASSERT(*reinterpret_cast<char *>(&endiantest) ==
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d005      	beq.n	800108e <_ZN11flatbuffers11EndianCheckEv+0x1e>
 8001082:	4b05      	ldr	r3, [pc, #20]	; (8001098 <_ZN11flatbuffers11EndianCheckEv+0x28>)
 8001084:	4a05      	ldr	r2, [pc, #20]	; (800109c <_ZN11flatbuffers11EndianCheckEv+0x2c>)
 8001086:	2149      	movs	r1, #73	; 0x49
 8001088:	4805      	ldr	r0, [pc, #20]	; (80010a0 <_ZN11flatbuffers11EndianCheckEv+0x30>)
 800108a:	f01d fee9 	bl	801ee60 <__assert_func>
                     FLATBUFFERS_LITTLEENDIAN);
  (void)endiantest;
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	08021b00 	.word	0x08021b00
 800109c:	08025548 	.word	0x08025548
 80010a0:	08021b44 	.word	0x08021b44

080010a4 <_ZNK11flatbuffers5Table9GetVTableEv>:

// "tables" use an offset table (possibly shared) that allows fields to be
// omitted and added at will, but uses an extra indirection to read.
class Table {
 public:
  const uint8_t *GetVTable() const {
 80010a4:	b590      	push	{r4, r7, lr}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
    return data_ - ReadScalar<soffset_t>(data_);
 80010ac:	687c      	ldr	r4, [r7, #4]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f000 fbd3 	bl	800185c <_ZN11flatbuffers10ReadScalarIlEET_PKv>
 80010b6:	4603      	mov	r3, r0
 80010b8:	425b      	negs	r3, r3
 80010ba:	4423      	add	r3, r4
  }
 80010bc:	4618      	mov	r0, r3
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd90      	pop	{r4, r7, pc}

080010c4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>:

  // This gets the field offset for any of the functions below it, or 0
  // if the field was not present.
  voffset_t GetOptionalFieldOffset(voffset_t field) const {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	807b      	strh	r3, [r7, #2]
    // The vtable offset is always at the start.
    auto vtable = GetVTable();
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff ffe7 	bl	80010a4 <_ZNK11flatbuffers5Table9GetVTableEv>
 80010d6:	60f8      	str	r0, [r7, #12]
    // The first element is the size of the vtable (fields + type id + itself).
    auto vtsize = ReadScalar<voffset_t>(vtable);
 80010d8:	68f8      	ldr	r0, [r7, #12]
 80010da:	f000 fba3 	bl	8001824 <_ZN11flatbuffers10ReadScalarItEET_PKv>
 80010de:	4603      	mov	r3, r0
 80010e0:	817b      	strh	r3, [r7, #10]
    // If the field we're accessing is outside the vtable, we're reading older
    // data, so it's the same as if the offset was 0 (not present).
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80010e2:	887a      	ldrh	r2, [r7, #2]
 80010e4:	897b      	ldrh	r3, [r7, #10]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d207      	bcs.n	80010fa <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt+0x36>
 80010ea:	887b      	ldrh	r3, [r7, #2]
 80010ec:	68fa      	ldr	r2, [r7, #12]
 80010ee:	4413      	add	r3, r2
 80010f0:	4618      	mov	r0, r3
 80010f2:	f000 fb97 	bl	8001824 <_ZN11flatbuffers10ReadScalarItEET_PKv>
 80010f6:	4603      	mov	r3, r0
 80010f8:	e000      	b.n	80010fc <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt+0x38>
 80010fa:	2300      	movs	r3, #0
  }
 80010fc:	4618      	mov	r0, r3
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <_ZNK6tflite5Model7versionEv>:
    VT_DESCRIPTION = 10,
    VT_BUFFERS = 12,
    VT_METADATA_BUFFER = 14,
    VT_METADATA = 16
  };
  uint32_t version() const {
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_VERSION, 0);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	2104      	movs	r1, #4
 8001112:	4618      	mov	r0, r3
 8001114:	f000 fbb0 	bl	8001878 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 8001118:	4603      	mov	r3, r0
  }
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <_ZN6tflite8GetModelEPKv>:
  }
  value = nullptr;
  type = BuiltinOptions_NONE;
}

inline const tflite::Model *GetModel(const void *buf) {
 8001122:	b580      	push	{r7, lr}
 8001124:	b082      	sub	sp, #8
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
  return flatbuffers::GetRoot<tflite::Model>(buf);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f000 fbc2 	bl	80018b4 <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>
 8001130:	4603      	mov	r3, r0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <_ZN6tflite10OpResolverD1Ev>:
  virtual const TfLiteRegistration* FindOp(tflite::BuiltinOperator op,
                                           int version) const = 0;
  /// Finds the op registration of a custom operator by op name.
  virtual const TfLiteRegistration* FindOp(const char* op,
                                           int version) const = 0;
  virtual ~OpResolver() {}
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	4a04      	ldr	r2, [pc, #16]	; (8001158 <_ZN6tflite10OpResolverD1Ev+0x1c>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4618      	mov	r0, r3
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	08025524 	.word	0x08025524

0800115c <_ZN6tflite10OpResolverD0Ev>:
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff ffe9 	bl	800113c <_ZN6tflite10OpResolverD1Ev>
 800116a:	2104      	movs	r1, #4
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f01d fbe6 	bl	801e93e <_ZdlPvj>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4618      	mov	r0, r3
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi>:
  // name.
  virtual const TfLiteRegistration* FindOp(const char* op) const = 0;

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(BuiltinOperator op,
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	460b      	mov	r3, r1
 8001186:	607a      	str	r2, [r7, #4]
 8001188:	72fb      	strb	r3, [r7, #11]
                                   int version) const final {
    return FindOp(op);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	3318      	adds	r3, #24
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	7afa      	ldrb	r2, [r7, #11]
 8001194:	4611      	mov	r1, r2
 8001196:	68f8      	ldr	r0, [r7, #12]
 8001198:	4798      	blx	r3
 800119a:	4603      	mov	r3, r0
  }
 800119c:	4618      	mov	r0, r3
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <_ZNK6tflite15MicroOpResolver6FindOpEPKci>:

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(const char* op, int version) const final {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
    return FindOp(op);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	331c      	adds	r3, #28
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	68b9      	ldr	r1, [r7, #8]
 80011ba:	68f8      	ldr	r0, [r7, #12]
 80011bc:	4798      	blx	r3
 80011be:	4603      	mov	r3, r0
  }
 80011c0:	4618      	mov	r0, r3
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <_ZN6tflite15MicroOpResolverD1Ev>:

  // Returns the operator specific parsing function for the OpData for a
  // BuiltinOperator (if registered), else nullptr.
  virtual BuiltinParseFunction GetOpDataParser(BuiltinOperator op) const = 0;

  ~MicroOpResolver() override {}
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	4a05      	ldr	r2, [pc, #20]	; (80011e8 <_ZN6tflite15MicroOpResolverD1Ev+0x20>)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff ffaf 	bl	800113c <_ZN6tflite10OpResolverD1Ev>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4618      	mov	r0, r3
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	080254f8 	.word	0x080254f8

080011ec <_ZN6tflite15MicroOpResolverD0Ev>:
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f7ff ffe7 	bl	80011c8 <_ZN6tflite15MicroOpResolverD1Ev>
 80011fa:	2104      	movs	r1, #4
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f01d fb9e 	bl	801e93e <_ZdlPvj>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4618      	mov	r0, r3
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <__tcf_0>:
  MX_USART3_UART_Init();
  MX_TIM16_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim16);

  static tflite::MicroErrorReporter micro_error_reporter;
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
 8001210:	4801      	ldr	r0, [pc, #4]	; (8001218 <__tcf_0+0xc>)
 8001212:	f7ff ff0b 	bl	800102c <_ZN6tflite18MicroErrorReporterD1Ev>
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20016cb8 	.word	0x20016cb8

0800121c <__tcf_1>:
  {
	  error_reporter->Report("Model version does not match Schema");
	  while(1);
  }

  static tflite::MicroMutableOpResolver<4> micro_op_resolver;
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
 8001220:	4801      	ldr	r0, [pc, #4]	; (8001228 <__tcf_1+0xc>)
 8001222:	f000 fc45 	bl	8001ab0 <_ZN6tflite22MicroMutableOpResolverILj4EED1Ev>
 8001226:	bd80      	pop	{r7, pc}
 8001228:	2002cfc4 	.word	0x2002cfc4

0800122c <__tcf_2>:
		  tflite::BuiltinOperator_SOFTMAX,
		  tflite::ops::micro::Register_SOFTMAX());


  static tflite::MicroInterpreter static_interpreter(
		  model, micro_op_resolver, tensor_arena, kTensorArenaSize, error_reporter);
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
 8001230:	4801      	ldr	r0, [pc, #4]	; (8001238 <__tcf_2+0xc>)
 8001232:	f016 ffdd 	bl	80181f0 <_ZN6tflite16MicroInterpreterD1Ev>
 8001236:	bd80      	pop	{r7, pc}
 8001238:	2002d054 	.word	0x2002d054

0800123c <main>:
{
 800123c:	b5b0      	push	{r4, r5, r7, lr}
 800123e:	b098      	sub	sp, #96	; 0x60
 8001240:	af02      	add	r7, sp, #8
  int buf_len = 0;  // For print
 8001242:	2300      	movs	r3, #0
 8001244:	647b      	str	r3, [r7, #68]	; 0x44
  unsigned long timestamp = 0, inference_time = 0;  // Inference time
 8001246:	2300      	movs	r3, #0
 8001248:	643b      	str	r3, [r7, #64]	; 0x40
 800124a:	2300      	movs	r3, #0
 800124c:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint8_t value = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  HAL_Init();
 8001254:	f000 ff77 	bl	8002146 <HAL_Init>
  SystemClock_Config();
 8001258:	f000 f990 	bl	800157c <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 800125c:	f000 fa7a 	bl	8001754 <_ZL12MX_GPIO_Initv>
  MX_USART3_UART_Init();
 8001260:	f000 fa18 	bl	8001694 <_ZL19MX_USART3_UART_Initv>
  MX_TIM16_Init();
 8001264:	f000 f9ea 	bl	800163c <_ZL13MX_TIM16_Initv>
  HAL_TIM_Base_Start(&htim16);
 8001268:	48a5      	ldr	r0, [pc, #660]	; (8001500 <main+0x2c4>)
 800126a:	f002 ff89 	bl	8004180 <HAL_TIM_Base_Start>
  static tflite::MicroErrorReporter micro_error_reporter;
 800126e:	4ba5      	ldr	r3, [pc, #660]	; (8001504 <main+0x2c8>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	2b00      	cmp	r3, #0
 8001278:	d105      	bne.n	8001286 <main+0x4a>
 800127a:	4ba2      	ldr	r3, [pc, #648]	; (8001504 <main+0x2c8>)
 800127c:	2201      	movs	r2, #1
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	48a1      	ldr	r0, [pc, #644]	; (8001508 <main+0x2cc>)
 8001282:	f01d fe0b 	bl	801ee9c <atexit>
  error_reporter = &micro_error_reporter;
 8001286:	4ba1      	ldr	r3, [pc, #644]	; (800150c <main+0x2d0>)
 8001288:	4aa1      	ldr	r2, [pc, #644]	; (8001510 <main+0x2d4>)
 800128a:	601a      	str	r2, [r3, #0]
  error_reporter->Report("STM32 Tensorflow Lite test");
 800128c:	4b9f      	ldr	r3, [pc, #636]	; (800150c <main+0x2d0>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	49a0      	ldr	r1, [pc, #640]	; (8001514 <main+0x2d8>)
 8001292:	4618      	mov	r0, r3
 8001294:	f004 f89a 	bl	80053cc <_ZN6tflite13ErrorReporter6ReportEPKcz>
  model = tflite::GetModel(cifar10_model_tflite);
 8001298:	489f      	ldr	r0, [pc, #636]	; (8001518 <main+0x2dc>)
 800129a:	f7ff ff42 	bl	8001122 <_ZN6tflite8GetModelEPKv>
 800129e:	4602      	mov	r2, r0
 80012a0:	4b9e      	ldr	r3, [pc, #632]	; (800151c <main+0x2e0>)
 80012a2:	601a      	str	r2, [r3, #0]
  if(model->version() != TFLITE_SCHEMA_VERSION)
 80012a4:	4b9d      	ldr	r3, [pc, #628]	; (800151c <main+0x2e0>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ff2b 	bl	8001104 <_ZNK6tflite5Model7versionEv>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b03      	cmp	r3, #3
 80012b2:	bf14      	ite	ne
 80012b4:	2301      	movne	r3, #1
 80012b6:	2300      	moveq	r3, #0
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d006      	beq.n	80012cc <main+0x90>
	  error_reporter->Report("Model version does not match Schema");
 80012be:	4b93      	ldr	r3, [pc, #588]	; (800150c <main+0x2d0>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4997      	ldr	r1, [pc, #604]	; (8001520 <main+0x2e4>)
 80012c4:	4618      	mov	r0, r3
 80012c6:	f004 f881 	bl	80053cc <_ZN6tflite13ErrorReporter6ReportEPKcz>
	  while(1);
 80012ca:	e7fe      	b.n	80012ca <main+0x8e>
  static tflite::MicroMutableOpResolver<4> micro_op_resolver;
 80012cc:	4b95      	ldr	r3, [pc, #596]	; (8001524 <main+0x2e8>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0301 	and.w	r3, r3, #1
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d109      	bne.n	80012ec <main+0xb0>
 80012d8:	2100      	movs	r1, #0
 80012da:	4893      	ldr	r0, [pc, #588]	; (8001528 <main+0x2ec>)
 80012dc:	f000 fb18 	bl	8001910 <_ZN6tflite22MicroMutableOpResolverILj4EEC1EPNS_13ErrorReporterE>
 80012e0:	4b90      	ldr	r3, [pc, #576]	; (8001524 <main+0x2e8>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	4891      	ldr	r0, [pc, #580]	; (800152c <main+0x2f0>)
 80012e8:	f01d fdd8 	bl	801ee9c <atexit>
  micro_op_resolver.AddBuiltin(
 80012ec:	f019 fc3a 	bl	801ab64 <_ZN6tflite3ops5micro16Register_CONV_2DEv>
 80012f0:	4603      	mov	r3, r0
 80012f2:	461a      	mov	r2, r3
 80012f4:	2103      	movs	r1, #3
 80012f6:	488c      	ldr	r0, [pc, #560]	; (8001528 <main+0x2ec>)
 80012f8:	f000 fb26 	bl	8001948 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistration>
  micro_op_resolver.AddBuiltin(
 80012fc:	f01b fd4e 	bl	801cd9c <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv>
 8001300:	4603      	mov	r3, r0
 8001302:	461a      	mov	r2, r3
 8001304:	2111      	movs	r1, #17
 8001306:	4888      	ldr	r0, [pc, #544]	; (8001528 <main+0x2ec>)
 8001308:	f000 fb1e 	bl	8001948 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistration>
  micro_op_resolver.AddBuiltin(
 800130c:	f01a fad4 	bl	801b8b8 <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv>
 8001310:	4603      	mov	r3, r0
 8001312:	461a      	mov	r2, r3
 8001314:	2109      	movs	r1, #9
 8001316:	4884      	ldr	r0, [pc, #528]	; (8001528 <main+0x2ec>)
 8001318:	f000 fb16 	bl	8001948 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistration>
  micro_op_resolver.AddBuiltin(
 800131c:	f01c f99e 	bl	801d65c <_ZN6tflite3ops5micro16Register_SOFTMAXEv>
 8001320:	4603      	mov	r3, r0
 8001322:	461a      	mov	r2, r3
 8001324:	2119      	movs	r1, #25
 8001326:	4880      	ldr	r0, [pc, #512]	; (8001528 <main+0x2ec>)
 8001328:	f000 fb0e 	bl	8001948 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistration>
		  model, micro_op_resolver, tensor_arena, kTensorArenaSize, error_reporter);
 800132c:	4b80      	ldr	r3, [pc, #512]	; (8001530 <main+0x2f4>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 0301 	and.w	r3, r3, #1
 8001334:	2b00      	cmp	r3, #0
 8001336:	d111      	bne.n	800135c <main+0x120>
 8001338:	4b78      	ldr	r3, [pc, #480]	; (800151c <main+0x2e0>)
 800133a:	6819      	ldr	r1, [r3, #0]
 800133c:	4b73      	ldr	r3, [pc, #460]	; (800150c <main+0x2d0>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	9301      	str	r3, [sp, #4]
 8001342:	4b7c      	ldr	r3, [pc, #496]	; (8001534 <main+0x2f8>)
 8001344:	9300      	str	r3, [sp, #0]
 8001346:	4b7c      	ldr	r3, [pc, #496]	; (8001538 <main+0x2fc>)
 8001348:	4a77      	ldr	r2, [pc, #476]	; (8001528 <main+0x2ec>)
 800134a:	487c      	ldr	r0, [pc, #496]	; (800153c <main+0x300>)
 800134c:	f016 fee0 	bl	8018110 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterE>
 8001350:	4b77      	ldr	r3, [pc, #476]	; (8001530 <main+0x2f4>)
 8001352:	2201      	movs	r2, #1
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	487a      	ldr	r0, [pc, #488]	; (8001540 <main+0x304>)
 8001358:	f01d fda0 	bl	801ee9c <atexit>
  interpreter = &static_interpreter;
 800135c:	4b79      	ldr	r3, [pc, #484]	; (8001544 <main+0x308>)
 800135e:	4a77      	ldr	r2, [pc, #476]	; (800153c <main+0x300>)
 8001360:	601a      	str	r2, [r3, #0]

  tflite_status = interpreter->AllocateTensors();
 8001362:	4b78      	ldr	r3, [pc, #480]	; (8001544 <main+0x308>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f016 ff8c 	bl	8018284 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
 800136c:	4603      	mov	r3, r0
 800136e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  if(tflite_status != kTfLiteOk)
 8001372:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001376:	2b00      	cmp	r3, #0
 8001378:	d01c      	beq.n	80013b4 <main+0x178>
  {
	  error_reporter->Report("AllocateTensors() failed");
 800137a:	4b64      	ldr	r3, [pc, #400]	; (800150c <main+0x2d0>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4972      	ldr	r1, [pc, #456]	; (8001548 <main+0x30c>)
 8001380:	4618      	mov	r0, r3
 8001382:	f004 f823 	bl	80053cc <_ZN6tflite13ErrorReporter6ReportEPKcz>
	  buf_len = sprintf(buf, "AllocateTensors() failed\r\n");
 8001386:	463b      	mov	r3, r7
 8001388:	4a70      	ldr	r2, [pc, #448]	; (800154c <main+0x310>)
 800138a:	461c      	mov	r4, r3
 800138c:	4615      	mov	r5, r2
 800138e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001390:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001392:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001396:	c403      	stmia	r4!, {r0, r1}
 8001398:	8022      	strh	r2, [r4, #0]
 800139a:	3402      	adds	r4, #2
 800139c:	0c13      	lsrs	r3, r2, #16
 800139e:	7023      	strb	r3, [r4, #0]
 80013a0:	231a      	movs	r3, #26
 80013a2:	647b      	str	r3, [r7, #68]	; 0x44
	  HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);
 80013a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	4639      	mov	r1, r7
 80013aa:	2364      	movs	r3, #100	; 0x64
 80013ac:	4868      	ldr	r0, [pc, #416]	; (8001550 <main+0x314>)
 80013ae:	f003 f99f 	bl	80046f0 <HAL_UART_Transmit>
	  while(1);
 80013b2:	e7fe      	b.n	80013b2 <main+0x176>
  }

  model_input = interpreter->input(0);
 80013b4:	4b63      	ldr	r3, [pc, #396]	; (8001544 <main+0x308>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2100      	movs	r1, #0
 80013ba:	4618      	mov	r0, r3
 80013bc:	f017 f8d6 	bl	801856c <_ZN6tflite16MicroInterpreter5inputEj>
 80013c0:	4602      	mov	r2, r0
 80013c2:	4b64      	ldr	r3, [pc, #400]	; (8001554 <main+0x318>)
 80013c4:	601a      	str	r2, [r3, #0]
  model_output = interpreter->output(0);
 80013c6:	4b5f      	ldr	r3, [pc, #380]	; (8001544 <main+0x308>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2100      	movs	r1, #0
 80013cc:	4618      	mov	r0, r3
 80013ce:	f017 f8f7 	bl	80185c0 <_ZN6tflite16MicroInterpreter6outputEj>
 80013d2:	4602      	mov	r2, r0
 80013d4:	4b60      	ldr	r3, [pc, #384]	; (8001558 <main+0x31c>)
 80013d6:	601a      	str	r2, [r3, #0]


  num_elements = model_input->bytes / sizeof(uint8);
 80013d8:	4b5e      	ldr	r3, [pc, #376]	; (8001554 <main+0x318>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	637b      	str	r3, [r7, #52]	; 0x34
  buf_len = sprintf(buf, "\r\nNumber of input elements: %lu\r\n", num_elements);
 80013e0:	463b      	mov	r3, r7
 80013e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013e4:	495d      	ldr	r1, [pc, #372]	; (800155c <main+0x320>)
 80013e6:	4618      	mov	r0, r3
 80013e8:	f01e fcc0 	bl	801fd6c <siprintf>
 80013ec:	6478      	str	r0, [r7, #68]	; 0x44
  HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);
 80013ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	4639      	mov	r1, r7
 80013f4:	2364      	movs	r3, #100	; 0x64
 80013f6:	4856      	ldr	r0, [pc, #344]	; (8001550 <main+0x314>)
 80013f8:	f003 f97a 	bl	80046f0 <HAL_UART_Transmit>
//  	if(timestamp - inference_time >= 10000){
//  	  inference_time = timestamp;
//  	  buf_len = sprintf(buf, "1 sec\r\n");
//  	  HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);
//  	}
    for (uint32_t i = 0; i < num_elements; i++)
 80013fc:	2300      	movs	r3, #0
 80013fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001400:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001404:	429a      	cmp	r2, r3
 8001406:	d20d      	bcs.n	8001424 <main+0x1e8>
	{
	  model_input->data.uint8[i] = image_data[i];
 8001408:	4b52      	ldr	r3, [pc, #328]	; (8001554 <main+0x318>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	685a      	ldr	r2, [r3, #4]
 800140e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001410:	4413      	add	r3, r2
 8001412:	4953      	ldr	r1, [pc, #332]	; (8001560 <main+0x324>)
 8001414:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001416:	440a      	add	r2, r1
 8001418:	7812      	ldrb	r2, [r2, #0]
 800141a:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < num_elements; i++)
 800141c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800141e:	3301      	adds	r3, #1
 8001420:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001422:	e7ed      	b.n	8001400 <main+0x1c4>
	}

	timestamp = HAL_GetTick();
 8001424:	f000 fefa 	bl	800221c <HAL_GetTick>
 8001428:	6438      	str	r0, [r7, #64]	; 0x40
	tflite_status = interpreter->Invoke();
 800142a:	4b46      	ldr	r3, [pc, #280]	; (8001544 <main+0x308>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f017 f820 	bl	8018474 <_ZN6tflite16MicroInterpreter6InvokeEv>
 8001434:	4603      	mov	r3, r0
 8001436:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	if (tflite_status != kTfLiteOk)
 800143a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800143e:	2b00      	cmp	r3, #0
 8001440:	d005      	beq.n	800144e <main+0x212>
	{
		error_reporter->Report("Invoke failed");
 8001442:	4b32      	ldr	r3, [pc, #200]	; (800150c <main+0x2d0>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4947      	ldr	r1, [pc, #284]	; (8001564 <main+0x328>)
 8001448:	4618      	mov	r0, r3
 800144a:	f003 ffbf 	bl	80053cc <_ZN6tflite13ErrorReporter6ReportEPKcz>
	}
	inference_time = HAL_GetTick() - timestamp;
 800144e:	f000 fee5 	bl	800221c <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	63fb      	str	r3, [r7, #60]	; 0x3c

	for(int i=0; i<10; i++){
 800145a:	2300      	movs	r3, #0
 800145c:	64bb      	str	r3, [r7, #72]	; 0x48
 800145e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001460:	2b09      	cmp	r3, #9
 8001462:	dc17      	bgt.n	8001494 <main+0x258>
		if(value < model_output->data.uint8[i]){
 8001464:	4b3c      	ldr	r3, [pc, #240]	; (8001558 <main+0x31c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	685a      	ldr	r2, [r3, #4]
 800146a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800146c:	4413      	add	r3, r2
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8001474:	429a      	cmp	r2, r3
 8001476:	d209      	bcs.n	800148c <main+0x250>
			value = model_output->data.uint8[i];
 8001478:	4b37      	ldr	r3, [pc, #220]	; (8001558 <main+0x31c>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	685a      	ldr	r2, [r3, #4]
 800147e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001480:	4413      	add	r3, r2
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			max_index = i;
 8001488:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800148a:	657b      	str	r3, [r7, #84]	; 0x54
	for(int i=0; i<10; i++){
 800148c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800148e:	3301      	adds	r3, #1
 8001490:	64bb      	str	r3, [r7, #72]	; 0x48
 8001492:	e7e4      	b.n	800145e <main+0x222>
		}
	}
	buf_len = sprintf(buf, "Detected : %s (confidence : %.2f%%)\r\n", labels[max_index], (float)value/256*100);
 8001494:	4a34      	ldr	r2, [pc, #208]	; (8001568 <main+0x32c>)
 8001496:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001498:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800149c:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80014a0:	ee07 3a90 	vmov	s15, r3
 80014a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014a8:	eddf 6a30 	vldr	s13, [pc, #192]	; 800156c <main+0x330>
 80014ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014b0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001570 <main+0x334>
 80014b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014b8:	ee17 0a90 	vmov	r0, s15
 80014bc:	f7ff f832 	bl	8000524 <__aeabi_f2d>
 80014c0:	4603      	mov	r3, r0
 80014c2:	460c      	mov	r4, r1
 80014c4:	4638      	mov	r0, r7
 80014c6:	e9cd 3400 	strd	r3, r4, [sp]
 80014ca:	462a      	mov	r2, r5
 80014cc:	4929      	ldr	r1, [pc, #164]	; (8001574 <main+0x338>)
 80014ce:	f01e fc4d 	bl	801fd6c <siprintf>
 80014d2:	6478      	str	r0, [r7, #68]	; 0x44
	HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);
 80014d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	4639      	mov	r1, r7
 80014da:	2364      	movs	r3, #100	; 0x64
 80014dc:	481c      	ldr	r0, [pc, #112]	; (8001550 <main+0x314>)
 80014de:	f003 f907 	bl	80046f0 <HAL_UART_Transmit>


    buf_len = sprintf(buf, "Duration: %lu ms \r\n\r\n", inference_time);
 80014e2:	463b      	mov	r3, r7
 80014e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80014e6:	4924      	ldr	r1, [pc, #144]	; (8001578 <main+0x33c>)
 80014e8:	4618      	mov	r0, r3
 80014ea:	f01e fc3f 	bl	801fd6c <siprintf>
 80014ee:	6478      	str	r0, [r7, #68]	; 0x44
	HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);
 80014f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	4639      	mov	r1, r7
 80014f6:	2364      	movs	r3, #100	; 0x64
 80014f8:	4815      	ldr	r0, [pc, #84]	; (8001550 <main+0x314>)
 80014fa:	f003 f8f9 	bl	80046f0 <HAL_UART_Transmit>
    /* USER CODE BEGIN 3 */
  }
 80014fe:	e77d      	b.n	80013fc <main+0x1c0>
 8001500:	20016f3c 	.word	0x20016f3c
 8001504:	2002cfc0 	.word	0x2002cfc0
 8001508:	0800120d 	.word	0x0800120d
 800150c:	20017018 	.word	0x20017018
 8001510:	20016cb8 	.word	0x20016cb8
 8001514:	08021c34 	.word	0x08021c34
 8001518:	20000000 	.word	0x20000000
 800151c:	2001701c 	.word	0x2001701c
 8001520:	08021c50 	.word	0x08021c50
 8001524:	2002d050 	.word	0x2002d050
 8001528:	2002cfc4 	.word	0x2002cfc4
 800152c:	0800121d 	.word	0x0800121d
 8001530:	2002d0e8 	.word	0x2002d0e8
 8001534:	00015f90 	.word	0x00015f90
 8001538:	20017030 	.word	0x20017030
 800153c:	2002d054 	.word	0x2002d054
 8001540:	0800122d 	.word	0x0800122d
 8001544:	20017020 	.word	0x20017020
 8001548:	08021c74 	.word	0x08021c74
 800154c:	08021c90 	.word	0x08021c90
 8001550:	20016f88 	.word	0x20016f88
 8001554:	20017024 	.word	0x20017024
 8001558:	20017028 	.word	0x20017028
 800155c:	08021cac 	.word	0x08021cac
 8001560:	080248c4 	.word	0x080248c4
 8001564:	08021cd0 	.word	0x08021cd0
 8001568:	20016c90 	.word	0x20016c90
 800156c:	43800000 	.word	0x43800000
 8001570:	42c80000 	.word	0x42c80000
 8001574:	08021ce0 	.word	0x08021ce0
 8001578:	08021d08 	.word	0x08021d08

0800157c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b098      	sub	sp, #96	; 0x60
 8001580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001582:	f107 0318 	add.w	r3, r7, #24
 8001586:	2248      	movs	r2, #72	; 0x48
 8001588:	2100      	movs	r1, #0
 800158a:	4618      	mov	r0, r3
 800158c:	f01d fd4c 	bl	801f028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001590:	1d3b      	adds	r3, r7, #4
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]
 8001598:	609a      	str	r2, [r3, #8]
 800159a:	60da      	str	r2, [r3, #12]
 800159c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 800159e:	2000      	movs	r0, #0
 80015a0:	f001 f8fe 	bl	80027a0 <HAL_PWREx_ControlVoltageScaling>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	bf14      	ite	ne
 80015aa:	2301      	movne	r3, #1
 80015ac:	2300      	moveq	r3, #0
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 80015b4:	f000 f924 	bl	8001800 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80015b8:	2310      	movs	r3, #16
 80015ba:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80015bc:	2301      	movs	r3, #1
 80015be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80015c0:	2300      	movs	r3, #0
 80015c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80015c4:	2360      	movs	r3, #96	; 0x60
 80015c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015c8:	2302      	movs	r3, #2
 80015ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80015cc:	2301      	movs	r3, #1
 80015ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015d0:	2301      	movs	r3, #1
 80015d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 80015d4:	2337      	movs	r3, #55	; 0x37
 80015d6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80015d8:	2307      	movs	r3, #7
 80015da:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015dc:	2302      	movs	r3, #2
 80015de:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015e0:	2302      	movs	r3, #2
 80015e2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015e4:	f107 0318 	add.w	r3, r7, #24
 80015e8:	4618      	mov	r0, r3
 80015ea:	f001 f969 	bl	80028c0 <HAL_RCC_OscConfig>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	bf14      	ite	ne
 80015f4:	2301      	movne	r3, #1
 80015f6:	2300      	moveq	r3, #0
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 80015fe:	f000 f8ff 	bl	8001800 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001602:	230f      	movs	r3, #15
 8001604:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001606:	2303      	movs	r3, #3
 8001608:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800160e:	2300      	movs	r3, #0
 8001610:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	2105      	movs	r1, #5
 800161a:	4618      	mov	r0, r3
 800161c:	f001 fdb2 	bl	8003184 <HAL_RCC_ClockConfig>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	bf14      	ite	ne
 8001626:	2301      	movne	r3, #1
 8001628:	2300      	moveq	r3, #0
 800162a:	b2db      	uxtb	r3, r3
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <_Z18SystemClock_Configv+0xb8>
  {
    Error_Handler();
 8001630:	f000 f8e6 	bl	8001800 <Error_Handler>
  }
}
 8001634:	bf00      	nop
 8001636:	3760      	adds	r7, #96	; 0x60
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <_ZL13MX_TIM16_Initv>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None HAL_TIM_PeriodElapsed
  */
static void MX_TIM16_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001640:	4b12      	ldr	r3, [pc, #72]	; (800168c <_ZL13MX_TIM16_Initv+0x50>)
 8001642:	4a13      	ldr	r2, [pc, #76]	; (8001690 <_ZL13MX_TIM16_Initv+0x54>)
 8001644:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 11000;
 8001646:	4b11      	ldr	r3, [pc, #68]	; (800168c <_ZL13MX_TIM16_Initv+0x50>)
 8001648:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800164c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800164e:	4b0f      	ldr	r3, [pc, #60]	; (800168c <_ZL13MX_TIM16_Initv+0x50>)
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 60000;
 8001654:	4b0d      	ldr	r3, [pc, #52]	; (800168c <_ZL13MX_TIM16_Initv+0x50>)
 8001656:	f64e 2260 	movw	r2, #60000	; 0xea60
 800165a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800165c:	4b0b      	ldr	r3, [pc, #44]	; (800168c <_ZL13MX_TIM16_Initv+0x50>)
 800165e:	2200      	movs	r2, #0
 8001660:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001662:	4b0a      	ldr	r3, [pc, #40]	; (800168c <_ZL13MX_TIM16_Initv+0x50>)
 8001664:	2200      	movs	r2, #0
 8001666:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001668:	4b08      	ldr	r3, [pc, #32]	; (800168c <_ZL13MX_TIM16_Initv+0x50>)
 800166a:	2280      	movs	r2, #128	; 0x80
 800166c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800166e:	4807      	ldr	r0, [pc, #28]	; (800168c <_ZL13MX_TIM16_Initv+0x50>)
 8001670:	f002 fd2e 	bl	80040d0 <HAL_TIM_Base_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	bf14      	ite	ne
 800167a:	2301      	movne	r3, #1
 800167c:	2300      	moveq	r3, #0
 800167e:	b2db      	uxtb	r3, r3
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <_ZL13MX_TIM16_Initv+0x4c>
  {
    Error_Handler();
 8001684:	f000 f8bc 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001688:	bf00      	nop
 800168a:	bd80      	pop	{r7, pc}
 800168c:	20016f3c 	.word	0x20016f3c
 8001690:	40014400 	.word	0x40014400

08001694 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001698:	4b2c      	ldr	r3, [pc, #176]	; (800174c <_ZL19MX_USART3_UART_Initv+0xb8>)
 800169a:	4a2d      	ldr	r2, [pc, #180]	; (8001750 <_ZL19MX_USART3_UART_Initv+0xbc>)
 800169c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800169e:	4b2b      	ldr	r3, [pc, #172]	; (800174c <_ZL19MX_USART3_UART_Initv+0xb8>)
 80016a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016a6:	4b29      	ldr	r3, [pc, #164]	; (800174c <_ZL19MX_USART3_UART_Initv+0xb8>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016ac:	4b27      	ldr	r3, [pc, #156]	; (800174c <_ZL19MX_USART3_UART_Initv+0xb8>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016b2:	4b26      	ldr	r3, [pc, #152]	; (800174c <_ZL19MX_USART3_UART_Initv+0xb8>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016b8:	4b24      	ldr	r3, [pc, #144]	; (800174c <_ZL19MX_USART3_UART_Initv+0xb8>)
 80016ba:	220c      	movs	r2, #12
 80016bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016be:	4b23      	ldr	r3, [pc, #140]	; (800174c <_ZL19MX_USART3_UART_Initv+0xb8>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c4:	4b21      	ldr	r3, [pc, #132]	; (800174c <_ZL19MX_USART3_UART_Initv+0xb8>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ca:	4b20      	ldr	r3, [pc, #128]	; (800174c <_ZL19MX_USART3_UART_Initv+0xb8>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016d0:	4b1e      	ldr	r3, [pc, #120]	; (800174c <_ZL19MX_USART3_UART_Initv+0xb8>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016d6:	4b1d      	ldr	r3, [pc, #116]	; (800174c <_ZL19MX_USART3_UART_Initv+0xb8>)
 80016d8:	2200      	movs	r2, #0
 80016da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016dc:	481b      	ldr	r0, [pc, #108]	; (800174c <_ZL19MX_USART3_UART_Initv+0xb8>)
 80016de:	f002 ffb7 	bl	8004650 <HAL_UART_Init>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	bf14      	ite	ne
 80016e8:	2301      	movne	r3, #1
 80016ea:	2300      	moveq	r3, #0
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 80016f2:	f000 f885 	bl	8001800 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016f6:	2100      	movs	r1, #0
 80016f8:	4814      	ldr	r0, [pc, #80]	; (800174c <_ZL19MX_USART3_UART_Initv+0xb8>)
 80016fa:	f003 fd0b 	bl	8005114 <HAL_UARTEx_SetTxFifoThreshold>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	bf14      	ite	ne
 8001704:	2301      	movne	r3, #1
 8001706:	2300      	moveq	r3, #0
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <_ZL19MX_USART3_UART_Initv+0x7e>
  {
    Error_Handler();
 800170e:	f000 f877 	bl	8001800 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001712:	2100      	movs	r1, #0
 8001714:	480d      	ldr	r0, [pc, #52]	; (800174c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001716:	f003 fd3b 	bl	8005190 <HAL_UARTEx_SetRxFifoThreshold>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	bf14      	ite	ne
 8001720:	2301      	movne	r3, #1
 8001722:	2300      	moveq	r3, #0
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <_ZL19MX_USART3_UART_Initv+0x9a>
  {
    Error_Handler();
 800172a:	f000 f869 	bl	8001800 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800172e:	4807      	ldr	r0, [pc, #28]	; (800174c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001730:	f003 fcb7 	bl	80050a2 <HAL_UARTEx_DisableFifoMode>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	bf14      	ite	ne
 800173a:	2301      	movne	r3, #1
 800173c:	2300      	moveq	r3, #0
 800173e:	b2db      	uxtb	r3, r3
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <_ZL19MX_USART3_UART_Initv+0xb4>
  {
    Error_Handler();
 8001744:	f000 f85c 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20016f88 	.word	0x20016f88
 8001750:	40004800 	.word	0x40004800

08001754 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175a:	1d3b      	adds	r3, r7, #4
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001768:	4b10      	ldr	r3, [pc, #64]	; (80017ac <_ZL12MX_GPIO_Initv+0x58>)
 800176a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176c:	4a0f      	ldr	r2, [pc, #60]	; (80017ac <_ZL12MX_GPIO_Initv+0x58>)
 800176e:	f043 0302 	orr.w	r3, r3, #2
 8001772:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001774:	4b0d      	ldr	r3, [pc, #52]	; (80017ac <_ZL12MX_GPIO_Initv+0x58>)
 8001776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	603b      	str	r3, [r7, #0]
 800177e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8001780:	2201      	movs	r2, #1
 8001782:	2108      	movs	r1, #8
 8001784:	480a      	ldr	r0, [pc, #40]	; (80017b0 <_ZL12MX_GPIO_Initv+0x5c>)
 8001786:	f000 ffe5 	bl	8002754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800178a:	2308      	movs	r3, #8
 800178c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178e:	2301      	movs	r3, #1
 8001790:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001792:	2301      	movs	r3, #1
 8001794:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001796:	2302      	movs	r3, #2
 8001798:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179a:	1d3b      	adds	r3, r7, #4
 800179c:	4619      	mov	r1, r3
 800179e:	4804      	ldr	r0, [pc, #16]	; (80017b0 <_ZL12MX_GPIO_Initv+0x5c>)
 80017a0:	f000 fe58 	bl	8002454 <HAL_GPIO_Init>

}
 80017a4:	bf00      	nop
 80017a6:	3718      	adds	r7, #24
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40021000 	.word	0x40021000
 80017b0:	42020400 	.word	0x42020400

080017b4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017b4:	b5b0      	push	{r4, r5, r7, lr}
 80017b6:	b090      	sub	sp, #64	; 0x40
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  char buf[50];  // For print
  int buf_len = 0;  // For print
 80017bc:	2300      	movs	r3, #0
 80017be:	63fb      	str	r3, [r7, #60]	; 0x3c
  buf_len = sprintf(buf, "timer interrupt \r\n");
 80017c0:	f107 0308 	add.w	r3, r7, #8
 80017c4:	4a0c      	ldr	r2, [pc, #48]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80017c6:	461c      	mov	r4, r3
 80017c8:	4615      	mov	r5, r2
 80017ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017ce:	682b      	ldr	r3, [r5, #0]
 80017d0:	461a      	mov	r2, r3
 80017d2:	8022      	strh	r2, [r4, #0]
 80017d4:	3402      	adds	r4, #2
 80017d6:	0c1b      	lsrs	r3, r3, #16
 80017d8:	7023      	strb	r3, [r4, #0]
 80017da:	2312      	movs	r3, #18
 80017dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);
 80017de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	f107 0108 	add.w	r1, r7, #8
 80017e6:	2364      	movs	r3, #100	; 0x64
 80017e8:	4804      	ldr	r0, [pc, #16]	; (80017fc <HAL_TIM_PeriodElapsedCallback+0x48>)
 80017ea:	f002 ff81 	bl	80046f0 <HAL_UART_Transmit>
}
 80017ee:	bf00      	nop
 80017f0:	3740      	adds	r7, #64	; 0x40
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bdb0      	pop	{r4, r5, r7, pc}
 80017f6:	bf00      	nop
 80017f8:	08021d20 	.word	0x08021d20
 80017fc:	20016f88 	.word	0x20016f88

08001800 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <_ZN11flatbuffers12EndianScalarImEET_S1_>:
#if defined(_MSC_VER)
  #pragma warning(pop)
#endif


template<typename T> T EndianScalar(T t) {
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
  #if FLATBUFFERS_LITTLEENDIAN
    return t;
 8001816:	687b      	ldr	r3, [r7, #4]
  #else
    return EndianSwap(t);
  #endif
}
 8001818:	4618      	mov	r0, r3
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <_ZN11flatbuffers10ReadScalarItEET_PKv>:

template<typename T>
// UBSAN: C++ aliasing type rules, see std::bit_cast<> for details.
__supress_ubsan__("alignment")
T ReadScalar(const void *p) {
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	881b      	ldrh	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f000 f8f4 	bl	8001a1e <_ZN11flatbuffers12EndianScalarItEET_S1_>
 8001836:	4603      	mov	r3, r0
}
 8001838:	4618      	mov	r0, r3
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <_ZN11flatbuffers10ReadScalarImEET_PKv>:
T ReadScalar(const void *p) {
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff ffde 	bl	800180e <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8001852:	4603      	mov	r3, r0
}
 8001854:	4618      	mov	r0, r3
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <_ZN11flatbuffers10ReadScalarIlEET_PKv>:
T ReadScalar(const void *p) {
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f000 f8cd 	bl	8001a08 <_ZN11flatbuffers12EndianScalarIlEET_S1_>
 800186e:	4603      	mov	r3, r0
}
 8001870:	4618      	mov	r0, r3
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>:

  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	460b      	mov	r3, r1
 8001882:	607a      	str	r2, [r7, #4]
 8001884:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 8001886:	897b      	ldrh	r3, [r7, #10]
 8001888:	4619      	mov	r1, r3
 800188a:	68f8      	ldr	r0, [r7, #12]
 800188c:	f7ff fc1a 	bl	80010c4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8001890:	4603      	mov	r3, r0
 8001892:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8001894:	8afb      	ldrh	r3, [r7, #22]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d007      	beq.n	80018aa <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_+0x32>
 800189a:	68fa      	ldr	r2, [r7, #12]
 800189c:	8afb      	ldrh	r3, [r7, #22]
 800189e:	4413      	add	r3, r2
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff ffcd 	bl	8001840 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80018a6:	4603      	mov	r3, r0
 80018a8:	e000      	b.n	80018ac <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_+0x34>
 80018aa:	687b      	ldr	r3, [r7, #4]
  }
 80018ac:	4618      	mov	r0, r3
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>:
template<typename T> const T *GetRoot(const void *buf) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  return GetMutableRoot<T>(const_cast<void *>(buf));
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f000 f8ba 	bl	8001a36 <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>
 80018c2:	4603      	mov	r3, r0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <_ZN6tflite10OpResolverC1Ev>:
class OpResolver {
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	4a04      	ldr	r2, [pc, #16]	; (80018e8 <_ZN6tflite10OpResolverC1Ev+0x1c>)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4618      	mov	r0, r3
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	08025524 	.word	0x08025524

080018ec <_ZN6tflite15MicroOpResolverC1Ev>:
class MicroOpResolver : public OpResolver {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff ffe8 	bl	80018cc <_ZN6tflite10OpResolverC1Ev>
 80018fc:	4a03      	ldr	r2, [pc, #12]	; (800190c <_ZN6tflite15MicroOpResolverC1Ev+0x20>)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4618      	mov	r0, r3
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	080254f8 	.word	0x080254f8

08001910 <_ZN6tflite22MicroMutableOpResolverILj4EEC1EPNS_13ErrorReporterE>:
namespace tflite {

template <unsigned int tOpCount>
class MicroMutableOpResolver : public MicroOpResolver {
 public:
  explicit MicroMutableOpResolver(ErrorReporter* error_reporter = nullptr)
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
      : error_reporter_(error_reporter) {}
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff ffe5 	bl	80018ec <_ZN6tflite15MicroOpResolverC1Ev>
 8001922:	4a08      	ldr	r2, [pc, #32]	; (8001944 <_ZN6tflite22MicroMutableOpResolverILj4EEC1EPNS_13ErrorReporterE+0x34>)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4618      	mov	r0, r3
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	080254cc 	.word	0x080254cc

08001948 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistration>:
      tflite::BuiltinOperator) const override {
    // TODO(b/149408647): Replace with the more selective builtin parser.
    return ParseOpData;
  }

  TfLiteStatus AddBuiltin(tflite::BuiltinOperator op,
 8001948:	b5b0      	push	{r4, r5, r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	460b      	mov	r3, r1
 8001952:	607a      	str	r2, [r7, #4]
 8001954:	72fb      	strb	r3, [r7, #11]
                          TfLiteRegistration* registration) override {
    if (registrations_len_ >= tOpCount) {
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800195c:	2b03      	cmp	r3, #3
 800195e:	d90e      	bls.n	800197e <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistration+0x36>
      if (error_reporter_) {
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001966:	2b00      	cmp	r3, #0
 8001968:	d007      	beq.n	800197a <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistration+0x32>
        TF_LITE_REPORT_ERROR(error_reporter_,
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 8001970:	7afa      	ldrb	r2, [r7, #11]
 8001972:	2304      	movs	r3, #4
 8001974:	4922      	ldr	r1, [pc, #136]	; (8001a00 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistration+0xb8>)
 8001976:	f003 fd29 	bl	80053cc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Couldn't register builtin op #%d, resolver size "
                             "is too small (%d)",
                             op, tOpCount);
      }
      return kTfLiteError;
 800197a:	2301      	movs	r3, #1
 800197c:	e03b      	b.n	80019f6 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistration+0xae>
    }

    if (FindOp(op) != nullptr) {
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	3318      	adds	r3, #24
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	7afa      	ldrb	r2, [r7, #11]
 8001988:	4611      	mov	r1, r2
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	4798      	blx	r3
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	bf14      	ite	ne
 8001994:	2301      	movne	r3, #1
 8001996:	2300      	moveq	r3, #0
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b00      	cmp	r3, #0
 800199c:	d00e      	beq.n	80019bc <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistration+0x74>
      if (error_reporter_ != nullptr) {
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d007      	beq.n	80019b8 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistration+0x70>
        TF_LITE_REPORT_ERROR(error_reporter_,
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ae:	7afa      	ldrb	r2, [r7, #11]
 80019b0:	4914      	ldr	r1, [pc, #80]	; (8001a04 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistration+0xbc>)
 80019b2:	4618      	mov	r0, r3
 80019b4:	f003 fd0a 	bl	80053cc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Calling AddBuiltin with the same op more than "
                             "once is not supported (Op: #%d).",
                             op);
      }
      return kTfLiteError;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e01c      	b.n	80019f6 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorEP18TfLiteRegistration+0xae>
    }

    TfLiteRegistration* new_registration = &registrations_[registrations_len_];
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019c2:	015b      	lsls	r3, r3, #5
 80019c4:	68fa      	ldr	r2, [r7, #12]
 80019c6:	4413      	add	r3, r2
 80019c8:	3304      	adds	r3, #4
 80019ca:	617b      	str	r3, [r7, #20]
    registrations_len_ += 1;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019d2:	1c5a      	adds	r2, r3, #1
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    *new_registration = *registration;
 80019da:	697a      	ldr	r2, [r7, #20]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4614      	mov	r4, r2
 80019e0:	461d      	mov	r5, r3
 80019e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019e6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80019ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    new_registration->builtin_code = op;
 80019ee:	7afa      	ldrb	r2, [r7, #11]
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	615a      	str	r2, [r3, #20]
    return kTfLiteOk;
 80019f4:	2300      	movs	r3, #0
  }
 80019f6:	4618      	mov	r0, r3
 80019f8:	3718      	adds	r7, #24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bdb0      	pop	{r4, r5, r7, pc}
 80019fe:	bf00      	nop
 8001a00:	08021d34 	.word	0x08021d34
 8001a04:	08021d78 	.word	0x08021d78

08001a08 <_ZN11flatbuffers12EndianScalarIlEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
    return t;
 8001a10:	687b      	ldr	r3, [r7, #4]
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <_ZN11flatbuffers12EndianScalarItEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	4603      	mov	r3, r0
 8001a26:	80fb      	strh	r3, [r7, #6]
    return t;
 8001a28:	88fb      	ldrh	r3, [r7, #6]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>:
template<typename T> T *GetMutableRoot(void *buf) {
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b082      	sub	sp, #8
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
  EndianCheck();
 8001a3e:	f7ff fb17 	bl	8001070 <_ZN11flatbuffers11EndianCheckEv>
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff fee1 	bl	800180e <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4413      	add	r3, r2
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpENS_15BuiltinOperatorE>:
  const TfLiteRegistration* FindOp(tflite::BuiltinOperator op) const override {
 8001a5a:	b480      	push	{r7}
 8001a5c:	b085      	sub	sp, #20
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
 8001a62:	460b      	mov	r3, r1
 8001a64:	70fb      	strb	r3, [r7, #3]
    if (op == BuiltinOperator_CUSTOM) return nullptr;
 8001a66:	78fb      	ldrb	r3, [r7, #3]
 8001a68:	2b20      	cmp	r3, #32
 8001a6a:	d101      	bne.n	8001a70 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpENS_15BuiltinOperatorE+0x16>
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	e019      	b.n	8001aa4 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpENS_15BuiltinOperatorE+0x4a>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001a70:	2300      	movs	r3, #0
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d210      	bcs.n	8001aa2 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpENS_15BuiltinOperatorE+0x48>
      const TfLiteRegistration& registration = registrations_[i];
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	015b      	lsls	r3, r3, #5
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	4413      	add	r3, r2
 8001a88:	3304      	adds	r3, #4
 8001a8a:	60bb      	str	r3, [r7, #8]
      if (registration.builtin_code == op) {
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	695a      	ldr	r2, [r3, #20]
 8001a90:	78fb      	ldrb	r3, [r7, #3]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d101      	bne.n	8001a9a <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpENS_15BuiltinOperatorE+0x40>
        return &registration;
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	e004      	b.n	8001aa4 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpENS_15BuiltinOperatorE+0x4a>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	e7e8      	b.n	8001a74 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpENS_15BuiltinOperatorE+0x1a>
    return nullptr;
 8001aa2:	2300      	movs	r3, #0
  }
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <_ZN6tflite22MicroMutableOpResolverILj4EED1Ev>:
class MicroMutableOpResolver : public MicroOpResolver {
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	4a05      	ldr	r2, [pc, #20]	; (8001ad0 <_ZN6tflite22MicroMutableOpResolverILj4EED1Ev+0x20>)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff fb81 	bl	80011c8 <_ZN6tflite15MicroOpResolverD1Ev>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	080254cc 	.word	0x080254cc

08001ad4 <_ZN6tflite22MicroMutableOpResolverILj4EED0Ev>:
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f7ff ffe7 	bl	8001ab0 <_ZN6tflite22MicroMutableOpResolverILj4EED1Ev>
 8001ae2:	218c      	movs	r1, #140	; 0x8c
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f01c ff2a 	bl	801e93e <_ZdlPvj>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4618      	mov	r0, r3
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <_ZN6tflite22MicroMutableOpResolverILj4EE9AddCustomEPKcP18TfLiteRegistration>:

  TfLiteStatus AddCustom(const char* name,
 8001af4:	b5b0      	push	{r4, r5, r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
                         TfLiteRegistration* registration) override {
    if (registrations_len_ >= tOpCount) {
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b06:	2b03      	cmp	r3, #3
 8001b08:	d90e      	bls.n	8001b28 <_ZN6tflite22MicroMutableOpResolverILj4EE9AddCustomEPKcP18TfLiteRegistration+0x34>
      if (error_reporter_) {
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d007      	beq.n	8001b24 <_ZN6tflite22MicroMutableOpResolverILj4EE9AddCustomEPKcP18TfLiteRegistration+0x30>
        TF_LITE_REPORT_ERROR(
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 8001b1a:	2304      	movs	r3, #4
 8001b1c:	68ba      	ldr	r2, [r7, #8]
 8001b1e:	4923      	ldr	r1, [pc, #140]	; (8001bac <_ZN6tflite22MicroMutableOpResolverILj4EE9AddCustomEPKcP18TfLiteRegistration+0xb8>)
 8001b20:	f003 fc54 	bl	80053cc <_ZN6tflite13ErrorReporter6ReportEPKcz>
            error_reporter_,
            "Couldn't register custom op '%s', resolver size is too small (%d)",
            name, tOpCount);
      }
      return kTfLiteError;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e03d      	b.n	8001ba4 <_ZN6tflite22MicroMutableOpResolverILj4EE9AddCustomEPKcP18TfLiteRegistration+0xb0>
    }

    if (FindOp(name) != nullptr) {
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	331c      	adds	r3, #28
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	68b9      	ldr	r1, [r7, #8]
 8001b32:	68f8      	ldr	r0, [r7, #12]
 8001b34:	4798      	blx	r3
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	bf14      	ite	ne
 8001b3c:	2301      	movne	r3, #1
 8001b3e:	2300      	moveq	r3, #0
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d00e      	beq.n	8001b64 <_ZN6tflite22MicroMutableOpResolverILj4EE9AddCustomEPKcP18TfLiteRegistration+0x70>
      if (error_reporter_ != nullptr) {
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d007      	beq.n	8001b60 <_ZN6tflite22MicroMutableOpResolverILj4EE9AddCustomEPKcP18TfLiteRegistration+0x6c>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b56:	68ba      	ldr	r2, [r7, #8]
 8001b58:	4915      	ldr	r1, [pc, #84]	; (8001bb0 <_ZN6tflite22MicroMutableOpResolverILj4EE9AddCustomEPKcP18TfLiteRegistration+0xbc>)
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f003 fc36 	bl	80053cc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Calling AddCustom for the same op more than once "
                             "is not supported (Op: %s).",
                             name);
      }
      return kTfLiteError;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e01f      	b.n	8001ba4 <_ZN6tflite22MicroMutableOpResolverILj4EE9AddCustomEPKcP18TfLiteRegistration+0xb0>
    }

    TfLiteRegistration* new_registration = &registrations_[registrations_len_];
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b6a:	015b      	lsls	r3, r3, #5
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	4413      	add	r3, r2
 8001b70:	3304      	adds	r3, #4
 8001b72:	617b      	str	r3, [r7, #20]
    registrations_len_ += 1;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b7a:	1c5a      	adds	r2, r3, #1
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    *new_registration = *registration;
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4614      	mov	r4, r2
 8001b88:	461d      	mov	r5, r3
 8001b8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b8e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001b92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    new_registration->builtin_code = BuiltinOperator_CUSTOM;
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	2220      	movs	r2, #32
 8001b9a:	615a      	str	r2, [r3, #20]
    new_registration->custom_name = name;
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	68ba      	ldr	r2, [r7, #8]
 8001ba0:	619a      	str	r2, [r3, #24]
    return kTfLiteOk;
 8001ba2:	2300      	movs	r3, #0
  }
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3718      	adds	r7, #24
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bdb0      	pop	{r4, r5, r7, pc}
 8001bac:	08021dc8 	.word	0x08021dc8
 8001bb0:	08021e0c 	.word	0x08021e0c

08001bb4 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpEPKc>:
  const TfLiteRegistration* FindOp(const char* op) const override {
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bc8:	68fa      	ldr	r2, [r7, #12]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d218      	bcs.n	8001c00 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpEPKc+0x4c>
      const TfLiteRegistration& registration = registrations_[i];
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	015b      	lsls	r3, r3, #5
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	3304      	adds	r3, #4
 8001bd8:	60bb      	str	r3, [r7, #8]
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	2b20      	cmp	r3, #32
 8001be0:	d10a      	bne.n	8001bf8 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpEPKc+0x44>
          (strcmp(registration.custom_name, op) == 0)) {
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	6839      	ldr	r1, [r7, #0]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7fe fb25 	bl	8000238 <strcmp>
 8001bee:	4603      	mov	r3, r0
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpEPKc+0x44>
        return &registration;
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	e004      	b.n	8001c02 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpEPKc+0x4e>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	e7e0      	b.n	8001bc2 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpEPKc+0xe>
    return nullptr;
 8001c00:	2300      	movs	r3, #0
  }
 8001c02:	4618      	mov	r0, r3
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
	...

08001c0c <_ZNK6tflite22MicroMutableOpResolverILj4EE15GetOpDataParserENS_15BuiltinOperatorE>:
  MicroOpResolver::BuiltinParseFunction GetOpDataParser(
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	460b      	mov	r3, r1
 8001c16:	70fb      	strb	r3, [r7, #3]
    return ParseOpData;
 8001c18:	4b03      	ldr	r3, [pc, #12]	; (8001c28 <_ZNK6tflite22MicroMutableOpResolverILj4EE15GetOpDataParserENS_15BuiltinOperatorE+0x1c>)
  }
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	08006e05 	.word	0x08006e05

08001c2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c32:	4b0f      	ldr	r3, [pc, #60]	; (8001c70 <HAL_MspInit+0x44>)
 8001c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c36:	4a0e      	ldr	r2, [pc, #56]	; (8001c70 <HAL_MspInit+0x44>)
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	6613      	str	r3, [r2, #96]	; 0x60
 8001c3e:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <HAL_MspInit+0x44>)
 8001c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	607b      	str	r3, [r7, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c4a:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <HAL_MspInit+0x44>)
 8001c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4e:	4a08      	ldr	r2, [pc, #32]	; (8001c70 <HAL_MspInit+0x44>)
 8001c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c54:	6593      	str	r3, [r2, #88]	; 0x58
 8001c56:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <HAL_MspInit+0x44>)
 8001c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5e:	603b      	str	r3, [r7, #0]
 8001c60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001c62:	f000 fdf9 	bl	8002858 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40021000 	.word	0x40021000

08001c74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a0d      	ldr	r2, [pc, #52]	; (8001cb8 <HAL_TIM_Base_MspInit+0x44>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d113      	bne.n	8001cae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001c86:	4b0d      	ldr	r3, [pc, #52]	; (8001cbc <HAL_TIM_Base_MspInit+0x48>)
 8001c88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c8a:	4a0c      	ldr	r2, [pc, #48]	; (8001cbc <HAL_TIM_Base_MspInit+0x48>)
 8001c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c90:	6613      	str	r3, [r2, #96]	; 0x60
 8001c92:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <HAL_TIM_Base_MspInit+0x48>)
 8001c94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	2046      	movs	r0, #70	; 0x46
 8001ca4:	f000 fba1 	bl	80023ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001ca8:	2046      	movs	r0, #70	; 0x46
 8001caa:	f000 fbb8 	bl	800241e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001cae:	bf00      	nop
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40014400 	.word	0x40014400
 8001cbc:	40021000 	.word	0x40021000

08001cc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b0ae      	sub	sp, #184	; 0xb8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cd8:	f107 0310 	add.w	r3, r7, #16
 8001cdc:	2294      	movs	r2, #148	; 0x94
 8001cde:	2100      	movs	r1, #0
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f01d f9a1 	bl	801f028 <memset>
  if(huart->Instance==USART3)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a21      	ldr	r2, [pc, #132]	; (8001d70 <HAL_UART_MspInit+0xb0>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d13b      	bne.n	8001d68 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001cf0:	2304      	movs	r3, #4
 8001cf2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cf8:	f107 0310 	add.w	r3, r7, #16
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f001 fd13 	bl	8003728 <HAL_RCCEx_PeriphCLKConfig>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d08:	f7ff fd7a 	bl	8001800 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d0c:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <HAL_UART_MspInit+0xb4>)
 8001d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d10:	4a18      	ldr	r2, [pc, #96]	; (8001d74 <HAL_UART_MspInit+0xb4>)
 8001d12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d16:	6593      	str	r3, [r2, #88]	; 0x58
 8001d18:	4b16      	ldr	r3, [pc, #88]	; (8001d74 <HAL_UART_MspInit+0xb4>)
 8001d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d24:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <HAL_UART_MspInit+0xb4>)
 8001d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d28:	4a12      	ldr	r2, [pc, #72]	; (8001d74 <HAL_UART_MspInit+0xb4>)
 8001d2a:	f043 0302 	orr.w	r3, r3, #2
 8001d2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d30:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <HAL_UART_MspInit+0xb4>)
 8001d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	60bb      	str	r3, [r7, #8]
 8001d3a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d3c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d44:	2302      	movs	r3, #2
 8001d46:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d50:	2300      	movs	r3, #0
 8001d52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d56:	2307      	movs	r3, #7
 8001d58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d5c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d60:	4619      	mov	r1, r3
 8001d62:	4805      	ldr	r0, [pc, #20]	; (8001d78 <HAL_UART_MspInit+0xb8>)
 8001d64:	f000 fb76 	bl	8002454 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d68:	bf00      	nop
 8001d6a:	37b8      	adds	r7, #184	; 0xb8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40004800 	.word	0x40004800
 8001d74:	40021000 	.word	0x40021000
 8001d78:	42020400 	.word	0x42020400

08001d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d80:	bf00      	nop
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d8e:	e7fe      	b.n	8001d8e <HardFault_Handler+0x4>

08001d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d94:	e7fe      	b.n	8001d94 <MemManage_Handler+0x4>

08001d96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d96:	b480      	push	{r7}
 8001d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d9a:	e7fe      	b.n	8001d9a <BusFault_Handler+0x4>

08001d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001da0:	e7fe      	b.n	8001da0 <UsageFault_Handler+0x4>

08001da2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001da2:	b480      	push	{r7}
 8001da4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dd0:	f000 fa10 	bl	80021f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dd4:	bf00      	nop
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001ddc:	4802      	ldr	r0, [pc, #8]	; (8001de8 <TIM16_IRQHandler+0x10>)
 8001dde:	f002 fa37 	bl	8004250 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20016f3c 	.word	0x20016f3c

08001dec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
	return 1;
 8001df0:	2301      	movs	r3, #1
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <_kill>:

int _kill(int pid, int sig)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e06:	f01d f84f 	bl	801eea8 <__errno>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	2316      	movs	r3, #22
 8001e0e:	6013      	str	r3, [r2, #0]
	return -1;
 8001e10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <_exit>:

void _exit (int status)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e24:	f04f 31ff 	mov.w	r1, #4294967295
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f7ff ffe7 	bl	8001dfc <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e2e:	e7fe      	b.n	8001e2e <_exit+0x12>

08001e30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]
 8001e40:	e00a      	b.n	8001e58 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e42:	e000      	b.n	8001e46 <_read+0x16>
 8001e44:	bf00      	nop
 8001e46:	4601      	mov	r1, r0
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	1c5a      	adds	r2, r3, #1
 8001e4c:	60ba      	str	r2, [r7, #8]
 8001e4e:	b2ca      	uxtb	r2, r1
 8001e50:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	3301      	adds	r3, #1
 8001e56:	617b      	str	r3, [r7, #20]
 8001e58:	697a      	ldr	r2, [r7, #20]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	dbf0      	blt.n	8001e42 <_read+0x12>
	}

return len;
 8001e60:	687b      	ldr	r3, [r7, #4]
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3718      	adds	r7, #24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b086      	sub	sp, #24
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	60f8      	str	r0, [r7, #12]
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
 8001e7a:	e009      	b.n	8001e90 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	1c5a      	adds	r2, r3, #1
 8001e80:	60ba      	str	r2, [r7, #8]
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	e000      	b.n	8001e8a <_write+0x20>
 8001e88:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	617b      	str	r3, [r7, #20]
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	dbf1      	blt.n	8001e7c <_write+0x12>
	}
	return len;
 8001e98:	687b      	ldr	r3, [r7, #4]
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3718      	adds	r7, #24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <_close>:

int _close(int file)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
	return -1;
 8001eaa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b083      	sub	sp, #12
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
 8001ec2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eca:	605a      	str	r2, [r3, #4]
	return 0;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <_isatty>:

int _isatty(int file)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
	return 1;
 8001ee2:	2301      	movs	r3, #1
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
	return 0;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3714      	adds	r7, #20
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
	...

08001f0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f14:	4a14      	ldr	r2, [pc, #80]	; (8001f68 <_sbrk+0x5c>)
 8001f16:	4b15      	ldr	r3, [pc, #84]	; (8001f6c <_sbrk+0x60>)
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f20:	4b13      	ldr	r3, [pc, #76]	; (8001f70 <_sbrk+0x64>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d102      	bne.n	8001f2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f28:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <_sbrk+0x64>)
 8001f2a:	4a12      	ldr	r2, [pc, #72]	; (8001f74 <_sbrk+0x68>)
 8001f2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f2e:	4b10      	ldr	r3, [pc, #64]	; (8001f70 <_sbrk+0x64>)
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4413      	add	r3, r2
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d207      	bcs.n	8001f4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f3c:	f01c ffb4 	bl	801eea8 <__errno>
 8001f40:	4602      	mov	r2, r0
 8001f42:	230c      	movs	r3, #12
 8001f44:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001f46:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4a:	e009      	b.n	8001f60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f4c:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <_sbrk+0x64>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f52:	4b07      	ldr	r3, [pc, #28]	; (8001f70 <_sbrk+0x64>)
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4413      	add	r3, r2
 8001f5a:	4a05      	ldr	r2, [pc, #20]	; (8001f70 <_sbrk+0x64>)
 8001f5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3718      	adds	r7, #24
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	20030000 	.word	0x20030000
 8001f6c:	00000400 	.word	0x00000400
 8001f70:	2002d0ec 	.word	0x2002d0ec
 8001f74:	2002d198 	.word	0x2002d198

08001f78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f7c:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <SystemInit+0x20>)
 8001f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f82:	4a05      	ldr	r2, [pc, #20]	; (8001f98 <SystemInit+0x20>)
 8001f84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001f8c:	bf00      	nop
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b087      	sub	sp, #28
 8001fa0:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8001fa2:	4b4f      	ldr	r3, [pc, #316]	; (80020e0 <SystemCoreClockUpdate+0x144>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0308 	and.w	r3, r3, #8
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d107      	bne.n	8001fbe <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8001fae:	4b4c      	ldr	r3, [pc, #304]	; (80020e0 <SystemCoreClockUpdate+0x144>)
 8001fb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fb4:	0a1b      	lsrs	r3, r3, #8
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	617b      	str	r3, [r7, #20]
 8001fbc:	e005      	b.n	8001fca <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8001fbe:	4b48      	ldr	r3, [pc, #288]	; (80020e0 <SystemCoreClockUpdate+0x144>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	091b      	lsrs	r3, r3, #4
 8001fc4:	f003 030f 	and.w	r3, r3, #15
 8001fc8:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8001fca:	4a46      	ldr	r2, [pc, #280]	; (80020e4 <SystemCoreClockUpdate+0x148>)
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd2:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fd4:	4b42      	ldr	r3, [pc, #264]	; (80020e0 <SystemCoreClockUpdate+0x144>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f003 030c 	and.w	r3, r3, #12
 8001fdc:	2b0c      	cmp	r3, #12
 8001fde:	d865      	bhi.n	80020ac <SystemCoreClockUpdate+0x110>
 8001fe0:	a201      	add	r2, pc, #4	; (adr r2, 8001fe8 <SystemCoreClockUpdate+0x4c>)
 8001fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe6:	bf00      	nop
 8001fe8:	0800201d 	.word	0x0800201d
 8001fec:	080020ad 	.word	0x080020ad
 8001ff0:	080020ad 	.word	0x080020ad
 8001ff4:	080020ad 	.word	0x080020ad
 8001ff8:	08002025 	.word	0x08002025
 8001ffc:	080020ad 	.word	0x080020ad
 8002000:	080020ad 	.word	0x080020ad
 8002004:	080020ad 	.word	0x080020ad
 8002008:	0800202d 	.word	0x0800202d
 800200c:	080020ad 	.word	0x080020ad
 8002010:	080020ad 	.word	0x080020ad
 8002014:	080020ad 	.word	0x080020ad
 8002018:	08002035 	.word	0x08002035
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 800201c:	4a32      	ldr	r2, [pc, #200]	; (80020e8 <SystemCoreClockUpdate+0x14c>)
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	6013      	str	r3, [r2, #0]
      break;
 8002022:	e047      	b.n	80020b4 <SystemCoreClockUpdate+0x118>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8002024:	4b30      	ldr	r3, [pc, #192]	; (80020e8 <SystemCoreClockUpdate+0x14c>)
 8002026:	4a31      	ldr	r2, [pc, #196]	; (80020ec <SystemCoreClockUpdate+0x150>)
 8002028:	601a      	str	r2, [r3, #0]
      break;
 800202a:	e043      	b.n	80020b4 <SystemCoreClockUpdate+0x118>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800202c:	4b2e      	ldr	r3, [pc, #184]	; (80020e8 <SystemCoreClockUpdate+0x14c>)
 800202e:	4a2f      	ldr	r2, [pc, #188]	; (80020ec <SystemCoreClockUpdate+0x150>)
 8002030:	601a      	str	r2, [r3, #0]
      break;
 8002032:	e03f      	b.n	80020b4 <SystemCoreClockUpdate+0x118>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002034:	4b2a      	ldr	r3, [pc, #168]	; (80020e0 <SystemCoreClockUpdate+0x144>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	f003 0303 	and.w	r3, r3, #3
 800203c:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 800203e:	4b28      	ldr	r3, [pc, #160]	; (80020e0 <SystemCoreClockUpdate+0x144>)
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	091b      	lsrs	r3, r3, #4
 8002044:	f003 030f 	and.w	r3, r3, #15
 8002048:	3301      	adds	r3, #1
 800204a:	60bb      	str	r3, [r7, #8]

      switch (pllsource)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2b02      	cmp	r3, #2
 8002050:	d002      	beq.n	8002058 <SystemCoreClockUpdate+0xbc>
 8002052:	2b03      	cmp	r3, #3
 8002054:	d006      	beq.n	8002064 <SystemCoreClockUpdate+0xc8>
 8002056:	e00b      	b.n	8002070 <SystemCoreClockUpdate+0xd4>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8002058:	4a24      	ldr	r2, [pc, #144]	; (80020ec <SystemCoreClockUpdate+0x150>)
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002060:	613b      	str	r3, [r7, #16]
          break;
 8002062:	e00b      	b.n	800207c <SystemCoreClockUpdate+0xe0>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8002064:	4a21      	ldr	r2, [pc, #132]	; (80020ec <SystemCoreClockUpdate+0x150>)
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	fbb2 f3f3 	udiv	r3, r2, r3
 800206c:	613b      	str	r3, [r7, #16]
          break;
 800206e:	e005      	b.n	800207c <SystemCoreClockUpdate+0xe0>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	fbb2 f3f3 	udiv	r3, r2, r3
 8002078:	613b      	str	r3, [r7, #16]
          break;
 800207a:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 800207c:	4b18      	ldr	r3, [pc, #96]	; (80020e0 <SystemCoreClockUpdate+0x144>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	0a1b      	lsrs	r3, r3, #8
 8002082:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	fb02 f303 	mul.w	r3, r2, r3
 800208c:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 800208e:	4b14      	ldr	r3, [pc, #80]	; (80020e0 <SystemCoreClockUpdate+0x144>)
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	0e5b      	lsrs	r3, r3, #25
 8002094:	f003 0303 	and.w	r3, r3, #3
 8002098:	3301      	adds	r3, #1
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a6:	4a10      	ldr	r2, [pc, #64]	; (80020e8 <SystemCoreClockUpdate+0x14c>)
 80020a8:	6013      	str	r3, [r2, #0]
      break;
 80020aa:	e003      	b.n	80020b4 <SystemCoreClockUpdate+0x118>

    default:
      SystemCoreClock = msirange;
 80020ac:	4a0e      	ldr	r2, [pc, #56]	; (80020e8 <SystemCoreClockUpdate+0x14c>)
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	6013      	str	r3, [r2, #0]
      break;
 80020b2:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 80020b4:	4b0a      	ldr	r3, [pc, #40]	; (80020e0 <SystemCoreClockUpdate+0x144>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	091b      	lsrs	r3, r3, #4
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	4a0c      	ldr	r2, [pc, #48]	; (80020f0 <SystemCoreClockUpdate+0x154>)
 80020c0:	5cd3      	ldrb	r3, [r2, r3]
 80020c2:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80020c4:	4b08      	ldr	r3, [pc, #32]	; (80020e8 <SystemCoreClockUpdate+0x14c>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	fa22 f303 	lsr.w	r3, r2, r3
 80020ce:	4a06      	ldr	r2, [pc, #24]	; (80020e8 <SystemCoreClockUpdate+0x14c>)
 80020d0:	6013      	str	r3, [r2, #0]
}
 80020d2:	bf00      	nop
 80020d4:	371c      	adds	r7, #28
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	40021000 	.word	0x40021000
 80020e4:	08025580 	.word	0x08025580
 80020e8:	20016cbc 	.word	0x20016cbc
 80020ec:	00f42400 	.word	0x00f42400
 80020f0:	08025568 	.word	0x08025568

080020f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80020f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800212c <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80020f8:	f7ff ff3e 	bl	8001f78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80020fc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80020fe:	e003      	b.n	8002108 <LoopCopyDataInit>

08002100 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002100:	4b0b      	ldr	r3, [pc, #44]	; (8002130 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002102:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002104:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002106:	3104      	adds	r1, #4

08002108 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002108:	480a      	ldr	r0, [pc, #40]	; (8002134 <LoopForever+0xa>)
	ldr	r3, =_edata
 800210a:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <LoopForever+0xe>)
	adds	r2, r0, r1
 800210c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800210e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002110:	d3f6      	bcc.n	8002100 <CopyDataInit>
	ldr	r2, =_sbss
 8002112:	4a0a      	ldr	r2, [pc, #40]	; (800213c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002114:	e002      	b.n	800211c <LoopFillZerobss>

08002116 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002116:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002118:	f842 3b04 	str.w	r3, [r2], #4

0800211c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800211c:	4b08      	ldr	r3, [pc, #32]	; (8002140 <LoopForever+0x16>)
	cmp	r2, r3
 800211e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002120:	d3f9      	bcc.n	8002116 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002122:	f01c ff29 	bl	801ef78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002126:	f7ff f889 	bl	800123c <main>

0800212a <LoopForever>:

LoopForever:
    b LoopForever
 800212a:	e7fe      	b.n	800212a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800212c:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8002130:	08026360 	.word	0x08026360
	ldr	r0, =_sdata
 8002134:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002138:	20016f20 	.word	0x20016f20
	ldr	r2, =_sbss
 800213c:	20016f20 	.word	0x20016f20
	ldr	r3, = _ebss
 8002140:	2002d194 	.word	0x2002d194

08002144 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002144:	e7fe      	b.n	8002144 <ADC1_2_IRQHandler>

08002146 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b082      	sub	sp, #8
 800214a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800214c:	2300      	movs	r3, #0
 800214e:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002150:	2004      	movs	r0, #4
 8002152:	f000 f93f 	bl	80023d4 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8002156:	f7ff ff21 	bl	8001f9c <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800215a:	2000      	movs	r0, #0
 800215c:	f000 f80e 	bl	800217c <HAL_InitTick>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d002      	beq.n	800216c <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	71fb      	strb	r3, [r7, #7]
 800216a:	e001      	b.n	8002170 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800216c:	f7ff fd5e 	bl	8001c2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002170:	79fb      	ldrb	r3, [r7, #7]
}
 8002172:	4618      	mov	r0, r3
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
	...

0800217c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002184:	2300      	movs	r3, #0
 8002186:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002188:	4b17      	ldr	r3, [pc, #92]	; (80021e8 <HAL_InitTick+0x6c>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d023      	beq.n	80021d8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002190:	4b16      	ldr	r3, [pc, #88]	; (80021ec <HAL_InitTick+0x70>)
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	4b14      	ldr	r3, [pc, #80]	; (80021e8 <HAL_InitTick+0x6c>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	4619      	mov	r1, r3
 800219a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800219e:	fbb3 f3f1 	udiv	r3, r3, r1
 80021a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a6:	4618      	mov	r0, r3
 80021a8:	f000 f947 	bl	800243a <HAL_SYSTICK_Config>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10f      	bne.n	80021d2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b07      	cmp	r3, #7
 80021b6:	d809      	bhi.n	80021cc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021b8:	2200      	movs	r2, #0
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	f04f 30ff 	mov.w	r0, #4294967295
 80021c0:	f000 f913 	bl	80023ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021c4:	4a0a      	ldr	r2, [pc, #40]	; (80021f0 <HAL_InitTick+0x74>)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	e007      	b.n	80021dc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	73fb      	strb	r3, [r7, #15]
 80021d0:	e004      	b.n	80021dc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	73fb      	strb	r3, [r7, #15]
 80021d6:	e001      	b.n	80021dc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80021dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	20016cc4 	.word	0x20016cc4
 80021ec:	20016cbc 	.word	0x20016cbc
 80021f0:	20016cc0 	.word	0x20016cc0

080021f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021f8:	4b06      	ldr	r3, [pc, #24]	; (8002214 <HAL_IncTick+0x20>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	461a      	mov	r2, r3
 80021fe:	4b06      	ldr	r3, [pc, #24]	; (8002218 <HAL_IncTick+0x24>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4413      	add	r3, r2
 8002204:	4a04      	ldr	r2, [pc, #16]	; (8002218 <HAL_IncTick+0x24>)
 8002206:	6013      	str	r3, [r2, #0]
}
 8002208:	bf00      	nop
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	20016cc4 	.word	0x20016cc4
 8002218:	2002d18c 	.word	0x2002d18c

0800221c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  return uwTick;
 8002220:	4b03      	ldr	r3, [pc, #12]	; (8002230 <HAL_GetTick+0x14>)
 8002222:	681b      	ldr	r3, [r3, #0]
}
 8002224:	4618      	mov	r0, r3
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	2002d18c 	.word	0x2002d18c

08002234 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002244:	4b0c      	ldr	r3, [pc, #48]	; (8002278 <__NVIC_SetPriorityGrouping+0x44>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002250:	4013      	ands	r3, r2
 8002252:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800225c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002264:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002266:	4a04      	ldr	r2, [pc, #16]	; (8002278 <__NVIC_SetPriorityGrouping+0x44>)
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	60d3      	str	r3, [r2, #12]
}
 800226c:	bf00      	nop
 800226e:	3714      	adds	r7, #20
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr
 8002278:	e000ed00 	.word	0xe000ed00

0800227c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002280:	4b04      	ldr	r3, [pc, #16]	; (8002294 <__NVIC_GetPriorityGrouping+0x18>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	0a1b      	lsrs	r3, r3, #8
 8002286:	f003 0307 	and.w	r3, r3, #7
}
 800228a:	4618      	mov	r0, r3
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	e000ed00 	.word	0xe000ed00

08002298 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	db0b      	blt.n	80022c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022aa:	79fb      	ldrb	r3, [r7, #7]
 80022ac:	f003 021f 	and.w	r2, r3, #31
 80022b0:	4907      	ldr	r1, [pc, #28]	; (80022d0 <__NVIC_EnableIRQ+0x38>)
 80022b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b6:	095b      	lsrs	r3, r3, #5
 80022b8:	2001      	movs	r0, #1
 80022ba:	fa00 f202 	lsl.w	r2, r0, r2
 80022be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022c2:	bf00      	nop
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	e000e100 	.word	0xe000e100

080022d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	6039      	str	r1, [r7, #0]
 80022de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	db0a      	blt.n	80022fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	b2da      	uxtb	r2, r3
 80022ec:	490c      	ldr	r1, [pc, #48]	; (8002320 <__NVIC_SetPriority+0x4c>)
 80022ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f2:	0152      	lsls	r2, r2, #5
 80022f4:	b2d2      	uxtb	r2, r2
 80022f6:	440b      	add	r3, r1
 80022f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022fc:	e00a      	b.n	8002314 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	b2da      	uxtb	r2, r3
 8002302:	4908      	ldr	r1, [pc, #32]	; (8002324 <__NVIC_SetPriority+0x50>)
 8002304:	79fb      	ldrb	r3, [r7, #7]
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	3b04      	subs	r3, #4
 800230c:	0152      	lsls	r2, r2, #5
 800230e:	b2d2      	uxtb	r2, r2
 8002310:	440b      	add	r3, r1
 8002312:	761a      	strb	r2, [r3, #24]
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	e000e100 	.word	0xe000e100
 8002324:	e000ed00 	.word	0xe000ed00

08002328 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002328:	b480      	push	{r7}
 800232a:	b089      	sub	sp, #36	; 0x24
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	f1c3 0307 	rsb	r3, r3, #7
 8002342:	2b03      	cmp	r3, #3
 8002344:	bf28      	it	cs
 8002346:	2303      	movcs	r3, #3
 8002348:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	3303      	adds	r3, #3
 800234e:	2b06      	cmp	r3, #6
 8002350:	d902      	bls.n	8002358 <NVIC_EncodePriority+0x30>
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	3b04      	subs	r3, #4
 8002356:	e000      	b.n	800235a <NVIC_EncodePriority+0x32>
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800235c:	f04f 32ff 	mov.w	r2, #4294967295
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43da      	mvns	r2, r3
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	401a      	ands	r2, r3
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002370:	f04f 31ff 	mov.w	r1, #4294967295
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	fa01 f303 	lsl.w	r3, r1, r3
 800237a:	43d9      	mvns	r1, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002380:	4313      	orrs	r3, r2
         );
}
 8002382:	4618      	mov	r0, r3
 8002384:	3724      	adds	r7, #36	; 0x24
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
	...

08002390 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3b01      	subs	r3, #1
 800239c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023a0:	d301      	bcc.n	80023a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023a2:	2301      	movs	r3, #1
 80023a4:	e00f      	b.n	80023c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023a6:	4a0a      	ldr	r2, [pc, #40]	; (80023d0 <SysTick_Config+0x40>)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3b01      	subs	r3, #1
 80023ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ae:	2107      	movs	r1, #7
 80023b0:	f04f 30ff 	mov.w	r0, #4294967295
 80023b4:	f7ff ff8e 	bl	80022d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023b8:	4b05      	ldr	r3, [pc, #20]	; (80023d0 <SysTick_Config+0x40>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023be:	4b04      	ldr	r3, [pc, #16]	; (80023d0 <SysTick_Config+0x40>)
 80023c0:	2207      	movs	r2, #7
 80023c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	e000e010 	.word	0xe000e010

080023d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f7ff ff29 	bl	8002234 <__NVIC_SetPriorityGrouping>
}
 80023e2:	bf00      	nop
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b086      	sub	sp, #24
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	4603      	mov	r3, r0
 80023f2:	60b9      	str	r1, [r7, #8]
 80023f4:	607a      	str	r2, [r7, #4]
 80023f6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023f8:	f7ff ff40 	bl	800227c <__NVIC_GetPriorityGrouping>
 80023fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	68b9      	ldr	r1, [r7, #8]
 8002402:	6978      	ldr	r0, [r7, #20]
 8002404:	f7ff ff90 	bl	8002328 <NVIC_EncodePriority>
 8002408:	4602      	mov	r2, r0
 800240a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800240e:	4611      	mov	r1, r2
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff ff5f 	bl	80022d4 <__NVIC_SetPriority>
}
 8002416:	bf00      	nop
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b082      	sub	sp, #8
 8002422:	af00      	add	r7, sp, #0
 8002424:	4603      	mov	r3, r0
 8002426:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff ff33 	bl	8002298 <__NVIC_EnableIRQ>
}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b082      	sub	sp, #8
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7ff ffa4 	bl	8002390 <SysTick_Config>
 8002448:	4603      	mov	r3, r0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
	...

08002454 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002454:	b480      	push	{r7}
 8002456:	b087      	sub	sp, #28
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 800245e:	2300      	movs	r3, #0
 8002460:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002462:	e158      	b.n	8002716 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	2101      	movs	r1, #1
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	fa01 f303 	lsl.w	r3, r1, r3
 8002470:	4013      	ands	r3, r2
 8002472:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2b00      	cmp	r3, #0
 8002478:	f000 814a 	beq.w	8002710 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d00b      	beq.n	800249c <HAL_GPIO_Init+0x48>
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2b02      	cmp	r3, #2
 800248a:	d007      	beq.n	800249c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002490:	2b11      	cmp	r3, #17
 8002492:	d003      	beq.n	800249c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	2b12      	cmp	r3, #18
 800249a:	d130      	bne.n	80024fe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	2203      	movs	r2, #3
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	43db      	mvns	r3, r3
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	4013      	ands	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	68da      	ldr	r2, [r3, #12]
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024d2:	2201      	movs	r2, #1
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	43db      	mvns	r3, r3
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	4013      	ands	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	091b      	lsrs	r3, r3, #4
 80024e8:	f003 0201 	and.w	r2, r3, #1
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	2203      	movs	r2, #3
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	43db      	mvns	r3, r3
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	4013      	ands	r3, r2
 8002514:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	689a      	ldr	r2, [r3, #8]
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	4313      	orrs	r3, r2
 8002526:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2b02      	cmp	r3, #2
 8002534:	d003      	beq.n	800253e <HAL_GPIO_Init+0xea>
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	2b12      	cmp	r3, #18
 800253c:	d123      	bne.n	8002586 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	08da      	lsrs	r2, r3, #3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	3208      	adds	r2, #8
 8002546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800254a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	220f      	movs	r2, #15
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	43db      	mvns	r3, r3
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	4013      	ands	r3, r2
 8002560:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	691a      	ldr	r2, [r3, #16]
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	4313      	orrs	r3, r2
 8002576:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	08da      	lsrs	r2, r3, #3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3208      	adds	r2, #8
 8002580:	6939      	ldr	r1, [r7, #16]
 8002582:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	2203      	movs	r2, #3
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	43db      	mvns	r3, r3
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	4013      	ands	r3, r2
 800259c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f003 0203 	and.w	r2, r3, #3
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 80a4 	beq.w	8002710 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 80025c8:	4a5a      	ldr	r2, [pc, #360]	; (8002734 <HAL_GPIO_Init+0x2e0>)
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	089b      	lsrs	r3, r3, #2
 80025ce:	3318      	adds	r3, #24
 80025d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025d4:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	f003 0303 	and.w	r3, r3, #3
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	220f      	movs	r2, #15
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	43db      	mvns	r3, r3
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	4013      	ands	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a52      	ldr	r2, [pc, #328]	; (8002738 <HAL_GPIO_Init+0x2e4>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d025      	beq.n	8002640 <HAL_GPIO_Init+0x1ec>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a51      	ldr	r2, [pc, #324]	; (800273c <HAL_GPIO_Init+0x2e8>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d01f      	beq.n	800263c <HAL_GPIO_Init+0x1e8>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a50      	ldr	r2, [pc, #320]	; (8002740 <HAL_GPIO_Init+0x2ec>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d019      	beq.n	8002638 <HAL_GPIO_Init+0x1e4>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a4f      	ldr	r2, [pc, #316]	; (8002744 <HAL_GPIO_Init+0x2f0>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d013      	beq.n	8002634 <HAL_GPIO_Init+0x1e0>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a4e      	ldr	r2, [pc, #312]	; (8002748 <HAL_GPIO_Init+0x2f4>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d00d      	beq.n	8002630 <HAL_GPIO_Init+0x1dc>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a4d      	ldr	r2, [pc, #308]	; (800274c <HAL_GPIO_Init+0x2f8>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d007      	beq.n	800262c <HAL_GPIO_Init+0x1d8>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4a4c      	ldr	r2, [pc, #304]	; (8002750 <HAL_GPIO_Init+0x2fc>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d101      	bne.n	8002628 <HAL_GPIO_Init+0x1d4>
 8002624:	2306      	movs	r3, #6
 8002626:	e00c      	b.n	8002642 <HAL_GPIO_Init+0x1ee>
 8002628:	2307      	movs	r3, #7
 800262a:	e00a      	b.n	8002642 <HAL_GPIO_Init+0x1ee>
 800262c:	2305      	movs	r3, #5
 800262e:	e008      	b.n	8002642 <HAL_GPIO_Init+0x1ee>
 8002630:	2304      	movs	r3, #4
 8002632:	e006      	b.n	8002642 <HAL_GPIO_Init+0x1ee>
 8002634:	2303      	movs	r3, #3
 8002636:	e004      	b.n	8002642 <HAL_GPIO_Init+0x1ee>
 8002638:	2302      	movs	r3, #2
 800263a:	e002      	b.n	8002642 <HAL_GPIO_Init+0x1ee>
 800263c:	2301      	movs	r3, #1
 800263e:	e000      	b.n	8002642 <HAL_GPIO_Init+0x1ee>
 8002640:	2300      	movs	r3, #0
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	f002 0203 	and.w	r2, r2, #3
 8002648:	00d2      	lsls	r2, r2, #3
 800264a:	4093      	lsls	r3, r2
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	4313      	orrs	r3, r2
 8002650:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8002652:	4938      	ldr	r1, [pc, #224]	; (8002734 <HAL_GPIO_Init+0x2e0>)
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	089b      	lsrs	r3, r3, #2
 8002658:	3318      	adds	r3, #24
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002660:	4b34      	ldr	r3, [pc, #208]	; (8002734 <HAL_GPIO_Init+0x2e0>)
 8002662:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002666:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	43db      	mvns	r3, r3
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	4013      	ands	r3, r2
 8002670:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d003      	beq.n	8002686 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	4313      	orrs	r3, r2
 8002684:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002686:	4a2b      	ldr	r2, [pc, #172]	; (8002734 <HAL_GPIO_Init+0x2e0>)
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800268e:	4b29      	ldr	r3, [pc, #164]	; (8002734 <HAL_GPIO_Init+0x2e0>)
 8002690:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002694:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	43db      	mvns	r3, r3
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	4013      	ands	r3, r2
 800269e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d003      	beq.n	80026b4 <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026b4:	4a1f      	ldr	r2, [pc, #124]	; (8002734 <HAL_GPIO_Init+0x2e0>)
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026bc:	4b1d      	ldr	r3, [pc, #116]	; (8002734 <HAL_GPIO_Init+0x2e0>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	43db      	mvns	r3, r3
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	4013      	ands	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d003      	beq.n	80026e0 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	4313      	orrs	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026e0:	4a14      	ldr	r2, [pc, #80]	; (8002734 <HAL_GPIO_Init+0x2e0>)
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80026e6:	4b13      	ldr	r3, [pc, #76]	; (8002734 <HAL_GPIO_Init+0x2e0>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	43db      	mvns	r3, r3
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	4013      	ands	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4313      	orrs	r3, r2
 8002708:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800270a:	4a0a      	ldr	r2, [pc, #40]	; (8002734 <HAL_GPIO_Init+0x2e0>)
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	3301      	adds	r3, #1
 8002714:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	fa22 f303 	lsr.w	r3, r2, r3
 8002720:	2b00      	cmp	r3, #0
 8002722:	f47f ae9f 	bne.w	8002464 <HAL_GPIO_Init+0x10>
  }
}
 8002726:	bf00      	nop
 8002728:	371c      	adds	r7, #28
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	4002f400 	.word	0x4002f400
 8002738:	42020000 	.word	0x42020000
 800273c:	42020400 	.word	0x42020400
 8002740:	42020800 	.word	0x42020800
 8002744:	42020c00 	.word	0x42020c00
 8002748:	42021000 	.word	0x42021000
 800274c:	42021400 	.word	0x42021400
 8002750:	42021800 	.word	0x42021800

08002754 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	460b      	mov	r3, r1
 800275e:	807b      	strh	r3, [r7, #2]
 8002760:	4613      	mov	r3, r2
 8002762:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002764:	787b      	ldrb	r3, [r7, #1]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800276a:	887a      	ldrh	r2, [r7, #2]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002770:	e002      	b.n	8002778 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002772:	887a      	ldrh	r2, [r7, #2]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002788:	4b04      	ldr	r3, [pc, #16]	; (800279c <HAL_PWREx_GetVoltageRange+0x18>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002790:	4618      	mov	r0, r3
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	40007000 	.word	0x40007000

080027a0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 80027a8:	4b27      	ldr	r3, [pc, #156]	; (8002848 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027b0:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 80027b2:	f000 f861 	bl	8002878 <HAL_PWREx_SMPS_GetEffectiveMode>
 80027b6:	4603      	mov	r3, r0
 80027b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027bc:	d101      	bne.n	80027c2 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e03e      	b.n	8002840 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 80027c2:	4b21      	ldr	r3, [pc, #132]	; (8002848 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027ce:	d101      	bne.n	80027d4 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e035      	b.n	8002840 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d101      	bne.n	80027e0 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 80027dc:	2300      	movs	r3, #0
 80027de:	e02f      	b.n	8002840 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80027e0:	4b19      	ldr	r3, [pc, #100]	; (8002848 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80027e8:	4917      	ldr	r1, [pc, #92]	; (8002848 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 80027f0:	4b16      	ldr	r3, [pc, #88]	; (800284c <HAL_PWREx_ControlVoltageScaling+0xac>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	095b      	lsrs	r3, r3, #5
 80027f6:	4a16      	ldr	r2, [pc, #88]	; (8002850 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80027f8:	fba2 2303 	umull	r2, r3, r2, r3
 80027fc:	09db      	lsrs	r3, r3, #7
 80027fe:	2232      	movs	r2, #50	; 0x32
 8002800:	fb02 f303 	mul.w	r3, r2, r3
 8002804:	4a13      	ldr	r2, [pc, #76]	; (8002854 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8002806:	fba2 2303 	umull	r2, r3, r2, r3
 800280a:	08db      	lsrs	r3, r3, #3
 800280c:	3301      	adds	r3, #1
 800280e:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002810:	e002      	b.n	8002818 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	3b01      	subs	r3, #1
 8002816:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002818:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800281a:	695b      	ldr	r3, [r3, #20]
 800281c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002820:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002824:	d102      	bne.n	800282c <HAL_PWREx_ControlVoltageScaling+0x8c>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1f2      	bne.n	8002812 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800282c:	4b06      	ldr	r3, [pc, #24]	; (8002848 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002834:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002838:	d101      	bne.n	800283e <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e000      	b.n	8002840 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40007000 	.word	0x40007000
 800284c:	20016cbc 	.word	0x20016cbc
 8002850:	0a7c5ac5 	.word	0x0a7c5ac5
 8002854:	cccccccd 	.word	0xcccccccd

08002858 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800285c:	4b05      	ldr	r3, [pc, #20]	; (8002874 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	4a04      	ldr	r2, [pc, #16]	; (8002874 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002862:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002866:	6093      	str	r3, [r2, #8]
}
 8002868:	bf00      	nop
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	40007000 	.word	0x40007000

08002878 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 800287e:	4b0f      	ldr	r3, [pc, #60]	; (80028bc <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 800288e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002892:	607b      	str	r3, [r7, #4]
 8002894:	e00a      	b.n	80028ac <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d103      	bne.n	80028a8 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 80028a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028a4:	607b      	str	r3, [r7, #4]
 80028a6:	e001      	b.n	80028ac <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 80028a8:	2300      	movs	r3, #0
 80028aa:	607b      	str	r3, [r7, #4]
  }

  return mode;
 80028ac:	687b      	ldr	r3, [r7, #4]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	40007000 	.word	0x40007000

080028c0 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b088      	sub	sp, #32
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d102      	bne.n	80028d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	f000 bc52 	b.w	8003178 <HAL_RCC_OscConfig+0x8b8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028d4:	4ba3      	ldr	r3, [pc, #652]	; (8002b64 <HAL_RCC_OscConfig+0x2a4>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 030c 	and.w	r3, r3, #12
 80028dc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028de:	4ba1      	ldr	r3, [pc, #644]	; (8002b64 <HAL_RCC_OscConfig+0x2a4>)
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	f003 0303 	and.w	r3, r3, #3
 80028e6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0310 	and.w	r3, r3, #16
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f000 80da 	beq.w	8002aaa <HAL_RCC_OscConfig+0x1ea>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d006      	beq.n	800290a <HAL_RCC_OscConfig+0x4a>
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	2b0c      	cmp	r3, #12
 8002900:	f040 8081 	bne.w	8002a06 <HAL_RCC_OscConfig+0x146>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d17d      	bne.n	8002a06 <HAL_RCC_OscConfig+0x146>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800290a:	4b96      	ldr	r3, [pc, #600]	; (8002b64 <HAL_RCC_OscConfig+0x2a4>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d006      	beq.n	8002924 <HAL_RCC_OscConfig+0x64>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	69db      	ldr	r3, [r3, #28]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d102      	bne.n	8002924 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	f000 bc2a 	b.w	8003178 <HAL_RCC_OscConfig+0x8b8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002928:	4b8e      	ldr	r3, [pc, #568]	; (8002b64 <HAL_RCC_OscConfig+0x2a4>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0308 	and.w	r3, r3, #8
 8002930:	2b00      	cmp	r3, #0
 8002932:	d004      	beq.n	800293e <HAL_RCC_OscConfig+0x7e>
 8002934:	4b8b      	ldr	r3, [pc, #556]	; (8002b64 <HAL_RCC_OscConfig+0x2a4>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800293c:	e005      	b.n	800294a <HAL_RCC_OscConfig+0x8a>
 800293e:	4b89      	ldr	r3, [pc, #548]	; (8002b64 <HAL_RCC_OscConfig+0x2a4>)
 8002940:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002944:	091b      	lsrs	r3, r3, #4
 8002946:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800294a:	4293      	cmp	r3, r2
 800294c:	d224      	bcs.n	8002998 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002952:	4618      	mov	r0, r3
 8002954:	f000 fe0c 	bl	8003570 <RCC_SetFlashLatencyFromMSIRange>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d002      	beq.n	8002964 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	f000 bc0a 	b.w	8003178 <HAL_RCC_OscConfig+0x8b8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002964:	4b7f      	ldr	r3, [pc, #508]	; (8002b64 <HAL_RCC_OscConfig+0x2a4>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a7e      	ldr	r2, [pc, #504]	; (8002b64 <HAL_RCC_OscConfig+0x2a4>)
 800296a:	f043 0308 	orr.w	r3, r3, #8
 800296e:	6013      	str	r3, [r2, #0]
 8002970:	4b7c      	ldr	r3, [pc, #496]	; (8002b64 <HAL_RCC_OscConfig+0x2a4>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297c:	4979      	ldr	r1, [pc, #484]	; (8002b64 <HAL_RCC_OscConfig+0x2a4>)
 800297e:	4313      	orrs	r3, r2
 8002980:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002982:	4b78      	ldr	r3, [pc, #480]	; (8002b64 <HAL_RCC_OscConfig+0x2a4>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	021b      	lsls	r3, r3, #8
 8002990:	4974      	ldr	r1, [pc, #464]	; (8002b64 <HAL_RCC_OscConfig+0x2a4>)
 8002992:	4313      	orrs	r3, r2
 8002994:	604b      	str	r3, [r1, #4]
 8002996:	e025      	b.n	80029e4 <HAL_RCC_OscConfig+0x124>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002998:	4b72      	ldr	r3, [pc, #456]	; (8002b64 <HAL_RCC_OscConfig+0x2a4>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a71      	ldr	r2, [pc, #452]	; (8002b64 <HAL_RCC_OscConfig+0x2a4>)
 800299e:	f043 0308 	orr.w	r3, r3, #8
 80029a2:	6013      	str	r3, [r2, #0]
 80029a4:	4b6f      	ldr	r3, [pc, #444]	; (8002b64 <HAL_RCC_OscConfig+0x2a4>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b0:	496c      	ldr	r1, [pc, #432]	; (8002b64 <HAL_RCC_OscConfig+0x2a4>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029b6:	4b6b      	ldr	r3, [pc, #428]	; (8002b64 <HAL_RCC_OscConfig+0x2a4>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	021b      	lsls	r3, r3, #8
 80029c4:	4967      	ldr	r1, [pc, #412]	; (8002b64 <HAL_RCC_OscConfig+0x2a4>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d109      	bne.n	80029e4 <HAL_RCC_OscConfig+0x124>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d4:	4618      	mov	r0, r3
 80029d6:	f000 fdcb 	bl	8003570 <RCC_SetFlashLatencyFromMSIRange>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <HAL_RCC_OscConfig+0x124>
            {
              return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e3c9      	b.n	8003178 <HAL_RCC_OscConfig+0x8b8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80029e4:	f000 fd88 	bl	80034f8 <HAL_RCC_GetHCLKFreq>
 80029e8:	4602      	mov	r2, r0
 80029ea:	4b5f      	ldr	r3, [pc, #380]	; (8002b68 <HAL_RCC_OscConfig+0x2a8>)
 80029ec:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80029ee:	4b5f      	ldr	r3, [pc, #380]	; (8002b6c <HAL_RCC_OscConfig+0x2ac>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff fbc2 	bl	800217c <HAL_InitTick>
 80029f8:	4603      	mov	r3, r0
 80029fa:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 80029fc:	7bfb      	ldrb	r3, [r7, #15]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d052      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x1e8>
        {
          return status;
 8002a02:	7bfb      	ldrb	r3, [r7, #15]
 8002a04:	e3b8      	b.n	8003178 <HAL_RCC_OscConfig+0x8b8>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d032      	beq.n	8002a74 <HAL_RCC_OscConfig+0x1b4>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a0e:	4b55      	ldr	r3, [pc, #340]	; (8002b64 <HAL_RCC_OscConfig+0x2a4>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a54      	ldr	r2, [pc, #336]	; (8002b64 <HAL_RCC_OscConfig+0x2a4>)
 8002a14:	f043 0301 	orr.w	r3, r3, #1
 8002a18:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a1a:	f7ff fbff 	bl	800221c <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x174>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a22:	f7ff fbfb 	bl	800221c <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x174>
          {
            return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e3a1      	b.n	8003178 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a34:	4b4b      	ldr	r3, [pc, #300]	; (8002b64 <HAL_RCC_OscConfig+0x2a4>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d0f0      	beq.n	8002a22 <HAL_RCC_OscConfig+0x162>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a40:	4b48      	ldr	r3, [pc, #288]	; (8002b64 <HAL_RCC_OscConfig+0x2a4>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a47      	ldr	r2, [pc, #284]	; (8002b64 <HAL_RCC_OscConfig+0x2a4>)
 8002a46:	f043 0308 	orr.w	r3, r3, #8
 8002a4a:	6013      	str	r3, [r2, #0]
 8002a4c:	4b45      	ldr	r3, [pc, #276]	; (8002b64 <HAL_RCC_OscConfig+0x2a4>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a58:	4942      	ldr	r1, [pc, #264]	; (8002b64 <HAL_RCC_OscConfig+0x2a4>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a5e:	4b41      	ldr	r3, [pc, #260]	; (8002b64 <HAL_RCC_OscConfig+0x2a4>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	021b      	lsls	r3, r3, #8
 8002a6c:	493d      	ldr	r1, [pc, #244]	; (8002b64 <HAL_RCC_OscConfig+0x2a4>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	604b      	str	r3, [r1, #4]
 8002a72:	e01a      	b.n	8002aaa <HAL_RCC_OscConfig+0x1ea>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a74:	4b3b      	ldr	r3, [pc, #236]	; (8002b64 <HAL_RCC_OscConfig+0x2a4>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a3a      	ldr	r2, [pc, #232]	; (8002b64 <HAL_RCC_OscConfig+0x2a4>)
 8002a7a:	f023 0301 	bic.w	r3, r3, #1
 8002a7e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a80:	f7ff fbcc 	bl	800221c <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0x1da>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a88:	f7ff fbc8 	bl	800221c <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x1da>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e36e      	b.n	8003178 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a9a:	4b32      	ldr	r3, [pc, #200]	; (8002b64 <HAL_RCC_OscConfig+0x2a4>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1f0      	bne.n	8002a88 <HAL_RCC_OscConfig+0x1c8>
 8002aa6:	e000      	b.n	8002aaa <HAL_RCC_OscConfig+0x1ea>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002aa8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d071      	beq.n	8002b9a <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	2b08      	cmp	r3, #8
 8002aba:	d005      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x208>
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	2b0c      	cmp	r3, #12
 8002ac0:	d10e      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x220>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	2b03      	cmp	r3, #3
 8002ac6:	d10b      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x220>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac8:	4b26      	ldr	r3, [pc, #152]	; (8002b64 <HAL_RCC_OscConfig+0x2a4>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d061      	beq.n	8002b98 <HAL_RCC_OscConfig+0x2d8>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d15d      	bne.n	8002b98 <HAL_RCC_OscConfig+0x2d8>
      {
        return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e34b      	b.n	8003178 <HAL_RCC_OscConfig+0x8b8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ae8:	d106      	bne.n	8002af8 <HAL_RCC_OscConfig+0x238>
 8002aea:	4b1e      	ldr	r3, [pc, #120]	; (8002b64 <HAL_RCC_OscConfig+0x2a4>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a1d      	ldr	r2, [pc, #116]	; (8002b64 <HAL_RCC_OscConfig+0x2a4>)
 8002af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af4:	6013      	str	r3, [r2, #0]
 8002af6:	e01d      	b.n	8002b34 <HAL_RCC_OscConfig+0x274>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b00:	d10c      	bne.n	8002b1c <HAL_RCC_OscConfig+0x25c>
 8002b02:	4b18      	ldr	r3, [pc, #96]	; (8002b64 <HAL_RCC_OscConfig+0x2a4>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a17      	ldr	r2, [pc, #92]	; (8002b64 <HAL_RCC_OscConfig+0x2a4>)
 8002b08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b0c:	6013      	str	r3, [r2, #0]
 8002b0e:	4b15      	ldr	r3, [pc, #84]	; (8002b64 <HAL_RCC_OscConfig+0x2a4>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a14      	ldr	r2, [pc, #80]	; (8002b64 <HAL_RCC_OscConfig+0x2a4>)
 8002b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b18:	6013      	str	r3, [r2, #0]
 8002b1a:	e00b      	b.n	8002b34 <HAL_RCC_OscConfig+0x274>
 8002b1c:	4b11      	ldr	r3, [pc, #68]	; (8002b64 <HAL_RCC_OscConfig+0x2a4>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a10      	ldr	r2, [pc, #64]	; (8002b64 <HAL_RCC_OscConfig+0x2a4>)
 8002b22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b26:	6013      	str	r3, [r2, #0]
 8002b28:	4b0e      	ldr	r3, [pc, #56]	; (8002b64 <HAL_RCC_OscConfig+0x2a4>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a0d      	ldr	r2, [pc, #52]	; (8002b64 <HAL_RCC_OscConfig+0x2a4>)
 8002b2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d019      	beq.n	8002b70 <HAL_RCC_OscConfig+0x2b0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b3c:	f7ff fb6e 	bl	800221c <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0x296>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b44:	f7ff fb6a 	bl	800221c <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b64      	cmp	r3, #100	; 0x64
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x296>
          {
            return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e310      	b.n	8003178 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b56:	4b03      	ldr	r3, [pc, #12]	; (8002b64 <HAL_RCC_OscConfig+0x2a4>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d0f0      	beq.n	8002b44 <HAL_RCC_OscConfig+0x284>
 8002b62:	e01a      	b.n	8002b9a <HAL_RCC_OscConfig+0x2da>
 8002b64:	40021000 	.word	0x40021000
 8002b68:	20016cbc 	.word	0x20016cbc
 8002b6c:	20016cc0 	.word	0x20016cc0
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b70:	f7ff fb54 	bl	800221c <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x2ca>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b78:	f7ff fb50 	bl	800221c <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b64      	cmp	r3, #100	; 0x64
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x2ca>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e2f6      	b.n	8003178 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b8a:	4ba6      	ldr	r3, [pc, #664]	; (8002e24 <HAL_RCC_OscConfig+0x564>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f0      	bne.n	8002b78 <HAL_RCC_OscConfig+0x2b8>
 8002b96:	e000      	b.n	8002b9a <HAL_RCC_OscConfig+0x2da>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d060      	beq.n	8002c68 <HAL_RCC_OscConfig+0x3a8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	2b04      	cmp	r3, #4
 8002baa:	d005      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x2f8>
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	2b0c      	cmp	r3, #12
 8002bb0:	d119      	bne.n	8002be6 <HAL_RCC_OscConfig+0x326>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d116      	bne.n	8002be6 <HAL_RCC_OscConfig+0x326>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bb8:	4b9a      	ldr	r3, [pc, #616]	; (8002e24 <HAL_RCC_OscConfig+0x564>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d005      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x310>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e2d3      	b.n	8003178 <HAL_RCC_OscConfig+0x8b8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd0:	4b94      	ldr	r3, [pc, #592]	; (8002e24 <HAL_RCC_OscConfig+0x564>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	061b      	lsls	r3, r3, #24
 8002bde:	4991      	ldr	r1, [pc, #580]	; (8002e24 <HAL_RCC_OscConfig+0x564>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002be4:	e040      	b.n	8002c68 <HAL_RCC_OscConfig+0x3a8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d023      	beq.n	8002c36 <HAL_RCC_OscConfig+0x376>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bee:	4b8d      	ldr	r3, [pc, #564]	; (8002e24 <HAL_RCC_OscConfig+0x564>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a8c      	ldr	r2, [pc, #560]	; (8002e24 <HAL_RCC_OscConfig+0x564>)
 8002bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bfa:	f7ff fb0f 	bl	800221c <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c00:	e008      	b.n	8002c14 <HAL_RCC_OscConfig+0x354>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c02:	f7ff fb0b 	bl	800221c <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e2b1      	b.n	8003178 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c14:	4b83      	ldr	r3, [pc, #524]	; (8002e24 <HAL_RCC_OscConfig+0x564>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0f0      	beq.n	8002c02 <HAL_RCC_OscConfig+0x342>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c20:	4b80      	ldr	r3, [pc, #512]	; (8002e24 <HAL_RCC_OscConfig+0x564>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	061b      	lsls	r3, r3, #24
 8002c2e:	497d      	ldr	r1, [pc, #500]	; (8002e24 <HAL_RCC_OscConfig+0x564>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	604b      	str	r3, [r1, #4]
 8002c34:	e018      	b.n	8002c68 <HAL_RCC_OscConfig+0x3a8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c36:	4b7b      	ldr	r3, [pc, #492]	; (8002e24 <HAL_RCC_OscConfig+0x564>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a7a      	ldr	r2, [pc, #488]	; (8002e24 <HAL_RCC_OscConfig+0x564>)
 8002c3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c42:	f7ff faeb 	bl	800221c <HAL_GetTick>
 8002c46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c48:	e008      	b.n	8002c5c <HAL_RCC_OscConfig+0x39c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c4a:	f7ff fae7 	bl	800221c <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e28d      	b.n	8003178 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c5c:	4b71      	ldr	r3, [pc, #452]	; (8002e24 <HAL_RCC_OscConfig+0x564>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1f0      	bne.n	8002c4a <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0308 	and.w	r3, r3, #8
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d051      	beq.n	8002d18 <HAL_RCC_OscConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d031      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x420>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d108      	bne.n	8002c96 <HAL_RCC_OscConfig+0x3d6>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8002c84:	4b67      	ldr	r3, [pc, #412]	; (8002e24 <HAL_RCC_OscConfig+0x564>)
 8002c86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c8a:	4a66      	ldr	r2, [pc, #408]	; (8002e24 <HAL_RCC_OscConfig+0x564>)
 8002c8c:	f023 0310 	bic.w	r3, r3, #16
 8002c90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002c94:	e007      	b.n	8002ca6 <HAL_RCC_OscConfig+0x3e6>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8002c96:	4b63      	ldr	r3, [pc, #396]	; (8002e24 <HAL_RCC_OscConfig+0x564>)
 8002c98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c9c:	4a61      	ldr	r2, [pc, #388]	; (8002e24 <HAL_RCC_OscConfig+0x564>)
 8002c9e:	f043 0310 	orr.w	r3, r3, #16
 8002ca2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ca6:	4b5f      	ldr	r3, [pc, #380]	; (8002e24 <HAL_RCC_OscConfig+0x564>)
 8002ca8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cac:	4a5d      	ldr	r2, [pc, #372]	; (8002e24 <HAL_RCC_OscConfig+0x564>)
 8002cae:	f043 0301 	orr.w	r3, r3, #1
 8002cb2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb6:	f7ff fab1 	bl	800221c <HAL_GetTick>
 8002cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cbc:	e008      	b.n	8002cd0 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cbe:	f7ff faad 	bl	800221c <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b07      	cmp	r3, #7
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e253      	b.n	8003178 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cd0:	4b54      	ldr	r3, [pc, #336]	; (8002e24 <HAL_RCC_OscConfig+0x564>)
 8002cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0ef      	beq.n	8002cbe <HAL_RCC_OscConfig+0x3fe>
 8002cde:	e01b      	b.n	8002d18 <HAL_RCC_OscConfig+0x458>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ce0:	4b50      	ldr	r3, [pc, #320]	; (8002e24 <HAL_RCC_OscConfig+0x564>)
 8002ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ce6:	4a4f      	ldr	r2, [pc, #316]	; (8002e24 <HAL_RCC_OscConfig+0x564>)
 8002ce8:	f023 0301 	bic.w	r3, r3, #1
 8002cec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf0:	f7ff fa94 	bl	800221c <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x44a>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cf8:	f7ff fa90 	bl	800221c <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b07      	cmp	r3, #7
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x44a>
        {
          return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e236      	b.n	8003178 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d0a:	4b46      	ldr	r3, [pc, #280]	; (8002e24 <HAL_RCC_OscConfig+0x564>)
 8002d0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1ef      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x438>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0304 	and.w	r3, r3, #4
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f000 8109 	beq.w	8002f38 <HAL_RCC_OscConfig+0x678>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d26:	2300      	movs	r3, #0
 8002d28:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d2a:	4b3e      	ldr	r3, [pc, #248]	; (8002e24 <HAL_RCC_OscConfig+0x564>)
 8002d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10d      	bne.n	8002d52 <HAL_RCC_OscConfig+0x492>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d36:	4b3b      	ldr	r3, [pc, #236]	; (8002e24 <HAL_RCC_OscConfig+0x564>)
 8002d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3a:	4a3a      	ldr	r2, [pc, #232]	; (8002e24 <HAL_RCC_OscConfig+0x564>)
 8002d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d40:	6593      	str	r3, [r2, #88]	; 0x58
 8002d42:	4b38      	ldr	r3, [pc, #224]	; (8002e24 <HAL_RCC_OscConfig+0x564>)
 8002d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4a:	60bb      	str	r3, [r7, #8]
 8002d4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d52:	4b35      	ldr	r3, [pc, #212]	; (8002e28 <HAL_RCC_OscConfig+0x568>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d118      	bne.n	8002d90 <HAL_RCC_OscConfig+0x4d0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d5e:	4b32      	ldr	r3, [pc, #200]	; (8002e28 <HAL_RCC_OscConfig+0x568>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a31      	ldr	r2, [pc, #196]	; (8002e28 <HAL_RCC_OscConfig+0x568>)
 8002d64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d6a:	f7ff fa57 	bl	800221c <HAL_GetTick>
 8002d6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d70:	e008      	b.n	8002d84 <HAL_RCC_OscConfig+0x4c4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d72:	f7ff fa53 	bl	800221c <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x4c4>
        {
          return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e1f9      	b.n	8003178 <HAL_RCC_OscConfig+0x8b8>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d84:	4b28      	ldr	r3, [pc, #160]	; (8002e28 <HAL_RCC_OscConfig+0x568>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d0f0      	beq.n	8002d72 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d01f      	beq.n	8002ddc <HAL_RCC_OscConfig+0x51c>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f003 0304 	and.w	r3, r3, #4
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d010      	beq.n	8002dca <HAL_RCC_OscConfig+0x50a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002da8:	4b1e      	ldr	r3, [pc, #120]	; (8002e24 <HAL_RCC_OscConfig+0x564>)
 8002daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dae:	4a1d      	ldr	r2, [pc, #116]	; (8002e24 <HAL_RCC_OscConfig+0x564>)
 8002db0:	f043 0304 	orr.w	r3, r3, #4
 8002db4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002db8:	4b1a      	ldr	r3, [pc, #104]	; (8002e24 <HAL_RCC_OscConfig+0x564>)
 8002dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dbe:	4a19      	ldr	r2, [pc, #100]	; (8002e24 <HAL_RCC_OscConfig+0x564>)
 8002dc0:	f043 0301 	orr.w	r3, r3, #1
 8002dc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dc8:	e018      	b.n	8002dfc <HAL_RCC_OscConfig+0x53c>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002dca:	4b16      	ldr	r3, [pc, #88]	; (8002e24 <HAL_RCC_OscConfig+0x564>)
 8002dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd0:	4a14      	ldr	r2, [pc, #80]	; (8002e24 <HAL_RCC_OscConfig+0x564>)
 8002dd2:	f043 0301 	orr.w	r3, r3, #1
 8002dd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dda:	e00f      	b.n	8002dfc <HAL_RCC_OscConfig+0x53c>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002ddc:	4b11      	ldr	r3, [pc, #68]	; (8002e24 <HAL_RCC_OscConfig+0x564>)
 8002dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de2:	4a10      	ldr	r2, [pc, #64]	; (8002e24 <HAL_RCC_OscConfig+0x564>)
 8002de4:	f023 0301 	bic.w	r3, r3, #1
 8002de8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002dec:	4b0d      	ldr	r3, [pc, #52]	; (8002e24 <HAL_RCC_OscConfig+0x564>)
 8002dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df2:	4a0c      	ldr	r2, [pc, #48]	; (8002e24 <HAL_RCC_OscConfig+0x564>)
 8002df4:	f023 0304 	bic.w	r3, r3, #4
 8002df8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d058      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x5f6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e04:	f7ff fa0a 	bl	800221c <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e0a:	e00f      	b.n	8002e2c <HAL_RCC_OscConfig+0x56c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e0c:	f7ff fa06 	bl	800221c <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d906      	bls.n	8002e2c <HAL_RCC_OscConfig+0x56c>
        {
          return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e1aa      	b.n	8003178 <HAL_RCC_OscConfig+0x8b8>
 8002e22:	bf00      	nop
 8002e24:	40021000 	.word	0x40021000
 8002e28:	40007000 	.word	0x40007000
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e2c:	4bb0      	ldr	r3, [pc, #704]	; (80030f0 <HAL_RCC_OscConfig+0x830>)
 8002e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d0e8      	beq.n	8002e0c <HAL_RCC_OscConfig+0x54c>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d01b      	beq.n	8002e7e <HAL_RCC_OscConfig+0x5be>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002e46:	4baa      	ldr	r3, [pc, #680]	; (80030f0 <HAL_RCC_OscConfig+0x830>)
 8002e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4c:	4aa8      	ldr	r2, [pc, #672]	; (80030f0 <HAL_RCC_OscConfig+0x830>)
 8002e4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002e56:	e00a      	b.n	8002e6e <HAL_RCC_OscConfig+0x5ae>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e58:	f7ff f9e0 	bl	800221c <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x5ae>
          {
            return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e184      	b.n	8003178 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002e6e:	4ba0      	ldr	r3, [pc, #640]	; (80030f0 <HAL_RCC_OscConfig+0x830>)
 8002e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d0ed      	beq.n	8002e58 <HAL_RCC_OscConfig+0x598>
 8002e7c:	e053      	b.n	8002f26 <HAL_RCC_OscConfig+0x666>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002e7e:	4b9c      	ldr	r3, [pc, #624]	; (80030f0 <HAL_RCC_OscConfig+0x830>)
 8002e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e84:	4a9a      	ldr	r2, [pc, #616]	; (80030f0 <HAL_RCC_OscConfig+0x830>)
 8002e86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002e8e:	e00a      	b.n	8002ea6 <HAL_RCC_OscConfig+0x5e6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e90:	f7ff f9c4 	bl	800221c <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e168      	b.n	8003178 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002ea6:	4b92      	ldr	r3, [pc, #584]	; (80030f0 <HAL_RCC_OscConfig+0x830>)
 8002ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1ed      	bne.n	8002e90 <HAL_RCC_OscConfig+0x5d0>
 8002eb4:	e037      	b.n	8002f26 <HAL_RCC_OscConfig+0x666>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb6:	f7ff f9b1 	bl	800221c <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ebc:	e00a      	b.n	8002ed4 <HAL_RCC_OscConfig+0x614>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ebe:	f7ff f9ad 	bl	800221c <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e151      	b.n	8003178 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ed4:	4b86      	ldr	r3, [pc, #536]	; (80030f0 <HAL_RCC_OscConfig+0x830>)
 8002ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1ed      	bne.n	8002ebe <HAL_RCC_OscConfig+0x5fe>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8002ee2:	4b83      	ldr	r3, [pc, #524]	; (80030f0 <HAL_RCC_OscConfig+0x830>)
 8002ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d01a      	beq.n	8002f26 <HAL_RCC_OscConfig+0x666>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002ef0:	4b7f      	ldr	r3, [pc, #508]	; (80030f0 <HAL_RCC_OscConfig+0x830>)
 8002ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef6:	4a7e      	ldr	r2, [pc, #504]	; (80030f0 <HAL_RCC_OscConfig+0x830>)
 8002ef8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002efc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002f00:	e00a      	b.n	8002f18 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f02:	f7ff f98b 	bl	800221c <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d901      	bls.n	8002f18 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e12f      	b.n	8003178 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002f18:	4b75      	ldr	r3, [pc, #468]	; (80030f0 <HAL_RCC_OscConfig+0x830>)
 8002f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1ed      	bne.n	8002f02 <HAL_RCC_OscConfig+0x642>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f26:	7ffb      	ldrb	r3, [r7, #31]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d105      	bne.n	8002f38 <HAL_RCC_OscConfig+0x678>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f2c:	4b70      	ldr	r3, [pc, #448]	; (80030f0 <HAL_RCC_OscConfig+0x830>)
 8002f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f30:	4a6f      	ldr	r2, [pc, #444]	; (80030f0 <HAL_RCC_OscConfig+0x830>)
 8002f32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f36:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0320 	and.w	r3, r3, #32
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d03c      	beq.n	8002fbe <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d01c      	beq.n	8002f86 <HAL_RCC_OscConfig+0x6c6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f4c:	4b68      	ldr	r3, [pc, #416]	; (80030f0 <HAL_RCC_OscConfig+0x830>)
 8002f4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f52:	4a67      	ldr	r2, [pc, #412]	; (80030f0 <HAL_RCC_OscConfig+0x830>)
 8002f54:	f043 0301 	orr.w	r3, r3, #1
 8002f58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f5c:	f7ff f95e 	bl	800221c <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0x6b6>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f64:	f7ff f95a 	bl	800221c <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e100      	b.n	8003178 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f76:	4b5e      	ldr	r3, [pc, #376]	; (80030f0 <HAL_RCC_OscConfig+0x830>)
 8002f78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d0ef      	beq.n	8002f64 <HAL_RCC_OscConfig+0x6a4>
 8002f84:	e01b      	b.n	8002fbe <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f86:	4b5a      	ldr	r3, [pc, #360]	; (80030f0 <HAL_RCC_OscConfig+0x830>)
 8002f88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f8c:	4a58      	ldr	r2, [pc, #352]	; (80030f0 <HAL_RCC_OscConfig+0x830>)
 8002f8e:	f023 0301 	bic.w	r3, r3, #1
 8002f92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f96:	f7ff f941 	bl	800221c <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f9c:	e008      	b.n	8002fb0 <HAL_RCC_OscConfig+0x6f0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f9e:	f7ff f93d 	bl	800221c <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e0e3      	b.n	8003178 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fb0:	4b4f      	ldr	r3, [pc, #316]	; (80030f0 <HAL_RCC_OscConfig+0x830>)
 8002fb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1ef      	bne.n	8002f9e <HAL_RCC_OscConfig+0x6de>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f000 80d7 	beq.w	8003176 <HAL_RCC_OscConfig+0x8b6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fc8:	4b49      	ldr	r3, [pc, #292]	; (80030f0 <HAL_RCC_OscConfig+0x830>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f003 030c 	and.w	r3, r3, #12
 8002fd0:	2b0c      	cmp	r3, #12
 8002fd2:	f000 8091 	beq.w	80030f8 <HAL_RCC_OscConfig+0x838>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d15a      	bne.n	8003094 <HAL_RCC_OscConfig+0x7d4>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fde:	4b44      	ldr	r3, [pc, #272]	; (80030f0 <HAL_RCC_OscConfig+0x830>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a43      	ldr	r2, [pc, #268]	; (80030f0 <HAL_RCC_OscConfig+0x830>)
 8002fe4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fe8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fea:	f7ff f917 	bl	800221c <HAL_GetTick>
 8002fee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ff0:	e008      	b.n	8003004 <HAL_RCC_OscConfig+0x744>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff2:	f7ff f913 	bl	800221c <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_OscConfig+0x744>
          {
            return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e0b9      	b.n	8003178 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003004:	4b3a      	ldr	r3, [pc, #232]	; (80030f0 <HAL_RCC_OscConfig+0x830>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1f0      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x732>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003010:	4b37      	ldr	r3, [pc, #220]	; (80030f0 <HAL_RCC_OscConfig+0x830>)
 8003012:	68da      	ldr	r2, [r3, #12]
 8003014:	4b37      	ldr	r3, [pc, #220]	; (80030f4 <HAL_RCC_OscConfig+0x834>)
 8003016:	4013      	ands	r3, r2
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003020:	3a01      	subs	r2, #1
 8003022:	0112      	lsls	r2, r2, #4
 8003024:	4311      	orrs	r1, r2
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800302a:	0212      	lsls	r2, r2, #8
 800302c:	4311      	orrs	r1, r2
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003032:	0852      	lsrs	r2, r2, #1
 8003034:	3a01      	subs	r2, #1
 8003036:	0552      	lsls	r2, r2, #21
 8003038:	4311      	orrs	r1, r2
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800303e:	0852      	lsrs	r2, r2, #1
 8003040:	3a01      	subs	r2, #1
 8003042:	0652      	lsls	r2, r2, #25
 8003044:	4311      	orrs	r1, r2
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800304a:	06d2      	lsls	r2, r2, #27
 800304c:	430a      	orrs	r2, r1
 800304e:	4928      	ldr	r1, [pc, #160]	; (80030f0 <HAL_RCC_OscConfig+0x830>)
 8003050:	4313      	orrs	r3, r2
 8003052:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003054:	4b26      	ldr	r3, [pc, #152]	; (80030f0 <HAL_RCC_OscConfig+0x830>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a25      	ldr	r2, [pc, #148]	; (80030f0 <HAL_RCC_OscConfig+0x830>)
 800305a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800305e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003060:	4b23      	ldr	r3, [pc, #140]	; (80030f0 <HAL_RCC_OscConfig+0x830>)
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	4a22      	ldr	r2, [pc, #136]	; (80030f0 <HAL_RCC_OscConfig+0x830>)
 8003066:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800306a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306c:	f7ff f8d6 	bl	800221c <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x7c6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003074:	f7ff f8d2 	bl	800221c <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x7c6>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e078      	b.n	8003178 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003086:	4b1a      	ldr	r3, [pc, #104]	; (80030f0 <HAL_RCC_OscConfig+0x830>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d0f0      	beq.n	8003074 <HAL_RCC_OscConfig+0x7b4>
 8003092:	e070      	b.n	8003176 <HAL_RCC_OscConfig+0x8b6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003094:	4b16      	ldr	r3, [pc, #88]	; (80030f0 <HAL_RCC_OscConfig+0x830>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a15      	ldr	r2, [pc, #84]	; (80030f0 <HAL_RCC_OscConfig+0x830>)
 800309a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800309e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80030a0:	4b13      	ldr	r3, [pc, #76]	; (80030f0 <HAL_RCC_OscConfig+0x830>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d105      	bne.n	80030b8 <HAL_RCC_OscConfig+0x7f8>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80030ac:	4b10      	ldr	r3, [pc, #64]	; (80030f0 <HAL_RCC_OscConfig+0x830>)
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	4a0f      	ldr	r2, [pc, #60]	; (80030f0 <HAL_RCC_OscConfig+0x830>)
 80030b2:	f023 0303 	bic.w	r3, r3, #3
 80030b6:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80030b8:	4b0d      	ldr	r3, [pc, #52]	; (80030f0 <HAL_RCC_OscConfig+0x830>)
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	4a0c      	ldr	r2, [pc, #48]	; (80030f0 <HAL_RCC_OscConfig+0x830>)
 80030be:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80030c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030c6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c8:	f7ff f8a8 	bl	800221c <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x822>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d0:	f7ff f8a4 	bl	800221c <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x822>
          {
            return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e04a      	b.n	8003178 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030e2:	4b03      	ldr	r3, [pc, #12]	; (80030f0 <HAL_RCC_OscConfig+0x830>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1f0      	bne.n	80030d0 <HAL_RCC_OscConfig+0x810>
 80030ee:	e042      	b.n	8003176 <HAL_RCC_OscConfig+0x8b6>
 80030f0:	40021000 	.word	0x40021000
 80030f4:	019f800c 	.word	0x019f800c
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d101      	bne.n	8003104 <HAL_RCC_OscConfig+0x844>
      {
        return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e039      	b.n	8003178 <HAL_RCC_OscConfig+0x8b8>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8003104:	4b1e      	ldr	r3, [pc, #120]	; (8003180 <HAL_RCC_OscConfig+0x8c0>)
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f003 0203 	and.w	r2, r3, #3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003114:	429a      	cmp	r2, r3
 8003116:	d12c      	bne.n	8003172 <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003122:	3b01      	subs	r3, #1
 8003124:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003126:	429a      	cmp	r2, r3
 8003128:	d123      	bne.n	8003172 <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003134:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003136:	429a      	cmp	r2, r3
 8003138:	d11b      	bne.n	8003172 <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003144:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003146:	429a      	cmp	r2, r3
 8003148:	d113      	bne.n	8003172 <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003154:	085b      	lsrs	r3, r3, #1
 8003156:	3b01      	subs	r3, #1
 8003158:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800315a:	429a      	cmp	r2, r3
 800315c:	d109      	bne.n	8003172 <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003168:	085b      	lsrs	r3, r3, #1
 800316a:	3b01      	subs	r3, #1
 800316c:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800316e:	429a      	cmp	r2, r3
 8003170:	d001      	beq.n	8003176 <HAL_RCC_OscConfig+0x8b6>
        {
          return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e000      	b.n	8003178 <HAL_RCC_OscConfig+0x8b8>
        }
      }
    }
  }

  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3720      	adds	r7, #32
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	40021000 	.word	0x40021000

08003184 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800318e:	2300      	movs	r3, #0
 8003190:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d101      	bne.n	800319c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e104      	b.n	80033a6 <HAL_RCC_ClockConfig+0x222>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800319c:	4b84      	ldr	r3, [pc, #528]	; (80033b0 <HAL_RCC_ClockConfig+0x22c>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 030f 	and.w	r3, r3, #15
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d910      	bls.n	80031cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031aa:	4b81      	ldr	r3, [pc, #516]	; (80033b0 <HAL_RCC_ClockConfig+0x22c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f023 020f 	bic.w	r2, r3, #15
 80031b2:	497f      	ldr	r1, [pc, #508]	; (80033b0 <HAL_RCC_ClockConfig+0x22c>)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ba:	4b7d      	ldr	r3, [pc, #500]	; (80033b0 <HAL_RCC_ClockConfig+0x22c>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 030f 	and.w	r3, r3, #15
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d001      	beq.n	80031cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e0ec      	b.n	80033a6 <HAL_RCC_ClockConfig+0x222>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 808b 	beq.w	80032f0 <HAL_RCC_ClockConfig+0x16c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2b03      	cmp	r3, #3
 80031e0:	d134      	bne.n	800324c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031e2:	4b74      	ldr	r3, [pc, #464]	; (80033b4 <HAL_RCC_ClockConfig+0x230>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e0d9      	b.n	80033a6 <HAL_RCC_ClockConfig+0x222>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80031f2:	f000 fa21 	bl	8003638 <RCC_GetSysClockFreqFromPLLSource>
 80031f6:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	4a6f      	ldr	r2, [pc, #444]	; (80033b8 <HAL_RCC_ClockConfig+0x234>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d956      	bls.n	80032ae <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003200:	4b6c      	ldr	r3, [pc, #432]	; (80033b4 <HAL_RCC_ClockConfig+0x230>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d10a      	bne.n	8003222 <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800320c:	4b69      	ldr	r3, [pc, #420]	; (80033b4 <HAL_RCC_ClockConfig+0x230>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003214:	4a67      	ldr	r2, [pc, #412]	; (80033b4 <HAL_RCC_ClockConfig+0x230>)
 8003216:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800321a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800321c:	2380      	movs	r3, #128	; 0x80
 800321e:	617b      	str	r3, [r7, #20]
 8003220:	e045      	b.n	80032ae <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d03f      	beq.n	80032ae <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003232:	2b00      	cmp	r3, #0
 8003234:	d13b      	bne.n	80032ae <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003236:	4b5f      	ldr	r3, [pc, #380]	; (80033b4 <HAL_RCC_ClockConfig+0x230>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800323e:	4a5d      	ldr	r2, [pc, #372]	; (80033b4 <HAL_RCC_ClockConfig+0x230>)
 8003240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003244:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003246:	2380      	movs	r3, #128	; 0x80
 8003248:	617b      	str	r3, [r7, #20]
 800324a:	e030      	b.n	80032ae <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	2b02      	cmp	r3, #2
 8003252:	d107      	bne.n	8003264 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003254:	4b57      	ldr	r3, [pc, #348]	; (80033b4 <HAL_RCC_ClockConfig+0x230>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d115      	bne.n	800328c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e0a0      	b.n	80033a6 <HAL_RCC_ClockConfig+0x222>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d107      	bne.n	800327c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800326c:	4b51      	ldr	r3, [pc, #324]	; (80033b4 <HAL_RCC_ClockConfig+0x230>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d109      	bne.n	800328c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e094      	b.n	80033a6 <HAL_RCC_ClockConfig+0x222>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800327c:	4b4d      	ldr	r3, [pc, #308]	; (80033b4 <HAL_RCC_ClockConfig+0x230>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003284:	2b00      	cmp	r3, #0
 8003286:	d101      	bne.n	800328c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e08c      	b.n	80033a6 <HAL_RCC_ClockConfig+0x222>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800328c:	f000 f89a 	bl	80033c4 <HAL_RCC_GetSysClockFreq>
 8003290:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	4a48      	ldr	r2, [pc, #288]	; (80033b8 <HAL_RCC_ClockConfig+0x234>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d909      	bls.n	80032ae <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800329a:	4b46      	ldr	r3, [pc, #280]	; (80033b4 <HAL_RCC_ClockConfig+0x230>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032a2:	4a44      	ldr	r2, [pc, #272]	; (80033b4 <HAL_RCC_ClockConfig+0x230>)
 80032a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032a8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80032aa:	2380      	movs	r3, #128	; 0x80
 80032ac:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032ae:	4b41      	ldr	r3, [pc, #260]	; (80033b4 <HAL_RCC_ClockConfig+0x230>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f023 0203 	bic.w	r2, r3, #3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	493e      	ldr	r1, [pc, #248]	; (80033b4 <HAL_RCC_ClockConfig+0x230>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032c0:	f7fe ffac 	bl	800221c <HAL_GetTick>
 80032c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032c6:	e00a      	b.n	80032de <HAL_RCC_ClockConfig+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032c8:	f7fe ffa8 	bl	800221c <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_ClockConfig+0x15a>
      {
        return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e063      	b.n	80033a6 <HAL_RCC_ClockConfig+0x222>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032de:	4b35      	ldr	r3, [pc, #212]	; (80033b4 <HAL_RCC_ClockConfig+0x230>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 020c 	and.w	r2, r3, #12
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d1eb      	bne.n	80032c8 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d009      	beq.n	8003310 <HAL_RCC_ClockConfig+0x18c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032fc:	4b2d      	ldr	r3, [pc, #180]	; (80033b4 <HAL_RCC_ClockConfig+0x230>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	492a      	ldr	r1, [pc, #168]	; (80033b4 <HAL_RCC_ClockConfig+0x230>)
 800330a:	4313      	orrs	r3, r2
 800330c:	608b      	str	r3, [r1, #8]
 800330e:	e008      	b.n	8003322 <HAL_RCC_ClockConfig+0x19e>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	2b80      	cmp	r3, #128	; 0x80
 8003314:	d105      	bne.n	8003322 <HAL_RCC_ClockConfig+0x19e>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003316:	4b27      	ldr	r3, [pc, #156]	; (80033b4 <HAL_RCC_ClockConfig+0x230>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	4a26      	ldr	r2, [pc, #152]	; (80033b4 <HAL_RCC_ClockConfig+0x230>)
 800331c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003320:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003322:	4b23      	ldr	r3, [pc, #140]	; (80033b0 <HAL_RCC_ClockConfig+0x22c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 030f 	and.w	r3, r3, #15
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	429a      	cmp	r2, r3
 800332e:	d210      	bcs.n	8003352 <HAL_RCC_ClockConfig+0x1ce>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003330:	4b1f      	ldr	r3, [pc, #124]	; (80033b0 <HAL_RCC_ClockConfig+0x22c>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f023 020f 	bic.w	r2, r3, #15
 8003338:	491d      	ldr	r1, [pc, #116]	; (80033b0 <HAL_RCC_ClockConfig+0x22c>)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	4313      	orrs	r3, r2
 800333e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003340:	4b1b      	ldr	r3, [pc, #108]	; (80033b0 <HAL_RCC_ClockConfig+0x22c>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 030f 	and.w	r3, r3, #15
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	429a      	cmp	r2, r3
 800334c:	d001      	beq.n	8003352 <HAL_RCC_ClockConfig+0x1ce>
    {
      return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e029      	b.n	80033a6 <HAL_RCC_ClockConfig+0x222>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0304 	and.w	r3, r3, #4
 800335a:	2b00      	cmp	r3, #0
 800335c:	d008      	beq.n	8003370 <HAL_RCC_ClockConfig+0x1ec>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800335e:	4b15      	ldr	r3, [pc, #84]	; (80033b4 <HAL_RCC_ClockConfig+0x230>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	4912      	ldr	r1, [pc, #72]	; (80033b4 <HAL_RCC_ClockConfig+0x230>)
 800336c:	4313      	orrs	r3, r2
 800336e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0308 	and.w	r3, r3, #8
 8003378:	2b00      	cmp	r3, #0
 800337a:	d009      	beq.n	8003390 <HAL_RCC_ClockConfig+0x20c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800337c:	4b0d      	ldr	r3, [pc, #52]	; (80033b4 <HAL_RCC_ClockConfig+0x230>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	00db      	lsls	r3, r3, #3
 800338a:	490a      	ldr	r1, [pc, #40]	; (80033b4 <HAL_RCC_ClockConfig+0x230>)
 800338c:	4313      	orrs	r3, r2
 800338e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003390:	f000 f8b2 	bl	80034f8 <HAL_RCC_GetHCLKFreq>
 8003394:	4602      	mov	r2, r0
 8003396:	4b09      	ldr	r3, [pc, #36]	; (80033bc <HAL_RCC_ClockConfig+0x238>)
 8003398:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800339a:	4b09      	ldr	r3, [pc, #36]	; (80033c0 <HAL_RCC_ClockConfig+0x23c>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fe feec 	bl	800217c <HAL_InitTick>
 80033a4:	4603      	mov	r3, r0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3718      	adds	r7, #24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	40022000 	.word	0x40022000
 80033b4:	40021000 	.word	0x40021000
 80033b8:	04c4b400 	.word	0x04c4b400
 80033bc:	20016cbc 	.word	0x20016cbc
 80033c0:	20016cc0 	.word	0x20016cc0

080033c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b089      	sub	sp, #36	; 0x24
 80033c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80033ca:	2300      	movs	r3, #0
 80033cc:	61fb      	str	r3, [r7, #28]
 80033ce:	2300      	movs	r3, #0
 80033d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033d2:	4b46      	ldr	r3, [pc, #280]	; (80034ec <HAL_RCC_GetSysClockFreq+0x128>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 030c 	and.w	r3, r3, #12
 80033da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033dc:	4b43      	ldr	r3, [pc, #268]	; (80034ec <HAL_RCC_GetSysClockFreq+0x128>)
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	f003 0303 	and.w	r3, r3, #3
 80033e4:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d005      	beq.n	80033f8 <HAL_RCC_GetSysClockFreq+0x34>
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	2b0c      	cmp	r3, #12
 80033f0:	d121      	bne.n	8003436 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d11e      	bne.n	8003436 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80033f8:	4b3c      	ldr	r3, [pc, #240]	; (80034ec <HAL_RCC_GetSysClockFreq+0x128>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0308 	and.w	r3, r3, #8
 8003400:	2b00      	cmp	r3, #0
 8003402:	d107      	bne.n	8003414 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003404:	4b39      	ldr	r3, [pc, #228]	; (80034ec <HAL_RCC_GetSysClockFreq+0x128>)
 8003406:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800340a:	0a1b      	lsrs	r3, r3, #8
 800340c:	f003 030f 	and.w	r3, r3, #15
 8003410:	61fb      	str	r3, [r7, #28]
 8003412:	e005      	b.n	8003420 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003414:	4b35      	ldr	r3, [pc, #212]	; (80034ec <HAL_RCC_GetSysClockFreq+0x128>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	091b      	lsrs	r3, r3, #4
 800341a:	f003 030f 	and.w	r3, r3, #15
 800341e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8003420:	4a33      	ldr	r2, [pc, #204]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003428:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10d      	bne.n	800344c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003434:	e00a      	b.n	800344c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	2b04      	cmp	r3, #4
 800343a:	d102      	bne.n	8003442 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800343c:	4b2d      	ldr	r3, [pc, #180]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x130>)
 800343e:	61bb      	str	r3, [r7, #24]
 8003440:	e004      	b.n	800344c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	2b08      	cmp	r3, #8
 8003446:	d101      	bne.n	800344c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003448:	4b2a      	ldr	r3, [pc, #168]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x130>)
 800344a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	2b0c      	cmp	r3, #12
 8003450:	d145      	bne.n	80034de <HAL_RCC_GetSysClockFreq+0x11a>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003452:	4b26      	ldr	r3, [pc, #152]	; (80034ec <HAL_RCC_GetSysClockFreq+0x128>)
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	f003 0303 	and.w	r3, r3, #3
 800345a:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800345c:	4b23      	ldr	r3, [pc, #140]	; (80034ec <HAL_RCC_GetSysClockFreq+0x128>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	091b      	lsrs	r3, r3, #4
 8003462:	f003 030f 	and.w	r3, r3, #15
 8003466:	3301      	adds	r3, #1
 8003468:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	2b02      	cmp	r3, #2
 800346e:	d002      	beq.n	8003476 <HAL_RCC_GetSysClockFreq+0xb2>
 8003470:	2b03      	cmp	r3, #3
 8003472:	d00d      	beq.n	8003490 <HAL_RCC_GetSysClockFreq+0xcc>
 8003474:	e019      	b.n	80034aa <HAL_RCC_GetSysClockFreq+0xe6>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003476:	4a1f      	ldr	r2, [pc, #124]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x130>)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	fbb2 f3f3 	udiv	r3, r2, r3
 800347e:	4a1b      	ldr	r2, [pc, #108]	; (80034ec <HAL_RCC_GetSysClockFreq+0x128>)
 8003480:	68d2      	ldr	r2, [r2, #12]
 8003482:	0a12      	lsrs	r2, r2, #8
 8003484:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003488:	fb02 f303 	mul.w	r3, r2, r3
 800348c:	617b      	str	r3, [r7, #20]
        break;
 800348e:	e019      	b.n	80034c4 <HAL_RCC_GetSysClockFreq+0x100>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003490:	4a18      	ldr	r2, [pc, #96]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x130>)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	fbb2 f3f3 	udiv	r3, r2, r3
 8003498:	4a14      	ldr	r2, [pc, #80]	; (80034ec <HAL_RCC_GetSysClockFreq+0x128>)
 800349a:	68d2      	ldr	r2, [r2, #12]
 800349c:	0a12      	lsrs	r2, r2, #8
 800349e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80034a2:	fb02 f303 	mul.w	r3, r2, r3
 80034a6:	617b      	str	r3, [r7, #20]
        break;
 80034a8:	e00c      	b.n	80034c4 <HAL_RCC_GetSysClockFreq+0x100>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80034aa:	69fa      	ldr	r2, [r7, #28]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b2:	4a0e      	ldr	r2, [pc, #56]	; (80034ec <HAL_RCC_GetSysClockFreq+0x128>)
 80034b4:	68d2      	ldr	r2, [r2, #12]
 80034b6:	0a12      	lsrs	r2, r2, #8
 80034b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80034bc:	fb02 f303 	mul.w	r3, r2, r3
 80034c0:	617b      	str	r3, [r7, #20]
        break;
 80034c2:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80034c4:	4b09      	ldr	r3, [pc, #36]	; (80034ec <HAL_RCC_GetSysClockFreq+0x128>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	0e5b      	lsrs	r3, r3, #25
 80034ca:	f003 0303 	and.w	r3, r3, #3
 80034ce:	3301      	adds	r3, #1
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034dc:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80034de:	69bb      	ldr	r3, [r7, #24]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3724      	adds	r7, #36	; 0x24
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr
 80034ec:	40021000 	.word	0x40021000
 80034f0:	08025580 	.word	0x08025580
 80034f4:	00f42400 	.word	0x00f42400

080034f8 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 80034fc:	f7ff ff62 	bl	80033c4 <HAL_RCC_GetSysClockFreq>
 8003500:	4601      	mov	r1, r0
 8003502:	4b05      	ldr	r3, [pc, #20]	; (8003518 <HAL_RCC_GetHCLKFreq+0x20>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	091b      	lsrs	r3, r3, #4
 8003508:	f003 030f 	and.w	r3, r3, #15
 800350c:	4a03      	ldr	r2, [pc, #12]	; (800351c <HAL_RCC_GetHCLKFreq+0x24>)
 800350e:	5cd3      	ldrb	r3, [r2, r3]
 8003510:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003514:	4618      	mov	r0, r3
 8003516:	bd80      	pop	{r7, pc}
 8003518:	40021000 	.word	0x40021000
 800351c:	08025568 	.word	0x08025568

08003520 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003524:	f7ff ffe8 	bl	80034f8 <HAL_RCC_GetHCLKFreq>
 8003528:	4601      	mov	r1, r0
 800352a:	4b05      	ldr	r3, [pc, #20]	; (8003540 <HAL_RCC_GetPCLK1Freq+0x20>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	0a1b      	lsrs	r3, r3, #8
 8003530:	f003 0307 	and.w	r3, r3, #7
 8003534:	4a03      	ldr	r2, [pc, #12]	; (8003544 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003536:	5cd3      	ldrb	r3, [r2, r3]
 8003538:	fa21 f303 	lsr.w	r3, r1, r3
}
 800353c:	4618      	mov	r0, r3
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40021000 	.word	0x40021000
 8003544:	08025578 	.word	0x08025578

08003548 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800354c:	f7ff ffd4 	bl	80034f8 <HAL_RCC_GetHCLKFreq>
 8003550:	4601      	mov	r1, r0
 8003552:	4b05      	ldr	r3, [pc, #20]	; (8003568 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	0adb      	lsrs	r3, r3, #11
 8003558:	f003 0307 	and.w	r3, r3, #7
 800355c:	4a03      	ldr	r2, [pc, #12]	; (800356c <HAL_RCC_GetPCLK2Freq+0x24>)
 800355e:	5cd3      	ldrb	r3, [r2, r3]
 8003560:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003564:	4618      	mov	r0, r3
 8003566:	bd80      	pop	{r7, pc}
 8003568:	40021000 	.word	0x40021000
 800356c:	08025578 	.word	0x08025578

08003570 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003578:	2300      	movs	r3, #0
 800357a:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800357c:	4b2c      	ldr	r3, [pc, #176]	; (8003630 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800357e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d003      	beq.n	8003590 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003588:	f7ff f8fc 	bl	8002784 <HAL_PWREx_GetVoltageRange>
 800358c:	6138      	str	r0, [r7, #16]
 800358e:	e014      	b.n	80035ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003590:	4b27      	ldr	r3, [pc, #156]	; (8003630 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003594:	4a26      	ldr	r2, [pc, #152]	; (8003630 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800359a:	6593      	str	r3, [r2, #88]	; 0x58
 800359c:	4b24      	ldr	r3, [pc, #144]	; (8003630 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800359e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a4:	60fb      	str	r3, [r7, #12]
 80035a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80035a8:	f7ff f8ec 	bl	8002784 <HAL_PWREx_GetVoltageRange>
 80035ac:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 80035ae:	4b20      	ldr	r3, [pc, #128]	; (8003630 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80035b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b2:	4a1f      	ldr	r2, [pc, #124]	; (8003630 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80035b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035b8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d003      	beq.n	80035c8 <RCC_SetFlashLatencyFromMSIRange+0x58>
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035c6:	d10b      	bne.n	80035e0 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b80      	cmp	r3, #128	; 0x80
 80035cc:	d919      	bls.n	8003602 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2ba0      	cmp	r3, #160	; 0xa0
 80035d2:	d902      	bls.n	80035da <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035d4:	2302      	movs	r3, #2
 80035d6:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80035d8:	e013      	b.n	8003602 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035da:	2301      	movs	r3, #1
 80035dc:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80035de:	e010      	b.n	8003602 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b80      	cmp	r3, #128	; 0x80
 80035e4:	d902      	bls.n	80035ec <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80035e6:	2303      	movs	r3, #3
 80035e8:	617b      	str	r3, [r7, #20]
 80035ea:	e00a      	b.n	8003602 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b80      	cmp	r3, #128	; 0x80
 80035f0:	d102      	bne.n	80035f8 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035f2:	2302      	movs	r3, #2
 80035f4:	617b      	str	r3, [r7, #20]
 80035f6:	e004      	b.n	8003602 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b70      	cmp	r3, #112	; 0x70
 80035fc:	d101      	bne.n	8003602 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035fe:	2301      	movs	r3, #1
 8003600:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003602:	4b0c      	ldr	r3, [pc, #48]	; (8003634 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f023 020f 	bic.w	r2, r3, #15
 800360a:	490a      	ldr	r1, [pc, #40]	; (8003634 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	4313      	orrs	r3, r2
 8003610:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003612:	4b08      	ldr	r3, [pc, #32]	; (8003634 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 030f 	and.w	r3, r3, #15
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	429a      	cmp	r2, r3
 800361e:	d001      	beq.n	8003624 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e000      	b.n	8003626 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3718      	adds	r7, #24
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	40021000 	.word	0x40021000
 8003634:	40022000 	.word	0x40022000

08003638 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003638:	b480      	push	{r7}
 800363a:	b087      	sub	sp, #28
 800363c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800363e:	2300      	movs	r3, #0
 8003640:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8003642:	4b36      	ldr	r3, [pc, #216]	; (800371c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	f003 0303 	and.w	r3, r3, #3
 800364a:	2b01      	cmp	r3, #1
 800364c:	d118      	bne.n	8003680 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800364e:	4b33      	ldr	r3, [pc, #204]	; (800371c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0308 	and.w	r3, r3, #8
 8003656:	2b00      	cmp	r3, #0
 8003658:	d107      	bne.n	800366a <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800365a:	4b30      	ldr	r3, [pc, #192]	; (800371c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 800365c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003660:	0a1b      	lsrs	r3, r3, #8
 8003662:	f003 030f 	and.w	r3, r3, #15
 8003666:	617b      	str	r3, [r7, #20]
 8003668:	e005      	b.n	8003676 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800366a:	4b2c      	ldr	r3, [pc, #176]	; (800371c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	091b      	lsrs	r3, r3, #4
 8003670:	f003 030f 	and.w	r3, r3, #15
 8003674:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8003676:	4a2a      	ldr	r2, [pc, #168]	; (8003720 <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800367e:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003680:	4b26      	ldr	r3, [pc, #152]	; (800371c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	f003 0303 	and.w	r3, r3, #3
 8003688:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800368a:	4b24      	ldr	r3, [pc, #144]	; (800371c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	091b      	lsrs	r3, r3, #4
 8003690:	f003 030f 	and.w	r3, r3, #15
 8003694:	3301      	adds	r3, #1
 8003696:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2b02      	cmp	r3, #2
 800369c:	d002      	beq.n	80036a4 <RCC_GetSysClockFreqFromPLLSource+0x6c>
 800369e:	2b03      	cmp	r3, #3
 80036a0:	d00d      	beq.n	80036be <RCC_GetSysClockFreqFromPLLSource+0x86>
 80036a2:	e019      	b.n	80036d8 <RCC_GetSysClockFreqFromPLLSource+0xa0>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036a4:	4a1f      	ldr	r2, [pc, #124]	; (8003724 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ac:	4a1b      	ldr	r2, [pc, #108]	; (800371c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80036ae:	68d2      	ldr	r2, [r2, #12]
 80036b0:	0a12      	lsrs	r2, r2, #8
 80036b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80036b6:	fb02 f303 	mul.w	r3, r2, r3
 80036ba:	613b      	str	r3, [r7, #16]
      break;
 80036bc:	e019      	b.n	80036f2 <RCC_GetSysClockFreqFromPLLSource+0xba>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036be:	4a19      	ldr	r2, [pc, #100]	; (8003724 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c6:	4a15      	ldr	r2, [pc, #84]	; (800371c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80036c8:	68d2      	ldr	r2, [r2, #12]
 80036ca:	0a12      	lsrs	r2, r2, #8
 80036cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80036d0:	fb02 f303 	mul.w	r3, r2, r3
 80036d4:	613b      	str	r3, [r7, #16]
      break;
 80036d6:	e00c      	b.n	80036f2 <RCC_GetSysClockFreqFromPLLSource+0xba>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e0:	4a0e      	ldr	r2, [pc, #56]	; (800371c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80036e2:	68d2      	ldr	r2, [r2, #12]
 80036e4:	0a12      	lsrs	r2, r2, #8
 80036e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80036ea:	fb02 f303 	mul.w	r3, r2, r3
 80036ee:	613b      	str	r3, [r7, #16]
      break;
 80036f0:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80036f2:	4b0a      	ldr	r3, [pc, #40]	; (800371c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	0e5b      	lsrs	r3, r3, #25
 80036f8:	f003 0303 	and.w	r3, r3, #3
 80036fc:	3301      	adds	r3, #1
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	fbb2 f3f3 	udiv	r3, r2, r3
 800370a:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800370c:	683b      	ldr	r3, [r7, #0]
}
 800370e:	4618      	mov	r0, r3
 8003710:	371c      	adds	r7, #28
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	40021000 	.word	0x40021000
 8003720:	08025580 	.word	0x08025580
 8003724:	00f42400 	.word	0x00f42400

08003728 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b088      	sub	sp, #32
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003730:	2300      	movs	r3, #0
 8003732:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003734:	2300      	movs	r3, #0
 8003736:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003740:	2b00      	cmp	r3, #0
 8003742:	d03d      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003748:	2b40      	cmp	r3, #64	; 0x40
 800374a:	d00b      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800374c:	2b40      	cmp	r3, #64	; 0x40
 800374e:	d804      	bhi.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00e      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8003754:	2b20      	cmp	r3, #32
 8003756:	d015      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003758:	e01d      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800375a:	2b60      	cmp	r3, #96	; 0x60
 800375c:	d01e      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x74>
 800375e:	2b80      	cmp	r3, #128	; 0x80
 8003760:	d01c      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003762:	e018      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003764:	4b84      	ldr	r3, [pc, #528]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	4a83      	ldr	r2, [pc, #524]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800376a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800376e:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003770:	e015      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x76>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	3304      	adds	r3, #4
 8003776:	2100      	movs	r1, #0
 8003778:	4618      	mov	r0, r3
 800377a:	f000 fb3f 	bl	8003dfc <RCCEx_PLLSAI1_Config>
 800377e:	4603      	mov	r3, r0
 8003780:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003782:	e00c      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x76>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	3320      	adds	r3, #32
 8003788:	2100      	movs	r1, #0
 800378a:	4618      	mov	r0, r3
 800378c:	f000 fc08 	bl	8003fa0 <RCCEx_PLLSAI2_Config>
 8003790:	4603      	mov	r3, r0
 8003792:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003794:	e003      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x76>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	77fb      	strb	r3, [r7, #31]
        break;
 800379a:	e000      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x76>
        break;
 800379c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800379e:	7ffb      	ldrb	r3, [r7, #31]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d10b      	bne.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80037a4:	4b74      	ldr	r3, [pc, #464]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80037a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037aa:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037b2:	4971      	ldr	r1, [pc, #452]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80037ba:	e001      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037bc:	7ffb      	ldrb	r3, [r7, #31]
 80037be:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d042      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037d4:	d00f      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xce>
 80037d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037da:	d805      	bhi.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d011      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 80037e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037e4:	d017      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0xee>
 80037e6:	e01f      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x100>
 80037e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037ec:	d01f      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80037ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037f2:	d01c      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80037f4:	e018      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80037f6:	4b60      	ldr	r3, [pc, #384]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	4a5f      	ldr	r2, [pc, #380]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80037fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003800:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003802:	e015      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x108>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	3304      	adds	r3, #4
 8003808:	2100      	movs	r1, #0
 800380a:	4618      	mov	r0, r3
 800380c:	f000 faf6 	bl	8003dfc <RCCEx_PLLSAI1_Config>
 8003810:	4603      	mov	r3, r0
 8003812:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003814:	e00c      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x108>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	3320      	adds	r3, #32
 800381a:	2100      	movs	r1, #0
 800381c:	4618      	mov	r0, r3
 800381e:	f000 fbbf 	bl	8003fa0 <RCCEx_PLLSAI2_Config>
 8003822:	4603      	mov	r3, r0
 8003824:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003826:	e003      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x108>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	77fb      	strb	r3, [r7, #31]
        break;
 800382c:	e000      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x108>
        break;
 800382e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003830:	7ffb      	ldrb	r3, [r7, #31]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10b      	bne.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003836:	4b50      	ldr	r3, [pc, #320]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003838:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800383c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003844:	494c      	ldr	r1, [pc, #304]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003846:	4313      	orrs	r3, r2
 8003848:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800384c:	e001      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800384e:	7ffb      	ldrb	r3, [r7, #31]
 8003850:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385a:	2b00      	cmp	r3, #0
 800385c:	f000 809b 	beq.w	8003996 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003860:	2300      	movs	r3, #0
 8003862:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003864:	4b44      	ldr	r3, [pc, #272]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d10d      	bne.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003870:	4b41      	ldr	r3, [pc, #260]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003874:	4a40      	ldr	r2, [pc, #256]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800387a:	6593      	str	r3, [r2, #88]	; 0x58
 800387c:	4b3e      	ldr	r3, [pc, #248]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800387e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003884:	60fb      	str	r3, [r7, #12]
 8003886:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003888:	2301      	movs	r3, #1
 800388a:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800388c:	4b3b      	ldr	r3, [pc, #236]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a3a      	ldr	r2, [pc, #232]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003892:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003896:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003898:	f7fe fcc0 	bl	800221c <HAL_GetTick>
 800389c:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800389e:	e009      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038a0:	f7fe fcbc 	bl	800221c <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d902      	bls.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      {
        ret = HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	77fb      	strb	r3, [r7, #31]
        break;
 80038b2:	e005      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038b4:	4b31      	ldr	r3, [pc, #196]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d0ef      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x178>
      }
    }

    if (ret == HAL_OK)
 80038c0:	7ffb      	ldrb	r3, [r7, #31]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d15c      	bne.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80038c6:	4b2c      	ldr	r3, [pc, #176]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80038c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038d0:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d01f      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d019      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038e4:	4b24      	ldr	r3, [pc, #144]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80038e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ee:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038f0:	4b21      	ldr	r3, [pc, #132]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80038f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f6:	4a20      	ldr	r2, [pc, #128]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80038f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003900:	4b1d      	ldr	r3, [pc, #116]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003906:	4a1c      	ldr	r2, [pc, #112]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003908:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800390c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003910:	4a19      	ldr	r2, [pc, #100]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d016      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x228>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003922:	f7fe fc7b 	bl	800221c <HAL_GetTick>
 8003926:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003928:	e00b      	b.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x21a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800392a:	f7fe fc77 	bl	800221c <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	f241 3288 	movw	r2, #5000	; 0x1388
 8003938:	4293      	cmp	r3, r2
 800393a:	d902      	bls.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x21a>
          {
            ret = HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	77fb      	strb	r3, [r7, #31]
            break;
 8003940:	e006      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x228>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003942:	4b0d      	ldr	r3, [pc, #52]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d0ec      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x202>
          }
        }
      }

      if (ret == HAL_OK)
 8003950:	7ffb      	ldrb	r3, [r7, #31]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10c      	bne.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x248>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003956:	4b08      	ldr	r3, [pc, #32]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003966:	4904      	ldr	r1, [pc, #16]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003968:	4313      	orrs	r3, r2
 800396a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800396e:	e009      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x25c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003970:	7ffb      	ldrb	r3, [r7, #31]
 8003972:	77bb      	strb	r3, [r7, #30]
 8003974:	e006      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x25c>
 8003976:	bf00      	nop
 8003978:	40021000 	.word	0x40021000
 800397c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003980:	7ffb      	ldrb	r3, [r7, #31]
 8003982:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003984:	7dfb      	ldrb	r3, [r7, #23]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d105      	bne.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800398a:	4bae      	ldr	r3, [pc, #696]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 800398c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398e:	4aad      	ldr	r2, [pc, #692]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003990:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003994:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00a      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039a2:	4ba8      	ldr	r3, [pc, #672]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80039a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a8:	f023 0203 	bic.w	r2, r3, #3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b0:	49a4      	ldr	r1, [pc, #656]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0302 	and.w	r3, r3, #2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00a      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x2b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039c4:	4b9f      	ldr	r3, [pc, #636]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80039c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ca:	f023 020c 	bic.w	r2, r3, #12
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d2:	499c      	ldr	r1, [pc, #624]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0304 	and.w	r3, r3, #4
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00a      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039e6:	4b97      	ldr	r3, [pc, #604]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80039e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f4:	4993      	ldr	r1, [pc, #588]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0308 	and.w	r3, r3, #8
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00a      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a08:	4b8e      	ldr	r3, [pc, #568]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a0e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	498b      	ldr	r1, [pc, #556]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0310 	and.w	r3, r3, #16
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00a      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x318>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a2a:	4b86      	ldr	r3, [pc, #536]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a38:	4982      	ldr	r1, [pc, #520]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0320 	and.w	r3, r3, #32
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00a      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x33a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a4c:	4b7d      	ldr	r3, [pc, #500]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a52:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a5a:	497a      	ldr	r1, [pc, #488]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00a      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x35c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a6e:	4b75      	ldr	r3, [pc, #468]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a74:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a7c:	4971      	ldr	r1, [pc, #452]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00a      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a90:	4b6c      	ldr	r3, [pc, #432]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a9e:	4969      	ldr	r1, [pc, #420]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00a      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003ab2:	4b64      	ldr	r3, [pc, #400]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ac0:	4960      	ldr	r1, [pc, #384]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d02f      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x40c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ad8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003adc:	d005      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8003ade:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ae2:	d009      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d013      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003ae8:	e00f      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003aea:	4b56      	ldr	r3, [pc, #344]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	4a55      	ldr	r2, [pc, #340]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003af0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003af4:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003af6:	e00c      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3304      	adds	r3, #4
 8003afc:	2100      	movs	r1, #0
 8003afe:	4618      	mov	r0, r3
 8003b00:	f000 f97c 	bl	8003dfc <RCCEx_PLLSAI1_Config>
 8003b04:	4603      	mov	r3, r0
 8003b06:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003b08:	e003      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

      default:
        ret = HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	77fb      	strb	r3, [r7, #31]
        break;
 8003b0e:	e000      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
        break;
 8003b10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b12:	7ffb      	ldrb	r3, [r7, #31]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10b      	bne.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b18:	4b4a      	ldr	r3, [pc, #296]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b26:	4947      	ldr	r1, [pc, #284]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003b2e:	e001      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x40c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b30:	7ffb      	ldrb	r3, [r7, #31]
 8003b32:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00a      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x42e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b40:	4b40      	ldr	r3, [pc, #256]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b46:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b4e:	493d      	ldr	r1, [pc, #244]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00a      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x450>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b62:	4b38      	ldr	r3, [pc, #224]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b68:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b70:	4934      	ldr	r1, [pc, #208]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00a      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b84:	4b2f      	ldr	r3, [pc, #188]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b8a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b92:	492c      	ldr	r1, [pc, #176]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00a      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ba6:	4b27      	ldr	r3, [pc, #156]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003ba8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003bac:	f023 0203 	bic.w	r2, r3, #3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb4:	4923      	ldr	r1, [pc, #140]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d028      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bc8:	4b1e      	ldr	r3, [pc, #120]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bd6:	491b      	ldr	r1, [pc, #108]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003be2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003be6:	d106      	bne.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003be8:	4b16      	ldr	r3, [pc, #88]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	4a15      	ldr	r2, [pc, #84]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003bee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bf2:	60d3      	str	r3, [r2, #12]
 8003bf4:	e011      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bfa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bfe:	d10c      	bne.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	3304      	adds	r3, #4
 8003c04:	2101      	movs	r1, #1
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 f8f8 	bl	8003dfc <RCCEx_PLLSAI1_Config>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8003c10:	7ffb      	ldrb	r3, [r7, #31]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
        {
          /* set overall return value */
          status = ret;
 8003c16:	7ffb      	ldrb	r3, [r7, #31]
 8003c18:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d04d      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c2e:	d10b      	bne.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8003c30:	4b04      	ldr	r3, [pc, #16]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003c32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c36:	4a03      	ldr	r2, [pc, #12]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003c38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c3c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003c40:	e015      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x546>
 8003c42:	bf00      	nop
 8003c44:	40021000 	.word	0x40021000
 8003c48:	4b6b      	ldr	r3, [pc, #428]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8003c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c56:	4968      	ldr	r1, [pc, #416]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003c5e:	4b66      	ldr	r3, [pc, #408]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8003c60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c64:	4a64      	ldr	r2, [pc, #400]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8003c66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c6a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c76:	d10d      	bne.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	3304      	adds	r3, #4
 8003c7c:	2101      	movs	r1, #1
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f000 f8bc 	bl	8003dfc <RCCEx_PLLSAI1_Config>
 8003c84:	4603      	mov	r3, r0
 8003c86:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003c88:	7ffb      	ldrb	r3, [r7, #31]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d019      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
      {
        /* set overall return value */
        status = ret;
 8003c8e:	7ffb      	ldrb	r3, [r7, #31]
 8003c90:	77bb      	strb	r3, [r7, #30]
 8003c92:	e016      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c9c:	d106      	bne.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x584>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c9e:	4b56      	ldr	r3, [pc, #344]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	4a55      	ldr	r2, [pc, #340]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8003ca4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ca8:	60d3      	str	r3, [r2, #12]
 8003caa:	e00a      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cb4:	d105      	bne.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003cb6:	4b50      	ldr	r3, [pc, #320]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	4a4f      	ldr	r2, [pc, #316]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8003cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cc0:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d028      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003cce:	4b4a      	ldr	r3, [pc, #296]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8003cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cdc:	4946      	ldr	r1, [pc, #280]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ce8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cec:	d106      	bne.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cee:	4b42      	ldr	r3, [pc, #264]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	4a41      	ldr	r2, [pc, #260]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8003cf4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cf8:	60d3      	str	r3, [r2, #12]
 8003cfa:	e011      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d04:	d10c      	bne.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	3304      	adds	r3, #4
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f000 f875 	bl	8003dfc <RCCEx_PLLSAI1_Config>
 8003d12:	4603      	mov	r3, r0
 8003d14:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003d16:	7ffb      	ldrb	r3, [r7, #31]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        /* set overall return value */
        status = ret;
 8003d1c:	7ffb      	ldrb	r3, [r7, #31]
 8003d1e:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d01e      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x642>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d2c:	4b32      	ldr	r3, [pc, #200]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8003d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d32:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d3c:	492e      	ldr	r1, [pc, #184]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d4e:	d10c      	bne.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x642>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	3304      	adds	r3, #4
 8003d54:	2102      	movs	r1, #2
 8003d56:	4618      	mov	r0, r3
 8003d58:	f000 f850 	bl	8003dfc <RCCEx_PLLSAI1_Config>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003d60:	7ffb      	ldrb	r3, [r7, #31]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* set overall return value */
        status = ret;
 8003d66:	7ffb      	ldrb	r3, [r7, #31]
 8003d68:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00b      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x666>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d76:	4b20      	ldr	r3, [pc, #128]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8003d78:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d7c:	f023 0204 	bic.w	r2, r3, #4
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d86:	491c      	ldr	r1, [pc, #112]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00b      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x68a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003d9a:	4b17      	ldr	r3, [pc, #92]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8003d9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003da0:	f023 0218 	bic.w	r2, r3, #24
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003daa:	4913      	ldr	r1, [pc, #76]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d017      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x6c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003dbe:	4b0e      	ldr	r3, [pc, #56]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8003dc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003dc4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dce:	490a      	ldr	r1, [pc, #40]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
    
    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ddc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003de0:	d105      	bne.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x6c6>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003de2:	4b05      	ldr	r3, [pc, #20]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	4a04      	ldr	r2, [pc, #16]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8003de8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dec:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003dee:	7fbb      	ldrb	r3, [r7, #30]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3720      	adds	r7, #32
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	40021000 	.word	0x40021000

08003dfc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e06:	2300      	movs	r3, #0
 8003e08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d00c      	beq.n	8003e2c <RCCEx_PLLSAI1_Config+0x30>
 8003e12:	2b03      	cmp	r3, #3
 8003e14:	d013      	beq.n	8003e3e <RCCEx_PLLSAI1_Config+0x42>
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d11a      	bne.n	8003e50 <RCCEx_PLLSAI1_Config+0x54>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e1a:	4b5d      	ldr	r3, [pc, #372]	; (8003f90 <RCCEx_PLLSAI1_Config+0x194>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d117      	bne.n	8003e56 <RCCEx_PLLSAI1_Config+0x5a>
      {
        status = HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e2a:	e014      	b.n	8003e56 <RCCEx_PLLSAI1_Config+0x5a>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e2c:	4b58      	ldr	r3, [pc, #352]	; (8003f90 <RCCEx_PLLSAI1_Config+0x194>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d110      	bne.n	8003e5a <RCCEx_PLLSAI1_Config+0x5e>
      {
        status = HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e3c:	e00d      	b.n	8003e5a <RCCEx_PLLSAI1_Config+0x5e>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8003e3e:	4b54      	ldr	r3, [pc, #336]	; (8003f90 <RCCEx_PLLSAI1_Config+0x194>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d109      	bne.n	8003e5e <RCCEx_PLLSAI1_Config+0x62>
      {
        status = HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e4e:	e006      	b.n	8003e5e <RCCEx_PLLSAI1_Config+0x62>
    default:
      status = HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	73fb      	strb	r3, [r7, #15]
      break;
 8003e54:	e004      	b.n	8003e60 <RCCEx_PLLSAI1_Config+0x64>
      break;
 8003e56:	bf00      	nop
 8003e58:	e002      	b.n	8003e60 <RCCEx_PLLSAI1_Config+0x64>
      break;
 8003e5a:	bf00      	nop
 8003e5c:	e000      	b.n	8003e60 <RCCEx_PLLSAI1_Config+0x64>
      break;
 8003e5e:	bf00      	nop
  }

  if (status == HAL_OK)
 8003e60:	7bfb      	ldrb	r3, [r7, #15]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f040 808f 	bne.w	8003f86 <RCCEx_PLLSAI1_Config+0x18a>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003e68:	4b49      	ldr	r3, [pc, #292]	; (8003f90 <RCCEx_PLLSAI1_Config+0x194>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a48      	ldr	r2, [pc, #288]	; (8003f90 <RCCEx_PLLSAI1_Config+0x194>)
 8003e6e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e74:	f7fe f9d2 	bl	800221c <HAL_GetTick>
 8003e78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e7a:	e009      	b.n	8003e90 <RCCEx_PLLSAI1_Config+0x94>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e7c:	f7fe f9ce 	bl	800221c <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d902      	bls.n	8003e90 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	73fb      	strb	r3, [r7, #15]
        break;
 8003e8e:	e005      	b.n	8003e9c <RCCEx_PLLSAI1_Config+0xa0>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e90:	4b3f      	ldr	r3, [pc, #252]	; (8003f90 <RCCEx_PLLSAI1_Config+0x194>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1ef      	bne.n	8003e7c <RCCEx_PLLSAI1_Config+0x80>
      }
    }

    if (status == HAL_OK)
 8003e9c:	7bfb      	ldrb	r3, [r7, #15]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d171      	bne.n	8003f86 <RCCEx_PLLSAI1_Config+0x18a>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d116      	bne.n	8003ed6 <RCCEx_PLLSAI1_Config+0xda>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ea8:	4b39      	ldr	r3, [pc, #228]	; (8003f90 <RCCEx_PLLSAI1_Config+0x194>)
 8003eaa:	691a      	ldr	r2, [r3, #16]
 8003eac:	4b39      	ldr	r3, [pc, #228]	; (8003f94 <RCCEx_PLLSAI1_Config+0x198>)
 8003eae:	4013      	ands	r3, r2
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	6892      	ldr	r2, [r2, #8]
 8003eb4:	0211      	lsls	r1, r2, #8
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	68d2      	ldr	r2, [r2, #12]
 8003eba:	06d2      	lsls	r2, r2, #27
 8003ebc:	4311      	orrs	r1, r2
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	6852      	ldr	r2, [r2, #4]
 8003ec2:	3a01      	subs	r2, #1
 8003ec4:	0112      	lsls	r2, r2, #4
 8003ec6:	4311      	orrs	r1, r2
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	6812      	ldr	r2, [r2, #0]
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	4930      	ldr	r1, [pc, #192]	; (8003f90 <RCCEx_PLLSAI1_Config+0x194>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	610b      	str	r3, [r1, #16]
 8003ed4:	e033      	b.n	8003f3e <RCCEx_PLLSAI1_Config+0x142>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d118      	bne.n	8003f0e <RCCEx_PLLSAI1_Config+0x112>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003edc:	4b2c      	ldr	r3, [pc, #176]	; (8003f90 <RCCEx_PLLSAI1_Config+0x194>)
 8003ede:	691a      	ldr	r2, [r3, #16]
 8003ee0:	4b2d      	ldr	r3, [pc, #180]	; (8003f98 <RCCEx_PLLSAI1_Config+0x19c>)
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	6892      	ldr	r2, [r2, #8]
 8003ee8:	0211      	lsls	r1, r2, #8
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	6912      	ldr	r2, [r2, #16]
 8003eee:	0852      	lsrs	r2, r2, #1
 8003ef0:	3a01      	subs	r2, #1
 8003ef2:	0552      	lsls	r2, r2, #21
 8003ef4:	4311      	orrs	r1, r2
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	6852      	ldr	r2, [r2, #4]
 8003efa:	3a01      	subs	r2, #1
 8003efc:	0112      	lsls	r2, r2, #4
 8003efe:	4311      	orrs	r1, r2
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	6812      	ldr	r2, [r2, #0]
 8003f04:	430a      	orrs	r2, r1
 8003f06:	4922      	ldr	r1, [pc, #136]	; (8003f90 <RCCEx_PLLSAI1_Config+0x194>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	610b      	str	r3, [r1, #16]
 8003f0c:	e017      	b.n	8003f3e <RCCEx_PLLSAI1_Config+0x142>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f0e:	4b20      	ldr	r3, [pc, #128]	; (8003f90 <RCCEx_PLLSAI1_Config+0x194>)
 8003f10:	691a      	ldr	r2, [r3, #16]
 8003f12:	4b22      	ldr	r3, [pc, #136]	; (8003f9c <RCCEx_PLLSAI1_Config+0x1a0>)
 8003f14:	4013      	ands	r3, r2
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	6892      	ldr	r2, [r2, #8]
 8003f1a:	0211      	lsls	r1, r2, #8
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	6952      	ldr	r2, [r2, #20]
 8003f20:	0852      	lsrs	r2, r2, #1
 8003f22:	3a01      	subs	r2, #1
 8003f24:	0652      	lsls	r2, r2, #25
 8003f26:	4311      	orrs	r1, r2
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	6852      	ldr	r2, [r2, #4]
 8003f2c:	3a01      	subs	r2, #1
 8003f2e:	0112      	lsls	r2, r2, #4
 8003f30:	4311      	orrs	r1, r2
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	6812      	ldr	r2, [r2, #0]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	4915      	ldr	r1, [pc, #84]	; (8003f90 <RCCEx_PLLSAI1_Config+0x194>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003f3e:	4b14      	ldr	r3, [pc, #80]	; (8003f90 <RCCEx_PLLSAI1_Config+0x194>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a13      	ldr	r2, [pc, #76]	; (8003f90 <RCCEx_PLLSAI1_Config+0x194>)
 8003f44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f48:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f4a:	f7fe f967 	bl	800221c <HAL_GetTick>
 8003f4e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f50:	e009      	b.n	8003f66 <RCCEx_PLLSAI1_Config+0x16a>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f52:	f7fe f963 	bl	800221c <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d902      	bls.n	8003f66 <RCCEx_PLLSAI1_Config+0x16a>
        {
          status = HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	73fb      	strb	r3, [r7, #15]
          break;
 8003f64:	e005      	b.n	8003f72 <RCCEx_PLLSAI1_Config+0x176>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f66:	4b0a      	ldr	r3, [pc, #40]	; (8003f90 <RCCEx_PLLSAI1_Config+0x194>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d0ef      	beq.n	8003f52 <RCCEx_PLLSAI1_Config+0x156>
        }
      }

      if (status == HAL_OK)
 8003f72:	7bfb      	ldrb	r3, [r7, #15]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d106      	bne.n	8003f86 <RCCEx_PLLSAI1_Config+0x18a>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8003f78:	4b05      	ldr	r3, [pc, #20]	; (8003f90 <RCCEx_PLLSAI1_Config+0x194>)
 8003f7a:	691a      	ldr	r2, [r3, #16]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	4903      	ldr	r1, [pc, #12]	; (8003f90 <RCCEx_PLLSAI1_Config+0x194>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	40021000 	.word	0x40021000
 8003f94:	07ff800c 	.word	0x07ff800c
 8003f98:	ff9f800c 	.word	0xff9f800c
 8003f9c:	f9ff800c 	.word	0xf9ff800c

08003fa0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003faa:	2300      	movs	r3, #0
 8003fac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d00c      	beq.n	8003fd0 <RCCEx_PLLSAI2_Config+0x30>
 8003fb6:	2b03      	cmp	r3, #3
 8003fb8:	d013      	beq.n	8003fe2 <RCCEx_PLLSAI2_Config+0x42>
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d11a      	bne.n	8003ff4 <RCCEx_PLLSAI2_Config+0x54>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003fbe:	4b42      	ldr	r3, [pc, #264]	; (80040c8 <RCCEx_PLLSAI2_Config+0x128>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d117      	bne.n	8003ffa <RCCEx_PLLSAI2_Config+0x5a>
      {
        status = HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fce:	e014      	b.n	8003ffa <RCCEx_PLLSAI2_Config+0x5a>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003fd0:	4b3d      	ldr	r3, [pc, #244]	; (80040c8 <RCCEx_PLLSAI2_Config+0x128>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d110      	bne.n	8003ffe <RCCEx_PLLSAI2_Config+0x5e>
      {
        status = HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fe0:	e00d      	b.n	8003ffe <RCCEx_PLLSAI2_Config+0x5e>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8003fe2:	4b39      	ldr	r3, [pc, #228]	; (80040c8 <RCCEx_PLLSAI2_Config+0x128>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d109      	bne.n	8004002 <RCCEx_PLLSAI2_Config+0x62>
      {
        status = HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ff2:	e006      	b.n	8004002 <RCCEx_PLLSAI2_Config+0x62>
    default:
      status = HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ff8:	e004      	b.n	8004004 <RCCEx_PLLSAI2_Config+0x64>
      break;
 8003ffa:	bf00      	nop
 8003ffc:	e002      	b.n	8004004 <RCCEx_PLLSAI2_Config+0x64>
      break;
 8003ffe:	bf00      	nop
 8004000:	e000      	b.n	8004004 <RCCEx_PLLSAI2_Config+0x64>
      break;
 8004002:	bf00      	nop
  }

  if (status == HAL_OK)
 8004004:	7bfb      	ldrb	r3, [r7, #15]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d159      	bne.n	80040be <RCCEx_PLLSAI2_Config+0x11e>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800400a:	4b2f      	ldr	r3, [pc, #188]	; (80040c8 <RCCEx_PLLSAI2_Config+0x128>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a2e      	ldr	r2, [pc, #184]	; (80040c8 <RCCEx_PLLSAI2_Config+0x128>)
 8004010:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004014:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004016:	f7fe f901 	bl	800221c <HAL_GetTick>
 800401a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800401c:	e009      	b.n	8004032 <RCCEx_PLLSAI2_Config+0x92>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800401e:	f7fe f8fd 	bl	800221c <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	2b02      	cmp	r3, #2
 800402a:	d902      	bls.n	8004032 <RCCEx_PLLSAI2_Config+0x92>
      {
        status = HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	73fb      	strb	r3, [r7, #15]
        break;
 8004030:	e005      	b.n	800403e <RCCEx_PLLSAI2_Config+0x9e>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004032:	4b25      	ldr	r3, [pc, #148]	; (80040c8 <RCCEx_PLLSAI2_Config+0x128>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1ef      	bne.n	800401e <RCCEx_PLLSAI2_Config+0x7e>
      }
    }

    if (status == HAL_OK)
 800403e:	7bfb      	ldrb	r3, [r7, #15]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d13c      	bne.n	80040be <RCCEx_PLLSAI2_Config+0x11e>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d115      	bne.n	8004076 <RCCEx_PLLSAI2_Config+0xd6>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800404a:	4b1f      	ldr	r3, [pc, #124]	; (80040c8 <RCCEx_PLLSAI2_Config+0x128>)
 800404c:	695a      	ldr	r2, [r3, #20]
 800404e:	4b1f      	ldr	r3, [pc, #124]	; (80040cc <RCCEx_PLLSAI2_Config+0x12c>)
 8004050:	4013      	ands	r3, r2
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	6892      	ldr	r2, [r2, #8]
 8004056:	0211      	lsls	r1, r2, #8
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	68d2      	ldr	r2, [r2, #12]
 800405c:	06d2      	lsls	r2, r2, #27
 800405e:	4311      	orrs	r1, r2
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	6852      	ldr	r2, [r2, #4]
 8004064:	3a01      	subs	r2, #1
 8004066:	0112      	lsls	r2, r2, #4
 8004068:	4311      	orrs	r1, r2
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	6812      	ldr	r2, [r2, #0]
 800406e:	430a      	orrs	r2, r1
 8004070:	4915      	ldr	r1, [pc, #84]	; (80040c8 <RCCEx_PLLSAI2_Config+0x128>)
 8004072:	4313      	orrs	r3, r2
 8004074:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004076:	4b14      	ldr	r3, [pc, #80]	; (80040c8 <RCCEx_PLLSAI2_Config+0x128>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a13      	ldr	r2, [pc, #76]	; (80040c8 <RCCEx_PLLSAI2_Config+0x128>)
 800407c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004080:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004082:	f7fe f8cb 	bl	800221c <HAL_GetTick>
 8004086:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004088:	e009      	b.n	800409e <RCCEx_PLLSAI2_Config+0xfe>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800408a:	f7fe f8c7 	bl	800221c <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	2b02      	cmp	r3, #2
 8004096:	d902      	bls.n	800409e <RCCEx_PLLSAI2_Config+0xfe>
        {
          status = HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	73fb      	strb	r3, [r7, #15]
          break;
 800409c:	e005      	b.n	80040aa <RCCEx_PLLSAI2_Config+0x10a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800409e:	4b0a      	ldr	r3, [pc, #40]	; (80040c8 <RCCEx_PLLSAI2_Config+0x128>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d0ef      	beq.n	800408a <RCCEx_PLLSAI2_Config+0xea>
        }
      }

      if (status == HAL_OK)
 80040aa:	7bfb      	ldrb	r3, [r7, #15]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d106      	bne.n	80040be <RCCEx_PLLSAI2_Config+0x11e>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 80040b0:	4b05      	ldr	r3, [pc, #20]	; (80040c8 <RCCEx_PLLSAI2_Config+0x128>)
 80040b2:	695a      	ldr	r2, [r3, #20]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	4903      	ldr	r1, [pc, #12]	; (80040c8 <RCCEx_PLLSAI2_Config+0x128>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80040be:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	40021000 	.word	0x40021000
 80040cc:	07ff800c 	.word	0x07ff800c

080040d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e049      	b.n	8004176 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d106      	bne.n	80040fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f7fd fdbc 	bl	8001c74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2202      	movs	r2, #2
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	3304      	adds	r3, #4
 800410c:	4619      	mov	r1, r3
 800410e:	4610      	mov	r0, r2
 8004110:	f000 f9e6 	bl	80044e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
	...

08004180 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800418e:	b2db      	uxtb	r3, r3
 8004190:	2b01      	cmp	r3, #1
 8004192:	d001      	beq.n	8004198 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e047      	b.n	8004228 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2202      	movs	r2, #2
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a23      	ldr	r2, [pc, #140]	; (8004234 <HAL_TIM_Base_Start+0xb4>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d01d      	beq.n	80041e6 <HAL_TIM_Base_Start+0x66>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b2:	d018      	beq.n	80041e6 <HAL_TIM_Base_Start+0x66>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a1f      	ldr	r2, [pc, #124]	; (8004238 <HAL_TIM_Base_Start+0xb8>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d013      	beq.n	80041e6 <HAL_TIM_Base_Start+0x66>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a1e      	ldr	r2, [pc, #120]	; (800423c <HAL_TIM_Base_Start+0xbc>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d00e      	beq.n	80041e6 <HAL_TIM_Base_Start+0x66>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a1c      	ldr	r2, [pc, #112]	; (8004240 <HAL_TIM_Base_Start+0xc0>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d009      	beq.n	80041e6 <HAL_TIM_Base_Start+0x66>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a1b      	ldr	r2, [pc, #108]	; (8004244 <HAL_TIM_Base_Start+0xc4>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d004      	beq.n	80041e6 <HAL_TIM_Base_Start+0x66>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a19      	ldr	r2, [pc, #100]	; (8004248 <HAL_TIM_Base_Start+0xc8>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d115      	bne.n	8004212 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	689a      	ldr	r2, [r3, #8]
 80041ec:	4b17      	ldr	r3, [pc, #92]	; (800424c <HAL_TIM_Base_Start+0xcc>)
 80041ee:	4013      	ands	r3, r2
 80041f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2b06      	cmp	r3, #6
 80041f6:	d015      	beq.n	8004224 <HAL_TIM_Base_Start+0xa4>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041fe:	d011      	beq.n	8004224 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f042 0201 	orr.w	r2, r2, #1
 800420e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004210:	e008      	b.n	8004224 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f042 0201 	orr.w	r2, r2, #1
 8004220:	601a      	str	r2, [r3, #0]
 8004222:	e000      	b.n	8004226 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004224:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	3714      	adds	r7, #20
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	40012c00 	.word	0x40012c00
 8004238:	40000400 	.word	0x40000400
 800423c:	40000800 	.word	0x40000800
 8004240:	40000c00 	.word	0x40000c00
 8004244:	40013400 	.word	0x40013400
 8004248:	40014000 	.word	0x40014000
 800424c:	00010007 	.word	0x00010007

08004250 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b02      	cmp	r3, #2
 8004264:	d122      	bne.n	80042ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b02      	cmp	r3, #2
 8004272:	d11b      	bne.n	80042ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f06f 0202 	mvn.w	r2, #2
 800427c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	f003 0303 	and.w	r3, r3, #3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d003      	beq.n	800429a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 f905 	bl	80044a2 <HAL_TIM_IC_CaptureCallback>
 8004298:	e005      	b.n	80042a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f8f7 	bl	800448e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 f908 	bl	80044b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	f003 0304 	and.w	r3, r3, #4
 80042b6:	2b04      	cmp	r3, #4
 80042b8:	d122      	bne.n	8004300 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	f003 0304 	and.w	r3, r3, #4
 80042c4:	2b04      	cmp	r3, #4
 80042c6:	d11b      	bne.n	8004300 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f06f 0204 	mvn.w	r2, #4
 80042d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2202      	movs	r2, #2
 80042d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d003      	beq.n	80042ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 f8db 	bl	80044a2 <HAL_TIM_IC_CaptureCallback>
 80042ec:	e005      	b.n	80042fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 f8cd 	bl	800448e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 f8de 	bl	80044b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	f003 0308 	and.w	r3, r3, #8
 800430a:	2b08      	cmp	r3, #8
 800430c:	d122      	bne.n	8004354 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	f003 0308 	and.w	r3, r3, #8
 8004318:	2b08      	cmp	r3, #8
 800431a:	d11b      	bne.n	8004354 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f06f 0208 	mvn.w	r2, #8
 8004324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2204      	movs	r2, #4
 800432a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	f003 0303 	and.w	r3, r3, #3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d003      	beq.n	8004342 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 f8b1 	bl	80044a2 <HAL_TIM_IC_CaptureCallback>
 8004340:	e005      	b.n	800434e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f8a3 	bl	800448e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 f8b4 	bl	80044b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	f003 0310 	and.w	r3, r3, #16
 800435e:	2b10      	cmp	r3, #16
 8004360:	d122      	bne.n	80043a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	f003 0310 	and.w	r3, r3, #16
 800436c:	2b10      	cmp	r3, #16
 800436e:	d11b      	bne.n	80043a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f06f 0210 	mvn.w	r2, #16
 8004378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2208      	movs	r2, #8
 800437e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	69db      	ldr	r3, [r3, #28]
 8004386:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800438a:	2b00      	cmp	r3, #0
 800438c:	d003      	beq.n	8004396 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f887 	bl	80044a2 <HAL_TIM_IC_CaptureCallback>
 8004394:	e005      	b.n	80043a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 f879 	bl	800448e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 f88a 	bl	80044b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d10e      	bne.n	80043d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	f003 0301 	and.w	r3, r3, #1
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d107      	bne.n	80043d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f06f 0201 	mvn.w	r2, #1
 80043cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f7fd f9f0 	bl	80017b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043de:	2b80      	cmp	r3, #128	; 0x80
 80043e0:	d10e      	bne.n	8004400 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ec:	2b80      	cmp	r3, #128	; 0x80
 80043ee:	d107      	bne.n	8004400 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 f914 	bl	8004628 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800440a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800440e:	d10e      	bne.n	800442e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800441a:	2b80      	cmp	r3, #128	; 0x80
 800441c:	d107      	bne.n	800442e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004426:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f000 f907 	bl	800463c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004438:	2b40      	cmp	r3, #64	; 0x40
 800443a:	d10e      	bne.n	800445a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004446:	2b40      	cmp	r3, #64	; 0x40
 8004448:	d107      	bne.n	800445a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004452:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 f838 	bl	80044ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	f003 0320 	and.w	r3, r3, #32
 8004464:	2b20      	cmp	r3, #32
 8004466:	d10e      	bne.n	8004486 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	f003 0320 	and.w	r3, r3, #32
 8004472:	2b20      	cmp	r3, #32
 8004474:	d107      	bne.n	8004486 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f06f 0220 	mvn.w	r2, #32
 800447e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 f8c7 	bl	8004614 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004486:	bf00      	nop
 8004488:	3708      	adds	r7, #8
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800448e:	b480      	push	{r7}
 8004490:	b083      	sub	sp, #12
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004496:	bf00      	nop
 8004498:	370c      	adds	r7, #12
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr

080044a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044a2:	b480      	push	{r7}
 80044a4:	b083      	sub	sp, #12
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044aa:	bf00      	nop
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b083      	sub	sp, #12
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044be:	bf00      	nop
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b083      	sub	sp, #12
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044d2:	bf00      	nop
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
	...

080044e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a40      	ldr	r2, [pc, #256]	; (80045f4 <TIM_Base_SetConfig+0x114>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d013      	beq.n	8004520 <TIM_Base_SetConfig+0x40>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044fe:	d00f      	beq.n	8004520 <TIM_Base_SetConfig+0x40>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a3d      	ldr	r2, [pc, #244]	; (80045f8 <TIM_Base_SetConfig+0x118>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d00b      	beq.n	8004520 <TIM_Base_SetConfig+0x40>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a3c      	ldr	r2, [pc, #240]	; (80045fc <TIM_Base_SetConfig+0x11c>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d007      	beq.n	8004520 <TIM_Base_SetConfig+0x40>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a3b      	ldr	r2, [pc, #236]	; (8004600 <TIM_Base_SetConfig+0x120>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d003      	beq.n	8004520 <TIM_Base_SetConfig+0x40>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a3a      	ldr	r2, [pc, #232]	; (8004604 <TIM_Base_SetConfig+0x124>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d108      	bne.n	8004532 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004526:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	4313      	orrs	r3, r2
 8004530:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a2f      	ldr	r2, [pc, #188]	; (80045f4 <TIM_Base_SetConfig+0x114>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d01f      	beq.n	800457a <TIM_Base_SetConfig+0x9a>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004540:	d01b      	beq.n	800457a <TIM_Base_SetConfig+0x9a>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a2c      	ldr	r2, [pc, #176]	; (80045f8 <TIM_Base_SetConfig+0x118>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d017      	beq.n	800457a <TIM_Base_SetConfig+0x9a>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a2b      	ldr	r2, [pc, #172]	; (80045fc <TIM_Base_SetConfig+0x11c>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d013      	beq.n	800457a <TIM_Base_SetConfig+0x9a>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a2a      	ldr	r2, [pc, #168]	; (8004600 <TIM_Base_SetConfig+0x120>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d00f      	beq.n	800457a <TIM_Base_SetConfig+0x9a>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a29      	ldr	r2, [pc, #164]	; (8004604 <TIM_Base_SetConfig+0x124>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d00b      	beq.n	800457a <TIM_Base_SetConfig+0x9a>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a28      	ldr	r2, [pc, #160]	; (8004608 <TIM_Base_SetConfig+0x128>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d007      	beq.n	800457a <TIM_Base_SetConfig+0x9a>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a27      	ldr	r2, [pc, #156]	; (800460c <TIM_Base_SetConfig+0x12c>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d003      	beq.n	800457a <TIM_Base_SetConfig+0x9a>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a26      	ldr	r2, [pc, #152]	; (8004610 <TIM_Base_SetConfig+0x130>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d108      	bne.n	800458c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004580:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	4313      	orrs	r3, r2
 800458a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	4313      	orrs	r3, r2
 8004598:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	689a      	ldr	r2, [r3, #8]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a10      	ldr	r2, [pc, #64]	; (80045f4 <TIM_Base_SetConfig+0x114>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d00f      	beq.n	80045d8 <TIM_Base_SetConfig+0xf8>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a12      	ldr	r2, [pc, #72]	; (8004604 <TIM_Base_SetConfig+0x124>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d00b      	beq.n	80045d8 <TIM_Base_SetConfig+0xf8>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a11      	ldr	r2, [pc, #68]	; (8004608 <TIM_Base_SetConfig+0x128>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d007      	beq.n	80045d8 <TIM_Base_SetConfig+0xf8>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a10      	ldr	r2, [pc, #64]	; (800460c <TIM_Base_SetConfig+0x12c>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d003      	beq.n	80045d8 <TIM_Base_SetConfig+0xf8>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a0f      	ldr	r2, [pc, #60]	; (8004610 <TIM_Base_SetConfig+0x130>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d103      	bne.n	80045e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	691a      	ldr	r2, [r3, #16]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	615a      	str	r2, [r3, #20]
}
 80045e6:	bf00      	nop
 80045e8:	3714      	adds	r7, #20
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	40012c00 	.word	0x40012c00
 80045f8:	40000400 	.word	0x40000400
 80045fc:	40000800 	.word	0x40000800
 8004600:	40000c00 	.word	0x40000c00
 8004604:	40013400 	.word	0x40013400
 8004608:	40014000 	.word	0x40014000
 800460c:	40014400 	.word	0x40014400
 8004610:	40014800 	.word	0x40014800

08004614 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004630:	bf00      	nop
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004644:	bf00      	nop
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e042      	b.n	80046e8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004668:	2b00      	cmp	r3, #0
 800466a:	d106      	bne.n	800467a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f7fd fb23 	bl	8001cc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2224      	movs	r2, #36	; 0x24
 800467e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f022 0201 	bic.w	r2, r2, #1
 8004690:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 f8c2 	bl	800481c <UART_SetConfig>
 8004698:	4603      	mov	r3, r0
 800469a:	2b01      	cmp	r3, #1
 800469c:	d101      	bne.n	80046a2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e022      	b.n	80046e8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 fb8c 	bl	8004dc8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	689a      	ldr	r2, [r3, #8]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f042 0201 	orr.w	r2, r2, #1
 80046de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 fc13 	bl	8004f0c <UART_CheckIdleState>
 80046e6:	4603      	mov	r3, r0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3708      	adds	r7, #8
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b08a      	sub	sp, #40	; 0x28
 80046f4:	af02      	add	r7, sp, #8
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	603b      	str	r3, [r7, #0]
 80046fc:	4613      	mov	r3, r2
 80046fe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004706:	2b20      	cmp	r3, #32
 8004708:	f040 8083 	bne.w	8004812 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d002      	beq.n	8004718 <HAL_UART_Transmit+0x28>
 8004712:	88fb      	ldrh	r3, [r7, #6]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d101      	bne.n	800471c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e07b      	b.n	8004814 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004722:	2b01      	cmp	r3, #1
 8004724:	d101      	bne.n	800472a <HAL_UART_Transmit+0x3a>
 8004726:	2302      	movs	r3, #2
 8004728:	e074      	b.n	8004814 <HAL_UART_Transmit+0x124>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2221      	movs	r2, #33	; 0x21
 800473e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004742:	f7fd fd6b 	bl	800221c <HAL_GetTick>
 8004746:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	88fa      	ldrh	r2, [r7, #6]
 800474c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	88fa      	ldrh	r2, [r7, #6]
 8004754:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004760:	d108      	bne.n	8004774 <HAL_UART_Transmit+0x84>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d104      	bne.n	8004774 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800476a:	2300      	movs	r3, #0
 800476c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	61bb      	str	r3, [r7, #24]
 8004772:	e003      	b.n	800477c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004778:	2300      	movs	r3, #0
 800477a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004784:	e02c      	b.n	80047e0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	9300      	str	r3, [sp, #0]
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	2200      	movs	r2, #0
 800478e:	2180      	movs	r1, #128	; 0x80
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	f000 fc06 	bl	8004fa2 <UART_WaitOnFlagUntilTimeout>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d001      	beq.n	80047a0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e039      	b.n	8004814 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d10b      	bne.n	80047be <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	881b      	ldrh	r3, [r3, #0]
 80047aa:	461a      	mov	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047b4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	3302      	adds	r3, #2
 80047ba:	61bb      	str	r3, [r7, #24]
 80047bc:	e007      	b.n	80047ce <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	781a      	ldrb	r2, [r3, #0]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	3301      	adds	r3, #1
 80047cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	3b01      	subs	r3, #1
 80047d8:	b29a      	uxth	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1cc      	bne.n	8004786 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	9300      	str	r3, [sp, #0]
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	2200      	movs	r2, #0
 80047f4:	2140      	movs	r1, #64	; 0x40
 80047f6:	68f8      	ldr	r0, [r7, #12]
 80047f8:	f000 fbd3 	bl	8004fa2 <UART_WaitOnFlagUntilTimeout>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d001      	beq.n	8004806 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e006      	b.n	8004814 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2220      	movs	r2, #32
 800480a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800480e:	2300      	movs	r3, #0
 8004810:	e000      	b.n	8004814 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004812:	2302      	movs	r3, #2
  }
}
 8004814:	4618      	mov	r0, r3
 8004816:	3720      	adds	r7, #32
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800481c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004820:	b088      	sub	sp, #32
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004826:	2300      	movs	r3, #0
 8004828:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	689a      	ldr	r2, [r3, #8]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	431a      	orrs	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	695b      	ldr	r3, [r3, #20]
 8004838:	431a      	orrs	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	69db      	ldr	r3, [r3, #28]
 800483e:	4313      	orrs	r3, r2
 8004840:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004846:	69fa      	ldr	r2, [r7, #28]
 8004848:	4313      	orrs	r3, r2
 800484a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	4bb1      	ldr	r3, [pc, #708]	; (8004b18 <UART_SetConfig+0x2fc>)
 8004854:	4013      	ands	r3, r2
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	6812      	ldr	r2, [r2, #0]
 800485a:	69f9      	ldr	r1, [r7, #28]
 800485c:	430b      	orrs	r3, r1
 800485e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	68da      	ldr	r2, [r3, #12]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	430a      	orrs	r2, r1
 8004874:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4aa6      	ldr	r2, [pc, #664]	; (8004b1c <UART_SetConfig+0x300>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d004      	beq.n	8004890 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	69fa      	ldr	r2, [r7, #28]
 800488c:	4313      	orrs	r3, r2
 800488e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800489a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	6812      	ldr	r2, [r2, #0]
 80048a2:	69f9      	ldr	r1, [r7, #28]
 80048a4:	430b      	orrs	r3, r1
 80048a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ae:	f023 010f 	bic.w	r1, r3, #15
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	430a      	orrs	r2, r1
 80048bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a97      	ldr	r2, [pc, #604]	; (8004b20 <UART_SetConfig+0x304>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d121      	bne.n	800490c <UART_SetConfig+0xf0>
 80048c8:	4b96      	ldr	r3, [pc, #600]	; (8004b24 <UART_SetConfig+0x308>)
 80048ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ce:	f003 0303 	and.w	r3, r3, #3
 80048d2:	2b03      	cmp	r3, #3
 80048d4:	d816      	bhi.n	8004904 <UART_SetConfig+0xe8>
 80048d6:	a201      	add	r2, pc, #4	; (adr r2, 80048dc <UART_SetConfig+0xc0>)
 80048d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048dc:	080048ed 	.word	0x080048ed
 80048e0:	080048f9 	.word	0x080048f9
 80048e4:	080048f3 	.word	0x080048f3
 80048e8:	080048ff 	.word	0x080048ff
 80048ec:	2301      	movs	r3, #1
 80048ee:	76fb      	strb	r3, [r7, #27]
 80048f0:	e0e8      	b.n	8004ac4 <UART_SetConfig+0x2a8>
 80048f2:	2302      	movs	r3, #2
 80048f4:	76fb      	strb	r3, [r7, #27]
 80048f6:	e0e5      	b.n	8004ac4 <UART_SetConfig+0x2a8>
 80048f8:	2304      	movs	r3, #4
 80048fa:	76fb      	strb	r3, [r7, #27]
 80048fc:	e0e2      	b.n	8004ac4 <UART_SetConfig+0x2a8>
 80048fe:	2308      	movs	r3, #8
 8004900:	76fb      	strb	r3, [r7, #27]
 8004902:	e0df      	b.n	8004ac4 <UART_SetConfig+0x2a8>
 8004904:	2310      	movs	r3, #16
 8004906:	76fb      	strb	r3, [r7, #27]
 8004908:	bf00      	nop
 800490a:	e0db      	b.n	8004ac4 <UART_SetConfig+0x2a8>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a85      	ldr	r2, [pc, #532]	; (8004b28 <UART_SetConfig+0x30c>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d134      	bne.n	8004980 <UART_SetConfig+0x164>
 8004916:	4b83      	ldr	r3, [pc, #524]	; (8004b24 <UART_SetConfig+0x308>)
 8004918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800491c:	f003 030c 	and.w	r3, r3, #12
 8004920:	2b0c      	cmp	r3, #12
 8004922:	d829      	bhi.n	8004978 <UART_SetConfig+0x15c>
 8004924:	a201      	add	r2, pc, #4	; (adr r2, 800492c <UART_SetConfig+0x110>)
 8004926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800492a:	bf00      	nop
 800492c:	08004961 	.word	0x08004961
 8004930:	08004979 	.word	0x08004979
 8004934:	08004979 	.word	0x08004979
 8004938:	08004979 	.word	0x08004979
 800493c:	0800496d 	.word	0x0800496d
 8004940:	08004979 	.word	0x08004979
 8004944:	08004979 	.word	0x08004979
 8004948:	08004979 	.word	0x08004979
 800494c:	08004967 	.word	0x08004967
 8004950:	08004979 	.word	0x08004979
 8004954:	08004979 	.word	0x08004979
 8004958:	08004979 	.word	0x08004979
 800495c:	08004973 	.word	0x08004973
 8004960:	2300      	movs	r3, #0
 8004962:	76fb      	strb	r3, [r7, #27]
 8004964:	e0ae      	b.n	8004ac4 <UART_SetConfig+0x2a8>
 8004966:	2302      	movs	r3, #2
 8004968:	76fb      	strb	r3, [r7, #27]
 800496a:	e0ab      	b.n	8004ac4 <UART_SetConfig+0x2a8>
 800496c:	2304      	movs	r3, #4
 800496e:	76fb      	strb	r3, [r7, #27]
 8004970:	e0a8      	b.n	8004ac4 <UART_SetConfig+0x2a8>
 8004972:	2308      	movs	r3, #8
 8004974:	76fb      	strb	r3, [r7, #27]
 8004976:	e0a5      	b.n	8004ac4 <UART_SetConfig+0x2a8>
 8004978:	2310      	movs	r3, #16
 800497a:	76fb      	strb	r3, [r7, #27]
 800497c:	bf00      	nop
 800497e:	e0a1      	b.n	8004ac4 <UART_SetConfig+0x2a8>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a69      	ldr	r2, [pc, #420]	; (8004b2c <UART_SetConfig+0x310>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d120      	bne.n	80049cc <UART_SetConfig+0x1b0>
 800498a:	4b66      	ldr	r3, [pc, #408]	; (8004b24 <UART_SetConfig+0x308>)
 800498c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004990:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004994:	2b10      	cmp	r3, #16
 8004996:	d00f      	beq.n	80049b8 <UART_SetConfig+0x19c>
 8004998:	2b10      	cmp	r3, #16
 800499a:	d802      	bhi.n	80049a2 <UART_SetConfig+0x186>
 800499c:	2b00      	cmp	r3, #0
 800499e:	d005      	beq.n	80049ac <UART_SetConfig+0x190>
 80049a0:	e010      	b.n	80049c4 <UART_SetConfig+0x1a8>
 80049a2:	2b20      	cmp	r3, #32
 80049a4:	d005      	beq.n	80049b2 <UART_SetConfig+0x196>
 80049a6:	2b30      	cmp	r3, #48	; 0x30
 80049a8:	d009      	beq.n	80049be <UART_SetConfig+0x1a2>
 80049aa:	e00b      	b.n	80049c4 <UART_SetConfig+0x1a8>
 80049ac:	2300      	movs	r3, #0
 80049ae:	76fb      	strb	r3, [r7, #27]
 80049b0:	e088      	b.n	8004ac4 <UART_SetConfig+0x2a8>
 80049b2:	2302      	movs	r3, #2
 80049b4:	76fb      	strb	r3, [r7, #27]
 80049b6:	e085      	b.n	8004ac4 <UART_SetConfig+0x2a8>
 80049b8:	2304      	movs	r3, #4
 80049ba:	76fb      	strb	r3, [r7, #27]
 80049bc:	e082      	b.n	8004ac4 <UART_SetConfig+0x2a8>
 80049be:	2308      	movs	r3, #8
 80049c0:	76fb      	strb	r3, [r7, #27]
 80049c2:	e07f      	b.n	8004ac4 <UART_SetConfig+0x2a8>
 80049c4:	2310      	movs	r3, #16
 80049c6:	76fb      	strb	r3, [r7, #27]
 80049c8:	bf00      	nop
 80049ca:	e07b      	b.n	8004ac4 <UART_SetConfig+0x2a8>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a57      	ldr	r2, [pc, #348]	; (8004b30 <UART_SetConfig+0x314>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d120      	bne.n	8004a18 <UART_SetConfig+0x1fc>
 80049d6:	4b53      	ldr	r3, [pc, #332]	; (8004b24 <UART_SetConfig+0x308>)
 80049d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049dc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80049e0:	2b40      	cmp	r3, #64	; 0x40
 80049e2:	d00f      	beq.n	8004a04 <UART_SetConfig+0x1e8>
 80049e4:	2b40      	cmp	r3, #64	; 0x40
 80049e6:	d802      	bhi.n	80049ee <UART_SetConfig+0x1d2>
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d005      	beq.n	80049f8 <UART_SetConfig+0x1dc>
 80049ec:	e010      	b.n	8004a10 <UART_SetConfig+0x1f4>
 80049ee:	2b80      	cmp	r3, #128	; 0x80
 80049f0:	d005      	beq.n	80049fe <UART_SetConfig+0x1e2>
 80049f2:	2bc0      	cmp	r3, #192	; 0xc0
 80049f4:	d009      	beq.n	8004a0a <UART_SetConfig+0x1ee>
 80049f6:	e00b      	b.n	8004a10 <UART_SetConfig+0x1f4>
 80049f8:	2300      	movs	r3, #0
 80049fa:	76fb      	strb	r3, [r7, #27]
 80049fc:	e062      	b.n	8004ac4 <UART_SetConfig+0x2a8>
 80049fe:	2302      	movs	r3, #2
 8004a00:	76fb      	strb	r3, [r7, #27]
 8004a02:	e05f      	b.n	8004ac4 <UART_SetConfig+0x2a8>
 8004a04:	2304      	movs	r3, #4
 8004a06:	76fb      	strb	r3, [r7, #27]
 8004a08:	e05c      	b.n	8004ac4 <UART_SetConfig+0x2a8>
 8004a0a:	2308      	movs	r3, #8
 8004a0c:	76fb      	strb	r3, [r7, #27]
 8004a0e:	e059      	b.n	8004ac4 <UART_SetConfig+0x2a8>
 8004a10:	2310      	movs	r3, #16
 8004a12:	76fb      	strb	r3, [r7, #27]
 8004a14:	bf00      	nop
 8004a16:	e055      	b.n	8004ac4 <UART_SetConfig+0x2a8>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a45      	ldr	r2, [pc, #276]	; (8004b34 <UART_SetConfig+0x318>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d124      	bne.n	8004a6c <UART_SetConfig+0x250>
 8004a22:	4b40      	ldr	r3, [pc, #256]	; (8004b24 <UART_SetConfig+0x308>)
 8004a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a30:	d012      	beq.n	8004a58 <UART_SetConfig+0x23c>
 8004a32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a36:	d802      	bhi.n	8004a3e <UART_SetConfig+0x222>
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d007      	beq.n	8004a4c <UART_SetConfig+0x230>
 8004a3c:	e012      	b.n	8004a64 <UART_SetConfig+0x248>
 8004a3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a42:	d006      	beq.n	8004a52 <UART_SetConfig+0x236>
 8004a44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a48:	d009      	beq.n	8004a5e <UART_SetConfig+0x242>
 8004a4a:	e00b      	b.n	8004a64 <UART_SetConfig+0x248>
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	76fb      	strb	r3, [r7, #27]
 8004a50:	e038      	b.n	8004ac4 <UART_SetConfig+0x2a8>
 8004a52:	2302      	movs	r3, #2
 8004a54:	76fb      	strb	r3, [r7, #27]
 8004a56:	e035      	b.n	8004ac4 <UART_SetConfig+0x2a8>
 8004a58:	2304      	movs	r3, #4
 8004a5a:	76fb      	strb	r3, [r7, #27]
 8004a5c:	e032      	b.n	8004ac4 <UART_SetConfig+0x2a8>
 8004a5e:	2308      	movs	r3, #8
 8004a60:	76fb      	strb	r3, [r7, #27]
 8004a62:	e02f      	b.n	8004ac4 <UART_SetConfig+0x2a8>
 8004a64:	2310      	movs	r3, #16
 8004a66:	76fb      	strb	r3, [r7, #27]
 8004a68:	bf00      	nop
 8004a6a:	e02b      	b.n	8004ac4 <UART_SetConfig+0x2a8>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a2a      	ldr	r2, [pc, #168]	; (8004b1c <UART_SetConfig+0x300>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d124      	bne.n	8004ac0 <UART_SetConfig+0x2a4>
 8004a76:	4b2b      	ldr	r3, [pc, #172]	; (8004b24 <UART_SetConfig+0x308>)
 8004a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a84:	d012      	beq.n	8004aac <UART_SetConfig+0x290>
 8004a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a8a:	d802      	bhi.n	8004a92 <UART_SetConfig+0x276>
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d007      	beq.n	8004aa0 <UART_SetConfig+0x284>
 8004a90:	e012      	b.n	8004ab8 <UART_SetConfig+0x29c>
 8004a92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a96:	d006      	beq.n	8004aa6 <UART_SetConfig+0x28a>
 8004a98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a9c:	d009      	beq.n	8004ab2 <UART_SetConfig+0x296>
 8004a9e:	e00b      	b.n	8004ab8 <UART_SetConfig+0x29c>
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	76fb      	strb	r3, [r7, #27]
 8004aa4:	e00e      	b.n	8004ac4 <UART_SetConfig+0x2a8>
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	76fb      	strb	r3, [r7, #27]
 8004aaa:	e00b      	b.n	8004ac4 <UART_SetConfig+0x2a8>
 8004aac:	2304      	movs	r3, #4
 8004aae:	76fb      	strb	r3, [r7, #27]
 8004ab0:	e008      	b.n	8004ac4 <UART_SetConfig+0x2a8>
 8004ab2:	2308      	movs	r3, #8
 8004ab4:	76fb      	strb	r3, [r7, #27]
 8004ab6:	e005      	b.n	8004ac4 <UART_SetConfig+0x2a8>
 8004ab8:	2310      	movs	r3, #16
 8004aba:	76fb      	strb	r3, [r7, #27]
 8004abc:	bf00      	nop
 8004abe:	e001      	b.n	8004ac4 <UART_SetConfig+0x2a8>
 8004ac0:	2310      	movs	r3, #16
 8004ac2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a14      	ldr	r2, [pc, #80]	; (8004b1c <UART_SetConfig+0x300>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	f040 80a5 	bne.w	8004c1a <UART_SetConfig+0x3fe>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ad0:	7efb      	ldrb	r3, [r7, #27]
 8004ad2:	2b08      	cmp	r3, #8
 8004ad4:	d83a      	bhi.n	8004b4c <UART_SetConfig+0x330>
 8004ad6:	a201      	add	r2, pc, #4	; (adr r2, 8004adc <UART_SetConfig+0x2c0>)
 8004ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004adc:	08004b01 	.word	0x08004b01
 8004ae0:	08004b09 	.word	0x08004b09
 8004ae4:	08004b11 	.word	0x08004b11
 8004ae8:	08004b4d 	.word	0x08004b4d
 8004aec:	08004b3d 	.word	0x08004b3d
 8004af0:	08004b4d 	.word	0x08004b4d
 8004af4:	08004b4d 	.word	0x08004b4d
 8004af8:	08004b4d 	.word	0x08004b4d
 8004afc:	08004b45 	.word	0x08004b45
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b00:	f7fe fd0e 	bl	8003520 <HAL_RCC_GetPCLK1Freq>
 8004b04:	6178      	str	r0, [r7, #20]
        break;
 8004b06:	e026      	b.n	8004b56 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b08:	f7fe fd1e 	bl	8003548 <HAL_RCC_GetPCLK2Freq>
 8004b0c:	6178      	str	r0, [r7, #20]
        break;
 8004b0e:	e022      	b.n	8004b56 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b10:	4b09      	ldr	r3, [pc, #36]	; (8004b38 <UART_SetConfig+0x31c>)
 8004b12:	617b      	str	r3, [r7, #20]
        break;
 8004b14:	e01f      	b.n	8004b56 <UART_SetConfig+0x33a>
 8004b16:	bf00      	nop
 8004b18:	cfff69f3 	.word	0xcfff69f3
 8004b1c:	40008000 	.word	0x40008000
 8004b20:	40013800 	.word	0x40013800
 8004b24:	40021000 	.word	0x40021000
 8004b28:	40004400 	.word	0x40004400
 8004b2c:	40004800 	.word	0x40004800
 8004b30:	40004c00 	.word	0x40004c00
 8004b34:	40005000 	.word	0x40005000
 8004b38:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b3c:	f7fe fc42 	bl	80033c4 <HAL_RCC_GetSysClockFreq>
 8004b40:	6178      	str	r0, [r7, #20]
        break;
 8004b42:	e008      	b.n	8004b56 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b48:	617b      	str	r3, [r7, #20]
        break;
 8004b4a:	e004      	b.n	8004b56 <UART_SetConfig+0x33a>
      default:
        pclk = 0U;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	76bb      	strb	r3, [r7, #26]
        break;
 8004b54:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	f000 811d 	beq.w	8004d98 <UART_SetConfig+0x57c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b62:	4a97      	ldr	r2, [pc, #604]	; (8004dc0 <UART_SetConfig+0x5a4>)
 8004b64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b68:	461a      	mov	r2, r3
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b70:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685a      	ldr	r2, [r3, #4]
 8004b76:	4613      	mov	r3, r2
 8004b78:	005b      	lsls	r3, r3, #1
 8004b7a:	4413      	add	r3, r2
 8004b7c:	68ba      	ldr	r2, [r7, #8]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d305      	bcc.n	8004b8e <UART_SetConfig+0x372>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b88:	68ba      	ldr	r2, [r7, #8]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d902      	bls.n	8004b94 <UART_SetConfig+0x378>
      {
        ret = HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	76bb      	strb	r3, [r7, #26]
 8004b92:	e101      	b.n	8004d98 <UART_SetConfig+0x57c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f04f 0100 	mov.w	r1, #0
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba0:	4a87      	ldr	r2, [pc, #540]	; (8004dc0 <UART_SetConfig+0x5a4>)
 8004ba2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	f04f 0400 	mov.w	r4, #0
 8004bac:	461a      	mov	r2, r3
 8004bae:	4623      	mov	r3, r4
 8004bb0:	f7fc f838 	bl	8000c24 <__aeabi_uldivmod>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	460c      	mov	r4, r1
 8004bb8:	4619      	mov	r1, r3
 8004bba:	4622      	mov	r2, r4
 8004bbc:	f04f 0300 	mov.w	r3, #0
 8004bc0:	f04f 0400 	mov.w	r4, #0
 8004bc4:	0214      	lsls	r4, r2, #8
 8004bc6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004bca:	020b      	lsls	r3, r1, #8
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	6852      	ldr	r2, [r2, #4]
 8004bd0:	0852      	lsrs	r2, r2, #1
 8004bd2:	4611      	mov	r1, r2
 8004bd4:	f04f 0200 	mov.w	r2, #0
 8004bd8:	eb13 0b01 	adds.w	fp, r3, r1
 8004bdc:	eb44 0c02 	adc.w	ip, r4, r2
 8004be0:	4658      	mov	r0, fp
 8004be2:	4661      	mov	r1, ip
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f04f 0400 	mov.w	r4, #0
 8004bec:	461a      	mov	r2, r3
 8004bee:	4623      	mov	r3, r4
 8004bf0:	f7fc f818 	bl	8000c24 <__aeabi_uldivmod>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	460c      	mov	r4, r1
 8004bf8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c00:	d308      	bcc.n	8004c14 <UART_SetConfig+0x3f8>
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c08:	d204      	bcs.n	8004c14 <UART_SetConfig+0x3f8>
        {
          huart->Instance->BRR = usartdiv;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	693a      	ldr	r2, [r7, #16]
 8004c10:	60da      	str	r2, [r3, #12]
 8004c12:	e0c1      	b.n	8004d98 <UART_SetConfig+0x57c>
        }
        else
        {
          ret = HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	76bb      	strb	r3, [r7, #26]
 8004c18:	e0be      	b.n	8004d98 <UART_SetConfig+0x57c>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	69db      	ldr	r3, [r3, #28]
 8004c1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c22:	d164      	bne.n	8004cee <UART_SetConfig+0x4d2>
  {
    switch (clocksource)
 8004c24:	7efb      	ldrb	r3, [r7, #27]
 8004c26:	2b08      	cmp	r3, #8
 8004c28:	d827      	bhi.n	8004c7a <UART_SetConfig+0x45e>
 8004c2a:	a201      	add	r2, pc, #4	; (adr r2, 8004c30 <UART_SetConfig+0x414>)
 8004c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c30:	08004c55 	.word	0x08004c55
 8004c34:	08004c5d 	.word	0x08004c5d
 8004c38:	08004c65 	.word	0x08004c65
 8004c3c:	08004c7b 	.word	0x08004c7b
 8004c40:	08004c6b 	.word	0x08004c6b
 8004c44:	08004c7b 	.word	0x08004c7b
 8004c48:	08004c7b 	.word	0x08004c7b
 8004c4c:	08004c7b 	.word	0x08004c7b
 8004c50:	08004c73 	.word	0x08004c73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c54:	f7fe fc64 	bl	8003520 <HAL_RCC_GetPCLK1Freq>
 8004c58:	6178      	str	r0, [r7, #20]
        break;
 8004c5a:	e013      	b.n	8004c84 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c5c:	f7fe fc74 	bl	8003548 <HAL_RCC_GetPCLK2Freq>
 8004c60:	6178      	str	r0, [r7, #20]
        break;
 8004c62:	e00f      	b.n	8004c84 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c64:	4b57      	ldr	r3, [pc, #348]	; (8004dc4 <UART_SetConfig+0x5a8>)
 8004c66:	617b      	str	r3, [r7, #20]
        break;
 8004c68:	e00c      	b.n	8004c84 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c6a:	f7fe fbab 	bl	80033c4 <HAL_RCC_GetSysClockFreq>
 8004c6e:	6178      	str	r0, [r7, #20]
        break;
 8004c70:	e008      	b.n	8004c84 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c76:	617b      	str	r3, [r7, #20]
        break;
 8004c78:	e004      	b.n	8004c84 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	76bb      	strb	r3, [r7, #26]
        break;
 8004c82:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f000 8086 	beq.w	8004d98 <UART_SetConfig+0x57c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c90:	4a4b      	ldr	r2, [pc, #300]	; (8004dc0 <UART_SetConfig+0x5a4>)
 8004c92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c96:	461a      	mov	r2, r3
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c9e:	005a      	lsls	r2, r3, #1
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	085b      	lsrs	r3, r3, #1
 8004ca6:	441a      	add	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	2b0f      	cmp	r3, #15
 8004cb8:	d916      	bls.n	8004ce8 <UART_SetConfig+0x4cc>
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cc0:	d212      	bcs.n	8004ce8 <UART_SetConfig+0x4cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	f023 030f 	bic.w	r3, r3, #15
 8004cca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	085b      	lsrs	r3, r3, #1
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	f003 0307 	and.w	r3, r3, #7
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	89fb      	ldrh	r3, [r7, #14]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	89fa      	ldrh	r2, [r7, #14]
 8004ce4:	60da      	str	r2, [r3, #12]
 8004ce6:	e057      	b.n	8004d98 <UART_SetConfig+0x57c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	76bb      	strb	r3, [r7, #26]
 8004cec:	e054      	b.n	8004d98 <UART_SetConfig+0x57c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004cee:	7efb      	ldrb	r3, [r7, #27]
 8004cf0:	2b08      	cmp	r3, #8
 8004cf2:	d828      	bhi.n	8004d46 <UART_SetConfig+0x52a>
 8004cf4:	a201      	add	r2, pc, #4	; (adr r2, 8004cfc <UART_SetConfig+0x4e0>)
 8004cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cfa:	bf00      	nop
 8004cfc:	08004d21 	.word	0x08004d21
 8004d00:	08004d29 	.word	0x08004d29
 8004d04:	08004d31 	.word	0x08004d31
 8004d08:	08004d47 	.word	0x08004d47
 8004d0c:	08004d37 	.word	0x08004d37
 8004d10:	08004d47 	.word	0x08004d47
 8004d14:	08004d47 	.word	0x08004d47
 8004d18:	08004d47 	.word	0x08004d47
 8004d1c:	08004d3f 	.word	0x08004d3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d20:	f7fe fbfe 	bl	8003520 <HAL_RCC_GetPCLK1Freq>
 8004d24:	6178      	str	r0, [r7, #20]
        break;
 8004d26:	e013      	b.n	8004d50 <UART_SetConfig+0x534>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d28:	f7fe fc0e 	bl	8003548 <HAL_RCC_GetPCLK2Freq>
 8004d2c:	6178      	str	r0, [r7, #20]
        break;
 8004d2e:	e00f      	b.n	8004d50 <UART_SetConfig+0x534>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d30:	4b24      	ldr	r3, [pc, #144]	; (8004dc4 <UART_SetConfig+0x5a8>)
 8004d32:	617b      	str	r3, [r7, #20]
        break;
 8004d34:	e00c      	b.n	8004d50 <UART_SetConfig+0x534>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d36:	f7fe fb45 	bl	80033c4 <HAL_RCC_GetSysClockFreq>
 8004d3a:	6178      	str	r0, [r7, #20]
        break;
 8004d3c:	e008      	b.n	8004d50 <UART_SetConfig+0x534>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d42:	617b      	str	r3, [r7, #20]
        break;
 8004d44:	e004      	b.n	8004d50 <UART_SetConfig+0x534>
      default:
        pclk = 0U;
 8004d46:	2300      	movs	r3, #0
 8004d48:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	76bb      	strb	r3, [r7, #26]
        break;
 8004d4e:	bf00      	nop
    }

    if (pclk != 0U)
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d020      	beq.n	8004d98 <UART_SetConfig+0x57c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5a:	4a19      	ldr	r2, [pc, #100]	; (8004dc0 <UART_SetConfig+0x5a4>)
 8004d5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d60:	461a      	mov	r2, r3
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	fbb3 f2f2 	udiv	r2, r3, r2
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	085b      	lsrs	r3, r3, #1
 8004d6e:	441a      	add	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	2b0f      	cmp	r3, #15
 8004d80:	d908      	bls.n	8004d94 <UART_SetConfig+0x578>
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d88:	d204      	bcs.n	8004d94 <UART_SetConfig+0x578>
      {
        huart->Instance->BRR = usartdiv;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	60da      	str	r2, [r3, #12]
 8004d92:	e001      	b.n	8004d98 <UART_SetConfig+0x57c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004db4:	7ebb      	ldrb	r3, [r7, #26]
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3720      	adds	r7, #32
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004dc0:	080255c0 	.word	0x080255c0
 8004dc4:	00f42400 	.word	0x00f42400

08004dc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd4:	f003 0301 	and.w	r3, r3, #1
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d00a      	beq.n	8004df2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df6:	f003 0302 	and.w	r3, r3, #2
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00a      	beq.n	8004e14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	430a      	orrs	r2, r1
 8004e12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e18:	f003 0304 	and.w	r3, r3, #4
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00a      	beq.n	8004e36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	430a      	orrs	r2, r1
 8004e34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3a:	f003 0308 	and.w	r3, r3, #8
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00a      	beq.n	8004e58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	430a      	orrs	r2, r1
 8004e56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5c:	f003 0310 	and.w	r3, r3, #16
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00a      	beq.n	8004e7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	430a      	orrs	r2, r1
 8004e78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7e:	f003 0320 	and.w	r3, r3, #32
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00a      	beq.n	8004e9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d01a      	beq.n	8004ede <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ec6:	d10a      	bne.n	8004ede <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	430a      	orrs	r2, r1
 8004edc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00a      	beq.n	8004f00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	430a      	orrs	r2, r1
 8004efe:	605a      	str	r2, [r3, #4]
  }
}
 8004f00:	bf00      	nop
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b086      	sub	sp, #24
 8004f10:	af02      	add	r7, sp, #8
 8004f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f1c:	f7fd f97e 	bl	800221c <HAL_GetTick>
 8004f20:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0308 	and.w	r3, r3, #8
 8004f2c:	2b08      	cmp	r3, #8
 8004f2e:	d10e      	bne.n	8004f4e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f34:	9300      	str	r3, [sp, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 f82f 	bl	8004fa2 <UART_WaitOnFlagUntilTimeout>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d001      	beq.n	8004f4e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e025      	b.n	8004f9a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0304 	and.w	r3, r3, #4
 8004f58:	2b04      	cmp	r3, #4
 8004f5a:	d10e      	bne.n	8004f7a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f819 	bl	8004fa2 <UART_WaitOnFlagUntilTimeout>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d001      	beq.n	8004f7a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e00f      	b.n	8004f9a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2220      	movs	r2, #32
 8004f86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b084      	sub	sp, #16
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	60f8      	str	r0, [r7, #12]
 8004faa:	60b9      	str	r1, [r7, #8]
 8004fac:	603b      	str	r3, [r7, #0]
 8004fae:	4613      	mov	r3, r2
 8004fb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fb2:	e062      	b.n	800507a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fba:	d05e      	beq.n	800507a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fbc:	f7fd f92e 	bl	800221c <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	69ba      	ldr	r2, [r7, #24]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d302      	bcc.n	8004fd2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d11d      	bne.n	800500e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004fe0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	689a      	ldr	r2, [r3, #8]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f022 0201 	bic.w	r2, r2, #1
 8004ff0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2220      	movs	r2, #32
 8004ff6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2220      	movs	r2, #32
 8004ffe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e045      	b.n	800509a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0304 	and.w	r3, r3, #4
 8005018:	2b00      	cmp	r3, #0
 800501a:	d02e      	beq.n	800507a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	69db      	ldr	r3, [r3, #28]
 8005022:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005026:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800502a:	d126      	bne.n	800507a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005034:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005044:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	689a      	ldr	r2, [r3, #8]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f022 0201 	bic.w	r2, r2, #1
 8005054:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2220      	movs	r2, #32
 800505a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2220      	movs	r2, #32
 8005062:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2220      	movs	r2, #32
 800506a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e00f      	b.n	800509a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	69da      	ldr	r2, [r3, #28]
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	4013      	ands	r3, r2
 8005084:	68ba      	ldr	r2, [r7, #8]
 8005086:	429a      	cmp	r2, r3
 8005088:	bf0c      	ite	eq
 800508a:	2301      	moveq	r3, #1
 800508c:	2300      	movne	r3, #0
 800508e:	b2db      	uxtb	r3, r3
 8005090:	461a      	mov	r2, r3
 8005092:	79fb      	ldrb	r3, [r7, #7]
 8005094:	429a      	cmp	r2, r3
 8005096:	d08d      	beq.n	8004fb4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3710      	adds	r7, #16
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}

080050a2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80050a2:	b480      	push	{r7}
 80050a4:	b085      	sub	sp, #20
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d101      	bne.n	80050b8 <HAL_UARTEx_DisableFifoMode+0x16>
 80050b4:	2302      	movs	r3, #2
 80050b6:	e027      	b.n	8005108 <HAL_UARTEx_DisableFifoMode+0x66>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2224      	movs	r2, #36	; 0x24
 80050c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f022 0201 	bic.w	r2, r2, #1
 80050de:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80050e6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2220      	movs	r2, #32
 80050fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005106:	2300      	movs	r3, #0
}
 8005108:	4618      	mov	r0, r3
 800510a:	3714      	adds	r7, #20
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005124:	2b01      	cmp	r3, #1
 8005126:	d101      	bne.n	800512c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005128:	2302      	movs	r3, #2
 800512a:	e02d      	b.n	8005188 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2224      	movs	r2, #36	; 0x24
 8005138:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f022 0201 	bic.w	r2, r2, #1
 8005152:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	683a      	ldr	r2, [r7, #0]
 8005164:	430a      	orrs	r2, r1
 8005166:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 f84f 	bl	800520c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2220      	movs	r2, #32
 800517a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3710      	adds	r7, #16
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d101      	bne.n	80051a8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80051a4:	2302      	movs	r3, #2
 80051a6:	e02d      	b.n	8005204 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2224      	movs	r2, #36	; 0x24
 80051b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f022 0201 	bic.w	r2, r2, #1
 80051ce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	683a      	ldr	r2, [r7, #0]
 80051e0:	430a      	orrs	r2, r1
 80051e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 f811 	bl	800520c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2220      	movs	r2, #32
 80051f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800520c:	b480      	push	{r7}
 800520e:	b089      	sub	sp, #36	; 0x24
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005214:	4a2f      	ldr	r2, [pc, #188]	; (80052d4 <UARTEx_SetNbDataToProcess+0xc8>)
 8005216:	f107 0314 	add.w	r3, r7, #20
 800521a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800521e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005222:	4a2d      	ldr	r2, [pc, #180]	; (80052d8 <UARTEx_SetNbDataToProcess+0xcc>)
 8005224:	f107 030c 	add.w	r3, r7, #12
 8005228:	e892 0003 	ldmia.w	r2, {r0, r1}
 800522c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005234:	2b00      	cmp	r3, #0
 8005236:	d108      	bne.n	800524a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005248:	e03d      	b.n	80052c6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800524a:	2308      	movs	r3, #8
 800524c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800524e:	2308      	movs	r3, #8
 8005250:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	0e5b      	lsrs	r3, r3, #25
 800525a:	b2db      	uxtb	r3, r3
 800525c:	f003 0307 	and.w	r3, r3, #7
 8005260:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	0f5b      	lsrs	r3, r3, #29
 800526a:	b2db      	uxtb	r3, r3
 800526c:	f003 0307 	and.w	r3, r3, #7
 8005270:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8005272:	7fbb      	ldrb	r3, [r7, #30]
 8005274:	7f3a      	ldrb	r2, [r7, #28]
 8005276:	f107 0120 	add.w	r1, r7, #32
 800527a:	440a      	add	r2, r1
 800527c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005280:	fb02 f303 	mul.w	r3, r2, r3
 8005284:	7f3a      	ldrb	r2, [r7, #28]
 8005286:	f107 0120 	add.w	r1, r7, #32
 800528a:	440a      	add	r2, r1
 800528c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005290:	fb93 f3f2 	sdiv	r3, r3, r2
 8005294:	b29a      	uxth	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800529c:	7ffb      	ldrb	r3, [r7, #31]
 800529e:	7f7a      	ldrb	r2, [r7, #29]
 80052a0:	f107 0120 	add.w	r1, r7, #32
 80052a4:	440a      	add	r2, r1
 80052a6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80052aa:	fb02 f303 	mul.w	r3, r2, r3
 80052ae:	7f7a      	ldrb	r2, [r7, #29]
 80052b0:	f107 0120 	add.w	r1, r7, #32
 80052b4:	440a      	add	r2, r1
 80052b6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80052ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80052be:	b29a      	uxth	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80052c6:	bf00      	nop
 80052c8:	3724      	adds	r7, #36	; 0x24
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	08021e58 	.word	0x08021e58
 80052d8:	08021e60 	.word	0x08021e60

080052dc <TfLiteIntArrayGetSizeInBytes>:
#ifndef TF_LITE_STATIC_MEMORY
#include <stdlib.h>
#include <string.h>
#endif  // TF_LITE_STATIC_MEMORY

int TfLiteIntArrayGetSizeInBytes(int size) {
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  static TfLiteIntArray dummy;
  return sizeof(dummy) + sizeof(dummy.data[0]) * size;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	3301      	adds	r3, #1
 80052e8:	009b      	lsls	r3, r3, #2
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	370c      	adds	r7, #12
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr

080052f6 <TfLiteFloatArrayGetSizeInBytes>:

void TfLiteIntArrayFree(TfLiteIntArray* a) { free(a); }

#endif  // TF_LITE_STATIC_MEMORY

int TfLiteFloatArrayGetSizeInBytes(int size) {
 80052f6:	b480      	push	{r7}
 80052f8:	b083      	sub	sp, #12
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
  static TfLiteFloatArray dummy;
  return sizeof(dummy) + sizeof(dummy.data[0]) * size;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	3301      	adds	r3, #1
 8005302:	009b      	lsls	r3, r3, #2
}
 8005304:	4618      	mov	r0, r3
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <TfLiteTypeGetName>:
  }
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	4603      	mov	r3, r0
 8005318:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 800531a:	79fb      	ldrb	r3, [r7, #7]
 800531c:	2b0b      	cmp	r3, #11
 800531e:	d833      	bhi.n	8005388 <TfLiteTypeGetName+0x78>
 8005320:	a201      	add	r2, pc, #4	; (adr r2, 8005328 <TfLiteTypeGetName+0x18>)
 8005322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005326:	bf00      	nop
 8005328:	08005359 	.word	0x08005359
 800532c:	0800535d 	.word	0x0800535d
 8005330:	08005365 	.word	0x08005365
 8005334:	08005369 	.word	0x08005369
 8005338:	08005371 	.word	0x08005371
 800533c:	0800537d 	.word	0x0800537d
 8005340:	08005375 	.word	0x08005375
 8005344:	08005361 	.word	0x08005361
 8005348:	08005379 	.word	0x08005379
 800534c:	0800536d 	.word	0x0800536d
 8005350:	08005381 	.word	0x08005381
 8005354:	08005385 	.word	0x08005385
    case kTfLiteNoType:
      return "NOTYPE";
 8005358:	4b0f      	ldr	r3, [pc, #60]	; (8005398 <TfLiteTypeGetName+0x88>)
 800535a:	e016      	b.n	800538a <TfLiteTypeGetName+0x7a>
    case kTfLiteFloat32:
      return "FLOAT32";
 800535c:	4b0f      	ldr	r3, [pc, #60]	; (800539c <TfLiteTypeGetName+0x8c>)
 800535e:	e014      	b.n	800538a <TfLiteTypeGetName+0x7a>
    case kTfLiteInt16:
      return "INT16";
 8005360:	4b0f      	ldr	r3, [pc, #60]	; (80053a0 <TfLiteTypeGetName+0x90>)
 8005362:	e012      	b.n	800538a <TfLiteTypeGetName+0x7a>
    case kTfLiteInt32:
      return "INT32";
 8005364:	4b0f      	ldr	r3, [pc, #60]	; (80053a4 <TfLiteTypeGetName+0x94>)
 8005366:	e010      	b.n	800538a <TfLiteTypeGetName+0x7a>
    case kTfLiteUInt8:
      return "UINT8";
 8005368:	4b0f      	ldr	r3, [pc, #60]	; (80053a8 <TfLiteTypeGetName+0x98>)
 800536a:	e00e      	b.n	800538a <TfLiteTypeGetName+0x7a>
    case kTfLiteInt8:
      return "INT8";
 800536c:	4b0f      	ldr	r3, [pc, #60]	; (80053ac <TfLiteTypeGetName+0x9c>)
 800536e:	e00c      	b.n	800538a <TfLiteTypeGetName+0x7a>
    case kTfLiteInt64:
      return "INT64";
 8005370:	4b0f      	ldr	r3, [pc, #60]	; (80053b0 <TfLiteTypeGetName+0xa0>)
 8005372:	e00a      	b.n	800538a <TfLiteTypeGetName+0x7a>
    case kTfLiteBool:
      return "BOOL";
 8005374:	4b0f      	ldr	r3, [pc, #60]	; (80053b4 <TfLiteTypeGetName+0xa4>)
 8005376:	e008      	b.n	800538a <TfLiteTypeGetName+0x7a>
    case kTfLiteComplex64:
      return "COMPLEX64";
 8005378:	4b0f      	ldr	r3, [pc, #60]	; (80053b8 <TfLiteTypeGetName+0xa8>)
 800537a:	e006      	b.n	800538a <TfLiteTypeGetName+0x7a>
    case kTfLiteString:
      return "STRING";
 800537c:	4b0f      	ldr	r3, [pc, #60]	; (80053bc <TfLiteTypeGetName+0xac>)
 800537e:	e004      	b.n	800538a <TfLiteTypeGetName+0x7a>
    case kTfLiteFloat16:
      return "FLOAT16";
 8005380:	4b0f      	ldr	r3, [pc, #60]	; (80053c0 <TfLiteTypeGetName+0xb0>)
 8005382:	e002      	b.n	800538a <TfLiteTypeGetName+0x7a>
    case kTfLiteFloat64:
      return "FLOAT64";
 8005384:	4b0f      	ldr	r3, [pc, #60]	; (80053c4 <TfLiteTypeGetName+0xb4>)
 8005386:	e000      	b.n	800538a <TfLiteTypeGetName+0x7a>
  }
  return "Unknown type";
 8005388:	4b0f      	ldr	r3, [pc, #60]	; (80053c8 <TfLiteTypeGetName+0xb8>)
}
 800538a:	4618      	mov	r0, r3
 800538c:	370c      	adds	r7, #12
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	08021e68 	.word	0x08021e68
 800539c:	08021e70 	.word	0x08021e70
 80053a0:	08021e78 	.word	0x08021e78
 80053a4:	08021e80 	.word	0x08021e80
 80053a8:	08021e88 	.word	0x08021e88
 80053ac:	08021e90 	.word	0x08021e90
 80053b0:	08021e98 	.word	0x08021e98
 80053b4:	08021ea0 	.word	0x08021ea0
 80053b8:	08021ea8 	.word	0x08021ea8
 80053bc:	08021eb4 	.word	0x08021eb4
 80053c0:	08021ebc 	.word	0x08021ebc
 80053c4:	08021ec4 	.word	0x08021ec4
 80053c8:	08021ecc 	.word	0x08021ecc

080053cc <_ZN6tflite13ErrorReporter6ReportEPKcz>:
#include "tensorflow/lite/core/api/error_reporter.h"
#include <cstdarg>

namespace tflite {

int ErrorReporter::Report(const char* format, ...) {
 80053cc:	b40e      	push	{r1, r2, r3}
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b085      	sub	sp, #20
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
  va_list args;
  va_start(args, format);
 80053d6:	f107 0320 	add.w	r3, r7, #32
 80053da:	60bb      	str	r3, [r7, #8]
  int code = Report(format, args);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	3308      	adds	r3, #8
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68ba      	ldr	r2, [r7, #8]
 80053e6:	69f9      	ldr	r1, [r7, #28]
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	4798      	blx	r3
 80053ec:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return code;
 80053ee:	68fb      	ldr	r3, [r7, #12]
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3714      	adds	r7, #20
 80053f4:	46bd      	mov	sp, r7
 80053f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053fa:	b003      	add	sp, #12
 80053fc:	4770      	bx	lr

080053fe <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>:

// TODO(aselle): Make the name of ReportError on context the same, so
// we can use the ensure functions w/o a context and w/ a reporter.
int ErrorReporter::ReportError(void*, const char* format, ...) {
 80053fe:	b40c      	push	{r2, r3}
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  va_list args;
  va_start(args, format);
 800540a:	f107 031c 	add.w	r3, r7, #28
 800540e:	60bb      	str	r3, [r7, #8]
  int code = Report(format, args);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	3308      	adds	r3, #8
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68ba      	ldr	r2, [r7, #8]
 800541a:	69b9      	ldr	r1, [r7, #24]
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	4798      	blx	r3
 8005420:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return code;
 8005422:	68fb      	ldr	r3, [r7, #12]
}
 8005424:	4618      	mov	r0, r3
 8005426:	3710      	adds	r7, #16
 8005428:	46bd      	mov	sp, r7
 800542a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800542e:	b002      	add	sp, #8
 8005430:	4770      	bx	lr

08005432 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8005432:	b480      	push	{r7}
 8005434:	b083      	sub	sp, #12
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
 800543a:	6039      	str	r1, [r7, #0]
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	4618      	mov	r0, r3
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <_ZNK6tflite13Conv2DOptions7paddingEv>:
  tflite::Padding padding() const {
 800544a:	b580      	push	{r7, lr}
 800544c:	b082      	sub	sp, #8
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	2104      	movs	r1, #4
 8005458:	4618      	mov	r0, r3
 800545a:	f004 fa32 	bl	80098c2 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 800545e:	4603      	mov	r3, r0
 8005460:	b2db      	uxtb	r3, r3
  }
 8005462:	4618      	mov	r0, r3
 8005464:	3708      	adds	r7, #8
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <_ZNK6tflite13Conv2DOptions8stride_wEv>:
  int32_t stride_w() const {
 800546a:	b580      	push	{r7, lr}
 800546c:	b082      	sub	sp, #8
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_W, 0);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	2106      	movs	r1, #6
 8005478:	4618      	mov	r0, r3
 800547a:	f004 f9f4 	bl	8009866 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800547e:	4603      	mov	r3, r0
  }
 8005480:	4618      	mov	r0, r3
 8005482:	3708      	adds	r7, #8
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <_ZNK6tflite13Conv2DOptions8stride_hEv>:
  int32_t stride_h() const {
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_H, 0);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	2108      	movs	r1, #8
 8005496:	4618      	mov	r0, r3
 8005498:	f004 f9e5 	bl	8009866 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800549c:	4603      	mov	r3, r0
  }
 800549e:	4618      	mov	r0, r3
 80054a0:	3708      	adds	r7, #8
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <_ZNK6tflite13Conv2DOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 80054a6:	b580      	push	{r7, lr}
 80054a8:	b082      	sub	sp, #8
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	210a      	movs	r1, #10
 80054b4:	4618      	mov	r0, r3
 80054b6:	f004 fa04 	bl	80098c2 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 80054ba:	4603      	mov	r3, r0
 80054bc:	b2db      	uxtb	r3, r3
  }
 80054be:	4618      	mov	r0, r3
 80054c0:	3708      	adds	r7, #8
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}

080054c6 <_ZNK6tflite13Conv2DOptions17dilation_w_factorEv>:
  int32_t dilation_w_factor() const {
 80054c6:	b580      	push	{r7, lr}
 80054c8:	b082      	sub	sp, #8
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DILATION_W_FACTOR, 1);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2201      	movs	r2, #1
 80054d2:	210c      	movs	r1, #12
 80054d4:	4618      	mov	r0, r3
 80054d6:	f004 f9c6 	bl	8009866 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 80054da:	4603      	mov	r3, r0
  }
 80054dc:	4618      	mov	r0, r3
 80054de:	3708      	adds	r7, #8
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <_ZNK6tflite13Conv2DOptions17dilation_h_factorEv>:
  int32_t dilation_h_factor() const {
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DILATION_H_FACTOR, 1);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	210e      	movs	r1, #14
 80054f2:	4618      	mov	r0, r3
 80054f4:	f004 f9b7 	bl	8009866 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 80054f8:	4603      	mov	r3, r0
  }
 80054fa:	4618      	mov	r0, r3
 80054fc:	3708      	adds	r7, #8
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <_ZNK6tflite13Pool2DOptions7paddingEv>:
  tflite::Padding padding() const {
 8005502:	b580      	push	{r7, lr}
 8005504:	b082      	sub	sp, #8
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	2104      	movs	r1, #4
 8005510:	4618      	mov	r0, r3
 8005512:	f004 f9d6 	bl	80098c2 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8005516:	4603      	mov	r3, r0
 8005518:	b2db      	uxtb	r3, r3
  }
 800551a:	4618      	mov	r0, r3
 800551c:	3708      	adds	r7, #8
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <_ZNK6tflite13Pool2DOptions8stride_wEv>:
  int32_t stride_w() const {
 8005522:	b580      	push	{r7, lr}
 8005524:	b082      	sub	sp, #8
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_W, 0);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	2106      	movs	r1, #6
 8005530:	4618      	mov	r0, r3
 8005532:	f004 f998 	bl	8009866 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8005536:	4603      	mov	r3, r0
  }
 8005538:	4618      	mov	r0, r3
 800553a:	3708      	adds	r7, #8
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <_ZNK6tflite13Pool2DOptions8stride_hEv>:
  int32_t stride_h() const {
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_H, 0);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	2108      	movs	r1, #8
 800554e:	4618      	mov	r0, r3
 8005550:	f004 f989 	bl	8009866 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8005554:	4603      	mov	r3, r0
  }
 8005556:	4618      	mov	r0, r3
 8005558:	3708      	adds	r7, #8
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <_ZNK6tflite13Pool2DOptions12filter_widthEv>:
  int32_t filter_width() const {
 800555e:	b580      	push	{r7, lr}
 8005560:	b082      	sub	sp, #8
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_FILTER_WIDTH, 0);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	210a      	movs	r1, #10
 800556c:	4618      	mov	r0, r3
 800556e:	f004 f97a 	bl	8009866 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8005572:	4603      	mov	r3, r0
  }
 8005574:	4618      	mov	r0, r3
 8005576:	3708      	adds	r7, #8
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <_ZNK6tflite13Pool2DOptions13filter_heightEv>:
  int32_t filter_height() const {
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_FILTER_HEIGHT, 0);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	210c      	movs	r1, #12
 800558a:	4618      	mov	r0, r3
 800558c:	f004 f96b 	bl	8009866 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8005590:	4603      	mov	r3, r0
  }
 8005592:	4618      	mov	r0, r3
 8005594:	3708      	adds	r7, #8
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <_ZNK6tflite13Pool2DOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 800559a:	b580      	push	{r7, lr}
 800559c:	b082      	sub	sp, #8
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	210e      	movs	r1, #14
 80055a8:	4618      	mov	r0, r3
 80055aa:	f004 f98a 	bl	80098c2 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 80055ae:	4603      	mov	r3, r0
 80055b0:	b2db      	uxtb	r3, r3
  }
 80055b2:	4618      	mov	r0, r3
 80055b4:	3708      	adds	r7, #8
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <_ZNK6tflite22DepthwiseConv2DOptions7paddingEv>:
  tflite::Padding padding() const {
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b082      	sub	sp, #8
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	2104      	movs	r1, #4
 80055c8:	4618      	mov	r0, r3
 80055ca:	f004 f97a 	bl	80098c2 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 80055ce:	4603      	mov	r3, r0
 80055d0:	b2db      	uxtb	r3, r3
  }
 80055d2:	4618      	mov	r0, r3
 80055d4:	3708      	adds	r7, #8
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <_ZNK6tflite22DepthwiseConv2DOptions8stride_wEv>:
  int32_t stride_w() const {
 80055da:	b580      	push	{r7, lr}
 80055dc:	b082      	sub	sp, #8
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_W, 0);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	2106      	movs	r1, #6
 80055e8:	4618      	mov	r0, r3
 80055ea:	f004 f93c 	bl	8009866 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 80055ee:	4603      	mov	r3, r0
  }
 80055f0:	4618      	mov	r0, r3
 80055f2:	3708      	adds	r7, #8
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <_ZNK6tflite22DepthwiseConv2DOptions8stride_hEv>:
  int32_t stride_h() const {
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_H, 0);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	2108      	movs	r1, #8
 8005606:	4618      	mov	r0, r3
 8005608:	f004 f92d 	bl	8009866 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800560c:	4603      	mov	r3, r0
  }
 800560e:	4618      	mov	r0, r3
 8005610:	3708      	adds	r7, #8
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <_ZNK6tflite22DepthwiseConv2DOptions16depth_multiplierEv>:
  int32_t depth_multiplier() const {
 8005616:	b580      	push	{r7, lr}
 8005618:	b082      	sub	sp, #8
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DEPTH_MULTIPLIER, 0);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	210a      	movs	r1, #10
 8005624:	4618      	mov	r0, r3
 8005626:	f004 f91e 	bl	8009866 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800562a:	4603      	mov	r3, r0
  }
 800562c:	4618      	mov	r0, r3
 800562e:	3708      	adds	r7, #8
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <_ZNK6tflite22DepthwiseConv2DOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	210c      	movs	r1, #12
 8005642:	4618      	mov	r0, r3
 8005644:	f004 f93d 	bl	80098c2 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8005648:	4603      	mov	r3, r0
 800564a:	b2db      	uxtb	r3, r3
  }
 800564c:	4618      	mov	r0, r3
 800564e:	3708      	adds	r7, #8
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <_ZNK6tflite22DepthwiseConv2DOptions17dilation_w_factorEv>:
  int32_t dilation_w_factor() const {
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DILATION_W_FACTOR, 1);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	210e      	movs	r1, #14
 8005662:	4618      	mov	r0, r3
 8005664:	f004 f8ff 	bl	8009866 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8005668:	4603      	mov	r3, r0
  }
 800566a:	4618      	mov	r0, r3
 800566c:	3708      	adds	r7, #8
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <_ZNK6tflite22DepthwiseConv2DOptions17dilation_h_factorEv>:
  int32_t dilation_h_factor() const {
 8005672:	b580      	push	{r7, lr}
 8005674:	b082      	sub	sp, #8
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DILATION_H_FACTOR, 1);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2201      	movs	r2, #1
 800567e:	2110      	movs	r1, #16
 8005680:	4618      	mov	r0, r3
 8005682:	f004 f8f0 	bl	8009866 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8005686:	4603      	mov	r3, r0
  }
 8005688:	4618      	mov	r0, r3
 800568a:	3708      	adds	r7, #8
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <_ZNK6tflite20LSHProjectionOptions4typeEv>:
  tflite::LSHProjectionType type() const {
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::LSHProjectionType>(GetField<int8_t>(VT_TYPE, 0));
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	2104      	movs	r1, #4
 800569e:	4618      	mov	r0, r3
 80056a0:	f004 f90f 	bl	80098c2 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 80056a4:	4603      	mov	r3, r0
 80056a6:	b2db      	uxtb	r3, r3
  }
 80056a8:	4618      	mov	r0, r3
 80056aa:	3708      	adds	r7, #8
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <_ZNK6tflite11SVDFOptions4rankEv>:
  int32_t rank() const {
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_RANK, 0);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	2104      	movs	r1, #4
 80056be:	4618      	mov	r0, r3
 80056c0:	f004 f8d1 	bl	8009866 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 80056c4:	4603      	mov	r3, r0
  }
 80056c6:	4618      	mov	r0, r3
 80056c8:	3708      	adds	r7, #8
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}

080056ce <_ZNK6tflite11SVDFOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b082      	sub	sp, #8
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	2106      	movs	r1, #6
 80056dc:	4618      	mov	r0, r3
 80056de:	f004 f8f0 	bl	80098c2 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 80056e2:	4603      	mov	r3, r0
 80056e4:	b2db      	uxtb	r3, r3
  }
 80056e6:	4618      	mov	r0, r3
 80056e8:	3708      	adds	r7, #8
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <_ZNK6tflite11SVDFOptions26asymmetric_quantize_inputsEv>:
  bool asymmetric_quantize_inputs() const {
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b082      	sub	sp, #8
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	2108      	movs	r1, #8
 80056fc:	4618      	mov	r0, r3
 80056fe:	f004 f883 	bl	8009808 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	bf14      	ite	ne
 8005708:	2301      	movne	r3, #1
 800570a:	2300      	moveq	r3, #0
 800570c:	b2db      	uxtb	r3, r3
  }
 800570e:	4618      	mov	r0, r3
 8005710:	3708      	adds	r7, #8
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <_ZNK6tflite10RNNOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 8005716:	b580      	push	{r7, lr}
 8005718:	b082      	sub	sp, #8
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	2104      	movs	r1, #4
 8005724:	4618      	mov	r0, r3
 8005726:	f004 f8cc 	bl	80098c2 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 800572a:	4603      	mov	r3, r0
 800572c:	b2db      	uxtb	r3, r3
  }
 800572e:	4618      	mov	r0, r3
 8005730:	3708      	adds	r7, #8
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}

08005736 <_ZNK6tflite10RNNOptions26asymmetric_quantize_inputsEv>:
  bool asymmetric_quantize_inputs() const {
 8005736:	b580      	push	{r7, lr}
 8005738:	b082      	sub	sp, #8
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	2106      	movs	r1, #6
 8005744:	4618      	mov	r0, r3
 8005746:	f004 f85f 	bl	8009808 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 800574a:	4603      	mov	r3, r0
 800574c:	2b00      	cmp	r3, #0
 800574e:	bf14      	ite	ne
 8005750:	2301      	movne	r3, #1
 8005752:	2300      	moveq	r3, #0
 8005754:	b2db      	uxtb	r3, r3
  }
 8005756:	4618      	mov	r0, r3
 8005758:	3708      	adds	r7, #8
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <_ZNK6tflite18SequenceRNNOptions10time_majorEv>:
  bool time_major() const {
 800575e:	b580      	push	{r7, lr}
 8005760:	b082      	sub	sp, #8
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_TIME_MAJOR, 0) != 0;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	2104      	movs	r1, #4
 800576c:	4618      	mov	r0, r3
 800576e:	f004 f84b 	bl	8009808 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	bf14      	ite	ne
 8005778:	2301      	movne	r3, #1
 800577a:	2300      	moveq	r3, #0
 800577c:	b2db      	uxtb	r3, r3
  }
 800577e:	4618      	mov	r0, r3
 8005780:	3708      	adds	r7, #8
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <_ZNK6tflite18SequenceRNNOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 8005786:	b580      	push	{r7, lr}
 8005788:	b082      	sub	sp, #8
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	2106      	movs	r1, #6
 8005794:	4618      	mov	r0, r3
 8005796:	f004 f894 	bl	80098c2 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 800579a:	4603      	mov	r3, r0
 800579c:	b2db      	uxtb	r3, r3
  }
 800579e:	4618      	mov	r0, r3
 80057a0:	3708      	adds	r7, #8
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <_ZNK6tflite18SequenceRNNOptions26asymmetric_quantize_inputsEv>:
  bool asymmetric_quantize_inputs() const {
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b082      	sub	sp, #8
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	2108      	movs	r1, #8
 80057b4:	4618      	mov	r0, r3
 80057b6:	f004 f827 	bl	8009808 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	bf14      	ite	ne
 80057c0:	2301      	movne	r3, #1
 80057c2:	2300      	moveq	r3, #0
 80057c4:	b2db      	uxtb	r3, r3
  }
 80057c6:	4618      	mov	r0, r3
 80057c8:	3708      	adds	r7, #8
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <_ZNK6tflite31BidirectionalSequenceRNNOptions10time_majorEv>:
  bool time_major() const {
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b082      	sub	sp, #8
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_TIME_MAJOR, 0) != 0;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	2104      	movs	r1, #4
 80057dc:	4618      	mov	r0, r3
 80057de:	f004 f813 	bl	8009808 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	bf14      	ite	ne
 80057e8:	2301      	movne	r3, #1
 80057ea:	2300      	moveq	r3, #0
 80057ec:	b2db      	uxtb	r3, r3
  }
 80057ee:	4618      	mov	r0, r3
 80057f0:	3708      	adds	r7, #8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <_ZNK6tflite31BidirectionalSequenceRNNOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b082      	sub	sp, #8
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	2106      	movs	r1, #6
 8005804:	4618      	mov	r0, r3
 8005806:	f004 f85c 	bl	80098c2 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 800580a:	4603      	mov	r3, r0
 800580c:	b2db      	uxtb	r3, r3
  }
 800580e:	4618      	mov	r0, r3
 8005810:	3708      	adds	r7, #8
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <_ZNK6tflite31BidirectionalSequenceRNNOptions13merge_outputsEv>:
  bool merge_outputs() const {
 8005816:	b580      	push	{r7, lr}
 8005818:	b082      	sub	sp, #8
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_MERGE_OUTPUTS, 0) != 0;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	2108      	movs	r1, #8
 8005824:	4618      	mov	r0, r3
 8005826:	f003 ffef 	bl	8009808 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	bf14      	ite	ne
 8005830:	2301      	movne	r3, #1
 8005832:	2300      	moveq	r3, #0
 8005834:	b2db      	uxtb	r3, r3
  }
 8005836:	4618      	mov	r0, r3
 8005838:	3708      	adds	r7, #8
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}

0800583e <_ZNK6tflite31BidirectionalSequenceRNNOptions26asymmetric_quantize_inputsEv>:
  bool asymmetric_quantize_inputs() const {
 800583e:	b580      	push	{r7, lr}
 8005840:	b082      	sub	sp, #8
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	210a      	movs	r1, #10
 800584c:	4618      	mov	r0, r3
 800584e:	f003 ffdb 	bl	8009808 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	bf14      	ite	ne
 8005858:	2301      	movne	r3, #1
 800585a:	2300      	moveq	r3, #0
 800585c:	b2db      	uxtb	r3, r3
  }
 800585e:	4618      	mov	r0, r3
 8005860:	3708      	adds	r7, #8
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}

08005866 <_ZNK6tflite21FullyConnectedOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 8005866:	b580      	push	{r7, lr}
 8005868:	b082      	sub	sp, #8
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	2104      	movs	r1, #4
 8005874:	4618      	mov	r0, r3
 8005876:	f004 f824 	bl	80098c2 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 800587a:	4603      	mov	r3, r0
 800587c:	b2db      	uxtb	r3, r3
  }
 800587e:	4618      	mov	r0, r3
 8005880:	3708      	adds	r7, #8
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}

08005886 <_ZNK6tflite21FullyConnectedOptions14weights_formatEv>:
  tflite::FullyConnectedOptionsWeightsFormat weights_format() const {
 8005886:	b580      	push	{r7, lr}
 8005888:	b082      	sub	sp, #8
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::FullyConnectedOptionsWeightsFormat>(GetField<int8_t>(VT_WEIGHTS_FORMAT, 0));
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	2106      	movs	r1, #6
 8005894:	4618      	mov	r0, r3
 8005896:	f004 f814 	bl	80098c2 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 800589a:	4603      	mov	r3, r0
 800589c:	b2db      	uxtb	r3, r3
  }
 800589e:	4618      	mov	r0, r3
 80058a0:	3708      	adds	r7, #8
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <_ZNK6tflite21FullyConnectedOptions13keep_num_dimsEv>:
  bool keep_num_dims() const {
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b082      	sub	sp, #8
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_KEEP_NUM_DIMS, 0) != 0;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	2108      	movs	r1, #8
 80058b4:	4618      	mov	r0, r3
 80058b6:	f003 ffa7 	bl	8009808 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	bf14      	ite	ne
 80058c0:	2301      	movne	r3, #1
 80058c2:	2300      	moveq	r3, #0
 80058c4:	b2db      	uxtb	r3, r3
  }
 80058c6:	4618      	mov	r0, r3
 80058c8:	3708      	adds	r7, #8
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <_ZNK6tflite21FullyConnectedOptions26asymmetric_quantize_inputsEv>:
  bool asymmetric_quantize_inputs() const {
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b082      	sub	sp, #8
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	210a      	movs	r1, #10
 80058dc:	4618      	mov	r0, r3
 80058de:	f003 ff93 	bl	8009808 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	bf14      	ite	ne
 80058e8:	2301      	movne	r3, #1
 80058ea:	2300      	moveq	r3, #0
 80058ec:	b2db      	uxtb	r3, r3
  }
 80058ee:	4618      	mov	r0, r3
 80058f0:	3708      	adds	r7, #8
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
	...

080058f8 <_ZNK6tflite14SoftmaxOptions4betaEv>:
  float beta() const {
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
    return GetField<float>(VT_BETA, 0.0f);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	ed9f 0a06 	vldr	s0, [pc, #24]	; 800591c <_ZNK6tflite14SoftmaxOptions4betaEv+0x24>
 8005906:	2104      	movs	r1, #4
 8005908:	4618      	mov	r0, r3
 800590a:	f003 fffa 	bl	8009902 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
 800590e:	eef0 7a40 	vmov.f32	s15, s0
  }
 8005912:	eeb0 0a67 	vmov.f32	s0, s15
 8005916:	3708      	adds	r7, #8
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}
 800591c:	00000000 	.word	0x00000000

08005920 <_ZNK6tflite20ConcatenationOptions4axisEv>:
  int32_t axis() const {
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_AXIS, 0);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	2104      	movs	r1, #4
 800592e:	4618      	mov	r0, r3
 8005930:	f003 ff99 	bl	8009866 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8005934:	4603      	mov	r3, r0
  }
 8005936:	4618      	mov	r0, r3
 8005938:	3708      	adds	r7, #8
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <_ZNK6tflite20ConcatenationOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 800593e:	b580      	push	{r7, lr}
 8005940:	b082      	sub	sp, #8
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	2106      	movs	r1, #6
 800594c:	4618      	mov	r0, r3
 800594e:	f003 ffb8 	bl	80098c2 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8005952:	4603      	mov	r3, r0
 8005954:	b2db      	uxtb	r3, r3
  }
 8005956:	4618      	mov	r0, r3
 8005958:	3708      	adds	r7, #8
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <_ZNK6tflite10AddOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 800595e:	b580      	push	{r7, lr}
 8005960:	b082      	sub	sp, #8
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	2104      	movs	r1, #4
 800596c:	4618      	mov	r0, r3
 800596e:	f003 ffa8 	bl	80098c2 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8005972:	4603      	mov	r3, r0
 8005974:	b2db      	uxtb	r3, r3
  }
 8005976:	4618      	mov	r0, r3
 8005978:	3708      	adds	r7, #8
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}

0800597e <_ZNK6tflite10MulOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 800597e:	b580      	push	{r7, lr}
 8005980:	b082      	sub	sp, #8
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	2104      	movs	r1, #4
 800598c:	4618      	mov	r0, r3
 800598e:	f003 ff98 	bl	80098c2 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8005992:	4603      	mov	r3, r0
 8005994:	b2db      	uxtb	r3, r3
  }
 8005996:	4618      	mov	r0, r3
 8005998:	3708      	adds	r7, #8
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <_ZNK6tflite13L2NormOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 800599e:	b580      	push	{r7, lr}
 80059a0:	b082      	sub	sp, #8
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	2104      	movs	r1, #4
 80059ac:	4618      	mov	r0, r3
 80059ae:	f003 ff88 	bl	80098c2 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 80059b2:	4603      	mov	r3, r0
 80059b4:	b2db      	uxtb	r3, r3
  }
 80059b6:	4618      	mov	r0, r3
 80059b8:	3708      	adds	r7, #8
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}

080059be <_ZNK6tflite33LocalResponseNormalizationOptions6radiusEv>:
  int32_t radius() const {
 80059be:	b580      	push	{r7, lr}
 80059c0:	b082      	sub	sp, #8
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_RADIUS, 0);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	2104      	movs	r1, #4
 80059cc:	4618      	mov	r0, r3
 80059ce:	f003 ff4a 	bl	8009866 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 80059d2:	4603      	mov	r3, r0
  }
 80059d4:	4618      	mov	r0, r3
 80059d6:	3708      	adds	r7, #8
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <_ZNK6tflite33LocalResponseNormalizationOptions4biasEv>:
  float bias() const {
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
    return GetField<float>(VT_BIAS, 0.0f);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8005a00 <_ZNK6tflite33LocalResponseNormalizationOptions4biasEv+0x24>
 80059ea:	2106      	movs	r1, #6
 80059ec:	4618      	mov	r0, r3
 80059ee:	f003 ff88 	bl	8009902 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
 80059f2:	eef0 7a40 	vmov.f32	s15, s0
  }
 80059f6:	eeb0 0a67 	vmov.f32	s0, s15
 80059fa:	3708      	adds	r7, #8
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	00000000 	.word	0x00000000

08005a04 <_ZNK6tflite33LocalResponseNormalizationOptions5alphaEv>:
  float alpha() const {
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
    return GetField<float>(VT_ALPHA, 0.0f);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8005a28 <_ZNK6tflite33LocalResponseNormalizationOptions5alphaEv+0x24>
 8005a12:	2108      	movs	r1, #8
 8005a14:	4618      	mov	r0, r3
 8005a16:	f003 ff74 	bl	8009902 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
 8005a1a:	eef0 7a40 	vmov.f32	s15, s0
  }
 8005a1e:	eeb0 0a67 	vmov.f32	s0, s15
 8005a22:	3708      	adds	r7, #8
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	00000000 	.word	0x00000000

08005a2c <_ZNK6tflite33LocalResponseNormalizationOptions4betaEv>:
  float beta() const {
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
    return GetField<float>(VT_BETA, 0.0f);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8005a50 <_ZNK6tflite33LocalResponseNormalizationOptions4betaEv+0x24>
 8005a3a:	210a      	movs	r1, #10
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f003 ff60 	bl	8009902 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
 8005a42:	eef0 7a40 	vmov.f32	s15, s0
  }
 8005a46:	eeb0 0a67 	vmov.f32	s0, s15
 8005a4a:	3708      	adds	r7, #8
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	00000000 	.word	0x00000000

08005a54 <_ZNK6tflite11LSTMOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b082      	sub	sp, #8
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	2104      	movs	r1, #4
 8005a62:	4618      	mov	r0, r3
 8005a64:	f003 ff2d 	bl	80098c2 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	b2db      	uxtb	r3, r3
  }
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3708      	adds	r7, #8
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <_ZNK6tflite11LSTMOptions9cell_clipEv>:
  float cell_clip() const {
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
    return GetField<float>(VT_CELL_CLIP, 0.0f);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8005a98 <_ZNK6tflite11LSTMOptions9cell_clipEv+0x24>
 8005a82:	2106      	movs	r1, #6
 8005a84:	4618      	mov	r0, r3
 8005a86:	f003 ff3c 	bl	8009902 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
 8005a8a:	eef0 7a40 	vmov.f32	s15, s0
  }
 8005a8e:	eeb0 0a67 	vmov.f32	s0, s15
 8005a92:	3708      	adds	r7, #8
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	00000000 	.word	0x00000000

08005a9c <_ZNK6tflite11LSTMOptions9proj_clipEv>:
  float proj_clip() const {
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
    return GetField<float>(VT_PROJ_CLIP, 0.0f);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8005ac0 <_ZNK6tflite11LSTMOptions9proj_clipEv+0x24>
 8005aaa:	2108      	movs	r1, #8
 8005aac:	4618      	mov	r0, r3
 8005aae:	f003 ff28 	bl	8009902 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
 8005ab2:	eef0 7a40 	vmov.f32	s15, s0
  }
 8005ab6:	eeb0 0a67 	vmov.f32	s0, s15
 8005aba:	3708      	adds	r7, #8
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	00000000 	.word	0x00000000

08005ac4 <_ZNK6tflite11LSTMOptions11kernel_typeEv>:
  tflite::LSTMKernelType kernel_type() const {
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::LSTMKernelType>(GetField<int8_t>(VT_KERNEL_TYPE, 0));
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	210a      	movs	r1, #10
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f003 fef5 	bl	80098c2 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	b2db      	uxtb	r3, r3
  }
 8005adc:	4618      	mov	r0, r3
 8005ade:	3708      	adds	r7, #8
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <_ZNK6tflite11LSTMOptions26asymmetric_quantize_inputsEv>:
  bool asymmetric_quantize_inputs() const {
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	210c      	movs	r1, #12
 8005af2:	4618      	mov	r0, r3
 8005af4:	f003 fe88 	bl	8009808 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	bf14      	ite	ne
 8005afe:	2301      	movne	r3, #1
 8005b00:	2300      	moveq	r3, #0
 8005b02:	b2db      	uxtb	r3, r3
  }
 8005b04:	4618      	mov	r0, r3
 8005b06:	3708      	adds	r7, #8
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <_ZNK6tflite33UnidirectionalSequenceLSTMOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	2104      	movs	r1, #4
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f003 fed1 	bl	80098c2 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8005b20:	4603      	mov	r3, r0
 8005b22:	b2db      	uxtb	r3, r3
  }
 8005b24:	4618      	mov	r0, r3
 8005b26:	3708      	adds	r7, #8
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <_ZNK6tflite33UnidirectionalSequenceLSTMOptions9cell_clipEv>:
  float cell_clip() const {
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
    return GetField<float>(VT_CELL_CLIP, 0.0f);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8005b50 <_ZNK6tflite33UnidirectionalSequenceLSTMOptions9cell_clipEv+0x24>
 8005b3a:	2106      	movs	r1, #6
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f003 fee0 	bl	8009902 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
 8005b42:	eef0 7a40 	vmov.f32	s15, s0
  }
 8005b46:	eeb0 0a67 	vmov.f32	s0, s15
 8005b4a:	3708      	adds	r7, #8
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	00000000 	.word	0x00000000

08005b54 <_ZNK6tflite33UnidirectionalSequenceLSTMOptions9proj_clipEv>:
  float proj_clip() const {
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
    return GetField<float>(VT_PROJ_CLIP, 0.0f);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8005b78 <_ZNK6tflite33UnidirectionalSequenceLSTMOptions9proj_clipEv+0x24>
 8005b62:	2108      	movs	r1, #8
 8005b64:	4618      	mov	r0, r3
 8005b66:	f003 fecc 	bl	8009902 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
 8005b6a:	eef0 7a40 	vmov.f32	s15, s0
  }
 8005b6e:	eeb0 0a67 	vmov.f32	s0, s15
 8005b72:	3708      	adds	r7, #8
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	00000000 	.word	0x00000000

08005b7c <_ZNK6tflite33UnidirectionalSequenceLSTMOptions10time_majorEv>:
  bool time_major() const {
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_TIME_MAJOR, 0) != 0;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	210a      	movs	r1, #10
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f003 fe3c 	bl	8009808 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	bf14      	ite	ne
 8005b96:	2301      	movne	r3, #1
 8005b98:	2300      	moveq	r3, #0
 8005b9a:	b2db      	uxtb	r3, r3
  }
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3708      	adds	r7, #8
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <_ZNK6tflite33UnidirectionalSequenceLSTMOptions26asymmetric_quantize_inputsEv>:
  bool asymmetric_quantize_inputs() const {
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b082      	sub	sp, #8
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	210c      	movs	r1, #12
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f003 fe28 	bl	8009808 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	bf14      	ite	ne
 8005bbe:	2301      	movne	r3, #1
 8005bc0:	2300      	moveq	r3, #0
 8005bc2:	b2db      	uxtb	r3, r3
  }
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3708      	adds	r7, #8
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <_ZNK6tflite32BidirectionalSequenceLSTMOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	2104      	movs	r1, #4
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f003 fe71 	bl	80098c2 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8005be0:	4603      	mov	r3, r0
 8005be2:	b2db      	uxtb	r3, r3
  }
 8005be4:	4618      	mov	r0, r3
 8005be6:	3708      	adds	r7, #8
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <_ZNK6tflite32BidirectionalSequenceLSTMOptions9cell_clipEv>:
  float cell_clip() const {
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
    return GetField<float>(VT_CELL_CLIP, 0.0f);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8005c10 <_ZNK6tflite32BidirectionalSequenceLSTMOptions9cell_clipEv+0x24>
 8005bfa:	2106      	movs	r1, #6
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f003 fe80 	bl	8009902 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
 8005c02:	eef0 7a40 	vmov.f32	s15, s0
  }
 8005c06:	eeb0 0a67 	vmov.f32	s0, s15
 8005c0a:	3708      	adds	r7, #8
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	00000000 	.word	0x00000000

08005c14 <_ZNK6tflite32BidirectionalSequenceLSTMOptions9proj_clipEv>:
  float proj_clip() const {
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
    return GetField<float>(VT_PROJ_CLIP, 0.0f);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8005c38 <_ZNK6tflite32BidirectionalSequenceLSTMOptions9proj_clipEv+0x24>
 8005c22:	2108      	movs	r1, #8
 8005c24:	4618      	mov	r0, r3
 8005c26:	f003 fe6c 	bl	8009902 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
 8005c2a:	eef0 7a40 	vmov.f32	s15, s0
  }
 8005c2e:	eeb0 0a67 	vmov.f32	s0, s15
 8005c32:	3708      	adds	r7, #8
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	00000000 	.word	0x00000000

08005c3c <_ZNK6tflite32BidirectionalSequenceLSTMOptions13merge_outputsEv>:
  bool merge_outputs() const {
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_MERGE_OUTPUTS, 0) != 0;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	210a      	movs	r1, #10
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f003 fddc 	bl	8009808 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	bf14      	ite	ne
 8005c56:	2301      	movne	r3, #1
 8005c58:	2300      	moveq	r3, #0
 8005c5a:	b2db      	uxtb	r3, r3
  }
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3708      	adds	r7, #8
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <_ZNK6tflite32BidirectionalSequenceLSTMOptions10time_majorEv>:
  bool time_major() const {
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_TIME_MAJOR, 1) != 0;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	210c      	movs	r1, #12
 8005c72:	4618      	mov	r0, r3
 8005c74:	f003 fdc8 	bl	8009808 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	bf14      	ite	ne
 8005c7e:	2301      	movne	r3, #1
 8005c80:	2300      	moveq	r3, #0
 8005c82:	b2db      	uxtb	r3, r3
  }
 8005c84:	4618      	mov	r0, r3
 8005c86:	3708      	adds	r7, #8
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <_ZNK6tflite32BidirectionalSequenceLSTMOptions26asymmetric_quantize_inputsEv>:
  bool asymmetric_quantize_inputs() const {
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	210e      	movs	r1, #14
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f003 fdb4 	bl	8009808 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	bf14      	ite	ne
 8005ca6:	2301      	movne	r3, #1
 8005ca8:	2300      	moveq	r3, #0
 8005caa:	b2db      	uxtb	r3, r3
  }
 8005cac:	4618      	mov	r0, r3
 8005cae:	3708      	adds	r7, #8
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <_ZNK6tflite21ResizeBilinearOptions13align_cornersEv>:
  bool align_corners() const {
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b082      	sub	sp, #8
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_ALIGN_CORNERS, 0) != 0;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	2108      	movs	r1, #8
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f003 fda0 	bl	8009808 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	bf14      	ite	ne
 8005cce:	2301      	movne	r3, #1
 8005cd0:	2300      	moveq	r3, #0
 8005cd2:	b2db      	uxtb	r3, r3
  }
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3708      	adds	r7, #8
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <_ZNK6tflite21ResizeBilinearOptions18half_pixel_centersEv>:
  bool half_pixel_centers() const {
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_HALF_PIXEL_CENTERS, 0) != 0;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	210a      	movs	r1, #10
 8005cea:	4618      	mov	r0, r3
 8005cec:	f003 fd8c 	bl	8009808 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	bf14      	ite	ne
 8005cf6:	2301      	movne	r3, #1
 8005cf8:	2300      	moveq	r3, #0
 8005cfa:	b2db      	uxtb	r3, r3
  }
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3708      	adds	r7, #8
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <_ZNK6tflite28ResizeNearestNeighborOptions13align_cornersEv>:
  bool align_corners() const {
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_ALIGN_CORNERS, 0) != 0;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	2104      	movs	r1, #4
 8005d12:	4618      	mov	r0, r3
 8005d14:	f003 fd78 	bl	8009808 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	bf14      	ite	ne
 8005d1e:	2301      	movne	r3, #1
 8005d20:	2300      	moveq	r3, #0
 8005d22:	b2db      	uxtb	r3, r3
  }
 8005d24:	4618      	mov	r0, r3
 8005d26:	3708      	adds	r7, #8
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <_ZNK6tflite28ResizeNearestNeighborOptions18half_pixel_centersEv>:
  bool half_pixel_centers() const {
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_HALF_PIXEL_CENTERS, 0) != 0;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	2106      	movs	r1, #6
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f003 fd64 	bl	8009808 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	bf14      	ite	ne
 8005d46:	2301      	movne	r3, #1
 8005d48:	2300      	moveq	r3, #0
 8005d4a:	b2db      	uxtb	r3, r3
  }
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3708      	adds	r7, #8
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <_ZNK6tflite14ReshapeOptions9new_shapeEv>:
  const flatbuffers::Vector<int32_t> *new_shape() const {
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b082      	sub	sp, #8
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_NEW_SHAPE);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2104      	movs	r1, #4
 8005d60:	4618      	mov	r0, r3
 8005d62:	f003 fd9e 	bl	80098a2 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8005d66:	4603      	mov	r3, r0
  }
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3708      	adds	r7, #8
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <_ZNK6tflite15SkipGramOptions10ngram_sizeEv>:
  int32_t ngram_size() const {
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_NGRAM_SIZE, 0);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	2104      	movs	r1, #4
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f003 fd71 	bl	8009866 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8005d84:	4603      	mov	r3, r0
  }
 8005d86:	4618      	mov	r0, r3
 8005d88:	3708      	adds	r7, #8
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <_ZNK6tflite15SkipGramOptions13max_skip_sizeEv>:
  int32_t max_skip_size() const {
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b082      	sub	sp, #8
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_MAX_SKIP_SIZE, 0);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	2106      	movs	r1, #6
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f003 fd62 	bl	8009866 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8005da2:	4603      	mov	r3, r0
  }
 8005da4:	4618      	mov	r0, r3
 8005da6:	3708      	adds	r7, #8
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <_ZNK6tflite15SkipGramOptions18include_all_ngramsEv>:
  bool include_all_ngrams() const {
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_INCLUDE_ALL_NGRAMS, 0) != 0;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	2108      	movs	r1, #8
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f003 fd24 	bl	8009808 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	bf14      	ite	ne
 8005dc6:	2301      	movne	r3, #1
 8005dc8:	2300      	moveq	r3, #0
 8005dca:	b2db      	uxtb	r3, r3
  }
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3708      	adds	r7, #8
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <_ZNK6tflite19SpaceToDepthOptions10block_sizeEv>:
  int32_t block_size() const {
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_BLOCK_SIZE, 0);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	2104      	movs	r1, #4
 8005de2:	4618      	mov	r0, r3
 8005de4:	f003 fd3f 	bl	8009866 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8005de8:	4603      	mov	r3, r0
  }
 8005dea:	4618      	mov	r0, r3
 8005dec:	3708      	adds	r7, #8
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <_ZNK6tflite19DepthToSpaceOptions10block_sizeEv>:
  int32_t block_size() const {
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b082      	sub	sp, #8
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_BLOCK_SIZE, 0);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	2104      	movs	r1, #4
 8005e00:	4618      	mov	r0, r3
 8005e02:	f003 fd30 	bl	8009866 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8005e06:	4603      	mov	r3, r0
  }
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3708      	adds	r7, #8
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <_ZNK6tflite10SubOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	2104      	movs	r1, #4
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f003 fd4f 	bl	80098c2 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8005e24:	4603      	mov	r3, r0
 8005e26:	b2db      	uxtb	r3, r3
  }
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3708      	adds	r7, #8
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <_ZNK6tflite10DivOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	2104      	movs	r1, #4
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f003 fd3f 	bl	80098c2 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8005e44:	4603      	mov	r3, r0
 8005e46:	b2db      	uxtb	r3, r3
  }
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3708      	adds	r7, #8
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <_ZNK6tflite28EmbeddingLookupSparseOptions8combinerEv>:
  tflite::CombinerType combiner() const {
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::CombinerType>(GetField<int8_t>(VT_COMBINER, 0));
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	2104      	movs	r1, #4
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f003 fd2f 	bl	80098c2 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8005e64:	4603      	mov	r3, r0
 8005e66:	b2db      	uxtb	r3, r3
  }
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3708      	adds	r7, #8
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <_ZNK6tflite13GatherOptions4axisEv>:
  int32_t axis() const {
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_AXIS, 0);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	2104      	movs	r1, #4
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f003 fcf1 	bl	8009866 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8005e84:	4603      	mov	r3, r0
  }
 8005e86:	4618      	mov	r0, r3
 8005e88:	3708      	adds	r7, #8
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <_ZNK6tflite14ReducerOptions9keep_dimsEv>:
  bool keep_dims() const {
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b082      	sub	sp, #8
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_KEEP_DIMS, 0) != 0;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	2104      	movs	r1, #4
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f003 fcb3 	bl	8009808 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	bf14      	ite	ne
 8005ea8:	2301      	movne	r3, #1
 8005eaa:	2300      	moveq	r3, #0
 8005eac:	b2db      	uxtb	r3, r3
  }
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3708      	adds	r7, #8
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}

08005eb6 <_ZNK6tflite14SqueezeOptions12squeeze_dimsEv>:
  const flatbuffers::Vector<int32_t> *squeeze_dims() const {
 8005eb6:	b580      	push	{r7, lr}
 8005eb8:	b082      	sub	sp, #8
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_SQUEEZE_DIMS);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2104      	movs	r1, #4
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f003 fced 	bl	80098a2 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8005ec8:	4603      	mov	r3, r0
  }
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3708      	adds	r7, #8
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}

08005ed2 <_ZNK6tflite12SplitOptions10num_splitsEv>:
  int32_t num_splits() const {
 8005ed2:	b580      	push	{r7, lr}
 8005ed4:	b082      	sub	sp, #8
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_NUM_SPLITS, 0);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	2104      	movs	r1, #4
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f003 fcc0 	bl	8009866 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8005ee6:	4603      	mov	r3, r0
  }
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3708      	adds	r7, #8
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <_ZNK6tflite13SplitVOptions10num_splitsEv>:
  int32_t num_splits() const {
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_NUM_SPLITS, 0);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	2104      	movs	r1, #4
 8005efe:	4618      	mov	r0, r3
 8005f00:	f003 fcb1 	bl	8009866 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8005f04:	4603      	mov	r3, r0
  }
 8005f06:	4618      	mov	r0, r3
 8005f08:	3708      	adds	r7, #8
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}

08005f0e <_ZNK6tflite19StridedSliceOptions10begin_maskEv>:
  int32_t begin_mask() const {
 8005f0e:	b580      	push	{r7, lr}
 8005f10:	b082      	sub	sp, #8
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_BEGIN_MASK, 0);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	2104      	movs	r1, #4
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f003 fca2 	bl	8009866 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8005f22:	4603      	mov	r3, r0
  }
 8005f24:	4618      	mov	r0, r3
 8005f26:	3708      	adds	r7, #8
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <_ZNK6tflite19StridedSliceOptions8end_maskEv>:
  int32_t end_mask() const {
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b082      	sub	sp, #8
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_END_MASK, 0);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	2106      	movs	r1, #6
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f003 fc93 	bl	8009866 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8005f40:	4603      	mov	r3, r0
  }
 8005f42:	4618      	mov	r0, r3
 8005f44:	3708      	adds	r7, #8
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <_ZNK6tflite19StridedSliceOptions13ellipsis_maskEv>:
  int32_t ellipsis_mask() const {
 8005f4a:	b580      	push	{r7, lr}
 8005f4c:	b082      	sub	sp, #8
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_ELLIPSIS_MASK, 0);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	2108      	movs	r1, #8
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f003 fc84 	bl	8009866 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8005f5e:	4603      	mov	r3, r0
  }
 8005f60:	4618      	mov	r0, r3
 8005f62:	3708      	adds	r7, #8
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <_ZNK6tflite19StridedSliceOptions13new_axis_maskEv>:
  int32_t new_axis_mask() const {
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_NEW_AXIS_MASK, 0);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	210a      	movs	r1, #10
 8005f76:	4618      	mov	r0, r3
 8005f78:	f003 fc75 	bl	8009866 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8005f7c:	4603      	mov	r3, r0
  }
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3708      	adds	r7, #8
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}

08005f86 <_ZNK6tflite19StridedSliceOptions16shrink_axis_maskEv>:
  int32_t shrink_axis_mask() const {
 8005f86:	b580      	push	{r7, lr}
 8005f88:	b082      	sub	sp, #8
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_SHRINK_AXIS_MASK, 0);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	210c      	movs	r1, #12
 8005f94:	4618      	mov	r0, r3
 8005f96:	f003 fc66 	bl	8009866 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8005f9a:	4603      	mov	r3, r0
  }
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3708      	adds	r7, #8
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <_ZNK6tflite11CastOptions12in_data_typeEv>:
  tflite::TensorType in_data_type() const {
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_IN_DATA_TYPE, 0));
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	2104      	movs	r1, #4
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f003 fc85 	bl	80098c2 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	b2db      	uxtb	r3, r3
  }
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3708      	adds	r7, #8
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <_ZNK6tflite11CastOptions13out_data_typeEv>:
  tflite::TensorType out_data_type() const {
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b082      	sub	sp, #8
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_OUT_DATA_TYPE, 0));
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	2106      	movs	r1, #6
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f003 fc75 	bl	80098c2 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	b2db      	uxtb	r3, r3
  }
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3708      	adds	r7, #8
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <_ZNK6tflite13ArgMaxOptions11output_typeEv>:
  tflite::TensorType output_type() const {
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_OUTPUT_TYPE, 0));
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	2104      	movs	r1, #4
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f003 fc65 	bl	80098c2 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	b2db      	uxtb	r3, r3
  }
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3708      	adds	r7, #8
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <_ZNK6tflite13ArgMinOptions11output_typeEv>:
  tflite::TensorType output_type() const {
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_OUTPUT_TYPE, 0));
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	2104      	movs	r1, #4
 8006012:	4618      	mov	r0, r3
 8006014:	f003 fc55 	bl	80098c2 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8006018:	4603      	mov	r3, r0
 800601a:	b2db      	uxtb	r3, r3
  }
 800601c:	4618      	mov	r0, r3
 800601e:	3708      	adds	r7, #8
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <_ZNK6tflite20TransposeConvOptions7paddingEv>:
  tflite::Padding padding() const {
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	2104      	movs	r1, #4
 8006032:	4618      	mov	r0, r3
 8006034:	f003 fc45 	bl	80098c2 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8006038:	4603      	mov	r3, r0
 800603a:	b2db      	uxtb	r3, r3
  }
 800603c:	4618      	mov	r0, r3
 800603e:	3708      	adds	r7, #8
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <_ZNK6tflite20TransposeConvOptions8stride_wEv>:
  int32_t stride_w() const {
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_W, 0);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	2106      	movs	r1, #6
 8006052:	4618      	mov	r0, r3
 8006054:	f003 fc07 	bl	8009866 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8006058:	4603      	mov	r3, r0
  }
 800605a:	4618      	mov	r0, r3
 800605c:	3708      	adds	r7, #8
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}

08006062 <_ZNK6tflite20TransposeConvOptions8stride_hEv>:
  int32_t stride_h() const {
 8006062:	b580      	push	{r7, lr}
 8006064:	b082      	sub	sp, #8
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_H, 0);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	2108      	movs	r1, #8
 8006070:	4618      	mov	r0, r3
 8006072:	f003 fbf8 	bl	8009866 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8006076:	4603      	mov	r3, r0
  }
 8006078:	4618      	mov	r0, r3
 800607a:	3708      	adds	r7, #8
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <_ZNK6tflite20SparseToDenseOptions16validate_indicesEv>:
  bool validate_indices() const {
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_VALIDATE_INDICES, 0) != 0;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	2104      	movs	r1, #4
 800608e:	4618      	mov	r0, r3
 8006090:	f003 fbba 	bl	8009808 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	bf14      	ite	ne
 800609a:	2301      	movne	r3, #1
 800609c:	2300      	moveq	r3, #0
 800609e:	b2db      	uxtb	r3, r3
  }
 80060a0:	4618      	mov	r0, r3
 80060a2:	3708      	adds	r7, #8
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <_ZNK6tflite12ShapeOptions8out_typeEv>:
  tflite::TensorType out_type() const {
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_OUT_TYPE, 0));
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	2104      	movs	r1, #4
 80060b6:	4618      	mov	r0, r3
 80060b8:	f003 fc03 	bl	80098c2 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 80060bc:	4603      	mov	r3, r0
 80060be:	b2db      	uxtb	r3, r3
  }
 80060c0:	4618      	mov	r0, r3
 80060c2:	3708      	adds	r7, #8
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <_ZNK6tflite16FakeQuantOptions3minEv>:
  float min() const {
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
    return GetField<float>(VT_MIN, 0.0f);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80060ec <_ZNK6tflite16FakeQuantOptions3minEv+0x24>
 80060d6:	2104      	movs	r1, #4
 80060d8:	4618      	mov	r0, r3
 80060da:	f003 fc12 	bl	8009902 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
 80060de:	eef0 7a40 	vmov.f32	s15, s0
  }
 80060e2:	eeb0 0a67 	vmov.f32	s0, s15
 80060e6:	3708      	adds	r7, #8
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	00000000 	.word	0x00000000

080060f0 <_ZNK6tflite16FakeQuantOptions3maxEv>:
  float max() const {
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
    return GetField<float>(VT_MAX, 0.0f);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8006114 <_ZNK6tflite16FakeQuantOptions3maxEv+0x24>
 80060fe:	2106      	movs	r1, #6
 8006100:	4618      	mov	r0, r3
 8006102:	f003 fbfe 	bl	8009902 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
 8006106:	eef0 7a40 	vmov.f32	s15, s0
  }
 800610a:	eeb0 0a67 	vmov.f32	s0, s15
 800610e:	3708      	adds	r7, #8
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}
 8006114:	00000000 	.word	0x00000000

08006118 <_ZNK6tflite16FakeQuantOptions8num_bitsEv>:
  int32_t num_bits() const {
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_NUM_BITS, 0);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	2108      	movs	r1, #8
 8006126:	4618      	mov	r0, r3
 8006128:	f003 fb9d 	bl	8009866 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800612c:	4603      	mov	r3, r0
  }
 800612e:	4618      	mov	r0, r3
 8006130:	3708      	adds	r7, #8
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}

08006136 <_ZNK6tflite16FakeQuantOptions12narrow_rangeEv>:
  bool narrow_range() const {
 8006136:	b580      	push	{r7, lr}
 8006138:	b082      	sub	sp, #8
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_NARROW_RANGE, 0) != 0;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	210a      	movs	r1, #10
 8006144:	4618      	mov	r0, r3
 8006146:	f003 fb5f 	bl	8009808 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	bf14      	ite	ne
 8006150:	2301      	movne	r3, #1
 8006152:	2300      	moveq	r3, #0
 8006154:	b2db      	uxtb	r3, r3
  }
 8006156:	4618      	mov	r0, r3
 8006158:	3708      	adds	r7, #8
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}

0800615e <_ZNK6tflite11PackOptions12values_countEv>:
  int32_t values_count() const {
 800615e:	b580      	push	{r7, lr}
 8006160:	b082      	sub	sp, #8
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_VALUES_COUNT, 0);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	2104      	movs	r1, #4
 800616c:	4618      	mov	r0, r3
 800616e:	f003 fb7a 	bl	8009866 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8006172:	4603      	mov	r3, r0
  }
 8006174:	4618      	mov	r0, r3
 8006176:	3708      	adds	r7, #8
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <_ZNK6tflite11PackOptions4axisEv>:
  int32_t axis() const {
 800617c:	b580      	push	{r7, lr}
 800617e:	b082      	sub	sp, #8
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_AXIS, 0);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	2106      	movs	r1, #6
 800618a:	4618      	mov	r0, r3
 800618c:	f003 fb6b 	bl	8009866 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8006190:	4603      	mov	r3, r0
  }
 8006192:	4618      	mov	r0, r3
 8006194:	3708      	adds	r7, #8
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}

0800619a <_ZNK6tflite13OneHotOptions4axisEv>:
  int32_t axis() const {
 800619a:	b580      	push	{r7, lr}
 800619c:	b082      	sub	sp, #8
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_AXIS, 0);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	2104      	movs	r1, #4
 80061a8:	4618      	mov	r0, r3
 80061aa:	f003 fb5c 	bl	8009866 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 80061ae:	4603      	mov	r3, r0
  }
 80061b0:	4618      	mov	r0, r3
 80061b2:	3708      	adds	r7, #8
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <_ZNK6tflite13UnpackOptions3numEv>:
  int32_t num() const {
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_NUM, 0);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	2104      	movs	r1, #4
 80061c6:	4618      	mov	r0, r3
 80061c8:	f003 fb4d 	bl	8009866 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 80061cc:	4603      	mov	r3, r0
  }
 80061ce:	4618      	mov	r0, r3
 80061d0:	3708      	adds	r7, #8
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <_ZNK6tflite13UnpackOptions4axisEv>:
  int32_t axis() const {
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b082      	sub	sp, #8
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_AXIS, 0);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	2106      	movs	r1, #6
 80061e4:	4618      	mov	r0, r3
 80061e6:	f003 fb3e 	bl	8009866 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 80061ea:	4603      	mov	r3, r0
  }
 80061ec:	4618      	mov	r0, r3
 80061ee:	3708      	adds	r7, #8
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <_ZNK6tflite16LeakyReluOptions5alphaEv>:
  float alpha() const {
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b082      	sub	sp, #8
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
    return GetField<float>(VT_ALPHA, 0.0f);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8006218 <_ZNK6tflite16LeakyReluOptions5alphaEv+0x24>
 8006202:	2104      	movs	r1, #4
 8006204:	4618      	mov	r0, r3
 8006206:	f003 fb7c 	bl	8009902 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
 800620a:	eef0 7a40 	vmov.f32	s15, s0
  }
 800620e:	eeb0 0a67 	vmov.f32	s0, s15
 8006212:	3708      	adds	r7, #8
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}
 8006218:	00000000 	.word	0x00000000

0800621c <_ZNK6tflite16MirrorPadOptions4modeEv>:
  tflite::MirrorPadMode mode() const {
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::MirrorPadMode>(GetField<int8_t>(VT_MODE, 0));
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	2104      	movs	r1, #4
 800622a:	4618      	mov	r0, r3
 800622c:	f003 fb49 	bl	80098c2 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8006230:	4603      	mov	r3, r0
 8006232:	b2db      	uxtb	r3, r3
  }
 8006234:	4618      	mov	r0, r3
 8006236:	3708      	adds	r7, #8
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <_ZNK6tflite13UniqueOptions12idx_out_typeEv>:
  tflite::TensorType idx_out_type() const {
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_IDX_OUT_TYPE, 2));
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2202      	movs	r2, #2
 8006248:	2104      	movs	r1, #4
 800624a:	4618      	mov	r0, r3
 800624c:	f003 fb39 	bl	80098c2 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8006250:	4603      	mov	r3, r0
 8006252:	b2db      	uxtb	r3, r3
  }
 8006254:	4618      	mov	r0, r3
 8006256:	3708      	adds	r7, #8
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <_ZNK6tflite22ReverseSequenceOptions7seq_dimEv>:
  int32_t seq_dim() const {
 800625c:	b580      	push	{r7, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_SEQ_DIM, 0);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	2104      	movs	r1, #4
 800626a:	4618      	mov	r0, r3
 800626c:	f003 fafb 	bl	8009866 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8006270:	4603      	mov	r3, r0
  }
 8006272:	4618      	mov	r0, r3
 8006274:	3708      	adds	r7, #8
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <_ZNK6tflite22ReverseSequenceOptions9batch_dimEv>:
  int32_t batch_dim() const {
 800627a:	b580      	push	{r7, lr}
 800627c:	b082      	sub	sp, #8
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_BATCH_DIM, 0);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	2106      	movs	r1, #6
 8006288:	4618      	mov	r0, r3
 800628a:	f003 faec 	bl	8009866 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800628e:	4603      	mov	r3, r0
  }
 8006290:	4618      	mov	r0, r3
 8006292:	3708      	adds	r7, #8
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <_ZNK6tflite9IfOptions19then_subgraph_indexEv>:
  int32_t then_subgraph_index() const {
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_THEN_SUBGRAPH_INDEX, 0);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	2104      	movs	r1, #4
 80062a6:	4618      	mov	r0, r3
 80062a8:	f003 fadd 	bl	8009866 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 80062ac:	4603      	mov	r3, r0
  }
 80062ae:	4618      	mov	r0, r3
 80062b0:	3708      	adds	r7, #8
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}

080062b6 <_ZNK6tflite9IfOptions19else_subgraph_indexEv>:
  int32_t else_subgraph_index() const {
 80062b6:	b580      	push	{r7, lr}
 80062b8:	b082      	sub	sp, #8
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_ELSE_SUBGRAPH_INDEX, 0);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	2106      	movs	r1, #6
 80062c4:	4618      	mov	r0, r3
 80062c6:	f003 face 	bl	8009866 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 80062ca:	4603      	mov	r3, r0
  }
 80062cc:	4618      	mov	r0, r3
 80062ce:	3708      	adds	r7, #8
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <_ZNK6tflite12WhileOptions19cond_subgraph_indexEv>:
  int32_t cond_subgraph_index() const {
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b082      	sub	sp, #8
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_COND_SUBGRAPH_INDEX, 0);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	2104      	movs	r1, #4
 80062e2:	4618      	mov	r0, r3
 80062e4:	f003 fabf 	bl	8009866 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 80062e8:	4603      	mov	r3, r0
  }
 80062ea:	4618      	mov	r0, r3
 80062ec:	3708      	adds	r7, #8
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}

080062f2 <_ZNK6tflite12WhileOptions19body_subgraph_indexEv>:
  int32_t body_subgraph_index() const {
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b082      	sub	sp, #8
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_BODY_SUBGRAPH_INDEX, 0);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	2106      	movs	r1, #6
 8006300:	4618      	mov	r0, r3
 8006302:	f003 fab0 	bl	8009866 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8006306:	4603      	mov	r3, r0
  }
 8006308:	4618      	mov	r0, r3
 800630a:	3708      	adds	r7, #8
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <_ZNK6tflite18BatchMatMulOptions5adj_xEv>:
  bool adj_x() const {
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_ADJ_X, 0) != 0;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	2104      	movs	r1, #4
 800631e:	4618      	mov	r0, r3
 8006320:	f003 fa72 	bl	8009808 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	bf14      	ite	ne
 800632a:	2301      	movne	r3, #1
 800632c:	2300      	moveq	r3, #0
 800632e:	b2db      	uxtb	r3, r3
  }
 8006330:	4618      	mov	r0, r3
 8006332:	3708      	adds	r7, #8
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <_ZNK6tflite18BatchMatMulOptions5adj_yEv>:
  bool adj_y() const {
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_ADJ_Y, 0) != 0;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	2106      	movs	r1, #6
 8006346:	4618      	mov	r0, r3
 8006348:	f003 fa5e 	bl	8009808 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	bf14      	ite	ne
 8006352:	2301      	movne	r3, #1
 8006354:	2300      	moveq	r3, #0
 8006356:	b2db      	uxtb	r3, r3
  }
 8006358:	4618      	mov	r0, r3
 800635a:	3708      	adds	r7, #8
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <_ZNK6tflite8Operator20builtin_options_typeEv>:
  tflite::BuiltinOptions builtin_options_type() const {
 8006360:	b580      	push	{r7, lr}
 8006362:	b082      	sub	sp, #8
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::BuiltinOptions>(GetField<uint8_t>(VT_BUILTIN_OPTIONS_TYPE, 0));
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	210a      	movs	r1, #10
 800636e:	4618      	mov	r0, r3
 8006370:	f003 fa4a 	bl	8009808 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8006374:	4603      	mov	r3, r0
  }
 8006376:	4618      	mov	r0, r3
 8006378:	3708      	adds	r7, #8
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}

0800637e <_ZNK6tflite8Operator15builtin_optionsEv>:
  const void *builtin_options() const {
 800637e:	b580      	push	{r7, lr}
 8006380:	b082      	sub	sp, #8
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
    return GetPointer<const void *>(VT_BUILTIN_OPTIONS);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	210c      	movs	r1, #12
 800638a:	4618      	mov	r0, r3
 800638c:	f003 fa5b 	bl	8009846 <_ZNK11flatbuffers5Table10GetPointerIPKvEET_t>
 8006390:	4603      	mov	r3, r0
  }
 8006392:	4618      	mov	r0, r3
 8006394:	3708      	adds	r7, #8
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <_ZNK6tflite8Operator32builtin_options_as_Conv2DOptionsEv>:
  const tflite::Conv2DOptions *builtin_options_as_Conv2DOptions() const {
 800639a:	b580      	push	{r7, lr}
 800639c:	b082      	sub	sp, #8
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_Conv2DOptions ? static_cast<const tflite::Conv2DOptions *>(builtin_options()) : nullptr;
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f7ff ffdc 	bl	8006360 <_ZNK6tflite8Operator20builtin_options_typeEv>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d104      	bne.n	80063b8 <_ZNK6tflite8Operator32builtin_options_as_Conv2DOptionsEv+0x1e>
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f7ff ffe5 	bl	800637e <_ZNK6tflite8Operator15builtin_optionsEv>
 80063b4:	4603      	mov	r3, r0
 80063b6:	e000      	b.n	80063ba <_ZNK6tflite8Operator32builtin_options_as_Conv2DOptionsEv+0x20>
 80063b8:	2300      	movs	r3, #0
  }
 80063ba:	4618      	mov	r0, r3
 80063bc:	3708      	adds	r7, #8
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <_ZNK6tflite8Operator41builtin_options_as_DepthwiseConv2DOptionsEv>:
  const tflite::DepthwiseConv2DOptions *builtin_options_as_DepthwiseConv2DOptions() const {
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b082      	sub	sp, #8
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_DepthwiseConv2DOptions ? static_cast<const tflite::DepthwiseConv2DOptions *>(builtin_options()) : nullptr;
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f7ff ffc8 	bl	8006360 <_ZNK6tflite8Operator20builtin_options_typeEv>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d104      	bne.n	80063e0 <_ZNK6tflite8Operator41builtin_options_as_DepthwiseConv2DOptionsEv+0x1e>
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f7ff ffd1 	bl	800637e <_ZNK6tflite8Operator15builtin_optionsEv>
 80063dc:	4603      	mov	r3, r0
 80063de:	e000      	b.n	80063e2 <_ZNK6tflite8Operator41builtin_options_as_DepthwiseConv2DOptionsEv+0x20>
 80063e0:	2300      	movs	r3, #0
  }
 80063e2:	4618      	mov	r0, r3
 80063e4:	3708      	adds	r7, #8
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}

080063ea <_ZNK6tflite8Operator39builtin_options_as_LSHProjectionOptionsEv>:
  const tflite::LSHProjectionOptions *builtin_options_as_LSHProjectionOptions() const {
 80063ea:	b580      	push	{r7, lr}
 80063ec:	b082      	sub	sp, #8
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_LSHProjectionOptions ? static_cast<const tflite::LSHProjectionOptions *>(builtin_options()) : nullptr;
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f7ff ffb4 	bl	8006360 <_ZNK6tflite8Operator20builtin_options_typeEv>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b04      	cmp	r3, #4
 80063fc:	d104      	bne.n	8006408 <_ZNK6tflite8Operator39builtin_options_as_LSHProjectionOptionsEv+0x1e>
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f7ff ffbd 	bl	800637e <_ZNK6tflite8Operator15builtin_optionsEv>
 8006404:	4603      	mov	r3, r0
 8006406:	e000      	b.n	800640a <_ZNK6tflite8Operator39builtin_options_as_LSHProjectionOptionsEv+0x20>
 8006408:	2300      	movs	r3, #0
  }
 800640a:	4618      	mov	r0, r3
 800640c:	3708      	adds	r7, #8
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <_ZNK6tflite8Operator32builtin_options_as_Pool2DOptionsEv>:
  const tflite::Pool2DOptions *builtin_options_as_Pool2DOptions() const {
 8006412:	b580      	push	{r7, lr}
 8006414:	b082      	sub	sp, #8
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_Pool2DOptions ? static_cast<const tflite::Pool2DOptions *>(builtin_options()) : nullptr;
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f7ff ffa0 	bl	8006360 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8006420:	4603      	mov	r3, r0
 8006422:	2b05      	cmp	r3, #5
 8006424:	d104      	bne.n	8006430 <_ZNK6tflite8Operator32builtin_options_as_Pool2DOptionsEv+0x1e>
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f7ff ffa9 	bl	800637e <_ZNK6tflite8Operator15builtin_optionsEv>
 800642c:	4603      	mov	r3, r0
 800642e:	e000      	b.n	8006432 <_ZNK6tflite8Operator32builtin_options_as_Pool2DOptionsEv+0x20>
 8006430:	2300      	movs	r3, #0
  }
 8006432:	4618      	mov	r0, r3
 8006434:	3708      	adds	r7, #8
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}

0800643a <_ZNK6tflite8Operator30builtin_options_as_SVDFOptionsEv>:
  const tflite::SVDFOptions *builtin_options_as_SVDFOptions() const {
 800643a:	b580      	push	{r7, lr}
 800643c:	b082      	sub	sp, #8
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_SVDFOptions ? static_cast<const tflite::SVDFOptions *>(builtin_options()) : nullptr;
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f7ff ff8c 	bl	8006360 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8006448:	4603      	mov	r3, r0
 800644a:	2b06      	cmp	r3, #6
 800644c:	d104      	bne.n	8006458 <_ZNK6tflite8Operator30builtin_options_as_SVDFOptionsEv+0x1e>
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f7ff ff95 	bl	800637e <_ZNK6tflite8Operator15builtin_optionsEv>
 8006454:	4603      	mov	r3, r0
 8006456:	e000      	b.n	800645a <_ZNK6tflite8Operator30builtin_options_as_SVDFOptionsEv+0x20>
 8006458:	2300      	movs	r3, #0
  }
 800645a:	4618      	mov	r0, r3
 800645c:	3708      	adds	r7, #8
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}

08006462 <_ZNK6tflite8Operator29builtin_options_as_RNNOptionsEv>:
  const tflite::RNNOptions *builtin_options_as_RNNOptions() const {
 8006462:	b580      	push	{r7, lr}
 8006464:	b082      	sub	sp, #8
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_RNNOptions ? static_cast<const tflite::RNNOptions *>(builtin_options()) : nullptr;
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f7ff ff78 	bl	8006360 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8006470:	4603      	mov	r3, r0
 8006472:	2b07      	cmp	r3, #7
 8006474:	d104      	bne.n	8006480 <_ZNK6tflite8Operator29builtin_options_as_RNNOptionsEv+0x1e>
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f7ff ff81 	bl	800637e <_ZNK6tflite8Operator15builtin_optionsEv>
 800647c:	4603      	mov	r3, r0
 800647e:	e000      	b.n	8006482 <_ZNK6tflite8Operator29builtin_options_as_RNNOptionsEv+0x20>
 8006480:	2300      	movs	r3, #0
  }
 8006482:	4618      	mov	r0, r3
 8006484:	3708      	adds	r7, #8
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}

0800648a <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv>:
  const tflite::FullyConnectedOptions *builtin_options_as_FullyConnectedOptions() const {
 800648a:	b580      	push	{r7, lr}
 800648c:	b082      	sub	sp, #8
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_FullyConnectedOptions ? static_cast<const tflite::FullyConnectedOptions *>(builtin_options()) : nullptr;
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f7ff ff64 	bl	8006360 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8006498:	4603      	mov	r3, r0
 800649a:	2b08      	cmp	r3, #8
 800649c:	d104      	bne.n	80064a8 <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv+0x1e>
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f7ff ff6d 	bl	800637e <_ZNK6tflite8Operator15builtin_optionsEv>
 80064a4:	4603      	mov	r3, r0
 80064a6:	e000      	b.n	80064aa <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv+0x20>
 80064a8:	2300      	movs	r3, #0
  }
 80064aa:	4618      	mov	r0, r3
 80064ac:	3708      	adds	r7, #8
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}

080064b2 <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv>:
  const tflite::SoftmaxOptions *builtin_options_as_SoftmaxOptions() const {
 80064b2:	b580      	push	{r7, lr}
 80064b4:	b082      	sub	sp, #8
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_SoftmaxOptions ? static_cast<const tflite::SoftmaxOptions *>(builtin_options()) : nullptr;
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f7ff ff50 	bl	8006360 <_ZNK6tflite8Operator20builtin_options_typeEv>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b09      	cmp	r3, #9
 80064c4:	d104      	bne.n	80064d0 <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv+0x1e>
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f7ff ff59 	bl	800637e <_ZNK6tflite8Operator15builtin_optionsEv>
 80064cc:	4603      	mov	r3, r0
 80064ce:	e000      	b.n	80064d2 <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv+0x20>
 80064d0:	2300      	movs	r3, #0
  }
 80064d2:	4618      	mov	r0, r3
 80064d4:	3708      	adds	r7, #8
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}

080064da <_ZNK6tflite8Operator39builtin_options_as_ConcatenationOptionsEv>:
  const tflite::ConcatenationOptions *builtin_options_as_ConcatenationOptions() const {
 80064da:	b580      	push	{r7, lr}
 80064dc:	b082      	sub	sp, #8
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_ConcatenationOptions ? static_cast<const tflite::ConcatenationOptions *>(builtin_options()) : nullptr;
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f7ff ff3c 	bl	8006360 <_ZNK6tflite8Operator20builtin_options_typeEv>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b0a      	cmp	r3, #10
 80064ec:	d104      	bne.n	80064f8 <_ZNK6tflite8Operator39builtin_options_as_ConcatenationOptionsEv+0x1e>
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f7ff ff45 	bl	800637e <_ZNK6tflite8Operator15builtin_optionsEv>
 80064f4:	4603      	mov	r3, r0
 80064f6:	e000      	b.n	80064fa <_ZNK6tflite8Operator39builtin_options_as_ConcatenationOptionsEv+0x20>
 80064f8:	2300      	movs	r3, #0
  }
 80064fa:	4618      	mov	r0, r3
 80064fc:	3708      	adds	r7, #8
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}

08006502 <_ZNK6tflite8Operator29builtin_options_as_AddOptionsEv>:
  const tflite::AddOptions *builtin_options_as_AddOptions() const {
 8006502:	b580      	push	{r7, lr}
 8006504:	b082      	sub	sp, #8
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_AddOptions ? static_cast<const tflite::AddOptions *>(builtin_options()) : nullptr;
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f7ff ff28 	bl	8006360 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8006510:	4603      	mov	r3, r0
 8006512:	2b0b      	cmp	r3, #11
 8006514:	d104      	bne.n	8006520 <_ZNK6tflite8Operator29builtin_options_as_AddOptionsEv+0x1e>
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f7ff ff31 	bl	800637e <_ZNK6tflite8Operator15builtin_optionsEv>
 800651c:	4603      	mov	r3, r0
 800651e:	e000      	b.n	8006522 <_ZNK6tflite8Operator29builtin_options_as_AddOptionsEv+0x20>
 8006520:	2300      	movs	r3, #0
  }
 8006522:	4618      	mov	r0, r3
 8006524:	3708      	adds	r7, #8
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}

0800652a <_ZNK6tflite8Operator32builtin_options_as_L2NormOptionsEv>:
  const tflite::L2NormOptions *builtin_options_as_L2NormOptions() const {
 800652a:	b580      	push	{r7, lr}
 800652c:	b082      	sub	sp, #8
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_L2NormOptions ? static_cast<const tflite::L2NormOptions *>(builtin_options()) : nullptr;
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f7ff ff14 	bl	8006360 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8006538:	4603      	mov	r3, r0
 800653a:	2b0c      	cmp	r3, #12
 800653c:	d104      	bne.n	8006548 <_ZNK6tflite8Operator32builtin_options_as_L2NormOptionsEv+0x1e>
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f7ff ff1d 	bl	800637e <_ZNK6tflite8Operator15builtin_optionsEv>
 8006544:	4603      	mov	r3, r0
 8006546:	e000      	b.n	800654a <_ZNK6tflite8Operator32builtin_options_as_L2NormOptionsEv+0x20>
 8006548:	2300      	movs	r3, #0
  }
 800654a:	4618      	mov	r0, r3
 800654c:	3708      	adds	r7, #8
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}

08006552 <_ZNK6tflite8Operator52builtin_options_as_LocalResponseNormalizationOptionsEv>:
  const tflite::LocalResponseNormalizationOptions *builtin_options_as_LocalResponseNormalizationOptions() const {
 8006552:	b580      	push	{r7, lr}
 8006554:	b082      	sub	sp, #8
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_LocalResponseNormalizationOptions ? static_cast<const tflite::LocalResponseNormalizationOptions *>(builtin_options()) : nullptr;
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f7ff ff00 	bl	8006360 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8006560:	4603      	mov	r3, r0
 8006562:	2b0d      	cmp	r3, #13
 8006564:	d104      	bne.n	8006570 <_ZNK6tflite8Operator52builtin_options_as_LocalResponseNormalizationOptionsEv+0x1e>
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f7ff ff09 	bl	800637e <_ZNK6tflite8Operator15builtin_optionsEv>
 800656c:	4603      	mov	r3, r0
 800656e:	e000      	b.n	8006572 <_ZNK6tflite8Operator52builtin_options_as_LocalResponseNormalizationOptionsEv+0x20>
 8006570:	2300      	movs	r3, #0
  }
 8006572:	4618      	mov	r0, r3
 8006574:	3708      	adds	r7, #8
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}

0800657a <_ZNK6tflite8Operator30builtin_options_as_LSTMOptionsEv>:
  const tflite::LSTMOptions *builtin_options_as_LSTMOptions() const {
 800657a:	b580      	push	{r7, lr}
 800657c:	b082      	sub	sp, #8
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_LSTMOptions ? static_cast<const tflite::LSTMOptions *>(builtin_options()) : nullptr;
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f7ff feec 	bl	8006360 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8006588:	4603      	mov	r3, r0
 800658a:	2b0e      	cmp	r3, #14
 800658c:	d104      	bne.n	8006598 <_ZNK6tflite8Operator30builtin_options_as_LSTMOptionsEv+0x1e>
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f7ff fef5 	bl	800637e <_ZNK6tflite8Operator15builtin_optionsEv>
 8006594:	4603      	mov	r3, r0
 8006596:	e000      	b.n	800659a <_ZNK6tflite8Operator30builtin_options_as_LSTMOptionsEv+0x20>
 8006598:	2300      	movs	r3, #0
  }
 800659a:	4618      	mov	r0, r3
 800659c:	3708      	adds	r7, #8
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}

080065a2 <_ZNK6tflite8Operator40builtin_options_as_ResizeBilinearOptionsEv>:
  const tflite::ResizeBilinearOptions *builtin_options_as_ResizeBilinearOptions() const {
 80065a2:	b580      	push	{r7, lr}
 80065a4:	b082      	sub	sp, #8
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_ResizeBilinearOptions ? static_cast<const tflite::ResizeBilinearOptions *>(builtin_options()) : nullptr;
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f7ff fed8 	bl	8006360 <_ZNK6tflite8Operator20builtin_options_typeEv>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b0f      	cmp	r3, #15
 80065b4:	d104      	bne.n	80065c0 <_ZNK6tflite8Operator40builtin_options_as_ResizeBilinearOptionsEv+0x1e>
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f7ff fee1 	bl	800637e <_ZNK6tflite8Operator15builtin_optionsEv>
 80065bc:	4603      	mov	r3, r0
 80065be:	e000      	b.n	80065c2 <_ZNK6tflite8Operator40builtin_options_as_ResizeBilinearOptionsEv+0x20>
 80065c0:	2300      	movs	r3, #0
  }
 80065c2:	4618      	mov	r0, r3
 80065c4:	3708      	adds	r7, #8
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv>:
  const tflite::ReshapeOptions *builtin_options_as_ReshapeOptions() const {
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b082      	sub	sp, #8
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_ReshapeOptions ? static_cast<const tflite::ReshapeOptions *>(builtin_options()) : nullptr;
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f7ff fec4 	bl	8006360 <_ZNK6tflite8Operator20builtin_options_typeEv>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b11      	cmp	r3, #17
 80065dc:	d104      	bne.n	80065e8 <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv+0x1e>
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f7ff fecd 	bl	800637e <_ZNK6tflite8Operator15builtin_optionsEv>
 80065e4:	4603      	mov	r3, r0
 80065e6:	e000      	b.n	80065ea <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv+0x20>
 80065e8:	2300      	movs	r3, #0
  }
 80065ea:	4618      	mov	r0, r3
 80065ec:	3708      	adds	r7, #8
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}

080065f2 <_ZNK6tflite8Operator34builtin_options_as_SkipGramOptionsEv>:
  const tflite::SkipGramOptions *builtin_options_as_SkipGramOptions() const {
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b082      	sub	sp, #8
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_SkipGramOptions ? static_cast<const tflite::SkipGramOptions *>(builtin_options()) : nullptr;
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7ff feb0 	bl	8006360 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8006600:	4603      	mov	r3, r0
 8006602:	2b12      	cmp	r3, #18
 8006604:	d104      	bne.n	8006610 <_ZNK6tflite8Operator34builtin_options_as_SkipGramOptionsEv+0x1e>
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f7ff feb9 	bl	800637e <_ZNK6tflite8Operator15builtin_optionsEv>
 800660c:	4603      	mov	r3, r0
 800660e:	e000      	b.n	8006612 <_ZNK6tflite8Operator34builtin_options_as_SkipGramOptionsEv+0x20>
 8006610:	2300      	movs	r3, #0
  }
 8006612:	4618      	mov	r0, r3
 8006614:	3708      	adds	r7, #8
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}

0800661a <_ZNK6tflite8Operator38builtin_options_as_SpaceToDepthOptionsEv>:
  const tflite::SpaceToDepthOptions *builtin_options_as_SpaceToDepthOptions() const {
 800661a:	b580      	push	{r7, lr}
 800661c:	b082      	sub	sp, #8
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_SpaceToDepthOptions ? static_cast<const tflite::SpaceToDepthOptions *>(builtin_options()) : nullptr;
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f7ff fe9c 	bl	8006360 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8006628:	4603      	mov	r3, r0
 800662a:	2b13      	cmp	r3, #19
 800662c:	d104      	bne.n	8006638 <_ZNK6tflite8Operator38builtin_options_as_SpaceToDepthOptionsEv+0x1e>
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f7ff fea5 	bl	800637e <_ZNK6tflite8Operator15builtin_optionsEv>
 8006634:	4603      	mov	r3, r0
 8006636:	e000      	b.n	800663a <_ZNK6tflite8Operator38builtin_options_as_SpaceToDepthOptionsEv+0x20>
 8006638:	2300      	movs	r3, #0
  }
 800663a:	4618      	mov	r0, r3
 800663c:	3708      	adds	r7, #8
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}

08006642 <_ZNK6tflite8Operator47builtin_options_as_EmbeddingLookupSparseOptionsEv>:
  const tflite::EmbeddingLookupSparseOptions *builtin_options_as_EmbeddingLookupSparseOptions() const {
 8006642:	b580      	push	{r7, lr}
 8006644:	b082      	sub	sp, #8
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_EmbeddingLookupSparseOptions ? static_cast<const tflite::EmbeddingLookupSparseOptions *>(builtin_options()) : nullptr;
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f7ff fe88 	bl	8006360 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8006650:	4603      	mov	r3, r0
 8006652:	2b14      	cmp	r3, #20
 8006654:	d104      	bne.n	8006660 <_ZNK6tflite8Operator47builtin_options_as_EmbeddingLookupSparseOptionsEv+0x1e>
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f7ff fe91 	bl	800637e <_ZNK6tflite8Operator15builtin_optionsEv>
 800665c:	4603      	mov	r3, r0
 800665e:	e000      	b.n	8006662 <_ZNK6tflite8Operator47builtin_options_as_EmbeddingLookupSparseOptionsEv+0x20>
 8006660:	2300      	movs	r3, #0
  }
 8006662:	4618      	mov	r0, r3
 8006664:	3708      	adds	r7, #8
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}

0800666a <_ZNK6tflite8Operator29builtin_options_as_MulOptionsEv>:
  const tflite::MulOptions *builtin_options_as_MulOptions() const {
 800666a:	b580      	push	{r7, lr}
 800666c:	b082      	sub	sp, #8
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_MulOptions ? static_cast<const tflite::MulOptions *>(builtin_options()) : nullptr;
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f7ff fe74 	bl	8006360 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8006678:	4603      	mov	r3, r0
 800667a:	2b15      	cmp	r3, #21
 800667c:	d104      	bne.n	8006688 <_ZNK6tflite8Operator29builtin_options_as_MulOptionsEv+0x1e>
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f7ff fe7d 	bl	800637e <_ZNK6tflite8Operator15builtin_optionsEv>
 8006684:	4603      	mov	r3, r0
 8006686:	e000      	b.n	800668a <_ZNK6tflite8Operator29builtin_options_as_MulOptionsEv+0x20>
 8006688:	2300      	movs	r3, #0
  }
 800668a:	4618      	mov	r0, r3
 800668c:	3708      	adds	r7, #8
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}

08006692 <_ZNK6tflite8Operator32builtin_options_as_GatherOptionsEv>:
  const tflite::GatherOptions *builtin_options_as_GatherOptions() const {
 8006692:	b580      	push	{r7, lr}
 8006694:	b082      	sub	sp, #8
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_GatherOptions ? static_cast<const tflite::GatherOptions *>(builtin_options()) : nullptr;
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f7ff fe60 	bl	8006360 <_ZNK6tflite8Operator20builtin_options_typeEv>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b17      	cmp	r3, #23
 80066a4:	d104      	bne.n	80066b0 <_ZNK6tflite8Operator32builtin_options_as_GatherOptionsEv+0x1e>
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f7ff fe69 	bl	800637e <_ZNK6tflite8Operator15builtin_optionsEv>
 80066ac:	4603      	mov	r3, r0
 80066ae:	e000      	b.n	80066b2 <_ZNK6tflite8Operator32builtin_options_as_GatherOptionsEv+0x20>
 80066b0:	2300      	movs	r3, #0
  }
 80066b2:	4618      	mov	r0, r3
 80066b4:	3708      	adds	r7, #8
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}

080066ba <_ZNK6tflite8Operator33builtin_options_as_ReducerOptionsEv>:
  const tflite::ReducerOptions *builtin_options_as_ReducerOptions() const {
 80066ba:	b580      	push	{r7, lr}
 80066bc:	b082      	sub	sp, #8
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_ReducerOptions ? static_cast<const tflite::ReducerOptions *>(builtin_options()) : nullptr;
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f7ff fe4c 	bl	8006360 <_ZNK6tflite8Operator20builtin_options_typeEv>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b1b      	cmp	r3, #27
 80066cc:	d104      	bne.n	80066d8 <_ZNK6tflite8Operator33builtin_options_as_ReducerOptionsEv+0x1e>
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f7ff fe55 	bl	800637e <_ZNK6tflite8Operator15builtin_optionsEv>
 80066d4:	4603      	mov	r3, r0
 80066d6:	e000      	b.n	80066da <_ZNK6tflite8Operator33builtin_options_as_ReducerOptionsEv+0x20>
 80066d8:	2300      	movs	r3, #0
  }
 80066da:	4618      	mov	r0, r3
 80066dc:	3708      	adds	r7, #8
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}

080066e2 <_ZNK6tflite8Operator29builtin_options_as_SubOptionsEv>:
  const tflite::SubOptions *builtin_options_as_SubOptions() const {
 80066e2:	b580      	push	{r7, lr}
 80066e4:	b082      	sub	sp, #8
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_SubOptions ? static_cast<const tflite::SubOptions *>(builtin_options()) : nullptr;
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f7ff fe38 	bl	8006360 <_ZNK6tflite8Operator20builtin_options_typeEv>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b1c      	cmp	r3, #28
 80066f4:	d104      	bne.n	8006700 <_ZNK6tflite8Operator29builtin_options_as_SubOptionsEv+0x1e>
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f7ff fe41 	bl	800637e <_ZNK6tflite8Operator15builtin_optionsEv>
 80066fc:	4603      	mov	r3, r0
 80066fe:	e000      	b.n	8006702 <_ZNK6tflite8Operator29builtin_options_as_SubOptionsEv+0x20>
 8006700:	2300      	movs	r3, #0
  }
 8006702:	4618      	mov	r0, r3
 8006704:	3708      	adds	r7, #8
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}

0800670a <_ZNK6tflite8Operator29builtin_options_as_DivOptionsEv>:
  const tflite::DivOptions *builtin_options_as_DivOptions() const {
 800670a:	b580      	push	{r7, lr}
 800670c:	b082      	sub	sp, #8
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_DivOptions ? static_cast<const tflite::DivOptions *>(builtin_options()) : nullptr;
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f7ff fe24 	bl	8006360 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8006718:	4603      	mov	r3, r0
 800671a:	2b1d      	cmp	r3, #29
 800671c:	d104      	bne.n	8006728 <_ZNK6tflite8Operator29builtin_options_as_DivOptionsEv+0x1e>
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f7ff fe2d 	bl	800637e <_ZNK6tflite8Operator15builtin_optionsEv>
 8006724:	4603      	mov	r3, r0
 8006726:	e000      	b.n	800672a <_ZNK6tflite8Operator29builtin_options_as_DivOptionsEv+0x20>
 8006728:	2300      	movs	r3, #0
  }
 800672a:	4618      	mov	r0, r3
 800672c:	3708      	adds	r7, #8
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}

08006732 <_ZNK6tflite8Operator33builtin_options_as_SqueezeOptionsEv>:
  const tflite::SqueezeOptions *builtin_options_as_SqueezeOptions() const {
 8006732:	b580      	push	{r7, lr}
 8006734:	b082      	sub	sp, #8
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_SqueezeOptions ? static_cast<const tflite::SqueezeOptions *>(builtin_options()) : nullptr;
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f7ff fe10 	bl	8006360 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8006740:	4603      	mov	r3, r0
 8006742:	2b1e      	cmp	r3, #30
 8006744:	d104      	bne.n	8006750 <_ZNK6tflite8Operator33builtin_options_as_SqueezeOptionsEv+0x1e>
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f7ff fe19 	bl	800637e <_ZNK6tflite8Operator15builtin_optionsEv>
 800674c:	4603      	mov	r3, r0
 800674e:	e000      	b.n	8006752 <_ZNK6tflite8Operator33builtin_options_as_SqueezeOptionsEv+0x20>
 8006750:	2300      	movs	r3, #0
  }
 8006752:	4618      	mov	r0, r3
 8006754:	3708      	adds	r7, #8
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <_ZNK6tflite8Operator37builtin_options_as_SequenceRNNOptionsEv>:
  const tflite::SequenceRNNOptions *builtin_options_as_SequenceRNNOptions() const {
 800675a:	b580      	push	{r7, lr}
 800675c:	b082      	sub	sp, #8
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_SequenceRNNOptions ? static_cast<const tflite::SequenceRNNOptions *>(builtin_options()) : nullptr;
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f7ff fdfc 	bl	8006360 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8006768:	4603      	mov	r3, r0
 800676a:	2b1f      	cmp	r3, #31
 800676c:	d104      	bne.n	8006778 <_ZNK6tflite8Operator37builtin_options_as_SequenceRNNOptionsEv+0x1e>
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f7ff fe05 	bl	800637e <_ZNK6tflite8Operator15builtin_optionsEv>
 8006774:	4603      	mov	r3, r0
 8006776:	e000      	b.n	800677a <_ZNK6tflite8Operator37builtin_options_as_SequenceRNNOptionsEv+0x20>
 8006778:	2300      	movs	r3, #0
  }
 800677a:	4618      	mov	r0, r3
 800677c:	3708      	adds	r7, #8
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}

08006782 <_ZNK6tflite8Operator38builtin_options_as_StridedSliceOptionsEv>:
  const tflite::StridedSliceOptions *builtin_options_as_StridedSliceOptions() const {
 8006782:	b580      	push	{r7, lr}
 8006784:	b082      	sub	sp, #8
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_StridedSliceOptions ? static_cast<const tflite::StridedSliceOptions *>(builtin_options()) : nullptr;
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f7ff fde8 	bl	8006360 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8006790:	4603      	mov	r3, r0
 8006792:	2b20      	cmp	r3, #32
 8006794:	d104      	bne.n	80067a0 <_ZNK6tflite8Operator38builtin_options_as_StridedSliceOptionsEv+0x1e>
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f7ff fdf1 	bl	800637e <_ZNK6tflite8Operator15builtin_optionsEv>
 800679c:	4603      	mov	r3, r0
 800679e:	e000      	b.n	80067a2 <_ZNK6tflite8Operator38builtin_options_as_StridedSliceOptionsEv+0x20>
 80067a0:	2300      	movs	r3, #0
  }
 80067a2:	4618      	mov	r0, r3
 80067a4:	3708      	adds	r7, #8
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}

080067aa <_ZNK6tflite8Operator31builtin_options_as_SplitOptionsEv>:
  const tflite::SplitOptions *builtin_options_as_SplitOptions() const {
 80067aa:	b580      	push	{r7, lr}
 80067ac:	b082      	sub	sp, #8
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_SplitOptions ? static_cast<const tflite::SplitOptions *>(builtin_options()) : nullptr;
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f7ff fdd4 	bl	8006360 <_ZNK6tflite8Operator20builtin_options_typeEv>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b23      	cmp	r3, #35	; 0x23
 80067bc:	d104      	bne.n	80067c8 <_ZNK6tflite8Operator31builtin_options_as_SplitOptionsEv+0x1e>
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f7ff fddd 	bl	800637e <_ZNK6tflite8Operator15builtin_optionsEv>
 80067c4:	4603      	mov	r3, r0
 80067c6:	e000      	b.n	80067ca <_ZNK6tflite8Operator31builtin_options_as_SplitOptionsEv+0x20>
 80067c8:	2300      	movs	r3, #0
  }
 80067ca:	4618      	mov	r0, r3
 80067cc:	3708      	adds	r7, #8
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}

080067d2 <_ZNK6tflite8Operator30builtin_options_as_CastOptionsEv>:
  const tflite::CastOptions *builtin_options_as_CastOptions() const {
 80067d2:	b580      	push	{r7, lr}
 80067d4:	b082      	sub	sp, #8
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_CastOptions ? static_cast<const tflite::CastOptions *>(builtin_options()) : nullptr;
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f7ff fdc0 	bl	8006360 <_ZNK6tflite8Operator20builtin_options_typeEv>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b25      	cmp	r3, #37	; 0x25
 80067e4:	d104      	bne.n	80067f0 <_ZNK6tflite8Operator30builtin_options_as_CastOptionsEv+0x1e>
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f7ff fdc9 	bl	800637e <_ZNK6tflite8Operator15builtin_optionsEv>
 80067ec:	4603      	mov	r3, r0
 80067ee:	e000      	b.n	80067f2 <_ZNK6tflite8Operator30builtin_options_as_CastOptionsEv+0x20>
 80067f0:	2300      	movs	r3, #0
  }
 80067f2:	4618      	mov	r0, r3
 80067f4:	3708      	adds	r7, #8
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <_ZNK6tflite8Operator32builtin_options_as_ArgMaxOptionsEv>:
  const tflite::ArgMaxOptions *builtin_options_as_ArgMaxOptions() const {
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b082      	sub	sp, #8
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_ArgMaxOptions ? static_cast<const tflite::ArgMaxOptions *>(builtin_options()) : nullptr;
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f7ff fdac 	bl	8006360 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8006808:	4603      	mov	r3, r0
 800680a:	2b28      	cmp	r3, #40	; 0x28
 800680c:	d104      	bne.n	8006818 <_ZNK6tflite8Operator32builtin_options_as_ArgMaxOptionsEv+0x1e>
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f7ff fdb5 	bl	800637e <_ZNK6tflite8Operator15builtin_optionsEv>
 8006814:	4603      	mov	r3, r0
 8006816:	e000      	b.n	800681a <_ZNK6tflite8Operator32builtin_options_as_ArgMaxOptionsEv+0x20>
 8006818:	2300      	movs	r3, #0
  }
 800681a:	4618      	mov	r0, r3
 800681c:	3708      	adds	r7, #8
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <_ZNK6tflite8Operator39builtin_options_as_TransposeConvOptionsEv>:
  const tflite::TransposeConvOptions *builtin_options_as_TransposeConvOptions() const {
 8006822:	b580      	push	{r7, lr}
 8006824:	b082      	sub	sp, #8
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_TransposeConvOptions ? static_cast<const tflite::TransposeConvOptions *>(builtin_options()) : nullptr;
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f7ff fd98 	bl	8006360 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8006830:	4603      	mov	r3, r0
 8006832:	2b31      	cmp	r3, #49	; 0x31
 8006834:	d104      	bne.n	8006840 <_ZNK6tflite8Operator39builtin_options_as_TransposeConvOptionsEv+0x1e>
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f7ff fda1 	bl	800637e <_ZNK6tflite8Operator15builtin_optionsEv>
 800683c:	4603      	mov	r3, r0
 800683e:	e000      	b.n	8006842 <_ZNK6tflite8Operator39builtin_options_as_TransposeConvOptionsEv+0x20>
 8006840:	2300      	movs	r3, #0
  }
 8006842:	4618      	mov	r0, r3
 8006844:	3708      	adds	r7, #8
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}

0800684a <_ZNK6tflite8Operator39builtin_options_as_SparseToDenseOptionsEv>:
  const tflite::SparseToDenseOptions *builtin_options_as_SparseToDenseOptions() const {
 800684a:	b580      	push	{r7, lr}
 800684c:	b082      	sub	sp, #8
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_SparseToDenseOptions ? static_cast<const tflite::SparseToDenseOptions *>(builtin_options()) : nullptr;
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f7ff fd84 	bl	8006360 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8006858:	4603      	mov	r3, r0
 800685a:	2b32      	cmp	r3, #50	; 0x32
 800685c:	d104      	bne.n	8006868 <_ZNK6tflite8Operator39builtin_options_as_SparseToDenseOptionsEv+0x1e>
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f7ff fd8d 	bl	800637e <_ZNK6tflite8Operator15builtin_optionsEv>
 8006864:	4603      	mov	r3, r0
 8006866:	e000      	b.n	800686a <_ZNK6tflite8Operator39builtin_options_as_SparseToDenseOptionsEv+0x20>
 8006868:	2300      	movs	r3, #0
  }
 800686a:	4618      	mov	r0, r3
 800686c:	3708      	adds	r7, #8
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <_ZNK6tflite8Operator31builtin_options_as_ShapeOptionsEv>:
  const tflite::ShapeOptions *builtin_options_as_ShapeOptions() const {
 8006872:	b580      	push	{r7, lr}
 8006874:	b082      	sub	sp, #8
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_ShapeOptions ? static_cast<const tflite::ShapeOptions *>(builtin_options()) : nullptr;
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f7ff fd70 	bl	8006360 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8006880:	4603      	mov	r3, r0
 8006882:	2b37      	cmp	r3, #55	; 0x37
 8006884:	d104      	bne.n	8006890 <_ZNK6tflite8Operator31builtin_options_as_ShapeOptionsEv+0x1e>
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f7ff fd79 	bl	800637e <_ZNK6tflite8Operator15builtin_optionsEv>
 800688c:	4603      	mov	r3, r0
 800688e:	e000      	b.n	8006892 <_ZNK6tflite8Operator31builtin_options_as_ShapeOptionsEv+0x20>
 8006890:	2300      	movs	r3, #0
  }
 8006892:	4618      	mov	r0, r3
 8006894:	3708      	adds	r7, #8
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <_ZNK6tflite8Operator32builtin_options_as_ArgMinOptionsEv>:
  const tflite::ArgMinOptions *builtin_options_as_ArgMinOptions() const {
 800689a:	b580      	push	{r7, lr}
 800689c:	b082      	sub	sp, #8
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_ArgMinOptions ? static_cast<const tflite::ArgMinOptions *>(builtin_options()) : nullptr;
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f7ff fd5c 	bl	8006360 <_ZNK6tflite8Operator20builtin_options_typeEv>
 80068a8:	4603      	mov	r3, r0
 80068aa:	2b39      	cmp	r3, #57	; 0x39
 80068ac:	d104      	bne.n	80068b8 <_ZNK6tflite8Operator32builtin_options_as_ArgMinOptionsEv+0x1e>
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f7ff fd65 	bl	800637e <_ZNK6tflite8Operator15builtin_optionsEv>
 80068b4:	4603      	mov	r3, r0
 80068b6:	e000      	b.n	80068ba <_ZNK6tflite8Operator32builtin_options_as_ArgMinOptionsEv+0x20>
 80068b8:	2300      	movs	r3, #0
  }
 80068ba:	4618      	mov	r0, r3
 80068bc:	3708      	adds	r7, #8
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <_ZNK6tflite8Operator35builtin_options_as_FakeQuantOptionsEv>:
  const tflite::FakeQuantOptions *builtin_options_as_FakeQuantOptions() const {
 80068c2:	b580      	push	{r7, lr}
 80068c4:	b082      	sub	sp, #8
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_FakeQuantOptions ? static_cast<const tflite::FakeQuantOptions *>(builtin_options()) : nullptr;
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f7ff fd48 	bl	8006360 <_ZNK6tflite8Operator20builtin_options_typeEv>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b3a      	cmp	r3, #58	; 0x3a
 80068d4:	d104      	bne.n	80068e0 <_ZNK6tflite8Operator35builtin_options_as_FakeQuantOptionsEv+0x1e>
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f7ff fd51 	bl	800637e <_ZNK6tflite8Operator15builtin_optionsEv>
 80068dc:	4603      	mov	r3, r0
 80068de:	e000      	b.n	80068e2 <_ZNK6tflite8Operator35builtin_options_as_FakeQuantOptionsEv+0x20>
 80068e0:	2300      	movs	r3, #0
  }
 80068e2:	4618      	mov	r0, r3
 80068e4:	3708      	adds	r7, #8
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <_ZNK6tflite8Operator30builtin_options_as_PackOptionsEv>:
  const tflite::PackOptions *builtin_options_as_PackOptions() const {
 80068ea:	b580      	push	{r7, lr}
 80068ec:	b082      	sub	sp, #8
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_PackOptions ? static_cast<const tflite::PackOptions *>(builtin_options()) : nullptr;
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f7ff fd34 	bl	8006360 <_ZNK6tflite8Operator20builtin_options_typeEv>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b3b      	cmp	r3, #59	; 0x3b
 80068fc:	d104      	bne.n	8006908 <_ZNK6tflite8Operator30builtin_options_as_PackOptionsEv+0x1e>
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f7ff fd3d 	bl	800637e <_ZNK6tflite8Operator15builtin_optionsEv>
 8006904:	4603      	mov	r3, r0
 8006906:	e000      	b.n	800690a <_ZNK6tflite8Operator30builtin_options_as_PackOptionsEv+0x20>
 8006908:	2300      	movs	r3, #0
  }
 800690a:	4618      	mov	r0, r3
 800690c:	3708      	adds	r7, #8
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}

08006912 <_ZNK6tflite8Operator32builtin_options_as_OneHotOptionsEv>:
  const tflite::OneHotOptions *builtin_options_as_OneHotOptions() const {
 8006912:	b580      	push	{r7, lr}
 8006914:	b082      	sub	sp, #8
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_OneHotOptions ? static_cast<const tflite::OneHotOptions *>(builtin_options()) : nullptr;
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f7ff fd20 	bl	8006360 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8006920:	4603      	mov	r3, r0
 8006922:	2b3d      	cmp	r3, #61	; 0x3d
 8006924:	d104      	bne.n	8006930 <_ZNK6tflite8Operator32builtin_options_as_OneHotOptionsEv+0x1e>
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f7ff fd29 	bl	800637e <_ZNK6tflite8Operator15builtin_optionsEv>
 800692c:	4603      	mov	r3, r0
 800692e:	e000      	b.n	8006932 <_ZNK6tflite8Operator32builtin_options_as_OneHotOptionsEv+0x20>
 8006930:	2300      	movs	r3, #0
  }
 8006932:	4618      	mov	r0, r3
 8006934:	3708      	adds	r7, #8
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <_ZNK6tflite8Operator32builtin_options_as_UnpackOptionsEv>:
  const tflite::UnpackOptions *builtin_options_as_UnpackOptions() const {
 800693a:	b580      	push	{r7, lr}
 800693c:	b082      	sub	sp, #8
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_UnpackOptions ? static_cast<const tflite::UnpackOptions *>(builtin_options()) : nullptr;
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f7ff fd0c 	bl	8006360 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8006948:	4603      	mov	r3, r0
 800694a:	2b40      	cmp	r3, #64	; 0x40
 800694c:	d104      	bne.n	8006958 <_ZNK6tflite8Operator32builtin_options_as_UnpackOptionsEv+0x1e>
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f7ff fd15 	bl	800637e <_ZNK6tflite8Operator15builtin_optionsEv>
 8006954:	4603      	mov	r3, r0
 8006956:	e000      	b.n	800695a <_ZNK6tflite8Operator32builtin_options_as_UnpackOptionsEv+0x20>
 8006958:	2300      	movs	r3, #0
  }
 800695a:	4618      	mov	r0, r3
 800695c:	3708      	adds	r7, #8
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}

08006962 <_ZNK6tflite8Operator51builtin_options_as_BidirectionalSequenceLSTMOptionsEv>:
  const tflite::BidirectionalSequenceLSTMOptions *builtin_options_as_BidirectionalSequenceLSTMOptions() const {
 8006962:	b580      	push	{r7, lr}
 8006964:	b082      	sub	sp, #8
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_BidirectionalSequenceLSTMOptions ? static_cast<const tflite::BidirectionalSequenceLSTMOptions *>(builtin_options()) : nullptr;
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f7ff fcf8 	bl	8006360 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8006970:	4603      	mov	r3, r0
 8006972:	2b45      	cmp	r3, #69	; 0x45
 8006974:	d104      	bne.n	8006980 <_ZNK6tflite8Operator51builtin_options_as_BidirectionalSequenceLSTMOptionsEv+0x1e>
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f7ff fd01 	bl	800637e <_ZNK6tflite8Operator15builtin_optionsEv>
 800697c:	4603      	mov	r3, r0
 800697e:	e000      	b.n	8006982 <_ZNK6tflite8Operator51builtin_options_as_BidirectionalSequenceLSTMOptionsEv+0x20>
 8006980:	2300      	movs	r3, #0
  }
 8006982:	4618      	mov	r0, r3
 8006984:	3708      	adds	r7, #8
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}

0800698a <_ZNK6tflite8Operator50builtin_options_as_BidirectionalSequenceRNNOptionsEv>:
  const tflite::BidirectionalSequenceRNNOptions *builtin_options_as_BidirectionalSequenceRNNOptions() const {
 800698a:	b580      	push	{r7, lr}
 800698c:	b082      	sub	sp, #8
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_BidirectionalSequenceRNNOptions ? static_cast<const tflite::BidirectionalSequenceRNNOptions *>(builtin_options()) : nullptr;
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f7ff fce4 	bl	8006360 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8006998:	4603      	mov	r3, r0
 800699a:	2b46      	cmp	r3, #70	; 0x46
 800699c:	d104      	bne.n	80069a8 <_ZNK6tflite8Operator50builtin_options_as_BidirectionalSequenceRNNOptionsEv+0x1e>
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f7ff fced 	bl	800637e <_ZNK6tflite8Operator15builtin_optionsEv>
 80069a4:	4603      	mov	r3, r0
 80069a6:	e000      	b.n	80069aa <_ZNK6tflite8Operator50builtin_options_as_BidirectionalSequenceRNNOptionsEv+0x20>
 80069a8:	2300      	movs	r3, #0
  }
 80069aa:	4618      	mov	r0, r3
 80069ac:	3708      	adds	r7, #8
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}

080069b2 <_ZNK6tflite8Operator52builtin_options_as_UnidirectionalSequenceLSTMOptionsEv>:
  const tflite::UnidirectionalSequenceLSTMOptions *builtin_options_as_UnidirectionalSequenceLSTMOptions() const {
 80069b2:	b580      	push	{r7, lr}
 80069b4:	b082      	sub	sp, #8
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_UnidirectionalSequenceLSTMOptions ? static_cast<const tflite::UnidirectionalSequenceLSTMOptions *>(builtin_options()) : nullptr;
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f7ff fcd0 	bl	8006360 <_ZNK6tflite8Operator20builtin_options_typeEv>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b47      	cmp	r3, #71	; 0x47
 80069c4:	d104      	bne.n	80069d0 <_ZNK6tflite8Operator52builtin_options_as_UnidirectionalSequenceLSTMOptionsEv+0x1e>
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f7ff fcd9 	bl	800637e <_ZNK6tflite8Operator15builtin_optionsEv>
 80069cc:	4603      	mov	r3, r0
 80069ce:	e000      	b.n	80069d2 <_ZNK6tflite8Operator52builtin_options_as_UnidirectionalSequenceLSTMOptionsEv+0x20>
 80069d0:	2300      	movs	r3, #0
  }
 80069d2:	4618      	mov	r0, r3
 80069d4:	3708      	adds	r7, #8
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <_ZNK6tflite8Operator47builtin_options_as_ResizeNearestNeighborOptionsEv>:
  const tflite::ResizeNearestNeighborOptions *builtin_options_as_ResizeNearestNeighborOptions() const {
 80069da:	b580      	push	{r7, lr}
 80069dc:	b082      	sub	sp, #8
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_ResizeNearestNeighborOptions ? static_cast<const tflite::ResizeNearestNeighborOptions *>(builtin_options()) : nullptr;
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f7ff fcbc 	bl	8006360 <_ZNK6tflite8Operator20builtin_options_typeEv>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b4a      	cmp	r3, #74	; 0x4a
 80069ec:	d104      	bne.n	80069f8 <_ZNK6tflite8Operator47builtin_options_as_ResizeNearestNeighborOptionsEv+0x1e>
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f7ff fcc5 	bl	800637e <_ZNK6tflite8Operator15builtin_optionsEv>
 80069f4:	4603      	mov	r3, r0
 80069f6:	e000      	b.n	80069fa <_ZNK6tflite8Operator47builtin_options_as_ResizeNearestNeighborOptionsEv+0x20>
 80069f8:	2300      	movs	r3, #0
  }
 80069fa:	4618      	mov	r0, r3
 80069fc:	3708      	adds	r7, #8
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <_ZNK6tflite8Operator35builtin_options_as_LeakyReluOptionsEv>:
  const tflite::LeakyReluOptions *builtin_options_as_LeakyReluOptions() const {
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b082      	sub	sp, #8
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_LeakyReluOptions ? static_cast<const tflite::LeakyReluOptions *>(builtin_options()) : nullptr;
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f7ff fca8 	bl	8006360 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b4b      	cmp	r3, #75	; 0x4b
 8006a14:	d104      	bne.n	8006a20 <_ZNK6tflite8Operator35builtin_options_as_LeakyReluOptionsEv+0x1e>
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f7ff fcb1 	bl	800637e <_ZNK6tflite8Operator15builtin_optionsEv>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	e000      	b.n	8006a22 <_ZNK6tflite8Operator35builtin_options_as_LeakyReluOptionsEv+0x20>
 8006a20:	2300      	movs	r3, #0
  }
 8006a22:	4618      	mov	r0, r3
 8006a24:	3708      	adds	r7, #8
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <_ZNK6tflite8Operator35builtin_options_as_MirrorPadOptionsEv>:
  const tflite::MirrorPadOptions *builtin_options_as_MirrorPadOptions() const {
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b082      	sub	sp, #8
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_MirrorPadOptions ? static_cast<const tflite::MirrorPadOptions *>(builtin_options()) : nullptr;
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f7ff fc94 	bl	8006360 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b4d      	cmp	r3, #77	; 0x4d
 8006a3c:	d104      	bne.n	8006a48 <_ZNK6tflite8Operator35builtin_options_as_MirrorPadOptionsEv+0x1e>
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f7ff fc9d 	bl	800637e <_ZNK6tflite8Operator15builtin_optionsEv>
 8006a44:	4603      	mov	r3, r0
 8006a46:	e000      	b.n	8006a4a <_ZNK6tflite8Operator35builtin_options_as_MirrorPadOptionsEv+0x20>
 8006a48:	2300      	movs	r3, #0
  }
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3708      	adds	r7, #8
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}

08006a52 <_ZNK6tflite8Operator32builtin_options_as_SplitVOptionsEv>:
  const tflite::SplitVOptions *builtin_options_as_SplitVOptions() const {
 8006a52:	b580      	push	{r7, lr}
 8006a54:	b082      	sub	sp, #8
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_SplitVOptions ? static_cast<const tflite::SplitVOptions *>(builtin_options()) : nullptr;
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f7ff fc80 	bl	8006360 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8006a60:	4603      	mov	r3, r0
 8006a62:	2b4f      	cmp	r3, #79	; 0x4f
 8006a64:	d104      	bne.n	8006a70 <_ZNK6tflite8Operator32builtin_options_as_SplitVOptionsEv+0x1e>
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f7ff fc89 	bl	800637e <_ZNK6tflite8Operator15builtin_optionsEv>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	e000      	b.n	8006a72 <_ZNK6tflite8Operator32builtin_options_as_SplitVOptionsEv+0x20>
 8006a70:	2300      	movs	r3, #0
  }
 8006a72:	4618      	mov	r0, r3
 8006a74:	3708      	adds	r7, #8
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <_ZNK6tflite8Operator32builtin_options_as_UniqueOptionsEv>:
  const tflite::UniqueOptions *builtin_options_as_UniqueOptions() const {
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b082      	sub	sp, #8
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_UniqueOptions ? static_cast<const tflite::UniqueOptions *>(builtin_options()) : nullptr;
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f7ff fc6c 	bl	8006360 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b50      	cmp	r3, #80	; 0x50
 8006a8c:	d104      	bne.n	8006a98 <_ZNK6tflite8Operator32builtin_options_as_UniqueOptionsEv+0x1e>
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f7ff fc75 	bl	800637e <_ZNK6tflite8Operator15builtin_optionsEv>
 8006a94:	4603      	mov	r3, r0
 8006a96:	e000      	b.n	8006a9a <_ZNK6tflite8Operator32builtin_options_as_UniqueOptionsEv+0x20>
 8006a98:	2300      	movs	r3, #0
  }
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3708      	adds	r7, #8
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <_ZNK6tflite8Operator41builtin_options_as_ReverseSequenceOptionsEv>:
  const tflite::ReverseSequenceOptions *builtin_options_as_ReverseSequenceOptions() const {
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b082      	sub	sp, #8
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_ReverseSequenceOptions ? static_cast<const tflite::ReverseSequenceOptions *>(builtin_options()) : nullptr;
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f7ff fc58 	bl	8006360 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b57      	cmp	r3, #87	; 0x57
 8006ab4:	d104      	bne.n	8006ac0 <_ZNK6tflite8Operator41builtin_options_as_ReverseSequenceOptionsEv+0x1e>
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f7ff fc61 	bl	800637e <_ZNK6tflite8Operator15builtin_optionsEv>
 8006abc:	4603      	mov	r3, r0
 8006abe:	e000      	b.n	8006ac2 <_ZNK6tflite8Operator41builtin_options_as_ReverseSequenceOptionsEv+0x20>
 8006ac0:	2300      	movs	r3, #0
  }
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3708      	adds	r7, #8
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <_ZNK6tflite8Operator28builtin_options_as_IfOptionsEv>:
  const tflite::IfOptions *builtin_options_as_IfOptions() const {
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b082      	sub	sp, #8
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_IfOptions ? static_cast<const tflite::IfOptions *>(builtin_options()) : nullptr;
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f7ff fc44 	bl	8006360 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b5c      	cmp	r3, #92	; 0x5c
 8006adc:	d104      	bne.n	8006ae8 <_ZNK6tflite8Operator28builtin_options_as_IfOptionsEv+0x1e>
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f7ff fc4d 	bl	800637e <_ZNK6tflite8Operator15builtin_optionsEv>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	e000      	b.n	8006aea <_ZNK6tflite8Operator28builtin_options_as_IfOptionsEv+0x20>
 8006ae8:	2300      	movs	r3, #0
  }
 8006aea:	4618      	mov	r0, r3
 8006aec:	3708      	adds	r7, #8
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <_ZNK6tflite8Operator31builtin_options_as_WhileOptionsEv>:
  const tflite::WhileOptions *builtin_options_as_WhileOptions() const {
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b082      	sub	sp, #8
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_WhileOptions ? static_cast<const tflite::WhileOptions *>(builtin_options()) : nullptr;
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f7ff fc30 	bl	8006360 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b5d      	cmp	r3, #93	; 0x5d
 8006b04:	d104      	bne.n	8006b10 <_ZNK6tflite8Operator31builtin_options_as_WhileOptionsEv+0x1e>
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f7ff fc39 	bl	800637e <_ZNK6tflite8Operator15builtin_optionsEv>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	e000      	b.n	8006b12 <_ZNK6tflite8Operator31builtin_options_as_WhileOptionsEv+0x20>
 8006b10:	2300      	movs	r3, #0
  }
 8006b12:	4618      	mov	r0, r3
 8006b14:	3708      	adds	r7, #8
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <_ZNK6tflite8Operator38builtin_options_as_DepthToSpaceOptionsEv>:
  const tflite::DepthToSpaceOptions *builtin_options_as_DepthToSpaceOptions() const {
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b082      	sub	sp, #8
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_DepthToSpaceOptions ? static_cast<const tflite::DepthToSpaceOptions *>(builtin_options()) : nullptr;
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f7ff fc1c 	bl	8006360 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	2b5e      	cmp	r3, #94	; 0x5e
 8006b2c:	d104      	bne.n	8006b38 <_ZNK6tflite8Operator38builtin_options_as_DepthToSpaceOptionsEv+0x1e>
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f7ff fc25 	bl	800637e <_ZNK6tflite8Operator15builtin_optionsEv>
 8006b34:	4603      	mov	r3, r0
 8006b36:	e000      	b.n	8006b3a <_ZNK6tflite8Operator38builtin_options_as_DepthToSpaceOptionsEv+0x20>
 8006b38:	2300      	movs	r3, #0
  }
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3708      	adds	r7, #8
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}

08006b42 <_ZNK6tflite8Operator37builtin_options_as_BatchMatMulOptionsEv>:
  const tflite::BatchMatMulOptions *builtin_options_as_BatchMatMulOptions() const {
 8006b42:	b580      	push	{r7, lr}
 8006b44:	b082      	sub	sp, #8
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_BatchMatMulOptions ? static_cast<const tflite::BatchMatMulOptions *>(builtin_options()) : nullptr;
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f7ff fc08 	bl	8006360 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b65      	cmp	r3, #101	; 0x65
 8006b54:	d104      	bne.n	8006b60 <_ZNK6tflite8Operator37builtin_options_as_BatchMatMulOptionsEv+0x1e>
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f7ff fc11 	bl	800637e <_ZNK6tflite8Operator15builtin_optionsEv>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	e000      	b.n	8006b62 <_ZNK6tflite8Operator37builtin_options_as_BatchMatMulOptionsEv+0x20>
 8006b60:	2300      	movs	r3, #0
  }
 8006b62:	4618      	mov	r0, r3
 8006b64:	3708      	adds	r7, #8
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>:
// parsed op data (e.g., when model parameters are invalid).
class SafeBuiltinDataAllocator {
 public:
  class BuiltinDataDeleter {
   public:
    explicit BuiltinDataDeleter(BuiltinDataAllocator* allocator)
 8006b6a:	b480      	push	{r7}
 8006b6c:	b083      	sub	sp, #12
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
 8006b72:	6039      	str	r1, [r7, #0]
        : allocator_(allocator) {}
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	683a      	ldr	r2, [r7, #0]
 8006b78:	601a      	str	r2, [r3, #0]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	370c      	adds	r7, #12
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>:

    void operator()(void* data) { allocator_->Deallocate(data); }
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	3304      	adds	r3, #4
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	6839      	ldr	r1, [r7, #0]
 8006ba2:	4610      	mov	r0, r2
 8006ba4:	4798      	blx	r3
 8006ba6:	bf00      	nop
 8006ba8:	3708      	adds	r7, #8
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>:
  };

  template <typename T>
  using BuiltinDataPtr = std::unique_ptr<T, BuiltinDataDeleter>;

  explicit SafeBuiltinDataAllocator(BuiltinDataAllocator* allocator)
 8006bae:	b480      	push	{r7}
 8006bb0:	b083      	sub	sp, #12
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
 8006bb6:	6039      	str	r1, [r7, #0]
      : allocator_(allocator) {}
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	683a      	ldr	r2, [r7, #0]
 8006bbc:	601a      	str	r2, [r3, #0]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc>:
// Copies the contents from the flatbuffer int vector `flatbuffer` into the
// int array `buffer`. `flat_vector` and `buffer` represent the same
// configuration operation for a given operation.
TfLiteStatus FlatBufferIntVectorToArray(
    int max_size_of_buffer, const flatbuffers::Vector<int32_t>* flat_vector,
    int* buffer, ErrorReporter* error_reporter, const char* op_name) {
 8006bcc:	b590      	push	{r4, r7, lr}
 8006bce:	b087      	sub	sp, #28
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	607a      	str	r2, [r7, #4]
 8006bd8:	603b      	str	r3, [r7, #0]
  if (!flat_vector) {
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d106      	bne.n	8006bee <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x22>
    TF_LITE_REPORT_ERROR(error_reporter,
 8006be0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006be2:	4917      	ldr	r1, [pc, #92]	; (8006c40 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x74>)
 8006be4:	6838      	ldr	r0, [r7, #0]
 8006be6:	f7fe fbf1 	bl	80053cc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Input array not provided for operation '%s'.\n",
                         op_name);
    return kTfLiteError;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e024      	b.n	8006c38 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x6c>
  } else {
    size_t num_dimensions = flat_vector->size();
 8006bee:	68b8      	ldr	r0, [r7, #8]
 8006bf0:	f002 fea9 	bl	8009946 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8006bf4:	6138      	str	r0, [r7, #16]
    if (num_dimensions > max_size_of_buffer / sizeof(int)) {
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	089b      	lsrs	r3, r3, #2
 8006bfa:	693a      	ldr	r2, [r7, #16]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d906      	bls.n	8006c0e <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x42>
      TF_LITE_REPORT_ERROR(
 8006c00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c02:	4910      	ldr	r1, [pc, #64]	; (8006c44 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x78>)
 8006c04:	6838      	ldr	r0, [r7, #0]
 8006c06:	f7fe fbe1 	bl	80053cc <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter,
          "Found too many dimensions in the input array of operation '%s'.\n",
          op_name);
      return kTfLiteError;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e014      	b.n	8006c38 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x6c>
    } else {
      for (size_t i = 0; i < num_dimensions; ++i) {
 8006c0e:	2300      	movs	r3, #0
 8006c10:	617b      	str	r3, [r7, #20]
 8006c12:	697a      	ldr	r2, [r7, #20]
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d20d      	bcs.n	8006c36 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x6a>
        buffer[i] = flat_vector->Get(i);
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	18d4      	adds	r4, r2, r3
 8006c22:	6979      	ldr	r1, [r7, #20]
 8006c24:	68b8      	ldr	r0, [r7, #8]
 8006c26:	f002 fe9d 	bl	8009964 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	6023      	str	r3, [r4, #0]
      for (size_t i = 0; i < num_dimensions; ++i) {
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	3301      	adds	r3, #1
 8006c32:	617b      	str	r3, [r7, #20]
 8006c34:	e7ed      	b.n	8006c12 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x46>
      }
    }
  }
  return kTfLiteOk;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	371c      	adds	r7, #28
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd90      	pop	{r4, r7, pc}
 8006c40:	08021ef0 	.word	0x08021ef0
 8006c44:	08021f20 	.word	0x08021f20

08006c48 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>:

}  // namespace

TfLiteStatus ConvertTensorType(TensorType tensor_type, TfLiteType* type,
                               ErrorReporter* error_reporter) {
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	4603      	mov	r3, r0
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]
 8006c54:	73fb      	strb	r3, [r7, #15]
  switch (tensor_type) {
 8006c56:	7bfb      	ldrb	r3, [r7, #15]
 8006c58:	2b0a      	cmp	r3, #10
 8006c5a:	d850      	bhi.n	8006cfe <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xb6>
 8006c5c:	a201      	add	r2, pc, #4	; (adr r2, 8006c64 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>)
 8006c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c62:	bf00      	nop
 8006c64:	08006c9b 	.word	0x08006c9b
 8006c68:	08006c91 	.word	0x08006c91
 8006c6c:	08006cb9 	.word	0x08006cb9
 8006c70:	08006cc3 	.word	0x08006cc3
 8006c74:	08006cd7 	.word	0x08006cd7
 8006c78:	08006ce1 	.word	0x08006ce1
 8006c7c:	08006ceb 	.word	0x08006ceb
 8006c80:	08006caf 	.word	0x08006caf
 8006c84:	08006cf5 	.word	0x08006cf5
 8006c88:	08006ccd 	.word	0x08006ccd
 8006c8c:	08006ca5 	.word	0x08006ca5
    case TensorType_FLOAT16:
      *type = kTfLiteFloat16;
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	220a      	movs	r2, #10
 8006c94:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8006c96:	2300      	movs	r3, #0
 8006c98:	e03b      	b.n	8006d12 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_FLOAT32:
      *type = kTfLiteFloat32;
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	e036      	b.n	8006d12 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_FLOAT64:
      *type = kTfLiteFloat64;
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	220b      	movs	r2, #11
 8006ca8:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8006caa:	2300      	movs	r3, #0
 8006cac:	e031      	b.n	8006d12 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_INT16:
      *type = kTfLiteInt16;
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	2207      	movs	r2, #7
 8006cb2:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	e02c      	b.n	8006d12 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_INT32:
      *type = kTfLiteInt32;
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	2202      	movs	r2, #2
 8006cbc:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	e027      	b.n	8006d12 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_UINT8:
      *type = kTfLiteUInt8;
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	2203      	movs	r2, #3
 8006cc6:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	e022      	b.n	8006d12 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_INT8:
      *type = kTfLiteInt8;
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	2209      	movs	r2, #9
 8006cd0:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	e01d      	b.n	8006d12 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_INT64:
      *type = kTfLiteInt64;
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	2204      	movs	r2, #4
 8006cda:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	e018      	b.n	8006d12 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_STRING:
      *type = kTfLiteString;
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	2205      	movs	r2, #5
 8006ce4:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	e013      	b.n	8006d12 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_BOOL:
      *type = kTfLiteBool;
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	2206      	movs	r2, #6
 8006cee:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	e00e      	b.n	8006d12 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_COMPLEX64:
      *type = kTfLiteComplex64;
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	2208      	movs	r2, #8
 8006cf8:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	e009      	b.n	8006d12 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    default:
      *type = kTfLiteNoType;
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	2200      	movs	r2, #0
 8006d02:	701a      	strb	r2, [r3, #0]
      TF_LITE_REPORT_ERROR(error_reporter,
 8006d04:	7bfb      	ldrb	r3, [r7, #15]
 8006d06:	461a      	mov	r2, r3
 8006d08:	4904      	ldr	r1, [pc, #16]	; (8006d1c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xd4>)
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f7fe fb5e 	bl	80053cc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unsupported data type %d in tensor\n", tensor_type);
      return kTfLiteError;
 8006d10:	2301      	movs	r3, #1
  }
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3710      	adds	r7, #16
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	08021f64 	.word	0x08021f64

08006d20 <_ZZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvENKUlNS_7PaddingEE_clESA_>:
// need to be released by calling `free`.`
// If it returns kTfLiteError, `builtin_data` will be `nullptr`.
TfLiteStatus ParseOpData(const Operator* op, BuiltinOperator op_type,
                         ErrorReporter* error_reporter,
                         BuiltinDataAllocator* allocator, void** builtin_data) {
  auto parse_padding = [](Padding padding) {
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	460b      	mov	r3, r1
 8006d2a:	70fb      	strb	r3, [r7, #3]
    switch (padding) {
 8006d2c:	78fb      	ldrb	r3, [r7, #3]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d002      	beq.n	8006d38 <_ZZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvENKUlNS_7PaddingEE_clESA_+0x18>
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d002      	beq.n	8006d3c <_ZZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvENKUlNS_7PaddingEE_clESA_+0x1c>
 8006d36:	e003      	b.n	8006d40 <_ZZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvENKUlNS_7PaddingEE_clESA_+0x20>
      case Padding_SAME:
        return kTfLitePaddingSame;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e002      	b.n	8006d42 <_ZZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvENKUlNS_7PaddingEE_clESA_+0x22>
      case Padding_VALID:
        return kTfLitePaddingValid;
 8006d3c:	2302      	movs	r3, #2
 8006d3e:	e000      	b.n	8006d42 <_ZZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvENKUlNS_7PaddingEE_clESA_+0x22>
    }
    return kTfLitePaddingUnknown;
 8006d40:	2300      	movs	r3, #0
  };
 8006d42:	4618      	mov	r0, r3
 8006d44:	370c      	adds	r7, #12
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr
	...

08006d50 <_ZZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvENKUlNS_22ActivationFunctionTypeEE0_clESA_>:
  auto parse_activation = [](ActivationFunctionType activation) {
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	460b      	mov	r3, r1
 8006d5a:	70fb      	strb	r3, [r7, #3]
    switch (activation) {
 8006d5c:	78fb      	ldrb	r3, [r7, #3]
 8006d5e:	2b05      	cmp	r3, #5
 8006d60:	d81a      	bhi.n	8006d98 <_ZZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvENKUlNS_22ActivationFunctionTypeEE0_clESA_+0x48>
 8006d62:	a201      	add	r2, pc, #4	; (adr r2, 8006d68 <_ZZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvENKUlNS_22ActivationFunctionTypeEE0_clESA_+0x18>)
 8006d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d68:	08006d81 	.word	0x08006d81
 8006d6c:	08006d85 	.word	0x08006d85
 8006d70:	08006d89 	.word	0x08006d89
 8006d74:	08006d8d 	.word	0x08006d8d
 8006d78:	08006d91 	.word	0x08006d91
 8006d7c:	08006d95 	.word	0x08006d95
      case ActivationFunctionType_NONE:
        return kTfLiteActNone;
 8006d80:	2300      	movs	r3, #0
 8006d82:	e00a      	b.n	8006d9a <_ZZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvENKUlNS_22ActivationFunctionTypeEE0_clESA_+0x4a>
      case ActivationFunctionType_RELU:
        return kTfLiteActRelu;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e008      	b.n	8006d9a <_ZZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvENKUlNS_22ActivationFunctionTypeEE0_clESA_+0x4a>
      case ActivationFunctionType_RELU_N1_TO_1:
        return kTfLiteActRelu1;
 8006d88:	2302      	movs	r3, #2
 8006d8a:	e006      	b.n	8006d9a <_ZZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvENKUlNS_22ActivationFunctionTypeEE0_clESA_+0x4a>
      case ActivationFunctionType_RELU6:
        return kTfLiteActRelu6;
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	e004      	b.n	8006d9a <_ZZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvENKUlNS_22ActivationFunctionTypeEE0_clESA_+0x4a>
      case ActivationFunctionType_TANH:
        return kTfLiteActTanh;
 8006d90:	2304      	movs	r3, #4
 8006d92:	e002      	b.n	8006d9a <_ZZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvENKUlNS_22ActivationFunctionTypeEE0_clESA_+0x4a>
      case ActivationFunctionType_SIGN_BIT:
        return kTfLiteActSignBit;
 8006d94:	2305      	movs	r3, #5
 8006d96:	e000      	b.n	8006d9a <_ZZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvENKUlNS_22ActivationFunctionTypeEE0_clESA_+0x4a>
    }
    return kTfLiteActNone;
 8006d98:	2300      	movs	r3, #0
  };
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	370c      	adds	r7, #12
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
 8006da6:	bf00      	nop

08006da8 <_ZZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvENKUlNS_17LSHProjectionTypeEE1_clESA_>:
  auto parseLSHProjectionType = [](LSHProjectionType type) {
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	460b      	mov	r3, r1
 8006db2:	70fb      	strb	r3, [r7, #3]
    switch (type) {
 8006db4:	78fb      	ldrb	r3, [r7, #3]
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d002      	beq.n	8006dc0 <_ZZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvENKUlNS_17LSHProjectionTypeEE1_clESA_+0x18>
 8006dba:	2b02      	cmp	r3, #2
 8006dbc:	d002      	beq.n	8006dc4 <_ZZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvENKUlNS_17LSHProjectionTypeEE1_clESA_+0x1c>
 8006dbe:	e003      	b.n	8006dc8 <_ZZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvENKUlNS_17LSHProjectionTypeEE1_clESA_+0x20>
      case LSHProjectionType_SPARSE:
        return kTfLiteLshProjectionSparse;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e002      	b.n	8006dca <_ZZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvENKUlNS_17LSHProjectionTypeEE1_clESA_+0x22>
      case LSHProjectionType_DENSE:
        return kTfLiteLshProjectionDense;
 8006dc4:	2302      	movs	r3, #2
 8006dc6:	e000      	b.n	8006dca <_ZZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvENKUlNS_17LSHProjectionTypeEE1_clESA_+0x22>
      default:
        return kTfLiteLshProjectionUnknown;
 8006dc8:	2300      	movs	r3, #0
    }
  };
 8006dca:	4618      	mov	r0, r3
 8006dcc:	370c      	adds	r7, #12
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr

08006dd6 <_ZZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvENKUlNS_12CombinerTypeEE2_clESA_>:
  auto parseCombinerType = [](CombinerType type) {
 8006dd6:	b480      	push	{r7}
 8006dd8:	b083      	sub	sp, #12
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
 8006dde:	460b      	mov	r3, r1
 8006de0:	70fb      	strb	r3, [r7, #3]
    switch (type) {
 8006de2:	78fb      	ldrb	r3, [r7, #3]
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d002      	beq.n	8006dee <_ZZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvENKUlNS_12CombinerTypeEE2_clESA_+0x18>
 8006de8:	2b02      	cmp	r3, #2
 8006dea:	d002      	beq.n	8006df2 <_ZZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvENKUlNS_12CombinerTypeEE2_clESA_+0x1c>
 8006dec:	e003      	b.n	8006df6 <_ZZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvENKUlNS_12CombinerTypeEE2_clESA_+0x20>
      case CombinerType_MEAN:
        return kTfLiteCombinerTypeMean;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e002      	b.n	8006df8 <_ZZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvENKUlNS_12CombinerTypeEE2_clESA_+0x22>
      case CombinerType_SQRTN:
        return kTfLiteCombinerTypeSqrtn;
 8006df2:	2302      	movs	r3, #2
 8006df4:	e000      	b.n	8006df8 <_ZZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvENKUlNS_12CombinerTypeEE2_clESA_+0x22>
      case CombinerType_SUM:
      default:
        return kTfLiteCombinerTypeSum;
 8006df6:	2300      	movs	r3, #0
    }
  };
 8006df8:	4618      	mov	r0, r3
 8006dfa:	370c      	adds	r7, #12
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                         BuiltinDataAllocator* allocator, void** builtin_data) {
 8006e04:	b5b0      	push	{r4, r5, r7, lr}
 8006e06:	f5ad 7d2a 	sub.w	sp, sp, #680	; 0x2a8
 8006e0a:	af02      	add	r7, sp, #8
 8006e0c:	f107 040c 	add.w	r4, r7, #12
 8006e10:	6020      	str	r0, [r4, #0]
 8006e12:	4608      	mov	r0, r1
 8006e14:	1d39      	adds	r1, r7, #4
 8006e16:	600a      	str	r2, [r1, #0]
 8006e18:	463a      	mov	r2, r7
 8006e1a:	6013      	str	r3, [r2, #0]
 8006e1c:	f107 030b 	add.w	r3, r7, #11
 8006e20:	4602      	mov	r2, r0
 8006e22:	701a      	strb	r2, [r3, #0]

  SafeBuiltinDataAllocator safe_allocator(allocator);
 8006e24:	463b      	mov	r3, r7
 8006e26:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8006e2a:	6819      	ldr	r1, [r3, #0]
 8006e2c:	4610      	mov	r0, r2
 8006e2e:	f7ff febe 	bl	8006bae <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>
  *builtin_data = nullptr;
 8006e32:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8006e36:	2200      	movs	r2, #0
 8006e38:	601a      	str	r2, [r3, #0]
  switch (op_type) {
 8006e3a:	f107 030b 	add.w	r3, r7, #11
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	2b7e      	cmp	r3, #126	; 0x7e
 8006e42:	f202 84d4 	bhi.w	80097ee <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29ea>
 8006e46:	a201      	add	r2, pc, #4	; (adr r2, 8006e4c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x48>)
 8006e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e4c:	08007cc3 	.word	0x08007cc3
 8006e50:	08007309 	.word	0x08007309
 8006e54:	08007b4f 	.word	0x08007b4f
 8006e58:	08007049 	.word	0x08007049
 8006e5c:	08007441 	.word	0x08007441
 8006e60:	080087e5 	.word	0x080087e5
 8006e64:	080097eb 	.word	0x080097eb
 8006e68:	080097eb 	.word	0x080097eb
 8006e6c:	080097eb 	.word	0x080097eb
 8006e70:	08007991 	.word	0x08007991
 8006e74:	08007aaf 	.word	0x08007aaf
 8006e78:	08007eb5 	.word	0x08007eb5
 8006e7c:	08007309 	.word	0x08007309
 8006e80:	08007f5b 	.word	0x08007f5b
 8006e84:	080097eb 	.word	0x080097eb
 8006e88:	08007265 	.word	0x08007265
 8006e8c:	08008051 	.word	0x08008051
 8006e90:	08007309 	.word	0x08007309
 8006e94:	08007c1d 	.word	0x08007c1d
 8006e98:	080097eb 	.word	0x080097eb
 8006e9c:	080097eb 	.word	0x080097eb
 8006ea0:	080097eb 	.word	0x080097eb
 8006ea4:	08008595 	.word	0x08008595
 8006ea8:	080083f5 	.word	0x080083f5
 8006eac:	0800782d 	.word	0x0800782d
 8006eb0:	08007ab5 	.word	0x08007ab5
 8006eb4:	0800873f 	.word	0x0800873f
 8006eb8:	08007587 	.word	0x08007587
 8006ebc:	080097eb 	.word	0x080097eb
 8006ec0:	080097eb 	.word	0x080097eb
 8006ec4:	08008679 	.word	0x08008679
 8006ec8:	080097eb 	.word	0x080097eb
 8006ecc:	080097eb 	.word	0x080097eb
 8006ed0:	080078eb 	.word	0x080078eb
 8006ed4:	080097eb 	.word	0x080097eb
 8006ed8:	0800765d 	.word	0x0800765d
 8006edc:	0800887b 	.word	0x0800887b
 8006ee0:	080097eb 	.word	0x080097eb
 8006ee4:	080097eb 	.word	0x080097eb
 8006ee8:	080097eb 	.word	0x080097eb
 8006eec:	08008921 	.word	0x08008921
 8006ef0:	08007e0f 	.word	0x08007e0f
 8006ef4:	08007d69 	.word	0x08007d69
 8006ef8:	08008ae3 	.word	0x08008ae3
 8006efc:	080081ab 	.word	0x080081ab
 8006f00:	08008bcb 	.word	0x08008bcb
 8006f04:	08007733 	.word	0x08007733
 8006f08:	080097eb 	.word	0x080097eb
 8006f0c:	080097eb 	.word	0x080097eb
 8006f10:	080089b7 	.word	0x080089b7
 8006f14:	080097eb 	.word	0x080097eb
 8006f18:	08009111 	.word	0x08009111
 8006f1c:	080082b9 	.word	0x080082b9
 8006f20:	08007175 	.word	0x08007175
 8006f24:	080097eb 	.word	0x080097eb
 8006f28:	080097eb 	.word	0x080097eb
 8006f2c:	08008cc1 	.word	0x08008cc1
 8006f30:	080097eb 	.word	0x080097eb
 8006f34:	080097eb 	.word	0x080097eb
 8006f38:	080097eb 	.word	0x080097eb
 8006f3c:	080097eb 	.word	0x080097eb
 8006f40:	080097eb 	.word	0x080097eb
 8006f44:	080097eb 	.word	0x080097eb
 8006f48:	080097eb 	.word	0x080097eb
 8006f4c:	080097eb 	.word	0x080097eb
 8006f50:	080097eb 	.word	0x080097eb
 8006f54:	080097eb 	.word	0x080097eb
 8006f58:	08008e31 	.word	0x08008e31
 8006f5c:	08008f19 	.word	0x08008f19
 8006f60:	080097eb 	.word	0x080097eb
 8006f64:	080097eb 	.word	0x080097eb
 8006f68:	080097eb 	.word	0x080097eb
 8006f6c:	080097eb 	.word	0x080097eb
 8006f70:	080097eb 	.word	0x080097eb
 8006f74:	08008921 	.word	0x08008921
 8006f78:	080097eb 	.word	0x080097eb
 8006f7c:	080097eb 	.word	0x080097eb
 8006f80:	08008faf 	.word	0x08008faf
 8006f84:	080097eb 	.word	0x080097eb
 8006f88:	08008d79 	.word	0x08008d79
 8006f8c:	08009121 	.word	0x08009121
 8006f90:	08008921 	.word	0x08008921
 8006f94:	08008921 	.word	0x08008921
 8006f98:	08009065 	.word	0x08009065
 8006f9c:	080097eb 	.word	0x080097eb
 8006fa0:	08009205 	.word	0x08009205
 8006fa4:	080097eb 	.word	0x080097eb
 8006fa8:	080097eb 	.word	0x080097eb
 8006fac:	080092a9 	.word	0x080092a9
 8006fb0:	08008921 	.word	0x08008921
 8006fb4:	080097eb 	.word	0x080097eb
 8006fb8:	08008921 	.word	0x08008921
 8006fbc:	080097eb 	.word	0x080097eb
 8006fc0:	080097eb 	.word	0x080097eb
 8006fc4:	080097eb 	.word	0x080097eb
 8006fc8:	080097eb 	.word	0x080097eb
 8006fcc:	080097eb 	.word	0x080097eb
 8006fd0:	080084c5 	.word	0x080084c5
 8006fd4:	08009355 	.word	0x08009355
 8006fd8:	080097eb 	.word	0x080097eb
 8006fdc:	080093ed 	.word	0x080093ed
 8006fe0:	080097eb 	.word	0x080097eb
 8006fe4:	08008a4d 	.word	0x08008a4d
 8006fe8:	0800948d 	.word	0x0800948d
 8006fec:	080097eb 	.word	0x080097eb
 8006ff0:	080097eb 	.word	0x080097eb
 8006ff4:	080097eb 	.word	0x080097eb
 8006ff8:	080097eb 	.word	0x080097eb
 8006ffc:	080097eb 	.word	0x080097eb
 8007000:	080097eb 	.word	0x080097eb
 8007004:	080097eb 	.word	0x080097eb
 8007008:	080097eb 	.word	0x080097eb
 800700c:	0800952d 	.word	0x0800952d
 8007010:	080097eb 	.word	0x080097eb
 8007014:	080097eb 	.word	0x080097eb
 8007018:	080097eb 	.word	0x080097eb
 800701c:	080097eb 	.word	0x080097eb
 8007020:	080097eb 	.word	0x080097eb
 8007024:	080095d9 	.word	0x080095d9
 8007028:	08009693 	.word	0x08009693
 800702c:	080097eb 	.word	0x080097eb
 8007030:	080097eb 	.word	0x080097eb
 8007034:	080097eb 	.word	0x080097eb
 8007038:	080097eb 	.word	0x080097eb
 800703c:	080097eb 	.word	0x080097eb
 8007040:	080097eb 	.word	0x080097eb
 8007044:	0800973f 	.word	0x0800973f
    case BuiltinOperator_CONV_2D: {
      auto params = safe_allocator.Allocate<TfLiteConvParams>();
 8007048:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800704c:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8007050:	4611      	mov	r1, r2
 8007052:	4618      	mov	r0, r3
 8007054:	f002 fcac 	bl	80099b0 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI16TfLiteConvParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
 8007058:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800705c:	2100      	movs	r1, #0
 800705e:	4618      	mov	r0, r3
 8007060:	f002 fce3 	bl	8009a2a <_ZStneI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8007064:	4603      	mov	r3, r0
 8007066:	f083 0301 	eor.w	r3, r3, #1
 800706a:	b2db      	uxtb	r3, r3
 800706c:	2b00      	cmp	r3, #0
 800706e:	d00d      	beq.n	800708c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x288>
 8007070:	1d3b      	adds	r3, r7, #4
 8007072:	6818      	ldr	r0, [r3, #0]
 8007074:	1d3b      	adds	r3, r7, #4
 8007076:	6819      	ldr	r1, [r3, #0]
 8007078:	4bb4      	ldr	r3, [pc, #720]	; (800734c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x548>)
 800707a:	9301      	str	r3, [sp, #4]
 800707c:	23c8      	movs	r3, #200	; 0xc8
 800707e:	9300      	str	r3, [sp, #0]
 8007080:	4bb3      	ldr	r3, [pc, #716]	; (8007350 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x54c>)
 8007082:	4ab4      	ldr	r2, [pc, #720]	; (8007354 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x550>)
 8007084:	f7fe f9bb 	bl	80053fe <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8007088:	2401      	movs	r4, #1
 800708a:	e06c      	b.n	8007166 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x362>
      if (auto* conv_params = op->builtin_options_as_Conv2DOptions()) {
 800708c:	f107 030c 	add.w	r3, r7, #12
 8007090:	6818      	ldr	r0, [r3, #0]
 8007092:	f7ff f982 	bl	800639a <_ZNK6tflite8Operator32builtin_options_as_Conv2DOptionsEv>
 8007096:	f8c7 01c4 	str.w	r0, [r7, #452]	; 0x1c4
 800709a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d057      	beq.n	8007152 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x34e>
        params->padding = parse_padding(conv_params->padding());
 80070a2:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 80070a6:	f7fe f9d0 	bl	800544a <_ZNK6tflite13Conv2DOptions7paddingEv>
 80070aa:	4603      	mov	r3, r0
 80070ac:	461d      	mov	r5, r3
 80070ae:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80070b2:	4618      	mov	r0, r3
 80070b4:	f002 fcc6 	bl	8009a44 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80070b8:	4604      	mov	r4, r0
 80070ba:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 80070be:	4629      	mov	r1, r5
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7ff fe2d 	bl	8006d20 <_ZZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvENKUlNS_7PaddingEE_clESA_>
 80070c6:	4603      	mov	r3, r0
 80070c8:	7023      	strb	r3, [r4, #0]
        params->stride_width = conv_params->stride_w();
 80070ca:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80070ce:	4618      	mov	r0, r3
 80070d0:	f002 fcb8 	bl	8009a44 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80070d4:	4604      	mov	r4, r0
 80070d6:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 80070da:	f7fe f9c6 	bl	800546a <_ZNK6tflite13Conv2DOptions8stride_wEv>
 80070de:	4603      	mov	r3, r0
 80070e0:	6063      	str	r3, [r4, #4]
        params->stride_height = conv_params->stride_h();
 80070e2:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80070e6:	4618      	mov	r0, r3
 80070e8:	f002 fcac 	bl	8009a44 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80070ec:	4604      	mov	r4, r0
 80070ee:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 80070f2:	f7fe f9c9 	bl	8005488 <_ZNK6tflite13Conv2DOptions8stride_hEv>
 80070f6:	4603      	mov	r3, r0
 80070f8:	60a3      	str	r3, [r4, #8]
        params->activation =
            parse_activation(conv_params->fused_activation_function());
 80070fa:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 80070fe:	f7fe f9d2 	bl	80054a6 <_ZNK6tflite13Conv2DOptions25fused_activation_functionEv>
 8007102:	4603      	mov	r3, r0
 8007104:	461d      	mov	r5, r3
        params->activation =
 8007106:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800710a:	4618      	mov	r0, r3
 800710c:	f002 fc9a 	bl	8009a44 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8007110:	4604      	mov	r4, r0
            parse_activation(conv_params->fused_activation_function());
 8007112:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8007116:	4629      	mov	r1, r5
 8007118:	4618      	mov	r0, r3
 800711a:	f7ff fe19 	bl	8006d50 <_ZZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvENKUlNS_22ActivationFunctionTypeEE0_clESA_>
 800711e:	4603      	mov	r3, r0
        params->activation =
 8007120:	7323      	strb	r3, [r4, #12]

        params->dilation_width_factor = conv_params->dilation_w_factor();
 8007122:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8007126:	4618      	mov	r0, r3
 8007128:	f002 fc8c 	bl	8009a44 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800712c:	4604      	mov	r4, r0
 800712e:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 8007132:	f7fe f9c8 	bl	80054c6 <_ZNK6tflite13Conv2DOptions17dilation_w_factorEv>
 8007136:	4603      	mov	r3, r0
 8007138:	6123      	str	r3, [r4, #16]
        params->dilation_height_factor = conv_params->dilation_h_factor();
 800713a:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800713e:	4618      	mov	r0, r3
 8007140:	f002 fc80 	bl	8009a44 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8007144:	4604      	mov	r4, r0
 8007146:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 800714a:	f7fe f9cb 	bl	80054e4 <_ZNK6tflite13Conv2DOptions17dilation_h_factorEv>
 800714e:	4603      	mov	r3, r0
 8007150:	6163      	str	r3, [r4, #20]
      }
      *builtin_data = params.release();
 8007152:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8007156:	4618      	mov	r0, r3
 8007158:	f002 fc80 	bl	8009a5c <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 800715c:	4602      	mov	r2, r0
 800715e:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8007162:	601a      	str	r2, [r3, #0]
      return kTfLiteOk;
 8007164:	2400      	movs	r4, #0
      auto params = safe_allocator.Allocate<TfLiteConvParams>();
 8007166:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800716a:	4618      	mov	r0, r3
 800716c:	f002 fc3e 	bl	80099ec <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8007170:	f002 bb3e 	b.w	80097f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29ec>
    }
    case BuiltinOperator_CAST: {
      auto params = safe_allocator.Allocate<TfLiteCastParams>();
 8007174:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8007178:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800717c:	4611      	mov	r1, r2
 800717e:	4618      	mov	r0, r3
 8007180:	f002 fc80 	bl	8009a84 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI16TfLiteCastParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
 8007184:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8007188:	2100      	movs	r1, #0
 800718a:	4618      	mov	r0, r3
 800718c:	f002 fcb7 	bl	8009afe <_ZStneI16TfLiteCastParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8007190:	4603      	mov	r3, r0
 8007192:	f083 0301 	eor.w	r3, r3, #1
 8007196:	b2db      	uxtb	r3, r3
 8007198:	2b00      	cmp	r3, #0
 800719a:	d00d      	beq.n	80071b8 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3b4>
 800719c:	1d3b      	adds	r3, r7, #4
 800719e:	6818      	ldr	r0, [r3, #0]
 80071a0:	1d3b      	adds	r3, r7, #4
 80071a2:	6819      	ldr	r1, [r3, #0]
 80071a4:	4b69      	ldr	r3, [pc, #420]	; (800734c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x548>)
 80071a6:	9301      	str	r3, [sp, #4]
 80071a8:	23d8      	movs	r3, #216	; 0xd8
 80071aa:	9300      	str	r3, [sp, #0]
 80071ac:	4b68      	ldr	r3, [pc, #416]	; (8007350 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x54c>)
 80071ae:	4a69      	ldr	r2, [pc, #420]	; (8007354 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x550>)
 80071b0:	f7fe f925 	bl	80053fe <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 80071b4:	2401      	movs	r4, #1
 80071b6:	e04e      	b.n	8007256 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x452>
      if (const auto* schema_params = op->builtin_options_as_CastOptions()) {
 80071b8:	f107 030c 	add.w	r3, r7, #12
 80071bc:	6818      	ldr	r0, [r3, #0]
 80071be:	f7ff fb08 	bl	80067d2 <_ZNK6tflite8Operator30builtin_options_as_CastOptionsEv>
 80071c2:	f8c7 0248 	str.w	r0, [r7, #584]	; 0x248
 80071c6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d039      	beq.n	8007242 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x43e>
        TF_LITE_ENSURE_STATUS(ConvertTensorType(schema_params->in_data_type(),
 80071ce:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 80071d2:	f7fe fee7 	bl	8005fa4 <_ZNK6tflite11CastOptions12in_data_typeEv>
 80071d6:	4603      	mov	r3, r0
 80071d8:	461c      	mov	r4, r3
 80071da:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 80071de:	4618      	mov	r0, r3
 80071e0:	f002 fc9a 	bl	8009b18 <_ZNKSt10unique_ptrI16TfLiteCastParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80071e4:	4603      	mov	r3, r0
 80071e6:	4619      	mov	r1, r3
 80071e8:	1d3b      	adds	r3, r7, #4
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	461a      	mov	r2, r3
 80071ee:	4620      	mov	r0, r4
 80071f0:	f7ff fd2a 	bl	8006c48 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 80071f4:	4603      	mov	r3, r0
 80071f6:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
 80071fa:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d002      	beq.n	8007208 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x404>
 8007202:	f897 4247 	ldrb.w	r4, [r7, #583]	; 0x247
 8007206:	e026      	b.n	8007256 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x452>
                                                &params->in_data_type,
                                                error_reporter));
        TF_LITE_ENSURE_STATUS(ConvertTensorType(schema_params->out_data_type(),
 8007208:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 800720c:	f7fe feda 	bl	8005fc4 <_ZNK6tflite11CastOptions13out_data_typeEv>
 8007210:	4603      	mov	r3, r0
 8007212:	461c      	mov	r4, r3
 8007214:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8007218:	4618      	mov	r0, r3
 800721a:	f002 fc7d 	bl	8009b18 <_ZNKSt10unique_ptrI16TfLiteCastParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800721e:	4603      	mov	r3, r0
 8007220:	1c59      	adds	r1, r3, #1
 8007222:	1d3b      	adds	r3, r7, #4
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	461a      	mov	r2, r3
 8007228:	4620      	mov	r0, r4
 800722a:	f7ff fd0d 	bl	8006c48 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 800722e:	4603      	mov	r3, r0
 8007230:	f887 3246 	strb.w	r3, [r7, #582]	; 0x246
 8007234:	f897 3246 	ldrb.w	r3, [r7, #582]	; 0x246
 8007238:	2b00      	cmp	r3, #0
 800723a:	d002      	beq.n	8007242 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x43e>
 800723c:	f897 4246 	ldrb.w	r4, [r7, #582]	; 0x246
 8007240:	e009      	b.n	8007256 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x452>
                                                &params->out_data_type,
                                                error_reporter));
      }
      *builtin_data = params.release();
 8007242:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8007246:	4618      	mov	r0, r3
 8007248:	f002 fc72 	bl	8009b30 <_ZNSt10unique_ptrI16TfLiteCastParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 800724c:	4602      	mov	r2, r0
 800724e:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8007252:	601a      	str	r2, [r3, #0]
      return kTfLiteOk;
 8007254:	2400      	movs	r4, #0
      auto params = safe_allocator.Allocate<TfLiteCastParams>();
 8007256:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800725a:	4618      	mov	r0, r3
 800725c:	f002 fc30 	bl	8009ac0 <_ZNSt10unique_ptrI16TfLiteCastParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8007260:	f002 bac6 	b.w	80097f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29ec>
    }
    case BuiltinOperator_LSH_PROJECTION: {
      auto params = safe_allocator.Allocate<TfLiteLSHProjectionParams>();
 8007264:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8007268:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800726c:	4611      	mov	r1, r2
 800726e:	4618      	mov	r0, r3
 8007270:	f002 fc72 	bl	8009b58 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI25TfLiteLSHProjectionParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
 8007274:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8007278:	2100      	movs	r1, #0
 800727a:	4618      	mov	r0, r3
 800727c:	f002 fca9 	bl	8009bd2 <_ZStneI25TfLiteLSHProjectionParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8007280:	4603      	mov	r3, r0
 8007282:	f083 0301 	eor.w	r3, r3, #1
 8007286:	b2db      	uxtb	r3, r3
 8007288:	2b00      	cmp	r3, #0
 800728a:	d00d      	beq.n	80072a8 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4a4>
 800728c:	1d3b      	adds	r3, r7, #4
 800728e:	6818      	ldr	r0, [r3, #0]
 8007290:	1d3b      	adds	r3, r7, #4
 8007292:	6819      	ldr	r1, [r3, #0]
 8007294:	4b2d      	ldr	r3, [pc, #180]	; (800734c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x548>)
 8007296:	9301      	str	r3, [sp, #4]
 8007298:	23e6      	movs	r3, #230	; 0xe6
 800729a:	9300      	str	r3, [sp, #0]
 800729c:	4b2c      	ldr	r3, [pc, #176]	; (8007350 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x54c>)
 800729e:	4a2d      	ldr	r2, [pc, #180]	; (8007354 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x550>)
 80072a0:	f7fe f8ad 	bl	80053fe <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 80072a4:	2401      	movs	r4, #1
 80072a6:	e028      	b.n	80072fa <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4f6>
      if (const auto* lshParams =
              op->builtin_options_as_LSHProjectionOptions()) {
 80072a8:	f107 030c 	add.w	r3, r7, #12
 80072ac:	6818      	ldr	r0, [r3, #0]
 80072ae:	f7ff f89c 	bl	80063ea <_ZNK6tflite8Operator39builtin_options_as_LSHProjectionOptionsEv>
 80072b2:	f8c7 01dc 	str.w	r0, [r7, #476]	; 0x1dc
      if (const auto* lshParams =
 80072b6:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d013      	beq.n	80072e6 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4e2>
        params->type = parseLSHProjectionType(lshParams->type());
 80072be:	f8d7 01dc 	ldr.w	r0, [r7, #476]	; 0x1dc
 80072c2:	f7fe f9e5 	bl	8005690 <_ZNK6tflite20LSHProjectionOptions4typeEv>
 80072c6:	4603      	mov	r3, r0
 80072c8:	461d      	mov	r5, r3
 80072ca:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 80072ce:	4618      	mov	r0, r3
 80072d0:	f002 fc8c 	bl	8009bec <_ZNKSt10unique_ptrI25TfLiteLSHProjectionParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80072d4:	4604      	mov	r4, r0
 80072d6:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 80072da:	4629      	mov	r1, r5
 80072dc:	4618      	mov	r0, r3
 80072de:	f7ff fd63 	bl	8006da8 <_ZZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvENKUlNS_17LSHProjectionTypeEE1_clESA_>
 80072e2:	4603      	mov	r3, r0
 80072e4:	7023      	strb	r3, [r4, #0]
      }
      *builtin_data = params.release();
 80072e6:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 80072ea:	4618      	mov	r0, r3
 80072ec:	f002 fc8a 	bl	8009c04 <_ZNSt10unique_ptrI25TfLiteLSHProjectionParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 80072f0:	4602      	mov	r2, r0
 80072f2:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 80072f6:	601a      	str	r2, [r3, #0]
      return kTfLiteOk;
 80072f8:	2400      	movs	r4, #0
      auto params = safe_allocator.Allocate<TfLiteLSHProjectionParams>();
 80072fa:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 80072fe:	4618      	mov	r0, r3
 8007300:	f002 fc48 	bl	8009b94 <_ZNSt10unique_ptrI25TfLiteLSHProjectionParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8007304:	f002 ba74 	b.w	80097f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29ec>
    }
    case BuiltinOperator_AVERAGE_POOL_2D:
    case BuiltinOperator_MAX_POOL_2D:
    case BuiltinOperator_L2_POOL_2D: {
      auto params = safe_allocator.Allocate<TfLitePoolParams>();
 8007308:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800730c:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8007310:	4611      	mov	r1, r2
 8007312:	4618      	mov	r0, r3
 8007314:	f002 fc8a 	bl	8009c2c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI16TfLitePoolParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
 8007318:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800731c:	2100      	movs	r1, #0
 800731e:	4618      	mov	r0, r3
 8007320:	f002 fcc1 	bl	8009ca6 <_ZStneI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8007324:	4603      	mov	r3, r0
 8007326:	f083 0301 	eor.w	r3, r3, #1
 800732a:	b2db      	uxtb	r3, r3
 800732c:	2b00      	cmp	r3, #0
 800732e:	d013      	beq.n	8007358 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x554>
 8007330:	1d3b      	adds	r3, r7, #4
 8007332:	6818      	ldr	r0, [r3, #0]
 8007334:	1d3b      	adds	r3, r7, #4
 8007336:	6819      	ldr	r1, [r3, #0]
 8007338:	4b04      	ldr	r3, [pc, #16]	; (800734c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x548>)
 800733a:	9301      	str	r3, [sp, #4]
 800733c:	23f2      	movs	r3, #242	; 0xf2
 800733e:	9300      	str	r3, [sp, #0]
 8007340:	4b03      	ldr	r3, [pc, #12]	; (8007350 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x54c>)
 8007342:	4a04      	ldr	r2, [pc, #16]	; (8007354 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x550>)
 8007344:	f7fe f85b 	bl	80053fe <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8007348:	2401      	movs	r4, #1
 800734a:	e072      	b.n	8007432 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x62e>
 800734c:	08021fe8 	.word	0x08021fe8
 8007350:	08021f88 	.word	0x08021f88
 8007354:	08021fd0 	.word	0x08021fd0
      if (const auto* pool_params = op->builtin_options_as_Pool2DOptions()) {
 8007358:	f107 030c 	add.w	r3, r7, #12
 800735c:	6818      	ldr	r0, [r3, #0]
 800735e:	f7ff f858 	bl	8006412 <_ZNK6tflite8Operator32builtin_options_as_Pool2DOptionsEv>
 8007362:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
 8007366:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800736a:	2b00      	cmp	r3, #0
 800736c:	d057      	beq.n	800741e <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x61a>
        params->padding = parse_padding(pool_params->padding());
 800736e:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 8007372:	f7fe f8c6 	bl	8005502 <_ZNK6tflite13Pool2DOptions7paddingEv>
 8007376:	4603      	mov	r3, r0
 8007378:	461d      	mov	r5, r3
 800737a:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800737e:	4618      	mov	r0, r3
 8007380:	f002 fc9e 	bl	8009cc0 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8007384:	4604      	mov	r4, r0
 8007386:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 800738a:	4629      	mov	r1, r5
 800738c:	4618      	mov	r0, r3
 800738e:	f7ff fcc7 	bl	8006d20 <_ZZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvENKUlNS_7PaddingEE_clESA_>
 8007392:	4603      	mov	r3, r0
 8007394:	7023      	strb	r3, [r4, #0]
        params->stride_width = pool_params->stride_w();
 8007396:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800739a:	4618      	mov	r0, r3
 800739c:	f002 fc90 	bl	8009cc0 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80073a0:	4604      	mov	r4, r0
 80073a2:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 80073a6:	f7fe f8bc 	bl	8005522 <_ZNK6tflite13Pool2DOptions8stride_wEv>
 80073aa:	4603      	mov	r3, r0
 80073ac:	6063      	str	r3, [r4, #4]
        params->stride_height = pool_params->stride_h();
 80073ae:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 80073b2:	4618      	mov	r0, r3
 80073b4:	f002 fc84 	bl	8009cc0 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80073b8:	4604      	mov	r4, r0
 80073ba:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 80073be:	f7fe f8bf 	bl	8005540 <_ZNK6tflite13Pool2DOptions8stride_hEv>
 80073c2:	4603      	mov	r3, r0
 80073c4:	60a3      	str	r3, [r4, #8]
        params->filter_width = pool_params->filter_width();
 80073c6:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 80073ca:	4618      	mov	r0, r3
 80073cc:	f002 fc78 	bl	8009cc0 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80073d0:	4604      	mov	r4, r0
 80073d2:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 80073d6:	f7fe f8c2 	bl	800555e <_ZNK6tflite13Pool2DOptions12filter_widthEv>
 80073da:	4603      	mov	r3, r0
 80073dc:	60e3      	str	r3, [r4, #12]
        params->filter_height = pool_params->filter_height();
 80073de:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 80073e2:	4618      	mov	r0, r3
 80073e4:	f002 fc6c 	bl	8009cc0 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80073e8:	4604      	mov	r4, r0
 80073ea:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 80073ee:	f7fe f8c5 	bl	800557c <_ZNK6tflite13Pool2DOptions13filter_heightEv>
 80073f2:	4603      	mov	r3, r0
 80073f4:	6123      	str	r3, [r4, #16]
        params->activation =
            parse_activation(pool_params->fused_activation_function());
 80073f6:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 80073fa:	f7fe f8ce 	bl	800559a <_ZNK6tflite13Pool2DOptions25fused_activation_functionEv>
 80073fe:	4603      	mov	r3, r0
 8007400:	461d      	mov	r5, r3
        params->activation =
 8007402:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8007406:	4618      	mov	r0, r3
 8007408:	f002 fc5a 	bl	8009cc0 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800740c:	4604      	mov	r4, r0
            parse_activation(pool_params->fused_activation_function());
 800740e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8007412:	4629      	mov	r1, r5
 8007414:	4618      	mov	r0, r3
 8007416:	f7ff fc9b 	bl	8006d50 <_ZZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvENKUlNS_22ActivationFunctionTypeEE0_clESA_>
 800741a:	4603      	mov	r3, r0
        params->activation =
 800741c:	7523      	strb	r3, [r4, #20]
      }
      *builtin_data = params.release();
 800741e:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8007422:	4618      	mov	r0, r3
 8007424:	f002 fc58 	bl	8009cd8 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8007428:	4602      	mov	r2, r0
 800742a:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 800742e:	601a      	str	r2, [r3, #0]
      return kTfLiteOk;
 8007430:	2400      	movs	r4, #0
      auto params = safe_allocator.Allocate<TfLitePoolParams>();
 8007432:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8007436:	4618      	mov	r0, r3
 8007438:	f002 fc16 	bl	8009c68 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 800743c:	f002 b9d8 	b.w	80097f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29ec>
    }
    case BuiltinOperator_DEPTHWISE_CONV_2D: {
      auto params = safe_allocator.Allocate<TfLiteDepthwiseConvParams>();
 8007440:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8007444:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8007448:	4611      	mov	r1, r2
 800744a:	4618      	mov	r0, r3
 800744c:	f002 fc58 	bl	8009d00 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI25TfLiteDepthwiseConvParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
 8007450:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8007454:	2100      	movs	r1, #0
 8007456:	4618      	mov	r0, r3
 8007458:	f002 fc8f 	bl	8009d7a <_ZStneI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 800745c:	4603      	mov	r3, r0
 800745e:	f083 0301 	eor.w	r3, r3, #1
 8007462:	b2db      	uxtb	r3, r3
 8007464:	2b00      	cmp	r3, #0
 8007466:	d00e      	beq.n	8007486 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x682>
 8007468:	1d3b      	adds	r3, r7, #4
 800746a:	6818      	ldr	r0, [r3, #0]
 800746c:	1d3b      	adds	r3, r7, #4
 800746e:	6819      	ldr	r1, [r3, #0]
 8007470:	4bc1      	ldr	r3, [pc, #772]	; (8007778 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x974>)
 8007472:	9301      	str	r3, [sp, #4]
 8007474:	f240 1301 	movw	r3, #257	; 0x101
 8007478:	9300      	str	r3, [sp, #0]
 800747a:	4bc0      	ldr	r3, [pc, #768]	; (800777c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x978>)
 800747c:	4ac0      	ldr	r2, [pc, #768]	; (8007780 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x97c>)
 800747e:	f7fd ffbe 	bl	80053fe <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8007482:	2401      	movs	r4, #1
 8007484:	e078      	b.n	8007578 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x774>
      if (const auto* conv_params =
              op->builtin_options_as_DepthwiseConv2DOptions()) {
 8007486:	f107 030c 	add.w	r3, r7, #12
 800748a:	6818      	ldr	r0, [r3, #0]
 800748c:	f7fe ff99 	bl	80063c2 <_ZNK6tflite8Operator41builtin_options_as_DepthwiseConv2DOptionsEv>
 8007490:	f8c7 01c8 	str.w	r0, [r7, #456]	; 0x1c8
      if (const auto* conv_params =
 8007494:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8007498:	2b00      	cmp	r3, #0
 800749a:	d063      	beq.n	8007564 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x760>
        params->padding = parse_padding(conv_params->padding());
 800749c:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 80074a0:	f7fe f88b 	bl	80055ba <_ZNK6tflite22DepthwiseConv2DOptions7paddingEv>
 80074a4:	4603      	mov	r3, r0
 80074a6:	461d      	mov	r5, r3
 80074a8:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80074ac:	4618      	mov	r0, r3
 80074ae:	f002 fc71 	bl	8009d94 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80074b2:	4604      	mov	r4, r0
 80074b4:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 80074b8:	4629      	mov	r1, r5
 80074ba:	4618      	mov	r0, r3
 80074bc:	f7ff fc30 	bl	8006d20 <_ZZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvENKUlNS_7PaddingEE_clESA_>
 80074c0:	4603      	mov	r3, r0
 80074c2:	7023      	strb	r3, [r4, #0]
        params->stride_width = conv_params->stride_w();
 80074c4:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80074c8:	4618      	mov	r0, r3
 80074ca:	f002 fc63 	bl	8009d94 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80074ce:	4604      	mov	r4, r0
 80074d0:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 80074d4:	f7fe f881 	bl	80055da <_ZNK6tflite22DepthwiseConv2DOptions8stride_wEv>
 80074d8:	4603      	mov	r3, r0
 80074da:	6063      	str	r3, [r4, #4]
        params->stride_height = conv_params->stride_h();
 80074dc:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80074e0:	4618      	mov	r0, r3
 80074e2:	f002 fc57 	bl	8009d94 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80074e6:	4604      	mov	r4, r0
 80074e8:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 80074ec:	f7fe f884 	bl	80055f8 <_ZNK6tflite22DepthwiseConv2DOptions8stride_hEv>
 80074f0:	4603      	mov	r3, r0
 80074f2:	60a3      	str	r3, [r4, #8]
        params->depth_multiplier = conv_params->depth_multiplier();
 80074f4:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80074f8:	4618      	mov	r0, r3
 80074fa:	f002 fc4b 	bl	8009d94 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80074fe:	4604      	mov	r4, r0
 8007500:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8007504:	f7fe f887 	bl	8005616 <_ZNK6tflite22DepthwiseConv2DOptions16depth_multiplierEv>
 8007508:	4603      	mov	r3, r0
 800750a:	60e3      	str	r3, [r4, #12]
        params->activation =
            parse_activation(conv_params->fused_activation_function());
 800750c:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8007510:	f7fe f890 	bl	8005634 <_ZNK6tflite22DepthwiseConv2DOptions25fused_activation_functionEv>
 8007514:	4603      	mov	r3, r0
 8007516:	461d      	mov	r5, r3
        params->activation =
 8007518:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800751c:	4618      	mov	r0, r3
 800751e:	f002 fc39 	bl	8009d94 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8007522:	4604      	mov	r4, r0
            parse_activation(conv_params->fused_activation_function());
 8007524:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8007528:	4629      	mov	r1, r5
 800752a:	4618      	mov	r0, r3
 800752c:	f7ff fc10 	bl	8006d50 <_ZZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvENKUlNS_22ActivationFunctionTypeEE0_clESA_>
 8007530:	4603      	mov	r3, r0
        params->activation =
 8007532:	7423      	strb	r3, [r4, #16]

        params->dilation_width_factor = conv_params->dilation_w_factor();
 8007534:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8007538:	4618      	mov	r0, r3
 800753a:	f002 fc2b 	bl	8009d94 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800753e:	4604      	mov	r4, r0
 8007540:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8007544:	f7fe f886 	bl	8005654 <_ZNK6tflite22DepthwiseConv2DOptions17dilation_w_factorEv>
 8007548:	4603      	mov	r3, r0
 800754a:	6163      	str	r3, [r4, #20]
        params->dilation_height_factor = conv_params->dilation_h_factor();
 800754c:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8007550:	4618      	mov	r0, r3
 8007552:	f002 fc1f 	bl	8009d94 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8007556:	4604      	mov	r4, r0
 8007558:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 800755c:	f7fe f889 	bl	8005672 <_ZNK6tflite22DepthwiseConv2DOptions17dilation_h_factorEv>
 8007560:	4603      	mov	r3, r0
 8007562:	61a3      	str	r3, [r4, #24]
      }
      *builtin_data = params.release();
 8007564:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8007568:	4618      	mov	r0, r3
 800756a:	f002 fc1f 	bl	8009dac <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 800756e:	4602      	mov	r2, r0
 8007570:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8007574:	601a      	str	r2, [r3, #0]
      return kTfLiteOk;
 8007576:	2400      	movs	r4, #0
      auto params = safe_allocator.Allocate<TfLiteDepthwiseConvParams>();
 8007578:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800757c:	4618      	mov	r0, r3
 800757e:	f002 fbdd 	bl	8009d3c <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8007582:	f002 b935 	b.w	80097f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29ec>
    }
    case BuiltinOperator_SVDF: {
      auto params = safe_allocator.Allocate<TfLiteSVDFParams>();
 8007586:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 800758a:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800758e:	4611      	mov	r1, r2
 8007590:	4618      	mov	r0, r3
 8007592:	f002 fc1f 	bl	8009dd4 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI16TfLiteSVDFParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
 8007596:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 800759a:	2100      	movs	r1, #0
 800759c:	4618      	mov	r0, r3
 800759e:	f002 fc56 	bl	8009e4e <_ZStneI16TfLiteSVDFParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 80075a2:	4603      	mov	r3, r0
 80075a4:	f083 0301 	eor.w	r3, r3, #1
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d00e      	beq.n	80075cc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7c8>
 80075ae:	1d3b      	adds	r3, r7, #4
 80075b0:	6818      	ldr	r0, [r3, #0]
 80075b2:	1d3b      	adds	r3, r7, #4
 80075b4:	6819      	ldr	r1, [r3, #0]
 80075b6:	4b70      	ldr	r3, [pc, #448]	; (8007778 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x974>)
 80075b8:	9301      	str	r3, [sp, #4]
 80075ba:	f240 1313 	movw	r3, #275	; 0x113
 80075be:	9300      	str	r3, [sp, #0]
 80075c0:	4b6e      	ldr	r3, [pc, #440]	; (800777c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x978>)
 80075c2:	4a6f      	ldr	r2, [pc, #444]	; (8007780 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x97c>)
 80075c4:	f7fd ff1b 	bl	80053fe <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 80075c8:	2401      	movs	r4, #1
 80075ca:	e040      	b.n	800764e <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x84a>
      if (const auto* svdf_params = op->builtin_options_as_SVDFOptions()) {
 80075cc:	f107 030c 	add.w	r3, r7, #12
 80075d0:	6818      	ldr	r0, [r3, #0]
 80075d2:	f7fe ff32 	bl	800643a <_ZNK6tflite8Operator30builtin_options_as_SVDFOptionsEv>
 80075d6:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204
 80075da:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d02b      	beq.n	800763a <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x836>
        params->rank = svdf_params->rank();
 80075e2:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 80075e6:	4618      	mov	r0, r3
 80075e8:	f002 fc3e 	bl	8009e68 <_ZNKSt10unique_ptrI16TfLiteSVDFParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80075ec:	4604      	mov	r4, r0
 80075ee:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 80075f2:	f7fe f85d 	bl	80056b0 <_ZNK6tflite11SVDFOptions4rankEv>
 80075f6:	4603      	mov	r3, r0
 80075f8:	6023      	str	r3, [r4, #0]
        params->activation =
            parse_activation(svdf_params->fused_activation_function());
 80075fa:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 80075fe:	f7fe f866 	bl	80056ce <_ZNK6tflite11SVDFOptions25fused_activation_functionEv>
 8007602:	4603      	mov	r3, r0
 8007604:	461d      	mov	r5, r3
        params->activation =
 8007606:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 800760a:	4618      	mov	r0, r3
 800760c:	f002 fc2c 	bl	8009e68 <_ZNKSt10unique_ptrI16TfLiteSVDFParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8007610:	4604      	mov	r4, r0
            parse_activation(svdf_params->fused_activation_function());
 8007612:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8007616:	4629      	mov	r1, r5
 8007618:	4618      	mov	r0, r3
 800761a:	f7ff fb99 	bl	8006d50 <_ZZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvENKUlNS_22ActivationFunctionTypeEE0_clESA_>
 800761e:	4603      	mov	r3, r0
        params->activation =
 8007620:	7123      	strb	r3, [r4, #4]
        params->asymmetric_quantize_inputs =
 8007622:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8007626:	4618      	mov	r0, r3
 8007628:	f002 fc1e 	bl	8009e68 <_ZNKSt10unique_ptrI16TfLiteSVDFParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800762c:	4604      	mov	r4, r0
            svdf_params->asymmetric_quantize_inputs();
 800762e:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 8007632:	f7fe f85c 	bl	80056ee <_ZNK6tflite11SVDFOptions26asymmetric_quantize_inputsEv>
 8007636:	4603      	mov	r3, r0
        params->asymmetric_quantize_inputs =
 8007638:	7163      	strb	r3, [r4, #5]
      }
      *builtin_data = params.release();
 800763a:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 800763e:	4618      	mov	r0, r3
 8007640:	f002 fc1e 	bl	8009e80 <_ZNSt10unique_ptrI16TfLiteSVDFParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8007644:	4602      	mov	r2, r0
 8007646:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 800764a:	601a      	str	r2, [r3, #0]
      return kTfLiteOk;
 800764c:	2400      	movs	r4, #0
      auto params = safe_allocator.Allocate<TfLiteSVDFParams>();
 800764e:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8007652:	4618      	mov	r0, r3
 8007654:	f002 fbdc 	bl	8009e10 <_ZNSt10unique_ptrI16TfLiteSVDFParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8007658:	f002 b8ca 	b.w	80097f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29ec>
    }
    case BuiltinOperator_UNIDIRECTIONAL_SEQUENCE_RNN: {
      auto params = safe_allocator.Allocate<TfLiteSequenceRNNParams>();
 800765c:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8007660:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8007664:	4611      	mov	r1, r2
 8007666:	4618      	mov	r0, r3
 8007668:	f002 fc1e 	bl	8009ea8 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI23TfLiteSequenceRNNParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
 800766c:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8007670:	2100      	movs	r1, #0
 8007672:	4618      	mov	r0, r3
 8007674:	f002 fc55 	bl	8009f22 <_ZStneI23TfLiteSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8007678:	4603      	mov	r3, r0
 800767a:	f083 0301 	eor.w	r3, r3, #1
 800767e:	b2db      	uxtb	r3, r3
 8007680:	2b00      	cmp	r3, #0
 8007682:	d00e      	beq.n	80076a2 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x89e>
 8007684:	1d3b      	adds	r3, r7, #4
 8007686:	6818      	ldr	r0, [r3, #0]
 8007688:	1d3b      	adds	r3, r7, #4
 800768a:	6819      	ldr	r1, [r3, #0]
 800768c:	4b3a      	ldr	r3, [pc, #232]	; (8007778 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x974>)
 800768e:	9301      	str	r3, [sp, #4]
 8007690:	f44f 7390 	mov.w	r3, #288	; 0x120
 8007694:	9300      	str	r3, [sp, #0]
 8007696:	4b39      	ldr	r3, [pc, #228]	; (800777c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x978>)
 8007698:	4a39      	ldr	r2, [pc, #228]	; (8007780 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x97c>)
 800769a:	f7fd feb0 	bl	80053fe <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 800769e:	2401      	movs	r4, #1
 80076a0:	e040      	b.n	8007724 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x920>
      if (const auto* sequence_rnn_params =
              op->builtin_options_as_SequenceRNNOptions()) {
 80076a2:	f107 030c 	add.w	r3, r7, #12
 80076a6:	6818      	ldr	r0, [r3, #0]
 80076a8:	f7ff f857 	bl	800675a <_ZNK6tflite8Operator37builtin_options_as_SequenceRNNOptionsEv>
 80076ac:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
      if (const auto* sequence_rnn_params =
 80076b0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d02b      	beq.n	8007710 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x90c>
        params->activation =
            parse_activation(sequence_rnn_params->fused_activation_function());
 80076b8:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 80076bc:	f7fe f863 	bl	8005786 <_ZNK6tflite18SequenceRNNOptions25fused_activation_functionEv>
 80076c0:	4603      	mov	r3, r0
 80076c2:	461d      	mov	r5, r3
        params->activation =
 80076c4:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 80076c8:	4618      	mov	r0, r3
 80076ca:	f002 fc37 	bl	8009f3c <_ZNKSt10unique_ptrI23TfLiteSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80076ce:	4604      	mov	r4, r0
            parse_activation(sequence_rnn_params->fused_activation_function());
 80076d0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80076d4:	4629      	mov	r1, r5
 80076d6:	4618      	mov	r0, r3
 80076d8:	f7ff fb3a 	bl	8006d50 <_ZZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvENKUlNS_22ActivationFunctionTypeEE0_clESA_>
 80076dc:	4603      	mov	r3, r0
        params->activation =
 80076de:	7063      	strb	r3, [r4, #1]
        params->time_major = sequence_rnn_params->time_major();
 80076e0:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 80076e4:	4618      	mov	r0, r3
 80076e6:	f002 fc29 	bl	8009f3c <_ZNKSt10unique_ptrI23TfLiteSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80076ea:	4604      	mov	r4, r0
 80076ec:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 80076f0:	f7fe f835 	bl	800575e <_ZNK6tflite18SequenceRNNOptions10time_majorEv>
 80076f4:	4603      	mov	r3, r0
 80076f6:	7023      	strb	r3, [r4, #0]
        params->asymmetric_quantize_inputs =
 80076f8:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 80076fc:	4618      	mov	r0, r3
 80076fe:	f002 fc1d 	bl	8009f3c <_ZNKSt10unique_ptrI23TfLiteSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8007702:	4604      	mov	r4, r0
            sequence_rnn_params->asymmetric_quantize_inputs();
 8007704:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 8007708:	f7fe f84d 	bl	80057a6 <_ZNK6tflite18SequenceRNNOptions26asymmetric_quantize_inputsEv>
 800770c:	4603      	mov	r3, r0
        params->asymmetric_quantize_inputs =
 800770e:	70a3      	strb	r3, [r4, #2]
      }
      *builtin_data = params.release();
 8007710:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8007714:	4618      	mov	r0, r3
 8007716:	f002 fc1d 	bl	8009f54 <_ZNSt10unique_ptrI23TfLiteSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 800771a:	4602      	mov	r2, r0
 800771c:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8007720:	601a      	str	r2, [r3, #0]
      return kTfLiteOk;
 8007722:	2400      	movs	r4, #0
      auto params = safe_allocator.Allocate<TfLiteSequenceRNNParams>();
 8007724:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8007728:	4618      	mov	r0, r3
 800772a:	f002 fbdb 	bl	8009ee4 <_ZNSt10unique_ptrI23TfLiteSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 800772e:	f002 b85f 	b.w	80097f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29ec>
    }
    case BuiltinOperator_BIDIRECTIONAL_SEQUENCE_RNN: {
      auto params =
          safe_allocator.Allocate<TfLiteBidirectionalSequenceRNNParams>();
 8007732:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8007736:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800773a:	4611      	mov	r1, r2
 800773c:	4618      	mov	r0, r3
 800773e:	f002 fc1d 	bl	8009f7c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI36TfLiteBidirectionalSequenceRNNParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
 8007742:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8007746:	2100      	movs	r1, #0
 8007748:	4618      	mov	r0, r3
 800774a:	f002 fc54 	bl	8009ff6 <_ZStneI36TfLiteBidirectionalSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 800774e:	4603      	mov	r3, r0
 8007750:	f083 0301 	eor.w	r3, r3, #1
 8007754:	b2db      	uxtb	r3, r3
 8007756:	2b00      	cmp	r3, #0
 8007758:	d014      	beq.n	8007784 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x980>
 800775a:	1d3b      	adds	r3, r7, #4
 800775c:	6818      	ldr	r0, [r3, #0]
 800775e:	1d3b      	adds	r3, r7, #4
 8007760:	6819      	ldr	r1, [r3, #0]
 8007762:	4b05      	ldr	r3, [pc, #20]	; (8007778 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x974>)
 8007764:	9301      	str	r3, [sp, #4]
 8007766:	f240 132f 	movw	r3, #303	; 0x12f
 800776a:	9300      	str	r3, [sp, #0]
 800776c:	4b03      	ldr	r3, [pc, #12]	; (800777c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x978>)
 800776e:	4a04      	ldr	r2, [pc, #16]	; (8007780 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x97c>)
 8007770:	f7fd fe45 	bl	80053fe <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8007774:	2401      	movs	r4, #1
 8007776:	e052      	b.n	800781e <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa1a>
 8007778:	08021fe8 	.word	0x08021fe8
 800777c:	08021f88 	.word	0x08021f88
 8007780:	08021fd0 	.word	0x08021fd0
      if (const auto* bidi_sequence_rnn_params =
              op->builtin_options_as_BidirectionalSequenceRNNOptions()) {
 8007784:	f107 030c 	add.w	r3, r7, #12
 8007788:	6818      	ldr	r0, [r3, #0]
 800778a:	f7ff f8fe 	bl	800698a <_ZNK6tflite8Operator50builtin_options_as_BidirectionalSequenceRNNOptionsEv>
 800778e:	f8c7 0238 	str.w	r0, [r7, #568]	; 0x238
      if (const auto* bidi_sequence_rnn_params =
 8007792:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8007796:	2b00      	cmp	r3, #0
 8007798:	d037      	beq.n	800780a <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa06>
        params->activation = parse_activation(
 800779a:	f8d7 0238 	ldr.w	r0, [r7, #568]	; 0x238
 800779e:	f7fe f82a 	bl	80057f6 <_ZNK6tflite31BidirectionalSequenceRNNOptions25fused_activation_functionEv>
 80077a2:	4603      	mov	r3, r0
 80077a4:	461d      	mov	r5, r3
 80077a6:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80077aa:	4618      	mov	r0, r3
 80077ac:	f002 fc30 	bl	800a010 <_ZNKSt10unique_ptrI36TfLiteBidirectionalSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80077b0:	4604      	mov	r4, r0
 80077b2:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80077b6:	4629      	mov	r1, r5
 80077b8:	4618      	mov	r0, r3
 80077ba:	f7ff fac9 	bl	8006d50 <_ZZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvENKUlNS_22ActivationFunctionTypeEE0_clESA_>
 80077be:	4603      	mov	r3, r0
 80077c0:	7063      	strb	r3, [r4, #1]
            bidi_sequence_rnn_params->fused_activation_function());
        params->time_major = bidi_sequence_rnn_params->time_major();
 80077c2:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80077c6:	4618      	mov	r0, r3
 80077c8:	f002 fc22 	bl	800a010 <_ZNKSt10unique_ptrI36TfLiteBidirectionalSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80077cc:	4604      	mov	r4, r0
 80077ce:	f8d7 0238 	ldr.w	r0, [r7, #568]	; 0x238
 80077d2:	f7fd fffc 	bl	80057ce <_ZNK6tflite31BidirectionalSequenceRNNOptions10time_majorEv>
 80077d6:	4603      	mov	r3, r0
 80077d8:	7023      	strb	r3, [r4, #0]
        params->merge_outputs = bidi_sequence_rnn_params->merge_outputs();
 80077da:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80077de:	4618      	mov	r0, r3
 80077e0:	f002 fc16 	bl	800a010 <_ZNKSt10unique_ptrI36TfLiteBidirectionalSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80077e4:	4604      	mov	r4, r0
 80077e6:	f8d7 0238 	ldr.w	r0, [r7, #568]	; 0x238
 80077ea:	f7fe f814 	bl	8005816 <_ZNK6tflite31BidirectionalSequenceRNNOptions13merge_outputsEv>
 80077ee:	4603      	mov	r3, r0
 80077f0:	70a3      	strb	r3, [r4, #2]
        params->asymmetric_quantize_inputs =
 80077f2:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80077f6:	4618      	mov	r0, r3
 80077f8:	f002 fc0a 	bl	800a010 <_ZNKSt10unique_ptrI36TfLiteBidirectionalSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80077fc:	4604      	mov	r4, r0
            bidi_sequence_rnn_params->asymmetric_quantize_inputs();
 80077fe:	f8d7 0238 	ldr.w	r0, [r7, #568]	; 0x238
 8007802:	f7fe f81c 	bl	800583e <_ZNK6tflite31BidirectionalSequenceRNNOptions26asymmetric_quantize_inputsEv>
 8007806:	4603      	mov	r3, r0
        params->asymmetric_quantize_inputs =
 8007808:	70e3      	strb	r3, [r4, #3]
      }
      *builtin_data = params.release();
 800780a:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800780e:	4618      	mov	r0, r3
 8007810:	f002 fc0a 	bl	800a028 <_ZNSt10unique_ptrI36TfLiteBidirectionalSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8007814:	4602      	mov	r2, r0
 8007816:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 800781a:	601a      	str	r2, [r3, #0]
      return kTfLiteOk;
 800781c:	2400      	movs	r4, #0
          safe_allocator.Allocate<TfLiteBidirectionalSequenceRNNParams>();
 800781e:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8007822:	4618      	mov	r0, r3
 8007824:	f002 fbc8 	bl	8009fb8 <_ZNSt10unique_ptrI36TfLiteBidirectionalSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8007828:	f001 bfe2 	b.w	80097f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29ec>
    }
    case BuiltinOperator_RNN: {
      auto params = safe_allocator.Allocate<TfLiteRNNParams>();
 800782c:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8007830:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8007834:	4611      	mov	r1, r2
 8007836:	4618      	mov	r0, r3
 8007838:	f002 fc0a 	bl	800a050 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI15TfLiteRNNParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
 800783c:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8007840:	2100      	movs	r1, #0
 8007842:	4618      	mov	r0, r3
 8007844:	f002 fc41 	bl	800a0ca <_ZStneI15TfLiteRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8007848:	4603      	mov	r3, r0
 800784a:	f083 0301 	eor.w	r3, r3, #1
 800784e:	b2db      	uxtb	r3, r3
 8007850:	2b00      	cmp	r3, #0
 8007852:	d00e      	beq.n	8007872 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa6e>
 8007854:	1d3b      	adds	r3, r7, #4
 8007856:	6818      	ldr	r0, [r3, #0]
 8007858:	1d3b      	adds	r3, r7, #4
 800785a:	6819      	ldr	r1, [r3, #0]
 800785c:	4bcd      	ldr	r3, [pc, #820]	; (8007b94 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd90>)
 800785e:	9301      	str	r3, [sp, #4]
 8007860:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8007864:	9300      	str	r3, [sp, #0]
 8007866:	4bcc      	ldr	r3, [pc, #816]	; (8007b98 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd94>)
 8007868:	4acc      	ldr	r2, [pc, #816]	; (8007b9c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd98>)
 800786a:	f7fd fdc8 	bl	80053fe <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 800786e:	2401      	movs	r4, #1
 8007870:	e034      	b.n	80078dc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xad8>
      if (const auto* rnn_params = op->builtin_options_as_RNNOptions()) {
 8007872:	f107 030c 	add.w	r3, r7, #12
 8007876:	6818      	ldr	r0, [r3, #0]
 8007878:	f7fe fdf3 	bl	8006462 <_ZNK6tflite8Operator29builtin_options_as_RNNOptionsEv>
 800787c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
 8007880:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007884:	2b00      	cmp	r3, #0
 8007886:	d01f      	beq.n	80078c8 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xac4>
        params->activation =
            parse_activation(rnn_params->fused_activation_function());
 8007888:	f8d7 01f8 	ldr.w	r0, [r7, #504]	; 0x1f8
 800788c:	f7fd ff43 	bl	8005716 <_ZNK6tflite10RNNOptions25fused_activation_functionEv>
 8007890:	4603      	mov	r3, r0
 8007892:	461d      	mov	r5, r3
        params->activation =
 8007894:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8007898:	4618      	mov	r0, r3
 800789a:	f002 fc23 	bl	800a0e4 <_ZNKSt10unique_ptrI15TfLiteRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800789e:	4604      	mov	r4, r0
            parse_activation(rnn_params->fused_activation_function());
 80078a0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80078a4:	4629      	mov	r1, r5
 80078a6:	4618      	mov	r0, r3
 80078a8:	f7ff fa52 	bl	8006d50 <_ZZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvENKUlNS_22ActivationFunctionTypeEE0_clESA_>
 80078ac:	4603      	mov	r3, r0
        params->activation =
 80078ae:	7023      	strb	r3, [r4, #0]
        params->asymmetric_quantize_inputs =
 80078b0:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 80078b4:	4618      	mov	r0, r3
 80078b6:	f002 fc15 	bl	800a0e4 <_ZNKSt10unique_ptrI15TfLiteRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80078ba:	4604      	mov	r4, r0
            rnn_params->asymmetric_quantize_inputs();
 80078bc:	f8d7 01f8 	ldr.w	r0, [r7, #504]	; 0x1f8
 80078c0:	f7fd ff39 	bl	8005736 <_ZNK6tflite10RNNOptions26asymmetric_quantize_inputsEv>
 80078c4:	4603      	mov	r3, r0
        params->asymmetric_quantize_inputs =
 80078c6:	7063      	strb	r3, [r4, #1]
      }
      *builtin_data = params.release();
 80078c8:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 80078cc:	4618      	mov	r0, r3
 80078ce:	f002 fc15 	bl	800a0fc <_ZNSt10unique_ptrI15TfLiteRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 80078d2:	4602      	mov	r2, r0
 80078d4:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 80078d8:	601a      	str	r2, [r3, #0]
      return kTfLiteOk;
 80078da:	2400      	movs	r4, #0
      auto params = safe_allocator.Allocate<TfLiteRNNParams>();
 80078dc:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 80078e0:	4618      	mov	r0, r3
 80078e2:	f002 fbd3 	bl	800a08c <_ZNSt10unique_ptrI15TfLiteRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 80078e6:	f001 bf83 	b.w	80097f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29ec>
    }
    case BuiltinOperator_EMBEDDING_LOOKUP_SPARSE: {
      auto params =
          safe_allocator.Allocate<TfLiteEmbeddingLookupSparseParams>();
 80078ea:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80078ee:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 80078f2:	4611      	mov	r1, r2
 80078f4:	4618      	mov	r0, r3
 80078f6:	f002 fc15 	bl	800a124 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI33TfLiteEmbeddingLookupSparseParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
 80078fa:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80078fe:	2100      	movs	r1, #0
 8007900:	4618      	mov	r0, r3
 8007902:	f002 fc4c 	bl	800a19e <_ZStneI33TfLiteEmbeddingLookupSparseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8007906:	4603      	mov	r3, r0
 8007908:	f083 0301 	eor.w	r3, r3, #1
 800790c:	b2db      	uxtb	r3, r3
 800790e:	2b00      	cmp	r3, #0
 8007910:	d00e      	beq.n	8007930 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb2c>
 8007912:	1d3b      	adds	r3, r7, #4
 8007914:	6818      	ldr	r0, [r3, #0]
 8007916:	1d3b      	adds	r3, r7, #4
 8007918:	6819      	ldr	r1, [r3, #0]
 800791a:	4b9e      	ldr	r3, [pc, #632]	; (8007b94 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd90>)
 800791c:	9301      	str	r3, [sp, #4]
 800791e:	f240 134b 	movw	r3, #331	; 0x14b
 8007922:	9300      	str	r3, [sp, #0]
 8007924:	4b9c      	ldr	r3, [pc, #624]	; (8007b98 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd94>)
 8007926:	4a9d      	ldr	r2, [pc, #628]	; (8007b9c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd98>)
 8007928:	f7fd fd69 	bl	80053fe <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 800792c:	2401      	movs	r4, #1
 800792e:	e028      	b.n	8007982 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb7e>
      if (const auto* embedding_params =
              op->builtin_options_as_EmbeddingLookupSparseOptions()) {
 8007930:	f107 030c 	add.w	r3, r7, #12
 8007934:	6818      	ldr	r0, [r3, #0]
 8007936:	f7fe fe84 	bl	8006642 <_ZNK6tflite8Operator47builtin_options_as_EmbeddingLookupSparseOptionsEv>
 800793a:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
      if (const auto* embedding_params =
 800793e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8007942:	2b00      	cmp	r3, #0
 8007944:	d013      	beq.n	800796e <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb6a>
        params->combiner = parseCombinerType(embedding_params->combiner());
 8007946:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 800794a:	f7fe fa81 	bl	8005e50 <_ZNK6tflite28EmbeddingLookupSparseOptions8combinerEv>
 800794e:	4603      	mov	r3, r0
 8007950:	461d      	mov	r5, r3
 8007952:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8007956:	4618      	mov	r0, r3
 8007958:	f002 fc2e 	bl	800a1b8 <_ZNKSt10unique_ptrI33TfLiteEmbeddingLookupSparseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800795c:	4604      	mov	r4, r0
 800795e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8007962:	4629      	mov	r1, r5
 8007964:	4618      	mov	r0, r3
 8007966:	f7ff fa36 	bl	8006dd6 <_ZZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvENKUlNS_12CombinerTypeEE2_clESA_>
 800796a:	4603      	mov	r3, r0
 800796c:	7023      	strb	r3, [r4, #0]
      }
      *builtin_data = params.release();
 800796e:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8007972:	4618      	mov	r0, r3
 8007974:	f002 fc2c 	bl	800a1d0 <_ZNSt10unique_ptrI33TfLiteEmbeddingLookupSparseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8007978:	4602      	mov	r2, r0
 800797a:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 800797e:	601a      	str	r2, [r3, #0]
      return kTfLiteOk;
 8007980:	2400      	movs	r4, #0
          safe_allocator.Allocate<TfLiteEmbeddingLookupSparseParams>();
 8007982:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8007986:	4618      	mov	r0, r3
 8007988:	f002 fbea 	bl	800a160 <_ZNSt10unique_ptrI33TfLiteEmbeddingLookupSparseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 800798c:	f001 bf30 	b.w	80097f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29ec>
    }
    case BuiltinOperator_FULLY_CONNECTED: {
      auto params = safe_allocator.Allocate<TfLiteFullyConnectedParams>();
 8007990:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8007994:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8007998:	4611      	mov	r1, r2
 800799a:	4618      	mov	r0, r3
 800799c:	f002 fc2c 	bl	800a1f8 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI26TfLiteFullyConnectedParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
 80079a0:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 80079a4:	2100      	movs	r1, #0
 80079a6:	4618      	mov	r0, r3
 80079a8:	f002 fc63 	bl	800a272 <_ZStneI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 80079ac:	4603      	mov	r3, r0
 80079ae:	f083 0301 	eor.w	r3, r3, #1
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d00e      	beq.n	80079d6 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xbd2>
 80079b8:	1d3b      	adds	r3, r7, #4
 80079ba:	6818      	ldr	r0, [r3, #0]
 80079bc:	1d3b      	adds	r3, r7, #4
 80079be:	6819      	ldr	r1, [r3, #0]
 80079c0:	4b74      	ldr	r3, [pc, #464]	; (8007b94 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd90>)
 80079c2:	9301      	str	r3, [sp, #4]
 80079c4:	f240 1355 	movw	r3, #341	; 0x155
 80079c8:	9300      	str	r3, [sp, #0]
 80079ca:	4b73      	ldr	r3, [pc, #460]	; (8007b98 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd94>)
 80079cc:	4a73      	ldr	r2, [pc, #460]	; (8007b9c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd98>)
 80079ce:	f7fd fd16 	bl	80053fe <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 80079d2:	2401      	movs	r4, #1
 80079d4:	e064      	b.n	8007aa0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc9c>
      if (const auto* fully_connected_params =
              op->builtin_options_as_FullyConnectedOptions()) {
 80079d6:	f107 030c 	add.w	r3, r7, #12
 80079da:	6818      	ldr	r0, [r3, #0]
 80079dc:	f7fe fd55 	bl	800648a <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv>
 80079e0:	f8c7 01d0 	str.w	r0, [r7, #464]	; 0x1d0
      if (const auto* fully_connected_params =
 80079e4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d04f      	beq.n	8007a8c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc88>
        params->activation = parse_activation(
 80079ec:	f8d7 01d0 	ldr.w	r0, [r7, #464]	; 0x1d0
 80079f0:	f7fd ff39 	bl	8005866 <_ZNK6tflite21FullyConnectedOptions25fused_activation_functionEv>
 80079f4:	4603      	mov	r3, r0
 80079f6:	461d      	mov	r5, r3
 80079f8:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 80079fc:	4618      	mov	r0, r3
 80079fe:	f002 fc45 	bl	800a28c <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8007a02:	4604      	mov	r4, r0
 8007a04:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8007a08:	4629      	mov	r1, r5
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7ff f9a0 	bl	8006d50 <_ZZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvENKUlNS_22ActivationFunctionTypeEE0_clESA_>
 8007a10:	4603      	mov	r3, r0
 8007a12:	7023      	strb	r3, [r4, #0]
            fully_connected_params->fused_activation_function());
        params->keep_num_dims = fully_connected_params->keep_num_dims();
 8007a14:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f002 fc37 	bl	800a28c <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8007a1e:	4604      	mov	r4, r0
 8007a20:	f8d7 01d0 	ldr.w	r0, [r7, #464]	; 0x1d0
 8007a24:	f7fd ff3f 	bl	80058a6 <_ZNK6tflite21FullyConnectedOptions13keep_num_dimsEv>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	70a3      	strb	r3, [r4, #2]
        params->asymmetric_quantize_inputs =
 8007a2c:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8007a30:	4618      	mov	r0, r3
 8007a32:	f002 fc2b 	bl	800a28c <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8007a36:	4604      	mov	r4, r0
            fully_connected_params->asymmetric_quantize_inputs();
 8007a38:	f8d7 01d0 	ldr.w	r0, [r7, #464]	; 0x1d0
 8007a3c:	f7fd ff47 	bl	80058ce <_ZNK6tflite21FullyConnectedOptions26asymmetric_quantize_inputsEv>
 8007a40:	4603      	mov	r3, r0
        params->asymmetric_quantize_inputs =
 8007a42:	70e3      	strb	r3, [r4, #3]
        switch (fully_connected_params->weights_format()) {
 8007a44:	f8d7 01d0 	ldr.w	r0, [r7, #464]	; 0x1d0
 8007a48:	f7fd ff1d 	bl	8005886 <_ZNK6tflite21FullyConnectedOptions14weights_formatEv>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d002      	beq.n	8007a58 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc54>
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d009      	beq.n	8007a6a <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc66>
 8007a56:	e011      	b.n	8007a7c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc78>
          case FullyConnectedOptionsWeightsFormat_DEFAULT:
            params->weights_format = kTfLiteFullyConnectedWeightsFormatDefault;
 8007a58:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f002 fc15 	bl	800a28c <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8007a62:	4603      	mov	r3, r0
 8007a64:	2200      	movs	r2, #0
 8007a66:	705a      	strb	r2, [r3, #1]
            break;
 8007a68:	e010      	b.n	8007a8c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc88>
          case FullyConnectedOptionsWeightsFormat_SHUFFLED4x16INT8:
            params->weights_format =
 8007a6a:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f002 fc0c 	bl	800a28c <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8007a74:	4603      	mov	r3, r0
 8007a76:	2201      	movs	r2, #1
 8007a78:	705a      	strb	r2, [r3, #1]
                kTfLiteFullyConnectedWeightsFormatShuffled4x16Int8;
            break;
 8007a7a:	e007      	b.n	8007a8c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc88>
          default:
            TF_LITE_REPORT_ERROR(error_reporter,
 8007a7c:	1d3b      	adds	r3, r7, #4
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4947      	ldr	r1, [pc, #284]	; (8007ba0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd9c>)
 8007a82:	4618      	mov	r0, r3
 8007a84:	f7fd fca2 	bl	80053cc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                                 "Unhandled fully-connected weights format.");
            return kTfLiteError;
 8007a88:	2401      	movs	r4, #1
 8007a8a:	e009      	b.n	8007aa0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc9c>
        }
      }
      *builtin_data = params.release();
 8007a8c:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8007a90:	4618      	mov	r0, r3
 8007a92:	f002 fc07 	bl	800a2a4 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8007a96:	4602      	mov	r2, r0
 8007a98:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8007a9c:	601a      	str	r2, [r3, #0]
      return kTfLiteOk;
 8007a9e:	2400      	movs	r4, #0
      auto params = safe_allocator.Allocate<TfLiteFullyConnectedParams>();
 8007aa0:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f002 fbc5 	bl	800a234 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8007aaa:	f001 bea1 	b.w	80097f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29ec>
    }
    case BuiltinOperator_HASHTABLE_LOOKUP:
      // no-op.
      return kTfLiteOk;
 8007aae:	2400      	movs	r4, #0
 8007ab0:	f001 be9e 	b.w	80097f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29ec>
    case BuiltinOperator_SOFTMAX: {
      auto params = safe_allocator.Allocate<TfLiteSoftmaxParams>();
 8007ab4:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8007ab8:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8007abc:	4611      	mov	r1, r2
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f002 fc04 	bl	800a2cc <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteSoftmaxParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
 8007ac4:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8007ac8:	2100      	movs	r1, #0
 8007aca:	4618      	mov	r0, r3
 8007acc:	f002 fc3b 	bl	800a346 <_ZStneI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	f083 0301 	eor.w	r3, r3, #1
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d00e      	beq.n	8007afa <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xcf6>
 8007adc:	1d3b      	adds	r3, r7, #4
 8007ade:	6818      	ldr	r0, [r3, #0]
 8007ae0:	1d3b      	adds	r3, r7, #4
 8007ae2:	6819      	ldr	r1, [r3, #0]
 8007ae4:	4b2b      	ldr	r3, [pc, #172]	; (8007b94 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd90>)
 8007ae6:	9301      	str	r3, [sp, #4]
 8007ae8:	f240 1373 	movw	r3, #371	; 0x173
 8007aec:	9300      	str	r3, [sp, #0]
 8007aee:	4b2a      	ldr	r3, [pc, #168]	; (8007b98 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd94>)
 8007af0:	4a2a      	ldr	r2, [pc, #168]	; (8007b9c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd98>)
 8007af2:	f7fd fc84 	bl	80053fe <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8007af6:	2401      	movs	r4, #1
 8007af8:	e022      	b.n	8007b40 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd3c>
      if (const auto* softmax_params =
              op->builtin_options_as_SoftmaxOptions()) {
 8007afa:	f107 030c 	add.w	r3, r7, #12
 8007afe:	6818      	ldr	r0, [r3, #0]
 8007b00:	f7fe fcd7 	bl	80064b2 <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv>
 8007b04:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
      if (const auto* softmax_params =
 8007b08:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d00d      	beq.n	8007b2c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd28>
        params->beta = softmax_params->beta();
 8007b10:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8007b14:	4618      	mov	r0, r3
 8007b16:	f002 fc23 	bl	800a360 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8007b1a:	4604      	mov	r4, r0
 8007b1c:	f8d7 01fc 	ldr.w	r0, [r7, #508]	; 0x1fc
 8007b20:	f7fd feea 	bl	80058f8 <_ZNK6tflite14SoftmaxOptions4betaEv>
 8007b24:	eef0 7a40 	vmov.f32	s15, s0
 8007b28:	edc4 7a00 	vstr	s15, [r4]
      }
      *builtin_data = params.release();
 8007b2c:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8007b30:	4618      	mov	r0, r3
 8007b32:	f002 fc21 	bl	800a378 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8007b36:	4602      	mov	r2, r0
 8007b38:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8007b3c:	601a      	str	r2, [r3, #0]
      return kTfLiteOk;
 8007b3e:	2400      	movs	r4, #0
      auto params = safe_allocator.Allocate<TfLiteSoftmaxParams>();
 8007b40:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8007b44:	4618      	mov	r0, r3
 8007b46:	f002 fbdf 	bl	800a308 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8007b4a:	f001 be51 	b.w	80097f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29ec>
    }
    case BuiltinOperator_CONCATENATION: {
      auto params = safe_allocator.Allocate<TfLiteConcatenationParams>();
 8007b4e:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8007b52:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8007b56:	4611      	mov	r1, r2
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f002 fc21 	bl	800a3a0 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI25TfLiteConcatenationParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
 8007b5e:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8007b62:	2100      	movs	r1, #0
 8007b64:	4618      	mov	r0, r3
 8007b66:	f002 fc58 	bl	800a41a <_ZStneI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	f083 0301 	eor.w	r3, r3, #1
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d016      	beq.n	8007ba4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xda0>
 8007b76:	1d3b      	adds	r3, r7, #4
 8007b78:	6818      	ldr	r0, [r3, #0]
 8007b7a:	1d3b      	adds	r3, r7, #4
 8007b7c:	6819      	ldr	r1, [r3, #0]
 8007b7e:	4b05      	ldr	r3, [pc, #20]	; (8007b94 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd90>)
 8007b80:	9301      	str	r3, [sp, #4]
 8007b82:	f240 137d 	movw	r3, #381	; 0x17d
 8007b86:	9300      	str	r3, [sp, #0]
 8007b88:	4b03      	ldr	r3, [pc, #12]	; (8007b98 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd94>)
 8007b8a:	4a04      	ldr	r2, [pc, #16]	; (8007b9c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd98>)
 8007b8c:	f7fd fc37 	bl	80053fe <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8007b90:	2401      	movs	r4, #1
 8007b92:	e03c      	b.n	8007c0e <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe0a>
 8007b94:	08021fe8 	.word	0x08021fe8
 8007b98:	08021f88 	.word	0x08021f88
 8007b9c:	08021fd0 	.word	0x08021fd0
 8007ba0:	08021ffc 	.word	0x08021ffc
      if (const auto* concatenation_params =
              op->builtin_options_as_ConcatenationOptions()) {
 8007ba4:	f107 030c 	add.w	r3, r7, #12
 8007ba8:	6818      	ldr	r0, [r3, #0]
 8007baa:	f7fe fc96 	bl	80064da <_ZNK6tflite8Operator39builtin_options_as_ConcatenationOptionsEv>
 8007bae:	f8c7 01c0 	str.w	r0, [r7, #448]	; 0x1c0
      if (const auto* concatenation_params =
 8007bb2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d01f      	beq.n	8007bfa <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xdf6>
        params->activation =
            parse_activation(concatenation_params->fused_activation_function());
 8007bba:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 8007bbe:	f7fd febe 	bl	800593e <_ZNK6tflite20ConcatenationOptions25fused_activation_functionEv>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	461d      	mov	r5, r3
        params->activation =
 8007bc6:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f002 fc32 	bl	800a434 <_ZNKSt10unique_ptrI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8007bd0:	4604      	mov	r4, r0
            parse_activation(concatenation_params->fused_activation_function());
 8007bd2:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8007bd6:	4629      	mov	r1, r5
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f7ff f8b9 	bl	8006d50 <_ZZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvENKUlNS_22ActivationFunctionTypeEE0_clESA_>
 8007bde:	4603      	mov	r3, r0
        params->activation =
 8007be0:	7123      	strb	r3, [r4, #4]
        params->axis = concatenation_params->axis();
 8007be2:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8007be6:	4618      	mov	r0, r3
 8007be8:	f002 fc24 	bl	800a434 <_ZNKSt10unique_ptrI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8007bec:	4604      	mov	r4, r0
 8007bee:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 8007bf2:	f7fd fe95 	bl	8005920 <_ZNK6tflite20ConcatenationOptions4axisEv>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	6023      	str	r3, [r4, #0]
      }
      *builtin_data = params.release();
 8007bfa:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f002 fc24 	bl	800a44c <_ZNSt10unique_ptrI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8007c04:	4602      	mov	r2, r0
 8007c06:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8007c0a:	601a      	str	r2, [r3, #0]
      return kTfLiteOk;
 8007c0c:	2400      	movs	r4, #0
      auto params = safe_allocator.Allocate<TfLiteConcatenationParams>();
 8007c0e:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8007c12:	4618      	mov	r0, r3
 8007c14:	f002 fbe2 	bl	800a3dc <_ZNSt10unique_ptrI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8007c18:	f001 bdea 	b.w	80097f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29ec>
    }
    case BuiltinOperator_MUL: {
      auto params = safe_allocator.Allocate<TfLiteMulParams>();
 8007c1c:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8007c20:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8007c24:	4611      	mov	r1, r2
 8007c26:	4618      	mov	r0, r3
 8007c28:	f002 fc24 	bl	800a474 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI15TfLiteMulParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
 8007c2c:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8007c30:	2100      	movs	r1, #0
 8007c32:	4618      	mov	r0, r3
 8007c34:	f002 fc5b 	bl	800a4ee <_ZStneI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	f083 0301 	eor.w	r3, r3, #1
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d00e      	beq.n	8007c62 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe5e>
 8007c44:	1d3b      	adds	r3, r7, #4
 8007c46:	6818      	ldr	r0, [r3, #0]
 8007c48:	1d3b      	adds	r3, r7, #4
 8007c4a:	6819      	ldr	r1, [r3, #0]
 8007c4c:	4bd4      	ldr	r3, [pc, #848]	; (8007fa0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x119c>)
 8007c4e:	9301      	str	r3, [sp, #4]
 8007c50:	f240 1389 	movw	r3, #393	; 0x189
 8007c54:	9300      	str	r3, [sp, #0]
 8007c56:	4bd3      	ldr	r3, [pc, #844]	; (8007fa4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11a0>)
 8007c58:	4ad3      	ldr	r2, [pc, #844]	; (8007fa8 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11a4>)
 8007c5a:	f7fd fbd0 	bl	80053fe <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8007c5e:	2401      	movs	r4, #1
 8007c60:	e028      	b.n	8007cb4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xeb0>
      if (const auto* schema_params = op->builtin_options_as_MulOptions()) {
 8007c62:	f107 030c 	add.w	r3, r7, #12
 8007c66:	6818      	ldr	r0, [r3, #0]
 8007c68:	f7fe fcff 	bl	800666a <_ZNK6tflite8Operator29builtin_options_as_MulOptionsEv>
 8007c6c:	f8c7 01e4 	str.w	r0, [r7, #484]	; 0x1e4
 8007c70:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d013      	beq.n	8007ca0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe9c>
        params->activation =
            parse_activation(schema_params->fused_activation_function());
 8007c78:	f8d7 01e4 	ldr.w	r0, [r7, #484]	; 0x1e4
 8007c7c:	f7fd fe7f 	bl	800597e <_ZNK6tflite10MulOptions25fused_activation_functionEv>
 8007c80:	4603      	mov	r3, r0
 8007c82:	461d      	mov	r5, r3
        params->activation =
 8007c84:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f002 fc3d 	bl	800a508 <_ZNKSt10unique_ptrI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8007c8e:	4604      	mov	r4, r0
            parse_activation(schema_params->fused_activation_function());
 8007c90:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8007c94:	4629      	mov	r1, r5
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7ff f85a 	bl	8006d50 <_ZZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvENKUlNS_22ActivationFunctionTypeEE0_clESA_>
 8007c9c:	4603      	mov	r3, r0
        params->activation =
 8007c9e:	7023      	strb	r3, [r4, #0]
      }
      *builtin_data = params.release();
 8007ca0:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f002 fc3b 	bl	800a520 <_ZNSt10unique_ptrI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8007caa:	4602      	mov	r2, r0
 8007cac:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8007cb0:	601a      	str	r2, [r3, #0]
      return kTfLiteOk;
 8007cb2:	2400      	movs	r4, #0
      auto params = safe_allocator.Allocate<TfLiteMulParams>();
 8007cb4:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f002 fbf9 	bl	800a4b0 <_ZNSt10unique_ptrI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8007cbe:	f001 bd97 	b.w	80097f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29ec>
    }
    case BuiltinOperator_ADD: {
      auto params = safe_allocator.Allocate<TfLiteAddParams>();
 8007cc2:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8007cc6:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8007cca:	4611      	mov	r1, r2
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f002 fc3b 	bl	800a548 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI15TfLiteAddParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
 8007cd2:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8007cd6:	2100      	movs	r1, #0
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f002 fc72 	bl	800a5c2 <_ZStneI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	f083 0301 	eor.w	r3, r3, #1
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d00e      	beq.n	8007d08 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf04>
 8007cea:	1d3b      	adds	r3, r7, #4
 8007cec:	6818      	ldr	r0, [r3, #0]
 8007cee:	1d3b      	adds	r3, r7, #4
 8007cf0:	6819      	ldr	r1, [r3, #0]
 8007cf2:	4bab      	ldr	r3, [pc, #684]	; (8007fa0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x119c>)
 8007cf4:	9301      	str	r3, [sp, #4]
 8007cf6:	f240 1393 	movw	r3, #403	; 0x193
 8007cfa:	9300      	str	r3, [sp, #0]
 8007cfc:	4ba9      	ldr	r3, [pc, #676]	; (8007fa4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11a0>)
 8007cfe:	4aaa      	ldr	r2, [pc, #680]	; (8007fa8 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11a4>)
 8007d00:	f7fd fb7d 	bl	80053fe <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8007d04:	2401      	movs	r4, #1
 8007d06:	e028      	b.n	8007d5a <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf56>
      if (const auto* schema_params = op->builtin_options_as_AddOptions()) {
 8007d08:	f107 030c 	add.w	r3, r7, #12
 8007d0c:	6818      	ldr	r0, [r3, #0]
 8007d0e:	f7fe fbf8 	bl	8006502 <_ZNK6tflite8Operator29builtin_options_as_AddOptionsEv>
 8007d12:	f8c7 01b8 	str.w	r0, [r7, #440]	; 0x1b8
 8007d16:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d013      	beq.n	8007d46 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf42>
        params->activation =
            parse_activation(schema_params->fused_activation_function());
 8007d1e:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 8007d22:	f7fd fe1c 	bl	800595e <_ZNK6tflite10AddOptions25fused_activation_functionEv>
 8007d26:	4603      	mov	r3, r0
 8007d28:	461d      	mov	r5, r3
        params->activation =
 8007d2a:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f002 fc54 	bl	800a5dc <_ZNKSt10unique_ptrI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8007d34:	4604      	mov	r4, r0
            parse_activation(schema_params->fused_activation_function());
 8007d36:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8007d3a:	4629      	mov	r1, r5
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f7ff f807 	bl	8006d50 <_ZZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvENKUlNS_22ActivationFunctionTypeEE0_clESA_>
 8007d42:	4603      	mov	r3, r0
        params->activation =
 8007d44:	7023      	strb	r3, [r4, #0]
      }
      *builtin_data = params.release();
 8007d46:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f002 fc52 	bl	800a5f4 <_ZNSt10unique_ptrI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8007d50:	4602      	mov	r2, r0
 8007d52:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8007d56:	601a      	str	r2, [r3, #0]
      return kTfLiteOk;
 8007d58:	2400      	movs	r4, #0
      auto params = safe_allocator.Allocate<TfLiteAddParams>();
 8007d5a:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f002 fc10 	bl	800a584 <_ZNSt10unique_ptrI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8007d64:	f001 bd44 	b.w	80097f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29ec>
    }
    case BuiltinOperator_DIV: {
      auto params = safe_allocator.Allocate<TfLiteDivParams>();
 8007d68:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8007d6c:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8007d70:	4611      	mov	r1, r2
 8007d72:	4618      	mov	r0, r3
 8007d74:	f002 fc52 	bl	800a61c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI15TfLiteDivParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
 8007d78:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8007d7c:	2100      	movs	r1, #0
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f002 fc89 	bl	800a696 <_ZStneI15TfLiteDivParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8007d84:	4603      	mov	r3, r0
 8007d86:	f083 0301 	eor.w	r3, r3, #1
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d00e      	beq.n	8007dae <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfaa>
 8007d90:	1d3b      	adds	r3, r7, #4
 8007d92:	6818      	ldr	r0, [r3, #0]
 8007d94:	1d3b      	adds	r3, r7, #4
 8007d96:	6819      	ldr	r1, [r3, #0]
 8007d98:	4b81      	ldr	r3, [pc, #516]	; (8007fa0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x119c>)
 8007d9a:	9301      	str	r3, [sp, #4]
 8007d9c:	f240 139d 	movw	r3, #413	; 0x19d
 8007da0:	9300      	str	r3, [sp, #0]
 8007da2:	4b80      	ldr	r3, [pc, #512]	; (8007fa4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11a0>)
 8007da4:	4a80      	ldr	r2, [pc, #512]	; (8007fa8 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11a4>)
 8007da6:	f7fd fb2a 	bl	80053fe <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8007daa:	2401      	movs	r4, #1
 8007dac:	e028      	b.n	8007e00 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xffc>
      if (const auto* schema_params = op->builtin_options_as_DivOptions()) {
 8007dae:	f107 030c 	add.w	r3, r7, #12
 8007db2:	6818      	ldr	r0, [r3, #0]
 8007db4:	f7fe fca9 	bl	800670a <_ZNK6tflite8Operator29builtin_options_as_DivOptionsEv>
 8007db8:	f8c7 0220 	str.w	r0, [r7, #544]	; 0x220
 8007dbc:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d013      	beq.n	8007dec <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfe8>
        params->activation =
            parse_activation(schema_params->fused_activation_function());
 8007dc4:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 8007dc8:	f7fe f832 	bl	8005e30 <_ZNK6tflite10DivOptions25fused_activation_functionEv>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	461d      	mov	r5, r3
        params->activation =
 8007dd0:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f002 fc6b 	bl	800a6b0 <_ZNKSt10unique_ptrI15TfLiteDivParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8007dda:	4604      	mov	r4, r0
            parse_activation(schema_params->fused_activation_function());
 8007ddc:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8007de0:	4629      	mov	r1, r5
 8007de2:	4618      	mov	r0, r3
 8007de4:	f7fe ffb4 	bl	8006d50 <_ZZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvENKUlNS_22ActivationFunctionTypeEE0_clESA_>
 8007de8:	4603      	mov	r3, r0
        params->activation =
 8007dea:	7023      	strb	r3, [r4, #0]
      }
      *builtin_data = params.release();
 8007dec:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8007df0:	4618      	mov	r0, r3
 8007df2:	f002 fc69 	bl	800a6c8 <_ZNSt10unique_ptrI15TfLiteDivParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8007df6:	4602      	mov	r2, r0
 8007df8:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8007dfc:	601a      	str	r2, [r3, #0]
      return kTfLiteOk;
 8007dfe:	2400      	movs	r4, #0
      auto params = safe_allocator.Allocate<TfLiteDivParams>();
 8007e00:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8007e04:	4618      	mov	r0, r3
 8007e06:	f002 fc27 	bl	800a658 <_ZNSt10unique_ptrI15TfLiteDivParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8007e0a:	f001 bcf1 	b.w	80097f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29ec>
    }
    case BuiltinOperator_SUB: {
      auto params = safe_allocator.Allocate<TfLiteSubParams>();
 8007e0e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8007e12:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8007e16:	4611      	mov	r1, r2
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f002 fc69 	bl	800a6f0 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI15TfLiteSubParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
 8007e1e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8007e22:	2100      	movs	r1, #0
 8007e24:	4618      	mov	r0, r3
 8007e26:	f002 fca0 	bl	800a76a <_ZStneI15TfLiteSubParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	f083 0301 	eor.w	r3, r3, #1
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d00e      	beq.n	8007e54 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1050>
 8007e36:	1d3b      	adds	r3, r7, #4
 8007e38:	6818      	ldr	r0, [r3, #0]
 8007e3a:	1d3b      	adds	r3, r7, #4
 8007e3c:	6819      	ldr	r1, [r3, #0]
 8007e3e:	4b58      	ldr	r3, [pc, #352]	; (8007fa0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x119c>)
 8007e40:	9301      	str	r3, [sp, #4]
 8007e42:	f240 13a7 	movw	r3, #423	; 0x1a7
 8007e46:	9300      	str	r3, [sp, #0]
 8007e48:	4b56      	ldr	r3, [pc, #344]	; (8007fa4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11a0>)
 8007e4a:	4a57      	ldr	r2, [pc, #348]	; (8007fa8 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11a4>)
 8007e4c:	f7fd fad7 	bl	80053fe <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8007e50:	2401      	movs	r4, #1
 8007e52:	e028      	b.n	8007ea6 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10a2>
      if (const auto* schema_params = op->builtin_options_as_SubOptions()) {
 8007e54:	f107 030c 	add.w	r3, r7, #12
 8007e58:	6818      	ldr	r0, [r3, #0]
 8007e5a:	f7fe fc42 	bl	80066e2 <_ZNK6tflite8Operator29builtin_options_as_SubOptionsEv>
 8007e5e:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
 8007e62:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d013      	beq.n	8007e92 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x108e>
        params->activation =
            parse_activation(schema_params->fused_activation_function());
 8007e6a:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 8007e6e:	f7fd ffcf 	bl	8005e10 <_ZNK6tflite10SubOptions25fused_activation_functionEv>
 8007e72:	4603      	mov	r3, r0
 8007e74:	461d      	mov	r5, r3
        params->activation =
 8007e76:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f002 fc82 	bl	800a784 <_ZNKSt10unique_ptrI15TfLiteSubParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8007e80:	4604      	mov	r4, r0
            parse_activation(schema_params->fused_activation_function());
 8007e82:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8007e86:	4629      	mov	r1, r5
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f7fe ff61 	bl	8006d50 <_ZZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvENKUlNS_22ActivationFunctionTypeEE0_clESA_>
 8007e8e:	4603      	mov	r3, r0
        params->activation =
 8007e90:	7023      	strb	r3, [r4, #0]
      }
      *builtin_data = params.release();
 8007e92:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8007e96:	4618      	mov	r0, r3
 8007e98:	f002 fc80 	bl	800a79c <_ZNSt10unique_ptrI15TfLiteSubParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8007ea2:	601a      	str	r2, [r3, #0]
      return kTfLiteOk;
 8007ea4:	2400      	movs	r4, #0
      auto params = safe_allocator.Allocate<TfLiteSubParams>();
 8007ea6:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f002 fc3e 	bl	800a72c <_ZNSt10unique_ptrI15TfLiteSubParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8007eb0:	f001 bc9e 	b.w	80097f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29ec>
    }
    case BuiltinOperator_L2_NORMALIZATION: {
      auto params = safe_allocator.Allocate<TfLiteL2NormParams>();
 8007eb4:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8007eb8:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8007ebc:	4611      	mov	r1, r2
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f002 fc80 	bl	800a7c4 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI18TfLiteL2NormParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
 8007ec4:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8007ec8:	2100      	movs	r1, #0
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f002 fcb7 	bl	800a83e <_ZStneI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	f083 0301 	eor.w	r3, r3, #1
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d00e      	beq.n	8007efa <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10f6>
 8007edc:	1d3b      	adds	r3, r7, #4
 8007ede:	6818      	ldr	r0, [r3, #0]
 8007ee0:	1d3b      	adds	r3, r7, #4
 8007ee2:	6819      	ldr	r1, [r3, #0]
 8007ee4:	4b2e      	ldr	r3, [pc, #184]	; (8007fa0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x119c>)
 8007ee6:	9301      	str	r3, [sp, #4]
 8007ee8:	f240 13b1 	movw	r3, #433	; 0x1b1
 8007eec:	9300      	str	r3, [sp, #0]
 8007eee:	4b2d      	ldr	r3, [pc, #180]	; (8007fa4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11a0>)
 8007ef0:	4a2d      	ldr	r2, [pc, #180]	; (8007fa8 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11a4>)
 8007ef2:	f7fd fa84 	bl	80053fe <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8007ef6:	2401      	movs	r4, #1
 8007ef8:	e028      	b.n	8007f4c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1148>
      if (const auto* schema_params = op->builtin_options_as_L2NormOptions()) {
 8007efa:	f107 030c 	add.w	r3, r7, #12
 8007efe:	6818      	ldr	r0, [r3, #0]
 8007f00:	f7fe fb13 	bl	800652a <_ZNK6tflite8Operator32builtin_options_as_L2NormOptionsEv>
 8007f04:	f8c7 01d4 	str.w	r0, [r7, #468]	; 0x1d4
 8007f08:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d013      	beq.n	8007f38 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1134>
        params->activation =
            parse_activation(schema_params->fused_activation_function());
 8007f10:	f8d7 01d4 	ldr.w	r0, [r7, #468]	; 0x1d4
 8007f14:	f7fd fd43 	bl	800599e <_ZNK6tflite13L2NormOptions25fused_activation_functionEv>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	461d      	mov	r5, r3
        params->activation =
 8007f1c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8007f20:	4618      	mov	r0, r3
 8007f22:	f002 fc99 	bl	800a858 <_ZNKSt10unique_ptrI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8007f26:	4604      	mov	r4, r0
            parse_activation(schema_params->fused_activation_function());
 8007f28:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8007f2c:	4629      	mov	r1, r5
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f7fe ff0e 	bl	8006d50 <_ZZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvENKUlNS_22ActivationFunctionTypeEE0_clESA_>
 8007f34:	4603      	mov	r3, r0
        params->activation =
 8007f36:	7023      	strb	r3, [r4, #0]
      }
      *builtin_data = params.release();
 8007f38:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f002 fc97 	bl	800a870 <_ZNSt10unique_ptrI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8007f42:	4602      	mov	r2, r0
 8007f44:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8007f48:	601a      	str	r2, [r3, #0]
      return kTfLiteOk;
 8007f4a:	2400      	movs	r4, #0
      auto params = safe_allocator.Allocate<TfLiteL2NormParams>();
 8007f4c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8007f50:	4618      	mov	r0, r3
 8007f52:	f002 fc55 	bl	800a800 <_ZNSt10unique_ptrI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8007f56:	f001 bc4b 	b.w	80097f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29ec>
    }
    case BuiltinOperator_LOCAL_RESPONSE_NORMALIZATION: {
      auto params = safe_allocator.Allocate<TfLiteLocalResponseNormParams>();
 8007f5a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8007f5e:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8007f62:	4611      	mov	r1, r2
 8007f64:	4618      	mov	r0, r3
 8007f66:	f002 fc97 	bl	800a898 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI29TfLiteLocalResponseNormParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
 8007f6a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8007f6e:	2100      	movs	r1, #0
 8007f70:	4618      	mov	r0, r3
 8007f72:	f002 fcce 	bl	800a912 <_ZStneI29TfLiteLocalResponseNormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8007f76:	4603      	mov	r3, r0
 8007f78:	f083 0301 	eor.w	r3, r3, #1
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d014      	beq.n	8007fac <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11a8>
 8007f82:	1d3b      	adds	r3, r7, #4
 8007f84:	6818      	ldr	r0, [r3, #0]
 8007f86:	1d3b      	adds	r3, r7, #4
 8007f88:	6819      	ldr	r1, [r3, #0]
 8007f8a:	4b05      	ldr	r3, [pc, #20]	; (8007fa0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x119c>)
 8007f8c:	9301      	str	r3, [sp, #4]
 8007f8e:	f240 13bb 	movw	r3, #443	; 0x1bb
 8007f92:	9300      	str	r3, [sp, #0]
 8007f94:	4b03      	ldr	r3, [pc, #12]	; (8007fa4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11a0>)
 8007f96:	4a04      	ldr	r2, [pc, #16]	; (8007fa8 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11a4>)
 8007f98:	f7fd fa31 	bl	80053fe <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8007f9c:	2401      	movs	r4, #1
 8007f9e:	e050      	b.n	8008042 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x123e>
 8007fa0:	08021fe8 	.word	0x08021fe8
 8007fa4:	08021f88 	.word	0x08021f88
 8007fa8:	08021fd0 	.word	0x08021fd0
      if (const auto* schema_params =
              op->builtin_options_as_LocalResponseNormalizationOptions()) {
 8007fac:	f107 030c 	add.w	r3, r7, #12
 8007fb0:	6818      	ldr	r0, [r3, #0]
 8007fb2:	f7fe face 	bl	8006552 <_ZNK6tflite8Operator52builtin_options_as_LocalResponseNormalizationOptionsEv>
 8007fb6:	f8c7 01d8 	str.w	r0, [r7, #472]	; 0x1d8
      if (const auto* schema_params =
 8007fba:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d035      	beq.n	800802e <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x122a>
        params->radius = schema_params->radius();
 8007fc2:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f002 fcb0 	bl	800a92c <_ZNKSt10unique_ptrI29TfLiteLocalResponseNormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8007fcc:	4604      	mov	r4, r0
 8007fce:	f8d7 01d8 	ldr.w	r0, [r7, #472]	; 0x1d8
 8007fd2:	f7fd fcf4 	bl	80059be <_ZNK6tflite33LocalResponseNormalizationOptions6radiusEv>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	6023      	str	r3, [r4, #0]
        params->bias = schema_params->bias();
 8007fda:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f002 fca4 	bl	800a92c <_ZNKSt10unique_ptrI29TfLiteLocalResponseNormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8007fe4:	4604      	mov	r4, r0
 8007fe6:	f8d7 01d8 	ldr.w	r0, [r7, #472]	; 0x1d8
 8007fea:	f7fd fcf7 	bl	80059dc <_ZNK6tflite33LocalResponseNormalizationOptions4biasEv>
 8007fee:	eef0 7a40 	vmov.f32	s15, s0
 8007ff2:	edc4 7a01 	vstr	s15, [r4, #4]
        params->alpha = schema_params->alpha();
 8007ff6:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f002 fc96 	bl	800a92c <_ZNKSt10unique_ptrI29TfLiteLocalResponseNormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8008000:	4604      	mov	r4, r0
 8008002:	f8d7 01d8 	ldr.w	r0, [r7, #472]	; 0x1d8
 8008006:	f7fd fcfd 	bl	8005a04 <_ZNK6tflite33LocalResponseNormalizationOptions5alphaEv>
 800800a:	eef0 7a40 	vmov.f32	s15, s0
 800800e:	edc4 7a02 	vstr	s15, [r4, #8]
        params->beta = schema_params->beta();
 8008012:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8008016:	4618      	mov	r0, r3
 8008018:	f002 fc88 	bl	800a92c <_ZNKSt10unique_ptrI29TfLiteLocalResponseNormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800801c:	4604      	mov	r4, r0
 800801e:	f8d7 01d8 	ldr.w	r0, [r7, #472]	; 0x1d8
 8008022:	f7fd fd03 	bl	8005a2c <_ZNK6tflite33LocalResponseNormalizationOptions4betaEv>
 8008026:	eef0 7a40 	vmov.f32	s15, s0
 800802a:	edc4 7a03 	vstr	s15, [r4, #12]
      }
      *builtin_data = params.release();
 800802e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8008032:	4618      	mov	r0, r3
 8008034:	f002 fc86 	bl	800a944 <_ZNSt10unique_ptrI29TfLiteLocalResponseNormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8008038:	4602      	mov	r2, r0
 800803a:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 800803e:	601a      	str	r2, [r3, #0]
      return kTfLiteOk;
 8008040:	2400      	movs	r4, #0
      auto params = safe_allocator.Allocate<TfLiteLocalResponseNormParams>();
 8008042:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8008046:	4618      	mov	r0, r3
 8008048:	f002 fc44 	bl	800a8d4 <_ZNSt10unique_ptrI29TfLiteLocalResponseNormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 800804c:	f001 bbd0 	b.w	80097f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29ec>
    }
    case BuiltinOperator_LSTM: {
      auto params = safe_allocator.Allocate<TfLiteLSTMParams>();
 8008050:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8008054:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8008058:	4611      	mov	r1, r2
 800805a:	4618      	mov	r0, r3
 800805c:	f002 fc86 	bl	800a96c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI16TfLiteLSTMParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
 8008060:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8008064:	2100      	movs	r1, #0
 8008066:	4618      	mov	r0, r3
 8008068:	f002 fcbd 	bl	800a9e6 <_ZStneI16TfLiteLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 800806c:	4603      	mov	r3, r0
 800806e:	f083 0301 	eor.w	r3, r3, #1
 8008072:	b2db      	uxtb	r3, r3
 8008074:	2b00      	cmp	r3, #0
 8008076:	d00e      	beq.n	8008096 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1292>
 8008078:	1d3b      	adds	r3, r7, #4
 800807a:	6818      	ldr	r0, [r3, #0]
 800807c:	1d3b      	adds	r3, r7, #4
 800807e:	6819      	ldr	r1, [r3, #0]
 8008080:	4bd7      	ldr	r3, [pc, #860]	; (80083e0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x15dc>)
 8008082:	9301      	str	r3, [sp, #4]
 8008084:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
 8008088:	9300      	str	r3, [sp, #0]
 800808a:	4bd6      	ldr	r3, [pc, #856]	; (80083e4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x15e0>)
 800808c:	4ad6      	ldr	r2, [pc, #856]	; (80083e8 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x15e4>)
 800808e:	f7fd f9b6 	bl	80053fe <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8008092:	2401      	movs	r4, #1
 8008094:	e082      	b.n	800819c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1398>
      if (const auto* lstm_params = op->builtin_options_as_LSTMOptions()) {
 8008096:	f107 030c 	add.w	r3, r7, #12
 800809a:	6818      	ldr	r0, [r3, #0]
 800809c:	f7fe fa6d 	bl	800657a <_ZNK6tflite8Operator30builtin_options_as_LSTMOptionsEv>
 80080a0:	f8c7 01e0 	str.w	r0, [r7, #480]	; 0x1e0
 80080a4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d070      	beq.n	800818e <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x138a>
        params->activation =
            parse_activation(lstm_params->fused_activation_function());
 80080ac:	f8d7 01e0 	ldr.w	r0, [r7, #480]	; 0x1e0
 80080b0:	f7fd fcd0 	bl	8005a54 <_ZNK6tflite11LSTMOptions25fused_activation_functionEv>
 80080b4:	4603      	mov	r3, r0
 80080b6:	461d      	mov	r5, r3
        params->activation =
 80080b8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80080bc:	4618      	mov	r0, r3
 80080be:	f002 fc9f 	bl	800aa00 <_ZNKSt10unique_ptrI16TfLiteLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80080c2:	4604      	mov	r4, r0
            parse_activation(lstm_params->fused_activation_function());
 80080c4:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80080c8:	4629      	mov	r1, r5
 80080ca:	4618      	mov	r0, r3
 80080cc:	f7fe fe40 	bl	8006d50 <_ZZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvENKUlNS_22ActivationFunctionTypeEE0_clESA_>
 80080d0:	4603      	mov	r3, r0
        params->activation =
 80080d2:	7023      	strb	r3, [r4, #0]
        params->cell_clip = lstm_params->cell_clip();
 80080d4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80080d8:	4618      	mov	r0, r3
 80080da:	f002 fc91 	bl	800aa00 <_ZNKSt10unique_ptrI16TfLiteLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80080de:	4604      	mov	r4, r0
 80080e0:	f8d7 01e0 	ldr.w	r0, [r7, #480]	; 0x1e0
 80080e4:	f7fd fcc6 	bl	8005a74 <_ZNK6tflite11LSTMOptions9cell_clipEv>
 80080e8:	eef0 7a40 	vmov.f32	s15, s0
 80080ec:	edc4 7a01 	vstr	s15, [r4, #4]
        params->proj_clip = lstm_params->proj_clip();
 80080f0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80080f4:	4618      	mov	r0, r3
 80080f6:	f002 fc83 	bl	800aa00 <_ZNKSt10unique_ptrI16TfLiteLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80080fa:	4604      	mov	r4, r0
 80080fc:	f8d7 01e0 	ldr.w	r0, [r7, #480]	; 0x1e0
 8008100:	f7fd fccc 	bl	8005a9c <_ZNK6tflite11LSTMOptions9proj_clipEv>
 8008104:	eef0 7a40 	vmov.f32	s15, s0
 8008108:	edc4 7a02 	vstr	s15, [r4, #8]
        switch (lstm_params->kernel_type()) {
 800810c:	f8d7 01e0 	ldr.w	r0, [r7, #480]	; 0x1e0
 8008110:	f7fd fcd8 	bl	8005ac4 <_ZNK6tflite11LSTMOptions11kernel_typeEv>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d002      	beq.n	8008120 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x131c>
 800811a:	2b01      	cmp	r3, #1
 800811c:	d009      	beq.n	8008132 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x132e>
 800811e:	e011      	b.n	8008144 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1340>
          case LSTMKernelType_FULL:
            params->kernel_type = kTfLiteLSTMFullKernel;
 8008120:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8008124:	4618      	mov	r0, r3
 8008126:	f002 fc6b 	bl	800aa00 <_ZNKSt10unique_ptrI16TfLiteLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800812a:	4603      	mov	r3, r0
 800812c:	2200      	movs	r2, #0
 800812e:	731a      	strb	r2, [r3, #12]
            break;
 8008130:	e016      	b.n	8008160 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x135c>
          case LSTMKernelType_BASIC:
            params->kernel_type = kTfLiteLSTMBasicKernel;
 8008132:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8008136:	4618      	mov	r0, r3
 8008138:	f002 fc62 	bl	800aa00 <_ZNKSt10unique_ptrI16TfLiteLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800813c:	4603      	mov	r3, r0
 800813e:	2201      	movs	r2, #1
 8008140:	731a      	strb	r2, [r3, #12]
            break;
 8008142:	e00d      	b.n	8008160 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x135c>
          default:
            TF_LITE_REPORT_ERROR(error_reporter,
 8008144:	1d3b      	adds	r3, r7, #4
 8008146:	681c      	ldr	r4, [r3, #0]
 8008148:	f8d7 01e0 	ldr.w	r0, [r7, #480]	; 0x1e0
 800814c:	f7fd fcba 	bl	8005ac4 <_ZNK6tflite11LSTMOptions11kernel_typeEv>
 8008150:	4603      	mov	r3, r0
 8008152:	461a      	mov	r2, r3
 8008154:	49a5      	ldr	r1, [pc, #660]	; (80083ec <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x15e8>)
 8008156:	4620      	mov	r0, r4
 8008158:	f7fd f938 	bl	80053cc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                                 "Unhandled LSTM kernel type: %d",
                                 lstm_params->kernel_type());
            return kTfLiteError;
 800815c:	2401      	movs	r4, #1
 800815e:	e01d      	b.n	800819c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1398>
        }
        params->asymmetric_quantize_inputs =
 8008160:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8008164:	4618      	mov	r0, r3
 8008166:	f002 fc4b 	bl	800aa00 <_ZNKSt10unique_ptrI16TfLiteLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800816a:	4604      	mov	r4, r0
            lstm_params->asymmetric_quantize_inputs();
 800816c:	f8d7 01e0 	ldr.w	r0, [r7, #480]	; 0x1e0
 8008170:	f7fd fcb8 	bl	8005ae4 <_ZNK6tflite11LSTMOptions26asymmetric_quantize_inputsEv>
 8008174:	4603      	mov	r3, r0
        params->asymmetric_quantize_inputs =
 8008176:	7363      	strb	r3, [r4, #13]
      } else {
        TF_LITE_REPORT_ERROR(error_reporter,
                             "No valid LSTM builtin options exist");
        return kTfLiteError;
      }
      *builtin_data = params.release();
 8008178:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800817c:	4618      	mov	r0, r3
 800817e:	f002 fc4b 	bl	800aa18 <_ZNSt10unique_ptrI16TfLiteLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8008182:	4602      	mov	r2, r0
 8008184:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8008188:	601a      	str	r2, [r3, #0]
      return kTfLiteOk;
 800818a:	2400      	movs	r4, #0
 800818c:	e006      	b.n	800819c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1398>
        TF_LITE_REPORT_ERROR(error_reporter,
 800818e:	1d3b      	adds	r3, r7, #4
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4997      	ldr	r1, [pc, #604]	; (80083f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x15ec>)
 8008194:	4618      	mov	r0, r3
 8008196:	f7fd f919 	bl	80053cc <_ZN6tflite13ErrorReporter6ReportEPKcz>
        return kTfLiteError;
 800819a:	2401      	movs	r4, #1
      auto params = safe_allocator.Allocate<TfLiteLSTMParams>();
 800819c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80081a0:	4618      	mov	r0, r3
 80081a2:	f002 fc01 	bl	800a9a8 <_ZNSt10unique_ptrI16TfLiteLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 80081a6:	f001 bb23 	b.w	80097f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29ec>
    }
    case BuiltinOperator_UNIDIRECTIONAL_SEQUENCE_LSTM: {
      auto params =
          safe_allocator.Allocate<TfLiteUnidirectionalSequenceLSTMParams>();
 80081aa:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80081ae:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 80081b2:	4611      	mov	r1, r2
 80081b4:	4618      	mov	r0, r3
 80081b6:	f002 fc43 	bl	800aa40 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI38TfLiteUnidirectionalSequenceLSTMParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
 80081ba:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80081be:	2100      	movs	r1, #0
 80081c0:	4618      	mov	r0, r3
 80081c2:	f002 fc7a 	bl	800aaba <_ZStneI38TfLiteUnidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 80081c6:	4603      	mov	r3, r0
 80081c8:	f083 0301 	eor.w	r3, r3, #1
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d00e      	beq.n	80081f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x13ec>
 80081d2:	1d3b      	adds	r3, r7, #4
 80081d4:	6818      	ldr	r0, [r3, #0]
 80081d6:	1d3b      	adds	r3, r7, #4
 80081d8:	6819      	ldr	r1, [r3, #0]
 80081da:	4b81      	ldr	r3, [pc, #516]	; (80083e0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x15dc>)
 80081dc:	9301      	str	r3, [sp, #4]
 80081de:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
 80081e2:	9300      	str	r3, [sp, #0]
 80081e4:	4b7f      	ldr	r3, [pc, #508]	; (80083e4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x15e0>)
 80081e6:	4a80      	ldr	r2, [pc, #512]	; (80083e8 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x15e4>)
 80081e8:	f7fd f909 	bl	80053fe <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 80081ec:	2401      	movs	r4, #1
 80081ee:	e05c      	b.n	80082aa <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x14a6>
      if (const auto* seq_lstm_params =
              op->builtin_options_as_UnidirectionalSequenceLSTMOptions()) {
 80081f0:	f107 030c 	add.w	r3, r7, #12
 80081f4:	6818      	ldr	r0, [r3, #0]
 80081f6:	f7fe fbdc 	bl	80069b2 <_ZNK6tflite8Operator52builtin_options_as_UnidirectionalSequenceLSTMOptionsEv>
 80081fa:	f8c7 0230 	str.w	r0, [r7, #560]	; 0x230
      if (const auto* seq_lstm_params =
 80081fe:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8008202:	2b00      	cmp	r3, #0
 8008204:	d047      	beq.n	8008296 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1492>
        params->activation =
            parse_activation(seq_lstm_params->fused_activation_function());
 8008206:	f8d7 0230 	ldr.w	r0, [r7, #560]	; 0x230
 800820a:	f7fd fc7f 	bl	8005b0c <_ZNK6tflite33UnidirectionalSequenceLSTMOptions25fused_activation_functionEv>
 800820e:	4603      	mov	r3, r0
 8008210:	461d      	mov	r5, r3
        params->activation =
 8008212:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8008216:	4618      	mov	r0, r3
 8008218:	f002 fc5c 	bl	800aad4 <_ZNKSt10unique_ptrI38TfLiteUnidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800821c:	4604      	mov	r4, r0
            parse_activation(seq_lstm_params->fused_activation_function());
 800821e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8008222:	4629      	mov	r1, r5
 8008224:	4618      	mov	r0, r3
 8008226:	f7fe fd93 	bl	8006d50 <_ZZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvENKUlNS_22ActivationFunctionTypeEE0_clESA_>
 800822a:	4603      	mov	r3, r0
        params->activation =
 800822c:	7023      	strb	r3, [r4, #0]
        params->cell_clip = seq_lstm_params->cell_clip();
 800822e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8008232:	4618      	mov	r0, r3
 8008234:	f002 fc4e 	bl	800aad4 <_ZNKSt10unique_ptrI38TfLiteUnidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8008238:	4604      	mov	r4, r0
 800823a:	f8d7 0230 	ldr.w	r0, [r7, #560]	; 0x230
 800823e:	f7fd fc75 	bl	8005b2c <_ZNK6tflite33UnidirectionalSequenceLSTMOptions9cell_clipEv>
 8008242:	eef0 7a40 	vmov.f32	s15, s0
 8008246:	edc4 7a01 	vstr	s15, [r4, #4]
        params->proj_clip = seq_lstm_params->proj_clip();
 800824a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800824e:	4618      	mov	r0, r3
 8008250:	f002 fc40 	bl	800aad4 <_ZNKSt10unique_ptrI38TfLiteUnidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8008254:	4604      	mov	r4, r0
 8008256:	f8d7 0230 	ldr.w	r0, [r7, #560]	; 0x230
 800825a:	f7fd fc7b 	bl	8005b54 <_ZNK6tflite33UnidirectionalSequenceLSTMOptions9proj_clipEv>
 800825e:	eef0 7a40 	vmov.f32	s15, s0
 8008262:	edc4 7a02 	vstr	s15, [r4, #8]
        params->time_major = seq_lstm_params->time_major();
 8008266:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800826a:	4618      	mov	r0, r3
 800826c:	f002 fc32 	bl	800aad4 <_ZNKSt10unique_ptrI38TfLiteUnidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8008270:	4604      	mov	r4, r0
 8008272:	f8d7 0230 	ldr.w	r0, [r7, #560]	; 0x230
 8008276:	f7fd fc81 	bl	8005b7c <_ZNK6tflite33UnidirectionalSequenceLSTMOptions10time_majorEv>
 800827a:	4603      	mov	r3, r0
 800827c:	7323      	strb	r3, [r4, #12]
        params->asymmetric_quantize_inputs =
 800827e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8008282:	4618      	mov	r0, r3
 8008284:	f002 fc26 	bl	800aad4 <_ZNKSt10unique_ptrI38TfLiteUnidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8008288:	4604      	mov	r4, r0
            seq_lstm_params->asymmetric_quantize_inputs();
 800828a:	f8d7 0230 	ldr.w	r0, [r7, #560]	; 0x230
 800828e:	f7fd fc89 	bl	8005ba4 <_ZNK6tflite33UnidirectionalSequenceLSTMOptions26asymmetric_quantize_inputsEv>
 8008292:	4603      	mov	r3, r0
        params->asymmetric_quantize_inputs =
 8008294:	7363      	strb	r3, [r4, #13]
      }
      *builtin_data = params.release();
 8008296:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800829a:	4618      	mov	r0, r3
 800829c:	f002 fc26 	bl	800aaec <_ZNSt10unique_ptrI38TfLiteUnidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 80082a0:	4602      	mov	r2, r0
 80082a2:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 80082a6:	601a      	str	r2, [r3, #0]
      return kTfLiteOk;
 80082a8:	2400      	movs	r4, #0
          safe_allocator.Allocate<TfLiteUnidirectionalSequenceLSTMParams>();
 80082aa:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80082ae:	4618      	mov	r0, r3
 80082b0:	f002 fbe4 	bl	800aa7c <_ZNSt10unique_ptrI38TfLiteUnidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 80082b4:	f001 ba9c 	b.w	80097f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29ec>
    }
    case BuiltinOperator_BIDIRECTIONAL_SEQUENCE_LSTM: {
      auto params =
          safe_allocator.Allocate<TfLiteBidirectionalSequenceLSTMParams>();
 80082b8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80082bc:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 80082c0:	4611      	mov	r1, r2
 80082c2:	4618      	mov	r0, r3
 80082c4:	f002 fc26 	bl	800ab14 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI37TfLiteBidirectionalSequenceLSTMParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
 80082c8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80082cc:	2100      	movs	r1, #0
 80082ce:	4618      	mov	r0, r3
 80082d0:	f002 fc5d 	bl	800ab8e <_ZStneI37TfLiteBidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 80082d4:	4603      	mov	r3, r0
 80082d6:	f083 0301 	eor.w	r3, r3, #1
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d00e      	beq.n	80082fe <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x14fa>
 80082e0:	1d3b      	adds	r3, r7, #4
 80082e2:	6818      	ldr	r0, [r3, #0]
 80082e4:	1d3b      	adds	r3, r7, #4
 80082e6:	6819      	ldr	r1, [r3, #0]
 80082e8:	4b3d      	ldr	r3, [pc, #244]	; (80083e0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x15dc>)
 80082ea:	9301      	str	r3, [sp, #4]
 80082ec:	f240 13f9 	movw	r3, #505	; 0x1f9
 80082f0:	9300      	str	r3, [sp, #0]
 80082f2:	4b3c      	ldr	r3, [pc, #240]	; (80083e4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x15e0>)
 80082f4:	4a3c      	ldr	r2, [pc, #240]	; (80083e8 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x15e4>)
 80082f6:	f7fd f882 	bl	80053fe <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 80082fa:	2401      	movs	r4, #1
 80082fc:	e068      	b.n	80083d0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x15cc>
      if (const auto* bidi_lstm_params =
              op->builtin_options_as_BidirectionalSequenceLSTMOptions()) {
 80082fe:	f107 030c 	add.w	r3, r7, #12
 8008302:	6818      	ldr	r0, [r3, #0]
 8008304:	f7fe fb2d 	bl	8006962 <_ZNK6tflite8Operator51builtin_options_as_BidirectionalSequenceLSTMOptionsEv>
 8008308:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
      if (const auto* bidi_lstm_params =
 800830c:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8008310:	2b00      	cmp	r3, #0
 8008312:	d053      	beq.n	80083bc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x15b8>
        params->activation =
            parse_activation(bidi_lstm_params->fused_activation_function());
 8008314:	f8d7 0240 	ldr.w	r0, [r7, #576]	; 0x240
 8008318:	f7fd fc58 	bl	8005bcc <_ZNK6tflite32BidirectionalSequenceLSTMOptions25fused_activation_functionEv>
 800831c:	4603      	mov	r3, r0
 800831e:	461d      	mov	r5, r3
        params->activation =
 8008320:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8008324:	4618      	mov	r0, r3
 8008326:	f002 fc3f 	bl	800aba8 <_ZNKSt10unique_ptrI37TfLiteBidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800832a:	4604      	mov	r4, r0
            parse_activation(bidi_lstm_params->fused_activation_function());
 800832c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8008330:	4629      	mov	r1, r5
 8008332:	4618      	mov	r0, r3
 8008334:	f7fe fd0c 	bl	8006d50 <_ZZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvENKUlNS_22ActivationFunctionTypeEE0_clESA_>
 8008338:	4603      	mov	r3, r0
        params->activation =
 800833a:	7023      	strb	r3, [r4, #0]
        params->cell_clip = bidi_lstm_params->cell_clip();
 800833c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8008340:	4618      	mov	r0, r3
 8008342:	f002 fc31 	bl	800aba8 <_ZNKSt10unique_ptrI37TfLiteBidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8008346:	4604      	mov	r4, r0
 8008348:	f8d7 0240 	ldr.w	r0, [r7, #576]	; 0x240
 800834c:	f7fd fc4e 	bl	8005bec <_ZNK6tflite32BidirectionalSequenceLSTMOptions9cell_clipEv>
 8008350:	eef0 7a40 	vmov.f32	s15, s0
 8008354:	edc4 7a01 	vstr	s15, [r4, #4]
        params->proj_clip = bidi_lstm_params->proj_clip();
 8008358:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800835c:	4618      	mov	r0, r3
 800835e:	f002 fc23 	bl	800aba8 <_ZNKSt10unique_ptrI37TfLiteBidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8008362:	4604      	mov	r4, r0
 8008364:	f8d7 0240 	ldr.w	r0, [r7, #576]	; 0x240
 8008368:	f7fd fc54 	bl	8005c14 <_ZNK6tflite32BidirectionalSequenceLSTMOptions9proj_clipEv>
 800836c:	eef0 7a40 	vmov.f32	s15, s0
 8008370:	edc4 7a02 	vstr	s15, [r4, #8]
        params->merge_outputs = bidi_lstm_params->merge_outputs();
 8008374:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8008378:	4618      	mov	r0, r3
 800837a:	f002 fc15 	bl	800aba8 <_ZNKSt10unique_ptrI37TfLiteBidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800837e:	4604      	mov	r4, r0
 8008380:	f8d7 0240 	ldr.w	r0, [r7, #576]	; 0x240
 8008384:	f7fd fc5a 	bl	8005c3c <_ZNK6tflite32BidirectionalSequenceLSTMOptions13merge_outputsEv>
 8008388:	4603      	mov	r3, r0
 800838a:	7323      	strb	r3, [r4, #12]
        params->time_major = bidi_lstm_params->time_major();
 800838c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8008390:	4618      	mov	r0, r3
 8008392:	f002 fc09 	bl	800aba8 <_ZNKSt10unique_ptrI37TfLiteBidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8008396:	4604      	mov	r4, r0
 8008398:	f8d7 0240 	ldr.w	r0, [r7, #576]	; 0x240
 800839c:	f7fd fc62 	bl	8005c64 <_ZNK6tflite32BidirectionalSequenceLSTMOptions10time_majorEv>
 80083a0:	4603      	mov	r3, r0
 80083a2:	7363      	strb	r3, [r4, #13]
        params->asymmetric_quantize_inputs =
 80083a4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80083a8:	4618      	mov	r0, r3
 80083aa:	f002 fbfd 	bl	800aba8 <_ZNKSt10unique_ptrI37TfLiteBidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80083ae:	4604      	mov	r4, r0
            bidi_lstm_params->asymmetric_quantize_inputs();
 80083b0:	f8d7 0240 	ldr.w	r0, [r7, #576]	; 0x240
 80083b4:	f7fd fc6a 	bl	8005c8c <_ZNK6tflite32BidirectionalSequenceLSTMOptions26asymmetric_quantize_inputsEv>
 80083b8:	4603      	mov	r3, r0
        params->asymmetric_quantize_inputs =
 80083ba:	73a3      	strb	r3, [r4, #14]
      }
      *builtin_data = params.release();
 80083bc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80083c0:	4618      	mov	r0, r3
 80083c2:	f002 fbfd 	bl	800abc0 <_ZNSt10unique_ptrI37TfLiteBidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 80083c6:	4602      	mov	r2, r0
 80083c8:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 80083cc:	601a      	str	r2, [r3, #0]
      return kTfLiteOk;
 80083ce:	2400      	movs	r4, #0
          safe_allocator.Allocate<TfLiteBidirectionalSequenceLSTMParams>();
 80083d0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80083d4:	4618      	mov	r0, r3
 80083d6:	f002 fbbb 	bl	800ab50 <_ZNSt10unique_ptrI37TfLiteBidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 80083da:	f001 ba09 	b.w	80097f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29ec>
 80083de:	bf00      	nop
 80083e0:	08021fe8 	.word	0x08021fe8
 80083e4:	08021f88 	.word	0x08021f88
 80083e8:	08021fd0 	.word	0x08021fd0
 80083ec:	08022028 	.word	0x08022028
 80083f0:	08022048 	.word	0x08022048
    }
    case BuiltinOperator_RESIZE_BILINEAR: {
      auto params = safe_allocator.Allocate<TfLiteResizeBilinearParams>();
 80083f4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80083f8:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 80083fc:	4611      	mov	r1, r2
 80083fe:	4618      	mov	r0, r3
 8008400:	f002 fbf2 	bl	800abe8 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI26TfLiteResizeBilinearParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
 8008404:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8008408:	2100      	movs	r1, #0
 800840a:	4618      	mov	r0, r3
 800840c:	f002 fc29 	bl	800ac62 <_ZStneI26TfLiteResizeBilinearParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8008410:	4603      	mov	r3, r0
 8008412:	f083 0301 	eor.w	r3, r3, #1
 8008416:	b2db      	uxtb	r3, r3
 8008418:	2b00      	cmp	r3, #0
 800841a:	d00e      	beq.n	800843a <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1636>
 800841c:	1d3b      	adds	r3, r7, #4
 800841e:	6818      	ldr	r0, [r3, #0]
 8008420:	1d3b      	adds	r3, r7, #4
 8008422:	6819      	ldr	r1, [r3, #0]
 8008424:	4bd7      	ldr	r3, [pc, #860]	; (8008784 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1980>)
 8008426:	9301      	str	r3, [sp, #4]
 8008428:	f240 230a 	movw	r3, #522	; 0x20a
 800842c:	9300      	str	r3, [sp, #0]
 800842e:	4bd6      	ldr	r3, [pc, #856]	; (8008788 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1984>)
 8008430:	4ad6      	ldr	r2, [pc, #856]	; (800878c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1988>)
 8008432:	f7fc ffe4 	bl	80053fe <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8008436:	2401      	movs	r4, #1
 8008438:	e03d      	b.n	80084b6 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x16b2>
      if (const auto* schema_params =
              op->builtin_options_as_ResizeBilinearOptions()) {
 800843a:	f107 030c 	add.w	r3, r7, #12
 800843e:	6818      	ldr	r0, [r3, #0]
 8008440:	f7fe f8af 	bl	80065a2 <_ZNK6tflite8Operator40builtin_options_as_ResizeBilinearOptionsEv>
 8008444:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4
      if (const auto* schema_params =
 8008448:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800844c:	2b00      	cmp	r3, #0
 800844e:	d018      	beq.n	8008482 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x167e>
        params->align_corners = schema_params->align_corners();
 8008450:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8008454:	4618      	mov	r0, r3
 8008456:	f002 fc11 	bl	800ac7c <_ZNKSt10unique_ptrI26TfLiteResizeBilinearParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800845a:	4604      	mov	r4, r0
 800845c:	f8d7 01f4 	ldr.w	r0, [r7, #500]	; 0x1f4
 8008460:	f7fd fc28 	bl	8005cb4 <_ZNK6tflite21ResizeBilinearOptions13align_cornersEv>
 8008464:	4603      	mov	r3, r0
 8008466:	7023      	strb	r3, [r4, #0]
        params->half_pixel_centers = schema_params->half_pixel_centers();
 8008468:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800846c:	4618      	mov	r0, r3
 800846e:	f002 fc05 	bl	800ac7c <_ZNKSt10unique_ptrI26TfLiteResizeBilinearParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8008472:	4604      	mov	r4, r0
 8008474:	f8d7 01f4 	ldr.w	r0, [r7, #500]	; 0x1f4
 8008478:	f7fd fc30 	bl	8005cdc <_ZNK6tflite21ResizeBilinearOptions18half_pixel_centersEv>
 800847c:	4603      	mov	r3, r0
 800847e:	7063      	strb	r3, [r4, #1]
 8008480:	e00f      	b.n	80084a2 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x169e>
      } else {
        // Some older models did not populate the ResizeBilinearOptions field in
        // the flatbuffer, so ensure it's set to a sensible default.
        params->align_corners = false;
 8008482:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8008486:	4618      	mov	r0, r3
 8008488:	f002 fbf8 	bl	800ac7c <_ZNKSt10unique_ptrI26TfLiteResizeBilinearParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800848c:	4603      	mov	r3, r0
 800848e:	2200      	movs	r2, #0
 8008490:	701a      	strb	r2, [r3, #0]
        params->half_pixel_centers = false;
 8008492:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8008496:	4618      	mov	r0, r3
 8008498:	f002 fbf0 	bl	800ac7c <_ZNKSt10unique_ptrI26TfLiteResizeBilinearParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800849c:	4603      	mov	r3, r0
 800849e:	2200      	movs	r2, #0
 80084a0:	705a      	strb	r2, [r3, #1]
      }
      *builtin_data = params.release();
 80084a2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80084a6:	4618      	mov	r0, r3
 80084a8:	f002 fbf4 	bl	800ac94 <_ZNSt10unique_ptrI26TfLiteResizeBilinearParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 80084ac:	4602      	mov	r2, r0
 80084ae:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 80084b2:	601a      	str	r2, [r3, #0]
      return kTfLiteOk;
 80084b4:	2400      	movs	r4, #0
      auto params = safe_allocator.Allocate<TfLiteResizeBilinearParams>();
 80084b6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80084ba:	4618      	mov	r0, r3
 80084bc:	f002 fbb2 	bl	800ac24 <_ZNSt10unique_ptrI26TfLiteResizeBilinearParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 80084c0:	f001 b996 	b.w	80097f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29ec>
    }
    case BuiltinOperator_RESIZE_NEAREST_NEIGHBOR: {
      auto params =
          safe_allocator.Allocate<TfLiteResizeNearestNeighborParams>();
 80084c4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80084c8:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 80084cc:	4611      	mov	r1, r2
 80084ce:	4618      	mov	r0, r3
 80084d0:	f002 fbf4 	bl	800acbc <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI33TfLiteResizeNearestNeighborParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
 80084d4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80084d8:	2100      	movs	r1, #0
 80084da:	4618      	mov	r0, r3
 80084dc:	f002 fc2b 	bl	800ad36 <_ZStneI33TfLiteResizeNearestNeighborParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 80084e0:	4603      	mov	r3, r0
 80084e2:	f083 0301 	eor.w	r3, r3, #1
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d00e      	beq.n	800850a <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1706>
 80084ec:	1d3b      	adds	r3, r7, #4
 80084ee:	6818      	ldr	r0, [r3, #0]
 80084f0:	1d3b      	adds	r3, r7, #4
 80084f2:	6819      	ldr	r1, [r3, #0]
 80084f4:	4ba3      	ldr	r3, [pc, #652]	; (8008784 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1980>)
 80084f6:	9301      	str	r3, [sp, #4]
 80084f8:	f240 231b 	movw	r3, #539	; 0x21b
 80084fc:	9300      	str	r3, [sp, #0]
 80084fe:	4ba2      	ldr	r3, [pc, #648]	; (8008788 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1984>)
 8008500:	4aa2      	ldr	r2, [pc, #648]	; (800878c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1988>)
 8008502:	f7fc ff7c 	bl	80053fe <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8008506:	2401      	movs	r4, #1
 8008508:	e03d      	b.n	8008586 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1782>
      if (const auto* schema_params =
              op->builtin_options_as_ResizeNearestNeighborOptions()) {
 800850a:	f107 030c 	add.w	r3, r7, #12
 800850e:	6818      	ldr	r0, [r3, #0]
 8008510:	f7fe fa63 	bl	80069da <_ZNK6tflite8Operator47builtin_options_as_ResizeNearestNeighborOptionsEv>
 8008514:	f8c7 027c 	str.w	r0, [r7, #636]	; 0x27c
      if (const auto* schema_params =
 8008518:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 800851c:	2b00      	cmp	r3, #0
 800851e:	d018      	beq.n	8008552 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x174e>
        params->align_corners = schema_params->align_corners();
 8008520:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8008524:	4618      	mov	r0, r3
 8008526:	f002 fc13 	bl	800ad50 <_ZNKSt10unique_ptrI33TfLiteResizeNearestNeighborParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800852a:	4604      	mov	r4, r0
 800852c:	f8d7 027c 	ldr.w	r0, [r7, #636]	; 0x27c
 8008530:	f7fd fbe8 	bl	8005d04 <_ZNK6tflite28ResizeNearestNeighborOptions13align_cornersEv>
 8008534:	4603      	mov	r3, r0
 8008536:	7023      	strb	r3, [r4, #0]
        params->half_pixel_centers = schema_params->half_pixel_centers();
 8008538:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800853c:	4618      	mov	r0, r3
 800853e:	f002 fc07 	bl	800ad50 <_ZNKSt10unique_ptrI33TfLiteResizeNearestNeighborParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8008542:	4604      	mov	r4, r0
 8008544:	f8d7 027c 	ldr.w	r0, [r7, #636]	; 0x27c
 8008548:	f7fd fbf0 	bl	8005d2c <_ZNK6tflite28ResizeNearestNeighborOptions18half_pixel_centersEv>
 800854c:	4603      	mov	r3, r0
 800854e:	7063      	strb	r3, [r4, #1]
 8008550:	e00f      	b.n	8008572 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x176e>
      } else {
        params->align_corners = false;
 8008552:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8008556:	4618      	mov	r0, r3
 8008558:	f002 fbfa 	bl	800ad50 <_ZNKSt10unique_ptrI33TfLiteResizeNearestNeighborParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800855c:	4603      	mov	r3, r0
 800855e:	2200      	movs	r2, #0
 8008560:	701a      	strb	r2, [r3, #0]
        params->half_pixel_centers = false;
 8008562:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8008566:	4618      	mov	r0, r3
 8008568:	f002 fbf2 	bl	800ad50 <_ZNKSt10unique_ptrI33TfLiteResizeNearestNeighborParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800856c:	4603      	mov	r3, r0
 800856e:	2200      	movs	r2, #0
 8008570:	705a      	strb	r2, [r3, #1]
      }
      *builtin_data = params.release();
 8008572:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8008576:	4618      	mov	r0, r3
 8008578:	f002 fbf6 	bl	800ad68 <_ZNSt10unique_ptrI33TfLiteResizeNearestNeighborParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 800857c:	4602      	mov	r2, r0
 800857e:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8008582:	601a      	str	r2, [r3, #0]
      return kTfLiteOk;
 8008584:	2400      	movs	r4, #0
          safe_allocator.Allocate<TfLiteResizeNearestNeighborParams>();
 8008586:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800858a:	4618      	mov	r0, r3
 800858c:	f002 fbb4 	bl	800acf8 <_ZNSt10unique_ptrI33TfLiteResizeNearestNeighborParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8008590:	f001 b92e 	b.w	80097f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29ec>
    }
    case BuiltinOperator_RESHAPE: {
      auto params = safe_allocator.Allocate<TfLiteReshapeParams>();
 8008594:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8008598:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800859c:	4611      	mov	r1, r2
 800859e:	4618      	mov	r0, r3
 80085a0:	f002 fbf6 	bl	800ad90 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteReshapeParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
 80085a4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80085a8:	2100      	movs	r1, #0
 80085aa:	4618      	mov	r0, r3
 80085ac:	f002 fc2d 	bl	800ae0a <_ZStneI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 80085b0:	4603      	mov	r3, r0
 80085b2:	f083 0301 	eor.w	r3, r3, #1
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d00e      	beq.n	80085da <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x17d6>
 80085bc:	1d3b      	adds	r3, r7, #4
 80085be:	6818      	ldr	r0, [r3, #0]
 80085c0:	1d3b      	adds	r3, r7, #4
 80085c2:	6819      	ldr	r1, [r3, #0]
 80085c4:	4b6f      	ldr	r3, [pc, #444]	; (8008784 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1980>)
 80085c6:	9301      	str	r3, [sp, #4]
 80085c8:	f240 2329 	movw	r3, #553	; 0x229
 80085cc:	9300      	str	r3, [sp, #0]
 80085ce:	4b6e      	ldr	r3, [pc, #440]	; (8008788 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1984>)
 80085d0:	4a6e      	ldr	r2, [pc, #440]	; (800878c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1988>)
 80085d2:	f7fc ff14 	bl	80053fe <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 80085d6:	2401      	movs	r4, #1
 80085d8:	e047      	b.n	800866a <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1866>
      if (const auto* schema_params = op->builtin_options_as_ReshapeOptions()) {
 80085da:	f107 030c 	add.w	r3, r7, #12
 80085de:	6818      	ldr	r0, [r3, #0]
 80085e0:	f7fd fff3 	bl	80065ca <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv>
 80085e4:	f8c7 01f0 	str.w	r0, [r7, #496]	; 0x1f0
 80085e8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d032      	beq.n	8008656 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1852>
        auto* new_shape = schema_params->new_shape();
 80085f0:	f8d7 01f0 	ldr.w	r0, [r7, #496]	; 0x1f0
 80085f4:	f7fd fbae 	bl	8005d54 <_ZNK6tflite14ReshapeOptions9new_shapeEv>
 80085f8:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
        // TODO(b/147203660): We need to figure out when dynamic reshape
        // (new_shape is a tensor) happens, why the option is not a nullptr.
        // But nonethless, we should only copy when new_shape is not a nullptr.
        if (new_shape) {
 80085fc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8008600:	2b00      	cmp	r3, #0
 8008602:	d028      	beq.n	8008656 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1852>
          TF_LITE_ENSURE_STATUS(FlatBufferIntVectorToArray(
 8008604:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8008608:	4618      	mov	r0, r3
 800860a:	f002 fc0b 	bl	800ae24 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800860e:	4603      	mov	r3, r0
 8008610:	4619      	mov	r1, r3
 8008612:	1d3b      	adds	r3, r7, #4
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	4b5e      	ldr	r3, [pc, #376]	; (8008790 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x198c>)
 8008618:	9300      	str	r3, [sp, #0]
 800861a:	4613      	mov	r3, r2
 800861c:	460a      	mov	r2, r1
 800861e:	f8d7 11ec 	ldr.w	r1, [r7, #492]	; 0x1ec
 8008622:	2020      	movs	r0, #32
 8008624:	f7fe fad2 	bl	8006bcc <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc>
 8008628:	4603      	mov	r3, r0
 800862a:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
 800862e:	f897 31eb 	ldrb.w	r3, [r7, #491]	; 0x1eb
 8008632:	2b00      	cmp	r3, #0
 8008634:	d002      	beq.n	800863c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1838>
 8008636:	f897 41eb 	ldrb.w	r4, [r7, #491]	; 0x1eb
 800863a:	e016      	b.n	800866a <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1866>
              sizeof(params->shape), new_shape, params->shape, error_reporter,
              "reshape"));
          params->num_dimensions = new_shape->size();
 800863c:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 8008640:	f001 f981 	bl	8009946 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8008644:	4604      	mov	r4, r0
 8008646:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800864a:	4618      	mov	r0, r3
 800864c:	f002 fbea 	bl	800ae24 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8008650:	4603      	mov	r3, r0
 8008652:	4622      	mov	r2, r4
 8008654:	621a      	str	r2, [r3, #32]
        }
      }
      *builtin_data = params.release();
 8008656:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800865a:	4618      	mov	r0, r3
 800865c:	f002 fbee 	bl	800ae3c <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8008660:	4602      	mov	r2, r0
 8008662:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8008666:	601a      	str	r2, [r3, #0]
      return kTfLiteOk;
 8008668:	2400      	movs	r4, #0
      auto params = safe_allocator.Allocate<TfLiteReshapeParams>();
 800866a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800866e:	4618      	mov	r0, r3
 8008670:	f002 fbac 	bl	800adcc <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8008674:	f001 b8bc 	b.w	80097f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29ec>
    }
    case BuiltinOperator_SKIP_GRAM: {
      auto params = safe_allocator.Allocate<TfLiteSkipGramParams>();
 8008678:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800867c:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8008680:	4611      	mov	r1, r2
 8008682:	4618      	mov	r0, r3
 8008684:	f002 fbee 	bl	800ae64 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI20TfLiteSkipGramParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
 8008688:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800868c:	2100      	movs	r1, #0
 800868e:	4618      	mov	r0, r3
 8008690:	f002 fc25 	bl	800aede <_ZStneI20TfLiteSkipGramParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8008694:	4603      	mov	r3, r0
 8008696:	f083 0301 	eor.w	r3, r3, #1
 800869a:	b2db      	uxtb	r3, r3
 800869c:	2b00      	cmp	r3, #0
 800869e:	d00e      	beq.n	80086be <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x18ba>
 80086a0:	1d3b      	adds	r3, r7, #4
 80086a2:	6818      	ldr	r0, [r3, #0]
 80086a4:	1d3b      	adds	r3, r7, #4
 80086a6:	6819      	ldr	r1, [r3, #0]
 80086a8:	4b36      	ldr	r3, [pc, #216]	; (8008784 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1980>)
 80086aa:	9301      	str	r3, [sp, #4]
 80086ac:	f240 233b 	movw	r3, #571	; 0x23b
 80086b0:	9300      	str	r3, [sp, #0]
 80086b2:	4b35      	ldr	r3, [pc, #212]	; (8008788 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1984>)
 80086b4:	4a35      	ldr	r2, [pc, #212]	; (800878c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1988>)
 80086b6:	f7fc fea2 	bl	80053fe <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 80086ba:	2401      	movs	r4, #1
 80086bc:	e038      	b.n	8008730 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x192c>
      if (const auto* skip_gram_params =
              op->builtin_options_as_SkipGramOptions()) {
 80086be:	f107 030c 	add.w	r3, r7, #12
 80086c2:	6818      	ldr	r0, [r3, #0]
 80086c4:	f7fd ff95 	bl	80065f2 <_ZNK6tflite8Operator34builtin_options_as_SkipGramOptionsEv>
 80086c8:	f8c7 0208 	str.w	r0, [r7, #520]	; 0x208
      if (const auto* skip_gram_params =
 80086cc:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d023      	beq.n	800871c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1918>
        params->ngram_size = skip_gram_params->ngram_size();
 80086d4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80086d8:	4618      	mov	r0, r3
 80086da:	f002 fc0d 	bl	800aef8 <_ZNKSt10unique_ptrI20TfLiteSkipGramParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80086de:	4604      	mov	r4, r0
 80086e0:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 80086e4:	f7fd fb44 	bl	8005d70 <_ZNK6tflite15SkipGramOptions10ngram_sizeEv>
 80086e8:	4603      	mov	r3, r0
 80086ea:	6023      	str	r3, [r4, #0]
        params->max_skip_size = skip_gram_params->max_skip_size();
 80086ec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80086f0:	4618      	mov	r0, r3
 80086f2:	f002 fc01 	bl	800aef8 <_ZNKSt10unique_ptrI20TfLiteSkipGramParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80086f6:	4604      	mov	r4, r0
 80086f8:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 80086fc:	f7fd fb47 	bl	8005d8e <_ZNK6tflite15SkipGramOptions13max_skip_sizeEv>
 8008700:	4603      	mov	r3, r0
 8008702:	6063      	str	r3, [r4, #4]
        params->include_all_ngrams = skip_gram_params->include_all_ngrams();
 8008704:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8008708:	4618      	mov	r0, r3
 800870a:	f002 fbf5 	bl	800aef8 <_ZNKSt10unique_ptrI20TfLiteSkipGramParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800870e:	4604      	mov	r4, r0
 8008710:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 8008714:	f7fd fb4a 	bl	8005dac <_ZNK6tflite15SkipGramOptions18include_all_ngramsEv>
 8008718:	4603      	mov	r3, r0
 800871a:	7223      	strb	r3, [r4, #8]
      }
      *builtin_data = params.release();
 800871c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8008720:	4618      	mov	r0, r3
 8008722:	f002 fbf5 	bl	800af10 <_ZNSt10unique_ptrI20TfLiteSkipGramParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8008726:	4602      	mov	r2, r0
 8008728:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 800872c:	601a      	str	r2, [r3, #0]
      return kTfLiteOk;
 800872e:	2400      	movs	r4, #0
      auto params = safe_allocator.Allocate<TfLiteSkipGramParams>();
 8008730:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8008734:	4618      	mov	r0, r3
 8008736:	f002 fbb3 	bl	800aea0 <_ZNSt10unique_ptrI20TfLiteSkipGramParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 800873a:	f001 b859 	b.w	80097f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29ec>
    }
    case BuiltinOperator_SPACE_TO_DEPTH: {
      auto params = safe_allocator.Allocate<TfLiteSpaceToDepthParams>();
 800873e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8008742:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8008746:	4611      	mov	r1, r2
 8008748:	4618      	mov	r0, r3
 800874a:	f002 fbf5 	bl	800af38 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI24TfLiteSpaceToDepthParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
 800874e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8008752:	2100      	movs	r1, #0
 8008754:	4618      	mov	r0, r3
 8008756:	f002 fc2c 	bl	800afb2 <_ZStneI24TfLiteSpaceToDepthParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 800875a:	4603      	mov	r3, r0
 800875c:	f083 0301 	eor.w	r3, r3, #1
 8008760:	b2db      	uxtb	r3, r3
 8008762:	2b00      	cmp	r3, #0
 8008764:	d016      	beq.n	8008794 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1990>
 8008766:	1d3b      	adds	r3, r7, #4
 8008768:	6818      	ldr	r0, [r3, #0]
 800876a:	1d3b      	adds	r3, r7, #4
 800876c:	6819      	ldr	r1, [r3, #0]
 800876e:	4b05      	ldr	r3, [pc, #20]	; (8008784 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1980>)
 8008770:	9301      	str	r3, [sp, #4]
 8008772:	f240 2347 	movw	r3, #583	; 0x247
 8008776:	9300      	str	r3, [sp, #0]
 8008778:	4b03      	ldr	r3, [pc, #12]	; (8008788 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1984>)
 800877a:	4a04      	ldr	r2, [pc, #16]	; (800878c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1988>)
 800877c:	f7fc fe3f 	bl	80053fe <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8008780:	2401      	movs	r4, #1
 8008782:	e028      	b.n	80087d6 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x19d2>
 8008784:	08021fe8 	.word	0x08021fe8
 8008788:	08021f88 	.word	0x08021f88
 800878c:	08021fd0 	.word	0x08021fd0
 8008790:	0802206c 	.word	0x0802206c
      if (const auto* schema_params =
              op->builtin_options_as_SpaceToDepthOptions()) {
 8008794:	f107 030c 	add.w	r3, r7, #12
 8008798:	6818      	ldr	r0, [r3, #0]
 800879a:	f7fd ff3e 	bl	800661a <_ZNK6tflite8Operator38builtin_options_as_SpaceToDepthOptionsEv>
 800879e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      if (const auto* schema_params =
 80087a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d00b      	beq.n	80087c2 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x19be>
        params->block_size = schema_params->block_size();
 80087aa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80087ae:	4618      	mov	r0, r3
 80087b0:	f002 fc0c 	bl	800afcc <_ZNKSt10unique_ptrI24TfLiteSpaceToDepthParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80087b4:	4604      	mov	r4, r0
 80087b6:	f8d7 0200 	ldr.w	r0, [r7, #512]	; 0x200
 80087ba:	f7fd fb0b 	bl	8005dd4 <_ZNK6tflite19SpaceToDepthOptions10block_sizeEv>
 80087be:	4603      	mov	r3, r0
 80087c0:	6023      	str	r3, [r4, #0]
      }
      *builtin_data = params.release();
 80087c2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80087c6:	4618      	mov	r0, r3
 80087c8:	f002 fc0c 	bl	800afe4 <_ZNSt10unique_ptrI24TfLiteSpaceToDepthParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 80087cc:	4602      	mov	r2, r0
 80087ce:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 80087d2:	601a      	str	r2, [r3, #0]
      return kTfLiteOk;
 80087d4:	2400      	movs	r4, #0
      auto params = safe_allocator.Allocate<TfLiteSpaceToDepthParams>();
 80087d6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80087da:	4618      	mov	r0, r3
 80087dc:	f002 fbca 	bl	800af74 <_ZNSt10unique_ptrI24TfLiteSpaceToDepthParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 80087e0:	f001 b806 	b.w	80097f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29ec>
    }
    case BuiltinOperator_DEPTH_TO_SPACE: {
      auto params = safe_allocator.Allocate<TfLiteDepthToSpaceParams>();
 80087e4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80087e8:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 80087ec:	4611      	mov	r1, r2
 80087ee:	4618      	mov	r0, r3
 80087f0:	f002 fc0c 	bl	800b00c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI24TfLiteDepthToSpaceParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
 80087f4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80087f8:	2100      	movs	r1, #0
 80087fa:	4618      	mov	r0, r3
 80087fc:	f002 fc43 	bl	800b086 <_ZStneI24TfLiteDepthToSpaceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8008800:	4603      	mov	r3, r0
 8008802:	f083 0301 	eor.w	r3, r3, #1
 8008806:	b2db      	uxtb	r3, r3
 8008808:	2b00      	cmp	r3, #0
 800880a:	d00e      	beq.n	800882a <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1a26>
 800880c:	1d3b      	adds	r3, r7, #4
 800880e:	6818      	ldr	r0, [r3, #0]
 8008810:	1d3b      	adds	r3, r7, #4
 8008812:	6819      	ldr	r1, [r3, #0]
 8008814:	4bc4      	ldr	r3, [pc, #784]	; (8008b28 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d24>)
 8008816:	9301      	str	r3, [sp, #4]
 8008818:	f240 2351 	movw	r3, #593	; 0x251
 800881c:	9300      	str	r3, [sp, #0]
 800881e:	4bc3      	ldr	r3, [pc, #780]	; (8008b2c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d28>)
 8008820:	4ac3      	ldr	r2, [pc, #780]	; (8008b30 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d2c>)
 8008822:	f7fc fdec 	bl	80053fe <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8008826:	2401      	movs	r4, #1
 8008828:	e020      	b.n	800886c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1a68>
      if (const auto* schema_params =
              op->builtin_options_as_DepthToSpaceOptions()) {
 800882a:	f107 030c 	add.w	r3, r7, #12
 800882e:	6818      	ldr	r0, [r3, #0]
 8008830:	f7fe f973 	bl	8006b1a <_ZNK6tflite8Operator38builtin_options_as_DepthToSpaceOptionsEv>
 8008834:	f8c7 01cc 	str.w	r0, [r7, #460]	; 0x1cc
      if (const auto* schema_params =
 8008838:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800883c:	2b00      	cmp	r3, #0
 800883e:	d00b      	beq.n	8008858 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1a54>
        params->block_size = schema_params->block_size();
 8008840:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008844:	4618      	mov	r0, r3
 8008846:	f002 fc2b 	bl	800b0a0 <_ZNKSt10unique_ptrI24TfLiteDepthToSpaceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800884a:	4604      	mov	r4, r0
 800884c:	f8d7 01cc 	ldr.w	r0, [r7, #460]	; 0x1cc
 8008850:	f7fd facf 	bl	8005df2 <_ZNK6tflite19DepthToSpaceOptions10block_sizeEv>
 8008854:	4603      	mov	r3, r0
 8008856:	6023      	str	r3, [r4, #0]
      }
      *builtin_data = params.release();
 8008858:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800885c:	4618      	mov	r0, r3
 800885e:	f002 fc2b 	bl	800b0b8 <_ZNSt10unique_ptrI24TfLiteDepthToSpaceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8008862:	4602      	mov	r2, r0
 8008864:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8008868:	601a      	str	r2, [r3, #0]
      return kTfLiteOk;
 800886a:	2400      	movs	r4, #0
      auto params = safe_allocator.Allocate<TfLiteDepthToSpaceParams>();
 800886c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008870:	4618      	mov	r0, r3
 8008872:	f002 fbe9 	bl	800b048 <_ZNSt10unique_ptrI24TfLiteDepthToSpaceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8008876:	f000 bfbb 	b.w	80097f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29ec>
    }
    case BuiltinOperator_GATHER: {
      auto params = safe_allocator.Allocate<TfLiteGatherParams>();
 800887a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800887e:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8008882:	4611      	mov	r1, r2
 8008884:	4618      	mov	r0, r3
 8008886:	f002 fc2b 	bl	800b0e0 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI18TfLiteGatherParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
 800888a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800888e:	2100      	movs	r1, #0
 8008890:	4618      	mov	r0, r3
 8008892:	f002 fc62 	bl	800b15a <_ZStneI18TfLiteGatherParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8008896:	4603      	mov	r3, r0
 8008898:	f083 0301 	eor.w	r3, r3, #1
 800889c:	b2db      	uxtb	r3, r3
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d00e      	beq.n	80088c0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1abc>
 80088a2:	1d3b      	adds	r3, r7, #4
 80088a4:	6818      	ldr	r0, [r3, #0]
 80088a6:	1d3b      	adds	r3, r7, #4
 80088a8:	6819      	ldr	r1, [r3, #0]
 80088aa:	4b9f      	ldr	r3, [pc, #636]	; (8008b28 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d24>)
 80088ac:	9301      	str	r3, [sp, #4]
 80088ae:	f240 235b 	movw	r3, #603	; 0x25b
 80088b2:	9300      	str	r3, [sp, #0]
 80088b4:	4b9d      	ldr	r3, [pc, #628]	; (8008b2c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d28>)
 80088b6:	4a9e      	ldr	r2, [pc, #632]	; (8008b30 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d2c>)
 80088b8:	f7fc fda1 	bl	80053fe <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 80088bc:	2401      	movs	r4, #1
 80088be:	e028      	b.n	8008912 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1b0e>
      params->axis = 0;
 80088c0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80088c4:	4618      	mov	r0, r3
 80088c6:	f002 fc55 	bl	800b174 <_ZNKSt10unique_ptrI18TfLiteGatherParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80088ca:	4602      	mov	r2, r0
 80088cc:	2300      	movs	r3, #0
 80088ce:	6013      	str	r3, [r2, #0]
      if (const auto* gather_params = op->builtin_options_as_GatherOptions()) {
 80088d0:	f107 030c 	add.w	r3, r7, #12
 80088d4:	6818      	ldr	r0, [r3, #0]
 80088d6:	f7fd fedc 	bl	8006692 <_ZNK6tflite8Operator32builtin_options_as_GatherOptionsEv>
 80088da:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
 80088de:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d00b      	beq.n	80088fe <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1afa>
        params->axis = gather_params->axis();
 80088e6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80088ea:	4618      	mov	r0, r3
 80088ec:	f002 fc42 	bl	800b174 <_ZNKSt10unique_ptrI18TfLiteGatherParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80088f0:	4604      	mov	r4, r0
 80088f2:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 80088f6:	f7fd fabb 	bl	8005e70 <_ZNK6tflite13GatherOptions4axisEv>
 80088fa:	4603      	mov	r3, r0
 80088fc:	6023      	str	r3, [r4, #0]
      }

      *builtin_data = params.release();
 80088fe:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8008902:	4618      	mov	r0, r3
 8008904:	f002 fc42 	bl	800b18c <_ZNSt10unique_ptrI18TfLiteGatherParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8008908:	4602      	mov	r2, r0
 800890a:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 800890e:	601a      	str	r2, [r3, #0]
      return kTfLiteOk;
 8008910:	2400      	movs	r4, #0
      auto params = safe_allocator.Allocate<TfLiteGatherParams>();
 8008912:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8008916:	4618      	mov	r0, r3
 8008918:	f002 fc00 	bl	800b11c <_ZNSt10unique_ptrI18TfLiteGatherParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 800891c:	f000 bf68 	b.w	80097f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29ec>
    case BuiltinOperator_REDUCE_MAX:
    case BuiltinOperator_REDUCE_MIN:
    case BuiltinOperator_REDUCE_PROD:
    case BuiltinOperator_REDUCE_ANY:
    case BuiltinOperator_SUM: {
      auto params = safe_allocator.Allocate<TfLiteReducerParams>();
 8008920:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8008924:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8008928:	4611      	mov	r1, r2
 800892a:	4618      	mov	r0, r3
 800892c:	f002 fc42 	bl	800b1b4 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteReducerParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
 8008930:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8008934:	2100      	movs	r1, #0
 8008936:	4618      	mov	r0, r3
 8008938:	f002 fc79 	bl	800b22e <_ZStneI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 800893c:	4603      	mov	r3, r0
 800893e:	f083 0301 	eor.w	r3, r3, #1
 8008942:	b2db      	uxtb	r3, r3
 8008944:	2b00      	cmp	r3, #0
 8008946:	d00e      	beq.n	8008966 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1b62>
 8008948:	1d3b      	adds	r3, r7, #4
 800894a:	6818      	ldr	r0, [r3, #0]
 800894c:	1d3b      	adds	r3, r7, #4
 800894e:	6819      	ldr	r1, [r3, #0]
 8008950:	4b75      	ldr	r3, [pc, #468]	; (8008b28 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d24>)
 8008952:	9301      	str	r3, [sp, #4]
 8008954:	f240 236b 	movw	r3, #619	; 0x26b
 8008958:	9300      	str	r3, [sp, #0]
 800895a:	4b74      	ldr	r3, [pc, #464]	; (8008b2c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d28>)
 800895c:	4a74      	ldr	r2, [pc, #464]	; (8008b30 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d2c>)
 800895e:	f7fc fd4e 	bl	80053fe <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8008962:	2401      	movs	r4, #1
 8008964:	e020      	b.n	80089a8 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ba4>
      if (const auto* schema_params = op->builtin_options_as_ReducerOptions()) {
 8008966:	f107 030c 	add.w	r3, r7, #12
 800896a:	6818      	ldr	r0, [r3, #0]
 800896c:	f7fd fea5 	bl	80066ba <_ZNK6tflite8Operator33builtin_options_as_ReducerOptionsEv>
 8008970:	f8c7 0218 	str.w	r0, [r7, #536]	; 0x218
 8008974:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8008978:	2b00      	cmp	r3, #0
 800897a:	d00b      	beq.n	8008994 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1b90>
        params->keep_dims = schema_params->keep_dims();
 800897c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8008980:	4618      	mov	r0, r3
 8008982:	f002 fc61 	bl	800b248 <_ZNKSt10unique_ptrI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8008986:	4604      	mov	r4, r0
 8008988:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 800898c:	f7fd fa7f 	bl	8005e8e <_ZNK6tflite14ReducerOptions9keep_dimsEv>
 8008990:	4603      	mov	r3, r0
 8008992:	7023      	strb	r3, [r4, #0]
      }
      *builtin_data = params.release();
 8008994:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8008998:	4618      	mov	r0, r3
 800899a:	f002 fc61 	bl	800b260 <_ZNSt10unique_ptrI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 800899e:	4602      	mov	r2, r0
 80089a0:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 80089a4:	601a      	str	r2, [r3, #0]
      return kTfLiteOk;
 80089a6:	2400      	movs	r4, #0
      auto params = safe_allocator.Allocate<TfLiteReducerParams>();
 80089a8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80089ac:	4618      	mov	r0, r3
 80089ae:	f002 fc1f 	bl	800b1f0 <_ZNSt10unique_ptrI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 80089b2:	f000 bf1d 	b.w	80097f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29ec>
    }
    case BuiltinOperator_SPLIT: {
      auto params = safe_allocator.Allocate<TfLiteSplitParams>();
 80089b6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80089ba:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 80089be:	4611      	mov	r1, r2
 80089c0:	4618      	mov	r0, r3
 80089c2:	f002 fc61 	bl	800b288 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI17TfLiteSplitParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
 80089c6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80089ca:	2100      	movs	r1, #0
 80089cc:	4618      	mov	r0, r3
 80089ce:	f002 fc98 	bl	800b302 <_ZStneI17TfLiteSplitParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 80089d2:	4603      	mov	r3, r0
 80089d4:	f083 0301 	eor.w	r3, r3, #1
 80089d8:	b2db      	uxtb	r3, r3
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d00e      	beq.n	80089fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1bf8>
 80089de:	1d3b      	adds	r3, r7, #4
 80089e0:	6818      	ldr	r0, [r3, #0]
 80089e2:	1d3b      	adds	r3, r7, #4
 80089e4:	6819      	ldr	r1, [r3, #0]
 80089e6:	4b50      	ldr	r3, [pc, #320]	; (8008b28 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d24>)
 80089e8:	9301      	str	r3, [sp, #4]
 80089ea:	f44f 731d 	mov.w	r3, #628	; 0x274
 80089ee:	9300      	str	r3, [sp, #0]
 80089f0:	4b4e      	ldr	r3, [pc, #312]	; (8008b2c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d28>)
 80089f2:	4a4f      	ldr	r2, [pc, #316]	; (8008b30 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d2c>)
 80089f4:	f7fc fd03 	bl	80053fe <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 80089f8:	2401      	movs	r4, #1
 80089fa:	e020      	b.n	8008a3e <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1c3a>
      if (const auto* schema_params = op->builtin_options_as_SplitOptions()) {
 80089fc:	f107 030c 	add.w	r3, r7, #12
 8008a00:	6818      	ldr	r0, [r3, #0]
 8008a02:	f7fd fed2 	bl	80067aa <_ZNK6tflite8Operator31builtin_options_as_SplitOptionsEv>
 8008a06:	f8c7 023c 	str.w	r0, [r7, #572]	; 0x23c
 8008a0a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d00b      	beq.n	8008a2a <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1c26>
        params->num_splits = schema_params->num_splits();
 8008a12:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008a16:	4618      	mov	r0, r3
 8008a18:	f002 fc80 	bl	800b31c <_ZNKSt10unique_ptrI17TfLiteSplitParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8008a1c:	4604      	mov	r4, r0
 8008a1e:	f8d7 023c 	ldr.w	r0, [r7, #572]	; 0x23c
 8008a22:	f7fd fa56 	bl	8005ed2 <_ZNK6tflite12SplitOptions10num_splitsEv>
 8008a26:	4603      	mov	r3, r0
 8008a28:	6023      	str	r3, [r4, #0]
      }
      *builtin_data = params.release();
 8008a2a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f002 fc80 	bl	800b334 <_ZNSt10unique_ptrI17TfLiteSplitParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8008a34:	4602      	mov	r2, r0
 8008a36:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8008a3a:	601a      	str	r2, [r3, #0]
      return kTfLiteOk;
 8008a3c:	2400      	movs	r4, #0
      auto params = safe_allocator.Allocate<TfLiteSplitParams>();
 8008a3e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008a42:	4618      	mov	r0, r3
 8008a44:	f002 fc3e 	bl	800b2c4 <_ZNSt10unique_ptrI17TfLiteSplitParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8008a48:	f000 bed2 	b.w	80097f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29ec>
    }
    case BuiltinOperator_SPLIT_V: {
      auto params = safe_allocator.Allocate<TfLiteSplitParams>();
 8008a4c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008a50:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8008a54:	4611      	mov	r1, r2
 8008a56:	4618      	mov	r0, r3
 8008a58:	f002 fc16 	bl	800b288 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI17TfLiteSplitParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
 8008a5c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008a60:	2100      	movs	r1, #0
 8008a62:	4618      	mov	r0, r3
 8008a64:	f002 fc4d 	bl	800b302 <_ZStneI17TfLiteSplitParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	f083 0301 	eor.w	r3, r3, #1
 8008a6e:	b2db      	uxtb	r3, r3
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d00e      	beq.n	8008a92 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1c8e>
 8008a74:	1d3b      	adds	r3, r7, #4
 8008a76:	6818      	ldr	r0, [r3, #0]
 8008a78:	1d3b      	adds	r3, r7, #4
 8008a7a:	6819      	ldr	r1, [r3, #0]
 8008a7c:	4b2a      	ldr	r3, [pc, #168]	; (8008b28 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d24>)
 8008a7e:	9301      	str	r3, [sp, #4]
 8008a80:	f240 237d 	movw	r3, #637	; 0x27d
 8008a84:	9300      	str	r3, [sp, #0]
 8008a86:	4b29      	ldr	r3, [pc, #164]	; (8008b2c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d28>)
 8008a88:	4a29      	ldr	r2, [pc, #164]	; (8008b30 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d2c>)
 8008a8a:	f7fc fcb8 	bl	80053fe <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8008a8e:	2401      	movs	r4, #1
 8008a90:	e020      	b.n	8008ad4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1cd0>
      if (const auto* schema_params = op->builtin_options_as_SplitVOptions()) {
 8008a92:	f107 030c 	add.w	r3, r7, #12
 8008a96:	6818      	ldr	r0, [r3, #0]
 8008a98:	f7fd ffdb 	bl	8006a52 <_ZNK6tflite8Operator32builtin_options_as_SplitVOptionsEv>
 8008a9c:	f8c7 0288 	str.w	r0, [r7, #648]	; 0x288
 8008aa0:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d00b      	beq.n	8008ac0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1cbc>
        params->num_splits = schema_params->num_splits();
 8008aa8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008aac:	4618      	mov	r0, r3
 8008aae:	f002 fc35 	bl	800b31c <_ZNKSt10unique_ptrI17TfLiteSplitParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8008ab2:	4604      	mov	r4, r0
 8008ab4:	f8d7 0288 	ldr.w	r0, [r7, #648]	; 0x288
 8008ab8:	f7fd fa1a 	bl	8005ef0 <_ZNK6tflite13SplitVOptions10num_splitsEv>
 8008abc:	4603      	mov	r3, r0
 8008abe:	6023      	str	r3, [r4, #0]
      }
      *builtin_data = params.release();
 8008ac0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f002 fc35 	bl	800b334 <_ZNSt10unique_ptrI17TfLiteSplitParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8008aca:	4602      	mov	r2, r0
 8008acc:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8008ad0:	601a      	str	r2, [r3, #0]
      return kTfLiteOk;
 8008ad2:	2400      	movs	r4, #0
      auto params = safe_allocator.Allocate<TfLiteSplitParams>();
 8008ad4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f002 fbf3 	bl	800b2c4 <_ZNSt10unique_ptrI17TfLiteSplitParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8008ade:	f000 be87 	b.w	80097f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29ec>
    }
    case BuiltinOperator_SQUEEZE: {
      auto params = safe_allocator.Allocate<TfLiteSqueezeParams>();
 8008ae2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008ae6:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8008aea:	4611      	mov	r1, r2
 8008aec:	4618      	mov	r0, r3
 8008aee:	f002 fc35 	bl	800b35c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteSqueezeParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
 8008af2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008af6:	2100      	movs	r1, #0
 8008af8:	4618      	mov	r0, r3
 8008afa:	f002 fc6c 	bl	800b3d6 <_ZStneI19TfLiteSqueezeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8008afe:	4603      	mov	r3, r0
 8008b00:	f083 0301 	eor.w	r3, r3, #1
 8008b04:	b2db      	uxtb	r3, r3
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d014      	beq.n	8008b34 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d30>
 8008b0a:	1d3b      	adds	r3, r7, #4
 8008b0c:	6818      	ldr	r0, [r3, #0]
 8008b0e:	1d3b      	adds	r3, r7, #4
 8008b10:	6819      	ldr	r1, [r3, #0]
 8008b12:	4b05      	ldr	r3, [pc, #20]	; (8008b28 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d24>)
 8008b14:	9301      	str	r3, [sp, #4]
 8008b16:	f240 2386 	movw	r3, #646	; 0x286
 8008b1a:	9300      	str	r3, [sp, #0]
 8008b1c:	4b03      	ldr	r3, [pc, #12]	; (8008b2c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d28>)
 8008b1e:	4a04      	ldr	r2, [pc, #16]	; (8008b30 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d2c>)
 8008b20:	f7fc fc6d 	bl	80053fe <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8008b24:	2401      	movs	r4, #1
 8008b26:	e049      	b.n	8008bbc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1db8>
 8008b28:	08021fe8 	.word	0x08021fe8
 8008b2c:	08021f88 	.word	0x08021f88
 8008b30:	08021fd0 	.word	0x08021fd0
      if (const auto* schema_params = op->builtin_options_as_SqueezeOptions()) {
 8008b34:	f107 030c 	add.w	r3, r7, #12
 8008b38:	6818      	ldr	r0, [r3, #0]
 8008b3a:	f7fd fdfa 	bl	8006732 <_ZNK6tflite8Operator33builtin_options_as_SqueezeOptionsEv>
 8008b3e:	f8c7 022c 	str.w	r0, [r7, #556]	; 0x22c
 8008b42:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d02e      	beq.n	8008ba8 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1da4>
        const auto* squeeze_dims = schema_params->squeeze_dims();
 8008b4a:	f8d7 022c 	ldr.w	r0, [r7, #556]	; 0x22c
 8008b4e:	f7fd f9b2 	bl	8005eb6 <_ZNK6tflite14SqueezeOptions12squeeze_dimsEv>
 8008b52:	f8c7 0228 	str.w	r0, [r7, #552]	; 0x228
        TF_LITE_ENSURE_STATUS(FlatBufferIntVectorToArray(
 8008b56:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f002 fc48 	bl	800b3f0 <_ZNKSt10unique_ptrI19TfLiteSqueezeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8008b60:	4603      	mov	r3, r0
 8008b62:	4619      	mov	r1, r3
 8008b64:	1d3b      	adds	r3, r7, #4
 8008b66:	681a      	ldr	r2, [r3, #0]
 8008b68:	4bc3      	ldr	r3, [pc, #780]	; (8008e78 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2074>)
 8008b6a:	9300      	str	r3, [sp, #0]
 8008b6c:	4613      	mov	r3, r2
 8008b6e:	460a      	mov	r2, r1
 8008b70:	f8d7 1228 	ldr.w	r1, [r7, #552]	; 0x228
 8008b74:	2020      	movs	r0, #32
 8008b76:	f7fe f829 	bl	8006bcc <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
 8008b80:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d002      	beq.n	8008b8e <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d8a>
 8008b88:	f897 4227 	ldrb.w	r4, [r7, #551]	; 0x227
 8008b8c:	e016      	b.n	8008bbc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1db8>
            sizeof(params->squeeze_dims), squeeze_dims, params->squeeze_dims,
            error_reporter, "squeeze"));
        params->num_squeeze_dims = squeeze_dims->size();
 8008b8e:	f8d7 0228 	ldr.w	r0, [r7, #552]	; 0x228
 8008b92:	f000 fed8 	bl	8009946 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8008b96:	4604      	mov	r4, r0
 8008b98:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f002 fc27 	bl	800b3f0 <_ZNKSt10unique_ptrI19TfLiteSqueezeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	4622      	mov	r2, r4
 8008ba6:	621a      	str	r2, [r3, #32]
      }
      *builtin_data = params.release();
 8008ba8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008bac:	4618      	mov	r0, r3
 8008bae:	f002 fc2b 	bl	800b408 <_ZNSt10unique_ptrI19TfLiteSqueezeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8008bb8:	601a      	str	r2, [r3, #0]
      return kTfLiteOk;
 8008bba:	2400      	movs	r4, #0
      auto params = safe_allocator.Allocate<TfLiteSqueezeParams>();
 8008bbc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f002 fbe9 	bl	800b398 <_ZNSt10unique_ptrI19TfLiteSqueezeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8008bc6:	f000 be13 	b.w	80097f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29ec>
    }
    case BuiltinOperator_STRIDED_SLICE: {
      auto params = safe_allocator.Allocate<TfLiteStridedSliceParams>();
 8008bca:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8008bce:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8008bd2:	4611      	mov	r1, r2
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f002 fc2b 	bl	800b430 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI24TfLiteStridedSliceParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
 8008bda:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8008bde:	2100      	movs	r1, #0
 8008be0:	4618      	mov	r0, r3
 8008be2:	f002 fc62 	bl	800b4aa <_ZStneI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8008be6:	4603      	mov	r3, r0
 8008be8:	f083 0301 	eor.w	r3, r3, #1
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d00e      	beq.n	8008c10 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1e0c>
 8008bf2:	1d3b      	adds	r3, r7, #4
 8008bf4:	6818      	ldr	r0, [r3, #0]
 8008bf6:	1d3b      	adds	r3, r7, #4
 8008bf8:	6819      	ldr	r1, [r3, #0]
 8008bfa:	4ba0      	ldr	r3, [pc, #640]	; (8008e7c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2078>)
 8008bfc:	9301      	str	r3, [sp, #4]
 8008bfe:	f240 2393 	movw	r3, #659	; 0x293
 8008c02:	9300      	str	r3, [sp, #0]
 8008c04:	4b9e      	ldr	r3, [pc, #632]	; (8008e80 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x207c>)
 8008c06:	4a9f      	ldr	r2, [pc, #636]	; (8008e84 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2080>)
 8008c08:	f7fc fbf9 	bl	80053fe <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8008c0c:	2401      	movs	r4, #1
 8008c0e:	e050      	b.n	8008cb2 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1eae>
      if (const auto* schema_params =
              op->builtin_options_as_StridedSliceOptions()) {
 8008c10:	f107 030c 	add.w	r3, r7, #12
 8008c14:	6818      	ldr	r0, [r3, #0]
 8008c16:	f7fd fdb4 	bl	8006782 <_ZNK6tflite8Operator38builtin_options_as_StridedSliceOptionsEv>
 8008c1a:	f8c7 0234 	str.w	r0, [r7, #564]	; 0x234
      if (const auto* schema_params =
 8008c1e:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d03b      	beq.n	8008c9e <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1e9a>
        params->begin_mask = schema_params->begin_mask();
 8008c26:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f002 fc4a 	bl	800b4c4 <_ZNKSt10unique_ptrI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8008c30:	4604      	mov	r4, r0
 8008c32:	f8d7 0234 	ldr.w	r0, [r7, #564]	; 0x234
 8008c36:	f7fd f96a 	bl	8005f0e <_ZNK6tflite19StridedSliceOptions10begin_maskEv>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	6023      	str	r3, [r4, #0]
        params->end_mask = schema_params->end_mask();
 8008c3e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8008c42:	4618      	mov	r0, r3
 8008c44:	f002 fc3e 	bl	800b4c4 <_ZNKSt10unique_ptrI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8008c48:	4604      	mov	r4, r0
 8008c4a:	f8d7 0234 	ldr.w	r0, [r7, #564]	; 0x234
 8008c4e:	f7fd f96d 	bl	8005f2c <_ZNK6tflite19StridedSliceOptions8end_maskEv>
 8008c52:	4603      	mov	r3, r0
 8008c54:	6063      	str	r3, [r4, #4]
        params->ellipsis_mask = schema_params->ellipsis_mask();
 8008c56:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f002 fc32 	bl	800b4c4 <_ZNKSt10unique_ptrI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8008c60:	4604      	mov	r4, r0
 8008c62:	f8d7 0234 	ldr.w	r0, [r7, #564]	; 0x234
 8008c66:	f7fd f970 	bl	8005f4a <_ZNK6tflite19StridedSliceOptions13ellipsis_maskEv>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	60a3      	str	r3, [r4, #8]
        params->new_axis_mask = schema_params->new_axis_mask();
 8008c6e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8008c72:	4618      	mov	r0, r3
 8008c74:	f002 fc26 	bl	800b4c4 <_ZNKSt10unique_ptrI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8008c78:	4604      	mov	r4, r0
 8008c7a:	f8d7 0234 	ldr.w	r0, [r7, #564]	; 0x234
 8008c7e:	f7fd f973 	bl	8005f68 <_ZNK6tflite19StridedSliceOptions13new_axis_maskEv>
 8008c82:	4603      	mov	r3, r0
 8008c84:	60e3      	str	r3, [r4, #12]
        params->shrink_axis_mask = schema_params->shrink_axis_mask();
 8008c86:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f002 fc1a 	bl	800b4c4 <_ZNKSt10unique_ptrI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8008c90:	4604      	mov	r4, r0
 8008c92:	f8d7 0234 	ldr.w	r0, [r7, #564]	; 0x234
 8008c96:	f7fd f976 	bl	8005f86 <_ZNK6tflite19StridedSliceOptions16shrink_axis_maskEv>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	6123      	str	r3, [r4, #16]
      }
      *builtin_data = params.release();
 8008c9e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f002 fc1a 	bl	800b4dc <_ZNSt10unique_ptrI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8008ca8:	4602      	mov	r2, r0
 8008caa:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8008cae:	601a      	str	r2, [r3, #0]
      return kTfLiteOk;
 8008cb0:	2400      	movs	r4, #0
      auto params = safe_allocator.Allocate<TfLiteStridedSliceParams>();
 8008cb2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f002 fbd8 	bl	800b46c <_ZNSt10unique_ptrI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8008cbc:	f000 bd98 	b.w	80097f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29ec>
    }
    case BuiltinOperator_ARG_MAX: {
      auto params = safe_allocator.Allocate<TfLiteArgMaxParams>();
 8008cc0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008cc4:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8008cc8:	4611      	mov	r1, r2
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f002 fc1a 	bl	800b504 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI18TfLiteArgMaxParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
 8008cd0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008cd4:	2100      	movs	r1, #0
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f002 fc51 	bl	800b57e <_ZStneI18TfLiteArgMaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	f083 0301 	eor.w	r3, r3, #1
 8008ce2:	b2db      	uxtb	r3, r3
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d00e      	beq.n	8008d06 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1f02>
 8008ce8:	1d3b      	adds	r3, r7, #4
 8008cea:	6818      	ldr	r0, [r3, #0]
 8008cec:	1d3b      	adds	r3, r7, #4
 8008cee:	6819      	ldr	r1, [r3, #0]
 8008cf0:	4b62      	ldr	r3, [pc, #392]	; (8008e7c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2078>)
 8008cf2:	9301      	str	r3, [sp, #4]
 8008cf4:	f240 23a1 	movw	r3, #673	; 0x2a1
 8008cf8:	9300      	str	r3, [sp, #0]
 8008cfa:	4b61      	ldr	r3, [pc, #388]	; (8008e80 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x207c>)
 8008cfc:	4a61      	ldr	r2, [pc, #388]	; (8008e84 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2080>)
 8008cfe:	f7fc fb7e 	bl	80053fe <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8008d02:	2401      	movs	r4, #1
 8008d04:	e031      	b.n	8008d6a <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1f66>
      if (const auto* schema_params = op->builtin_options_as_ArgMaxOptions()) {
 8008d06:	f107 030c 	add.w	r3, r7, #12
 8008d0a:	6818      	ldr	r0, [r3, #0]
 8008d0c:	f7fd fd75 	bl	80067fa <_ZNK6tflite8Operator32builtin_options_as_ArgMaxOptionsEv>
 8008d10:	f8c7 0250 	str.w	r0, [r7, #592]	; 0x250
 8008d14:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d01c      	beq.n	8008d56 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1f52>
        TF_LITE_ENSURE_STATUS(ConvertTensorType(schema_params->output_type(),
 8008d1c:	f8d7 0250 	ldr.w	r0, [r7, #592]	; 0x250
 8008d20:	f7fd f960 	bl	8005fe4 <_ZNK6tflite13ArgMaxOptions11output_typeEv>
 8008d24:	4603      	mov	r3, r0
 8008d26:	461c      	mov	r4, r3
 8008d28:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f002 fc33 	bl	800b598 <_ZNKSt10unique_ptrI18TfLiteArgMaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8008d32:	4603      	mov	r3, r0
 8008d34:	4619      	mov	r1, r3
 8008d36:	1d3b      	adds	r3, r7, #4
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	4620      	mov	r0, r4
 8008d3e:	f7fd ff83 	bl	8006c48 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 8008d42:	4603      	mov	r3, r0
 8008d44:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8008d48:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d002      	beq.n	8008d56 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1f52>
 8008d50:	f897 424f 	ldrb.w	r4, [r7, #591]	; 0x24f
 8008d54:	e009      	b.n	8008d6a <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1f66>
                                                &params->output_type,
                                                error_reporter));
      }
      *builtin_data = params.release();
 8008d56:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f002 fc28 	bl	800b5b0 <_ZNSt10unique_ptrI18TfLiteArgMaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8008d60:	4602      	mov	r2, r0
 8008d62:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8008d66:	601a      	str	r2, [r3, #0]
      return kTfLiteOk;
 8008d68:	2400      	movs	r4, #0
      auto params = safe_allocator.Allocate<TfLiteArgMaxParams>();
 8008d6a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f002 fbe6 	bl	800b540 <_ZNSt10unique_ptrI18TfLiteArgMaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8008d74:	f000 bd3c 	b.w	80097f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29ec>
    }
    case BuiltinOperator_ARG_MIN: {
      auto params = safe_allocator.Allocate<TfLiteArgMinParams>();
 8008d78:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8008d7c:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8008d80:	4611      	mov	r1, r2
 8008d82:	4618      	mov	r0, r3
 8008d84:	f002 fc28 	bl	800b5d8 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI18TfLiteArgMinParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
 8008d88:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8008d8c:	2100      	movs	r1, #0
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f002 fc5f 	bl	800b652 <_ZStneI18TfLiteArgMinParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8008d94:	4603      	mov	r3, r0
 8008d96:	f083 0301 	eor.w	r3, r3, #1
 8008d9a:	b2db      	uxtb	r3, r3
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d00e      	beq.n	8008dbe <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1fba>
 8008da0:	1d3b      	adds	r3, r7, #4
 8008da2:	6818      	ldr	r0, [r3, #0]
 8008da4:	1d3b      	adds	r3, r7, #4
 8008da6:	6819      	ldr	r1, [r3, #0]
 8008da8:	4b34      	ldr	r3, [pc, #208]	; (8008e7c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2078>)
 8008daa:	9301      	str	r3, [sp, #4]
 8008dac:	f44f 732b 	mov.w	r3, #684	; 0x2ac
 8008db0:	9300      	str	r3, [sp, #0]
 8008db2:	4b33      	ldr	r3, [pc, #204]	; (8008e80 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x207c>)
 8008db4:	4a33      	ldr	r2, [pc, #204]	; (8008e84 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2080>)
 8008db6:	f7fc fb22 	bl	80053fe <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8008dba:	2401      	movs	r4, #1
 8008dbc:	e031      	b.n	8008e22 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x201e>
      if (const auto* schema_params = op->builtin_options_as_ArgMinOptions()) {
 8008dbe:	f107 030c 	add.w	r3, r7, #12
 8008dc2:	6818      	ldr	r0, [r3, #0]
 8008dc4:	f7fd fd69 	bl	800689a <_ZNK6tflite8Operator32builtin_options_as_ArgMinOptionsEv>
 8008dc8:	f8c7 0268 	str.w	r0, [r7, #616]	; 0x268
 8008dcc:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d01c      	beq.n	8008e0e <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x200a>
        TF_LITE_ENSURE_STATUS(ConvertTensorType(schema_params->output_type(),
 8008dd4:	f8d7 0268 	ldr.w	r0, [r7, #616]	; 0x268
 8008dd8:	f7fd f914 	bl	8006004 <_ZNK6tflite13ArgMinOptions11output_typeEv>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	461c      	mov	r4, r3
 8008de0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8008de4:	4618      	mov	r0, r3
 8008de6:	f002 fc41 	bl	800b66c <_ZNKSt10unique_ptrI18TfLiteArgMinParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8008dea:	4603      	mov	r3, r0
 8008dec:	4619      	mov	r1, r3
 8008dee:	1d3b      	adds	r3, r7, #4
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	461a      	mov	r2, r3
 8008df4:	4620      	mov	r0, r4
 8008df6:	f7fd ff27 	bl	8006c48 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8008e00:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d002      	beq.n	8008e0e <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x200a>
 8008e08:	f897 4267 	ldrb.w	r4, [r7, #615]	; 0x267
 8008e0c:	e009      	b.n	8008e22 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x201e>
                                                &params->output_type,
                                                error_reporter));
      }
      *builtin_data = params.release();
 8008e0e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8008e12:	4618      	mov	r0, r3
 8008e14:	f002 fc36 	bl	800b684 <_ZNSt10unique_ptrI18TfLiteArgMinParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8008e18:	4602      	mov	r2, r0
 8008e1a:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8008e1e:	601a      	str	r2, [r3, #0]
      return kTfLiteOk;
 8008e20:	2400      	movs	r4, #0
      auto params = safe_allocator.Allocate<TfLiteArgMinParams>();
 8008e22:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8008e26:	4618      	mov	r0, r3
 8008e28:	f002 fbf4 	bl	800b614 <_ZNSt10unique_ptrI18TfLiteArgMinParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8008e2c:	f000 bce0 	b.w	80097f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29ec>
    }
    case BuiltinOperator_TRANSPOSE_CONV: {
      auto params = safe_allocator.Allocate<TfLiteTransposeConvParams>();
 8008e30:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008e34:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8008e38:	4611      	mov	r1, r2
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f002 fc36 	bl	800b6ac <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI25TfLiteTransposeConvParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
 8008e40:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008e44:	2100      	movs	r1, #0
 8008e46:	4618      	mov	r0, r3
 8008e48:	f002 fc6d 	bl	800b726 <_ZStneI25TfLiteTransposeConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	f083 0301 	eor.w	r3, r3, #1
 8008e52:	b2db      	uxtb	r3, r3
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d017      	beq.n	8008e88 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2084>
 8008e58:	1d3b      	adds	r3, r7, #4
 8008e5a:	6818      	ldr	r0, [r3, #0]
 8008e5c:	1d3b      	adds	r3, r7, #4
 8008e5e:	6819      	ldr	r1, [r3, #0]
 8008e60:	4b06      	ldr	r3, [pc, #24]	; (8008e7c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2078>)
 8008e62:	9301      	str	r3, [sp, #4]
 8008e64:	f240 23b7 	movw	r3, #695	; 0x2b7
 8008e68:	9300      	str	r3, [sp, #0]
 8008e6a:	4b05      	ldr	r3, [pc, #20]	; (8008e80 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x207c>)
 8008e6c:	4a05      	ldr	r2, [pc, #20]	; (8008e84 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2080>)
 8008e6e:	f7fc fac6 	bl	80053fe <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8008e72:	2401      	movs	r4, #1
 8008e74:	e049      	b.n	8008f0a <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2106>
 8008e76:	bf00      	nop
 8008e78:	08022074 	.word	0x08022074
 8008e7c:	08021fe8 	.word	0x08021fe8
 8008e80:	08021f88 	.word	0x08021f88
 8008e84:	08021fd0 	.word	0x08021fd0
      if (const auto* transpose_conv_params =
              op->builtin_options_as_TransposeConvOptions()) {
 8008e88:	f107 030c 	add.w	r3, r7, #12
 8008e8c:	6818      	ldr	r0, [r3, #0]
 8008e8e:	f7fd fcc8 	bl	8006822 <_ZNK6tflite8Operator39builtin_options_as_TransposeConvOptionsEv>
 8008e92:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
      if (const auto* transpose_conv_params =
 8008e96:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d02b      	beq.n	8008ef6 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x20f2>
        params->padding = parse_padding(transpose_conv_params->padding());
 8008e9e:	f8d7 0254 	ldr.w	r0, [r7, #596]	; 0x254
 8008ea2:	f7fd f8bf 	bl	8006024 <_ZNK6tflite20TransposeConvOptions7paddingEv>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	461d      	mov	r5, r3
 8008eaa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f002 fc46 	bl	800b740 <_ZNKSt10unique_ptrI25TfLiteTransposeConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8008eb4:	4604      	mov	r4, r0
 8008eb6:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8008eba:	4629      	mov	r1, r5
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f7fd ff2f 	bl	8006d20 <_ZZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvENKUlNS_7PaddingEE_clESA_>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	7023      	strb	r3, [r4, #0]
        params->stride_width = transpose_conv_params->stride_w();
 8008ec6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f002 fc38 	bl	800b740 <_ZNKSt10unique_ptrI25TfLiteTransposeConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8008ed0:	4604      	mov	r4, r0
 8008ed2:	f8d7 0254 	ldr.w	r0, [r7, #596]	; 0x254
 8008ed6:	f7fd f8b5 	bl	8006044 <_ZNK6tflite20TransposeConvOptions8stride_wEv>
 8008eda:	4603      	mov	r3, r0
 8008edc:	6063      	str	r3, [r4, #4]
        params->stride_height = transpose_conv_params->stride_h();
 8008ede:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f002 fc2c 	bl	800b740 <_ZNKSt10unique_ptrI25TfLiteTransposeConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8008ee8:	4604      	mov	r4, r0
 8008eea:	f8d7 0254 	ldr.w	r0, [r7, #596]	; 0x254
 8008eee:	f7fd f8b8 	bl	8006062 <_ZNK6tflite20TransposeConvOptions8stride_hEv>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	60a3      	str	r3, [r4, #8]
      }
      *builtin_data = params.release();
 8008ef6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008efa:	4618      	mov	r0, r3
 8008efc:	f002 fc2c 	bl	800b758 <_ZNSt10unique_ptrI25TfLiteTransposeConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8008f00:	4602      	mov	r2, r0
 8008f02:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8008f06:	601a      	str	r2, [r3, #0]
      return kTfLiteOk;
 8008f08:	2400      	movs	r4, #0
      auto params = safe_allocator.Allocate<TfLiteTransposeConvParams>();
 8008f0a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f002 fbea 	bl	800b6e8 <_ZNSt10unique_ptrI25TfLiteTransposeConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8008f14:	f000 bc6c 	b.w	80097f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29ec>
    }
    case BuiltinOperator_SPARSE_TO_DENSE: {
      auto params = safe_allocator.Allocate<TfLiteSparseToDenseParams>();
 8008f18:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008f1c:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8008f20:	4611      	mov	r1, r2
 8008f22:	4618      	mov	r0, r3
 8008f24:	f002 fc2c 	bl	800b780 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI25TfLiteSparseToDenseParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
 8008f28:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008f2c:	2100      	movs	r1, #0
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f002 fc63 	bl	800b7fa <_ZStneI25TfLiteSparseToDenseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8008f34:	4603      	mov	r3, r0
 8008f36:	f083 0301 	eor.w	r3, r3, #1
 8008f3a:	b2db      	uxtb	r3, r3
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d00e      	beq.n	8008f5e <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x215a>
 8008f40:	1d3b      	adds	r3, r7, #4
 8008f42:	6818      	ldr	r0, [r3, #0]
 8008f44:	1d3b      	adds	r3, r7, #4
 8008f46:	6819      	ldr	r1, [r3, #0]
 8008f48:	4bd3      	ldr	r3, [pc, #844]	; (8009298 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2494>)
 8008f4a:	9301      	str	r3, [sp, #4]
 8008f4c:	f240 23c3 	movw	r3, #707	; 0x2c3
 8008f50:	9300      	str	r3, [sp, #0]
 8008f52:	4bd2      	ldr	r3, [pc, #840]	; (800929c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2498>)
 8008f54:	4ad2      	ldr	r2, [pc, #840]	; (80092a0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x249c>)
 8008f56:	f7fc fa52 	bl	80053fe <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8008f5a:	2401      	movs	r4, #1
 8008f5c:	e020      	b.n	8008fa0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x219c>
      if (const auto* sparse_to_dense_params =
              op->builtin_options_as_SparseToDenseOptions()) {
 8008f5e:	f107 030c 	add.w	r3, r7, #12
 8008f62:	6818      	ldr	r0, [r3, #0]
 8008f64:	f7fd fc71 	bl	800684a <_ZNK6tflite8Operator39builtin_options_as_SparseToDenseOptionsEv>
 8008f68:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
      if (const auto* sparse_to_dense_params =
 8008f6c:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d00b      	beq.n	8008f8c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2188>
        params->validate_indices = sparse_to_dense_params->validate_indices();
 8008f74:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f002 fc4b 	bl	800b814 <_ZNKSt10unique_ptrI25TfLiteSparseToDenseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8008f7e:	4604      	mov	r4, r0
 8008f80:	f8d7 0258 	ldr.w	r0, [r7, #600]	; 0x258
 8008f84:	f7fd f87c 	bl	8006080 <_ZNK6tflite20SparseToDenseOptions16validate_indicesEv>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	7023      	strb	r3, [r4, #0]
      }
      *builtin_data = params.release();
 8008f8c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008f90:	4618      	mov	r0, r3
 8008f92:	f002 fc4b 	bl	800b82c <_ZNSt10unique_ptrI25TfLiteSparseToDenseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8008f96:	4602      	mov	r2, r0
 8008f98:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8008f9c:	601a      	str	r2, [r3, #0]
      return kTfLiteOk;
 8008f9e:	2400      	movs	r4, #0
      auto params = safe_allocator.Allocate<TfLiteSparseToDenseParams>();
 8008fa0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f002 fc09 	bl	800b7bc <_ZNSt10unique_ptrI25TfLiteSparseToDenseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8008faa:	f000 bc21 	b.w	80097f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29ec>
    }
    case BuiltinOperator_SHAPE: {
      auto params = safe_allocator.Allocate<TfLiteShapeParams>();
 8008fae:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008fb2:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8008fb6:	4611      	mov	r1, r2
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f002 fc4b 	bl	800b854 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI17TfLiteShapeParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
 8008fbe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008fc2:	2100      	movs	r1, #0
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f002 fc82 	bl	800b8ce <_ZStneI17TfLiteShapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	f083 0301 	eor.w	r3, r3, #1
 8008fd0:	b2db      	uxtb	r3, r3
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d00e      	beq.n	8008ff4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x21f0>
 8008fd6:	1d3b      	adds	r3, r7, #4
 8008fd8:	6818      	ldr	r0, [r3, #0]
 8008fda:	1d3b      	adds	r3, r7, #4
 8008fdc:	6819      	ldr	r1, [r3, #0]
 8008fde:	4bae      	ldr	r3, [pc, #696]	; (8009298 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2494>)
 8008fe0:	9301      	str	r3, [sp, #4]
 8008fe2:	f240 23cd 	movw	r3, #717	; 0x2cd
 8008fe6:	9300      	str	r3, [sp, #0]
 8008fe8:	4bac      	ldr	r3, [pc, #688]	; (800929c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2498>)
 8008fea:	4aad      	ldr	r2, [pc, #692]	; (80092a0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x249c>)
 8008fec:	f7fc fa07 	bl	80053fe <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8008ff0:	2401      	movs	r4, #1
 8008ff2:	e031      	b.n	8009058 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2254>
      if (const auto* schema_params = op->builtin_options_as_ShapeOptions()) {
 8008ff4:	f107 030c 	add.w	r3, r7, #12
 8008ff8:	6818      	ldr	r0, [r3, #0]
 8008ffa:	f7fd fc3a 	bl	8006872 <_ZNK6tflite8Operator31builtin_options_as_ShapeOptionsEv>
 8008ffe:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
 8009002:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8009006:	2b00      	cmp	r3, #0
 8009008:	d01c      	beq.n	8009044 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2240>
        TF_LITE_ENSURE_STATUS(ConvertTensorType(
 800900a:	f8d7 0260 	ldr.w	r0, [r7, #608]	; 0x260
 800900e:	f7fd f84b 	bl	80060a8 <_ZNK6tflite12ShapeOptions8out_typeEv>
 8009012:	4603      	mov	r3, r0
 8009014:	461c      	mov	r4, r3
 8009016:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800901a:	4618      	mov	r0, r3
 800901c:	f002 fc64 	bl	800b8e8 <_ZNKSt10unique_ptrI17TfLiteShapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8009020:	4603      	mov	r3, r0
 8009022:	4619      	mov	r1, r3
 8009024:	1d3b      	adds	r3, r7, #4
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	461a      	mov	r2, r3
 800902a:	4620      	mov	r0, r4
 800902c:	f7fd fe0c 	bl	8006c48 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 8009030:	4603      	mov	r3, r0
 8009032:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
 8009036:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 800903a:	2b00      	cmp	r3, #0
 800903c:	d002      	beq.n	8009044 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2240>
 800903e:	f897 425f 	ldrb.w	r4, [r7, #607]	; 0x25f
 8009042:	e009      	b.n	8009058 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2254>
            schema_params->out_type(), &params->out_type, error_reporter));
      }
      *builtin_data = params.release();
 8009044:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8009048:	4618      	mov	r0, r3
 800904a:	f002 fc59 	bl	800b900 <_ZNSt10unique_ptrI17TfLiteShapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 800904e:	4602      	mov	r2, r0
 8009050:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8009054:	601a      	str	r2, [r3, #0]
      return kTfLiteOk;
 8009056:	2400      	movs	r4, #0
      auto params = safe_allocator.Allocate<TfLiteShapeParams>();
 8009058:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800905c:	4618      	mov	r0, r3
 800905e:	f002 fc17 	bl	800b890 <_ZNSt10unique_ptrI17TfLiteShapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8009062:	e3c5      	b.n	80097f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29ec>
    }
    case BuiltinOperator_PACK: {
      auto params = safe_allocator.Allocate<TfLitePackParams>();
 8009064:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8009068:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800906c:	4611      	mov	r1, r2
 800906e:	4618      	mov	r0, r3
 8009070:	f002 fc5a 	bl	800b928 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI16TfLitePackParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
 8009074:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8009078:	2100      	movs	r1, #0
 800907a:	4618      	mov	r0, r3
 800907c:	f002 fc91 	bl	800b9a2 <_ZStneI16TfLitePackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8009080:	4603      	mov	r3, r0
 8009082:	f083 0301 	eor.w	r3, r3, #1
 8009086:	b2db      	uxtb	r3, r3
 8009088:	2b00      	cmp	r3, #0
 800908a:	d00e      	beq.n	80090aa <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x22a6>
 800908c:	1d3b      	adds	r3, r7, #4
 800908e:	6818      	ldr	r0, [r3, #0]
 8009090:	1d3b      	adds	r3, r7, #4
 8009092:	6819      	ldr	r1, [r3, #0]
 8009094:	4b80      	ldr	r3, [pc, #512]	; (8009298 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2494>)
 8009096:	9301      	str	r3, [sp, #4]
 8009098:	f240 23d7 	movw	r3, #727	; 0x2d7
 800909c:	9300      	str	r3, [sp, #0]
 800909e:	4b7f      	ldr	r3, [pc, #508]	; (800929c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2498>)
 80090a0:	4a7f      	ldr	r2, [pc, #508]	; (80092a0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x249c>)
 80090a2:	f7fc f9ac 	bl	80053fe <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 80090a6:	2401      	movs	r4, #1
 80090a8:	e02c      	b.n	8009104 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2300>
      if (const auto* pack_params = op->builtin_options_as_PackOptions()) {
 80090aa:	f107 030c 	add.w	r3, r7, #12
 80090ae:	6818      	ldr	r0, [r3, #0]
 80090b0:	f7fd fc1b 	bl	80068ea <_ZNK6tflite8Operator30builtin_options_as_PackOptionsEv>
 80090b4:	f8c7 0270 	str.w	r0, [r7, #624]	; 0x270
 80090b8:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d017      	beq.n	80090f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x22ec>
        params->values_count = pack_params->values_count();
 80090c0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80090c4:	4618      	mov	r0, r3
 80090c6:	f002 fc79 	bl	800b9bc <_ZNKSt10unique_ptrI16TfLitePackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80090ca:	4604      	mov	r4, r0
 80090cc:	f8d7 0270 	ldr.w	r0, [r7, #624]	; 0x270
 80090d0:	f7fd f845 	bl	800615e <_ZNK6tflite11PackOptions12values_countEv>
 80090d4:	4603      	mov	r3, r0
 80090d6:	6023      	str	r3, [r4, #0]
        params->axis = pack_params->axis();
 80090d8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80090dc:	4618      	mov	r0, r3
 80090de:	f002 fc6d 	bl	800b9bc <_ZNKSt10unique_ptrI16TfLitePackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80090e2:	4604      	mov	r4, r0
 80090e4:	f8d7 0270 	ldr.w	r0, [r7, #624]	; 0x270
 80090e8:	f7fd f848 	bl	800617c <_ZNK6tflite11PackOptions4axisEv>
 80090ec:	4603      	mov	r3, r0
 80090ee:	6063      	str	r3, [r4, #4]
      }
      *builtin_data = params.release();
 80090f0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80090f4:	4618      	mov	r0, r3
 80090f6:	f002 fc6d 	bl	800b9d4 <_ZNSt10unique_ptrI16TfLitePackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 80090fa:	4602      	mov	r2, r0
 80090fc:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8009100:	601a      	str	r2, [r3, #0]
      return kTfLiteOk;
 8009102:	2400      	movs	r4, #0
      auto params = safe_allocator.Allocate<TfLitePackParams>();
 8009104:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8009108:	4618      	mov	r0, r3
 800910a:	f002 fc2b 	bl	800b964 <_ZNSt10unique_ptrI16TfLitePackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 800910e:	e36f      	b.n	80097f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29ec>
    }
    case BuiltinOperator_DELEGATE: {
      // TODO(ycling): Revisit when supporting saving delegated models.
      TF_LITE_REPORT_ERROR(error_reporter,
 8009110:	1d3b      	adds	r3, r7, #4
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4963      	ldr	r1, [pc, #396]	; (80092a4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x24a0>)
 8009116:	4618      	mov	r0, r3
 8009118:	f7fc f958 	bl	80053cc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "DELEGATE op shouldn't exist in model.");
      return kTfLiteError;
 800911c:	2401      	movs	r4, #1
 800911e:	e367      	b.n	80097f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29ec>
    }
    case BuiltinOperator_FAKE_QUANT: {
      auto params = safe_allocator.Allocate<TfLiteFakeQuantParams>();
 8009120:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009124:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8009128:	4611      	mov	r1, r2
 800912a:	4618      	mov	r0, r3
 800912c:	f002 fc66 	bl	800b9fc <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI21TfLiteFakeQuantParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
 8009130:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009134:	2100      	movs	r1, #0
 8009136:	4618      	mov	r0, r3
 8009138:	f002 fc9d 	bl	800ba76 <_ZStneI21TfLiteFakeQuantParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 800913c:	4603      	mov	r3, r0
 800913e:	f083 0301 	eor.w	r3, r3, #1
 8009142:	b2db      	uxtb	r3, r3
 8009144:	2b00      	cmp	r3, #0
 8009146:	d00e      	beq.n	8009166 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2362>
 8009148:	1d3b      	adds	r3, r7, #4
 800914a:	6818      	ldr	r0, [r3, #0]
 800914c:	1d3b      	adds	r3, r7, #4
 800914e:	6819      	ldr	r1, [r3, #0]
 8009150:	4b51      	ldr	r3, [pc, #324]	; (8009298 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2494>)
 8009152:	9301      	str	r3, [sp, #4]
 8009154:	f240 23e7 	movw	r3, #743	; 0x2e7
 8009158:	9300      	str	r3, [sp, #0]
 800915a:	4b50      	ldr	r3, [pc, #320]	; (800929c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2498>)
 800915c:	4a50      	ldr	r2, [pc, #320]	; (80092a0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x249c>)
 800915e:	f7fc f94e 	bl	80053fe <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8009162:	2401      	movs	r4, #1
 8009164:	e048      	b.n	80091f8 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x23f4>
      if (const auto* schema_params =
              op->builtin_options_as_FakeQuantOptions()) {
 8009166:	f107 030c 	add.w	r3, r7, #12
 800916a:	6818      	ldr	r0, [r3, #0]
 800916c:	f7fd fba9 	bl	80068c2 <_ZNK6tflite8Operator35builtin_options_as_FakeQuantOptionsEv>
 8009170:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
      if (const auto* schema_params =
 8009174:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8009178:	2b00      	cmp	r3, #0
 800917a:	d033      	beq.n	80091e4 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x23e0>
        params->min = schema_params->min();
 800917c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009180:	4618      	mov	r0, r3
 8009182:	f002 fc85 	bl	800ba90 <_ZNKSt10unique_ptrI21TfLiteFakeQuantParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8009186:	4604      	mov	r4, r0
 8009188:	f8d7 026c 	ldr.w	r0, [r7, #620]	; 0x26c
 800918c:	f7fc ff9c 	bl	80060c8 <_ZNK6tflite16FakeQuantOptions3minEv>
 8009190:	eef0 7a40 	vmov.f32	s15, s0
 8009194:	edc4 7a00 	vstr	s15, [r4]
        params->max = schema_params->max();
 8009198:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800919c:	4618      	mov	r0, r3
 800919e:	f002 fc77 	bl	800ba90 <_ZNKSt10unique_ptrI21TfLiteFakeQuantParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80091a2:	4604      	mov	r4, r0
 80091a4:	f8d7 026c 	ldr.w	r0, [r7, #620]	; 0x26c
 80091a8:	f7fc ffa2 	bl	80060f0 <_ZNK6tflite16FakeQuantOptions3maxEv>
 80091ac:	eef0 7a40 	vmov.f32	s15, s0
 80091b0:	edc4 7a01 	vstr	s15, [r4, #4]
        params->num_bits = schema_params->num_bits();
 80091b4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80091b8:	4618      	mov	r0, r3
 80091ba:	f002 fc69 	bl	800ba90 <_ZNKSt10unique_ptrI21TfLiteFakeQuantParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80091be:	4604      	mov	r4, r0
 80091c0:	f8d7 026c 	ldr.w	r0, [r7, #620]	; 0x26c
 80091c4:	f7fc ffa8 	bl	8006118 <_ZNK6tflite16FakeQuantOptions8num_bitsEv>
 80091c8:	4603      	mov	r3, r0
 80091ca:	60a3      	str	r3, [r4, #8]
        params->narrow_range = schema_params->narrow_range();
 80091cc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80091d0:	4618      	mov	r0, r3
 80091d2:	f002 fc5d 	bl	800ba90 <_ZNKSt10unique_ptrI21TfLiteFakeQuantParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80091d6:	4604      	mov	r4, r0
 80091d8:	f8d7 026c 	ldr.w	r0, [r7, #620]	; 0x26c
 80091dc:	f7fc ffab 	bl	8006136 <_ZNK6tflite16FakeQuantOptions12narrow_rangeEv>
 80091e0:	4603      	mov	r3, r0
 80091e2:	7323      	strb	r3, [r4, #12]
      }
      *builtin_data = params.release();
 80091e4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80091e8:	4618      	mov	r0, r3
 80091ea:	f002 fc5d 	bl	800baa8 <_ZNSt10unique_ptrI21TfLiteFakeQuantParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 80091ee:	4602      	mov	r2, r0
 80091f0:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 80091f4:	601a      	str	r2, [r3, #0]
      return kTfLiteOk;
 80091f6:	2400      	movs	r4, #0
      auto params = safe_allocator.Allocate<TfLiteFakeQuantParams>();
 80091f8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80091fc:	4618      	mov	r0, r3
 80091fe:	f002 fc1b 	bl	800ba38 <_ZNSt10unique_ptrI21TfLiteFakeQuantParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8009202:	e2f5      	b.n	80097f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29ec>
    }
    case BuiltinOperator_ONE_HOT: {
      auto params = safe_allocator.Allocate<TfLiteOneHotParams>();
 8009204:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009208:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800920c:	4611      	mov	r1, r2
 800920e:	4618      	mov	r0, r3
 8009210:	f002 fc5e 	bl	800bad0 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI18TfLiteOneHotParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
 8009214:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009218:	2100      	movs	r1, #0
 800921a:	4618      	mov	r0, r3
 800921c:	f002 fc95 	bl	800bb4a <_ZStneI18TfLiteOneHotParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8009220:	4603      	mov	r3, r0
 8009222:	f083 0301 	eor.w	r3, r3, #1
 8009226:	b2db      	uxtb	r3, r3
 8009228:	2b00      	cmp	r3, #0
 800922a:	d00e      	beq.n	800924a <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2446>
 800922c:	1d3b      	adds	r3, r7, #4
 800922e:	6818      	ldr	r0, [r3, #0]
 8009230:	1d3b      	adds	r3, r7, #4
 8009232:	6819      	ldr	r1, [r3, #0]
 8009234:	4b18      	ldr	r3, [pc, #96]	; (8009298 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2494>)
 8009236:	9301      	str	r3, [sp, #4]
 8009238:	f44f 733d 	mov.w	r3, #756	; 0x2f4
 800923c:	9300      	str	r3, [sp, #0]
 800923e:	4b17      	ldr	r3, [pc, #92]	; (800929c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2498>)
 8009240:	4a17      	ldr	r2, [pc, #92]	; (80092a0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x249c>)
 8009242:	f7fc f8dc 	bl	80053fe <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8009246:	2401      	movs	r4, #1
 8009248:	e020      	b.n	800928c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2488>
      if (const auto* schema_params = op->builtin_options_as_OneHotOptions()) {
 800924a:	f107 030c 	add.w	r3, r7, #12
 800924e:	6818      	ldr	r0, [r3, #0]
 8009250:	f7fd fb5f 	bl	8006912 <_ZNK6tflite8Operator32builtin_options_as_OneHotOptionsEv>
 8009254:	f8c7 0274 	str.w	r0, [r7, #628]	; 0x274
 8009258:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 800925c:	2b00      	cmp	r3, #0
 800925e:	d00b      	beq.n	8009278 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2474>
        params->axis = schema_params->axis();
 8009260:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009264:	4618      	mov	r0, r3
 8009266:	f002 fc7d 	bl	800bb64 <_ZNKSt10unique_ptrI18TfLiteOneHotParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800926a:	4604      	mov	r4, r0
 800926c:	f8d7 0274 	ldr.w	r0, [r7, #628]	; 0x274
 8009270:	f7fc ff93 	bl	800619a <_ZNK6tflite13OneHotOptions4axisEv>
 8009274:	4603      	mov	r3, r0
 8009276:	6023      	str	r3, [r4, #0]
      }
      *builtin_data = params.release();
 8009278:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800927c:	4618      	mov	r0, r3
 800927e:	f002 fc7d 	bl	800bb7c <_ZNSt10unique_ptrI18TfLiteOneHotParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8009282:	4602      	mov	r2, r0
 8009284:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8009288:	601a      	str	r2, [r3, #0]
      return kTfLiteOk;
 800928a:	2400      	movs	r4, #0
      auto params = safe_allocator.Allocate<TfLiteOneHotParams>();
 800928c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009290:	4618      	mov	r0, r3
 8009292:	f002 fc3b 	bl	800bb0c <_ZNSt10unique_ptrI18TfLiteOneHotParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8009296:	e2ab      	b.n	80097f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29ec>
 8009298:	08021fe8 	.word	0x08021fe8
 800929c:	08021f88 	.word	0x08021f88
 80092a0:	08021fd0 	.word	0x08021fd0
 80092a4:	0802207c 	.word	0x0802207c
    }
    case BuiltinOperator_UNPACK: {
      auto params = safe_allocator.Allocate<TfLiteUnpackParams>();
 80092a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80092ac:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 80092b0:	4611      	mov	r1, r2
 80092b2:	4618      	mov	r0, r3
 80092b4:	f002 fc76 	bl	800bba4 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI18TfLiteUnpackParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
 80092b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80092bc:	2100      	movs	r1, #0
 80092be:	4618      	mov	r0, r3
 80092c0:	f002 fcad 	bl	800bc1e <_ZStneI18TfLiteUnpackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 80092c4:	4603      	mov	r3, r0
 80092c6:	f083 0301 	eor.w	r3, r3, #1
 80092ca:	b2db      	uxtb	r3, r3
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d00e      	beq.n	80092ee <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x24ea>
 80092d0:	1d3b      	adds	r3, r7, #4
 80092d2:	6818      	ldr	r0, [r3, #0]
 80092d4:	1d3b      	adds	r3, r7, #4
 80092d6:	6819      	ldr	r1, [r3, #0]
 80092d8:	4bd1      	ldr	r3, [pc, #836]	; (8009620 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x281c>)
 80092da:	9301      	str	r3, [sp, #4]
 80092dc:	f240 23fd 	movw	r3, #765	; 0x2fd
 80092e0:	9300      	str	r3, [sp, #0]
 80092e2:	4bd0      	ldr	r3, [pc, #832]	; (8009624 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2820>)
 80092e4:	4ad0      	ldr	r2, [pc, #832]	; (8009628 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2824>)
 80092e6:	f7fc f88a 	bl	80053fe <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 80092ea:	2401      	movs	r4, #1
 80092ec:	e02c      	b.n	8009348 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2544>
      if (const auto* unpack_params = op->builtin_options_as_UnpackOptions()) {
 80092ee:	f107 030c 	add.w	r3, r7, #12
 80092f2:	6818      	ldr	r0, [r3, #0]
 80092f4:	f7fd fb21 	bl	800693a <_ZNK6tflite8Operator32builtin_options_as_UnpackOptionsEv>
 80092f8:	f8c7 0278 	str.w	r0, [r7, #632]	; 0x278
 80092fc:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8009300:	2b00      	cmp	r3, #0
 8009302:	d017      	beq.n	8009334 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2530>
        params->num = unpack_params->num();
 8009304:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009308:	4618      	mov	r0, r3
 800930a:	f002 fc95 	bl	800bc38 <_ZNKSt10unique_ptrI18TfLiteUnpackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800930e:	4604      	mov	r4, r0
 8009310:	f8d7 0278 	ldr.w	r0, [r7, #632]	; 0x278
 8009314:	f7fc ff50 	bl	80061b8 <_ZNK6tflite13UnpackOptions3numEv>
 8009318:	4603      	mov	r3, r0
 800931a:	6023      	str	r3, [r4, #0]
        params->axis = unpack_params->axis();
 800931c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009320:	4618      	mov	r0, r3
 8009322:	f002 fc89 	bl	800bc38 <_ZNKSt10unique_ptrI18TfLiteUnpackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8009326:	4604      	mov	r4, r0
 8009328:	f8d7 0278 	ldr.w	r0, [r7, #632]	; 0x278
 800932c:	f7fc ff53 	bl	80061d6 <_ZNK6tflite13UnpackOptions4axisEv>
 8009330:	4603      	mov	r3, r0
 8009332:	6063      	str	r3, [r4, #4]
      }
      *builtin_data = params.release();
 8009334:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009338:	4618      	mov	r0, r3
 800933a:	f002 fc89 	bl	800bc50 <_ZNSt10unique_ptrI18TfLiteUnpackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 800933e:	4602      	mov	r2, r0
 8009340:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8009344:	601a      	str	r2, [r3, #0]
      return kTfLiteOk;
 8009346:	2400      	movs	r4, #0
      auto params = safe_allocator.Allocate<TfLiteUnpackParams>();
 8009348:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800934c:	4618      	mov	r0, r3
 800934e:	f002 fc47 	bl	800bbe0 <_ZNSt10unique_ptrI18TfLiteUnpackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8009352:	e24d      	b.n	80097f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29ec>
    }
    case BuiltinOperator_LEAKY_RELU: {
      auto params = safe_allocator.Allocate<TfLiteLeakyReluParams>();
 8009354:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009358:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800935c:	4611      	mov	r1, r2
 800935e:	4618      	mov	r0, r3
 8009360:	f002 fc8a 	bl	800bc78 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI21TfLiteLeakyReluParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
 8009364:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009368:	2100      	movs	r1, #0
 800936a:	4618      	mov	r0, r3
 800936c:	f002 fcc1 	bl	800bcf2 <_ZStneI21TfLiteLeakyReluParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8009370:	4603      	mov	r3, r0
 8009372:	f083 0301 	eor.w	r3, r3, #1
 8009376:	b2db      	uxtb	r3, r3
 8009378:	2b00      	cmp	r3, #0
 800937a:	d00e      	beq.n	800939a <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2596>
 800937c:	1d3b      	adds	r3, r7, #4
 800937e:	6818      	ldr	r0, [r3, #0]
 8009380:	1d3b      	adds	r3, r7, #4
 8009382:	6819      	ldr	r1, [r3, #0]
 8009384:	4ba6      	ldr	r3, [pc, #664]	; (8009620 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x281c>)
 8009386:	9301      	str	r3, [sp, #4]
 8009388:	f240 3307 	movw	r3, #775	; 0x307
 800938c:	9300      	str	r3, [sp, #0]
 800938e:	4ba5      	ldr	r3, [pc, #660]	; (8009624 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2820>)
 8009390:	4aa5      	ldr	r2, [pc, #660]	; (8009628 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2824>)
 8009392:	f7fc f834 	bl	80053fe <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8009396:	2401      	movs	r4, #1
 8009398:	e022      	b.n	80093e0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x25dc>
      if (const auto* leaky_relu_params =
              op->builtin_options_as_LeakyReluOptions()) {
 800939a:	f107 030c 	add.w	r3, r7, #12
 800939e:	6818      	ldr	r0, [r3, #0]
 80093a0:	f7fd fb2f 	bl	8006a02 <_ZNK6tflite8Operator35builtin_options_as_LeakyReluOptionsEv>
 80093a4:	f8c7 0280 	str.w	r0, [r7, #640]	; 0x280
      if (const auto* leaky_relu_params =
 80093a8:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d00d      	beq.n	80093cc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x25c8>
        params->alpha = leaky_relu_params->alpha();
 80093b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80093b4:	4618      	mov	r0, r3
 80093b6:	f002 fca9 	bl	800bd0c <_ZNKSt10unique_ptrI21TfLiteLeakyReluParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80093ba:	4604      	mov	r4, r0
 80093bc:	f8d7 0280 	ldr.w	r0, [r7, #640]	; 0x280
 80093c0:	f7fc ff18 	bl	80061f4 <_ZNK6tflite16LeakyReluOptions5alphaEv>
 80093c4:	eef0 7a40 	vmov.f32	s15, s0
 80093c8:	edc4 7a00 	vstr	s15, [r4]
      }
      *builtin_data = params.release();
 80093cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80093d0:	4618      	mov	r0, r3
 80093d2:	f002 fca7 	bl	800bd24 <_ZNSt10unique_ptrI21TfLiteLeakyReluParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 80093d6:	4602      	mov	r2, r0
 80093d8:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 80093dc:	601a      	str	r2, [r3, #0]
      return kTfLiteOk;
 80093de:	2400      	movs	r4, #0
      auto params = safe_allocator.Allocate<TfLiteLeakyReluParams>();
 80093e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80093e4:	4618      	mov	r0, r3
 80093e6:	f002 fc65 	bl	800bcb4 <_ZNSt10unique_ptrI21TfLiteLeakyReluParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 80093ea:	e201      	b.n	80097f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29ec>
    }
    case BuiltinOperator_MIRROR_PAD: {
      auto params = safe_allocator.Allocate<TfLiteMirrorPaddingParams>();
 80093ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80093f0:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 80093f4:	4611      	mov	r1, r2
 80093f6:	4618      	mov	r0, r3
 80093f8:	f002 fca8 	bl	800bd4c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI25TfLiteMirrorPaddingParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
 80093fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009400:	2100      	movs	r1, #0
 8009402:	4618      	mov	r0, r3
 8009404:	f002 fcdf 	bl	800bdc6 <_ZStneI25TfLiteMirrorPaddingParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8009408:	4603      	mov	r3, r0
 800940a:	f083 0301 	eor.w	r3, r3, #1
 800940e:	b2db      	uxtb	r3, r3
 8009410:	2b00      	cmp	r3, #0
 8009412:	d00e      	beq.n	8009432 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x262e>
 8009414:	1d3b      	adds	r3, r7, #4
 8009416:	6818      	ldr	r0, [r3, #0]
 8009418:	1d3b      	adds	r3, r7, #4
 800941a:	6819      	ldr	r1, [r3, #0]
 800941c:	4b80      	ldr	r3, [pc, #512]	; (8009620 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x281c>)
 800941e:	9301      	str	r3, [sp, #4]
 8009420:	f240 3311 	movw	r3, #785	; 0x311
 8009424:	9300      	str	r3, [sp, #0]
 8009426:	4b7f      	ldr	r3, [pc, #508]	; (8009624 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2820>)
 8009428:	4a7f      	ldr	r2, [pc, #508]	; (8009628 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2824>)
 800942a:	f7fb ffe8 	bl	80053fe <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 800942e:	2401      	movs	r4, #1
 8009430:	e026      	b.n	8009480 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x267c>
      const auto* mirror_pad_params = op->builtin_options_as_MirrorPadOptions();
 8009432:	f107 030c 	add.w	r3, r7, #12
 8009436:	6818      	ldr	r0, [r3, #0]
 8009438:	f7fd faf7 	bl	8006a2a <_ZNK6tflite8Operator35builtin_options_as_MirrorPadOptionsEv>
 800943c:	f8c7 0284 	str.w	r0, [r7, #644]	; 0x284
      if (mirror_pad_params != nullptr) {
 8009440:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8009444:	2b00      	cmp	r3, #0
 8009446:	d011      	beq.n	800946c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2668>
        params->mode =
            mirror_pad_params->mode() == tflite::MirrorPadMode_REFLECT
 8009448:	f8d7 0284 	ldr.w	r0, [r7, #644]	; 0x284
 800944c:	f7fc fee6 	bl	800621c <_ZNK6tflite16MirrorPadOptions4modeEv>
 8009450:	4603      	mov	r3, r0
                ? TfLiteMirrorPaddingMode::kTfLiteMirrorPaddingReflect
 8009452:	2b00      	cmp	r3, #0
 8009454:	d101      	bne.n	800945a <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2656>
 8009456:	2401      	movs	r4, #1
 8009458:	e000      	b.n	800945c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2658>
 800945a:	2402      	movs	r4, #2
        params->mode =
 800945c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009460:	4618      	mov	r0, r3
 8009462:	f002 fcbd 	bl	800bde0 <_ZNKSt10unique_ptrI25TfLiteMirrorPaddingParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8009466:	4603      	mov	r3, r0
 8009468:	4622      	mov	r2, r4
 800946a:	701a      	strb	r2, [r3, #0]
                : TfLiteMirrorPaddingMode::kTfLiteMirrorPaddingSymmetric;
      }
      *builtin_data = params.release();
 800946c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009470:	4618      	mov	r0, r3
 8009472:	f002 fcc1 	bl	800bdf8 <_ZNSt10unique_ptrI25TfLiteMirrorPaddingParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8009476:	4602      	mov	r2, r0
 8009478:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 800947c:	601a      	str	r2, [r3, #0]
      return kTfLiteOk;
 800947e:	2400      	movs	r4, #0
      auto params = safe_allocator.Allocate<TfLiteMirrorPaddingParams>();
 8009480:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009484:	4618      	mov	r0, r3
 8009486:	f002 fc7f 	bl	800bd88 <_ZNSt10unique_ptrI25TfLiteMirrorPaddingParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 800948a:	e1b1      	b.n	80097f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29ec>
    }
    case BuiltinOperator_UNIQUE: {
      auto params = safe_allocator.Allocate<TfLiteUniqueParams>();
 800948c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009490:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8009494:	4611      	mov	r1, r2
 8009496:	4618      	mov	r0, r3
 8009498:	f002 fcc2 	bl	800be20 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI18TfLiteUniqueParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
 800949c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80094a0:	2100      	movs	r1, #0
 80094a2:	4618      	mov	r0, r3
 80094a4:	f002 fcf9 	bl	800be9a <_ZStneI18TfLiteUniqueParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 80094a8:	4603      	mov	r3, r0
 80094aa:	f083 0301 	eor.w	r3, r3, #1
 80094ae:	b2db      	uxtb	r3, r3
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d00e      	beq.n	80094d2 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x26ce>
 80094b4:	1d3b      	adds	r3, r7, #4
 80094b6:	6818      	ldr	r0, [r3, #0]
 80094b8:	1d3b      	adds	r3, r7, #4
 80094ba:	6819      	ldr	r1, [r3, #0]
 80094bc:	4b58      	ldr	r3, [pc, #352]	; (8009620 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x281c>)
 80094be:	9301      	str	r3, [sp, #4]
 80094c0:	f240 331e 	movw	r3, #798	; 0x31e
 80094c4:	9300      	str	r3, [sp, #0]
 80094c6:	4b57      	ldr	r3, [pc, #348]	; (8009624 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2820>)
 80094c8:	4a57      	ldr	r2, [pc, #348]	; (8009628 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2824>)
 80094ca:	f7fb ff98 	bl	80053fe <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 80094ce:	2401      	movs	r4, #1
 80094d0:	e026      	b.n	8009520 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x271c>
      const auto* unique_params = op->builtin_options_as_UniqueOptions();
 80094d2:	f107 030c 	add.w	r3, r7, #12
 80094d6:	6818      	ldr	r0, [r3, #0]
 80094d8:	f7fd facf 	bl	8006a7a <_ZNK6tflite8Operator32builtin_options_as_UniqueOptionsEv>
 80094dc:	f8c7 028c 	str.w	r0, [r7, #652]	; 0x28c
      if (unique_params != nullptr) {
 80094e0:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d011      	beq.n	800950c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2708>
        params->index_out_type =
            unique_params->idx_out_type() == tflite::TensorType_INT64
 80094e8:	f8d7 028c 	ldr.w	r0, [r7, #652]	; 0x28c
 80094ec:	f7fc fea6 	bl	800623c <_ZNK6tflite13UniqueOptions12idx_out_typeEv>
 80094f0:	4603      	mov	r3, r0
                ? TfLiteType::kTfLiteInt64
 80094f2:	2b04      	cmp	r3, #4
 80094f4:	d101      	bne.n	80094fa <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x26f6>
 80094f6:	2404      	movs	r4, #4
 80094f8:	e000      	b.n	80094fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x26f8>
 80094fa:	2402      	movs	r4, #2
        params->index_out_type =
 80094fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009500:	4618      	mov	r0, r3
 8009502:	f002 fcd7 	bl	800beb4 <_ZNKSt10unique_ptrI18TfLiteUniqueParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8009506:	4603      	mov	r3, r0
 8009508:	4622      	mov	r2, r4
 800950a:	701a      	strb	r2, [r3, #0]
                : TfLiteType::kTfLiteInt32;
      }
      *builtin_data = params.release();
 800950c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009510:	4618      	mov	r0, r3
 8009512:	f002 fcdb 	bl	800becc <_ZNSt10unique_ptrI18TfLiteUniqueParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8009516:	4602      	mov	r2, r0
 8009518:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 800951c:	601a      	str	r2, [r3, #0]
      return kTfLiteOk;
 800951e:	2400      	movs	r4, #0
      auto params = safe_allocator.Allocate<TfLiteUniqueParams>();
 8009520:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009524:	4618      	mov	r0, r3
 8009526:	f002 fc99 	bl	800be5c <_ZNSt10unique_ptrI18TfLiteUniqueParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 800952a:	e161      	b.n	80097f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29ec>
    }
    case BuiltinOperator_REVERSE_SEQUENCE: {
      auto params = safe_allocator.Allocate<TfLiteReverseSequenceParams>();
 800952c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009530:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8009534:	4611      	mov	r1, r2
 8009536:	4618      	mov	r0, r3
 8009538:	f002 fcdc 	bl	800bef4 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI27TfLiteReverseSequenceParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
 800953c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009540:	2100      	movs	r1, #0
 8009542:	4618      	mov	r0, r3
 8009544:	f002 fd13 	bl	800bf6e <_ZStneI27TfLiteReverseSequenceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8009548:	4603      	mov	r3, r0
 800954a:	f083 0301 	eor.w	r3, r3, #1
 800954e:	b2db      	uxtb	r3, r3
 8009550:	2b00      	cmp	r3, #0
 8009552:	d00e      	beq.n	8009572 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x276e>
 8009554:	1d3b      	adds	r3, r7, #4
 8009556:	6818      	ldr	r0, [r3, #0]
 8009558:	1d3b      	adds	r3, r7, #4
 800955a:	6819      	ldr	r1, [r3, #0]
 800955c:	4b30      	ldr	r3, [pc, #192]	; (8009620 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x281c>)
 800955e:	9301      	str	r3, [sp, #4]
 8009560:	f240 332b 	movw	r3, #811	; 0x32b
 8009564:	9300      	str	r3, [sp, #0]
 8009566:	4b2f      	ldr	r3, [pc, #188]	; (8009624 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2820>)
 8009568:	4a2f      	ldr	r2, [pc, #188]	; (8009628 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2824>)
 800956a:	f7fb ff48 	bl	80053fe <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 800956e:	2401      	movs	r4, #1
 8009570:	e02c      	b.n	80095cc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x27c8>
      if (const auto* reverse_seq_params =
              op->builtin_options_as_ReverseSequenceOptions()) {
 8009572:	f107 030c 	add.w	r3, r7, #12
 8009576:	6818      	ldr	r0, [r3, #0]
 8009578:	f7fd fa93 	bl	8006aa2 <_ZNK6tflite8Operator41builtin_options_as_ReverseSequenceOptionsEv>
 800957c:	f8c7 0290 	str.w	r0, [r7, #656]	; 0x290
      if (const auto* reverse_seq_params =
 8009580:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8009584:	2b00      	cmp	r3, #0
 8009586:	d017      	beq.n	80095b8 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x27b4>
        params->seq_dim = reverse_seq_params->seq_dim();
 8009588:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800958c:	4618      	mov	r0, r3
 800958e:	f002 fcfb 	bl	800bf88 <_ZNKSt10unique_ptrI27TfLiteReverseSequenceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8009592:	4604      	mov	r4, r0
 8009594:	f8d7 0290 	ldr.w	r0, [r7, #656]	; 0x290
 8009598:	f7fc fe60 	bl	800625c <_ZNK6tflite22ReverseSequenceOptions7seq_dimEv>
 800959c:	4603      	mov	r3, r0
 800959e:	6023      	str	r3, [r4, #0]
        params->batch_dim = reverse_seq_params->batch_dim();
 80095a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80095a4:	4618      	mov	r0, r3
 80095a6:	f002 fcef 	bl	800bf88 <_ZNKSt10unique_ptrI27TfLiteReverseSequenceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80095aa:	4604      	mov	r4, r0
 80095ac:	f8d7 0290 	ldr.w	r0, [r7, #656]	; 0x290
 80095b0:	f7fc fe63 	bl	800627a <_ZNK6tflite22ReverseSequenceOptions9batch_dimEv>
 80095b4:	4603      	mov	r3, r0
 80095b6:	6063      	str	r3, [r4, #4]
      }
      *builtin_data = params.release();
 80095b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80095bc:	4618      	mov	r0, r3
 80095be:	f002 fcef 	bl	800bfa0 <_ZNSt10unique_ptrI27TfLiteReverseSequenceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 80095c2:	4602      	mov	r2, r0
 80095c4:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 80095c8:	601a      	str	r2, [r3, #0]
      return kTfLiteOk;
 80095ca:	2400      	movs	r4, #0
      auto params = safe_allocator.Allocate<TfLiteReverseSequenceParams>();
 80095cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80095d0:	4618      	mov	r0, r3
 80095d2:	f002 fcad 	bl	800bf30 <_ZNSt10unique_ptrI27TfLiteReverseSequenceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 80095d6:	e10b      	b.n	80097f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29ec>
    }
    case BuiltinOperator_IF: {
      auto params = safe_allocator.Allocate<TfLiteIfParams>();
 80095d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80095dc:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 80095e0:	4611      	mov	r1, r2
 80095e2:	4618      	mov	r0, r3
 80095e4:	f002 fcf0 	bl	800bfc8 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI14TfLiteIfParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
 80095e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80095ec:	2100      	movs	r1, #0
 80095ee:	4618      	mov	r0, r3
 80095f0:	f002 fd27 	bl	800c042 <_ZStneI14TfLiteIfParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 80095f4:	4603      	mov	r3, r0
 80095f6:	f083 0301 	eor.w	r3, r3, #1
 80095fa:	b2db      	uxtb	r3, r3
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d015      	beq.n	800962c <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2828>
 8009600:	1d3b      	adds	r3, r7, #4
 8009602:	6818      	ldr	r0, [r3, #0]
 8009604:	1d3b      	adds	r3, r7, #4
 8009606:	6819      	ldr	r1, [r3, #0]
 8009608:	4b05      	ldr	r3, [pc, #20]	; (8009620 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x281c>)
 800960a:	9301      	str	r3, [sp, #4]
 800960c:	f240 3336 	movw	r3, #822	; 0x336
 8009610:	9300      	str	r3, [sp, #0]
 8009612:	4b04      	ldr	r3, [pc, #16]	; (8009624 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2820>)
 8009614:	4a04      	ldr	r2, [pc, #16]	; (8009628 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2824>)
 8009616:	f7fb fef2 	bl	80053fe <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 800961a:	2401      	movs	r4, #1
 800961c:	e033      	b.n	8009686 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2882>
 800961e:	bf00      	nop
 8009620:	08021fe8 	.word	0x08021fe8
 8009624:	08021f88 	.word	0x08021f88
 8009628:	08021fd0 	.word	0x08021fd0
      if (const auto* if_params = op->builtin_options_as_IfOptions()) {
 800962c:	f107 030c 	add.w	r3, r7, #12
 8009630:	6818      	ldr	r0, [r3, #0]
 8009632:	f7fd fa4a 	bl	8006aca <_ZNK6tflite8Operator28builtin_options_as_IfOptionsEv>
 8009636:	f8c7 0294 	str.w	r0, [r7, #660]	; 0x294
 800963a:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 800963e:	2b00      	cmp	r3, #0
 8009640:	d017      	beq.n	8009672 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x286e>
        params->then_subgraph_index = if_params->then_subgraph_index();
 8009642:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009646:	4618      	mov	r0, r3
 8009648:	f002 fd08 	bl	800c05c <_ZNKSt10unique_ptrI14TfLiteIfParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800964c:	4604      	mov	r4, r0
 800964e:	f8d7 0294 	ldr.w	r0, [r7, #660]	; 0x294
 8009652:	f7fc fe21 	bl	8006298 <_ZNK6tflite9IfOptions19then_subgraph_indexEv>
 8009656:	4603      	mov	r3, r0
 8009658:	6023      	str	r3, [r4, #0]
        params->else_subgraph_index = if_params->else_subgraph_index();
 800965a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800965e:	4618      	mov	r0, r3
 8009660:	f002 fcfc 	bl	800c05c <_ZNKSt10unique_ptrI14TfLiteIfParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8009664:	4604      	mov	r4, r0
 8009666:	f8d7 0294 	ldr.w	r0, [r7, #660]	; 0x294
 800966a:	f7fc fe24 	bl	80062b6 <_ZNK6tflite9IfOptions19else_subgraph_indexEv>
 800966e:	4603      	mov	r3, r0
 8009670:	6063      	str	r3, [r4, #4]
      }
      *builtin_data = params.release();
 8009672:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009676:	4618      	mov	r0, r3
 8009678:	f002 fcfc 	bl	800c074 <_ZNSt10unique_ptrI14TfLiteIfParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 800967c:	4602      	mov	r2, r0
 800967e:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8009682:	601a      	str	r2, [r3, #0]
      return kTfLiteOk;
 8009684:	2400      	movs	r4, #0
      auto params = safe_allocator.Allocate<TfLiteIfParams>();
 8009686:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800968a:	4618      	mov	r0, r3
 800968c:	f002 fcba 	bl	800c004 <_ZNSt10unique_ptrI14TfLiteIfParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8009690:	e0ae      	b.n	80097f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29ec>
    }
    case BuiltinOperator_WHILE: {
      auto params = safe_allocator.Allocate<TfLiteWhileParams>();
 8009692:	f107 031c 	add.w	r3, r7, #28
 8009696:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800969a:	4611      	mov	r1, r2
 800969c:	4618      	mov	r0, r3
 800969e:	f002 fcfd 	bl	800c09c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI17TfLiteWhileParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
 80096a2:	f107 031c 	add.w	r3, r7, #28
 80096a6:	2100      	movs	r1, #0
 80096a8:	4618      	mov	r0, r3
 80096aa:	f002 fd34 	bl	800c116 <_ZStneI17TfLiteWhileParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 80096ae:	4603      	mov	r3, r0
 80096b0:	f083 0301 	eor.w	r3, r3, #1
 80096b4:	b2db      	uxtb	r3, r3
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d00e      	beq.n	80096d8 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x28d4>
 80096ba:	1d3b      	adds	r3, r7, #4
 80096bc:	6818      	ldr	r0, [r3, #0]
 80096be:	1d3b      	adds	r3, r7, #4
 80096c0:	6819      	ldr	r1, [r3, #0]
 80096c2:	4b4e      	ldr	r3, [pc, #312]	; (80097fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29f8>)
 80096c4:	9301      	str	r3, [sp, #4]
 80096c6:	f44f 7350 	mov.w	r3, #832	; 0x340
 80096ca:	9300      	str	r3, [sp, #0]
 80096cc:	4b4c      	ldr	r3, [pc, #304]	; (8009800 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29fc>)
 80096ce:	4a4d      	ldr	r2, [pc, #308]	; (8009804 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2a00>)
 80096d0:	f7fb fe95 	bl	80053fe <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 80096d4:	2401      	movs	r4, #1
 80096d6:	e02c      	b.n	8009732 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x292e>
      if (const auto* while_params = op->builtin_options_as_WhileOptions()) {
 80096d8:	f107 030c 	add.w	r3, r7, #12
 80096dc:	6818      	ldr	r0, [r3, #0]
 80096de:	f7fd fa08 	bl	8006af2 <_ZNK6tflite8Operator31builtin_options_as_WhileOptionsEv>
 80096e2:	f8c7 0298 	str.w	r0, [r7, #664]	; 0x298
 80096e6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d017      	beq.n	800971e <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x291a>
        params->cond_subgraph_index = while_params->cond_subgraph_index();
 80096ee:	f107 031c 	add.w	r3, r7, #28
 80096f2:	4618      	mov	r0, r3
 80096f4:	f002 fd1c 	bl	800c130 <_ZNKSt10unique_ptrI17TfLiteWhileParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80096f8:	4604      	mov	r4, r0
 80096fa:	f8d7 0298 	ldr.w	r0, [r7, #664]	; 0x298
 80096fe:	f7fc fde9 	bl	80062d4 <_ZNK6tflite12WhileOptions19cond_subgraph_indexEv>
 8009702:	4603      	mov	r3, r0
 8009704:	6023      	str	r3, [r4, #0]
        params->body_subgraph_index = while_params->body_subgraph_index();
 8009706:	f107 031c 	add.w	r3, r7, #28
 800970a:	4618      	mov	r0, r3
 800970c:	f002 fd10 	bl	800c130 <_ZNKSt10unique_ptrI17TfLiteWhileParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8009710:	4604      	mov	r4, r0
 8009712:	f8d7 0298 	ldr.w	r0, [r7, #664]	; 0x298
 8009716:	f7fc fdec 	bl	80062f2 <_ZNK6tflite12WhileOptions19body_subgraph_indexEv>
 800971a:	4603      	mov	r3, r0
 800971c:	6063      	str	r3, [r4, #4]
      }
      *builtin_data = params.release();
 800971e:	f107 031c 	add.w	r3, r7, #28
 8009722:	4618      	mov	r0, r3
 8009724:	f002 fd10 	bl	800c148 <_ZNSt10unique_ptrI17TfLiteWhileParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8009728:	4602      	mov	r2, r0
 800972a:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 800972e:	601a      	str	r2, [r3, #0]
      return kTfLiteOk;
 8009730:	2400      	movs	r4, #0
      auto params = safe_allocator.Allocate<TfLiteWhileParams>();
 8009732:	f107 031c 	add.w	r3, r7, #28
 8009736:	4618      	mov	r0, r3
 8009738:	f002 fcce 	bl	800c0d8 <_ZNSt10unique_ptrI17TfLiteWhileParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 800973c:	e058      	b.n	80097f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29ec>
    }
    case BuiltinOperator_BATCH_MATMUL: {
      auto params = safe_allocator.Allocate<TfLiteBatchMatMulParams>();
 800973e:	f107 0314 	add.w	r3, r7, #20
 8009742:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8009746:	4611      	mov	r1, r2
 8009748:	4618      	mov	r0, r3
 800974a:	f002 fd11 	bl	800c170 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI23TfLiteBatchMatMulParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
      TF_LITE_ENSURE(error_reporter, params != nullptr);
 800974e:	f107 0314 	add.w	r3, r7, #20
 8009752:	2100      	movs	r1, #0
 8009754:	4618      	mov	r0, r3
 8009756:	f002 fd48 	bl	800c1ea <_ZStneI23TfLiteBatchMatMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 800975a:	4603      	mov	r3, r0
 800975c:	f083 0301 	eor.w	r3, r3, #1
 8009760:	b2db      	uxtb	r3, r3
 8009762:	2b00      	cmp	r3, #0
 8009764:	d00e      	beq.n	8009784 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2980>
 8009766:	1d3b      	adds	r3, r7, #4
 8009768:	6818      	ldr	r0, [r3, #0]
 800976a:	1d3b      	adds	r3, r7, #4
 800976c:	6819      	ldr	r1, [r3, #0]
 800976e:	4b23      	ldr	r3, [pc, #140]	; (80097fc <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29f8>)
 8009770:	9301      	str	r3, [sp, #4]
 8009772:	f240 334a 	movw	r3, #842	; 0x34a
 8009776:	9300      	str	r3, [sp, #0]
 8009778:	4b21      	ldr	r3, [pc, #132]	; (8009800 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29fc>)
 800977a:	4a22      	ldr	r2, [pc, #136]	; (8009804 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2a00>)
 800977c:	f7fb fe3f 	bl	80053fe <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8009780:	2401      	movs	r4, #1
 8009782:	e02c      	b.n	80097de <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29da>
      if (const auto* bmm_params =
              op->builtin_options_as_BatchMatMulOptions()) {
 8009784:	f107 030c 	add.w	r3, r7, #12
 8009788:	6818      	ldr	r0, [r3, #0]
 800978a:	f7fd f9da 	bl	8006b42 <_ZNK6tflite8Operator37builtin_options_as_BatchMatMulOptionsEv>
 800978e:	f8c7 029c 	str.w	r0, [r7, #668]	; 0x29c
      if (const auto* bmm_params =
 8009792:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8009796:	2b00      	cmp	r3, #0
 8009798:	d017      	beq.n	80097ca <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29c6>
        params->adj_x = bmm_params->adj_x();
 800979a:	f107 0314 	add.w	r3, r7, #20
 800979e:	4618      	mov	r0, r3
 80097a0:	f002 fd30 	bl	800c204 <_ZNKSt10unique_ptrI23TfLiteBatchMatMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80097a4:	4604      	mov	r4, r0
 80097a6:	f8d7 029c 	ldr.w	r0, [r7, #668]	; 0x29c
 80097aa:	f7fc fdb1 	bl	8006310 <_ZNK6tflite18BatchMatMulOptions5adj_xEv>
 80097ae:	4603      	mov	r3, r0
 80097b0:	7023      	strb	r3, [r4, #0]
        params->adj_y = bmm_params->adj_y();
 80097b2:	f107 0314 	add.w	r3, r7, #20
 80097b6:	4618      	mov	r0, r3
 80097b8:	f002 fd24 	bl	800c204 <_ZNKSt10unique_ptrI23TfLiteBatchMatMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80097bc:	4604      	mov	r4, r0
 80097be:	f8d7 029c 	ldr.w	r0, [r7, #668]	; 0x29c
 80097c2:	f7fc fdb9 	bl	8006338 <_ZNK6tflite18BatchMatMulOptions5adj_yEv>
 80097c6:	4603      	mov	r3, r0
 80097c8:	7063      	strb	r3, [r4, #1]
      }
      *builtin_data = params.release();
 80097ca:	f107 0314 	add.w	r3, r7, #20
 80097ce:	4618      	mov	r0, r3
 80097d0:	f002 fd24 	bl	800c21c <_ZNSt10unique_ptrI23TfLiteBatchMatMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 80097d4:	4602      	mov	r2, r0
 80097d6:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 80097da:	601a      	str	r2, [r3, #0]
      return kTfLiteOk;
 80097dc:	2400      	movs	r4, #0
      auto params = safe_allocator.Allocate<TfLiteBatchMatMulParams>();
 80097de:	f107 0314 	add.w	r3, r7, #20
 80097e2:	4618      	mov	r0, r3
 80097e4:	f002 fce2 	bl	800c1ac <_ZNSt10unique_ptrI23TfLiteBatchMatMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 80097e8:	e002      	b.n	80097f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29ec>
    case BuiltinOperator_NON_MAX_SUPPRESSION_V4:
    case BuiltinOperator_NON_MAX_SUPPRESSION_V5:
    case BuiltinOperator_SCATTER_ND:
    case BuiltinOperator_DENSIFY:
    case BuiltinOperator_SEGMENT_SUM:
      return kTfLiteOk;
 80097ea:	2400      	movs	r4, #0
 80097ec:	e000      	b.n	80097f0 <_ZN6tflite11ParseOpDataEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x29ec>
  }
  return kTfLiteError;
 80097ee:	2401      	movs	r4, #1
 80097f0:	4623      	mov	r3, r4
}  // NOLINT[readability/fn_size]
 80097f2:	4618      	mov	r0, r3
 80097f4:	f507 7728 	add.w	r7, r7, #672	; 0x2a0
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bdb0      	pop	{r4, r5, r7, pc}
 80097fc:	08021fe8 	.word	0x08021fe8
 8009800:	08021f88 	.word	0x08021f88
 8009804:	08021fd0 	.word	0x08021fd0

08009808 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8009808:	b580      	push	{r7, lr}
 800980a:	b084      	sub	sp, #16
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	460b      	mov	r3, r1
 8009812:	807b      	strh	r3, [r7, #2]
 8009814:	4613      	mov	r3, r2
 8009816:	707b      	strb	r3, [r7, #1]
    auto field_offset = GetOptionalFieldOffset(field);
 8009818:	887b      	ldrh	r3, [r7, #2]
 800981a:	4619      	mov	r1, r3
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f7f7 fc51 	bl	80010c4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8009822:	4603      	mov	r3, r0
 8009824:	81fb      	strh	r3, [r7, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8009826:	89fb      	ldrh	r3, [r7, #14]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d007      	beq.n	800983c <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0x34>
 800982c:	687a      	ldr	r2, [r7, #4]
 800982e:	89fb      	ldrh	r3, [r7, #14]
 8009830:	4413      	add	r3, r2
 8009832:	4618      	mov	r0, r3
 8009834:	f002 fd12 	bl	800c25c <_ZN11flatbuffers10ReadScalarIhEET_PKv>
 8009838:	4603      	mov	r3, r0
 800983a:	e000      	b.n	800983e <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0x36>
 800983c:	787b      	ldrb	r3, [r7, #1]
  }
 800983e:	4618      	mov	r0, r3
 8009840:	3710      	adds	r7, #16
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}

08009846 <_ZNK11flatbuffers5Table10GetPointerIPKvEET_t>:
    auto field_offset = GetOptionalFieldOffset(field);
    auto p = data_ + field_offset;
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
                        : nullptr;
  }
  template<typename P> P GetPointer(voffset_t field) const {
 8009846:	b580      	push	{r7, lr}
 8009848:	b082      	sub	sp, #8
 800984a:	af00      	add	r7, sp, #0
 800984c:	6078      	str	r0, [r7, #4]
 800984e:	460b      	mov	r3, r1
 8009850:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8009852:	887b      	ldrh	r3, [r7, #2]
 8009854:	4619      	mov	r1, r3
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f002 fd0e 	bl	800c278 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t>
 800985c:	4603      	mov	r3, r0
  }
 800985e:	4618      	mov	r0, r3
 8009860:	3708      	adds	r7, #8
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}

08009866 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8009866:	b580      	push	{r7, lr}
 8009868:	b086      	sub	sp, #24
 800986a:	af00      	add	r7, sp, #0
 800986c:	60f8      	str	r0, [r7, #12]
 800986e:	460b      	mov	r3, r1
 8009870:	607a      	str	r2, [r7, #4]
 8009872:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 8009874:	897b      	ldrh	r3, [r7, #10]
 8009876:	4619      	mov	r1, r3
 8009878:	68f8      	ldr	r0, [r7, #12]
 800987a:	f7f7 fc23 	bl	80010c4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800987e:	4603      	mov	r3, r0
 8009880:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8009882:	8afb      	ldrh	r3, [r7, #22]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d007      	beq.n	8009898 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0x32>
 8009888:	68fa      	ldr	r2, [r7, #12]
 800988a:	8afb      	ldrh	r3, [r7, #22]
 800988c:	4413      	add	r3, r2
 800988e:	4618      	mov	r0, r3
 8009890:	f7f7 ffe4 	bl	800185c <_ZN11flatbuffers10ReadScalarIlEET_PKv>
 8009894:	4603      	mov	r3, r0
 8009896:	e000      	b.n	800989a <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0x34>
 8009898:	687b      	ldr	r3, [r7, #4]
  }
 800989a:	4618      	mov	r0, r3
 800989c:	3718      	adds	r7, #24
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}

080098a2 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 80098a2:	b580      	push	{r7, lr}
 80098a4:	b082      	sub	sp, #8
 80098a6:	af00      	add	r7, sp, #0
 80098a8:	6078      	str	r0, [r7, #4]
 80098aa:	460b      	mov	r3, r1
 80098ac:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 80098ae:	887b      	ldrh	r3, [r7, #2]
 80098b0:	4619      	mov	r1, r3
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f002 fd00 	bl	800c2b8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 80098b8:	4603      	mov	r3, r0
  }
 80098ba:	4618      	mov	r0, r3
 80098bc:	3708      	adds	r7, #8
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}

080098c2 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 80098c2:	b580      	push	{r7, lr}
 80098c4:	b084      	sub	sp, #16
 80098c6:	af00      	add	r7, sp, #0
 80098c8:	6078      	str	r0, [r7, #4]
 80098ca:	460b      	mov	r3, r1
 80098cc:	807b      	strh	r3, [r7, #2]
 80098ce:	4613      	mov	r3, r2
 80098d0:	707b      	strb	r3, [r7, #1]
    auto field_offset = GetOptionalFieldOffset(field);
 80098d2:	887b      	ldrh	r3, [r7, #2]
 80098d4:	4619      	mov	r1, r3
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f7f7 fbf4 	bl	80010c4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80098dc:	4603      	mov	r3, r0
 80098de:	81fb      	strh	r3, [r7, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80098e0:	89fb      	ldrh	r3, [r7, #14]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d007      	beq.n	80098f6 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0x34>
 80098e6:	687a      	ldr	r2, [r7, #4]
 80098e8:	89fb      	ldrh	r3, [r7, #14]
 80098ea:	4413      	add	r3, r2
 80098ec:	4618      	mov	r0, r3
 80098ee:	f002 fd03 	bl	800c2f8 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
 80098f2:	4603      	mov	r3, r0
 80098f4:	e001      	b.n	80098fa <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0x38>
 80098f6:	f997 3001 	ldrsb.w	r3, [r7, #1]
  }
 80098fa:	4618      	mov	r0, r3
 80098fc:	3710      	adds	r7, #16
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}

08009902 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8009902:	b580      	push	{r7, lr}
 8009904:	b086      	sub	sp, #24
 8009906:	af00      	add	r7, sp, #0
 8009908:	60f8      	str	r0, [r7, #12]
 800990a:	460b      	mov	r3, r1
 800990c:	ed87 0a01 	vstr	s0, [r7, #4]
 8009910:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 8009912:	897b      	ldrh	r3, [r7, #10]
 8009914:	4619      	mov	r1, r3
 8009916:	68f8      	ldr	r0, [r7, #12]
 8009918:	f7f7 fbd4 	bl	80010c4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800991c:	4603      	mov	r3, r0
 800991e:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8009920:	8afb      	ldrh	r3, [r7, #22]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d008      	beq.n	8009938 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_+0x36>
 8009926:	68fa      	ldr	r2, [r7, #12]
 8009928:	8afb      	ldrh	r3, [r7, #22]
 800992a:	4413      	add	r3, r2
 800992c:	4618      	mov	r0, r3
 800992e:	f002 fcf2 	bl	800c316 <_ZN11flatbuffers10ReadScalarIfEET_PKv>
 8009932:	eef0 7a40 	vmov.f32	s15, s0
 8009936:	e001      	b.n	800993c <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_+0x3a>
 8009938:	edd7 7a01 	vldr	s15, [r7, #4]
  }
 800993c:	eeb0 0a67 	vmov.f32	s0, s15
 8009940:	3718      	adds	r7, #24
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}

08009946 <_ZNK11flatbuffers6VectorIlE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8009946:	b580      	push	{r7, lr}
 8009948:	b082      	sub	sp, #8
 800994a:	af00      	add	r7, sp, #0
 800994c:	6078      	str	r0, [r7, #4]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4618      	mov	r0, r3
 8009954:	f7f7 ff5b 	bl	800180e <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8009958:	4603      	mov	r3, r0
 800995a:	4618      	mov	r0, r3
 800995c:	3708      	adds	r7, #8
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}
	...

08009964 <_ZNK11flatbuffers6VectorIlE3GetEm>:
  return_type Get(uoffset_t i) const {
 8009964:	b580      	push	{r7, lr}
 8009966:	b082      	sub	sp, #8
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f7ff ffe9 	bl	8009946 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8009974:	4602      	mov	r2, r0
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	4293      	cmp	r3, r2
 800997a:	d306      	bcc.n	800998a <_ZNK11flatbuffers6VectorIlE3GetEm+0x26>
 800997c:	4b09      	ldr	r3, [pc, #36]	; (80099a4 <_ZNK11flatbuffers6VectorIlE3GetEm+0x40>)
 800997e:	4a0a      	ldr	r2, [pc, #40]	; (80099a8 <_ZNK11flatbuffers6VectorIlE3GetEm+0x44>)
 8009980:	f240 1101 	movw	r1, #257	; 0x101
 8009984:	4809      	ldr	r0, [pc, #36]	; (80099ac <_ZNK11flatbuffers6VectorIlE3GetEm+0x48>)
 8009986:	f015 fa6b 	bl	801ee60 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f002 fce7 	bl	800c35e <_ZNK11flatbuffers6VectorIlE4DataEv>
 8009990:	4603      	mov	r3, r0
 8009992:	6839      	ldr	r1, [r7, #0]
 8009994:	4618      	mov	r0, r3
 8009996:	f002 fcd0 	bl	800c33a <_ZN11flatbuffers14IndirectHelperIlE4ReadEPKhm>
 800999a:	4603      	mov	r3, r0
  }
 800999c:	4618      	mov	r0, r3
 800999e:	3708      	adds	r7, #8
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}
 80099a4:	080220a4 	.word	0x080220a4
 80099a8:	080255d8 	.word	0x080255d8
 80099ac:	080220b0 	.word	0x080220b0

080099b0 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI16TfLiteConvParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 80099b0:	b590      	push	{r4, r7, lr}
 80099b2:	b085      	sub	sp, #20
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 80099be:	4618      	mov	r0, r3
 80099c0:	f002 fcd9 	bl	800c376 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI16TfLiteConvParamsEEPT_v>
 80099c4:	4604      	mov	r4, r0
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	681a      	ldr	r2, [r3, #0]
 80099ca:	f107 030c 	add.w	r3, r7, #12
 80099ce:	4611      	mov	r1, r2
 80099d0:	4618      	mov	r0, r3
 80099d2:	f7fd f8ca 	bl	8006b6a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 80099d6:	f107 030c 	add.w	r3, r7, #12
 80099da:	461a      	mov	r2, r3
 80099dc:	4621      	mov	r1, r4
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f002 fcf5 	bl	800c3ce <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	3714      	adds	r7, #20
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd90      	pop	{r4, r7, pc}

080099ec <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
	       is_convertible<_Up*, _Tp*>, is_same<_Dp, default_delete<_Tp>>>>
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b084      	sub	sp, #16
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
      {
	auto& __ptr = _M_t._M_ptr();
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	4618      	mov	r0, r3
 80099f8:	f002 fd05 	bl	800c406 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80099fc:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d009      	beq.n	8009a1a <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f002 fd0a 	bl	800c420 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8009a0c:	4602      	mov	r2, r0
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	4619      	mov	r1, r3
 8009a14:	4610      	mov	r0, r2
 8009a16:	f7fd f8b7 	bl	8006b88 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	601a      	str	r2, [r3, #0]
      }
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	4618      	mov	r0, r3
 8009a24:	3710      	adds	r7, #16
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}

08009a2a <_ZStneI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
	       const unique_ptr<_Up, _Ep>& __y)
    { return __x.get() != __y.get(); }

  template<typename _Tp, typename _Dp>
    inline bool
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8009a2a:	b580      	push	{r7, lr}
 8009a2c:	b082      	sub	sp, #8
 8009a2e:	af00      	add	r7, sp, #0
 8009a30:	6078      	str	r0, [r7, #4]
 8009a32:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f002 fd21 	bl	800c47c <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3708      	adds	r7, #8
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b082      	sub	sp, #8
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
	return get();
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f002 fd26 	bl	800c49e <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8009a52:	4603      	mov	r3, r0
      }
 8009a54:	4618      	mov	r0, r3
 8009a56:	3708      	adds	r7, #8
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b084      	sub	sp, #16
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f002 fd1a 	bl	800c49e <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8009a6a:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f002 fcc9 	bl	800c406 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8009a74:	4602      	mov	r2, r0
 8009a76:	2300      	movs	r3, #0
 8009a78:	6013      	str	r3, [r2, #0]
	return __p;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
      }
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3710      	adds	r7, #16
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI16TfLiteCastParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8009a84:	b590      	push	{r4, r7, lr}
 8009a86:	b085      	sub	sp, #20
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8009a92:	4618      	mov	r0, r3
 8009a94:	f002 fd10 	bl	800c4b8 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI16TfLiteCastParamsEEPT_v>
 8009a98:	4604      	mov	r4, r0
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	681a      	ldr	r2, [r3, #0]
 8009a9e:	f107 030c 	add.w	r3, r7, #12
 8009aa2:	4611      	mov	r1, r2
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f7fd f860 	bl	8006b6a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8009aaa:	f107 030c 	add.w	r3, r7, #12
 8009aae:	461a      	mov	r2, r3
 8009ab0:	4621      	mov	r1, r4
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f002 fd21 	bl	800c4fa <_ZNSt10unique_ptrI16TfLiteCastParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	3714      	adds	r7, #20
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd90      	pop	{r4, r7, pc}

08009ac0 <_ZNSt10unique_ptrI16TfLiteCastParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b084      	sub	sp, #16
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	4618      	mov	r0, r3
 8009acc:	f002 fd31 	bl	800c532 <_ZNSt15__uniq_ptr_implI16TfLiteCastParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8009ad0:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d009      	beq.n	8009aee <_ZNSt10unique_ptrI16TfLiteCastParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f002 fd36 	bl	800c54c <_ZNSt10unique_ptrI16TfLiteCastParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8009ae0:	4602      	mov	r2, r0
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4619      	mov	r1, r3
 8009ae8:	4610      	mov	r0, r2
 8009aea:	f7fd f84d 	bl	8006b88 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2200      	movs	r2, #0
 8009af2:	601a      	str	r2, [r3, #0]
      }
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	4618      	mov	r0, r3
 8009af8:	3710      	adds	r7, #16
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}

08009afe <_ZStneI16TfLiteCastParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8009afe:	b580      	push	{r7, lr}
 8009b00:	b082      	sub	sp, #8
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	6078      	str	r0, [r7, #4]
 8009b06:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f002 fd42 	bl	800c592 <_ZNKSt10unique_ptrI16TfLiteCastParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	4618      	mov	r0, r3
 8009b12:	3708      	adds	r7, #8
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <_ZNKSt10unique_ptrI16TfLiteCastParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
	return get();
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f002 fd47 	bl	800c5b4 <_ZNKSt10unique_ptrI16TfLiteCastParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8009b26:	4603      	mov	r3, r0
      }
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3708      	adds	r7, #8
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <_ZNSt10unique_ptrI16TfLiteCastParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b084      	sub	sp, #16
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f002 fd3b 	bl	800c5b4 <_ZNKSt10unique_ptrI16TfLiteCastParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8009b3e:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	4618      	mov	r0, r3
 8009b44:	f002 fcf5 	bl	800c532 <_ZNSt15__uniq_ptr_implI16TfLiteCastParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	6013      	str	r3, [r2, #0]
	return __p;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
      }
 8009b50:	4618      	mov	r0, r3
 8009b52:	3710      	adds	r7, #16
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}

08009b58 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI25TfLiteLSHProjectionParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8009b58:	b590      	push	{r4, r7, lr}
 8009b5a:	b085      	sub	sp, #20
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8009b66:	4618      	mov	r0, r3
 8009b68:	f002 fd31 	bl	800c5ce <_ZN6tflite20BuiltinDataAllocator11AllocatePODI25TfLiteLSHProjectionParamsEEPT_v>
 8009b6c:	4604      	mov	r4, r0
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	681a      	ldr	r2, [r3, #0]
 8009b72:	f107 030c 	add.w	r3, r7, #12
 8009b76:	4611      	mov	r1, r2
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f7fc fff6 	bl	8006b6a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8009b7e:	f107 030c 	add.w	r3, r7, #12
 8009b82:	461a      	mov	r2, r3
 8009b84:	4621      	mov	r1, r4
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f002 fd42 	bl	800c610 <_ZNSt10unique_ptrI25TfLiteLSHProjectionParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	3714      	adds	r7, #20
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd90      	pop	{r4, r7, pc}

08009b94 <_ZNSt10unique_ptrI25TfLiteLSHProjectionParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b084      	sub	sp, #16
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f002 fd52 	bl	800c648 <_ZNSt15__uniq_ptr_implI25TfLiteLSHProjectionParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8009ba4:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d009      	beq.n	8009bc2 <_ZNSt10unique_ptrI25TfLiteLSHProjectionParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f002 fd57 	bl	800c662 <_ZNSt10unique_ptrI25TfLiteLSHProjectionParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4619      	mov	r1, r3
 8009bbc:	4610      	mov	r0, r2
 8009bbe:	f7fc ffe3 	bl	8006b88 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	601a      	str	r2, [r3, #0]
      }
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3710      	adds	r7, #16
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}

08009bd2 <_ZStneI25TfLiteLSHProjectionParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8009bd2:	b580      	push	{r7, lr}
 8009bd4:	b082      	sub	sp, #8
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
 8009bda:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f002 fd63 	bl	800c6a8 <_ZNKSt10unique_ptrI25TfLiteLSHProjectionParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8009be2:	4603      	mov	r3, r0
 8009be4:	4618      	mov	r0, r3
 8009be6:	3708      	adds	r7, #8
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}

08009bec <_ZNKSt10unique_ptrI25TfLiteLSHProjectionParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b082      	sub	sp, #8
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
	return get();
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f002 fd68 	bl	800c6ca <_ZNKSt10unique_ptrI25TfLiteLSHProjectionParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8009bfa:	4603      	mov	r3, r0
      }
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3708      	adds	r7, #8
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}

08009c04 <_ZNSt10unique_ptrI25TfLiteLSHProjectionParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b084      	sub	sp, #16
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f002 fd5c 	bl	800c6ca <_ZNKSt10unique_ptrI25TfLiteLSHProjectionParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8009c12:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	4618      	mov	r0, r3
 8009c18:	f002 fd16 	bl	800c648 <_ZNSt15__uniq_ptr_implI25TfLiteLSHProjectionParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8009c1c:	4602      	mov	r2, r0
 8009c1e:	2300      	movs	r3, #0
 8009c20:	6013      	str	r3, [r2, #0]
	return __p;
 8009c22:	68fb      	ldr	r3, [r7, #12]
      }
 8009c24:	4618      	mov	r0, r3
 8009c26:	3710      	adds	r7, #16
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}

08009c2c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI16TfLitePoolParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8009c2c:	b590      	push	{r4, r7, lr}
 8009c2e:	b085      	sub	sp, #20
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f002 fd52 	bl	800c6e4 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI16TfLitePoolParamsEEPT_v>
 8009c40:	4604      	mov	r4, r0
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	681a      	ldr	r2, [r3, #0]
 8009c46:	f107 030c 	add.w	r3, r7, #12
 8009c4a:	4611      	mov	r1, r2
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f7fc ff8c 	bl	8006b6a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8009c52:	f107 030c 	add.w	r3, r7, #12
 8009c56:	461a      	mov	r2, r3
 8009c58:	4621      	mov	r1, r4
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f002 fd63 	bl	800c726 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	3714      	adds	r7, #20
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd90      	pop	{r4, r7, pc}

08009c68 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b084      	sub	sp, #16
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	4618      	mov	r0, r3
 8009c74:	f002 fd73 	bl	800c75e <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8009c78:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d009      	beq.n	8009c96 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f002 fd78 	bl	800c778 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8009c88:	4602      	mov	r2, r0
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4619      	mov	r1, r3
 8009c90:	4610      	mov	r0, r2
 8009c92:	f7fc ff79 	bl	8006b88 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	601a      	str	r2, [r3, #0]
      }
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3710      	adds	r7, #16
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}

08009ca6 <_ZStneI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8009ca6:	b580      	push	{r7, lr}
 8009ca8:	b082      	sub	sp, #8
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	6078      	str	r0, [r7, #4]
 8009cae:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f002 fd84 	bl	800c7be <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3708      	adds	r7, #8
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}

08009cc0 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b082      	sub	sp, #8
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
	return get();
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f002 fd89 	bl	800c7e0 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8009cce:	4603      	mov	r3, r0
      }
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3708      	adds	r7, #8
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}

08009cd8 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b084      	sub	sp, #16
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f002 fd7d 	bl	800c7e0 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8009ce6:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	4618      	mov	r0, r3
 8009cec:	f002 fd37 	bl	800c75e <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8009cf0:	4602      	mov	r2, r0
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	6013      	str	r3, [r2, #0]
	return __p;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
      }
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3710      	adds	r7, #16
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}

08009d00 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI25TfLiteDepthwiseConvParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8009d00:	b590      	push	{r4, r7, lr}
 8009d02:	b085      	sub	sp, #20
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
 8009d08:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f002 fd73 	bl	800c7fa <_ZN6tflite20BuiltinDataAllocator11AllocatePODI25TfLiteDepthwiseConvParamsEEPT_v>
 8009d14:	4604      	mov	r4, r0
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	681a      	ldr	r2, [r3, #0]
 8009d1a:	f107 030c 	add.w	r3, r7, #12
 8009d1e:	4611      	mov	r1, r2
 8009d20:	4618      	mov	r0, r3
 8009d22:	f7fc ff22 	bl	8006b6a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8009d26:	f107 030c 	add.w	r3, r7, #12
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	4621      	mov	r1, r4
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f002 fd84 	bl	800c83c <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	3714      	adds	r7, #20
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd90      	pop	{r4, r7, pc}

08009d3c <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b084      	sub	sp, #16
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	4618      	mov	r0, r3
 8009d48:	f002 fd94 	bl	800c874 <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8009d4c:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d009      	beq.n	8009d6a <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f002 fd99 	bl	800c88e <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8009d5c:	4602      	mov	r2, r0
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	4619      	mov	r1, r3
 8009d64:	4610      	mov	r0, r2
 8009d66:	f7fc ff0f 	bl	8006b88 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	601a      	str	r2, [r3, #0]
      }
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	4618      	mov	r0, r3
 8009d74:	3710      	adds	r7, #16
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}

08009d7a <_ZStneI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8009d7a:	b580      	push	{r7, lr}
 8009d7c:	b082      	sub	sp, #8
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	6078      	str	r0, [r7, #4]
 8009d82:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f002 fda5 	bl	800c8d4 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3708      	adds	r7, #8
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b082      	sub	sp, #8
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
	return get();
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f002 fdaa 	bl	800c8f6 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8009da2:	4603      	mov	r3, r0
      }
 8009da4:	4618      	mov	r0, r3
 8009da6:	3708      	adds	r7, #8
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b084      	sub	sp, #16
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f002 fd9e 	bl	800c8f6 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8009dba:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f002 fd58 	bl	800c874 <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8009dc4:	4602      	mov	r2, r0
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	6013      	str	r3, [r2, #0]
	return __p;
 8009dca:	68fb      	ldr	r3, [r7, #12]
      }
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3710      	adds	r7, #16
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI16TfLiteSVDFParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8009dd4:	b590      	push	{r4, r7, lr}
 8009dd6:	b085      	sub	sp, #20
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8009de2:	4618      	mov	r0, r3
 8009de4:	f002 fd94 	bl	800c910 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI16TfLiteSVDFParamsEEPT_v>
 8009de8:	4604      	mov	r4, r0
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	681a      	ldr	r2, [r3, #0]
 8009dee:	f107 030c 	add.w	r3, r7, #12
 8009df2:	4611      	mov	r1, r2
 8009df4:	4618      	mov	r0, r3
 8009df6:	f7fc feb8 	bl	8006b6a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8009dfa:	f107 030c 	add.w	r3, r7, #12
 8009dfe:	461a      	mov	r2, r3
 8009e00:	4621      	mov	r1, r4
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f002 fda5 	bl	800c952 <_ZNSt10unique_ptrI16TfLiteSVDFParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	3714      	adds	r7, #20
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd90      	pop	{r4, r7, pc}

08009e10 <_ZNSt10unique_ptrI16TfLiteSVDFParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b084      	sub	sp, #16
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f002 fdb5 	bl	800c98a <_ZNSt15__uniq_ptr_implI16TfLiteSVDFParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8009e20:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d009      	beq.n	8009e3e <_ZNSt10unique_ptrI16TfLiteSVDFParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f002 fdba 	bl	800c9a4 <_ZNSt10unique_ptrI16TfLiteSVDFParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8009e30:	4602      	mov	r2, r0
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4619      	mov	r1, r3
 8009e38:	4610      	mov	r0, r2
 8009e3a:	f7fc fea5 	bl	8006b88 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2200      	movs	r2, #0
 8009e42:	601a      	str	r2, [r3, #0]
      }
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	4618      	mov	r0, r3
 8009e48:	3710      	adds	r7, #16
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}

08009e4e <_ZStneI16TfLiteSVDFParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8009e4e:	b580      	push	{r7, lr}
 8009e50:	b082      	sub	sp, #8
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	6078      	str	r0, [r7, #4]
 8009e56:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f002 fdc6 	bl	800c9ea <_ZNKSt10unique_ptrI16TfLiteSVDFParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	4618      	mov	r0, r3
 8009e62:	3708      	adds	r7, #8
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <_ZNKSt10unique_ptrI16TfLiteSVDFParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b082      	sub	sp, #8
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
	return get();
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f002 fdcb 	bl	800ca0c <_ZNKSt10unique_ptrI16TfLiteSVDFParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8009e76:	4603      	mov	r3, r0
      }
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3708      	adds	r7, #8
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}

08009e80 <_ZNSt10unique_ptrI16TfLiteSVDFParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b084      	sub	sp, #16
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f002 fdbf 	bl	800ca0c <_ZNKSt10unique_ptrI16TfLiteSVDFParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8009e8e:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	4618      	mov	r0, r3
 8009e94:	f002 fd79 	bl	800c98a <_ZNSt15__uniq_ptr_implI16TfLiteSVDFParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8009e98:	4602      	mov	r2, r0
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	6013      	str	r3, [r2, #0]
	return __p;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
      }
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3710      	adds	r7, #16
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI23TfLiteSequenceRNNParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8009ea8:	b590      	push	{r4, r7, lr}
 8009eaa:	b085      	sub	sp, #20
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f002 fdb5 	bl	800ca26 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI23TfLiteSequenceRNNParamsEEPT_v>
 8009ebc:	4604      	mov	r4, r0
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	681a      	ldr	r2, [r3, #0]
 8009ec2:	f107 030c 	add.w	r3, r7, #12
 8009ec6:	4611      	mov	r1, r2
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f7fc fe4e 	bl	8006b6a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8009ece:	f107 030c 	add.w	r3, r7, #12
 8009ed2:	461a      	mov	r2, r3
 8009ed4:	4621      	mov	r1, r4
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f002 fdc6 	bl	800ca68 <_ZNSt10unique_ptrI23TfLiteSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	3714      	adds	r7, #20
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd90      	pop	{r4, r7, pc}

08009ee4 <_ZNSt10unique_ptrI23TfLiteSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b084      	sub	sp, #16
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f002 fdd6 	bl	800caa0 <_ZNSt15__uniq_ptr_implI23TfLiteSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8009ef4:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d009      	beq.n	8009f12 <_ZNSt10unique_ptrI23TfLiteSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f002 fddb 	bl	800caba <_ZNSt10unique_ptrI23TfLiteSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8009f04:	4602      	mov	r2, r0
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	4619      	mov	r1, r3
 8009f0c:	4610      	mov	r0, r2
 8009f0e:	f7fc fe3b 	bl	8006b88 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	2200      	movs	r2, #0
 8009f16:	601a      	str	r2, [r3, #0]
      }
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3710      	adds	r7, #16
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}

08009f22 <_ZStneI23TfLiteSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8009f22:	b580      	push	{r7, lr}
 8009f24:	b082      	sub	sp, #8
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	6078      	str	r0, [r7, #4]
 8009f2a:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f002 fde7 	bl	800cb00 <_ZNKSt10unique_ptrI23TfLiteSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8009f32:	4603      	mov	r3, r0
 8009f34:	4618      	mov	r0, r3
 8009f36:	3708      	adds	r7, #8
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <_ZNKSt10unique_ptrI23TfLiteSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b082      	sub	sp, #8
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
	return get();
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f002 fdec 	bl	800cb22 <_ZNKSt10unique_ptrI23TfLiteSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8009f4a:	4603      	mov	r3, r0
      }
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3708      	adds	r7, #8
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}

08009f54 <_ZNSt10unique_ptrI23TfLiteSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b084      	sub	sp, #16
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f002 fde0 	bl	800cb22 <_ZNKSt10unique_ptrI23TfLiteSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8009f62:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	4618      	mov	r0, r3
 8009f68:	f002 fd9a 	bl	800caa0 <_ZNSt15__uniq_ptr_implI23TfLiteSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8009f6c:	4602      	mov	r2, r0
 8009f6e:	2300      	movs	r3, #0
 8009f70:	6013      	str	r3, [r2, #0]
	return __p;
 8009f72:	68fb      	ldr	r3, [r7, #12]
      }
 8009f74:	4618      	mov	r0, r3
 8009f76:	3710      	adds	r7, #16
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}

08009f7c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI36TfLiteBidirectionalSequenceRNNParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8009f7c:	b590      	push	{r4, r7, lr}
 8009f7e:	b085      	sub	sp, #20
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
 8009f84:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f002 fdd6 	bl	800cb3c <_ZN6tflite20BuiltinDataAllocator11AllocatePODI36TfLiteBidirectionalSequenceRNNParamsEEPT_v>
 8009f90:	4604      	mov	r4, r0
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	681a      	ldr	r2, [r3, #0]
 8009f96:	f107 030c 	add.w	r3, r7, #12
 8009f9a:	4611      	mov	r1, r2
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f7fc fde4 	bl	8006b6a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8009fa2:	f107 030c 	add.w	r3, r7, #12
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	4621      	mov	r1, r4
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f002 fde7 	bl	800cb7e <_ZNSt10unique_ptrI36TfLiteBidirectionalSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	3714      	adds	r7, #20
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd90      	pop	{r4, r7, pc}

08009fb8 <_ZNSt10unique_ptrI36TfLiteBidirectionalSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b084      	sub	sp, #16
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f002 fdf7 	bl	800cbb6 <_ZNSt15__uniq_ptr_implI36TfLiteBidirectionalSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8009fc8:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d009      	beq.n	8009fe6 <_ZNSt10unique_ptrI36TfLiteBidirectionalSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f002 fdfc 	bl	800cbd0 <_ZNSt10unique_ptrI36TfLiteBidirectionalSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8009fd8:	4602      	mov	r2, r0
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	4619      	mov	r1, r3
 8009fe0:	4610      	mov	r0, r2
 8009fe2:	f7fc fdd1 	bl	8006b88 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	601a      	str	r2, [r3, #0]
      }
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3710      	adds	r7, #16
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}

08009ff6 <_ZStneI36TfLiteBidirectionalSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8009ff6:	b580      	push	{r7, lr}
 8009ff8:	b082      	sub	sp, #8
 8009ffa:	af00      	add	r7, sp, #0
 8009ffc:	6078      	str	r0, [r7, #4]
 8009ffe:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f002 fe08 	bl	800cc16 <_ZNKSt10unique_ptrI36TfLiteBidirectionalSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800a006:	4603      	mov	r3, r0
 800a008:	4618      	mov	r0, r3
 800a00a:	3708      	adds	r7, #8
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <_ZNKSt10unique_ptrI36TfLiteBidirectionalSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800a010:	b580      	push	{r7, lr}
 800a012:	b082      	sub	sp, #8
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
	return get();
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f002 fe0d 	bl	800cc38 <_ZNKSt10unique_ptrI36TfLiteBidirectionalSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800a01e:	4603      	mov	r3, r0
      }
 800a020:	4618      	mov	r0, r3
 800a022:	3708      	adds	r7, #8
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}

0800a028 <_ZNSt10unique_ptrI36TfLiteBidirectionalSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800a028:	b580      	push	{r7, lr}
 800a02a:	b084      	sub	sp, #16
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f002 fe01 	bl	800cc38 <_ZNKSt10unique_ptrI36TfLiteBidirectionalSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800a036:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	4618      	mov	r0, r3
 800a03c:	f002 fdbb 	bl	800cbb6 <_ZNSt15__uniq_ptr_implI36TfLiteBidirectionalSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800a040:	4602      	mov	r2, r0
 800a042:	2300      	movs	r3, #0
 800a044:	6013      	str	r3, [r2, #0]
	return __p;
 800a046:	68fb      	ldr	r3, [r7, #12]
      }
 800a048:	4618      	mov	r0, r3
 800a04a:	3710      	adds	r7, #16
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}

0800a050 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI15TfLiteRNNParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800a050:	b590      	push	{r4, r7, lr}
 800a052:	b085      	sub	sp, #20
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
 800a058:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800a05e:	4618      	mov	r0, r3
 800a060:	f002 fdf7 	bl	800cc52 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI15TfLiteRNNParamsEEPT_v>
 800a064:	4604      	mov	r4, r0
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	681a      	ldr	r2, [r3, #0]
 800a06a:	f107 030c 	add.w	r3, r7, #12
 800a06e:	4611      	mov	r1, r2
 800a070:	4618      	mov	r0, r3
 800a072:	f7fc fd7a 	bl	8006b6a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800a076:	f107 030c 	add.w	r3, r7, #12
 800a07a:	461a      	mov	r2, r3
 800a07c:	4621      	mov	r1, r4
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f002 fe08 	bl	800cc94 <_ZNSt10unique_ptrI15TfLiteRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	3714      	adds	r7, #20
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd90      	pop	{r4, r7, pc}

0800a08c <_ZNSt10unique_ptrI15TfLiteRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b084      	sub	sp, #16
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	4618      	mov	r0, r3
 800a098:	f002 fe18 	bl	800cccc <_ZNSt15__uniq_ptr_implI15TfLiteRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800a09c:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d009      	beq.n	800a0ba <_ZNSt10unique_ptrI15TfLiteRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f002 fe1d 	bl	800cce6 <_ZNSt10unique_ptrI15TfLiteRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800a0ac:	4602      	mov	r2, r0
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	4619      	mov	r1, r3
 800a0b4:	4610      	mov	r0, r2
 800a0b6:	f7fc fd67 	bl	8006b88 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	601a      	str	r2, [r3, #0]
      }
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3710      	adds	r7, #16
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}

0800a0ca <_ZStneI15TfLiteRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800a0ca:	b580      	push	{r7, lr}
 800a0cc:	b082      	sub	sp, #8
 800a0ce:	af00      	add	r7, sp, #0
 800a0d0:	6078      	str	r0, [r7, #4]
 800a0d2:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f002 fe29 	bl	800cd2c <_ZNKSt10unique_ptrI15TfLiteRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3708      	adds	r7, #8
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}

0800a0e4 <_ZNKSt10unique_ptrI15TfLiteRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b082      	sub	sp, #8
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
	return get();
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f002 fe2e 	bl	800cd4e <_ZNKSt10unique_ptrI15TfLiteRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800a0f2:	4603      	mov	r3, r0
      }
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	3708      	adds	r7, #8
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}

0800a0fc <_ZNSt10unique_ptrI15TfLiteRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b084      	sub	sp, #16
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f002 fe22 	bl	800cd4e <_ZNKSt10unique_ptrI15TfLiteRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800a10a:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	4618      	mov	r0, r3
 800a110:	f002 fddc 	bl	800cccc <_ZNSt15__uniq_ptr_implI15TfLiteRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800a114:	4602      	mov	r2, r0
 800a116:	2300      	movs	r3, #0
 800a118:	6013      	str	r3, [r2, #0]
	return __p;
 800a11a:	68fb      	ldr	r3, [r7, #12]
      }
 800a11c:	4618      	mov	r0, r3
 800a11e:	3710      	adds	r7, #16
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}

0800a124 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI33TfLiteEmbeddingLookupSparseParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800a124:	b590      	push	{r4, r7, lr}
 800a126:	b085      	sub	sp, #20
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800a132:	4618      	mov	r0, r3
 800a134:	f002 fe18 	bl	800cd68 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI33TfLiteEmbeddingLookupSparseParamsEEPT_v>
 800a138:	4604      	mov	r4, r0
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	681a      	ldr	r2, [r3, #0]
 800a13e:	f107 030c 	add.w	r3, r7, #12
 800a142:	4611      	mov	r1, r2
 800a144:	4618      	mov	r0, r3
 800a146:	f7fc fd10 	bl	8006b6a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800a14a:	f107 030c 	add.w	r3, r7, #12
 800a14e:	461a      	mov	r2, r3
 800a150:	4621      	mov	r1, r4
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f002 fe29 	bl	800cdaa <_ZNSt10unique_ptrI33TfLiteEmbeddingLookupSparseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	3714      	adds	r7, #20
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd90      	pop	{r4, r7, pc}

0800a160 <_ZNSt10unique_ptrI33TfLiteEmbeddingLookupSparseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 800a160:	b580      	push	{r7, lr}
 800a162:	b084      	sub	sp, #16
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	4618      	mov	r0, r3
 800a16c:	f002 fe39 	bl	800cde2 <_ZNSt15__uniq_ptr_implI33TfLiteEmbeddingLookupSparseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800a170:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d009      	beq.n	800a18e <_ZNSt10unique_ptrI33TfLiteEmbeddingLookupSparseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f002 fe3e 	bl	800cdfc <_ZNSt10unique_ptrI33TfLiteEmbeddingLookupSparseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800a180:	4602      	mov	r2, r0
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4619      	mov	r1, r3
 800a188:	4610      	mov	r0, r2
 800a18a:	f7fc fcfd 	bl	8006b88 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	2200      	movs	r2, #0
 800a192:	601a      	str	r2, [r3, #0]
      }
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	4618      	mov	r0, r3
 800a198:	3710      	adds	r7, #16
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}

0800a19e <_ZStneI33TfLiteEmbeddingLookupSparseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800a19e:	b580      	push	{r7, lr}
 800a1a0:	b082      	sub	sp, #8
 800a1a2:	af00      	add	r7, sp, #0
 800a1a4:	6078      	str	r0, [r7, #4]
 800a1a6:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f002 fe4a 	bl	800ce42 <_ZNKSt10unique_ptrI33TfLiteEmbeddingLookupSparseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3708      	adds	r7, #8
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <_ZNKSt10unique_ptrI33TfLiteEmbeddingLookupSparseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b082      	sub	sp, #8
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
	return get();
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f002 fe4f 	bl	800ce64 <_ZNKSt10unique_ptrI33TfLiteEmbeddingLookupSparseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800a1c6:	4603      	mov	r3, r0
      }
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3708      	adds	r7, #8
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <_ZNSt10unique_ptrI33TfLiteEmbeddingLookupSparseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b084      	sub	sp, #16
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f002 fe43 	bl	800ce64 <_ZNKSt10unique_ptrI33TfLiteEmbeddingLookupSparseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800a1de:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f002 fdfd 	bl	800cde2 <_ZNSt15__uniq_ptr_implI33TfLiteEmbeddingLookupSparseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800a1e8:	4602      	mov	r2, r0
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	6013      	str	r3, [r2, #0]
	return __p;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
      }
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3710      	adds	r7, #16
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}

0800a1f8 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI26TfLiteFullyConnectedParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800a1f8:	b590      	push	{r4, r7, lr}
 800a1fa:	b085      	sub	sp, #20
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800a206:	4618      	mov	r0, r3
 800a208:	f002 fe39 	bl	800ce7e <_ZN6tflite20BuiltinDataAllocator11AllocatePODI26TfLiteFullyConnectedParamsEEPT_v>
 800a20c:	4604      	mov	r4, r0
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	681a      	ldr	r2, [r3, #0]
 800a212:	f107 030c 	add.w	r3, r7, #12
 800a216:	4611      	mov	r1, r2
 800a218:	4618      	mov	r0, r3
 800a21a:	f7fc fca6 	bl	8006b6a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800a21e:	f107 030c 	add.w	r3, r7, #12
 800a222:	461a      	mov	r2, r3
 800a224:	4621      	mov	r1, r4
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f002 fe4a 	bl	800cec0 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	3714      	adds	r7, #20
 800a230:	46bd      	mov	sp, r7
 800a232:	bd90      	pop	{r4, r7, pc}

0800a234 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 800a234:	b580      	push	{r7, lr}
 800a236:	b084      	sub	sp, #16
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	4618      	mov	r0, r3
 800a240:	f002 fe5a 	bl	800cef8 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800a244:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d009      	beq.n	800a262 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f002 fe5f 	bl	800cf12 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800a254:	4602      	mov	r2, r0
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4619      	mov	r1, r3
 800a25c:	4610      	mov	r0, r2
 800a25e:	f7fc fc93 	bl	8006b88 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	2200      	movs	r2, #0
 800a266:	601a      	str	r2, [r3, #0]
      }
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	4618      	mov	r0, r3
 800a26c:	3710      	adds	r7, #16
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}

0800a272 <_ZStneI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800a272:	b580      	push	{r7, lr}
 800a274:	b082      	sub	sp, #8
 800a276:	af00      	add	r7, sp, #0
 800a278:	6078      	str	r0, [r7, #4]
 800a27a:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f002 fe6b 	bl	800cf58 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800a282:	4603      	mov	r3, r0
 800a284:	4618      	mov	r0, r3
 800a286:	3708      	adds	r7, #8
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b082      	sub	sp, #8
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
	return get();
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f002 fe70 	bl	800cf7a <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800a29a:	4603      	mov	r3, r0
      }
 800a29c:	4618      	mov	r0, r3
 800a29e:	3708      	adds	r7, #8
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b084      	sub	sp, #16
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f002 fe64 	bl	800cf7a <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800a2b2:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f002 fe1e 	bl	800cef8 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800a2bc:	4602      	mov	r2, r0
 800a2be:	2300      	movs	r3, #0
 800a2c0:	6013      	str	r3, [r2, #0]
	return __p;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
      }
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3710      	adds	r7, #16
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteSoftmaxParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800a2cc:	b590      	push	{r4, r7, lr}
 800a2ce:	b085      	sub	sp, #20
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f002 fe5a 	bl	800cf94 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteSoftmaxParamsEEPT_v>
 800a2e0:	4604      	mov	r4, r0
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	681a      	ldr	r2, [r3, #0]
 800a2e6:	f107 030c 	add.w	r3, r7, #12
 800a2ea:	4611      	mov	r1, r2
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f7fc fc3c 	bl	8006b6a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800a2f2:	f107 030c 	add.w	r3, r7, #12
 800a2f6:	461a      	mov	r2, r3
 800a2f8:	4621      	mov	r1, r4
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f002 fe6b 	bl	800cfd6 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	3714      	adds	r7, #20
 800a304:	46bd      	mov	sp, r7
 800a306:	bd90      	pop	{r4, r7, pc}

0800a308 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 800a308:	b580      	push	{r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	4618      	mov	r0, r3
 800a314:	f002 fe7b 	bl	800d00e <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800a318:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d009      	beq.n	800a336 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f002 fe80 	bl	800d028 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800a328:	4602      	mov	r2, r0
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	4619      	mov	r1, r3
 800a330:	4610      	mov	r0, r2
 800a332:	f7fc fc29 	bl	8006b88 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	2200      	movs	r2, #0
 800a33a:	601a      	str	r2, [r3, #0]
      }
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	4618      	mov	r0, r3
 800a340:	3710      	adds	r7, #16
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}

0800a346 <_ZStneI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800a346:	b580      	push	{r7, lr}
 800a348:	b082      	sub	sp, #8
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	6078      	str	r0, [r7, #4]
 800a34e:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f002 fe8c 	bl	800d06e <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800a356:	4603      	mov	r3, r0
 800a358:	4618      	mov	r0, r3
 800a35a:	3708      	adds	r7, #8
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}

0800a360 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800a360:	b580      	push	{r7, lr}
 800a362:	b082      	sub	sp, #8
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
	return get();
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f002 fe91 	bl	800d090 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800a36e:	4603      	mov	r3, r0
      }
 800a370:	4618      	mov	r0, r3
 800a372:	3708      	adds	r7, #8
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800a378:	b580      	push	{r7, lr}
 800a37a:	b084      	sub	sp, #16
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f002 fe85 	bl	800d090 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800a386:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	4618      	mov	r0, r3
 800a38c:	f002 fe3f 	bl	800d00e <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800a390:	4602      	mov	r2, r0
 800a392:	2300      	movs	r3, #0
 800a394:	6013      	str	r3, [r2, #0]
	return __p;
 800a396:	68fb      	ldr	r3, [r7, #12]
      }
 800a398:	4618      	mov	r0, r3
 800a39a:	3710      	adds	r7, #16
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}

0800a3a0 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI25TfLiteConcatenationParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800a3a0:	b590      	push	{r4, r7, lr}
 800a3a2:	b085      	sub	sp, #20
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f002 fe7b 	bl	800d0aa <_ZN6tflite20BuiltinDataAllocator11AllocatePODI25TfLiteConcatenationParamsEEPT_v>
 800a3b4:	4604      	mov	r4, r0
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	681a      	ldr	r2, [r3, #0]
 800a3ba:	f107 030c 	add.w	r3, r7, #12
 800a3be:	4611      	mov	r1, r2
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f7fc fbd2 	bl	8006b6a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800a3c6:	f107 030c 	add.w	r3, r7, #12
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	4621      	mov	r1, r4
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f002 fe8c 	bl	800d0ec <_ZNSt10unique_ptrI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	3714      	adds	r7, #20
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd90      	pop	{r4, r7, pc}

0800a3dc <_ZNSt10unique_ptrI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b084      	sub	sp, #16
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f002 fe9c 	bl	800d124 <_ZNSt15__uniq_ptr_implI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800a3ec:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d009      	beq.n	800a40a <_ZNSt10unique_ptrI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f002 fea1 	bl	800d13e <_ZNSt10unique_ptrI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800a3fc:	4602      	mov	r2, r0
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	4619      	mov	r1, r3
 800a404:	4610      	mov	r0, r2
 800a406:	f7fc fbbf 	bl	8006b88 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2200      	movs	r2, #0
 800a40e:	601a      	str	r2, [r3, #0]
      }
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	4618      	mov	r0, r3
 800a414:	3710      	adds	r7, #16
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}

0800a41a <_ZStneI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800a41a:	b580      	push	{r7, lr}
 800a41c:	b082      	sub	sp, #8
 800a41e:	af00      	add	r7, sp, #0
 800a420:	6078      	str	r0, [r7, #4]
 800a422:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f002 fead 	bl	800d184 <_ZNKSt10unique_ptrI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800a42a:	4603      	mov	r3, r0
 800a42c:	4618      	mov	r0, r3
 800a42e:	3708      	adds	r7, #8
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}

0800a434 <_ZNKSt10unique_ptrI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800a434:	b580      	push	{r7, lr}
 800a436:	b082      	sub	sp, #8
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
	return get();
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f002 feb2 	bl	800d1a6 <_ZNKSt10unique_ptrI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800a442:	4603      	mov	r3, r0
      }
 800a444:	4618      	mov	r0, r3
 800a446:	3708      	adds	r7, #8
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <_ZNSt10unique_ptrI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b084      	sub	sp, #16
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f002 fea6 	bl	800d1a6 <_ZNKSt10unique_ptrI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800a45a:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	4618      	mov	r0, r3
 800a460:	f002 fe60 	bl	800d124 <_ZNSt15__uniq_ptr_implI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800a464:	4602      	mov	r2, r0
 800a466:	2300      	movs	r3, #0
 800a468:	6013      	str	r3, [r2, #0]
	return __p;
 800a46a:	68fb      	ldr	r3, [r7, #12]
      }
 800a46c:	4618      	mov	r0, r3
 800a46e:	3710      	adds	r7, #16
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}

0800a474 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI15TfLiteMulParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800a474:	b590      	push	{r4, r7, lr}
 800a476:	b085      	sub	sp, #20
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800a482:	4618      	mov	r0, r3
 800a484:	f002 fe9c 	bl	800d1c0 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI15TfLiteMulParamsEEPT_v>
 800a488:	4604      	mov	r4, r0
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	681a      	ldr	r2, [r3, #0]
 800a48e:	f107 030c 	add.w	r3, r7, #12
 800a492:	4611      	mov	r1, r2
 800a494:	4618      	mov	r0, r3
 800a496:	f7fc fb68 	bl	8006b6a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800a49a:	f107 030c 	add.w	r3, r7, #12
 800a49e:	461a      	mov	r2, r3
 800a4a0:	4621      	mov	r1, r4
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f002 fead 	bl	800d202 <_ZNSt10unique_ptrI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	3714      	adds	r7, #20
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd90      	pop	{r4, r7, pc}

0800a4b0 <_ZNSt10unique_ptrI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b084      	sub	sp, #16
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f002 febd 	bl	800d23a <_ZNSt15__uniq_ptr_implI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800a4c0:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d009      	beq.n	800a4de <_ZNSt10unique_ptrI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f002 fec2 	bl	800d254 <_ZNSt10unique_ptrI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800a4d0:	4602      	mov	r2, r0
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	4619      	mov	r1, r3
 800a4d8:	4610      	mov	r0, r2
 800a4da:	f7fc fb55 	bl	8006b88 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	601a      	str	r2, [r3, #0]
      }
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	3710      	adds	r7, #16
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}

0800a4ee <_ZStneI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800a4ee:	b580      	push	{r7, lr}
 800a4f0:	b082      	sub	sp, #8
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	6078      	str	r0, [r7, #4]
 800a4f6:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f002 fece 	bl	800d29a <_ZNKSt10unique_ptrI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800a4fe:	4603      	mov	r3, r0
 800a500:	4618      	mov	r0, r3
 800a502:	3708      	adds	r7, #8
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}

0800a508 <_ZNKSt10unique_ptrI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800a508:	b580      	push	{r7, lr}
 800a50a:	b082      	sub	sp, #8
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
	return get();
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f002 fed3 	bl	800d2bc <_ZNKSt10unique_ptrI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800a516:	4603      	mov	r3, r0
      }
 800a518:	4618      	mov	r0, r3
 800a51a:	3708      	adds	r7, #8
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}

0800a520 <_ZNSt10unique_ptrI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800a520:	b580      	push	{r7, lr}
 800a522:	b084      	sub	sp, #16
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f002 fec7 	bl	800d2bc <_ZNKSt10unique_ptrI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800a52e:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	4618      	mov	r0, r3
 800a534:	f002 fe81 	bl	800d23a <_ZNSt15__uniq_ptr_implI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800a538:	4602      	mov	r2, r0
 800a53a:	2300      	movs	r3, #0
 800a53c:	6013      	str	r3, [r2, #0]
	return __p;
 800a53e:	68fb      	ldr	r3, [r7, #12]
      }
 800a540:	4618      	mov	r0, r3
 800a542:	3710      	adds	r7, #16
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}

0800a548 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI15TfLiteAddParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800a548:	b590      	push	{r4, r7, lr}
 800a54a:	b085      	sub	sp, #20
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
 800a550:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800a556:	4618      	mov	r0, r3
 800a558:	f002 febd 	bl	800d2d6 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI15TfLiteAddParamsEEPT_v>
 800a55c:	4604      	mov	r4, r0
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	681a      	ldr	r2, [r3, #0]
 800a562:	f107 030c 	add.w	r3, r7, #12
 800a566:	4611      	mov	r1, r2
 800a568:	4618      	mov	r0, r3
 800a56a:	f7fc fafe 	bl	8006b6a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800a56e:	f107 030c 	add.w	r3, r7, #12
 800a572:	461a      	mov	r2, r3
 800a574:	4621      	mov	r1, r4
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f002 fece 	bl	800d318 <_ZNSt10unique_ptrI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	3714      	adds	r7, #20
 800a580:	46bd      	mov	sp, r7
 800a582:	bd90      	pop	{r4, r7, pc}

0800a584 <_ZNSt10unique_ptrI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 800a584:	b580      	push	{r7, lr}
 800a586:	b084      	sub	sp, #16
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	4618      	mov	r0, r3
 800a590:	f002 fede 	bl	800d350 <_ZNSt15__uniq_ptr_implI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800a594:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d009      	beq.n	800a5b2 <_ZNSt10unique_ptrI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f002 fee3 	bl	800d36a <_ZNSt10unique_ptrI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800a5a4:	4602      	mov	r2, r0
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4619      	mov	r1, r3
 800a5ac:	4610      	mov	r0, r2
 800a5ae:	f7fc faeb 	bl	8006b88 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	601a      	str	r2, [r3, #0]
      }
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3710      	adds	r7, #16
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}

0800a5c2 <_ZStneI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800a5c2:	b580      	push	{r7, lr}
 800a5c4:	b082      	sub	sp, #8
 800a5c6:	af00      	add	r7, sp, #0
 800a5c8:	6078      	str	r0, [r7, #4]
 800a5ca:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f002 feef 	bl	800d3b0 <_ZNKSt10unique_ptrI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3708      	adds	r7, #8
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <_ZNKSt10unique_ptrI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b082      	sub	sp, #8
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
	return get();
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f002 fef4 	bl	800d3d2 <_ZNKSt10unique_ptrI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800a5ea:	4603      	mov	r3, r0
      }
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	3708      	adds	r7, #8
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}

0800a5f4 <_ZNSt10unique_ptrI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b084      	sub	sp, #16
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f002 fee8 	bl	800d3d2 <_ZNKSt10unique_ptrI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800a602:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	4618      	mov	r0, r3
 800a608:	f002 fea2 	bl	800d350 <_ZNSt15__uniq_ptr_implI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800a60c:	4602      	mov	r2, r0
 800a60e:	2300      	movs	r3, #0
 800a610:	6013      	str	r3, [r2, #0]
	return __p;
 800a612:	68fb      	ldr	r3, [r7, #12]
      }
 800a614:	4618      	mov	r0, r3
 800a616:	3710      	adds	r7, #16
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}

0800a61c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI15TfLiteDivParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800a61c:	b590      	push	{r4, r7, lr}
 800a61e:	b085      	sub	sp, #20
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800a62a:	4618      	mov	r0, r3
 800a62c:	f002 fede 	bl	800d3ec <_ZN6tflite20BuiltinDataAllocator11AllocatePODI15TfLiteDivParamsEEPT_v>
 800a630:	4604      	mov	r4, r0
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	681a      	ldr	r2, [r3, #0]
 800a636:	f107 030c 	add.w	r3, r7, #12
 800a63a:	4611      	mov	r1, r2
 800a63c:	4618      	mov	r0, r3
 800a63e:	f7fc fa94 	bl	8006b6a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800a642:	f107 030c 	add.w	r3, r7, #12
 800a646:	461a      	mov	r2, r3
 800a648:	4621      	mov	r1, r4
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f002 feef 	bl	800d42e <_ZNSt10unique_ptrI15TfLiteDivParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	3714      	adds	r7, #20
 800a654:	46bd      	mov	sp, r7
 800a656:	bd90      	pop	{r4, r7, pc}

0800a658 <_ZNSt10unique_ptrI15TfLiteDivParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 800a658:	b580      	push	{r7, lr}
 800a65a:	b084      	sub	sp, #16
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	4618      	mov	r0, r3
 800a664:	f002 feff 	bl	800d466 <_ZNSt15__uniq_ptr_implI15TfLiteDivParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800a668:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d009      	beq.n	800a686 <_ZNSt10unique_ptrI15TfLiteDivParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f002 ff04 	bl	800d480 <_ZNSt10unique_ptrI15TfLiteDivParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800a678:	4602      	mov	r2, r0
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4619      	mov	r1, r3
 800a680:	4610      	mov	r0, r2
 800a682:	f7fc fa81 	bl	8006b88 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	2200      	movs	r2, #0
 800a68a:	601a      	str	r2, [r3, #0]
      }
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	4618      	mov	r0, r3
 800a690:	3710      	adds	r7, #16
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}

0800a696 <_ZStneI15TfLiteDivParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800a696:	b580      	push	{r7, lr}
 800a698:	b082      	sub	sp, #8
 800a69a:	af00      	add	r7, sp, #0
 800a69c:	6078      	str	r0, [r7, #4]
 800a69e:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f002 ff10 	bl	800d4c6 <_ZNKSt10unique_ptrI15TfLiteDivParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3708      	adds	r7, #8
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <_ZNKSt10unique_ptrI15TfLiteDivParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b082      	sub	sp, #8
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
	return get();
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f002 ff15 	bl	800d4e8 <_ZNKSt10unique_ptrI15TfLiteDivParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800a6be:	4603      	mov	r3, r0
      }
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3708      	adds	r7, #8
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}

0800a6c8 <_ZNSt10unique_ptrI15TfLiteDivParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b084      	sub	sp, #16
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f002 ff09 	bl	800d4e8 <_ZNKSt10unique_ptrI15TfLiteDivParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800a6d6:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f002 fec3 	bl	800d466 <_ZNSt15__uniq_ptr_implI15TfLiteDivParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800a6e0:	4602      	mov	r2, r0
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	6013      	str	r3, [r2, #0]
	return __p;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
      }
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3710      	adds	r7, #16
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI15TfLiteSubParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800a6f0:	b590      	push	{r4, r7, lr}
 800a6f2:	b085      	sub	sp, #20
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800a6fe:	4618      	mov	r0, r3
 800a700:	f002 feff 	bl	800d502 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI15TfLiteSubParamsEEPT_v>
 800a704:	4604      	mov	r4, r0
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	681a      	ldr	r2, [r3, #0]
 800a70a:	f107 030c 	add.w	r3, r7, #12
 800a70e:	4611      	mov	r1, r2
 800a710:	4618      	mov	r0, r3
 800a712:	f7fc fa2a 	bl	8006b6a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800a716:	f107 030c 	add.w	r3, r7, #12
 800a71a:	461a      	mov	r2, r3
 800a71c:	4621      	mov	r1, r4
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f002 ff10 	bl	800d544 <_ZNSt10unique_ptrI15TfLiteSubParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	3714      	adds	r7, #20
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd90      	pop	{r4, r7, pc}

0800a72c <_ZNSt10unique_ptrI15TfLiteSubParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b084      	sub	sp, #16
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	4618      	mov	r0, r3
 800a738:	f002 ff20 	bl	800d57c <_ZNSt15__uniq_ptr_implI15TfLiteSubParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800a73c:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d009      	beq.n	800a75a <_ZNSt10unique_ptrI15TfLiteSubParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f002 ff25 	bl	800d596 <_ZNSt10unique_ptrI15TfLiteSubParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800a74c:	4602      	mov	r2, r0
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	4619      	mov	r1, r3
 800a754:	4610      	mov	r0, r2
 800a756:	f7fc fa17 	bl	8006b88 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	2200      	movs	r2, #0
 800a75e:	601a      	str	r2, [r3, #0]
      }
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	4618      	mov	r0, r3
 800a764:	3710      	adds	r7, #16
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}

0800a76a <_ZStneI15TfLiteSubParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800a76a:	b580      	push	{r7, lr}
 800a76c:	b082      	sub	sp, #8
 800a76e:	af00      	add	r7, sp, #0
 800a770:	6078      	str	r0, [r7, #4]
 800a772:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f002 ff31 	bl	800d5dc <_ZNKSt10unique_ptrI15TfLiteSubParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800a77a:	4603      	mov	r3, r0
 800a77c:	4618      	mov	r0, r3
 800a77e:	3708      	adds	r7, #8
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}

0800a784 <_ZNKSt10unique_ptrI15TfLiteSubParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800a784:	b580      	push	{r7, lr}
 800a786:	b082      	sub	sp, #8
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
	return get();
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f002 ff36 	bl	800d5fe <_ZNKSt10unique_ptrI15TfLiteSubParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800a792:	4603      	mov	r3, r0
      }
 800a794:	4618      	mov	r0, r3
 800a796:	3708      	adds	r7, #8
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}

0800a79c <_ZNSt10unique_ptrI15TfLiteSubParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b084      	sub	sp, #16
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f002 ff2a 	bl	800d5fe <_ZNKSt10unique_ptrI15TfLiteSubParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800a7aa:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f002 fee4 	bl	800d57c <_ZNSt15__uniq_ptr_implI15TfLiteSubParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800a7b4:	4602      	mov	r2, r0
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	6013      	str	r3, [r2, #0]
	return __p;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
      }
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3710      	adds	r7, #16
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}

0800a7c4 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI18TfLiteL2NormParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800a7c4:	b590      	push	{r4, r7, lr}
 800a7c6:	b085      	sub	sp, #20
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f002 ff20 	bl	800d618 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI18TfLiteL2NormParamsEEPT_v>
 800a7d8:	4604      	mov	r4, r0
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	681a      	ldr	r2, [r3, #0]
 800a7de:	f107 030c 	add.w	r3, r7, #12
 800a7e2:	4611      	mov	r1, r2
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f7fc f9c0 	bl	8006b6a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800a7ea:	f107 030c 	add.w	r3, r7, #12
 800a7ee:	461a      	mov	r2, r3
 800a7f0:	4621      	mov	r1, r4
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f002 ff31 	bl	800d65a <_ZNSt10unique_ptrI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	3714      	adds	r7, #20
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd90      	pop	{r4, r7, pc}

0800a800 <_ZNSt10unique_ptrI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 800a800:	b580      	push	{r7, lr}
 800a802:	b084      	sub	sp, #16
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	4618      	mov	r0, r3
 800a80c:	f002 ff41 	bl	800d692 <_ZNSt15__uniq_ptr_implI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800a810:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d009      	beq.n	800a82e <_ZNSt10unique_ptrI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f002 ff46 	bl	800d6ac <_ZNSt10unique_ptrI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800a820:	4602      	mov	r2, r0
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	4619      	mov	r1, r3
 800a828:	4610      	mov	r0, r2
 800a82a:	f7fc f9ad 	bl	8006b88 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	2200      	movs	r2, #0
 800a832:	601a      	str	r2, [r3, #0]
      }
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	4618      	mov	r0, r3
 800a838:	3710      	adds	r7, #16
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}

0800a83e <_ZStneI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800a83e:	b580      	push	{r7, lr}
 800a840:	b082      	sub	sp, #8
 800a842:	af00      	add	r7, sp, #0
 800a844:	6078      	str	r0, [r7, #4]
 800a846:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f002 ff52 	bl	800d6f2 <_ZNKSt10unique_ptrI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800a84e:	4603      	mov	r3, r0
 800a850:	4618      	mov	r0, r3
 800a852:	3708      	adds	r7, #8
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}

0800a858 <_ZNKSt10unique_ptrI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800a858:	b580      	push	{r7, lr}
 800a85a:	b082      	sub	sp, #8
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
	return get();
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f002 ff57 	bl	800d714 <_ZNKSt10unique_ptrI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800a866:	4603      	mov	r3, r0
      }
 800a868:	4618      	mov	r0, r3
 800a86a:	3708      	adds	r7, #8
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <_ZNSt10unique_ptrI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800a870:	b580      	push	{r7, lr}
 800a872:	b084      	sub	sp, #16
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f002 ff4b 	bl	800d714 <_ZNKSt10unique_ptrI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800a87e:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	4618      	mov	r0, r3
 800a884:	f002 ff05 	bl	800d692 <_ZNSt15__uniq_ptr_implI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800a888:	4602      	mov	r2, r0
 800a88a:	2300      	movs	r3, #0
 800a88c:	6013      	str	r3, [r2, #0]
	return __p;
 800a88e:	68fb      	ldr	r3, [r7, #12]
      }
 800a890:	4618      	mov	r0, r3
 800a892:	3710      	adds	r7, #16
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}

0800a898 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI29TfLiteLocalResponseNormParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800a898:	b590      	push	{r4, r7, lr}
 800a89a:	b085      	sub	sp, #20
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
 800a8a0:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f002 ff41 	bl	800d72e <_ZN6tflite20BuiltinDataAllocator11AllocatePODI29TfLiteLocalResponseNormParamsEEPT_v>
 800a8ac:	4604      	mov	r4, r0
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	681a      	ldr	r2, [r3, #0]
 800a8b2:	f107 030c 	add.w	r3, r7, #12
 800a8b6:	4611      	mov	r1, r2
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f7fc f956 	bl	8006b6a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800a8be:	f107 030c 	add.w	r3, r7, #12
 800a8c2:	461a      	mov	r2, r3
 800a8c4:	4621      	mov	r1, r4
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f002 ff52 	bl	800d770 <_ZNSt10unique_ptrI29TfLiteLocalResponseNormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	3714      	adds	r7, #20
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd90      	pop	{r4, r7, pc}

0800a8d4 <_ZNSt10unique_ptrI29TfLiteLocalResponseNormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b084      	sub	sp, #16
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f002 ff62 	bl	800d7a8 <_ZNSt15__uniq_ptr_implI29TfLiteLocalResponseNormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800a8e4:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d009      	beq.n	800a902 <_ZNSt10unique_ptrI29TfLiteLocalResponseNormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f002 ff67 	bl	800d7c2 <_ZNSt10unique_ptrI29TfLiteLocalResponseNormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800a8f4:	4602      	mov	r2, r0
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	4619      	mov	r1, r3
 800a8fc:	4610      	mov	r0, r2
 800a8fe:	f7fc f943 	bl	8006b88 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	2200      	movs	r2, #0
 800a906:	601a      	str	r2, [r3, #0]
      }
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	4618      	mov	r0, r3
 800a90c:	3710      	adds	r7, #16
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}

0800a912 <_ZStneI29TfLiteLocalResponseNormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800a912:	b580      	push	{r7, lr}
 800a914:	b082      	sub	sp, #8
 800a916:	af00      	add	r7, sp, #0
 800a918:	6078      	str	r0, [r7, #4]
 800a91a:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f002 ff73 	bl	800d808 <_ZNKSt10unique_ptrI29TfLiteLocalResponseNormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800a922:	4603      	mov	r3, r0
 800a924:	4618      	mov	r0, r3
 800a926:	3708      	adds	r7, #8
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}

0800a92c <_ZNKSt10unique_ptrI29TfLiteLocalResponseNormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b082      	sub	sp, #8
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
	return get();
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f002 ff78 	bl	800d82a <_ZNKSt10unique_ptrI29TfLiteLocalResponseNormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800a93a:	4603      	mov	r3, r0
      }
 800a93c:	4618      	mov	r0, r3
 800a93e:	3708      	adds	r7, #8
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}

0800a944 <_ZNSt10unique_ptrI29TfLiteLocalResponseNormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800a944:	b580      	push	{r7, lr}
 800a946:	b084      	sub	sp, #16
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f002 ff6c 	bl	800d82a <_ZNKSt10unique_ptrI29TfLiteLocalResponseNormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800a952:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	4618      	mov	r0, r3
 800a958:	f002 ff26 	bl	800d7a8 <_ZNSt15__uniq_ptr_implI29TfLiteLocalResponseNormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800a95c:	4602      	mov	r2, r0
 800a95e:	2300      	movs	r3, #0
 800a960:	6013      	str	r3, [r2, #0]
	return __p;
 800a962:	68fb      	ldr	r3, [r7, #12]
      }
 800a964:	4618      	mov	r0, r3
 800a966:	3710      	adds	r7, #16
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}

0800a96c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI16TfLiteLSTMParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800a96c:	b590      	push	{r4, r7, lr}
 800a96e:	b085      	sub	sp, #20
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
 800a974:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800a97a:	4618      	mov	r0, r3
 800a97c:	f002 ff62 	bl	800d844 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI16TfLiteLSTMParamsEEPT_v>
 800a980:	4604      	mov	r4, r0
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	681a      	ldr	r2, [r3, #0]
 800a986:	f107 030c 	add.w	r3, r7, #12
 800a98a:	4611      	mov	r1, r2
 800a98c:	4618      	mov	r0, r3
 800a98e:	f7fc f8ec 	bl	8006b6a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800a992:	f107 030c 	add.w	r3, r7, #12
 800a996:	461a      	mov	r2, r3
 800a998:	4621      	mov	r1, r4
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f002 ff73 	bl	800d886 <_ZNSt10unique_ptrI16TfLiteLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	3714      	adds	r7, #20
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd90      	pop	{r4, r7, pc}

0800a9a8 <_ZNSt10unique_ptrI16TfLiteLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b084      	sub	sp, #16
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f002 ff83 	bl	800d8be <_ZNSt15__uniq_ptr_implI16TfLiteLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800a9b8:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d009      	beq.n	800a9d6 <_ZNSt10unique_ptrI16TfLiteLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f002 ff88 	bl	800d8d8 <_ZNSt10unique_ptrI16TfLiteLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800a9c8:	4602      	mov	r2, r0
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	4610      	mov	r0, r2
 800a9d2:	f7fc f8d9 	bl	8006b88 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	2200      	movs	r2, #0
 800a9da:	601a      	str	r2, [r3, #0]
      }
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3710      	adds	r7, #16
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}

0800a9e6 <_ZStneI16TfLiteLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800a9e6:	b580      	push	{r7, lr}
 800a9e8:	b082      	sub	sp, #8
 800a9ea:	af00      	add	r7, sp, #0
 800a9ec:	6078      	str	r0, [r7, #4]
 800a9ee:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f002 ff94 	bl	800d91e <_ZNKSt10unique_ptrI16TfLiteLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	3708      	adds	r7, #8
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}

0800aa00 <_ZNKSt10unique_ptrI16TfLiteLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b082      	sub	sp, #8
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
	return get();
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f002 ff99 	bl	800d940 <_ZNKSt10unique_ptrI16TfLiteLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800aa0e:	4603      	mov	r3, r0
      }
 800aa10:	4618      	mov	r0, r3
 800aa12:	3708      	adds	r7, #8
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}

0800aa18 <_ZNSt10unique_ptrI16TfLiteLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b084      	sub	sp, #16
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f002 ff8d 	bl	800d940 <_ZNKSt10unique_ptrI16TfLiteLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800aa26:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f002 ff47 	bl	800d8be <_ZNSt15__uniq_ptr_implI16TfLiteLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800aa30:	4602      	mov	r2, r0
 800aa32:	2300      	movs	r3, #0
 800aa34:	6013      	str	r3, [r2, #0]
	return __p;
 800aa36:	68fb      	ldr	r3, [r7, #12]
      }
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3710      	adds	r7, #16
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}

0800aa40 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI38TfLiteUnidirectionalSequenceLSTMParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800aa40:	b590      	push	{r4, r7, lr}
 800aa42:	b085      	sub	sp, #20
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
 800aa48:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f002 ff83 	bl	800d95a <_ZN6tflite20BuiltinDataAllocator11AllocatePODI38TfLiteUnidirectionalSequenceLSTMParamsEEPT_v>
 800aa54:	4604      	mov	r4, r0
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	681a      	ldr	r2, [r3, #0]
 800aa5a:	f107 030c 	add.w	r3, r7, #12
 800aa5e:	4611      	mov	r1, r2
 800aa60:	4618      	mov	r0, r3
 800aa62:	f7fc f882 	bl	8006b6a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800aa66:	f107 030c 	add.w	r3, r7, #12
 800aa6a:	461a      	mov	r2, r3
 800aa6c:	4621      	mov	r1, r4
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f002 ff94 	bl	800d99c <_ZNSt10unique_ptrI38TfLiteUnidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	3714      	adds	r7, #20
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd90      	pop	{r4, r7, pc}

0800aa7c <_ZNSt10unique_ptrI38TfLiteUnidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b084      	sub	sp, #16
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	4618      	mov	r0, r3
 800aa88:	f002 ffa4 	bl	800d9d4 <_ZNSt15__uniq_ptr_implI38TfLiteUnidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800aa8c:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d009      	beq.n	800aaaa <_ZNSt10unique_ptrI38TfLiteUnidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f002 ffa9 	bl	800d9ee <_ZNSt10unique_ptrI38TfLiteUnidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800aa9c:	4602      	mov	r2, r0
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	4619      	mov	r1, r3
 800aaa4:	4610      	mov	r0, r2
 800aaa6:	f7fc f86f 	bl	8006b88 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	2200      	movs	r2, #0
 800aaae:	601a      	str	r2, [r3, #0]
      }
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	4618      	mov	r0, r3
 800aab4:	3710      	adds	r7, #16
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}

0800aaba <_ZStneI38TfLiteUnidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800aaba:	b580      	push	{r7, lr}
 800aabc:	b082      	sub	sp, #8
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	6078      	str	r0, [r7, #4]
 800aac2:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f002 ffb5 	bl	800da34 <_ZNKSt10unique_ptrI38TfLiteUnidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800aaca:	4603      	mov	r3, r0
 800aacc:	4618      	mov	r0, r3
 800aace:	3708      	adds	r7, #8
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}

0800aad4 <_ZNKSt10unique_ptrI38TfLiteUnidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b082      	sub	sp, #8
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
	return get();
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f002 ffba 	bl	800da56 <_ZNKSt10unique_ptrI38TfLiteUnidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800aae2:	4603      	mov	r3, r0
      }
 800aae4:	4618      	mov	r0, r3
 800aae6:	3708      	adds	r7, #8
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}

0800aaec <_ZNSt10unique_ptrI38TfLiteUnidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b084      	sub	sp, #16
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f002 ffae 	bl	800da56 <_ZNKSt10unique_ptrI38TfLiteUnidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800aafa:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	4618      	mov	r0, r3
 800ab00:	f002 ff68 	bl	800d9d4 <_ZNSt15__uniq_ptr_implI38TfLiteUnidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800ab04:	4602      	mov	r2, r0
 800ab06:	2300      	movs	r3, #0
 800ab08:	6013      	str	r3, [r2, #0]
	return __p;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
      }
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3710      	adds	r7, #16
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}

0800ab14 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI37TfLiteBidirectionalSequenceLSTMParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800ab14:	b590      	push	{r4, r7, lr}
 800ab16:	b085      	sub	sp, #20
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800ab22:	4618      	mov	r0, r3
 800ab24:	f002 ffa4 	bl	800da70 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI37TfLiteBidirectionalSequenceLSTMParamsEEPT_v>
 800ab28:	4604      	mov	r4, r0
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	681a      	ldr	r2, [r3, #0]
 800ab2e:	f107 030c 	add.w	r3, r7, #12
 800ab32:	4611      	mov	r1, r2
 800ab34:	4618      	mov	r0, r3
 800ab36:	f7fc f818 	bl	8006b6a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800ab3a:	f107 030c 	add.w	r3, r7, #12
 800ab3e:	461a      	mov	r2, r3
 800ab40:	4621      	mov	r1, r4
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f002 ffb5 	bl	800dab2 <_ZNSt10unique_ptrI37TfLiteBidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	3714      	adds	r7, #20
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd90      	pop	{r4, r7, pc}

0800ab50 <_ZNSt10unique_ptrI37TfLiteBidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b084      	sub	sp, #16
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f002 ffc5 	bl	800daea <_ZNSt15__uniq_ptr_implI37TfLiteBidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800ab60:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d009      	beq.n	800ab7e <_ZNSt10unique_ptrI37TfLiteBidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f002 ffca 	bl	800db04 <_ZNSt10unique_ptrI37TfLiteBidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800ab70:	4602      	mov	r2, r0
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	4619      	mov	r1, r3
 800ab78:	4610      	mov	r0, r2
 800ab7a:	f7fc f805 	bl	8006b88 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	2200      	movs	r2, #0
 800ab82:	601a      	str	r2, [r3, #0]
      }
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	4618      	mov	r0, r3
 800ab88:	3710      	adds	r7, #16
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}

0800ab8e <_ZStneI37TfLiteBidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800ab8e:	b580      	push	{r7, lr}
 800ab90:	b082      	sub	sp, #8
 800ab92:	af00      	add	r7, sp, #0
 800ab94:	6078      	str	r0, [r7, #4]
 800ab96:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f002 ffd6 	bl	800db4a <_ZNKSt10unique_ptrI37TfLiteBidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	4618      	mov	r0, r3
 800aba2:	3708      	adds	r7, #8
 800aba4:	46bd      	mov	sp, r7
 800aba6:	bd80      	pop	{r7, pc}

0800aba8 <_ZNKSt10unique_ptrI37TfLiteBidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b082      	sub	sp, #8
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
	return get();
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f002 ffdb 	bl	800db6c <_ZNKSt10unique_ptrI37TfLiteBidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800abb6:	4603      	mov	r3, r0
      }
 800abb8:	4618      	mov	r0, r3
 800abba:	3708      	adds	r7, #8
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <_ZNSt10unique_ptrI37TfLiteBidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b084      	sub	sp, #16
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f002 ffcf 	bl	800db6c <_ZNKSt10unique_ptrI37TfLiteBidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800abce:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	4618      	mov	r0, r3
 800abd4:	f002 ff89 	bl	800daea <_ZNSt15__uniq_ptr_implI37TfLiteBidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800abd8:	4602      	mov	r2, r0
 800abda:	2300      	movs	r3, #0
 800abdc:	6013      	str	r3, [r2, #0]
	return __p;
 800abde:	68fb      	ldr	r3, [r7, #12]
      }
 800abe0:	4618      	mov	r0, r3
 800abe2:	3710      	adds	r7, #16
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}

0800abe8 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI26TfLiteResizeBilinearParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800abe8:	b590      	push	{r4, r7, lr}
 800abea:	b085      	sub	sp, #20
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
 800abf0:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800abf6:	4618      	mov	r0, r3
 800abf8:	f002 ffc5 	bl	800db86 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI26TfLiteResizeBilinearParamsEEPT_v>
 800abfc:	4604      	mov	r4, r0
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	681a      	ldr	r2, [r3, #0]
 800ac02:	f107 030c 	add.w	r3, r7, #12
 800ac06:	4611      	mov	r1, r2
 800ac08:	4618      	mov	r0, r3
 800ac0a:	f7fb ffae 	bl	8006b6a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800ac0e:	f107 030c 	add.w	r3, r7, #12
 800ac12:	461a      	mov	r2, r3
 800ac14:	4621      	mov	r1, r4
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f002 ffd6 	bl	800dbc8 <_ZNSt10unique_ptrI26TfLiteResizeBilinearParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	3714      	adds	r7, #20
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd90      	pop	{r4, r7, pc}

0800ac24 <_ZNSt10unique_ptrI26TfLiteResizeBilinearParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b084      	sub	sp, #16
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f002 ffe6 	bl	800dc00 <_ZNSt15__uniq_ptr_implI26TfLiteResizeBilinearParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800ac34:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d009      	beq.n	800ac52 <_ZNSt10unique_ptrI26TfLiteResizeBilinearParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f002 ffeb 	bl	800dc1a <_ZNSt10unique_ptrI26TfLiteResizeBilinearParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800ac44:	4602      	mov	r2, r0
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	4619      	mov	r1, r3
 800ac4c:	4610      	mov	r0, r2
 800ac4e:	f7fb ff9b 	bl	8006b88 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	2200      	movs	r2, #0
 800ac56:	601a      	str	r2, [r3, #0]
      }
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3710      	adds	r7, #16
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}

0800ac62 <_ZStneI26TfLiteResizeBilinearParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800ac62:	b580      	push	{r7, lr}
 800ac64:	b082      	sub	sp, #8
 800ac66:	af00      	add	r7, sp, #0
 800ac68:	6078      	str	r0, [r7, #4]
 800ac6a:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f002 fff7 	bl	800dc60 <_ZNKSt10unique_ptrI26TfLiteResizeBilinearParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800ac72:	4603      	mov	r3, r0
 800ac74:	4618      	mov	r0, r3
 800ac76:	3708      	adds	r7, #8
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <_ZNKSt10unique_ptrI26TfLiteResizeBilinearParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b082      	sub	sp, #8
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
	return get();
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f002 fffc 	bl	800dc82 <_ZNKSt10unique_ptrI26TfLiteResizeBilinearParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800ac8a:	4603      	mov	r3, r0
      }
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	3708      	adds	r7, #8
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}

0800ac94 <_ZNSt10unique_ptrI26TfLiteResizeBilinearParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b084      	sub	sp, #16
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f002 fff0 	bl	800dc82 <_ZNKSt10unique_ptrI26TfLiteResizeBilinearParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800aca2:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	4618      	mov	r0, r3
 800aca8:	f002 ffaa 	bl	800dc00 <_ZNSt15__uniq_ptr_implI26TfLiteResizeBilinearParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800acac:	4602      	mov	r2, r0
 800acae:	2300      	movs	r3, #0
 800acb0:	6013      	str	r3, [r2, #0]
	return __p;
 800acb2:	68fb      	ldr	r3, [r7, #12]
      }
 800acb4:	4618      	mov	r0, r3
 800acb6:	3710      	adds	r7, #16
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}

0800acbc <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI33TfLiteResizeNearestNeighborParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800acbc:	b590      	push	{r4, r7, lr}
 800acbe:	b085      	sub	sp, #20
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800acca:	4618      	mov	r0, r3
 800accc:	f002 ffe6 	bl	800dc9c <_ZN6tflite20BuiltinDataAllocator11AllocatePODI33TfLiteResizeNearestNeighborParamsEEPT_v>
 800acd0:	4604      	mov	r4, r0
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	681a      	ldr	r2, [r3, #0]
 800acd6:	f107 030c 	add.w	r3, r7, #12
 800acda:	4611      	mov	r1, r2
 800acdc:	4618      	mov	r0, r3
 800acde:	f7fb ff44 	bl	8006b6a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800ace2:	f107 030c 	add.w	r3, r7, #12
 800ace6:	461a      	mov	r2, r3
 800ace8:	4621      	mov	r1, r4
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f002 fff7 	bl	800dcde <_ZNSt10unique_ptrI33TfLiteResizeNearestNeighborParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	3714      	adds	r7, #20
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd90      	pop	{r4, r7, pc}

0800acf8 <_ZNSt10unique_ptrI33TfLiteResizeNearestNeighborParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b084      	sub	sp, #16
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	4618      	mov	r0, r3
 800ad04:	f003 f807 	bl	800dd16 <_ZNSt15__uniq_ptr_implI33TfLiteResizeNearestNeighborParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800ad08:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d009      	beq.n	800ad26 <_ZNSt10unique_ptrI33TfLiteResizeNearestNeighborParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f003 f80c 	bl	800dd30 <_ZNSt10unique_ptrI33TfLiteResizeNearestNeighborParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800ad18:	4602      	mov	r2, r0
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	4619      	mov	r1, r3
 800ad20:	4610      	mov	r0, r2
 800ad22:	f7fb ff31 	bl	8006b88 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	601a      	str	r2, [r3, #0]
      }
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	4618      	mov	r0, r3
 800ad30:	3710      	adds	r7, #16
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}

0800ad36 <_ZStneI33TfLiteResizeNearestNeighborParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800ad36:	b580      	push	{r7, lr}
 800ad38:	b082      	sub	sp, #8
 800ad3a:	af00      	add	r7, sp, #0
 800ad3c:	6078      	str	r0, [r7, #4]
 800ad3e:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f003 f818 	bl	800dd76 <_ZNKSt10unique_ptrI33TfLiteResizeNearestNeighborParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800ad46:	4603      	mov	r3, r0
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3708      	adds	r7, #8
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <_ZNKSt10unique_ptrI33TfLiteResizeNearestNeighborParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b082      	sub	sp, #8
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
	return get();
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f003 f81d 	bl	800dd98 <_ZNKSt10unique_ptrI33TfLiteResizeNearestNeighborParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800ad5e:	4603      	mov	r3, r0
      }
 800ad60:	4618      	mov	r0, r3
 800ad62:	3708      	adds	r7, #8
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}

0800ad68 <_ZNSt10unique_ptrI33TfLiteResizeNearestNeighborParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b084      	sub	sp, #16
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f003 f811 	bl	800dd98 <_ZNKSt10unique_ptrI33TfLiteResizeNearestNeighborParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800ad76:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f002 ffcb 	bl	800dd16 <_ZNSt15__uniq_ptr_implI33TfLiteResizeNearestNeighborParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800ad80:	4602      	mov	r2, r0
 800ad82:	2300      	movs	r3, #0
 800ad84:	6013      	str	r3, [r2, #0]
	return __p;
 800ad86:	68fb      	ldr	r3, [r7, #12]
      }
 800ad88:	4618      	mov	r0, r3
 800ad8a:	3710      	adds	r7, #16
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}

0800ad90 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteReshapeParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800ad90:	b590      	push	{r4, r7, lr}
 800ad92:	b085      	sub	sp, #20
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
 800ad98:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f003 f807 	bl	800ddb2 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteReshapeParamsEEPT_v>
 800ada4:	4604      	mov	r4, r0
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	681a      	ldr	r2, [r3, #0]
 800adaa:	f107 030c 	add.w	r3, r7, #12
 800adae:	4611      	mov	r1, r2
 800adb0:	4618      	mov	r0, r3
 800adb2:	f7fb feda 	bl	8006b6a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800adb6:	f107 030c 	add.w	r3, r7, #12
 800adba:	461a      	mov	r2, r3
 800adbc:	4621      	mov	r1, r4
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f003 f818 	bl	800ddf4 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	3714      	adds	r7, #20
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd90      	pop	{r4, r7, pc}

0800adcc <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 800adcc:	b580      	push	{r7, lr}
 800adce:	b084      	sub	sp, #16
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	4618      	mov	r0, r3
 800add8:	f003 f828 	bl	800de2c <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800addc:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d009      	beq.n	800adfa <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f003 f82d 	bl	800de46 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800adec:	4602      	mov	r2, r0
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	4619      	mov	r1, r3
 800adf4:	4610      	mov	r0, r2
 800adf6:	f7fb fec7 	bl	8006b88 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	2200      	movs	r2, #0
 800adfe:	601a      	str	r2, [r3, #0]
      }
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	4618      	mov	r0, r3
 800ae04:	3710      	adds	r7, #16
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}

0800ae0a <_ZStneI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800ae0a:	b580      	push	{r7, lr}
 800ae0c:	b082      	sub	sp, #8
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	6078      	str	r0, [r7, #4]
 800ae12:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f003 f839 	bl	800de8c <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	3708      	adds	r7, #8
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}

0800ae24 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b082      	sub	sp, #8
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
	return get();
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f003 f83e 	bl	800deae <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800ae32:	4603      	mov	r3, r0
      }
 800ae34:	4618      	mov	r0, r3
 800ae36:	3708      	adds	r7, #8
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}

0800ae3c <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b084      	sub	sp, #16
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f003 f832 	bl	800deae <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800ae4a:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f002 ffec 	bl	800de2c <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800ae54:	4602      	mov	r2, r0
 800ae56:	2300      	movs	r3, #0
 800ae58:	6013      	str	r3, [r2, #0]
	return __p;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
      }
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	3710      	adds	r7, #16
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}

0800ae64 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI20TfLiteSkipGramParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800ae64:	b590      	push	{r4, r7, lr}
 800ae66:	b085      	sub	sp, #20
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
 800ae6c:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800ae72:	4618      	mov	r0, r3
 800ae74:	f003 f828 	bl	800dec8 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI20TfLiteSkipGramParamsEEPT_v>
 800ae78:	4604      	mov	r4, r0
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	681a      	ldr	r2, [r3, #0]
 800ae7e:	f107 030c 	add.w	r3, r7, #12
 800ae82:	4611      	mov	r1, r2
 800ae84:	4618      	mov	r0, r3
 800ae86:	f7fb fe70 	bl	8006b6a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800ae8a:	f107 030c 	add.w	r3, r7, #12
 800ae8e:	461a      	mov	r2, r3
 800ae90:	4621      	mov	r1, r4
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f003 f839 	bl	800df0a <_ZNSt10unique_ptrI20TfLiteSkipGramParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	3714      	adds	r7, #20
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd90      	pop	{r4, r7, pc}

0800aea0 <_ZNSt10unique_ptrI20TfLiteSkipGramParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b084      	sub	sp, #16
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f003 f849 	bl	800df42 <_ZNSt15__uniq_ptr_implI20TfLiteSkipGramParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800aeb0:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d009      	beq.n	800aece <_ZNSt10unique_ptrI20TfLiteSkipGramParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f003 f84e 	bl	800df5c <_ZNSt10unique_ptrI20TfLiteSkipGramParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800aec0:	4602      	mov	r2, r0
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	4619      	mov	r1, r3
 800aec8:	4610      	mov	r0, r2
 800aeca:	f7fb fe5d 	bl	8006b88 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	2200      	movs	r2, #0
 800aed2:	601a      	str	r2, [r3, #0]
      }
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	4618      	mov	r0, r3
 800aed8:	3710      	adds	r7, #16
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}

0800aede <_ZStneI20TfLiteSkipGramParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800aede:	b580      	push	{r7, lr}
 800aee0:	b082      	sub	sp, #8
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	6078      	str	r0, [r7, #4]
 800aee6:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f003 f85a 	bl	800dfa2 <_ZNKSt10unique_ptrI20TfLiteSkipGramParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800aeee:	4603      	mov	r3, r0
 800aef0:	4618      	mov	r0, r3
 800aef2:	3708      	adds	r7, #8
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}

0800aef8 <_ZNKSt10unique_ptrI20TfLiteSkipGramParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b082      	sub	sp, #8
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
	return get();
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f003 f85f 	bl	800dfc4 <_ZNKSt10unique_ptrI20TfLiteSkipGramParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800af06:	4603      	mov	r3, r0
      }
 800af08:	4618      	mov	r0, r3
 800af0a:	3708      	adds	r7, #8
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}

0800af10 <_ZNSt10unique_ptrI20TfLiteSkipGramParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800af10:	b580      	push	{r7, lr}
 800af12:	b084      	sub	sp, #16
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f003 f853 	bl	800dfc4 <_ZNKSt10unique_ptrI20TfLiteSkipGramParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800af1e:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	4618      	mov	r0, r3
 800af24:	f003 f80d 	bl	800df42 <_ZNSt15__uniq_ptr_implI20TfLiteSkipGramParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800af28:	4602      	mov	r2, r0
 800af2a:	2300      	movs	r3, #0
 800af2c:	6013      	str	r3, [r2, #0]
	return __p;
 800af2e:	68fb      	ldr	r3, [r7, #12]
      }
 800af30:	4618      	mov	r0, r3
 800af32:	3710      	adds	r7, #16
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}

0800af38 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI24TfLiteSpaceToDepthParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800af38:	b590      	push	{r4, r7, lr}
 800af3a:	b085      	sub	sp, #20
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800af46:	4618      	mov	r0, r3
 800af48:	f003 f849 	bl	800dfde <_ZN6tflite20BuiltinDataAllocator11AllocatePODI24TfLiteSpaceToDepthParamsEEPT_v>
 800af4c:	4604      	mov	r4, r0
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	681a      	ldr	r2, [r3, #0]
 800af52:	f107 030c 	add.w	r3, r7, #12
 800af56:	4611      	mov	r1, r2
 800af58:	4618      	mov	r0, r3
 800af5a:	f7fb fe06 	bl	8006b6a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800af5e:	f107 030c 	add.w	r3, r7, #12
 800af62:	461a      	mov	r2, r3
 800af64:	4621      	mov	r1, r4
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f003 f85a 	bl	800e020 <_ZNSt10unique_ptrI24TfLiteSpaceToDepthParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	3714      	adds	r7, #20
 800af70:	46bd      	mov	sp, r7
 800af72:	bd90      	pop	{r4, r7, pc}

0800af74 <_ZNSt10unique_ptrI24TfLiteSpaceToDepthParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 800af74:	b580      	push	{r7, lr}
 800af76:	b084      	sub	sp, #16
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	4618      	mov	r0, r3
 800af80:	f003 f86a 	bl	800e058 <_ZNSt15__uniq_ptr_implI24TfLiteSpaceToDepthParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800af84:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d009      	beq.n	800afa2 <_ZNSt10unique_ptrI24TfLiteSpaceToDepthParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f003 f86f 	bl	800e072 <_ZNSt10unique_ptrI24TfLiteSpaceToDepthParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800af94:	4602      	mov	r2, r0
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	4619      	mov	r1, r3
 800af9c:	4610      	mov	r0, r2
 800af9e:	f7fb fdf3 	bl	8006b88 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	2200      	movs	r2, #0
 800afa6:	601a      	str	r2, [r3, #0]
      }
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	4618      	mov	r0, r3
 800afac:	3710      	adds	r7, #16
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}

0800afb2 <_ZStneI24TfLiteSpaceToDepthParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800afb2:	b580      	push	{r7, lr}
 800afb4:	b082      	sub	sp, #8
 800afb6:	af00      	add	r7, sp, #0
 800afb8:	6078      	str	r0, [r7, #4]
 800afba:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f003 f87b 	bl	800e0b8 <_ZNKSt10unique_ptrI24TfLiteSpaceToDepthParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800afc2:	4603      	mov	r3, r0
 800afc4:	4618      	mov	r0, r3
 800afc6:	3708      	adds	r7, #8
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}

0800afcc <_ZNKSt10unique_ptrI24TfLiteSpaceToDepthParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800afcc:	b580      	push	{r7, lr}
 800afce:	b082      	sub	sp, #8
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
	return get();
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f003 f880 	bl	800e0da <_ZNKSt10unique_ptrI24TfLiteSpaceToDepthParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800afda:	4603      	mov	r3, r0
      }
 800afdc:	4618      	mov	r0, r3
 800afde:	3708      	adds	r7, #8
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}

0800afe4 <_ZNSt10unique_ptrI24TfLiteSpaceToDepthParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b084      	sub	sp, #16
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f003 f874 	bl	800e0da <_ZNKSt10unique_ptrI24TfLiteSpaceToDepthParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800aff2:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	4618      	mov	r0, r3
 800aff8:	f003 f82e 	bl	800e058 <_ZNSt15__uniq_ptr_implI24TfLiteSpaceToDepthParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800affc:	4602      	mov	r2, r0
 800affe:	2300      	movs	r3, #0
 800b000:	6013      	str	r3, [r2, #0]
	return __p;
 800b002:	68fb      	ldr	r3, [r7, #12]
      }
 800b004:	4618      	mov	r0, r3
 800b006:	3710      	adds	r7, #16
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}

0800b00c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI24TfLiteDepthToSpaceParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800b00c:	b590      	push	{r4, r7, lr}
 800b00e:	b085      	sub	sp, #20
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800b01a:	4618      	mov	r0, r3
 800b01c:	f003 f86a 	bl	800e0f4 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI24TfLiteDepthToSpaceParamsEEPT_v>
 800b020:	4604      	mov	r4, r0
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	681a      	ldr	r2, [r3, #0]
 800b026:	f107 030c 	add.w	r3, r7, #12
 800b02a:	4611      	mov	r1, r2
 800b02c:	4618      	mov	r0, r3
 800b02e:	f7fb fd9c 	bl	8006b6a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800b032:	f107 030c 	add.w	r3, r7, #12
 800b036:	461a      	mov	r2, r3
 800b038:	4621      	mov	r1, r4
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f003 f87b 	bl	800e136 <_ZNSt10unique_ptrI24TfLiteDepthToSpaceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	3714      	adds	r7, #20
 800b044:	46bd      	mov	sp, r7
 800b046:	bd90      	pop	{r4, r7, pc}

0800b048 <_ZNSt10unique_ptrI24TfLiteDepthToSpaceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 800b048:	b580      	push	{r7, lr}
 800b04a:	b084      	sub	sp, #16
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	4618      	mov	r0, r3
 800b054:	f003 f88b 	bl	800e16e <_ZNSt15__uniq_ptr_implI24TfLiteDepthToSpaceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800b058:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d009      	beq.n	800b076 <_ZNSt10unique_ptrI24TfLiteDepthToSpaceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f003 f890 	bl	800e188 <_ZNSt10unique_ptrI24TfLiteDepthToSpaceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800b068:	4602      	mov	r2, r0
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	4619      	mov	r1, r3
 800b070:	4610      	mov	r0, r2
 800b072:	f7fb fd89 	bl	8006b88 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	2200      	movs	r2, #0
 800b07a:	601a      	str	r2, [r3, #0]
      }
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	4618      	mov	r0, r3
 800b080:	3710      	adds	r7, #16
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}

0800b086 <_ZStneI24TfLiteDepthToSpaceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800b086:	b580      	push	{r7, lr}
 800b088:	b082      	sub	sp, #8
 800b08a:	af00      	add	r7, sp, #0
 800b08c:	6078      	str	r0, [r7, #4]
 800b08e:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	f003 f89c 	bl	800e1ce <_ZNKSt10unique_ptrI24TfLiteDepthToSpaceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800b096:	4603      	mov	r3, r0
 800b098:	4618      	mov	r0, r3
 800b09a:	3708      	adds	r7, #8
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}

0800b0a0 <_ZNKSt10unique_ptrI24TfLiteDepthToSpaceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b082      	sub	sp, #8
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
	return get();
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f003 f8a1 	bl	800e1f0 <_ZNKSt10unique_ptrI24TfLiteDepthToSpaceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800b0ae:	4603      	mov	r3, r0
      }
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3708      	adds	r7, #8
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}

0800b0b8 <_ZNSt10unique_ptrI24TfLiteDepthToSpaceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b084      	sub	sp, #16
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f003 f895 	bl	800e1f0 <_ZNKSt10unique_ptrI24TfLiteDepthToSpaceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800b0c6:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f003 f84f 	bl	800e16e <_ZNSt15__uniq_ptr_implI24TfLiteDepthToSpaceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800b0d0:	4602      	mov	r2, r0
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	6013      	str	r3, [r2, #0]
	return __p;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
      }
 800b0d8:	4618      	mov	r0, r3
 800b0da:	3710      	adds	r7, #16
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}

0800b0e0 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI18TfLiteGatherParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800b0e0:	b590      	push	{r4, r7, lr}
 800b0e2:	b085      	sub	sp, #20
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
 800b0e8:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f003 f88b 	bl	800e20a <_ZN6tflite20BuiltinDataAllocator11AllocatePODI18TfLiteGatherParamsEEPT_v>
 800b0f4:	4604      	mov	r4, r0
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	681a      	ldr	r2, [r3, #0]
 800b0fa:	f107 030c 	add.w	r3, r7, #12
 800b0fe:	4611      	mov	r1, r2
 800b100:	4618      	mov	r0, r3
 800b102:	f7fb fd32 	bl	8006b6a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800b106:	f107 030c 	add.w	r3, r7, #12
 800b10a:	461a      	mov	r2, r3
 800b10c:	4621      	mov	r1, r4
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f003 f89c 	bl	800e24c <_ZNSt10unique_ptrI18TfLiteGatherParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	3714      	adds	r7, #20
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd90      	pop	{r4, r7, pc}

0800b11c <_ZNSt10unique_ptrI18TfLiteGatherParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b084      	sub	sp, #16
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	4618      	mov	r0, r3
 800b128:	f003 f8ac 	bl	800e284 <_ZNSt15__uniq_ptr_implI18TfLiteGatherParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800b12c:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d009      	beq.n	800b14a <_ZNSt10unique_ptrI18TfLiteGatherParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f003 f8b1 	bl	800e29e <_ZNSt10unique_ptrI18TfLiteGatherParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800b13c:	4602      	mov	r2, r0
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	4619      	mov	r1, r3
 800b144:	4610      	mov	r0, r2
 800b146:	f7fb fd1f 	bl	8006b88 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	2200      	movs	r2, #0
 800b14e:	601a      	str	r2, [r3, #0]
      }
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	4618      	mov	r0, r3
 800b154:	3710      	adds	r7, #16
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}

0800b15a <_ZStneI18TfLiteGatherParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800b15a:	b580      	push	{r7, lr}
 800b15c:	b082      	sub	sp, #8
 800b15e:	af00      	add	r7, sp, #0
 800b160:	6078      	str	r0, [r7, #4]
 800b162:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f003 f8bd 	bl	800e2e4 <_ZNKSt10unique_ptrI18TfLiteGatherParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800b16a:	4603      	mov	r3, r0
 800b16c:	4618      	mov	r0, r3
 800b16e:	3708      	adds	r7, #8
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}

0800b174 <_ZNKSt10unique_ptrI18TfLiteGatherParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800b174:	b580      	push	{r7, lr}
 800b176:	b082      	sub	sp, #8
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
	return get();
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f003 f8c2 	bl	800e306 <_ZNKSt10unique_ptrI18TfLiteGatherParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800b182:	4603      	mov	r3, r0
      }
 800b184:	4618      	mov	r0, r3
 800b186:	3708      	adds	r7, #8
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}

0800b18c <_ZNSt10unique_ptrI18TfLiteGatherParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b084      	sub	sp, #16
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f003 f8b6 	bl	800e306 <_ZNKSt10unique_ptrI18TfLiteGatherParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800b19a:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f003 f870 	bl	800e284 <_ZNSt15__uniq_ptr_implI18TfLiteGatherParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800b1a4:	4602      	mov	r2, r0
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	6013      	str	r3, [r2, #0]
	return __p;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
      }
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	3710      	adds	r7, #16
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteReducerParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800b1b4:	b590      	push	{r4, r7, lr}
 800b1b6:	b085      	sub	sp, #20
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
 800b1bc:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	f003 f8ac 	bl	800e320 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteReducerParamsEEPT_v>
 800b1c8:	4604      	mov	r4, r0
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	681a      	ldr	r2, [r3, #0]
 800b1ce:	f107 030c 	add.w	r3, r7, #12
 800b1d2:	4611      	mov	r1, r2
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f7fb fcc8 	bl	8006b6a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800b1da:	f107 030c 	add.w	r3, r7, #12
 800b1de:	461a      	mov	r2, r3
 800b1e0:	4621      	mov	r1, r4
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f003 f8bd 	bl	800e362 <_ZNSt10unique_ptrI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	3714      	adds	r7, #20
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd90      	pop	{r4, r7, pc}

0800b1f0 <_ZNSt10unique_ptrI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b084      	sub	sp, #16
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f003 f8cd 	bl	800e39a <_ZNSt15__uniq_ptr_implI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800b200:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d009      	beq.n	800b21e <_ZNSt10unique_ptrI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f003 f8d2 	bl	800e3b4 <_ZNSt10unique_ptrI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800b210:	4602      	mov	r2, r0
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	4619      	mov	r1, r3
 800b218:	4610      	mov	r0, r2
 800b21a:	f7fb fcb5 	bl	8006b88 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	2200      	movs	r2, #0
 800b222:	601a      	str	r2, [r3, #0]
      }
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	4618      	mov	r0, r3
 800b228:	3710      	adds	r7, #16
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}

0800b22e <_ZStneI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800b22e:	b580      	push	{r7, lr}
 800b230:	b082      	sub	sp, #8
 800b232:	af00      	add	r7, sp, #0
 800b234:	6078      	str	r0, [r7, #4]
 800b236:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f003 f8de 	bl	800e3fa <_ZNKSt10unique_ptrI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800b23e:	4603      	mov	r3, r0
 800b240:	4618      	mov	r0, r3
 800b242:	3708      	adds	r7, #8
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}

0800b248 <_ZNKSt10unique_ptrI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800b248:	b580      	push	{r7, lr}
 800b24a:	b082      	sub	sp, #8
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
	return get();
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f003 f8e3 	bl	800e41c <_ZNKSt10unique_ptrI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800b256:	4603      	mov	r3, r0
      }
 800b258:	4618      	mov	r0, r3
 800b25a:	3708      	adds	r7, #8
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}

0800b260 <_ZNSt10unique_ptrI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800b260:	b580      	push	{r7, lr}
 800b262:	b084      	sub	sp, #16
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f003 f8d7 	bl	800e41c <_ZNKSt10unique_ptrI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800b26e:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	4618      	mov	r0, r3
 800b274:	f003 f891 	bl	800e39a <_ZNSt15__uniq_ptr_implI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800b278:	4602      	mov	r2, r0
 800b27a:	2300      	movs	r3, #0
 800b27c:	6013      	str	r3, [r2, #0]
	return __p;
 800b27e:	68fb      	ldr	r3, [r7, #12]
      }
 800b280:	4618      	mov	r0, r3
 800b282:	3710      	adds	r7, #16
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}

0800b288 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI17TfLiteSplitParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800b288:	b590      	push	{r4, r7, lr}
 800b28a:	b085      	sub	sp, #20
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
 800b290:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800b296:	4618      	mov	r0, r3
 800b298:	f003 f8cd 	bl	800e436 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI17TfLiteSplitParamsEEPT_v>
 800b29c:	4604      	mov	r4, r0
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	681a      	ldr	r2, [r3, #0]
 800b2a2:	f107 030c 	add.w	r3, r7, #12
 800b2a6:	4611      	mov	r1, r2
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	f7fb fc5e 	bl	8006b6a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800b2ae:	f107 030c 	add.w	r3, r7, #12
 800b2b2:	461a      	mov	r2, r3
 800b2b4:	4621      	mov	r1, r4
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f003 f8de 	bl	800e478 <_ZNSt10unique_ptrI17TfLiteSplitParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	3714      	adds	r7, #20
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd90      	pop	{r4, r7, pc}

0800b2c4 <_ZNSt10unique_ptrI17TfLiteSplitParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b084      	sub	sp, #16
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	f003 f8ee 	bl	800e4b0 <_ZNSt15__uniq_ptr_implI17TfLiteSplitParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800b2d4:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d009      	beq.n	800b2f2 <_ZNSt10unique_ptrI17TfLiteSplitParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f003 f8f3 	bl	800e4ca <_ZNSt10unique_ptrI17TfLiteSplitParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800b2e4:	4602      	mov	r2, r0
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	4619      	mov	r1, r3
 800b2ec:	4610      	mov	r0, r2
 800b2ee:	f7fb fc4b 	bl	8006b88 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	601a      	str	r2, [r3, #0]
      }
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	3710      	adds	r7, #16
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}

0800b302 <_ZStneI17TfLiteSplitParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800b302:	b580      	push	{r7, lr}
 800b304:	b082      	sub	sp, #8
 800b306:	af00      	add	r7, sp, #0
 800b308:	6078      	str	r0, [r7, #4]
 800b30a:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f003 f8ff 	bl	800e510 <_ZNKSt10unique_ptrI17TfLiteSplitParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800b312:	4603      	mov	r3, r0
 800b314:	4618      	mov	r0, r3
 800b316:	3708      	adds	r7, #8
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}

0800b31c <_ZNKSt10unique_ptrI17TfLiteSplitParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b082      	sub	sp, #8
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
	return get();
 800b324:	6878      	ldr	r0, [r7, #4]
 800b326:	f003 f904 	bl	800e532 <_ZNKSt10unique_ptrI17TfLiteSplitParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800b32a:	4603      	mov	r3, r0
      }
 800b32c:	4618      	mov	r0, r3
 800b32e:	3708      	adds	r7, #8
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}

0800b334 <_ZNSt10unique_ptrI17TfLiteSplitParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800b334:	b580      	push	{r7, lr}
 800b336:	b084      	sub	sp, #16
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f003 f8f8 	bl	800e532 <_ZNKSt10unique_ptrI17TfLiteSplitParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800b342:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	4618      	mov	r0, r3
 800b348:	f003 f8b2 	bl	800e4b0 <_ZNSt15__uniq_ptr_implI17TfLiteSplitParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800b34c:	4602      	mov	r2, r0
 800b34e:	2300      	movs	r3, #0
 800b350:	6013      	str	r3, [r2, #0]
	return __p;
 800b352:	68fb      	ldr	r3, [r7, #12]
      }
 800b354:	4618      	mov	r0, r3
 800b356:	3710      	adds	r7, #16
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}

0800b35c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteSqueezeParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800b35c:	b590      	push	{r4, r7, lr}
 800b35e:	b085      	sub	sp, #20
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
 800b364:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800b36a:	4618      	mov	r0, r3
 800b36c:	f003 f8ee 	bl	800e54c <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteSqueezeParamsEEPT_v>
 800b370:	4604      	mov	r4, r0
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	681a      	ldr	r2, [r3, #0]
 800b376:	f107 030c 	add.w	r3, r7, #12
 800b37a:	4611      	mov	r1, r2
 800b37c:	4618      	mov	r0, r3
 800b37e:	f7fb fbf4 	bl	8006b6a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800b382:	f107 030c 	add.w	r3, r7, #12
 800b386:	461a      	mov	r2, r3
 800b388:	4621      	mov	r1, r4
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f003 f8ff 	bl	800e58e <_ZNSt10unique_ptrI19TfLiteSqueezeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 800b390:	6878      	ldr	r0, [r7, #4]
 800b392:	3714      	adds	r7, #20
 800b394:	46bd      	mov	sp, r7
 800b396:	bd90      	pop	{r4, r7, pc}

0800b398 <_ZNSt10unique_ptrI19TfLiteSqueezeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 800b398:	b580      	push	{r7, lr}
 800b39a:	b084      	sub	sp, #16
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f003 f90f 	bl	800e5c6 <_ZNSt15__uniq_ptr_implI19TfLiteSqueezeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800b3a8:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d009      	beq.n	800b3c6 <_ZNSt10unique_ptrI19TfLiteSqueezeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f003 f914 	bl	800e5e0 <_ZNSt10unique_ptrI19TfLiteSqueezeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800b3b8:	4602      	mov	r2, r0
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	4619      	mov	r1, r3
 800b3c0:	4610      	mov	r0, r2
 800b3c2:	f7fb fbe1 	bl	8006b88 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	601a      	str	r2, [r3, #0]
      }
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3710      	adds	r7, #16
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}

0800b3d6 <_ZStneI19TfLiteSqueezeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800b3d6:	b580      	push	{r7, lr}
 800b3d8:	b082      	sub	sp, #8
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	6078      	str	r0, [r7, #4]
 800b3de:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f003 f920 	bl	800e626 <_ZNKSt10unique_ptrI19TfLiteSqueezeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3708      	adds	r7, #8
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}

0800b3f0 <_ZNKSt10unique_ptrI19TfLiteSqueezeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b082      	sub	sp, #8
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
	return get();
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f003 f925 	bl	800e648 <_ZNKSt10unique_ptrI19TfLiteSqueezeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800b3fe:	4603      	mov	r3, r0
      }
 800b400:	4618      	mov	r0, r3
 800b402:	3708      	adds	r7, #8
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}

0800b408 <_ZNSt10unique_ptrI19TfLiteSqueezeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800b408:	b580      	push	{r7, lr}
 800b40a:	b084      	sub	sp, #16
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f003 f919 	bl	800e648 <_ZNKSt10unique_ptrI19TfLiteSqueezeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800b416:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	4618      	mov	r0, r3
 800b41c:	f003 f8d3 	bl	800e5c6 <_ZNSt15__uniq_ptr_implI19TfLiteSqueezeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800b420:	4602      	mov	r2, r0
 800b422:	2300      	movs	r3, #0
 800b424:	6013      	str	r3, [r2, #0]
	return __p;
 800b426:	68fb      	ldr	r3, [r7, #12]
      }
 800b428:	4618      	mov	r0, r3
 800b42a:	3710      	adds	r7, #16
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}

0800b430 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI24TfLiteStridedSliceParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800b430:	b590      	push	{r4, r7, lr}
 800b432:	b085      	sub	sp, #20
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
 800b438:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800b43e:	4618      	mov	r0, r3
 800b440:	f003 f90f 	bl	800e662 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI24TfLiteStridedSliceParamsEEPT_v>
 800b444:	4604      	mov	r4, r0
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	681a      	ldr	r2, [r3, #0]
 800b44a:	f107 030c 	add.w	r3, r7, #12
 800b44e:	4611      	mov	r1, r2
 800b450:	4618      	mov	r0, r3
 800b452:	f7fb fb8a 	bl	8006b6a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800b456:	f107 030c 	add.w	r3, r7, #12
 800b45a:	461a      	mov	r2, r3
 800b45c:	4621      	mov	r1, r4
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f003 f920 	bl	800e6a4 <_ZNSt10unique_ptrI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	3714      	adds	r7, #20
 800b468:	46bd      	mov	sp, r7
 800b46a:	bd90      	pop	{r4, r7, pc}

0800b46c <_ZNSt10unique_ptrI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b084      	sub	sp, #16
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	4618      	mov	r0, r3
 800b478:	f003 f930 	bl	800e6dc <_ZNSt15__uniq_ptr_implI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800b47c:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d009      	beq.n	800b49a <_ZNSt10unique_ptrI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f003 f935 	bl	800e6f6 <_ZNSt10unique_ptrI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800b48c:	4602      	mov	r2, r0
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	4619      	mov	r1, r3
 800b494:	4610      	mov	r0, r2
 800b496:	f7fb fb77 	bl	8006b88 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	2200      	movs	r2, #0
 800b49e:	601a      	str	r2, [r3, #0]
      }
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3710      	adds	r7, #16
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd80      	pop	{r7, pc}

0800b4aa <_ZStneI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800b4aa:	b580      	push	{r7, lr}
 800b4ac:	b082      	sub	sp, #8
 800b4ae:	af00      	add	r7, sp, #0
 800b4b0:	6078      	str	r0, [r7, #4]
 800b4b2:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	f003 f941 	bl	800e73c <_ZNKSt10unique_ptrI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	4618      	mov	r0, r3
 800b4be:	3708      	adds	r7, #8
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}

0800b4c4 <_ZNKSt10unique_ptrI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b082      	sub	sp, #8
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
	return get();
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f003 f946 	bl	800e75e <_ZNKSt10unique_ptrI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800b4d2:	4603      	mov	r3, r0
      }
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3708      	adds	r7, #8
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}

0800b4dc <_ZNSt10unique_ptrI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b084      	sub	sp, #16
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	f003 f93a 	bl	800e75e <_ZNKSt10unique_ptrI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800b4ea:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	f003 f8f4 	bl	800e6dc <_ZNSt15__uniq_ptr_implI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800b4f4:	4602      	mov	r2, r0
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	6013      	str	r3, [r2, #0]
	return __p;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
      }
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3710      	adds	r7, #16
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}

0800b504 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI18TfLiteArgMaxParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800b504:	b590      	push	{r4, r7, lr}
 800b506:	b085      	sub	sp, #20
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
 800b50c:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800b512:	4618      	mov	r0, r3
 800b514:	f003 f930 	bl	800e778 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI18TfLiteArgMaxParamsEEPT_v>
 800b518:	4604      	mov	r4, r0
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	681a      	ldr	r2, [r3, #0]
 800b51e:	f107 030c 	add.w	r3, r7, #12
 800b522:	4611      	mov	r1, r2
 800b524:	4618      	mov	r0, r3
 800b526:	f7fb fb20 	bl	8006b6a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800b52a:	f107 030c 	add.w	r3, r7, #12
 800b52e:	461a      	mov	r2, r3
 800b530:	4621      	mov	r1, r4
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f003 f941 	bl	800e7ba <_ZNSt10unique_ptrI18TfLiteArgMaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	3714      	adds	r7, #20
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd90      	pop	{r4, r7, pc}

0800b540 <_ZNSt10unique_ptrI18TfLiteArgMaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 800b540:	b580      	push	{r7, lr}
 800b542:	b084      	sub	sp, #16
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	4618      	mov	r0, r3
 800b54c:	f003 f951 	bl	800e7f2 <_ZNSt15__uniq_ptr_implI18TfLiteArgMaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800b550:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d009      	beq.n	800b56e <_ZNSt10unique_ptrI18TfLiteArgMaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f003 f956 	bl	800e80c <_ZNSt10unique_ptrI18TfLiteArgMaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800b560:	4602      	mov	r2, r0
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	4619      	mov	r1, r3
 800b568:	4610      	mov	r0, r2
 800b56a:	f7fb fb0d 	bl	8006b88 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	2200      	movs	r2, #0
 800b572:	601a      	str	r2, [r3, #0]
      }
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	4618      	mov	r0, r3
 800b578:	3710      	adds	r7, #16
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}

0800b57e <_ZStneI18TfLiteArgMaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800b57e:	b580      	push	{r7, lr}
 800b580:	b082      	sub	sp, #8
 800b582:	af00      	add	r7, sp, #0
 800b584:	6078      	str	r0, [r7, #4]
 800b586:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f003 f962 	bl	800e852 <_ZNKSt10unique_ptrI18TfLiteArgMaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800b58e:	4603      	mov	r3, r0
 800b590:	4618      	mov	r0, r3
 800b592:	3708      	adds	r7, #8
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}

0800b598 <_ZNKSt10unique_ptrI18TfLiteArgMaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800b598:	b580      	push	{r7, lr}
 800b59a:	b082      	sub	sp, #8
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
	return get();
 800b5a0:	6878      	ldr	r0, [r7, #4]
 800b5a2:	f003 f967 	bl	800e874 <_ZNKSt10unique_ptrI18TfLiteArgMaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800b5a6:	4603      	mov	r3, r0
      }
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	3708      	adds	r7, #8
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}

0800b5b0 <_ZNSt10unique_ptrI18TfLiteArgMaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b084      	sub	sp, #16
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f003 f95b 	bl	800e874 <_ZNKSt10unique_ptrI18TfLiteArgMaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800b5be:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f003 f915 	bl	800e7f2 <_ZNSt15__uniq_ptr_implI18TfLiteArgMaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800b5c8:	4602      	mov	r2, r0
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	6013      	str	r3, [r2, #0]
	return __p;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
      }
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	3710      	adds	r7, #16
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}

0800b5d8 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI18TfLiteArgMinParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800b5d8:	b590      	push	{r4, r7, lr}
 800b5da:	b085      	sub	sp, #20
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
 800b5e0:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	f003 f951 	bl	800e88e <_ZN6tflite20BuiltinDataAllocator11AllocatePODI18TfLiteArgMinParamsEEPT_v>
 800b5ec:	4604      	mov	r4, r0
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	681a      	ldr	r2, [r3, #0]
 800b5f2:	f107 030c 	add.w	r3, r7, #12
 800b5f6:	4611      	mov	r1, r2
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f7fb fab6 	bl	8006b6a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800b5fe:	f107 030c 	add.w	r3, r7, #12
 800b602:	461a      	mov	r2, r3
 800b604:	4621      	mov	r1, r4
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f003 f962 	bl	800e8d0 <_ZNSt10unique_ptrI18TfLiteArgMinParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	3714      	adds	r7, #20
 800b610:	46bd      	mov	sp, r7
 800b612:	bd90      	pop	{r4, r7, pc}

0800b614 <_ZNSt10unique_ptrI18TfLiteArgMinParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 800b614:	b580      	push	{r7, lr}
 800b616:	b084      	sub	sp, #16
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	4618      	mov	r0, r3
 800b620:	f003 f972 	bl	800e908 <_ZNSt15__uniq_ptr_implI18TfLiteArgMinParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800b624:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d009      	beq.n	800b642 <_ZNSt10unique_ptrI18TfLiteArgMinParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f003 f977 	bl	800e922 <_ZNSt10unique_ptrI18TfLiteArgMinParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800b634:	4602      	mov	r2, r0
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	4619      	mov	r1, r3
 800b63c:	4610      	mov	r0, r2
 800b63e:	f7fb faa3 	bl	8006b88 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	2200      	movs	r2, #0
 800b646:	601a      	str	r2, [r3, #0]
      }
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	4618      	mov	r0, r3
 800b64c:	3710      	adds	r7, #16
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}

0800b652 <_ZStneI18TfLiteArgMinParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800b652:	b580      	push	{r7, lr}
 800b654:	b082      	sub	sp, #8
 800b656:	af00      	add	r7, sp, #0
 800b658:	6078      	str	r0, [r7, #4]
 800b65a:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f003 f983 	bl	800e968 <_ZNKSt10unique_ptrI18TfLiteArgMinParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800b662:	4603      	mov	r3, r0
 800b664:	4618      	mov	r0, r3
 800b666:	3708      	adds	r7, #8
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd80      	pop	{r7, pc}

0800b66c <_ZNKSt10unique_ptrI18TfLiteArgMinParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b082      	sub	sp, #8
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
	return get();
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f003 f988 	bl	800e98a <_ZNKSt10unique_ptrI18TfLiteArgMinParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800b67a:	4603      	mov	r3, r0
      }
 800b67c:	4618      	mov	r0, r3
 800b67e:	3708      	adds	r7, #8
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}

0800b684 <_ZNSt10unique_ptrI18TfLiteArgMinParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800b684:	b580      	push	{r7, lr}
 800b686:	b084      	sub	sp, #16
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f003 f97c 	bl	800e98a <_ZNKSt10unique_ptrI18TfLiteArgMinParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800b692:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	4618      	mov	r0, r3
 800b698:	f003 f936 	bl	800e908 <_ZNSt15__uniq_ptr_implI18TfLiteArgMinParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800b69c:	4602      	mov	r2, r0
 800b69e:	2300      	movs	r3, #0
 800b6a0:	6013      	str	r3, [r2, #0]
	return __p;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
      }
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3710      	adds	r7, #16
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}

0800b6ac <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI25TfLiteTransposeConvParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800b6ac:	b590      	push	{r4, r7, lr}
 800b6ae:	b085      	sub	sp, #20
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
 800b6b4:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	f003 f972 	bl	800e9a4 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI25TfLiteTransposeConvParamsEEPT_v>
 800b6c0:	4604      	mov	r4, r0
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	681a      	ldr	r2, [r3, #0]
 800b6c6:	f107 030c 	add.w	r3, r7, #12
 800b6ca:	4611      	mov	r1, r2
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f7fb fa4c 	bl	8006b6a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800b6d2:	f107 030c 	add.w	r3, r7, #12
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	4621      	mov	r1, r4
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f003 f983 	bl	800e9e6 <_ZNSt10unique_ptrI25TfLiteTransposeConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	3714      	adds	r7, #20
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd90      	pop	{r4, r7, pc}

0800b6e8 <_ZNSt10unique_ptrI25TfLiteTransposeConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b084      	sub	sp, #16
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	f003 f993 	bl	800ea1e <_ZNSt15__uniq_ptr_implI25TfLiteTransposeConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800b6f8:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d009      	beq.n	800b716 <_ZNSt10unique_ptrI25TfLiteTransposeConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f003 f998 	bl	800ea38 <_ZNSt10unique_ptrI25TfLiteTransposeConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800b708:	4602      	mov	r2, r0
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	4619      	mov	r1, r3
 800b710:	4610      	mov	r0, r2
 800b712:	f7fb fa39 	bl	8006b88 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	2200      	movs	r2, #0
 800b71a:	601a      	str	r2, [r3, #0]
      }
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	4618      	mov	r0, r3
 800b720:	3710      	adds	r7, #16
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}

0800b726 <_ZStneI25TfLiteTransposeConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800b726:	b580      	push	{r7, lr}
 800b728:	b082      	sub	sp, #8
 800b72a:	af00      	add	r7, sp, #0
 800b72c:	6078      	str	r0, [r7, #4]
 800b72e:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f003 f9a4 	bl	800ea7e <_ZNKSt10unique_ptrI25TfLiteTransposeConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800b736:	4603      	mov	r3, r0
 800b738:	4618      	mov	r0, r3
 800b73a:	3708      	adds	r7, #8
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}

0800b740 <_ZNKSt10unique_ptrI25TfLiteTransposeConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800b740:	b580      	push	{r7, lr}
 800b742:	b082      	sub	sp, #8
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
	return get();
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f003 f9a9 	bl	800eaa0 <_ZNKSt10unique_ptrI25TfLiteTransposeConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800b74e:	4603      	mov	r3, r0
      }
 800b750:	4618      	mov	r0, r3
 800b752:	3708      	adds	r7, #8
 800b754:	46bd      	mov	sp, r7
 800b756:	bd80      	pop	{r7, pc}

0800b758 <_ZNSt10unique_ptrI25TfLiteTransposeConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800b758:	b580      	push	{r7, lr}
 800b75a:	b084      	sub	sp, #16
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f003 f99d 	bl	800eaa0 <_ZNKSt10unique_ptrI25TfLiteTransposeConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800b766:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	4618      	mov	r0, r3
 800b76c:	f003 f957 	bl	800ea1e <_ZNSt15__uniq_ptr_implI25TfLiteTransposeConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800b770:	4602      	mov	r2, r0
 800b772:	2300      	movs	r3, #0
 800b774:	6013      	str	r3, [r2, #0]
	return __p;
 800b776:	68fb      	ldr	r3, [r7, #12]
      }
 800b778:	4618      	mov	r0, r3
 800b77a:	3710      	adds	r7, #16
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}

0800b780 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI25TfLiteSparseToDenseParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800b780:	b590      	push	{r4, r7, lr}
 800b782:	b085      	sub	sp, #20
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
 800b788:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800b78e:	4618      	mov	r0, r3
 800b790:	f003 f993 	bl	800eaba <_ZN6tflite20BuiltinDataAllocator11AllocatePODI25TfLiteSparseToDenseParamsEEPT_v>
 800b794:	4604      	mov	r4, r0
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	681a      	ldr	r2, [r3, #0]
 800b79a:	f107 030c 	add.w	r3, r7, #12
 800b79e:	4611      	mov	r1, r2
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f7fb f9e2 	bl	8006b6a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800b7a6:	f107 030c 	add.w	r3, r7, #12
 800b7aa:	461a      	mov	r2, r3
 800b7ac:	4621      	mov	r1, r4
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f003 f9a4 	bl	800eafc <_ZNSt10unique_ptrI25TfLiteSparseToDenseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	3714      	adds	r7, #20
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bd90      	pop	{r4, r7, pc}

0800b7bc <_ZNSt10unique_ptrI25TfLiteSparseToDenseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b084      	sub	sp, #16
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f003 f9b4 	bl	800eb34 <_ZNSt15__uniq_ptr_implI25TfLiteSparseToDenseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800b7cc:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d009      	beq.n	800b7ea <_ZNSt10unique_ptrI25TfLiteSparseToDenseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	f003 f9b9 	bl	800eb4e <_ZNSt10unique_ptrI25TfLiteSparseToDenseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800b7dc:	4602      	mov	r2, r0
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	4619      	mov	r1, r3
 800b7e4:	4610      	mov	r0, r2
 800b7e6:	f7fb f9cf 	bl	8006b88 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	601a      	str	r2, [r3, #0]
      }
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3710      	adds	r7, #16
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}

0800b7fa <_ZStneI25TfLiteSparseToDenseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800b7fa:	b580      	push	{r7, lr}
 800b7fc:	b082      	sub	sp, #8
 800b7fe:	af00      	add	r7, sp, #0
 800b800:	6078      	str	r0, [r7, #4]
 800b802:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f003 f9c5 	bl	800eb94 <_ZNKSt10unique_ptrI25TfLiteSparseToDenseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800b80a:	4603      	mov	r3, r0
 800b80c:	4618      	mov	r0, r3
 800b80e:	3708      	adds	r7, #8
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}

0800b814 <_ZNKSt10unique_ptrI25TfLiteSparseToDenseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800b814:	b580      	push	{r7, lr}
 800b816:	b082      	sub	sp, #8
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
	return get();
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f003 f9ca 	bl	800ebb6 <_ZNKSt10unique_ptrI25TfLiteSparseToDenseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800b822:	4603      	mov	r3, r0
      }
 800b824:	4618      	mov	r0, r3
 800b826:	3708      	adds	r7, #8
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}

0800b82c <_ZNSt10unique_ptrI25TfLiteSparseToDenseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b084      	sub	sp, #16
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f003 f9be 	bl	800ebb6 <_ZNKSt10unique_ptrI25TfLiteSparseToDenseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800b83a:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	4618      	mov	r0, r3
 800b840:	f003 f978 	bl	800eb34 <_ZNSt15__uniq_ptr_implI25TfLiteSparseToDenseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800b844:	4602      	mov	r2, r0
 800b846:	2300      	movs	r3, #0
 800b848:	6013      	str	r3, [r2, #0]
	return __p;
 800b84a:	68fb      	ldr	r3, [r7, #12]
      }
 800b84c:	4618      	mov	r0, r3
 800b84e:	3710      	adds	r7, #16
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}

0800b854 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI17TfLiteShapeParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800b854:	b590      	push	{r4, r7, lr}
 800b856:	b085      	sub	sp, #20
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
 800b85c:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800b862:	4618      	mov	r0, r3
 800b864:	f003 f9b4 	bl	800ebd0 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI17TfLiteShapeParamsEEPT_v>
 800b868:	4604      	mov	r4, r0
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	681a      	ldr	r2, [r3, #0]
 800b86e:	f107 030c 	add.w	r3, r7, #12
 800b872:	4611      	mov	r1, r2
 800b874:	4618      	mov	r0, r3
 800b876:	f7fb f978 	bl	8006b6a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800b87a:	f107 030c 	add.w	r3, r7, #12
 800b87e:	461a      	mov	r2, r3
 800b880:	4621      	mov	r1, r4
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f003 f9c5 	bl	800ec12 <_ZNSt10unique_ptrI17TfLiteShapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	3714      	adds	r7, #20
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bd90      	pop	{r4, r7, pc}

0800b890 <_ZNSt10unique_ptrI17TfLiteShapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 800b890:	b580      	push	{r7, lr}
 800b892:	b084      	sub	sp, #16
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	4618      	mov	r0, r3
 800b89c:	f003 f9d5 	bl	800ec4a <_ZNSt15__uniq_ptr_implI17TfLiteShapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800b8a0:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d009      	beq.n	800b8be <_ZNSt10unique_ptrI17TfLiteShapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f003 f9da 	bl	800ec64 <_ZNSt10unique_ptrI17TfLiteShapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800b8b0:	4602      	mov	r2, r0
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	4619      	mov	r1, r3
 800b8b8:	4610      	mov	r0, r2
 800b8ba:	f7fb f965 	bl	8006b88 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	601a      	str	r2, [r3, #0]
      }
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	3710      	adds	r7, #16
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}

0800b8ce <_ZStneI17TfLiteShapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800b8ce:	b580      	push	{r7, lr}
 800b8d0:	b082      	sub	sp, #8
 800b8d2:	af00      	add	r7, sp, #0
 800b8d4:	6078      	str	r0, [r7, #4]
 800b8d6:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f003 f9e6 	bl	800ecaa <_ZNKSt10unique_ptrI17TfLiteShapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	3708      	adds	r7, #8
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}

0800b8e8 <_ZNKSt10unique_ptrI17TfLiteShapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b082      	sub	sp, #8
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
	return get();
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f003 f9eb 	bl	800eccc <_ZNKSt10unique_ptrI17TfLiteShapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800b8f6:	4603      	mov	r3, r0
      }
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3708      	adds	r7, #8
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}

0800b900 <_ZNSt10unique_ptrI17TfLiteShapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800b900:	b580      	push	{r7, lr}
 800b902:	b084      	sub	sp, #16
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f003 f9df 	bl	800eccc <_ZNKSt10unique_ptrI17TfLiteShapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800b90e:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	4618      	mov	r0, r3
 800b914:	f003 f999 	bl	800ec4a <_ZNSt15__uniq_ptr_implI17TfLiteShapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800b918:	4602      	mov	r2, r0
 800b91a:	2300      	movs	r3, #0
 800b91c:	6013      	str	r3, [r2, #0]
	return __p;
 800b91e:	68fb      	ldr	r3, [r7, #12]
      }
 800b920:	4618      	mov	r0, r3
 800b922:	3710      	adds	r7, #16
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}

0800b928 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI16TfLitePackParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800b928:	b590      	push	{r4, r7, lr}
 800b92a:	b085      	sub	sp, #20
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
 800b930:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800b936:	4618      	mov	r0, r3
 800b938:	f003 f9d5 	bl	800ece6 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI16TfLitePackParamsEEPT_v>
 800b93c:	4604      	mov	r4, r0
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	681a      	ldr	r2, [r3, #0]
 800b942:	f107 030c 	add.w	r3, r7, #12
 800b946:	4611      	mov	r1, r2
 800b948:	4618      	mov	r0, r3
 800b94a:	f7fb f90e 	bl	8006b6a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800b94e:	f107 030c 	add.w	r3, r7, #12
 800b952:	461a      	mov	r2, r3
 800b954:	4621      	mov	r1, r4
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	f003 f9e6 	bl	800ed28 <_ZNSt10unique_ptrI16TfLitePackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	3714      	adds	r7, #20
 800b960:	46bd      	mov	sp, r7
 800b962:	bd90      	pop	{r4, r7, pc}

0800b964 <_ZNSt10unique_ptrI16TfLitePackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 800b964:	b580      	push	{r7, lr}
 800b966:	b084      	sub	sp, #16
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	4618      	mov	r0, r3
 800b970:	f003 f9f6 	bl	800ed60 <_ZNSt15__uniq_ptr_implI16TfLitePackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800b974:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d009      	beq.n	800b992 <_ZNSt10unique_ptrI16TfLitePackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	f003 f9fb 	bl	800ed7a <_ZNSt10unique_ptrI16TfLitePackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800b984:	4602      	mov	r2, r0
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	4619      	mov	r1, r3
 800b98c:	4610      	mov	r0, r2
 800b98e:	f7fb f8fb 	bl	8006b88 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	2200      	movs	r2, #0
 800b996:	601a      	str	r2, [r3, #0]
      }
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	4618      	mov	r0, r3
 800b99c:	3710      	adds	r7, #16
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}

0800b9a2 <_ZStneI16TfLitePackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800b9a2:	b580      	push	{r7, lr}
 800b9a4:	b082      	sub	sp, #8
 800b9a6:	af00      	add	r7, sp, #0
 800b9a8:	6078      	str	r0, [r7, #4]
 800b9aa:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	f003 fa07 	bl	800edc0 <_ZNKSt10unique_ptrI16TfLitePackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3708      	adds	r7, #8
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}

0800b9bc <_ZNKSt10unique_ptrI16TfLitePackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b082      	sub	sp, #8
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
	return get();
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f003 fa0c 	bl	800ede2 <_ZNKSt10unique_ptrI16TfLitePackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800b9ca:	4603      	mov	r3, r0
      }
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	3708      	adds	r7, #8
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}

0800b9d4 <_ZNSt10unique_ptrI16TfLitePackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b084      	sub	sp, #16
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	f003 fa00 	bl	800ede2 <_ZNKSt10unique_ptrI16TfLitePackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800b9e2:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f003 f9ba 	bl	800ed60 <_ZNSt15__uniq_ptr_implI16TfLitePackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800b9ec:	4602      	mov	r2, r0
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	6013      	str	r3, [r2, #0]
	return __p;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
      }
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	3710      	adds	r7, #16
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}

0800b9fc <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI21TfLiteFakeQuantParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800b9fc:	b590      	push	{r4, r7, lr}
 800b9fe:	b085      	sub	sp, #20
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
 800ba04:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f003 f9f6 	bl	800edfc <_ZN6tflite20BuiltinDataAllocator11AllocatePODI21TfLiteFakeQuantParamsEEPT_v>
 800ba10:	4604      	mov	r4, r0
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	681a      	ldr	r2, [r3, #0]
 800ba16:	f107 030c 	add.w	r3, r7, #12
 800ba1a:	4611      	mov	r1, r2
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f7fb f8a4 	bl	8006b6a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800ba22:	f107 030c 	add.w	r3, r7, #12
 800ba26:	461a      	mov	r2, r3
 800ba28:	4621      	mov	r1, r4
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f003 fa07 	bl	800ee3e <_ZNSt10unique_ptrI21TfLiteFakeQuantParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	3714      	adds	r7, #20
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bd90      	pop	{r4, r7, pc}

0800ba38 <_ZNSt10unique_ptrI21TfLiteFakeQuantParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b084      	sub	sp, #16
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	4618      	mov	r0, r3
 800ba44:	f003 fa17 	bl	800ee76 <_ZNSt15__uniq_ptr_implI21TfLiteFakeQuantParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800ba48:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d009      	beq.n	800ba66 <_ZNSt10unique_ptrI21TfLiteFakeQuantParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f003 fa1c 	bl	800ee90 <_ZNSt10unique_ptrI21TfLiteFakeQuantParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800ba58:	4602      	mov	r2, r0
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	4619      	mov	r1, r3
 800ba60:	4610      	mov	r0, r2
 800ba62:	f7fb f891 	bl	8006b88 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	2200      	movs	r2, #0
 800ba6a:	601a      	str	r2, [r3, #0]
      }
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	4618      	mov	r0, r3
 800ba70:	3710      	adds	r7, #16
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}

0800ba76 <_ZStneI21TfLiteFakeQuantParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800ba76:	b580      	push	{r7, lr}
 800ba78:	b082      	sub	sp, #8
 800ba7a:	af00      	add	r7, sp, #0
 800ba7c:	6078      	str	r0, [r7, #4]
 800ba7e:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f003 fa28 	bl	800eed6 <_ZNKSt10unique_ptrI21TfLiteFakeQuantParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800ba86:	4603      	mov	r3, r0
 800ba88:	4618      	mov	r0, r3
 800ba8a:	3708      	adds	r7, #8
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}

0800ba90 <_ZNKSt10unique_ptrI21TfLiteFakeQuantParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b082      	sub	sp, #8
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
	return get();
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f003 fa2d 	bl	800eef8 <_ZNKSt10unique_ptrI21TfLiteFakeQuantParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800ba9e:	4603      	mov	r3, r0
      }
 800baa0:	4618      	mov	r0, r3
 800baa2:	3708      	adds	r7, #8
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}

0800baa8 <_ZNSt10unique_ptrI21TfLiteFakeQuantParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b084      	sub	sp, #16
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f003 fa21 	bl	800eef8 <_ZNKSt10unique_ptrI21TfLiteFakeQuantParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800bab6:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	4618      	mov	r0, r3
 800babc:	f003 f9db 	bl	800ee76 <_ZNSt15__uniq_ptr_implI21TfLiteFakeQuantParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800bac0:	4602      	mov	r2, r0
 800bac2:	2300      	movs	r3, #0
 800bac4:	6013      	str	r3, [r2, #0]
	return __p;
 800bac6:	68fb      	ldr	r3, [r7, #12]
      }
 800bac8:	4618      	mov	r0, r3
 800baca:	3710      	adds	r7, #16
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}

0800bad0 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI18TfLiteOneHotParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800bad0:	b590      	push	{r4, r7, lr}
 800bad2:	b085      	sub	sp, #20
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
 800bad8:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800bade:	4618      	mov	r0, r3
 800bae0:	f003 fa17 	bl	800ef12 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI18TfLiteOneHotParamsEEPT_v>
 800bae4:	4604      	mov	r4, r0
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	681a      	ldr	r2, [r3, #0]
 800baea:	f107 030c 	add.w	r3, r7, #12
 800baee:	4611      	mov	r1, r2
 800baf0:	4618      	mov	r0, r3
 800baf2:	f7fb f83a 	bl	8006b6a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800baf6:	f107 030c 	add.w	r3, r7, #12
 800bafa:	461a      	mov	r2, r3
 800bafc:	4621      	mov	r1, r4
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	f003 fa28 	bl	800ef54 <_ZNSt10unique_ptrI18TfLiteOneHotParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 800bb04:	6878      	ldr	r0, [r7, #4]
 800bb06:	3714      	adds	r7, #20
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd90      	pop	{r4, r7, pc}

0800bb0c <_ZNSt10unique_ptrI18TfLiteOneHotParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b084      	sub	sp, #16
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	4618      	mov	r0, r3
 800bb18:	f003 fa38 	bl	800ef8c <_ZNSt15__uniq_ptr_implI18TfLiteOneHotParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800bb1c:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d009      	beq.n	800bb3a <_ZNSt10unique_ptrI18TfLiteOneHotParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	f003 fa3d 	bl	800efa6 <_ZNSt10unique_ptrI18TfLiteOneHotParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800bb2c:	4602      	mov	r2, r0
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	4619      	mov	r1, r3
 800bb34:	4610      	mov	r0, r2
 800bb36:	f7fb f827 	bl	8006b88 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	601a      	str	r2, [r3, #0]
      }
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	4618      	mov	r0, r3
 800bb44:	3710      	adds	r7, #16
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}

0800bb4a <_ZStneI18TfLiteOneHotParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800bb4a:	b580      	push	{r7, lr}
 800bb4c:	b082      	sub	sp, #8
 800bb4e:	af00      	add	r7, sp, #0
 800bb50:	6078      	str	r0, [r7, #4]
 800bb52:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	f003 fa49 	bl	800efec <_ZNKSt10unique_ptrI18TfLiteOneHotParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3708      	adds	r7, #8
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}

0800bb64 <_ZNKSt10unique_ptrI18TfLiteOneHotParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b082      	sub	sp, #8
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
	return get();
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f003 fa4e 	bl	800f00e <_ZNKSt10unique_ptrI18TfLiteOneHotParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800bb72:	4603      	mov	r3, r0
      }
 800bb74:	4618      	mov	r0, r3
 800bb76:	3708      	adds	r7, #8
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}

0800bb7c <_ZNSt10unique_ptrI18TfLiteOneHotParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b084      	sub	sp, #16
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	f003 fa42 	bl	800f00e <_ZNKSt10unique_ptrI18TfLiteOneHotParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800bb8a:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f003 f9fc 	bl	800ef8c <_ZNSt15__uniq_ptr_implI18TfLiteOneHotParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800bb94:	4602      	mov	r2, r0
 800bb96:	2300      	movs	r3, #0
 800bb98:	6013      	str	r3, [r2, #0]
	return __p;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
      }
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	3710      	adds	r7, #16
 800bba0:	46bd      	mov	sp, r7
 800bba2:	bd80      	pop	{r7, pc}

0800bba4 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI18TfLiteUnpackParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800bba4:	b590      	push	{r4, r7, lr}
 800bba6:	b085      	sub	sp, #20
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
 800bbac:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f003 fa38 	bl	800f028 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI18TfLiteUnpackParamsEEPT_v>
 800bbb8:	4604      	mov	r4, r0
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	681a      	ldr	r2, [r3, #0]
 800bbbe:	f107 030c 	add.w	r3, r7, #12
 800bbc2:	4611      	mov	r1, r2
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	f7fa ffd0 	bl	8006b6a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800bbca:	f107 030c 	add.w	r3, r7, #12
 800bbce:	461a      	mov	r2, r3
 800bbd0:	4621      	mov	r1, r4
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f003 fa49 	bl	800f06a <_ZNSt10unique_ptrI18TfLiteUnpackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	3714      	adds	r7, #20
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	bd90      	pop	{r4, r7, pc}

0800bbe0 <_ZNSt10unique_ptrI18TfLiteUnpackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b084      	sub	sp, #16
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	4618      	mov	r0, r3
 800bbec:	f003 fa59 	bl	800f0a2 <_ZNSt15__uniq_ptr_implI18TfLiteUnpackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800bbf0:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d009      	beq.n	800bc0e <_ZNSt10unique_ptrI18TfLiteUnpackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f003 fa5e 	bl	800f0bc <_ZNSt10unique_ptrI18TfLiteUnpackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800bc00:	4602      	mov	r2, r0
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	4619      	mov	r1, r3
 800bc08:	4610      	mov	r0, r2
 800bc0a:	f7fa ffbd 	bl	8006b88 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	2200      	movs	r2, #0
 800bc12:	601a      	str	r2, [r3, #0]
      }
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	4618      	mov	r0, r3
 800bc18:	3710      	adds	r7, #16
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}

0800bc1e <_ZStneI18TfLiteUnpackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800bc1e:	b580      	push	{r7, lr}
 800bc20:	b082      	sub	sp, #8
 800bc22:	af00      	add	r7, sp, #0
 800bc24:	6078      	str	r0, [r7, #4]
 800bc26:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800bc28:	6878      	ldr	r0, [r7, #4]
 800bc2a:	f003 fa6a 	bl	800f102 <_ZNKSt10unique_ptrI18TfLiteUnpackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800bc2e:	4603      	mov	r3, r0
 800bc30:	4618      	mov	r0, r3
 800bc32:	3708      	adds	r7, #8
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}

0800bc38 <_ZNKSt10unique_ptrI18TfLiteUnpackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b082      	sub	sp, #8
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
	return get();
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	f003 fa6f 	bl	800f124 <_ZNKSt10unique_ptrI18TfLiteUnpackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800bc46:	4603      	mov	r3, r0
      }
 800bc48:	4618      	mov	r0, r3
 800bc4a:	3708      	adds	r7, #8
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}

0800bc50 <_ZNSt10unique_ptrI18TfLiteUnpackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b084      	sub	sp, #16
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f003 fa63 	bl	800f124 <_ZNKSt10unique_ptrI18TfLiteUnpackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800bc5e:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	4618      	mov	r0, r3
 800bc64:	f003 fa1d 	bl	800f0a2 <_ZNSt15__uniq_ptr_implI18TfLiteUnpackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800bc68:	4602      	mov	r2, r0
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	6013      	str	r3, [r2, #0]
	return __p;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
      }
 800bc70:	4618      	mov	r0, r3
 800bc72:	3710      	adds	r7, #16
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}

0800bc78 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI21TfLiteLeakyReluParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800bc78:	b590      	push	{r4, r7, lr}
 800bc7a:	b085      	sub	sp, #20
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
 800bc80:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800bc86:	4618      	mov	r0, r3
 800bc88:	f003 fa59 	bl	800f13e <_ZN6tflite20BuiltinDataAllocator11AllocatePODI21TfLiteLeakyReluParamsEEPT_v>
 800bc8c:	4604      	mov	r4, r0
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	681a      	ldr	r2, [r3, #0]
 800bc92:	f107 030c 	add.w	r3, r7, #12
 800bc96:	4611      	mov	r1, r2
 800bc98:	4618      	mov	r0, r3
 800bc9a:	f7fa ff66 	bl	8006b6a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800bc9e:	f107 030c 	add.w	r3, r7, #12
 800bca2:	461a      	mov	r2, r3
 800bca4:	4621      	mov	r1, r4
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	f003 fa6a 	bl	800f180 <_ZNSt10unique_ptrI21TfLiteLeakyReluParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 800bcac:	6878      	ldr	r0, [r7, #4]
 800bcae:	3714      	adds	r7, #20
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd90      	pop	{r4, r7, pc}

0800bcb4 <_ZNSt10unique_ptrI21TfLiteLeakyReluParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b084      	sub	sp, #16
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f003 fa7a 	bl	800f1b8 <_ZNSt15__uniq_ptr_implI21TfLiteLeakyReluParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800bcc4:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d009      	beq.n	800bce2 <_ZNSt10unique_ptrI21TfLiteLeakyReluParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f003 fa7f 	bl	800f1d2 <_ZNSt10unique_ptrI21TfLiteLeakyReluParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800bcd4:	4602      	mov	r2, r0
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	4619      	mov	r1, r3
 800bcdc:	4610      	mov	r0, r2
 800bcde:	f7fa ff53 	bl	8006b88 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	2200      	movs	r2, #0
 800bce6:	601a      	str	r2, [r3, #0]
      }
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	4618      	mov	r0, r3
 800bcec:	3710      	adds	r7, #16
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}

0800bcf2 <_ZStneI21TfLiteLeakyReluParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800bcf2:	b580      	push	{r7, lr}
 800bcf4:	b082      	sub	sp, #8
 800bcf6:	af00      	add	r7, sp, #0
 800bcf8:	6078      	str	r0, [r7, #4]
 800bcfa:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800bcfc:	6878      	ldr	r0, [r7, #4]
 800bcfe:	f003 fa8b 	bl	800f218 <_ZNKSt10unique_ptrI21TfLiteLeakyReluParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800bd02:	4603      	mov	r3, r0
 800bd04:	4618      	mov	r0, r3
 800bd06:	3708      	adds	r7, #8
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	bd80      	pop	{r7, pc}

0800bd0c <_ZNKSt10unique_ptrI21TfLiteLeakyReluParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b082      	sub	sp, #8
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
	return get();
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	f003 fa90 	bl	800f23a <_ZNKSt10unique_ptrI21TfLiteLeakyReluParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800bd1a:	4603      	mov	r3, r0
      }
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	3708      	adds	r7, #8
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}

0800bd24 <_ZNSt10unique_ptrI21TfLiteLeakyReluParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b084      	sub	sp, #16
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800bd2c:	6878      	ldr	r0, [r7, #4]
 800bd2e:	f003 fa84 	bl	800f23a <_ZNKSt10unique_ptrI21TfLiteLeakyReluParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800bd32:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	4618      	mov	r0, r3
 800bd38:	f003 fa3e 	bl	800f1b8 <_ZNSt15__uniq_ptr_implI21TfLiteLeakyReluParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800bd3c:	4602      	mov	r2, r0
 800bd3e:	2300      	movs	r3, #0
 800bd40:	6013      	str	r3, [r2, #0]
	return __p;
 800bd42:	68fb      	ldr	r3, [r7, #12]
      }
 800bd44:	4618      	mov	r0, r3
 800bd46:	3710      	adds	r7, #16
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bd80      	pop	{r7, pc}

0800bd4c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI25TfLiteMirrorPaddingParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800bd4c:	b590      	push	{r4, r7, lr}
 800bd4e:	b085      	sub	sp, #20
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
 800bd54:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f003 fa7a 	bl	800f254 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI25TfLiteMirrorPaddingParamsEEPT_v>
 800bd60:	4604      	mov	r4, r0
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	681a      	ldr	r2, [r3, #0]
 800bd66:	f107 030c 	add.w	r3, r7, #12
 800bd6a:	4611      	mov	r1, r2
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	f7fa fefc 	bl	8006b6a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800bd72:	f107 030c 	add.w	r3, r7, #12
 800bd76:	461a      	mov	r2, r3
 800bd78:	4621      	mov	r1, r4
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	f003 fa8b 	bl	800f296 <_ZNSt10unique_ptrI25TfLiteMirrorPaddingParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	3714      	adds	r7, #20
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd90      	pop	{r4, r7, pc}

0800bd88 <_ZNSt10unique_ptrI25TfLiteMirrorPaddingParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b084      	sub	sp, #16
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	4618      	mov	r0, r3
 800bd94:	f003 fa9b 	bl	800f2ce <_ZNSt15__uniq_ptr_implI25TfLiteMirrorPaddingParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800bd98:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d009      	beq.n	800bdb6 <_ZNSt10unique_ptrI25TfLiteMirrorPaddingParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	f003 faa0 	bl	800f2e8 <_ZNSt10unique_ptrI25TfLiteMirrorPaddingParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800bda8:	4602      	mov	r2, r0
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	4619      	mov	r1, r3
 800bdb0:	4610      	mov	r0, r2
 800bdb2:	f7fa fee9 	bl	8006b88 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	2200      	movs	r2, #0
 800bdba:	601a      	str	r2, [r3, #0]
      }
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	3710      	adds	r7, #16
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd80      	pop	{r7, pc}

0800bdc6 <_ZStneI25TfLiteMirrorPaddingParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800bdc6:	b580      	push	{r7, lr}
 800bdc8:	b082      	sub	sp, #8
 800bdca:	af00      	add	r7, sp, #0
 800bdcc:	6078      	str	r0, [r7, #4]
 800bdce:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800bdd0:	6878      	ldr	r0, [r7, #4]
 800bdd2:	f003 faac 	bl	800f32e <_ZNKSt10unique_ptrI25TfLiteMirrorPaddingParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	4618      	mov	r0, r3
 800bdda:	3708      	adds	r7, #8
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}

0800bde0 <_ZNKSt10unique_ptrI25TfLiteMirrorPaddingParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b082      	sub	sp, #8
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
	return get();
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f003 fab1 	bl	800f350 <_ZNKSt10unique_ptrI25TfLiteMirrorPaddingParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800bdee:	4603      	mov	r3, r0
      }
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	3708      	adds	r7, #8
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd80      	pop	{r7, pc}

0800bdf8 <_ZNSt10unique_ptrI25TfLiteMirrorPaddingParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b084      	sub	sp, #16
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800be00:	6878      	ldr	r0, [r7, #4]
 800be02:	f003 faa5 	bl	800f350 <_ZNKSt10unique_ptrI25TfLiteMirrorPaddingParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800be06:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	4618      	mov	r0, r3
 800be0c:	f003 fa5f 	bl	800f2ce <_ZNSt15__uniq_ptr_implI25TfLiteMirrorPaddingParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800be10:	4602      	mov	r2, r0
 800be12:	2300      	movs	r3, #0
 800be14:	6013      	str	r3, [r2, #0]
	return __p;
 800be16:	68fb      	ldr	r3, [r7, #12]
      }
 800be18:	4618      	mov	r0, r3
 800be1a:	3710      	adds	r7, #16
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}

0800be20 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI18TfLiteUniqueParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800be20:	b590      	push	{r4, r7, lr}
 800be22:	b085      	sub	sp, #20
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
 800be28:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800be2e:	4618      	mov	r0, r3
 800be30:	f003 fa9b 	bl	800f36a <_ZN6tflite20BuiltinDataAllocator11AllocatePODI18TfLiteUniqueParamsEEPT_v>
 800be34:	4604      	mov	r4, r0
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	681a      	ldr	r2, [r3, #0]
 800be3a:	f107 030c 	add.w	r3, r7, #12
 800be3e:	4611      	mov	r1, r2
 800be40:	4618      	mov	r0, r3
 800be42:	f7fa fe92 	bl	8006b6a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800be46:	f107 030c 	add.w	r3, r7, #12
 800be4a:	461a      	mov	r2, r3
 800be4c:	4621      	mov	r1, r4
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f003 faac 	bl	800f3ac <_ZNSt10unique_ptrI18TfLiteUniqueParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	3714      	adds	r7, #20
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd90      	pop	{r4, r7, pc}

0800be5c <_ZNSt10unique_ptrI18TfLiteUniqueParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b084      	sub	sp, #16
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	4618      	mov	r0, r3
 800be68:	f003 fabc 	bl	800f3e4 <_ZNSt15__uniq_ptr_implI18TfLiteUniqueParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800be6c:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d009      	beq.n	800be8a <_ZNSt10unique_ptrI18TfLiteUniqueParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f003 fac1 	bl	800f3fe <_ZNSt10unique_ptrI18TfLiteUniqueParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800be7c:	4602      	mov	r2, r0
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	4619      	mov	r1, r3
 800be84:	4610      	mov	r0, r2
 800be86:	f7fa fe7f 	bl	8006b88 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	2200      	movs	r2, #0
 800be8e:	601a      	str	r2, [r3, #0]
      }
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	4618      	mov	r0, r3
 800be94:	3710      	adds	r7, #16
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}

0800be9a <_ZStneI18TfLiteUniqueParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800be9a:	b580      	push	{r7, lr}
 800be9c:	b082      	sub	sp, #8
 800be9e:	af00      	add	r7, sp, #0
 800bea0:	6078      	str	r0, [r7, #4]
 800bea2:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800bea4:	6878      	ldr	r0, [r7, #4]
 800bea6:	f003 facd 	bl	800f444 <_ZNKSt10unique_ptrI18TfLiteUniqueParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800beaa:	4603      	mov	r3, r0
 800beac:	4618      	mov	r0, r3
 800beae:	3708      	adds	r7, #8
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd80      	pop	{r7, pc}

0800beb4 <_ZNKSt10unique_ptrI18TfLiteUniqueParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b082      	sub	sp, #8
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
	return get();
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f003 fad2 	bl	800f466 <_ZNKSt10unique_ptrI18TfLiteUniqueParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800bec2:	4603      	mov	r3, r0
      }
 800bec4:	4618      	mov	r0, r3
 800bec6:	3708      	adds	r7, #8
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd80      	pop	{r7, pc}

0800becc <_ZNSt10unique_ptrI18TfLiteUniqueParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800becc:	b580      	push	{r7, lr}
 800bece:	b084      	sub	sp, #16
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f003 fac6 	bl	800f466 <_ZNKSt10unique_ptrI18TfLiteUniqueParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800beda:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	4618      	mov	r0, r3
 800bee0:	f003 fa80 	bl	800f3e4 <_ZNSt15__uniq_ptr_implI18TfLiteUniqueParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800bee4:	4602      	mov	r2, r0
 800bee6:	2300      	movs	r3, #0
 800bee8:	6013      	str	r3, [r2, #0]
	return __p;
 800beea:	68fb      	ldr	r3, [r7, #12]
      }
 800beec:	4618      	mov	r0, r3
 800beee:	3710      	adds	r7, #16
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}

0800bef4 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI27TfLiteReverseSequenceParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800bef4:	b590      	push	{r4, r7, lr}
 800bef6:	b085      	sub	sp, #20
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
 800befc:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800bf02:	4618      	mov	r0, r3
 800bf04:	f003 fabc 	bl	800f480 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI27TfLiteReverseSequenceParamsEEPT_v>
 800bf08:	4604      	mov	r4, r0
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	681a      	ldr	r2, [r3, #0]
 800bf0e:	f107 030c 	add.w	r3, r7, #12
 800bf12:	4611      	mov	r1, r2
 800bf14:	4618      	mov	r0, r3
 800bf16:	f7fa fe28 	bl	8006b6a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800bf1a:	f107 030c 	add.w	r3, r7, #12
 800bf1e:	461a      	mov	r2, r3
 800bf20:	4621      	mov	r1, r4
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f003 facd 	bl	800f4c2 <_ZNSt10unique_ptrI27TfLiteReverseSequenceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 800bf28:	6878      	ldr	r0, [r7, #4]
 800bf2a:	3714      	adds	r7, #20
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd90      	pop	{r4, r7, pc}

0800bf30 <_ZNSt10unique_ptrI27TfLiteReverseSequenceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b084      	sub	sp, #16
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f003 fadd 	bl	800f4fa <_ZNSt15__uniq_ptr_implI27TfLiteReverseSequenceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800bf40:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d009      	beq.n	800bf5e <_ZNSt10unique_ptrI27TfLiteReverseSequenceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f003 fae2 	bl	800f514 <_ZNSt10unique_ptrI27TfLiteReverseSequenceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800bf50:	4602      	mov	r2, r0
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	4619      	mov	r1, r3
 800bf58:	4610      	mov	r0, r2
 800bf5a:	f7fa fe15 	bl	8006b88 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	2200      	movs	r2, #0
 800bf62:	601a      	str	r2, [r3, #0]
      }
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	4618      	mov	r0, r3
 800bf68:	3710      	adds	r7, #16
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bd80      	pop	{r7, pc}

0800bf6e <_ZStneI27TfLiteReverseSequenceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800bf6e:	b580      	push	{r7, lr}
 800bf70:	b082      	sub	sp, #8
 800bf72:	af00      	add	r7, sp, #0
 800bf74:	6078      	str	r0, [r7, #4]
 800bf76:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f003 faee 	bl	800f55a <_ZNKSt10unique_ptrI27TfLiteReverseSequenceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	4618      	mov	r0, r3
 800bf82:	3708      	adds	r7, #8
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}

0800bf88 <_ZNKSt10unique_ptrI27TfLiteReverseSequenceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b082      	sub	sp, #8
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
	return get();
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	f003 faf3 	bl	800f57c <_ZNKSt10unique_ptrI27TfLiteReverseSequenceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800bf96:	4603      	mov	r3, r0
      }
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3708      	adds	r7, #8
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}

0800bfa0 <_ZNSt10unique_ptrI27TfLiteReverseSequenceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b084      	sub	sp, #16
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f003 fae7 	bl	800f57c <_ZNKSt10unique_ptrI27TfLiteReverseSequenceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800bfae:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f003 faa1 	bl	800f4fa <_ZNSt15__uniq_ptr_implI27TfLiteReverseSequenceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800bfb8:	4602      	mov	r2, r0
 800bfba:	2300      	movs	r3, #0
 800bfbc:	6013      	str	r3, [r2, #0]
	return __p;
 800bfbe:	68fb      	ldr	r3, [r7, #12]
      }
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	3710      	adds	r7, #16
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}

0800bfc8 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI14TfLiteIfParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800bfc8:	b590      	push	{r4, r7, lr}
 800bfca:	b085      	sub	sp, #20
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
 800bfd0:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f003 fadd 	bl	800f596 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI14TfLiteIfParamsEEPT_v>
 800bfdc:	4604      	mov	r4, r0
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	681a      	ldr	r2, [r3, #0]
 800bfe2:	f107 030c 	add.w	r3, r7, #12
 800bfe6:	4611      	mov	r1, r2
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f7fa fdbe 	bl	8006b6a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800bfee:	f107 030c 	add.w	r3, r7, #12
 800bff2:	461a      	mov	r2, r3
 800bff4:	4621      	mov	r1, r4
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f003 faee 	bl	800f5d8 <_ZNSt10unique_ptrI14TfLiteIfParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	3714      	adds	r7, #20
 800c000:	46bd      	mov	sp, r7
 800c002:	bd90      	pop	{r4, r7, pc}

0800c004 <_ZNSt10unique_ptrI14TfLiteIfParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 800c004:	b580      	push	{r7, lr}
 800c006:	b084      	sub	sp, #16
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	4618      	mov	r0, r3
 800c010:	f003 fafe 	bl	800f610 <_ZNSt15__uniq_ptr_implI14TfLiteIfParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800c014:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d009      	beq.n	800c032 <_ZNSt10unique_ptrI14TfLiteIfParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f003 fb03 	bl	800f62a <_ZNSt10unique_ptrI14TfLiteIfParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800c024:	4602      	mov	r2, r0
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	4619      	mov	r1, r3
 800c02c:	4610      	mov	r0, r2
 800c02e:	f7fa fdab 	bl	8006b88 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	2200      	movs	r2, #0
 800c036:	601a      	str	r2, [r3, #0]
      }
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	4618      	mov	r0, r3
 800c03c:	3710      	adds	r7, #16
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}

0800c042 <_ZStneI14TfLiteIfParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800c042:	b580      	push	{r7, lr}
 800c044:	b082      	sub	sp, #8
 800c046:	af00      	add	r7, sp, #0
 800c048:	6078      	str	r0, [r7, #4]
 800c04a:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f003 fb0f 	bl	800f670 <_ZNKSt10unique_ptrI14TfLiteIfParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800c052:	4603      	mov	r3, r0
 800c054:	4618      	mov	r0, r3
 800c056:	3708      	adds	r7, #8
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}

0800c05c <_ZNKSt10unique_ptrI14TfLiteIfParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b082      	sub	sp, #8
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
	return get();
 800c064:	6878      	ldr	r0, [r7, #4]
 800c066:	f003 fb14 	bl	800f692 <_ZNKSt10unique_ptrI14TfLiteIfParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800c06a:	4603      	mov	r3, r0
      }
 800c06c:	4618      	mov	r0, r3
 800c06e:	3708      	adds	r7, #8
 800c070:	46bd      	mov	sp, r7
 800c072:	bd80      	pop	{r7, pc}

0800c074 <_ZNSt10unique_ptrI14TfLiteIfParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800c074:	b580      	push	{r7, lr}
 800c076:	b084      	sub	sp, #16
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f003 fb08 	bl	800f692 <_ZNKSt10unique_ptrI14TfLiteIfParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800c082:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	4618      	mov	r0, r3
 800c088:	f003 fac2 	bl	800f610 <_ZNSt15__uniq_ptr_implI14TfLiteIfParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800c08c:	4602      	mov	r2, r0
 800c08e:	2300      	movs	r3, #0
 800c090:	6013      	str	r3, [r2, #0]
	return __p;
 800c092:	68fb      	ldr	r3, [r7, #12]
      }
 800c094:	4618      	mov	r0, r3
 800c096:	3710      	adds	r7, #16
 800c098:	46bd      	mov	sp, r7
 800c09a:	bd80      	pop	{r7, pc}

0800c09c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI17TfLiteWhileParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800c09c:	b590      	push	{r4, r7, lr}
 800c09e:	b085      	sub	sp, #20
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
 800c0a4:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	f003 fafe 	bl	800f6ac <_ZN6tflite20BuiltinDataAllocator11AllocatePODI17TfLiteWhileParamsEEPT_v>
 800c0b0:	4604      	mov	r4, r0
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	681a      	ldr	r2, [r3, #0]
 800c0b6:	f107 030c 	add.w	r3, r7, #12
 800c0ba:	4611      	mov	r1, r2
 800c0bc:	4618      	mov	r0, r3
 800c0be:	f7fa fd54 	bl	8006b6a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800c0c2:	f107 030c 	add.w	r3, r7, #12
 800c0c6:	461a      	mov	r2, r3
 800c0c8:	4621      	mov	r1, r4
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f003 fb0f 	bl	800f6ee <_ZNSt10unique_ptrI17TfLiteWhileParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	3714      	adds	r7, #20
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd90      	pop	{r4, r7, pc}

0800c0d8 <_ZNSt10unique_ptrI17TfLiteWhileParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b084      	sub	sp, #16
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f003 fb1f 	bl	800f726 <_ZNSt15__uniq_ptr_implI17TfLiteWhileParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800c0e8:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d009      	beq.n	800c106 <_ZNSt10unique_ptrI17TfLiteWhileParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f003 fb24 	bl	800f740 <_ZNSt10unique_ptrI17TfLiteWhileParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800c0f8:	4602      	mov	r2, r0
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	4619      	mov	r1, r3
 800c100:	4610      	mov	r0, r2
 800c102:	f7fa fd41 	bl	8006b88 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	2200      	movs	r2, #0
 800c10a:	601a      	str	r2, [r3, #0]
      }
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	4618      	mov	r0, r3
 800c110:	3710      	adds	r7, #16
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}

0800c116 <_ZStneI17TfLiteWhileParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800c116:	b580      	push	{r7, lr}
 800c118:	b082      	sub	sp, #8
 800c11a:	af00      	add	r7, sp, #0
 800c11c:	6078      	str	r0, [r7, #4]
 800c11e:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f003 fb30 	bl	800f786 <_ZNKSt10unique_ptrI17TfLiteWhileParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800c126:	4603      	mov	r3, r0
 800c128:	4618      	mov	r0, r3
 800c12a:	3708      	adds	r7, #8
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}

0800c130 <_ZNKSt10unique_ptrI17TfLiteWhileParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800c130:	b580      	push	{r7, lr}
 800c132:	b082      	sub	sp, #8
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
	return get();
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f003 fb35 	bl	800f7a8 <_ZNKSt10unique_ptrI17TfLiteWhileParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800c13e:	4603      	mov	r3, r0
      }
 800c140:	4618      	mov	r0, r3
 800c142:	3708      	adds	r7, #8
 800c144:	46bd      	mov	sp, r7
 800c146:	bd80      	pop	{r7, pc}

0800c148 <_ZNSt10unique_ptrI17TfLiteWhileParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800c148:	b580      	push	{r7, lr}
 800c14a:	b084      	sub	sp, #16
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f003 fb29 	bl	800f7a8 <_ZNKSt10unique_ptrI17TfLiteWhileParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800c156:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	4618      	mov	r0, r3
 800c15c:	f003 fae3 	bl	800f726 <_ZNSt15__uniq_ptr_implI17TfLiteWhileParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800c160:	4602      	mov	r2, r0
 800c162:	2300      	movs	r3, #0
 800c164:	6013      	str	r3, [r2, #0]
	return __p;
 800c166:	68fb      	ldr	r3, [r7, #12]
      }
 800c168:	4618      	mov	r0, r3
 800c16a:	3710      	adds	r7, #16
 800c16c:	46bd      	mov	sp, r7
 800c16e:	bd80      	pop	{r7, pc}

0800c170 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI23TfLiteBatchMatMulParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800c170:	b590      	push	{r4, r7, lr}
 800c172:	b085      	sub	sp, #20
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
 800c178:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800c17e:	4618      	mov	r0, r3
 800c180:	f003 fb1f 	bl	800f7c2 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI23TfLiteBatchMatMulParamsEEPT_v>
 800c184:	4604      	mov	r4, r0
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	681a      	ldr	r2, [r3, #0]
 800c18a:	f107 030c 	add.w	r3, r7, #12
 800c18e:	4611      	mov	r1, r2
 800c190:	4618      	mov	r0, r3
 800c192:	f7fa fcea 	bl	8006b6a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800c196:	f107 030c 	add.w	r3, r7, #12
 800c19a:	461a      	mov	r2, r3
 800c19c:	4621      	mov	r1, r4
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f003 fb30 	bl	800f804 <_ZNSt10unique_ptrI23TfLiteBatchMatMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 800c1a4:	6878      	ldr	r0, [r7, #4]
 800c1a6:	3714      	adds	r7, #20
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd90      	pop	{r4, r7, pc}

0800c1ac <_ZNSt10unique_ptrI23TfLiteBatchMatMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b084      	sub	sp, #16
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f003 fb40 	bl	800f83c <_ZNSt15__uniq_ptr_implI23TfLiteBatchMatMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800c1bc:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d009      	beq.n	800c1da <_ZNSt10unique_ptrI23TfLiteBatchMatMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f003 fb45 	bl	800f856 <_ZNSt10unique_ptrI23TfLiteBatchMatMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800c1cc:	4602      	mov	r2, r0
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	4619      	mov	r1, r3
 800c1d4:	4610      	mov	r0, r2
 800c1d6:	f7fa fcd7 	bl	8006b88 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	2200      	movs	r2, #0
 800c1de:	601a      	str	r2, [r3, #0]
      }
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	3710      	adds	r7, #16
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}

0800c1ea <_ZStneI23TfLiteBatchMatMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800c1ea:	b580      	push	{r7, lr}
 800c1ec:	b082      	sub	sp, #8
 800c1ee:	af00      	add	r7, sp, #0
 800c1f0:	6078      	str	r0, [r7, #4]
 800c1f2:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f003 fb51 	bl	800f89c <_ZNKSt10unique_ptrI23TfLiteBatchMatMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	3708      	adds	r7, #8
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}

0800c204 <_ZNKSt10unique_ptrI23TfLiteBatchMatMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800c204:	b580      	push	{r7, lr}
 800c206:	b082      	sub	sp, #8
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
	return get();
 800c20c:	6878      	ldr	r0, [r7, #4]
 800c20e:	f003 fb56 	bl	800f8be <_ZNKSt10unique_ptrI23TfLiteBatchMatMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800c212:	4603      	mov	r3, r0
      }
 800c214:	4618      	mov	r0, r3
 800c216:	3708      	adds	r7, #8
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}

0800c21c <_ZNSt10unique_ptrI23TfLiteBatchMatMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b084      	sub	sp, #16
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800c224:	6878      	ldr	r0, [r7, #4]
 800c226:	f003 fb4a 	bl	800f8be <_ZNKSt10unique_ptrI23TfLiteBatchMatMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800c22a:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	4618      	mov	r0, r3
 800c230:	f003 fb04 	bl	800f83c <_ZNSt15__uniq_ptr_implI23TfLiteBatchMatMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800c234:	4602      	mov	r2, r0
 800c236:	2300      	movs	r3, #0
 800c238:	6013      	str	r3, [r2, #0]
	return __p;
 800c23a:	68fb      	ldr	r3, [r7, #12]
      }
 800c23c:	4618      	mov	r0, r3
 800c23e:	3710      	adds	r7, #16
 800c240:	46bd      	mov	sp, r7
 800c242:	bd80      	pop	{r7, pc}

0800c244 <_ZN11flatbuffers12EndianScalarIhEET_S1_>:
template<typename T> T EndianScalar(T t) {
 800c244:	b480      	push	{r7}
 800c246:	b083      	sub	sp, #12
 800c248:	af00      	add	r7, sp, #0
 800c24a:	4603      	mov	r3, r0
 800c24c:	71fb      	strb	r3, [r7, #7]
    return t;
 800c24e:	79fb      	ldrb	r3, [r7, #7]
}
 800c250:	4618      	mov	r0, r3
 800c252:	370c      	adds	r7, #12
 800c254:	46bd      	mov	sp, r7
 800c256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25a:	4770      	bx	lr

0800c25c <_ZN11flatbuffers10ReadScalarIhEET_PKv>:
T ReadScalar(const void *p) {
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b082      	sub	sp, #8
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	781b      	ldrb	r3, [r3, #0]
 800c268:	4618      	mov	r0, r3
 800c26a:	f7ff ffeb 	bl	800c244 <_ZN11flatbuffers12EndianScalarIhEET_S1_>
 800c26e:	4603      	mov	r3, r0
}
 800c270:	4618      	mov	r0, r3
 800c272:	3708      	adds	r7, #8
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}

0800c278 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800c278:	b580      	push	{r7, lr}
 800c27a:	b084      	sub	sp, #16
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
 800c280:	460b      	mov	r3, r1
 800c282:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800c284:	887b      	ldrh	r3, [r7, #2]
 800c286:	4619      	mov	r1, r3
 800c288:	6878      	ldr	r0, [r7, #4]
 800c28a:	f7f4 ff1b 	bl	80010c4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800c28e:	4603      	mov	r3, r0
 800c290:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800c292:	687a      	ldr	r2, [r7, #4]
 800c294:	89fb      	ldrh	r3, [r7, #14]
 800c296:	4413      	add	r3, r2
 800c298:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800c29a:	89fb      	ldrh	r3, [r7, #14]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d006      	beq.n	800c2ae <_ZN11flatbuffers5Table10GetPointerIPKvEET_t+0x36>
 800c2a0:	68b8      	ldr	r0, [r7, #8]
 800c2a2:	f7f5 facd 	bl	8001840 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800c2a6:	4602      	mov	r2, r0
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	4413      	add	r3, r2
                        : nullptr;
 800c2ac:	e000      	b.n	800c2b0 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800c2ae:	2300      	movs	r3, #0
  }
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	3710      	adds	r7, #16
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd80      	pop	{r7, pc}

0800c2b8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b084      	sub	sp, #16
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
 800c2c0:	460b      	mov	r3, r1
 800c2c2:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800c2c4:	887b      	ldrh	r3, [r7, #2]
 800c2c6:	4619      	mov	r1, r3
 800c2c8:	6878      	ldr	r0, [r7, #4]
 800c2ca:	f7f4 fefb 	bl	80010c4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800c2d2:	687a      	ldr	r2, [r7, #4]
 800c2d4:	89fb      	ldrh	r3, [r7, #14]
 800c2d6:	4413      	add	r3, r2
 800c2d8:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800c2da:	89fb      	ldrh	r3, [r7, #14]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d006      	beq.n	800c2ee <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t+0x36>
 800c2e0:	68b8      	ldr	r0, [r7, #8]
 800c2e2:	f7f5 faad 	bl	8001840 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800c2e6:	4602      	mov	r2, r0
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	4413      	add	r3, r2
                        : nullptr;
 800c2ec:	e000      	b.n	800c2f0 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800c2ee:	2300      	movs	r3, #0
  }
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	3710      	adds	r7, #16
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bd80      	pop	{r7, pc}

0800c2f8 <_ZN11flatbuffers10ReadScalarIaEET_PKv>:
T ReadScalar(const void *p) {
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b082      	sub	sp, #8
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f993 3000 	ldrsb.w	r3, [r3]
 800c306:	4618      	mov	r0, r3
 800c308:	f003 fae6 	bl	800f8d8 <_ZN11flatbuffers12EndianScalarIaEET_S1_>
 800c30c:	4603      	mov	r3, r0
}
 800c30e:	4618      	mov	r0, r3
 800c310:	3708      	adds	r7, #8
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}

0800c316 <_ZN11flatbuffers10ReadScalarIfEET_PKv>:
T ReadScalar(const void *p) {
 800c316:	b580      	push	{r7, lr}
 800c318:	b082      	sub	sp, #8
 800c31a:	af00      	add	r7, sp, #0
 800c31c:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	edd3 7a00 	vldr	s15, [r3]
 800c324:	eeb0 0a67 	vmov.f32	s0, s15
 800c328:	f003 fae3 	bl	800f8f2 <_ZN11flatbuffers12EndianScalarIfEET_S1_>
 800c32c:	eef0 7a40 	vmov.f32	s15, s0
}
 800c330:	eeb0 0a67 	vmov.f32	s0, s15
 800c334:	3708      	adds	r7, #8
 800c336:	46bd      	mov	sp, r7
 800c338:	bd80      	pop	{r7, pc}

0800c33a <_ZN11flatbuffers14IndirectHelperIlE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800c33a:	b580      	push	{r7, lr}
 800c33c:	b082      	sub	sp, #8
 800c33e:	af00      	add	r7, sp, #0
 800c340:	6078      	str	r0, [r7, #4]
 800c342:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	009b      	lsls	r3, r3, #2
 800c348:	687a      	ldr	r2, [r7, #4]
 800c34a:	4413      	add	r3, r2
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	4618      	mov	r0, r3
 800c350:	f7f5 fb5a 	bl	8001a08 <_ZN11flatbuffers12EndianScalarIlEET_S1_>
 800c354:	4603      	mov	r3, r0
  }
 800c356:	4618      	mov	r0, r3
 800c358:	3708      	adds	r7, #8
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}

0800c35e <_ZNK11flatbuffers6VectorIlE4DataEv>:
  const uint8_t *Data() const {
 800c35e:	b480      	push	{r7}
 800c360:	b083      	sub	sp, #12
 800c362:	af00      	add	r7, sp, #0
 800c364:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	3304      	adds	r3, #4
  }
 800c36a:	4618      	mov	r0, r3
 800c36c:	370c      	adds	r7, #12
 800c36e:	46bd      	mov	sp, r7
 800c370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c374:	4770      	bx	lr

0800c376 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI16TfLiteConvParamsEEPT_v>:
  // Allocate a structure, but make sure it is a POD structure that doesn't
  // require constructors to run. The reason we do this, is that Interpreter's C
  // extension part will take ownership so destructors  will not be run during
  // deallocation.
  template <typename T>
  T* AllocatePOD() {
 800c376:	b580      	push	{r7, lr}
 800c378:	b084      	sub	sp, #16
 800c37a:	af00      	add	r7, sp, #0
 800c37c:	6078      	str	r0, [r7, #4]
    // TODO(b/154346074): Change this to is_trivially_destructible when all
    // platform targets support that properly.
    static_assert(std::is_pod<T>::value, "Builtin data structure must be POD.");
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	2204      	movs	r2, #4
 800c386:	2118      	movs	r1, #24
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	4798      	blx	r3
 800c38c:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	4619      	mov	r1, r3
 800c392:	2018      	movs	r0, #24
 800c394:	f7f9 f84d 	bl	8005432 <_ZnwjPv>
 800c398:	4603      	mov	r3, r0
  }
 800c39a:	4618      	mov	r0, r3
 800c39c:	3710      	adds	r7, #16
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd80      	pop	{r7, pc}

0800c3a2 <_ZSt4moveIRP16TfLiteConvParamsEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800c3a2:	b480      	push	{r7}
 800c3a4:	b083      	sub	sp, #12
 800c3a6:	af00      	add	r7, sp, #0
 800c3a8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	370c      	adds	r7, #12
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b6:	4770      	bx	lr

0800c3b8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800c3b8:	b480      	push	{r7}
 800c3ba:	b083      	sub	sp, #12
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	370c      	adds	r7, #12
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3cc:	4770      	bx	lr

0800c3ce <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 800c3ce:	b5b0      	push	{r4, r5, r7, lr}
 800c3d0:	b084      	sub	sp, #16
 800c3d2:	af00      	add	r7, sp, #0
 800c3d4:	60f8      	str	r0, [r7, #12]
 800c3d6:	60b9      	str	r1, [r7, #8]
 800c3d8:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800c3da:	68fc      	ldr	r4, [r7, #12]
 800c3dc:	f107 0308 	add.w	r3, r7, #8
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	f7ff ffde 	bl	800c3a2 <_ZSt4moveIRP16TfLiteConvParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	681d      	ldr	r5, [r3, #0]
 800c3ea:	6878      	ldr	r0, [r7, #4]
 800c3ec:	f7ff ffe4 	bl	800c3b8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	461a      	mov	r2, r3
 800c3f4:	4629      	mov	r1, r5
 800c3f6:	4620      	mov	r0, r4
 800c3f8:	f000 f82a 	bl	800c450 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	4618      	mov	r0, r3
 800c400:	3710      	adds	r7, #16
 800c402:	46bd      	mov	sp, r7
 800c404:	bdb0      	pop	{r4, r5, r7, pc}

0800c406 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800c406:	b580      	push	{r7, lr}
 800c408:	b082      	sub	sp, #8
 800c40a:	af00      	add	r7, sp, #0
 800c40c:	6078      	str	r0, [r7, #4]
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	4618      	mov	r0, r3
 800c412:	f003 fa7d 	bl	800f910 <_ZSt3getILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800c416:	4603      	mov	r3, r0
 800c418:	4618      	mov	r0, r3
 800c41a:	3708      	adds	r7, #8
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}

0800c420 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800c420:	b580      	push	{r7, lr}
 800c422:	b082      	sub	sp, #8
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	4618      	mov	r0, r3
 800c42c:	f003 fa7d 	bl	800f92a <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800c430:	4603      	mov	r3, r0
 800c432:	4618      	mov	r0, r3
 800c434:	3708      	adds	r7, #8
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}

0800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c43a:	b480      	push	{r7}
 800c43c:	b083      	sub	sp, #12
 800c43e:	af00      	add	r7, sp, #0
 800c440:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	4618      	mov	r0, r3
 800c446:	370c      	adds	r7, #12
 800c448:	46bd      	mov	sp, r7
 800c44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44e:	4770      	bx	lr

0800c450 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800c450:	b590      	push	{r4, r7, lr}
 800c452:	b085      	sub	sp, #20
 800c454:	af00      	add	r7, sp, #0
 800c456:	60f8      	str	r0, [r7, #12]
 800c458:	60b9      	str	r1, [r7, #8]
 800c45a:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800c45c:	68fc      	ldr	r4, [r7, #12]
 800c45e:	6878      	ldr	r0, [r7, #4]
 800c460:	f7ff ffeb 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800c464:	4602      	mov	r2, r0
 800c466:	f107 0308 	add.w	r3, r7, #8
 800c46a:	4619      	mov	r1, r3
 800c46c:	4620      	mov	r0, r4
 800c46e:	f003 fa74 	bl	800f95a <_ZNSt5tupleIJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	4618      	mov	r0, r3
 800c476:	3714      	adds	r7, #20
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd90      	pop	{r4, r7, pc}

0800c47c <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b082      	sub	sp, #8
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	f000 f80a 	bl	800c49e <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800c48a:	4603      	mov	r3, r0
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	bf14      	ite	ne
 800c490:	2301      	movne	r3, #1
 800c492:	2300      	moveq	r3, #0
 800c494:	b2db      	uxtb	r3, r3
 800c496:	4618      	mov	r0, r3
 800c498:	3708      	adds	r7, #8
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bd80      	pop	{r7, pc}

0800c49e <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800c49e:	b580      	push	{r7, lr}
 800c4a0:	b082      	sub	sp, #8
 800c4a2:	af00      	add	r7, sp, #0
 800c4a4:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	f003 fa6f 	bl	800f98c <_ZNKSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	3708      	adds	r7, #8
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	bd80      	pop	{r7, pc}

0800c4b8 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI16TfLiteCastParamsEEPT_v>:
  T* AllocatePOD() {
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b084      	sub	sp, #16
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	2201      	movs	r2, #1
 800c4c8:	2102      	movs	r1, #2
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	4798      	blx	r3
 800c4ce:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	4619      	mov	r1, r3
 800c4d4:	2002      	movs	r0, #2
 800c4d6:	f7f8 ffac 	bl	8005432 <_ZnwjPv>
 800c4da:	4603      	mov	r3, r0
  }
 800c4dc:	4618      	mov	r0, r3
 800c4de:	3710      	adds	r7, #16
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	bd80      	pop	{r7, pc}

0800c4e4 <_ZSt4moveIRP16TfLiteCastParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800c4e4:	b480      	push	{r7}
 800c4e6:	b083      	sub	sp, #12
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	370c      	adds	r7, #12
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f8:	4770      	bx	lr

0800c4fa <_ZNSt10unique_ptrI16TfLiteCastParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 800c4fa:	b5b0      	push	{r4, r5, r7, lr}
 800c4fc:	b084      	sub	sp, #16
 800c4fe:	af00      	add	r7, sp, #0
 800c500:	60f8      	str	r0, [r7, #12]
 800c502:	60b9      	str	r1, [r7, #8]
 800c504:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800c506:	68fc      	ldr	r4, [r7, #12]
 800c508:	f107 0308 	add.w	r3, r7, #8
 800c50c:	4618      	mov	r0, r3
 800c50e:	f7ff ffe9 	bl	800c4e4 <_ZSt4moveIRP16TfLiteCastParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800c512:	4603      	mov	r3, r0
 800c514:	681d      	ldr	r5, [r3, #0]
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	f7ff ff4e 	bl	800c3b8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800c51c:	4603      	mov	r3, r0
 800c51e:	461a      	mov	r2, r3
 800c520:	4629      	mov	r1, r5
 800c522:	4620      	mov	r0, r4
 800c524:	f000 f81f 	bl	800c566 <_ZNSt15__uniq_ptr_implI16TfLiteCastParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	4618      	mov	r0, r3
 800c52c:	3710      	adds	r7, #16
 800c52e:	46bd      	mov	sp, r7
 800c530:	bdb0      	pop	{r4, r5, r7, pc}

0800c532 <_ZNSt15__uniq_ptr_implI16TfLiteCastParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800c532:	b580      	push	{r7, lr}
 800c534:	b082      	sub	sp, #8
 800c536:	af00      	add	r7, sp, #0
 800c538:	6078      	str	r0, [r7, #4]
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	4618      	mov	r0, r3
 800c53e:	f003 fa33 	bl	800f9a8 <_ZSt3getILj0EJP16TfLiteCastParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800c542:	4603      	mov	r3, r0
 800c544:	4618      	mov	r0, r3
 800c546:	3708      	adds	r7, #8
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd80      	pop	{r7, pc}

0800c54c <_ZNSt10unique_ptrI16TfLiteCastParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b082      	sub	sp, #8
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	4618      	mov	r0, r3
 800c558:	f003 fa33 	bl	800f9c2 <_ZNSt15__uniq_ptr_implI16TfLiteCastParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800c55c:	4603      	mov	r3, r0
 800c55e:	4618      	mov	r0, r3
 800c560:	3708      	adds	r7, #8
 800c562:	46bd      	mov	sp, r7
 800c564:	bd80      	pop	{r7, pc}

0800c566 <_ZNSt15__uniq_ptr_implI16TfLiteCastParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800c566:	b590      	push	{r4, r7, lr}
 800c568:	b085      	sub	sp, #20
 800c56a:	af00      	add	r7, sp, #0
 800c56c:	60f8      	str	r0, [r7, #12]
 800c56e:	60b9      	str	r1, [r7, #8]
 800c570:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800c572:	68fc      	ldr	r4, [r7, #12]
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f7ff ff60 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800c57a:	4602      	mov	r2, r0
 800c57c:	f107 0308 	add.w	r3, r7, #8
 800c580:	4619      	mov	r1, r3
 800c582:	4620      	mov	r0, r4
 800c584:	f003 fa35 	bl	800f9f2 <_ZNSt5tupleIJP16TfLiteCastParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	4618      	mov	r0, r3
 800c58c:	3714      	adds	r7, #20
 800c58e:	46bd      	mov	sp, r7
 800c590:	bd90      	pop	{r4, r7, pc}

0800c592 <_ZNKSt10unique_ptrI16TfLiteCastParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800c592:	b580      	push	{r7, lr}
 800c594:	b082      	sub	sp, #8
 800c596:	af00      	add	r7, sp, #0
 800c598:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800c59a:	6878      	ldr	r0, [r7, #4]
 800c59c:	f000 f80a 	bl	800c5b4 <_ZNKSt10unique_ptrI16TfLiteCastParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800c5a0:	4603      	mov	r3, r0
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	bf14      	ite	ne
 800c5a6:	2301      	movne	r3, #1
 800c5a8:	2300      	moveq	r3, #0
 800c5aa:	b2db      	uxtb	r3, r3
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	3708      	adds	r7, #8
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd80      	pop	{r7, pc}

0800c5b4 <_ZNKSt10unique_ptrI16TfLiteCastParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b082      	sub	sp, #8
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f003 fa30 	bl	800fa24 <_ZNKSt15__uniq_ptr_implI16TfLiteCastParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	3708      	adds	r7, #8
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	bd80      	pop	{r7, pc}

0800c5ce <_ZN6tflite20BuiltinDataAllocator11AllocatePODI25TfLiteLSHProjectionParamsEEPT_v>:
  T* AllocatePOD() {
 800c5ce:	b580      	push	{r7, lr}
 800c5d0:	b084      	sub	sp, #16
 800c5d2:	af00      	add	r7, sp, #0
 800c5d4:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	2201      	movs	r2, #1
 800c5de:	2101      	movs	r1, #1
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	4798      	blx	r3
 800c5e4:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	4619      	mov	r1, r3
 800c5ea:	2001      	movs	r0, #1
 800c5ec:	f7f8 ff21 	bl	8005432 <_ZnwjPv>
 800c5f0:	4603      	mov	r3, r0
  }
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3710      	adds	r7, #16
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}

0800c5fa <_ZSt4moveIRP25TfLiteLSHProjectionParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800c5fa:	b480      	push	{r7}
 800c5fc:	b083      	sub	sp, #12
 800c5fe:	af00      	add	r7, sp, #0
 800c600:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	4618      	mov	r0, r3
 800c606:	370c      	adds	r7, #12
 800c608:	46bd      	mov	sp, r7
 800c60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60e:	4770      	bx	lr

0800c610 <_ZNSt10unique_ptrI25TfLiteLSHProjectionParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 800c610:	b5b0      	push	{r4, r5, r7, lr}
 800c612:	b084      	sub	sp, #16
 800c614:	af00      	add	r7, sp, #0
 800c616:	60f8      	str	r0, [r7, #12]
 800c618:	60b9      	str	r1, [r7, #8]
 800c61a:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800c61c:	68fc      	ldr	r4, [r7, #12]
 800c61e:	f107 0308 	add.w	r3, r7, #8
 800c622:	4618      	mov	r0, r3
 800c624:	f7ff ffe9 	bl	800c5fa <_ZSt4moveIRP25TfLiteLSHProjectionParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800c628:	4603      	mov	r3, r0
 800c62a:	681d      	ldr	r5, [r3, #0]
 800c62c:	6878      	ldr	r0, [r7, #4]
 800c62e:	f7ff fec3 	bl	800c3b8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800c632:	4603      	mov	r3, r0
 800c634:	461a      	mov	r2, r3
 800c636:	4629      	mov	r1, r5
 800c638:	4620      	mov	r0, r4
 800c63a:	f000 f81f 	bl	800c67c <_ZNSt15__uniq_ptr_implI25TfLiteLSHProjectionParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	4618      	mov	r0, r3
 800c642:	3710      	adds	r7, #16
 800c644:	46bd      	mov	sp, r7
 800c646:	bdb0      	pop	{r4, r5, r7, pc}

0800c648 <_ZNSt15__uniq_ptr_implI25TfLiteLSHProjectionParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800c648:	b580      	push	{r7, lr}
 800c64a:	b082      	sub	sp, #8
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	4618      	mov	r0, r3
 800c654:	f003 f9f4 	bl	800fa40 <_ZSt3getILj0EJP25TfLiteLSHProjectionParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800c658:	4603      	mov	r3, r0
 800c65a:	4618      	mov	r0, r3
 800c65c:	3708      	adds	r7, #8
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd80      	pop	{r7, pc}

0800c662 <_ZNSt10unique_ptrI25TfLiteLSHProjectionParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800c662:	b580      	push	{r7, lr}
 800c664:	b082      	sub	sp, #8
 800c666:	af00      	add	r7, sp, #0
 800c668:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	4618      	mov	r0, r3
 800c66e:	f003 f9f4 	bl	800fa5a <_ZNSt15__uniq_ptr_implI25TfLiteLSHProjectionParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800c672:	4603      	mov	r3, r0
 800c674:	4618      	mov	r0, r3
 800c676:	3708      	adds	r7, #8
 800c678:	46bd      	mov	sp, r7
 800c67a:	bd80      	pop	{r7, pc}

0800c67c <_ZNSt15__uniq_ptr_implI25TfLiteLSHProjectionParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800c67c:	b590      	push	{r4, r7, lr}
 800c67e:	b085      	sub	sp, #20
 800c680:	af00      	add	r7, sp, #0
 800c682:	60f8      	str	r0, [r7, #12]
 800c684:	60b9      	str	r1, [r7, #8]
 800c686:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800c688:	68fc      	ldr	r4, [r7, #12]
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	f7ff fed5 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800c690:	4602      	mov	r2, r0
 800c692:	f107 0308 	add.w	r3, r7, #8
 800c696:	4619      	mov	r1, r3
 800c698:	4620      	mov	r0, r4
 800c69a:	f003 f9f6 	bl	800fa8a <_ZNSt5tupleIJP25TfLiteLSHProjectionParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	3714      	adds	r7, #20
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd90      	pop	{r4, r7, pc}

0800c6a8 <_ZNKSt10unique_ptrI25TfLiteLSHProjectionParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b082      	sub	sp, #8
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f000 f80a 	bl	800c6ca <_ZNKSt10unique_ptrI25TfLiteLSHProjectionParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	bf14      	ite	ne
 800c6bc:	2301      	movne	r3, #1
 800c6be:	2300      	moveq	r3, #0
 800c6c0:	b2db      	uxtb	r3, r3
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	3708      	adds	r7, #8
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	bd80      	pop	{r7, pc}

0800c6ca <_ZNKSt10unique_ptrI25TfLiteLSHProjectionParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800c6ca:	b580      	push	{r7, lr}
 800c6cc:	b082      	sub	sp, #8
 800c6ce:	af00      	add	r7, sp, #0
 800c6d0:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	f003 f9f1 	bl	800fabc <_ZNKSt15__uniq_ptr_implI25TfLiteLSHProjectionParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800c6da:	4603      	mov	r3, r0
 800c6dc:	4618      	mov	r0, r3
 800c6de:	3708      	adds	r7, #8
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	bd80      	pop	{r7, pc}

0800c6e4 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI16TfLitePoolParamsEEPT_v>:
  T* AllocatePOD() {
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b084      	sub	sp, #16
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	2204      	movs	r2, #4
 800c6f4:	2128      	movs	r1, #40	; 0x28
 800c6f6:	6878      	ldr	r0, [r7, #4]
 800c6f8:	4798      	blx	r3
 800c6fa:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	4619      	mov	r1, r3
 800c700:	2028      	movs	r0, #40	; 0x28
 800c702:	f7f8 fe96 	bl	8005432 <_ZnwjPv>
 800c706:	4603      	mov	r3, r0
  }
 800c708:	4618      	mov	r0, r3
 800c70a:	3710      	adds	r7, #16
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}

0800c710 <_ZSt4moveIRP16TfLitePoolParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800c710:	b480      	push	{r7}
 800c712:	b083      	sub	sp, #12
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	4618      	mov	r0, r3
 800c71c:	370c      	adds	r7, #12
 800c71e:	46bd      	mov	sp, r7
 800c720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c724:	4770      	bx	lr

0800c726 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 800c726:	b5b0      	push	{r4, r5, r7, lr}
 800c728:	b084      	sub	sp, #16
 800c72a:	af00      	add	r7, sp, #0
 800c72c:	60f8      	str	r0, [r7, #12]
 800c72e:	60b9      	str	r1, [r7, #8]
 800c730:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800c732:	68fc      	ldr	r4, [r7, #12]
 800c734:	f107 0308 	add.w	r3, r7, #8
 800c738:	4618      	mov	r0, r3
 800c73a:	f7ff ffe9 	bl	800c710 <_ZSt4moveIRP16TfLitePoolParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800c73e:	4603      	mov	r3, r0
 800c740:	681d      	ldr	r5, [r3, #0]
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	f7ff fe38 	bl	800c3b8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800c748:	4603      	mov	r3, r0
 800c74a:	461a      	mov	r2, r3
 800c74c:	4629      	mov	r1, r5
 800c74e:	4620      	mov	r0, r4
 800c750:	f000 f81f 	bl	800c792 <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	4618      	mov	r0, r3
 800c758:	3710      	adds	r7, #16
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bdb0      	pop	{r4, r5, r7, pc}

0800c75e <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800c75e:	b580      	push	{r7, lr}
 800c760:	b082      	sub	sp, #8
 800c762:	af00      	add	r7, sp, #0
 800c764:	6078      	str	r0, [r7, #4]
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	4618      	mov	r0, r3
 800c76a:	f003 f9b5 	bl	800fad8 <_ZSt3getILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800c76e:	4603      	mov	r3, r0
 800c770:	4618      	mov	r0, r3
 800c772:	3708      	adds	r7, #8
 800c774:	46bd      	mov	sp, r7
 800c776:	bd80      	pop	{r7, pc}

0800c778 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800c778:	b580      	push	{r7, lr}
 800c77a:	b082      	sub	sp, #8
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	4618      	mov	r0, r3
 800c784:	f003 f9b5 	bl	800faf2 <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800c788:	4603      	mov	r3, r0
 800c78a:	4618      	mov	r0, r3
 800c78c:	3708      	adds	r7, #8
 800c78e:	46bd      	mov	sp, r7
 800c790:	bd80      	pop	{r7, pc}

0800c792 <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800c792:	b590      	push	{r4, r7, lr}
 800c794:	b085      	sub	sp, #20
 800c796:	af00      	add	r7, sp, #0
 800c798:	60f8      	str	r0, [r7, #12]
 800c79a:	60b9      	str	r1, [r7, #8]
 800c79c:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800c79e:	68fc      	ldr	r4, [r7, #12]
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	f7ff fe4a 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800c7a6:	4602      	mov	r2, r0
 800c7a8:	f107 0308 	add.w	r3, r7, #8
 800c7ac:	4619      	mov	r1, r3
 800c7ae:	4620      	mov	r0, r4
 800c7b0:	f003 f9b7 	bl	800fb22 <_ZNSt5tupleIJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	3714      	adds	r7, #20
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd90      	pop	{r4, r7, pc}

0800c7be <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800c7be:	b580      	push	{r7, lr}
 800c7c0:	b082      	sub	sp, #8
 800c7c2:	af00      	add	r7, sp, #0
 800c7c4:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800c7c6:	6878      	ldr	r0, [r7, #4]
 800c7c8:	f000 f80a 	bl	800c7e0 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	bf14      	ite	ne
 800c7d2:	2301      	movne	r3, #1
 800c7d4:	2300      	moveq	r3, #0
 800c7d6:	b2db      	uxtb	r3, r3
 800c7d8:	4618      	mov	r0, r3
 800c7da:	3708      	adds	r7, #8
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	bd80      	pop	{r7, pc}

0800c7e0 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b082      	sub	sp, #8
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	f003 f9b2 	bl	800fb54 <_ZNKSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	3708      	adds	r7, #8
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd80      	pop	{r7, pc}

0800c7fa <_ZN6tflite20BuiltinDataAllocator11AllocatePODI25TfLiteDepthwiseConvParamsEEPT_v>:
  T* AllocatePOD() {
 800c7fa:	b580      	push	{r7, lr}
 800c7fc:	b084      	sub	sp, #16
 800c7fe:	af00      	add	r7, sp, #0
 800c800:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	2204      	movs	r2, #4
 800c80a:	211c      	movs	r1, #28
 800c80c:	6878      	ldr	r0, [r7, #4]
 800c80e:	4798      	blx	r3
 800c810:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	4619      	mov	r1, r3
 800c816:	201c      	movs	r0, #28
 800c818:	f7f8 fe0b 	bl	8005432 <_ZnwjPv>
 800c81c:	4603      	mov	r3, r0
  }
 800c81e:	4618      	mov	r0, r3
 800c820:	3710      	adds	r7, #16
 800c822:	46bd      	mov	sp, r7
 800c824:	bd80      	pop	{r7, pc}

0800c826 <_ZSt4moveIRP25TfLiteDepthwiseConvParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800c826:	b480      	push	{r7}
 800c828:	b083      	sub	sp, #12
 800c82a:	af00      	add	r7, sp, #0
 800c82c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	4618      	mov	r0, r3
 800c832:	370c      	adds	r7, #12
 800c834:	46bd      	mov	sp, r7
 800c836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83a:	4770      	bx	lr

0800c83c <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 800c83c:	b5b0      	push	{r4, r5, r7, lr}
 800c83e:	b084      	sub	sp, #16
 800c840:	af00      	add	r7, sp, #0
 800c842:	60f8      	str	r0, [r7, #12]
 800c844:	60b9      	str	r1, [r7, #8]
 800c846:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800c848:	68fc      	ldr	r4, [r7, #12]
 800c84a:	f107 0308 	add.w	r3, r7, #8
 800c84e:	4618      	mov	r0, r3
 800c850:	f7ff ffe9 	bl	800c826 <_ZSt4moveIRP25TfLiteDepthwiseConvParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800c854:	4603      	mov	r3, r0
 800c856:	681d      	ldr	r5, [r3, #0]
 800c858:	6878      	ldr	r0, [r7, #4]
 800c85a:	f7ff fdad 	bl	800c3b8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800c85e:	4603      	mov	r3, r0
 800c860:	461a      	mov	r2, r3
 800c862:	4629      	mov	r1, r5
 800c864:	4620      	mov	r0, r4
 800c866:	f000 f81f 	bl	800c8a8 <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	4618      	mov	r0, r3
 800c86e:	3710      	adds	r7, #16
 800c870:	46bd      	mov	sp, r7
 800c872:	bdb0      	pop	{r4, r5, r7, pc}

0800c874 <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800c874:	b580      	push	{r7, lr}
 800c876:	b082      	sub	sp, #8
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	4618      	mov	r0, r3
 800c880:	f003 f976 	bl	800fb70 <_ZSt3getILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800c884:	4603      	mov	r3, r0
 800c886:	4618      	mov	r0, r3
 800c888:	3708      	adds	r7, #8
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bd80      	pop	{r7, pc}

0800c88e <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800c88e:	b580      	push	{r7, lr}
 800c890:	b082      	sub	sp, #8
 800c892:	af00      	add	r7, sp, #0
 800c894:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	4618      	mov	r0, r3
 800c89a:	f003 f976 	bl	800fb8a <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800c89e:	4603      	mov	r3, r0
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3708      	adds	r7, #8
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}

0800c8a8 <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800c8a8:	b590      	push	{r4, r7, lr}
 800c8aa:	b085      	sub	sp, #20
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	60f8      	str	r0, [r7, #12]
 800c8b0:	60b9      	str	r1, [r7, #8]
 800c8b2:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800c8b4:	68fc      	ldr	r4, [r7, #12]
 800c8b6:	6878      	ldr	r0, [r7, #4]
 800c8b8:	f7ff fdbf 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800c8bc:	4602      	mov	r2, r0
 800c8be:	f107 0308 	add.w	r3, r7, #8
 800c8c2:	4619      	mov	r1, r3
 800c8c4:	4620      	mov	r0, r4
 800c8c6:	f003 f978 	bl	800fbba <_ZNSt5tupleIJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	3714      	adds	r7, #20
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd90      	pop	{r4, r7, pc}

0800c8d4 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b082      	sub	sp, #8
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800c8dc:	6878      	ldr	r0, [r7, #4]
 800c8de:	f000 f80a 	bl	800c8f6 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	bf14      	ite	ne
 800c8e8:	2301      	movne	r3, #1
 800c8ea:	2300      	moveq	r3, #0
 800c8ec:	b2db      	uxtb	r3, r3
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	3708      	adds	r7, #8
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bd80      	pop	{r7, pc}

0800c8f6 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800c8f6:	b580      	push	{r7, lr}
 800c8f8:	b082      	sub	sp, #8
 800c8fa:	af00      	add	r7, sp, #0
 800c8fc:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	4618      	mov	r0, r3
 800c902:	f003 f973 	bl	800fbec <_ZNKSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800c906:	4603      	mov	r3, r0
 800c908:	4618      	mov	r0, r3
 800c90a:	3708      	adds	r7, #8
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}

0800c910 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI16TfLiteSVDFParamsEEPT_v>:
  T* AllocatePOD() {
 800c910:	b580      	push	{r7, lr}
 800c912:	b084      	sub	sp, #16
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	2204      	movs	r2, #4
 800c920:	2108      	movs	r1, #8
 800c922:	6878      	ldr	r0, [r7, #4]
 800c924:	4798      	blx	r3
 800c926:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	4619      	mov	r1, r3
 800c92c:	2008      	movs	r0, #8
 800c92e:	f7f8 fd80 	bl	8005432 <_ZnwjPv>
 800c932:	4603      	mov	r3, r0
  }
 800c934:	4618      	mov	r0, r3
 800c936:	3710      	adds	r7, #16
 800c938:	46bd      	mov	sp, r7
 800c93a:	bd80      	pop	{r7, pc}

0800c93c <_ZSt4moveIRP16TfLiteSVDFParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800c93c:	b480      	push	{r7}
 800c93e:	b083      	sub	sp, #12
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	4618      	mov	r0, r3
 800c948:	370c      	adds	r7, #12
 800c94a:	46bd      	mov	sp, r7
 800c94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c950:	4770      	bx	lr

0800c952 <_ZNSt10unique_ptrI16TfLiteSVDFParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 800c952:	b5b0      	push	{r4, r5, r7, lr}
 800c954:	b084      	sub	sp, #16
 800c956:	af00      	add	r7, sp, #0
 800c958:	60f8      	str	r0, [r7, #12]
 800c95a:	60b9      	str	r1, [r7, #8]
 800c95c:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800c95e:	68fc      	ldr	r4, [r7, #12]
 800c960:	f107 0308 	add.w	r3, r7, #8
 800c964:	4618      	mov	r0, r3
 800c966:	f7ff ffe9 	bl	800c93c <_ZSt4moveIRP16TfLiteSVDFParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800c96a:	4603      	mov	r3, r0
 800c96c:	681d      	ldr	r5, [r3, #0]
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f7ff fd22 	bl	800c3b8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800c974:	4603      	mov	r3, r0
 800c976:	461a      	mov	r2, r3
 800c978:	4629      	mov	r1, r5
 800c97a:	4620      	mov	r0, r4
 800c97c:	f000 f81f 	bl	800c9be <_ZNSt15__uniq_ptr_implI16TfLiteSVDFParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	4618      	mov	r0, r3
 800c984:	3710      	adds	r7, #16
 800c986:	46bd      	mov	sp, r7
 800c988:	bdb0      	pop	{r4, r5, r7, pc}

0800c98a <_ZNSt15__uniq_ptr_implI16TfLiteSVDFParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800c98a:	b580      	push	{r7, lr}
 800c98c:	b082      	sub	sp, #8
 800c98e:	af00      	add	r7, sp, #0
 800c990:	6078      	str	r0, [r7, #4]
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	4618      	mov	r0, r3
 800c996:	f003 f937 	bl	800fc08 <_ZSt3getILj0EJP16TfLiteSVDFParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800c99a:	4603      	mov	r3, r0
 800c99c:	4618      	mov	r0, r3
 800c99e:	3708      	adds	r7, #8
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}

0800c9a4 <_ZNSt10unique_ptrI16TfLiteSVDFParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b082      	sub	sp, #8
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f003 f937 	bl	800fc22 <_ZNSt15__uniq_ptr_implI16TfLiteSVDFParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	3708      	adds	r7, #8
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}

0800c9be <_ZNSt15__uniq_ptr_implI16TfLiteSVDFParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800c9be:	b590      	push	{r4, r7, lr}
 800c9c0:	b085      	sub	sp, #20
 800c9c2:	af00      	add	r7, sp, #0
 800c9c4:	60f8      	str	r0, [r7, #12]
 800c9c6:	60b9      	str	r1, [r7, #8]
 800c9c8:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800c9ca:	68fc      	ldr	r4, [r7, #12]
 800c9cc:	6878      	ldr	r0, [r7, #4]
 800c9ce:	f7ff fd34 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800c9d2:	4602      	mov	r2, r0
 800c9d4:	f107 0308 	add.w	r3, r7, #8
 800c9d8:	4619      	mov	r1, r3
 800c9da:	4620      	mov	r0, r4
 800c9dc:	f003 f939 	bl	800fc52 <_ZNSt5tupleIJP16TfLiteSVDFParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	3714      	adds	r7, #20
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	bd90      	pop	{r4, r7, pc}

0800c9ea <_ZNKSt10unique_ptrI16TfLiteSVDFParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800c9ea:	b580      	push	{r7, lr}
 800c9ec:	b082      	sub	sp, #8
 800c9ee:	af00      	add	r7, sp, #0
 800c9f0:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800c9f2:	6878      	ldr	r0, [r7, #4]
 800c9f4:	f000 f80a 	bl	800ca0c <_ZNKSt10unique_ptrI16TfLiteSVDFParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	bf14      	ite	ne
 800c9fe:	2301      	movne	r3, #1
 800ca00:	2300      	moveq	r3, #0
 800ca02:	b2db      	uxtb	r3, r3
 800ca04:	4618      	mov	r0, r3
 800ca06:	3708      	adds	r7, #8
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	bd80      	pop	{r7, pc}

0800ca0c <_ZNKSt10unique_ptrI16TfLiteSVDFParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b082      	sub	sp, #8
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	4618      	mov	r0, r3
 800ca18:	f003 f934 	bl	800fc84 <_ZNKSt15__uniq_ptr_implI16TfLiteSVDFParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	4618      	mov	r0, r3
 800ca20:	3708      	adds	r7, #8
 800ca22:	46bd      	mov	sp, r7
 800ca24:	bd80      	pop	{r7, pc}

0800ca26 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI23TfLiteSequenceRNNParamsEEPT_v>:
  T* AllocatePOD() {
 800ca26:	b580      	push	{r7, lr}
 800ca28:	b084      	sub	sp, #16
 800ca2a:	af00      	add	r7, sp, #0
 800ca2c:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	2201      	movs	r2, #1
 800ca36:	2103      	movs	r1, #3
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	4798      	blx	r3
 800ca3c:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	4619      	mov	r1, r3
 800ca42:	2003      	movs	r0, #3
 800ca44:	f7f8 fcf5 	bl	8005432 <_ZnwjPv>
 800ca48:	4603      	mov	r3, r0
  }
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	3710      	adds	r7, #16
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	bd80      	pop	{r7, pc}

0800ca52 <_ZSt4moveIRP23TfLiteSequenceRNNParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800ca52:	b480      	push	{r7}
 800ca54:	b083      	sub	sp, #12
 800ca56:	af00      	add	r7, sp, #0
 800ca58:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	370c      	adds	r7, #12
 800ca60:	46bd      	mov	sp, r7
 800ca62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca66:	4770      	bx	lr

0800ca68 <_ZNSt10unique_ptrI23TfLiteSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 800ca68:	b5b0      	push	{r4, r5, r7, lr}
 800ca6a:	b084      	sub	sp, #16
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	60f8      	str	r0, [r7, #12]
 800ca70:	60b9      	str	r1, [r7, #8]
 800ca72:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800ca74:	68fc      	ldr	r4, [r7, #12]
 800ca76:	f107 0308 	add.w	r3, r7, #8
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	f7ff ffe9 	bl	800ca52 <_ZSt4moveIRP23TfLiteSequenceRNNParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800ca80:	4603      	mov	r3, r0
 800ca82:	681d      	ldr	r5, [r3, #0]
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f7ff fc97 	bl	800c3b8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	461a      	mov	r2, r3
 800ca8e:	4629      	mov	r1, r5
 800ca90:	4620      	mov	r0, r4
 800ca92:	f000 f81f 	bl	800cad4 <_ZNSt15__uniq_ptr_implI23TfLiteSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	4618      	mov	r0, r3
 800ca9a:	3710      	adds	r7, #16
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bdb0      	pop	{r4, r5, r7, pc}

0800caa0 <_ZNSt15__uniq_ptr_implI23TfLiteSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b082      	sub	sp, #8
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	4618      	mov	r0, r3
 800caac:	f003 f8f8 	bl	800fca0 <_ZSt3getILj0EJP23TfLiteSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800cab0:	4603      	mov	r3, r0
 800cab2:	4618      	mov	r0, r3
 800cab4:	3708      	adds	r7, #8
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd80      	pop	{r7, pc}

0800caba <_ZNSt10unique_ptrI23TfLiteSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800caba:	b580      	push	{r7, lr}
 800cabc:	b082      	sub	sp, #8
 800cabe:	af00      	add	r7, sp, #0
 800cac0:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	4618      	mov	r0, r3
 800cac6:	f003 f8f8 	bl	800fcba <_ZNSt15__uniq_ptr_implI23TfLiteSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800caca:	4603      	mov	r3, r0
 800cacc:	4618      	mov	r0, r3
 800cace:	3708      	adds	r7, #8
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bd80      	pop	{r7, pc}

0800cad4 <_ZNSt15__uniq_ptr_implI23TfLiteSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800cad4:	b590      	push	{r4, r7, lr}
 800cad6:	b085      	sub	sp, #20
 800cad8:	af00      	add	r7, sp, #0
 800cada:	60f8      	str	r0, [r7, #12]
 800cadc:	60b9      	str	r1, [r7, #8]
 800cade:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800cae0:	68fc      	ldr	r4, [r7, #12]
 800cae2:	6878      	ldr	r0, [r7, #4]
 800cae4:	f7ff fca9 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800cae8:	4602      	mov	r2, r0
 800caea:	f107 0308 	add.w	r3, r7, #8
 800caee:	4619      	mov	r1, r3
 800caf0:	4620      	mov	r0, r4
 800caf2:	f003 f8fa 	bl	800fcea <_ZNSt5tupleIJP23TfLiteSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	4618      	mov	r0, r3
 800cafa:	3714      	adds	r7, #20
 800cafc:	46bd      	mov	sp, r7
 800cafe:	bd90      	pop	{r4, r7, pc}

0800cb00 <_ZNKSt10unique_ptrI23TfLiteSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b082      	sub	sp, #8
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800cb08:	6878      	ldr	r0, [r7, #4]
 800cb0a:	f000 f80a 	bl	800cb22 <_ZNKSt10unique_ptrI23TfLiteSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800cb0e:	4603      	mov	r3, r0
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	bf14      	ite	ne
 800cb14:	2301      	movne	r3, #1
 800cb16:	2300      	moveq	r3, #0
 800cb18:	b2db      	uxtb	r3, r3
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	3708      	adds	r7, #8
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	bd80      	pop	{r7, pc}

0800cb22 <_ZNKSt10unique_ptrI23TfLiteSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800cb22:	b580      	push	{r7, lr}
 800cb24:	b082      	sub	sp, #8
 800cb26:	af00      	add	r7, sp, #0
 800cb28:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	f003 f8f5 	bl	800fd1c <_ZNKSt15__uniq_ptr_implI23TfLiteSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800cb32:	4603      	mov	r3, r0
 800cb34:	4618      	mov	r0, r3
 800cb36:	3708      	adds	r7, #8
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}

0800cb3c <_ZN6tflite20BuiltinDataAllocator11AllocatePODI36TfLiteBidirectionalSequenceRNNParamsEEPT_v>:
  T* AllocatePOD() {
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b084      	sub	sp, #16
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	2201      	movs	r2, #1
 800cb4c:	2104      	movs	r1, #4
 800cb4e:	6878      	ldr	r0, [r7, #4]
 800cb50:	4798      	blx	r3
 800cb52:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	4619      	mov	r1, r3
 800cb58:	2004      	movs	r0, #4
 800cb5a:	f7f8 fc6a 	bl	8005432 <_ZnwjPv>
 800cb5e:	4603      	mov	r3, r0
  }
 800cb60:	4618      	mov	r0, r3
 800cb62:	3710      	adds	r7, #16
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}

0800cb68 <_ZSt4moveIRP36TfLiteBidirectionalSequenceRNNParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800cb68:	b480      	push	{r7}
 800cb6a:	b083      	sub	sp, #12
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	4618      	mov	r0, r3
 800cb74:	370c      	adds	r7, #12
 800cb76:	46bd      	mov	sp, r7
 800cb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7c:	4770      	bx	lr

0800cb7e <_ZNSt10unique_ptrI36TfLiteBidirectionalSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 800cb7e:	b5b0      	push	{r4, r5, r7, lr}
 800cb80:	b084      	sub	sp, #16
 800cb82:	af00      	add	r7, sp, #0
 800cb84:	60f8      	str	r0, [r7, #12]
 800cb86:	60b9      	str	r1, [r7, #8]
 800cb88:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800cb8a:	68fc      	ldr	r4, [r7, #12]
 800cb8c:	f107 0308 	add.w	r3, r7, #8
 800cb90:	4618      	mov	r0, r3
 800cb92:	f7ff ffe9 	bl	800cb68 <_ZSt4moveIRP36TfLiteBidirectionalSequenceRNNParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800cb96:	4603      	mov	r3, r0
 800cb98:	681d      	ldr	r5, [r3, #0]
 800cb9a:	6878      	ldr	r0, [r7, #4]
 800cb9c:	f7ff fc0c 	bl	800c3b8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800cba0:	4603      	mov	r3, r0
 800cba2:	461a      	mov	r2, r3
 800cba4:	4629      	mov	r1, r5
 800cba6:	4620      	mov	r0, r4
 800cba8:	f000 f81f 	bl	800cbea <_ZNSt15__uniq_ptr_implI36TfLiteBidirectionalSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	4618      	mov	r0, r3
 800cbb0:	3710      	adds	r7, #16
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bdb0      	pop	{r4, r5, r7, pc}

0800cbb6 <_ZNSt15__uniq_ptr_implI36TfLiteBidirectionalSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800cbb6:	b580      	push	{r7, lr}
 800cbb8:	b082      	sub	sp, #8
 800cbba:	af00      	add	r7, sp, #0
 800cbbc:	6078      	str	r0, [r7, #4]
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f003 f8b9 	bl	800fd38 <_ZSt3getILj0EJP36TfLiteBidirectionalSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	4618      	mov	r0, r3
 800cbca:	3708      	adds	r7, #8
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	bd80      	pop	{r7, pc}

0800cbd0 <_ZNSt10unique_ptrI36TfLiteBidirectionalSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b082      	sub	sp, #8
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	4618      	mov	r0, r3
 800cbdc:	f003 f8b9 	bl	800fd52 <_ZNSt15__uniq_ptr_implI36TfLiteBidirectionalSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	3708      	adds	r7, #8
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}

0800cbea <_ZNSt15__uniq_ptr_implI36TfLiteBidirectionalSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800cbea:	b590      	push	{r4, r7, lr}
 800cbec:	b085      	sub	sp, #20
 800cbee:	af00      	add	r7, sp, #0
 800cbf0:	60f8      	str	r0, [r7, #12]
 800cbf2:	60b9      	str	r1, [r7, #8]
 800cbf4:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800cbf6:	68fc      	ldr	r4, [r7, #12]
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	f7ff fc1e 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800cbfe:	4602      	mov	r2, r0
 800cc00:	f107 0308 	add.w	r3, r7, #8
 800cc04:	4619      	mov	r1, r3
 800cc06:	4620      	mov	r0, r4
 800cc08:	f003 f8bb 	bl	800fd82 <_ZNSt5tupleIJP36TfLiteBidirectionalSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	4618      	mov	r0, r3
 800cc10:	3714      	adds	r7, #20
 800cc12:	46bd      	mov	sp, r7
 800cc14:	bd90      	pop	{r4, r7, pc}

0800cc16 <_ZNKSt10unique_ptrI36TfLiteBidirectionalSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800cc16:	b580      	push	{r7, lr}
 800cc18:	b082      	sub	sp, #8
 800cc1a:	af00      	add	r7, sp, #0
 800cc1c:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800cc1e:	6878      	ldr	r0, [r7, #4]
 800cc20:	f000 f80a 	bl	800cc38 <_ZNKSt10unique_ptrI36TfLiteBidirectionalSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800cc24:	4603      	mov	r3, r0
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	bf14      	ite	ne
 800cc2a:	2301      	movne	r3, #1
 800cc2c:	2300      	moveq	r3, #0
 800cc2e:	b2db      	uxtb	r3, r3
 800cc30:	4618      	mov	r0, r3
 800cc32:	3708      	adds	r7, #8
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}

0800cc38 <_ZNKSt10unique_ptrI36TfLiteBidirectionalSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b082      	sub	sp, #8
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	4618      	mov	r0, r3
 800cc44:	f003 f8b6 	bl	800fdb4 <_ZNKSt15__uniq_ptr_implI36TfLiteBidirectionalSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800cc48:	4603      	mov	r3, r0
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	3708      	adds	r7, #8
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}

0800cc52 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI15TfLiteRNNParamsEEPT_v>:
  T* AllocatePOD() {
 800cc52:	b580      	push	{r7, lr}
 800cc54:	b084      	sub	sp, #16
 800cc56:	af00      	add	r7, sp, #0
 800cc58:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	2201      	movs	r2, #1
 800cc62:	2102      	movs	r1, #2
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	4798      	blx	r3
 800cc68:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	4619      	mov	r1, r3
 800cc6e:	2002      	movs	r0, #2
 800cc70:	f7f8 fbdf 	bl	8005432 <_ZnwjPv>
 800cc74:	4603      	mov	r3, r0
  }
 800cc76:	4618      	mov	r0, r3
 800cc78:	3710      	adds	r7, #16
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}

0800cc7e <_ZSt4moveIRP15TfLiteRNNParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800cc7e:	b480      	push	{r7}
 800cc80:	b083      	sub	sp, #12
 800cc82:	af00      	add	r7, sp, #0
 800cc84:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	4618      	mov	r0, r3
 800cc8a:	370c      	adds	r7, #12
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc92:	4770      	bx	lr

0800cc94 <_ZNSt10unique_ptrI15TfLiteRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 800cc94:	b5b0      	push	{r4, r5, r7, lr}
 800cc96:	b084      	sub	sp, #16
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	60f8      	str	r0, [r7, #12]
 800cc9c:	60b9      	str	r1, [r7, #8]
 800cc9e:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800cca0:	68fc      	ldr	r4, [r7, #12]
 800cca2:	f107 0308 	add.w	r3, r7, #8
 800cca6:	4618      	mov	r0, r3
 800cca8:	f7ff ffe9 	bl	800cc7e <_ZSt4moveIRP15TfLiteRNNParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800ccac:	4603      	mov	r3, r0
 800ccae:	681d      	ldr	r5, [r3, #0]
 800ccb0:	6878      	ldr	r0, [r7, #4]
 800ccb2:	f7ff fb81 	bl	800c3b8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	461a      	mov	r2, r3
 800ccba:	4629      	mov	r1, r5
 800ccbc:	4620      	mov	r0, r4
 800ccbe:	f000 f81f 	bl	800cd00 <_ZNSt15__uniq_ptr_implI15TfLiteRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	3710      	adds	r7, #16
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	bdb0      	pop	{r4, r5, r7, pc}

0800cccc <_ZNSt15__uniq_ptr_implI15TfLiteRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b082      	sub	sp, #8
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f003 f87a 	bl	800fdd0 <_ZSt3getILj0EJP15TfLiteRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	4618      	mov	r0, r3
 800cce0:	3708      	adds	r7, #8
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bd80      	pop	{r7, pc}

0800cce6 <_ZNSt10unique_ptrI15TfLiteRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800cce6:	b580      	push	{r7, lr}
 800cce8:	b082      	sub	sp, #8
 800ccea:	af00      	add	r7, sp, #0
 800ccec:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	f003 f87a 	bl	800fdea <_ZNSt15__uniq_ptr_implI15TfLiteRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	3708      	adds	r7, #8
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	bd80      	pop	{r7, pc}

0800cd00 <_ZNSt15__uniq_ptr_implI15TfLiteRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800cd00:	b590      	push	{r4, r7, lr}
 800cd02:	b085      	sub	sp, #20
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	60f8      	str	r0, [r7, #12]
 800cd08:	60b9      	str	r1, [r7, #8]
 800cd0a:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800cd0c:	68fc      	ldr	r4, [r7, #12]
 800cd0e:	6878      	ldr	r0, [r7, #4]
 800cd10:	f7ff fb93 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800cd14:	4602      	mov	r2, r0
 800cd16:	f107 0308 	add.w	r3, r7, #8
 800cd1a:	4619      	mov	r1, r3
 800cd1c:	4620      	mov	r0, r4
 800cd1e:	f003 f87c 	bl	800fe1a <_ZNSt5tupleIJP15TfLiteRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	4618      	mov	r0, r3
 800cd26:	3714      	adds	r7, #20
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bd90      	pop	{r4, r7, pc}

0800cd2c <_ZNKSt10unique_ptrI15TfLiteRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b082      	sub	sp, #8
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800cd34:	6878      	ldr	r0, [r7, #4]
 800cd36:	f000 f80a 	bl	800cd4e <_ZNKSt10unique_ptrI15TfLiteRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	bf14      	ite	ne
 800cd40:	2301      	movne	r3, #1
 800cd42:	2300      	moveq	r3, #0
 800cd44:	b2db      	uxtb	r3, r3
 800cd46:	4618      	mov	r0, r3
 800cd48:	3708      	adds	r7, #8
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	bd80      	pop	{r7, pc}

0800cd4e <_ZNKSt10unique_ptrI15TfLiteRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800cd4e:	b580      	push	{r7, lr}
 800cd50:	b082      	sub	sp, #8
 800cd52:	af00      	add	r7, sp, #0
 800cd54:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	4618      	mov	r0, r3
 800cd5a:	f003 f877 	bl	800fe4c <_ZNKSt15__uniq_ptr_implI15TfLiteRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800cd5e:	4603      	mov	r3, r0
 800cd60:	4618      	mov	r0, r3
 800cd62:	3708      	adds	r7, #8
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bd80      	pop	{r7, pc}

0800cd68 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI33TfLiteEmbeddingLookupSparseParamsEEPT_v>:
  T* AllocatePOD() {
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b084      	sub	sp, #16
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	2201      	movs	r2, #1
 800cd78:	2101      	movs	r1, #1
 800cd7a:	6878      	ldr	r0, [r7, #4]
 800cd7c:	4798      	blx	r3
 800cd7e:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	4619      	mov	r1, r3
 800cd84:	2001      	movs	r0, #1
 800cd86:	f7f8 fb54 	bl	8005432 <_ZnwjPv>
 800cd8a:	4603      	mov	r3, r0
  }
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	3710      	adds	r7, #16
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bd80      	pop	{r7, pc}

0800cd94 <_ZSt4moveIRP33TfLiteEmbeddingLookupSparseParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800cd94:	b480      	push	{r7}
 800cd96:	b083      	sub	sp, #12
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	4618      	mov	r0, r3
 800cda0:	370c      	adds	r7, #12
 800cda2:	46bd      	mov	sp, r7
 800cda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda8:	4770      	bx	lr

0800cdaa <_ZNSt10unique_ptrI33TfLiteEmbeddingLookupSparseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 800cdaa:	b5b0      	push	{r4, r5, r7, lr}
 800cdac:	b084      	sub	sp, #16
 800cdae:	af00      	add	r7, sp, #0
 800cdb0:	60f8      	str	r0, [r7, #12]
 800cdb2:	60b9      	str	r1, [r7, #8]
 800cdb4:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800cdb6:	68fc      	ldr	r4, [r7, #12]
 800cdb8:	f107 0308 	add.w	r3, r7, #8
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	f7ff ffe9 	bl	800cd94 <_ZSt4moveIRP33TfLiteEmbeddingLookupSparseParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	681d      	ldr	r5, [r3, #0]
 800cdc6:	6878      	ldr	r0, [r7, #4]
 800cdc8:	f7ff faf6 	bl	800c3b8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800cdcc:	4603      	mov	r3, r0
 800cdce:	461a      	mov	r2, r3
 800cdd0:	4629      	mov	r1, r5
 800cdd2:	4620      	mov	r0, r4
 800cdd4:	f000 f81f 	bl	800ce16 <_ZNSt15__uniq_ptr_implI33TfLiteEmbeddingLookupSparseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	4618      	mov	r0, r3
 800cddc:	3710      	adds	r7, #16
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bdb0      	pop	{r4, r5, r7, pc}

0800cde2 <_ZNSt15__uniq_ptr_implI33TfLiteEmbeddingLookupSparseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800cde2:	b580      	push	{r7, lr}
 800cde4:	b082      	sub	sp, #8
 800cde6:	af00      	add	r7, sp, #0
 800cde8:	6078      	str	r0, [r7, #4]
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	4618      	mov	r0, r3
 800cdee:	f003 f83b 	bl	800fe68 <_ZSt3getILj0EJP33TfLiteEmbeddingLookupSparseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	3708      	adds	r7, #8
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	bd80      	pop	{r7, pc}

0800cdfc <_ZNSt10unique_ptrI33TfLiteEmbeddingLookupSparseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b082      	sub	sp, #8
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	4618      	mov	r0, r3
 800ce08:	f003 f83b 	bl	800fe82 <_ZNSt15__uniq_ptr_implI33TfLiteEmbeddingLookupSparseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	4618      	mov	r0, r3
 800ce10:	3708      	adds	r7, #8
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}

0800ce16 <_ZNSt15__uniq_ptr_implI33TfLiteEmbeddingLookupSparseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800ce16:	b590      	push	{r4, r7, lr}
 800ce18:	b085      	sub	sp, #20
 800ce1a:	af00      	add	r7, sp, #0
 800ce1c:	60f8      	str	r0, [r7, #12]
 800ce1e:	60b9      	str	r1, [r7, #8]
 800ce20:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800ce22:	68fc      	ldr	r4, [r7, #12]
 800ce24:	6878      	ldr	r0, [r7, #4]
 800ce26:	f7ff fb08 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800ce2a:	4602      	mov	r2, r0
 800ce2c:	f107 0308 	add.w	r3, r7, #8
 800ce30:	4619      	mov	r1, r3
 800ce32:	4620      	mov	r0, r4
 800ce34:	f003 f83d 	bl	800feb2 <_ZNSt5tupleIJP33TfLiteEmbeddingLookupSparseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	3714      	adds	r7, #20
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	bd90      	pop	{r4, r7, pc}

0800ce42 <_ZNKSt10unique_ptrI33TfLiteEmbeddingLookupSparseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800ce42:	b580      	push	{r7, lr}
 800ce44:	b082      	sub	sp, #8
 800ce46:	af00      	add	r7, sp, #0
 800ce48:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800ce4a:	6878      	ldr	r0, [r7, #4]
 800ce4c:	f000 f80a 	bl	800ce64 <_ZNKSt10unique_ptrI33TfLiteEmbeddingLookupSparseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800ce50:	4603      	mov	r3, r0
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	bf14      	ite	ne
 800ce56:	2301      	movne	r3, #1
 800ce58:	2300      	moveq	r3, #0
 800ce5a:	b2db      	uxtb	r3, r3
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	3708      	adds	r7, #8
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd80      	pop	{r7, pc}

0800ce64 <_ZNKSt10unique_ptrI33TfLiteEmbeddingLookupSparseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b082      	sub	sp, #8
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	4618      	mov	r0, r3
 800ce70:	f003 f838 	bl	800fee4 <_ZNKSt15__uniq_ptr_implI33TfLiteEmbeddingLookupSparseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800ce74:	4603      	mov	r3, r0
 800ce76:	4618      	mov	r0, r3
 800ce78:	3708      	adds	r7, #8
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bd80      	pop	{r7, pc}

0800ce7e <_ZN6tflite20BuiltinDataAllocator11AllocatePODI26TfLiteFullyConnectedParamsEEPT_v>:
  T* AllocatePOD() {
 800ce7e:	b580      	push	{r7, lr}
 800ce80:	b084      	sub	sp, #16
 800ce82:	af00      	add	r7, sp, #0
 800ce84:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	2201      	movs	r2, #1
 800ce8e:	2104      	movs	r1, #4
 800ce90:	6878      	ldr	r0, [r7, #4]
 800ce92:	4798      	blx	r3
 800ce94:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	4619      	mov	r1, r3
 800ce9a:	2004      	movs	r0, #4
 800ce9c:	f7f8 fac9 	bl	8005432 <_ZnwjPv>
 800cea0:	4603      	mov	r3, r0
  }
 800cea2:	4618      	mov	r0, r3
 800cea4:	3710      	adds	r7, #16
 800cea6:	46bd      	mov	sp, r7
 800cea8:	bd80      	pop	{r7, pc}

0800ceaa <_ZSt4moveIRP26TfLiteFullyConnectedParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800ceaa:	b480      	push	{r7}
 800ceac:	b083      	sub	sp, #12
 800ceae:	af00      	add	r7, sp, #0
 800ceb0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	370c      	adds	r7, #12
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebe:	4770      	bx	lr

0800cec0 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 800cec0:	b5b0      	push	{r4, r5, r7, lr}
 800cec2:	b084      	sub	sp, #16
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	60f8      	str	r0, [r7, #12]
 800cec8:	60b9      	str	r1, [r7, #8]
 800ceca:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800cecc:	68fc      	ldr	r4, [r7, #12]
 800cece:	f107 0308 	add.w	r3, r7, #8
 800ced2:	4618      	mov	r0, r3
 800ced4:	f7ff ffe9 	bl	800ceaa <_ZSt4moveIRP26TfLiteFullyConnectedParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800ced8:	4603      	mov	r3, r0
 800ceda:	681d      	ldr	r5, [r3, #0]
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	f7ff fa6b 	bl	800c3b8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800cee2:	4603      	mov	r3, r0
 800cee4:	461a      	mov	r2, r3
 800cee6:	4629      	mov	r1, r5
 800cee8:	4620      	mov	r0, r4
 800ceea:	f000 f81f 	bl	800cf2c <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	4618      	mov	r0, r3
 800cef2:	3710      	adds	r7, #16
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bdb0      	pop	{r4, r5, r7, pc}

0800cef8 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b082      	sub	sp, #8
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	4618      	mov	r0, r3
 800cf04:	f002 fffc 	bl	800ff00 <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800cf08:	4603      	mov	r3, r0
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	3708      	adds	r7, #8
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	bd80      	pop	{r7, pc}

0800cf12 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800cf12:	b580      	push	{r7, lr}
 800cf14:	b082      	sub	sp, #8
 800cf16:	af00      	add	r7, sp, #0
 800cf18:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	f002 fffc 	bl	800ff1a <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800cf22:	4603      	mov	r3, r0
 800cf24:	4618      	mov	r0, r3
 800cf26:	3708      	adds	r7, #8
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	bd80      	pop	{r7, pc}

0800cf2c <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800cf2c:	b590      	push	{r4, r7, lr}
 800cf2e:	b085      	sub	sp, #20
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	60f8      	str	r0, [r7, #12]
 800cf34:	60b9      	str	r1, [r7, #8]
 800cf36:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800cf38:	68fc      	ldr	r4, [r7, #12]
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f7ff fa7d 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800cf40:	4602      	mov	r2, r0
 800cf42:	f107 0308 	add.w	r3, r7, #8
 800cf46:	4619      	mov	r1, r3
 800cf48:	4620      	mov	r0, r4
 800cf4a:	f002 fffe 	bl	800ff4a <_ZNSt5tupleIJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	4618      	mov	r0, r3
 800cf52:	3714      	adds	r7, #20
 800cf54:	46bd      	mov	sp, r7
 800cf56:	bd90      	pop	{r4, r7, pc}

0800cf58 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b082      	sub	sp, #8
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800cf60:	6878      	ldr	r0, [r7, #4]
 800cf62:	f000 f80a 	bl	800cf7a <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800cf66:	4603      	mov	r3, r0
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	bf14      	ite	ne
 800cf6c:	2301      	movne	r3, #1
 800cf6e:	2300      	moveq	r3, #0
 800cf70:	b2db      	uxtb	r3, r3
 800cf72:	4618      	mov	r0, r3
 800cf74:	3708      	adds	r7, #8
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}

0800cf7a <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800cf7a:	b580      	push	{r7, lr}
 800cf7c:	b082      	sub	sp, #8
 800cf7e:	af00      	add	r7, sp, #0
 800cf80:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	4618      	mov	r0, r3
 800cf86:	f002 fff9 	bl	800ff7c <_ZNKSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	3708      	adds	r7, #8
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd80      	pop	{r7, pc}

0800cf94 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteSoftmaxParamsEEPT_v>:
  T* AllocatePOD() {
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b084      	sub	sp, #16
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	2204      	movs	r2, #4
 800cfa4:	2104      	movs	r1, #4
 800cfa6:	6878      	ldr	r0, [r7, #4]
 800cfa8:	4798      	blx	r3
 800cfaa:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	4619      	mov	r1, r3
 800cfb0:	2004      	movs	r0, #4
 800cfb2:	f7f8 fa3e 	bl	8005432 <_ZnwjPv>
 800cfb6:	4603      	mov	r3, r0
  }
 800cfb8:	4618      	mov	r0, r3
 800cfba:	3710      	adds	r7, #16
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	bd80      	pop	{r7, pc}

0800cfc0 <_ZSt4moveIRP19TfLiteSoftmaxParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800cfc0:	b480      	push	{r7}
 800cfc2:	b083      	sub	sp, #12
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	4618      	mov	r0, r3
 800cfcc:	370c      	adds	r7, #12
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd4:	4770      	bx	lr

0800cfd6 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 800cfd6:	b5b0      	push	{r4, r5, r7, lr}
 800cfd8:	b084      	sub	sp, #16
 800cfda:	af00      	add	r7, sp, #0
 800cfdc:	60f8      	str	r0, [r7, #12]
 800cfde:	60b9      	str	r1, [r7, #8]
 800cfe0:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800cfe2:	68fc      	ldr	r4, [r7, #12]
 800cfe4:	f107 0308 	add.w	r3, r7, #8
 800cfe8:	4618      	mov	r0, r3
 800cfea:	f7ff ffe9 	bl	800cfc0 <_ZSt4moveIRP19TfLiteSoftmaxParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800cfee:	4603      	mov	r3, r0
 800cff0:	681d      	ldr	r5, [r3, #0]
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	f7ff f9e0 	bl	800c3b8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800cff8:	4603      	mov	r3, r0
 800cffa:	461a      	mov	r2, r3
 800cffc:	4629      	mov	r1, r5
 800cffe:	4620      	mov	r0, r4
 800d000:	f000 f81f 	bl	800d042 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	4618      	mov	r0, r3
 800d008:	3710      	adds	r7, #16
 800d00a:	46bd      	mov	sp, r7
 800d00c:	bdb0      	pop	{r4, r5, r7, pc}

0800d00e <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800d00e:	b580      	push	{r7, lr}
 800d010:	b082      	sub	sp, #8
 800d012:	af00      	add	r7, sp, #0
 800d014:	6078      	str	r0, [r7, #4]
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	4618      	mov	r0, r3
 800d01a:	f002 ffbd 	bl	800ff98 <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800d01e:	4603      	mov	r3, r0
 800d020:	4618      	mov	r0, r3
 800d022:	3708      	adds	r7, #8
 800d024:	46bd      	mov	sp, r7
 800d026:	bd80      	pop	{r7, pc}

0800d028 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800d028:	b580      	push	{r7, lr}
 800d02a:	b082      	sub	sp, #8
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	4618      	mov	r0, r3
 800d034:	f002 ffbd 	bl	800ffb2 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800d038:	4603      	mov	r3, r0
 800d03a:	4618      	mov	r0, r3
 800d03c:	3708      	adds	r7, #8
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}

0800d042 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800d042:	b590      	push	{r4, r7, lr}
 800d044:	b085      	sub	sp, #20
 800d046:	af00      	add	r7, sp, #0
 800d048:	60f8      	str	r0, [r7, #12]
 800d04a:	60b9      	str	r1, [r7, #8]
 800d04c:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800d04e:	68fc      	ldr	r4, [r7, #12]
 800d050:	6878      	ldr	r0, [r7, #4]
 800d052:	f7ff f9f2 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800d056:	4602      	mov	r2, r0
 800d058:	f107 0308 	add.w	r3, r7, #8
 800d05c:	4619      	mov	r1, r3
 800d05e:	4620      	mov	r0, r4
 800d060:	f002 ffbf 	bl	800ffe2 <_ZNSt5tupleIJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	4618      	mov	r0, r3
 800d068:	3714      	adds	r7, #20
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd90      	pop	{r4, r7, pc}

0800d06e <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800d06e:	b580      	push	{r7, lr}
 800d070:	b082      	sub	sp, #8
 800d072:	af00      	add	r7, sp, #0
 800d074:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f000 f80a 	bl	800d090 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800d07c:	4603      	mov	r3, r0
 800d07e:	2b00      	cmp	r3, #0
 800d080:	bf14      	ite	ne
 800d082:	2301      	movne	r3, #1
 800d084:	2300      	moveq	r3, #0
 800d086:	b2db      	uxtb	r3, r3
 800d088:	4618      	mov	r0, r3
 800d08a:	3708      	adds	r7, #8
 800d08c:	46bd      	mov	sp, r7
 800d08e:	bd80      	pop	{r7, pc}

0800d090 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800d090:	b580      	push	{r7, lr}
 800d092:	b082      	sub	sp, #8
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	4618      	mov	r0, r3
 800d09c:	f002 ffba 	bl	8010014 <_ZNKSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	3708      	adds	r7, #8
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bd80      	pop	{r7, pc}

0800d0aa <_ZN6tflite20BuiltinDataAllocator11AllocatePODI25TfLiteConcatenationParamsEEPT_v>:
  T* AllocatePOD() {
 800d0aa:	b580      	push	{r7, lr}
 800d0ac:	b084      	sub	sp, #16
 800d0ae:	af00      	add	r7, sp, #0
 800d0b0:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	2204      	movs	r2, #4
 800d0ba:	2108      	movs	r1, #8
 800d0bc:	6878      	ldr	r0, [r7, #4]
 800d0be:	4798      	blx	r3
 800d0c0:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	4619      	mov	r1, r3
 800d0c6:	2008      	movs	r0, #8
 800d0c8:	f7f8 f9b3 	bl	8005432 <_ZnwjPv>
 800d0cc:	4603      	mov	r3, r0
  }
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	3710      	adds	r7, #16
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}

0800d0d6 <_ZSt4moveIRP25TfLiteConcatenationParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800d0d6:	b480      	push	{r7}
 800d0d8:	b083      	sub	sp, #12
 800d0da:	af00      	add	r7, sp, #0
 800d0dc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	370c      	adds	r7, #12
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ea:	4770      	bx	lr

0800d0ec <_ZNSt10unique_ptrI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 800d0ec:	b5b0      	push	{r4, r5, r7, lr}
 800d0ee:	b084      	sub	sp, #16
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	60f8      	str	r0, [r7, #12]
 800d0f4:	60b9      	str	r1, [r7, #8]
 800d0f6:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800d0f8:	68fc      	ldr	r4, [r7, #12]
 800d0fa:	f107 0308 	add.w	r3, r7, #8
 800d0fe:	4618      	mov	r0, r3
 800d100:	f7ff ffe9 	bl	800d0d6 <_ZSt4moveIRP25TfLiteConcatenationParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800d104:	4603      	mov	r3, r0
 800d106:	681d      	ldr	r5, [r3, #0]
 800d108:	6878      	ldr	r0, [r7, #4]
 800d10a:	f7ff f955 	bl	800c3b8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800d10e:	4603      	mov	r3, r0
 800d110:	461a      	mov	r2, r3
 800d112:	4629      	mov	r1, r5
 800d114:	4620      	mov	r0, r4
 800d116:	f000 f81f 	bl	800d158 <_ZNSt15__uniq_ptr_implI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	4618      	mov	r0, r3
 800d11e:	3710      	adds	r7, #16
 800d120:	46bd      	mov	sp, r7
 800d122:	bdb0      	pop	{r4, r5, r7, pc}

0800d124 <_ZNSt15__uniq_ptr_implI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800d124:	b580      	push	{r7, lr}
 800d126:	b082      	sub	sp, #8
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	4618      	mov	r0, r3
 800d130:	f002 ff7e 	bl	8010030 <_ZSt3getILj0EJP25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800d134:	4603      	mov	r3, r0
 800d136:	4618      	mov	r0, r3
 800d138:	3708      	adds	r7, #8
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}

0800d13e <_ZNSt10unique_ptrI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800d13e:	b580      	push	{r7, lr}
 800d140:	b082      	sub	sp, #8
 800d142:	af00      	add	r7, sp, #0
 800d144:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	4618      	mov	r0, r3
 800d14a:	f002 ff7e 	bl	801004a <_ZNSt15__uniq_ptr_implI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800d14e:	4603      	mov	r3, r0
 800d150:	4618      	mov	r0, r3
 800d152:	3708      	adds	r7, #8
 800d154:	46bd      	mov	sp, r7
 800d156:	bd80      	pop	{r7, pc}

0800d158 <_ZNSt15__uniq_ptr_implI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800d158:	b590      	push	{r4, r7, lr}
 800d15a:	b085      	sub	sp, #20
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	60f8      	str	r0, [r7, #12]
 800d160:	60b9      	str	r1, [r7, #8]
 800d162:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800d164:	68fc      	ldr	r4, [r7, #12]
 800d166:	6878      	ldr	r0, [r7, #4]
 800d168:	f7ff f967 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800d16c:	4602      	mov	r2, r0
 800d16e:	f107 0308 	add.w	r3, r7, #8
 800d172:	4619      	mov	r1, r3
 800d174:	4620      	mov	r0, r4
 800d176:	f002 ff80 	bl	801007a <_ZNSt5tupleIJP25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	4618      	mov	r0, r3
 800d17e:	3714      	adds	r7, #20
 800d180:	46bd      	mov	sp, r7
 800d182:	bd90      	pop	{r4, r7, pc}

0800d184 <_ZNKSt10unique_ptrI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800d184:	b580      	push	{r7, lr}
 800d186:	b082      	sub	sp, #8
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800d18c:	6878      	ldr	r0, [r7, #4]
 800d18e:	f000 f80a 	bl	800d1a6 <_ZNKSt10unique_ptrI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800d192:	4603      	mov	r3, r0
 800d194:	2b00      	cmp	r3, #0
 800d196:	bf14      	ite	ne
 800d198:	2301      	movne	r3, #1
 800d19a:	2300      	moveq	r3, #0
 800d19c:	b2db      	uxtb	r3, r3
 800d19e:	4618      	mov	r0, r3
 800d1a0:	3708      	adds	r7, #8
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}

0800d1a6 <_ZNKSt10unique_ptrI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800d1a6:	b580      	push	{r7, lr}
 800d1a8:	b082      	sub	sp, #8
 800d1aa:	af00      	add	r7, sp, #0
 800d1ac:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	f002 ff7b 	bl	80100ac <_ZNKSt15__uniq_ptr_implI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	3708      	adds	r7, #8
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bd80      	pop	{r7, pc}

0800d1c0 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI15TfLiteMulParamsEEPT_v>:
  T* AllocatePOD() {
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b084      	sub	sp, #16
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	2201      	movs	r2, #1
 800d1d0:	2101      	movs	r1, #1
 800d1d2:	6878      	ldr	r0, [r7, #4]
 800d1d4:	4798      	blx	r3
 800d1d6:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	4619      	mov	r1, r3
 800d1dc:	2001      	movs	r0, #1
 800d1de:	f7f8 f928 	bl	8005432 <_ZnwjPv>
 800d1e2:	4603      	mov	r3, r0
  }
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	3710      	adds	r7, #16
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	bd80      	pop	{r7, pc}

0800d1ec <_ZSt4moveIRP15TfLiteMulParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800d1ec:	b480      	push	{r7}
 800d1ee:	b083      	sub	sp, #12
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	370c      	adds	r7, #12
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d200:	4770      	bx	lr

0800d202 <_ZNSt10unique_ptrI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 800d202:	b5b0      	push	{r4, r5, r7, lr}
 800d204:	b084      	sub	sp, #16
 800d206:	af00      	add	r7, sp, #0
 800d208:	60f8      	str	r0, [r7, #12]
 800d20a:	60b9      	str	r1, [r7, #8]
 800d20c:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800d20e:	68fc      	ldr	r4, [r7, #12]
 800d210:	f107 0308 	add.w	r3, r7, #8
 800d214:	4618      	mov	r0, r3
 800d216:	f7ff ffe9 	bl	800d1ec <_ZSt4moveIRP15TfLiteMulParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800d21a:	4603      	mov	r3, r0
 800d21c:	681d      	ldr	r5, [r3, #0]
 800d21e:	6878      	ldr	r0, [r7, #4]
 800d220:	f7ff f8ca 	bl	800c3b8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800d224:	4603      	mov	r3, r0
 800d226:	461a      	mov	r2, r3
 800d228:	4629      	mov	r1, r5
 800d22a:	4620      	mov	r0, r4
 800d22c:	f000 f81f 	bl	800d26e <_ZNSt15__uniq_ptr_implI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	4618      	mov	r0, r3
 800d234:	3710      	adds	r7, #16
 800d236:	46bd      	mov	sp, r7
 800d238:	bdb0      	pop	{r4, r5, r7, pc}

0800d23a <_ZNSt15__uniq_ptr_implI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800d23a:	b580      	push	{r7, lr}
 800d23c:	b082      	sub	sp, #8
 800d23e:	af00      	add	r7, sp, #0
 800d240:	6078      	str	r0, [r7, #4]
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	4618      	mov	r0, r3
 800d246:	f002 ff3f 	bl	80100c8 <_ZSt3getILj0EJP15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800d24a:	4603      	mov	r3, r0
 800d24c:	4618      	mov	r0, r3
 800d24e:	3708      	adds	r7, #8
 800d250:	46bd      	mov	sp, r7
 800d252:	bd80      	pop	{r7, pc}

0800d254 <_ZNSt10unique_ptrI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800d254:	b580      	push	{r7, lr}
 800d256:	b082      	sub	sp, #8
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	4618      	mov	r0, r3
 800d260:	f002 ff3f 	bl	80100e2 <_ZNSt15__uniq_ptr_implI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800d264:	4603      	mov	r3, r0
 800d266:	4618      	mov	r0, r3
 800d268:	3708      	adds	r7, #8
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}

0800d26e <_ZNSt15__uniq_ptr_implI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800d26e:	b590      	push	{r4, r7, lr}
 800d270:	b085      	sub	sp, #20
 800d272:	af00      	add	r7, sp, #0
 800d274:	60f8      	str	r0, [r7, #12]
 800d276:	60b9      	str	r1, [r7, #8]
 800d278:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800d27a:	68fc      	ldr	r4, [r7, #12]
 800d27c:	6878      	ldr	r0, [r7, #4]
 800d27e:	f7ff f8dc 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800d282:	4602      	mov	r2, r0
 800d284:	f107 0308 	add.w	r3, r7, #8
 800d288:	4619      	mov	r1, r3
 800d28a:	4620      	mov	r0, r4
 800d28c:	f002 ff41 	bl	8010112 <_ZNSt5tupleIJP15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	4618      	mov	r0, r3
 800d294:	3714      	adds	r7, #20
 800d296:	46bd      	mov	sp, r7
 800d298:	bd90      	pop	{r4, r7, pc}

0800d29a <_ZNKSt10unique_ptrI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800d29a:	b580      	push	{r7, lr}
 800d29c:	b082      	sub	sp, #8
 800d29e:	af00      	add	r7, sp, #0
 800d2a0:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800d2a2:	6878      	ldr	r0, [r7, #4]
 800d2a4:	f000 f80a 	bl	800d2bc <_ZNKSt10unique_ptrI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	bf14      	ite	ne
 800d2ae:	2301      	movne	r3, #1
 800d2b0:	2300      	moveq	r3, #0
 800d2b2:	b2db      	uxtb	r3, r3
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	3708      	adds	r7, #8
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}

0800d2bc <_ZNKSt10unique_ptrI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b082      	sub	sp, #8
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	f002 ff3c 	bl	8010144 <_ZNKSt15__uniq_ptr_implI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800d2cc:	4603      	mov	r3, r0
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	3708      	adds	r7, #8
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	bd80      	pop	{r7, pc}

0800d2d6 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI15TfLiteAddParamsEEPT_v>:
  T* AllocatePOD() {
 800d2d6:	b580      	push	{r7, lr}
 800d2d8:	b084      	sub	sp, #16
 800d2da:	af00      	add	r7, sp, #0
 800d2dc:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	2201      	movs	r2, #1
 800d2e6:	2101      	movs	r1, #1
 800d2e8:	6878      	ldr	r0, [r7, #4]
 800d2ea:	4798      	blx	r3
 800d2ec:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	4619      	mov	r1, r3
 800d2f2:	2001      	movs	r0, #1
 800d2f4:	f7f8 f89d 	bl	8005432 <_ZnwjPv>
 800d2f8:	4603      	mov	r3, r0
  }
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	3710      	adds	r7, #16
 800d2fe:	46bd      	mov	sp, r7
 800d300:	bd80      	pop	{r7, pc}

0800d302 <_ZSt4moveIRP15TfLiteAddParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800d302:	b480      	push	{r7}
 800d304:	b083      	sub	sp, #12
 800d306:	af00      	add	r7, sp, #0
 800d308:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	4618      	mov	r0, r3
 800d30e:	370c      	adds	r7, #12
 800d310:	46bd      	mov	sp, r7
 800d312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d316:	4770      	bx	lr

0800d318 <_ZNSt10unique_ptrI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 800d318:	b5b0      	push	{r4, r5, r7, lr}
 800d31a:	b084      	sub	sp, #16
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	60f8      	str	r0, [r7, #12]
 800d320:	60b9      	str	r1, [r7, #8]
 800d322:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800d324:	68fc      	ldr	r4, [r7, #12]
 800d326:	f107 0308 	add.w	r3, r7, #8
 800d32a:	4618      	mov	r0, r3
 800d32c:	f7ff ffe9 	bl	800d302 <_ZSt4moveIRP15TfLiteAddParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800d330:	4603      	mov	r3, r0
 800d332:	681d      	ldr	r5, [r3, #0]
 800d334:	6878      	ldr	r0, [r7, #4]
 800d336:	f7ff f83f 	bl	800c3b8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800d33a:	4603      	mov	r3, r0
 800d33c:	461a      	mov	r2, r3
 800d33e:	4629      	mov	r1, r5
 800d340:	4620      	mov	r0, r4
 800d342:	f000 f81f 	bl	800d384 <_ZNSt15__uniq_ptr_implI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	4618      	mov	r0, r3
 800d34a:	3710      	adds	r7, #16
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bdb0      	pop	{r4, r5, r7, pc}

0800d350 <_ZNSt15__uniq_ptr_implI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800d350:	b580      	push	{r7, lr}
 800d352:	b082      	sub	sp, #8
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	4618      	mov	r0, r3
 800d35c:	f002 ff00 	bl	8010160 <_ZSt3getILj0EJP15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800d360:	4603      	mov	r3, r0
 800d362:	4618      	mov	r0, r3
 800d364:	3708      	adds	r7, #8
 800d366:	46bd      	mov	sp, r7
 800d368:	bd80      	pop	{r7, pc}

0800d36a <_ZNSt10unique_ptrI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800d36a:	b580      	push	{r7, lr}
 800d36c:	b082      	sub	sp, #8
 800d36e:	af00      	add	r7, sp, #0
 800d370:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	4618      	mov	r0, r3
 800d376:	f002 ff00 	bl	801017a <_ZNSt15__uniq_ptr_implI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800d37a:	4603      	mov	r3, r0
 800d37c:	4618      	mov	r0, r3
 800d37e:	3708      	adds	r7, #8
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}

0800d384 <_ZNSt15__uniq_ptr_implI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800d384:	b590      	push	{r4, r7, lr}
 800d386:	b085      	sub	sp, #20
 800d388:	af00      	add	r7, sp, #0
 800d38a:	60f8      	str	r0, [r7, #12]
 800d38c:	60b9      	str	r1, [r7, #8]
 800d38e:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800d390:	68fc      	ldr	r4, [r7, #12]
 800d392:	6878      	ldr	r0, [r7, #4]
 800d394:	f7ff f851 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800d398:	4602      	mov	r2, r0
 800d39a:	f107 0308 	add.w	r3, r7, #8
 800d39e:	4619      	mov	r1, r3
 800d3a0:	4620      	mov	r0, r4
 800d3a2:	f002 ff02 	bl	80101aa <_ZNSt5tupleIJP15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	3714      	adds	r7, #20
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd90      	pop	{r4, r7, pc}

0800d3b0 <_ZNKSt10unique_ptrI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	b082      	sub	sp, #8
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800d3b8:	6878      	ldr	r0, [r7, #4]
 800d3ba:	f000 f80a 	bl	800d3d2 <_ZNKSt10unique_ptrI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800d3be:	4603      	mov	r3, r0
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	bf14      	ite	ne
 800d3c4:	2301      	movne	r3, #1
 800d3c6:	2300      	moveq	r3, #0
 800d3c8:	b2db      	uxtb	r3, r3
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	3708      	adds	r7, #8
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bd80      	pop	{r7, pc}

0800d3d2 <_ZNKSt10unique_ptrI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800d3d2:	b580      	push	{r7, lr}
 800d3d4:	b082      	sub	sp, #8
 800d3d6:	af00      	add	r7, sp, #0
 800d3d8:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f002 fefd 	bl	80101dc <_ZNKSt15__uniq_ptr_implI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	3708      	adds	r7, #8
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}

0800d3ec <_ZN6tflite20BuiltinDataAllocator11AllocatePODI15TfLiteDivParamsEEPT_v>:
  T* AllocatePOD() {
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b084      	sub	sp, #16
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	2201      	movs	r2, #1
 800d3fc:	2101      	movs	r1, #1
 800d3fe:	6878      	ldr	r0, [r7, #4]
 800d400:	4798      	blx	r3
 800d402:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	4619      	mov	r1, r3
 800d408:	2001      	movs	r0, #1
 800d40a:	f7f8 f812 	bl	8005432 <_ZnwjPv>
 800d40e:	4603      	mov	r3, r0
  }
 800d410:	4618      	mov	r0, r3
 800d412:	3710      	adds	r7, #16
 800d414:	46bd      	mov	sp, r7
 800d416:	bd80      	pop	{r7, pc}

0800d418 <_ZSt4moveIRP15TfLiteDivParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800d418:	b480      	push	{r7}
 800d41a:	b083      	sub	sp, #12
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	4618      	mov	r0, r3
 800d424:	370c      	adds	r7, #12
 800d426:	46bd      	mov	sp, r7
 800d428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42c:	4770      	bx	lr

0800d42e <_ZNSt10unique_ptrI15TfLiteDivParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 800d42e:	b5b0      	push	{r4, r5, r7, lr}
 800d430:	b084      	sub	sp, #16
 800d432:	af00      	add	r7, sp, #0
 800d434:	60f8      	str	r0, [r7, #12]
 800d436:	60b9      	str	r1, [r7, #8]
 800d438:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800d43a:	68fc      	ldr	r4, [r7, #12]
 800d43c:	f107 0308 	add.w	r3, r7, #8
 800d440:	4618      	mov	r0, r3
 800d442:	f7ff ffe9 	bl	800d418 <_ZSt4moveIRP15TfLiteDivParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800d446:	4603      	mov	r3, r0
 800d448:	681d      	ldr	r5, [r3, #0]
 800d44a:	6878      	ldr	r0, [r7, #4]
 800d44c:	f7fe ffb4 	bl	800c3b8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800d450:	4603      	mov	r3, r0
 800d452:	461a      	mov	r2, r3
 800d454:	4629      	mov	r1, r5
 800d456:	4620      	mov	r0, r4
 800d458:	f000 f81f 	bl	800d49a <_ZNSt15__uniq_ptr_implI15TfLiteDivParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	4618      	mov	r0, r3
 800d460:	3710      	adds	r7, #16
 800d462:	46bd      	mov	sp, r7
 800d464:	bdb0      	pop	{r4, r5, r7, pc}

0800d466 <_ZNSt15__uniq_ptr_implI15TfLiteDivParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800d466:	b580      	push	{r7, lr}
 800d468:	b082      	sub	sp, #8
 800d46a:	af00      	add	r7, sp, #0
 800d46c:	6078      	str	r0, [r7, #4]
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	4618      	mov	r0, r3
 800d472:	f002 fec1 	bl	80101f8 <_ZSt3getILj0EJP15TfLiteDivParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800d476:	4603      	mov	r3, r0
 800d478:	4618      	mov	r0, r3
 800d47a:	3708      	adds	r7, #8
 800d47c:	46bd      	mov	sp, r7
 800d47e:	bd80      	pop	{r7, pc}

0800d480 <_ZNSt10unique_ptrI15TfLiteDivParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800d480:	b580      	push	{r7, lr}
 800d482:	b082      	sub	sp, #8
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	4618      	mov	r0, r3
 800d48c:	f002 fec1 	bl	8010212 <_ZNSt15__uniq_ptr_implI15TfLiteDivParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800d490:	4603      	mov	r3, r0
 800d492:	4618      	mov	r0, r3
 800d494:	3708      	adds	r7, #8
 800d496:	46bd      	mov	sp, r7
 800d498:	bd80      	pop	{r7, pc}

0800d49a <_ZNSt15__uniq_ptr_implI15TfLiteDivParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800d49a:	b590      	push	{r4, r7, lr}
 800d49c:	b085      	sub	sp, #20
 800d49e:	af00      	add	r7, sp, #0
 800d4a0:	60f8      	str	r0, [r7, #12]
 800d4a2:	60b9      	str	r1, [r7, #8]
 800d4a4:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800d4a6:	68fc      	ldr	r4, [r7, #12]
 800d4a8:	6878      	ldr	r0, [r7, #4]
 800d4aa:	f7fe ffc6 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800d4ae:	4602      	mov	r2, r0
 800d4b0:	f107 0308 	add.w	r3, r7, #8
 800d4b4:	4619      	mov	r1, r3
 800d4b6:	4620      	mov	r0, r4
 800d4b8:	f002 fec3 	bl	8010242 <_ZNSt5tupleIJP15TfLiteDivParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	4618      	mov	r0, r3
 800d4c0:	3714      	adds	r7, #20
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bd90      	pop	{r4, r7, pc}

0800d4c6 <_ZNKSt10unique_ptrI15TfLiteDivParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800d4c6:	b580      	push	{r7, lr}
 800d4c8:	b082      	sub	sp, #8
 800d4ca:	af00      	add	r7, sp, #0
 800d4cc:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800d4ce:	6878      	ldr	r0, [r7, #4]
 800d4d0:	f000 f80a 	bl	800d4e8 <_ZNKSt10unique_ptrI15TfLiteDivParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800d4d4:	4603      	mov	r3, r0
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	bf14      	ite	ne
 800d4da:	2301      	movne	r3, #1
 800d4dc:	2300      	moveq	r3, #0
 800d4de:	b2db      	uxtb	r3, r3
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	3708      	adds	r7, #8
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	bd80      	pop	{r7, pc}

0800d4e8 <_ZNKSt10unique_ptrI15TfLiteDivParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b082      	sub	sp, #8
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	f002 febe 	bl	8010274 <_ZNKSt15__uniq_ptr_implI15TfLiteDivParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800d4f8:	4603      	mov	r3, r0
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	3708      	adds	r7, #8
 800d4fe:	46bd      	mov	sp, r7
 800d500:	bd80      	pop	{r7, pc}

0800d502 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI15TfLiteSubParamsEEPT_v>:
  T* AllocatePOD() {
 800d502:	b580      	push	{r7, lr}
 800d504:	b084      	sub	sp, #16
 800d506:	af00      	add	r7, sp, #0
 800d508:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	2201      	movs	r2, #1
 800d512:	2101      	movs	r1, #1
 800d514:	6878      	ldr	r0, [r7, #4]
 800d516:	4798      	blx	r3
 800d518:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	4619      	mov	r1, r3
 800d51e:	2001      	movs	r0, #1
 800d520:	f7f7 ff87 	bl	8005432 <_ZnwjPv>
 800d524:	4603      	mov	r3, r0
  }
 800d526:	4618      	mov	r0, r3
 800d528:	3710      	adds	r7, #16
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bd80      	pop	{r7, pc}

0800d52e <_ZSt4moveIRP15TfLiteSubParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800d52e:	b480      	push	{r7}
 800d530:	b083      	sub	sp, #12
 800d532:	af00      	add	r7, sp, #0
 800d534:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	4618      	mov	r0, r3
 800d53a:	370c      	adds	r7, #12
 800d53c:	46bd      	mov	sp, r7
 800d53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d542:	4770      	bx	lr

0800d544 <_ZNSt10unique_ptrI15TfLiteSubParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 800d544:	b5b0      	push	{r4, r5, r7, lr}
 800d546:	b084      	sub	sp, #16
 800d548:	af00      	add	r7, sp, #0
 800d54a:	60f8      	str	r0, [r7, #12]
 800d54c:	60b9      	str	r1, [r7, #8]
 800d54e:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800d550:	68fc      	ldr	r4, [r7, #12]
 800d552:	f107 0308 	add.w	r3, r7, #8
 800d556:	4618      	mov	r0, r3
 800d558:	f7ff ffe9 	bl	800d52e <_ZSt4moveIRP15TfLiteSubParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800d55c:	4603      	mov	r3, r0
 800d55e:	681d      	ldr	r5, [r3, #0]
 800d560:	6878      	ldr	r0, [r7, #4]
 800d562:	f7fe ff29 	bl	800c3b8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800d566:	4603      	mov	r3, r0
 800d568:	461a      	mov	r2, r3
 800d56a:	4629      	mov	r1, r5
 800d56c:	4620      	mov	r0, r4
 800d56e:	f000 f81f 	bl	800d5b0 <_ZNSt15__uniq_ptr_implI15TfLiteSubParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	4618      	mov	r0, r3
 800d576:	3710      	adds	r7, #16
 800d578:	46bd      	mov	sp, r7
 800d57a:	bdb0      	pop	{r4, r5, r7, pc}

0800d57c <_ZNSt15__uniq_ptr_implI15TfLiteSubParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b082      	sub	sp, #8
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	4618      	mov	r0, r3
 800d588:	f002 fe82 	bl	8010290 <_ZSt3getILj0EJP15TfLiteSubParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800d58c:	4603      	mov	r3, r0
 800d58e:	4618      	mov	r0, r3
 800d590:	3708      	adds	r7, #8
 800d592:	46bd      	mov	sp, r7
 800d594:	bd80      	pop	{r7, pc}

0800d596 <_ZNSt10unique_ptrI15TfLiteSubParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800d596:	b580      	push	{r7, lr}
 800d598:	b082      	sub	sp, #8
 800d59a:	af00      	add	r7, sp, #0
 800d59c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	f002 fe82 	bl	80102aa <_ZNSt15__uniq_ptr_implI15TfLiteSubParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	3708      	adds	r7, #8
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	bd80      	pop	{r7, pc}

0800d5b0 <_ZNSt15__uniq_ptr_implI15TfLiteSubParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800d5b0:	b590      	push	{r4, r7, lr}
 800d5b2:	b085      	sub	sp, #20
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	60f8      	str	r0, [r7, #12]
 800d5b8:	60b9      	str	r1, [r7, #8]
 800d5ba:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800d5bc:	68fc      	ldr	r4, [r7, #12]
 800d5be:	6878      	ldr	r0, [r7, #4]
 800d5c0:	f7fe ff3b 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800d5c4:	4602      	mov	r2, r0
 800d5c6:	f107 0308 	add.w	r3, r7, #8
 800d5ca:	4619      	mov	r1, r3
 800d5cc:	4620      	mov	r0, r4
 800d5ce:	f002 fe84 	bl	80102da <_ZNSt5tupleIJP15TfLiteSubParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	3714      	adds	r7, #20
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	bd90      	pop	{r4, r7, pc}

0800d5dc <_ZNKSt10unique_ptrI15TfLiteSubParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b082      	sub	sp, #8
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800d5e4:	6878      	ldr	r0, [r7, #4]
 800d5e6:	f000 f80a 	bl	800d5fe <_ZNKSt10unique_ptrI15TfLiteSubParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	bf14      	ite	ne
 800d5f0:	2301      	movne	r3, #1
 800d5f2:	2300      	moveq	r3, #0
 800d5f4:	b2db      	uxtb	r3, r3
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	3708      	adds	r7, #8
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bd80      	pop	{r7, pc}

0800d5fe <_ZNKSt10unique_ptrI15TfLiteSubParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800d5fe:	b580      	push	{r7, lr}
 800d600:	b082      	sub	sp, #8
 800d602:	af00      	add	r7, sp, #0
 800d604:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	4618      	mov	r0, r3
 800d60a:	f002 fe7f 	bl	801030c <_ZNKSt15__uniq_ptr_implI15TfLiteSubParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800d60e:	4603      	mov	r3, r0
 800d610:	4618      	mov	r0, r3
 800d612:	3708      	adds	r7, #8
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}

0800d618 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI18TfLiteL2NormParamsEEPT_v>:
  T* AllocatePOD() {
 800d618:	b580      	push	{r7, lr}
 800d61a:	b084      	sub	sp, #16
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	2201      	movs	r2, #1
 800d628:	2101      	movs	r1, #1
 800d62a:	6878      	ldr	r0, [r7, #4]
 800d62c:	4798      	blx	r3
 800d62e:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	4619      	mov	r1, r3
 800d634:	2001      	movs	r0, #1
 800d636:	f7f7 fefc 	bl	8005432 <_ZnwjPv>
 800d63a:	4603      	mov	r3, r0
  }
 800d63c:	4618      	mov	r0, r3
 800d63e:	3710      	adds	r7, #16
 800d640:	46bd      	mov	sp, r7
 800d642:	bd80      	pop	{r7, pc}

0800d644 <_ZSt4moveIRP18TfLiteL2NormParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800d644:	b480      	push	{r7}
 800d646:	b083      	sub	sp, #12
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	4618      	mov	r0, r3
 800d650:	370c      	adds	r7, #12
 800d652:	46bd      	mov	sp, r7
 800d654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d658:	4770      	bx	lr

0800d65a <_ZNSt10unique_ptrI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 800d65a:	b5b0      	push	{r4, r5, r7, lr}
 800d65c:	b084      	sub	sp, #16
 800d65e:	af00      	add	r7, sp, #0
 800d660:	60f8      	str	r0, [r7, #12]
 800d662:	60b9      	str	r1, [r7, #8]
 800d664:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800d666:	68fc      	ldr	r4, [r7, #12]
 800d668:	f107 0308 	add.w	r3, r7, #8
 800d66c:	4618      	mov	r0, r3
 800d66e:	f7ff ffe9 	bl	800d644 <_ZSt4moveIRP18TfLiteL2NormParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800d672:	4603      	mov	r3, r0
 800d674:	681d      	ldr	r5, [r3, #0]
 800d676:	6878      	ldr	r0, [r7, #4]
 800d678:	f7fe fe9e 	bl	800c3b8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800d67c:	4603      	mov	r3, r0
 800d67e:	461a      	mov	r2, r3
 800d680:	4629      	mov	r1, r5
 800d682:	4620      	mov	r0, r4
 800d684:	f000 f81f 	bl	800d6c6 <_ZNSt15__uniq_ptr_implI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	4618      	mov	r0, r3
 800d68c:	3710      	adds	r7, #16
 800d68e:	46bd      	mov	sp, r7
 800d690:	bdb0      	pop	{r4, r5, r7, pc}

0800d692 <_ZNSt15__uniq_ptr_implI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800d692:	b580      	push	{r7, lr}
 800d694:	b082      	sub	sp, #8
 800d696:	af00      	add	r7, sp, #0
 800d698:	6078      	str	r0, [r7, #4]
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	4618      	mov	r0, r3
 800d69e:	f002 fe43 	bl	8010328 <_ZSt3getILj0EJP18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	3708      	adds	r7, #8
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bd80      	pop	{r7, pc}

0800d6ac <_ZNSt10unique_ptrI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b082      	sub	sp, #8
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	f002 fe43 	bl	8010342 <_ZNSt15__uniq_ptr_implI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800d6bc:	4603      	mov	r3, r0
 800d6be:	4618      	mov	r0, r3
 800d6c0:	3708      	adds	r7, #8
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	bd80      	pop	{r7, pc}

0800d6c6 <_ZNSt15__uniq_ptr_implI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800d6c6:	b590      	push	{r4, r7, lr}
 800d6c8:	b085      	sub	sp, #20
 800d6ca:	af00      	add	r7, sp, #0
 800d6cc:	60f8      	str	r0, [r7, #12]
 800d6ce:	60b9      	str	r1, [r7, #8]
 800d6d0:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800d6d2:	68fc      	ldr	r4, [r7, #12]
 800d6d4:	6878      	ldr	r0, [r7, #4]
 800d6d6:	f7fe feb0 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800d6da:	4602      	mov	r2, r0
 800d6dc:	f107 0308 	add.w	r3, r7, #8
 800d6e0:	4619      	mov	r1, r3
 800d6e2:	4620      	mov	r0, r4
 800d6e4:	f002 fe45 	bl	8010372 <_ZNSt5tupleIJP18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	3714      	adds	r7, #20
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd90      	pop	{r4, r7, pc}

0800d6f2 <_ZNKSt10unique_ptrI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800d6f2:	b580      	push	{r7, lr}
 800d6f4:	b082      	sub	sp, #8
 800d6f6:	af00      	add	r7, sp, #0
 800d6f8:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800d6fa:	6878      	ldr	r0, [r7, #4]
 800d6fc:	f000 f80a 	bl	800d714 <_ZNKSt10unique_ptrI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800d700:	4603      	mov	r3, r0
 800d702:	2b00      	cmp	r3, #0
 800d704:	bf14      	ite	ne
 800d706:	2301      	movne	r3, #1
 800d708:	2300      	moveq	r3, #0
 800d70a:	b2db      	uxtb	r3, r3
 800d70c:	4618      	mov	r0, r3
 800d70e:	3708      	adds	r7, #8
 800d710:	46bd      	mov	sp, r7
 800d712:	bd80      	pop	{r7, pc}

0800d714 <_ZNKSt10unique_ptrI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800d714:	b580      	push	{r7, lr}
 800d716:	b082      	sub	sp, #8
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	4618      	mov	r0, r3
 800d720:	f002 fe40 	bl	80103a4 <_ZNKSt15__uniq_ptr_implI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800d724:	4603      	mov	r3, r0
 800d726:	4618      	mov	r0, r3
 800d728:	3708      	adds	r7, #8
 800d72a:	46bd      	mov	sp, r7
 800d72c:	bd80      	pop	{r7, pc}

0800d72e <_ZN6tflite20BuiltinDataAllocator11AllocatePODI29TfLiteLocalResponseNormParamsEEPT_v>:
  T* AllocatePOD() {
 800d72e:	b580      	push	{r7, lr}
 800d730:	b084      	sub	sp, #16
 800d732:	af00      	add	r7, sp, #0
 800d734:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	2204      	movs	r2, #4
 800d73e:	2110      	movs	r1, #16
 800d740:	6878      	ldr	r0, [r7, #4]
 800d742:	4798      	blx	r3
 800d744:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	4619      	mov	r1, r3
 800d74a:	2010      	movs	r0, #16
 800d74c:	f7f7 fe71 	bl	8005432 <_ZnwjPv>
 800d750:	4603      	mov	r3, r0
  }
 800d752:	4618      	mov	r0, r3
 800d754:	3710      	adds	r7, #16
 800d756:	46bd      	mov	sp, r7
 800d758:	bd80      	pop	{r7, pc}

0800d75a <_ZSt4moveIRP29TfLiteLocalResponseNormParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800d75a:	b480      	push	{r7}
 800d75c:	b083      	sub	sp, #12
 800d75e:	af00      	add	r7, sp, #0
 800d760:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	4618      	mov	r0, r3
 800d766:	370c      	adds	r7, #12
 800d768:	46bd      	mov	sp, r7
 800d76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76e:	4770      	bx	lr

0800d770 <_ZNSt10unique_ptrI29TfLiteLocalResponseNormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 800d770:	b5b0      	push	{r4, r5, r7, lr}
 800d772:	b084      	sub	sp, #16
 800d774:	af00      	add	r7, sp, #0
 800d776:	60f8      	str	r0, [r7, #12]
 800d778:	60b9      	str	r1, [r7, #8]
 800d77a:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800d77c:	68fc      	ldr	r4, [r7, #12]
 800d77e:	f107 0308 	add.w	r3, r7, #8
 800d782:	4618      	mov	r0, r3
 800d784:	f7ff ffe9 	bl	800d75a <_ZSt4moveIRP29TfLiteLocalResponseNormParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800d788:	4603      	mov	r3, r0
 800d78a:	681d      	ldr	r5, [r3, #0]
 800d78c:	6878      	ldr	r0, [r7, #4]
 800d78e:	f7fe fe13 	bl	800c3b8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800d792:	4603      	mov	r3, r0
 800d794:	461a      	mov	r2, r3
 800d796:	4629      	mov	r1, r5
 800d798:	4620      	mov	r0, r4
 800d79a:	f000 f81f 	bl	800d7dc <_ZNSt15__uniq_ptr_implI29TfLiteLocalResponseNormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	3710      	adds	r7, #16
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	bdb0      	pop	{r4, r5, r7, pc}

0800d7a8 <_ZNSt15__uniq_ptr_implI29TfLiteLocalResponseNormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b082      	sub	sp, #8
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	f002 fe04 	bl	80103c0 <_ZSt3getILj0EJP29TfLiteLocalResponseNormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800d7b8:	4603      	mov	r3, r0
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	3708      	adds	r7, #8
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	bd80      	pop	{r7, pc}

0800d7c2 <_ZNSt10unique_ptrI29TfLiteLocalResponseNormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800d7c2:	b580      	push	{r7, lr}
 800d7c4:	b082      	sub	sp, #8
 800d7c6:	af00      	add	r7, sp, #0
 800d7c8:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	f002 fe04 	bl	80103da <_ZNSt15__uniq_ptr_implI29TfLiteLocalResponseNormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800d7d2:	4603      	mov	r3, r0
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	3708      	adds	r7, #8
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}

0800d7dc <_ZNSt15__uniq_ptr_implI29TfLiteLocalResponseNormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800d7dc:	b590      	push	{r4, r7, lr}
 800d7de:	b085      	sub	sp, #20
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	60f8      	str	r0, [r7, #12]
 800d7e4:	60b9      	str	r1, [r7, #8]
 800d7e6:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800d7e8:	68fc      	ldr	r4, [r7, #12]
 800d7ea:	6878      	ldr	r0, [r7, #4]
 800d7ec:	f7fe fe25 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800d7f0:	4602      	mov	r2, r0
 800d7f2:	f107 0308 	add.w	r3, r7, #8
 800d7f6:	4619      	mov	r1, r3
 800d7f8:	4620      	mov	r0, r4
 800d7fa:	f002 fe06 	bl	801040a <_ZNSt5tupleIJP29TfLiteLocalResponseNormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	4618      	mov	r0, r3
 800d802:	3714      	adds	r7, #20
 800d804:	46bd      	mov	sp, r7
 800d806:	bd90      	pop	{r4, r7, pc}

0800d808 <_ZNKSt10unique_ptrI29TfLiteLocalResponseNormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800d808:	b580      	push	{r7, lr}
 800d80a:	b082      	sub	sp, #8
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800d810:	6878      	ldr	r0, [r7, #4]
 800d812:	f000 f80a 	bl	800d82a <_ZNKSt10unique_ptrI29TfLiteLocalResponseNormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800d816:	4603      	mov	r3, r0
 800d818:	2b00      	cmp	r3, #0
 800d81a:	bf14      	ite	ne
 800d81c:	2301      	movne	r3, #1
 800d81e:	2300      	moveq	r3, #0
 800d820:	b2db      	uxtb	r3, r3
 800d822:	4618      	mov	r0, r3
 800d824:	3708      	adds	r7, #8
 800d826:	46bd      	mov	sp, r7
 800d828:	bd80      	pop	{r7, pc}

0800d82a <_ZNKSt10unique_ptrI29TfLiteLocalResponseNormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800d82a:	b580      	push	{r7, lr}
 800d82c:	b082      	sub	sp, #8
 800d82e:	af00      	add	r7, sp, #0
 800d830:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	4618      	mov	r0, r3
 800d836:	f002 fe01 	bl	801043c <_ZNKSt15__uniq_ptr_implI29TfLiteLocalResponseNormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800d83a:	4603      	mov	r3, r0
 800d83c:	4618      	mov	r0, r3
 800d83e:	3708      	adds	r7, #8
 800d840:	46bd      	mov	sp, r7
 800d842:	bd80      	pop	{r7, pc}

0800d844 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI16TfLiteLSTMParamsEEPT_v>:
  T* AllocatePOD() {
 800d844:	b580      	push	{r7, lr}
 800d846:	b084      	sub	sp, #16
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	2204      	movs	r2, #4
 800d854:	2110      	movs	r1, #16
 800d856:	6878      	ldr	r0, [r7, #4]
 800d858:	4798      	blx	r3
 800d85a:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	4619      	mov	r1, r3
 800d860:	2010      	movs	r0, #16
 800d862:	f7f7 fde6 	bl	8005432 <_ZnwjPv>
 800d866:	4603      	mov	r3, r0
  }
 800d868:	4618      	mov	r0, r3
 800d86a:	3710      	adds	r7, #16
 800d86c:	46bd      	mov	sp, r7
 800d86e:	bd80      	pop	{r7, pc}

0800d870 <_ZSt4moveIRP16TfLiteLSTMParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800d870:	b480      	push	{r7}
 800d872:	b083      	sub	sp, #12
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	4618      	mov	r0, r3
 800d87c:	370c      	adds	r7, #12
 800d87e:	46bd      	mov	sp, r7
 800d880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d884:	4770      	bx	lr

0800d886 <_ZNSt10unique_ptrI16TfLiteLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 800d886:	b5b0      	push	{r4, r5, r7, lr}
 800d888:	b084      	sub	sp, #16
 800d88a:	af00      	add	r7, sp, #0
 800d88c:	60f8      	str	r0, [r7, #12]
 800d88e:	60b9      	str	r1, [r7, #8]
 800d890:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800d892:	68fc      	ldr	r4, [r7, #12]
 800d894:	f107 0308 	add.w	r3, r7, #8
 800d898:	4618      	mov	r0, r3
 800d89a:	f7ff ffe9 	bl	800d870 <_ZSt4moveIRP16TfLiteLSTMParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800d89e:	4603      	mov	r3, r0
 800d8a0:	681d      	ldr	r5, [r3, #0]
 800d8a2:	6878      	ldr	r0, [r7, #4]
 800d8a4:	f7fe fd88 	bl	800c3b8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	461a      	mov	r2, r3
 800d8ac:	4629      	mov	r1, r5
 800d8ae:	4620      	mov	r0, r4
 800d8b0:	f000 f81f 	bl	800d8f2 <_ZNSt15__uniq_ptr_implI16TfLiteLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	3710      	adds	r7, #16
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	bdb0      	pop	{r4, r5, r7, pc}

0800d8be <_ZNSt15__uniq_ptr_implI16TfLiteLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800d8be:	b580      	push	{r7, lr}
 800d8c0:	b082      	sub	sp, #8
 800d8c2:	af00      	add	r7, sp, #0
 800d8c4:	6078      	str	r0, [r7, #4]
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	f002 fdc5 	bl	8010458 <_ZSt3getILj0EJP16TfLiteLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	3708      	adds	r7, #8
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	bd80      	pop	{r7, pc}

0800d8d8 <_ZNSt10unique_ptrI16TfLiteLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b082      	sub	sp, #8
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f002 fdc5 	bl	8010472 <_ZNSt15__uniq_ptr_implI16TfLiteLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	3708      	adds	r7, #8
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	bd80      	pop	{r7, pc}

0800d8f2 <_ZNSt15__uniq_ptr_implI16TfLiteLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800d8f2:	b590      	push	{r4, r7, lr}
 800d8f4:	b085      	sub	sp, #20
 800d8f6:	af00      	add	r7, sp, #0
 800d8f8:	60f8      	str	r0, [r7, #12]
 800d8fa:	60b9      	str	r1, [r7, #8]
 800d8fc:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800d8fe:	68fc      	ldr	r4, [r7, #12]
 800d900:	6878      	ldr	r0, [r7, #4]
 800d902:	f7fe fd9a 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800d906:	4602      	mov	r2, r0
 800d908:	f107 0308 	add.w	r3, r7, #8
 800d90c:	4619      	mov	r1, r3
 800d90e:	4620      	mov	r0, r4
 800d910:	f002 fdc7 	bl	80104a2 <_ZNSt5tupleIJP16TfLiteLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	4618      	mov	r0, r3
 800d918:	3714      	adds	r7, #20
 800d91a:	46bd      	mov	sp, r7
 800d91c:	bd90      	pop	{r4, r7, pc}

0800d91e <_ZNKSt10unique_ptrI16TfLiteLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800d91e:	b580      	push	{r7, lr}
 800d920:	b082      	sub	sp, #8
 800d922:	af00      	add	r7, sp, #0
 800d924:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800d926:	6878      	ldr	r0, [r7, #4]
 800d928:	f000 f80a 	bl	800d940 <_ZNKSt10unique_ptrI16TfLiteLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800d92c:	4603      	mov	r3, r0
 800d92e:	2b00      	cmp	r3, #0
 800d930:	bf14      	ite	ne
 800d932:	2301      	movne	r3, #1
 800d934:	2300      	moveq	r3, #0
 800d936:	b2db      	uxtb	r3, r3
 800d938:	4618      	mov	r0, r3
 800d93a:	3708      	adds	r7, #8
 800d93c:	46bd      	mov	sp, r7
 800d93e:	bd80      	pop	{r7, pc}

0800d940 <_ZNKSt10unique_ptrI16TfLiteLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800d940:	b580      	push	{r7, lr}
 800d942:	b082      	sub	sp, #8
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	4618      	mov	r0, r3
 800d94c:	f002 fdc2 	bl	80104d4 <_ZNKSt15__uniq_ptr_implI16TfLiteLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800d950:	4603      	mov	r3, r0
 800d952:	4618      	mov	r0, r3
 800d954:	3708      	adds	r7, #8
 800d956:	46bd      	mov	sp, r7
 800d958:	bd80      	pop	{r7, pc}

0800d95a <_ZN6tflite20BuiltinDataAllocator11AllocatePODI38TfLiteUnidirectionalSequenceLSTMParamsEEPT_v>:
  T* AllocatePOD() {
 800d95a:	b580      	push	{r7, lr}
 800d95c:	b084      	sub	sp, #16
 800d95e:	af00      	add	r7, sp, #0
 800d960:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	2204      	movs	r2, #4
 800d96a:	2110      	movs	r1, #16
 800d96c:	6878      	ldr	r0, [r7, #4]
 800d96e:	4798      	blx	r3
 800d970:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	4619      	mov	r1, r3
 800d976:	2010      	movs	r0, #16
 800d978:	f7f7 fd5b 	bl	8005432 <_ZnwjPv>
 800d97c:	4603      	mov	r3, r0
  }
 800d97e:	4618      	mov	r0, r3
 800d980:	3710      	adds	r7, #16
 800d982:	46bd      	mov	sp, r7
 800d984:	bd80      	pop	{r7, pc}

0800d986 <_ZSt4moveIRP38TfLiteUnidirectionalSequenceLSTMParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800d986:	b480      	push	{r7}
 800d988:	b083      	sub	sp, #12
 800d98a:	af00      	add	r7, sp, #0
 800d98c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	4618      	mov	r0, r3
 800d992:	370c      	adds	r7, #12
 800d994:	46bd      	mov	sp, r7
 800d996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99a:	4770      	bx	lr

0800d99c <_ZNSt10unique_ptrI38TfLiteUnidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 800d99c:	b5b0      	push	{r4, r5, r7, lr}
 800d99e:	b084      	sub	sp, #16
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	60f8      	str	r0, [r7, #12]
 800d9a4:	60b9      	str	r1, [r7, #8]
 800d9a6:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800d9a8:	68fc      	ldr	r4, [r7, #12]
 800d9aa:	f107 0308 	add.w	r3, r7, #8
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f7ff ffe9 	bl	800d986 <_ZSt4moveIRP38TfLiteUnidirectionalSequenceLSTMParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800d9b4:	4603      	mov	r3, r0
 800d9b6:	681d      	ldr	r5, [r3, #0]
 800d9b8:	6878      	ldr	r0, [r7, #4]
 800d9ba:	f7fe fcfd 	bl	800c3b8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800d9be:	4603      	mov	r3, r0
 800d9c0:	461a      	mov	r2, r3
 800d9c2:	4629      	mov	r1, r5
 800d9c4:	4620      	mov	r0, r4
 800d9c6:	f000 f81f 	bl	800da08 <_ZNSt15__uniq_ptr_implI38TfLiteUnidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	3710      	adds	r7, #16
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	bdb0      	pop	{r4, r5, r7, pc}

0800d9d4 <_ZNSt15__uniq_ptr_implI38TfLiteUnidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b082      	sub	sp, #8
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	4618      	mov	r0, r3
 800d9e0:	f002 fd86 	bl	80104f0 <_ZSt3getILj0EJP38TfLiteUnidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800d9e4:	4603      	mov	r3, r0
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	3708      	adds	r7, #8
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	bd80      	pop	{r7, pc}

0800d9ee <_ZNSt10unique_ptrI38TfLiteUnidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800d9ee:	b580      	push	{r7, lr}
 800d9f0:	b082      	sub	sp, #8
 800d9f2:	af00      	add	r7, sp, #0
 800d9f4:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	f002 fd86 	bl	801050a <_ZNSt15__uniq_ptr_implI38TfLiteUnidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800d9fe:	4603      	mov	r3, r0
 800da00:	4618      	mov	r0, r3
 800da02:	3708      	adds	r7, #8
 800da04:	46bd      	mov	sp, r7
 800da06:	bd80      	pop	{r7, pc}

0800da08 <_ZNSt15__uniq_ptr_implI38TfLiteUnidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800da08:	b590      	push	{r4, r7, lr}
 800da0a:	b085      	sub	sp, #20
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	60f8      	str	r0, [r7, #12]
 800da10:	60b9      	str	r1, [r7, #8]
 800da12:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800da14:	68fc      	ldr	r4, [r7, #12]
 800da16:	6878      	ldr	r0, [r7, #4]
 800da18:	f7fe fd0f 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800da1c:	4602      	mov	r2, r0
 800da1e:	f107 0308 	add.w	r3, r7, #8
 800da22:	4619      	mov	r1, r3
 800da24:	4620      	mov	r0, r4
 800da26:	f002 fd88 	bl	801053a <_ZNSt5tupleIJP38TfLiteUnidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	4618      	mov	r0, r3
 800da2e:	3714      	adds	r7, #20
 800da30:	46bd      	mov	sp, r7
 800da32:	bd90      	pop	{r4, r7, pc}

0800da34 <_ZNKSt10unique_ptrI38TfLiteUnidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800da34:	b580      	push	{r7, lr}
 800da36:	b082      	sub	sp, #8
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800da3c:	6878      	ldr	r0, [r7, #4]
 800da3e:	f000 f80a 	bl	800da56 <_ZNKSt10unique_ptrI38TfLiteUnidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800da42:	4603      	mov	r3, r0
 800da44:	2b00      	cmp	r3, #0
 800da46:	bf14      	ite	ne
 800da48:	2301      	movne	r3, #1
 800da4a:	2300      	moveq	r3, #0
 800da4c:	b2db      	uxtb	r3, r3
 800da4e:	4618      	mov	r0, r3
 800da50:	3708      	adds	r7, #8
 800da52:	46bd      	mov	sp, r7
 800da54:	bd80      	pop	{r7, pc}

0800da56 <_ZNKSt10unique_ptrI38TfLiteUnidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800da56:	b580      	push	{r7, lr}
 800da58:	b082      	sub	sp, #8
 800da5a:	af00      	add	r7, sp, #0
 800da5c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	4618      	mov	r0, r3
 800da62:	f002 fd83 	bl	801056c <_ZNKSt15__uniq_ptr_implI38TfLiteUnidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800da66:	4603      	mov	r3, r0
 800da68:	4618      	mov	r0, r3
 800da6a:	3708      	adds	r7, #8
 800da6c:	46bd      	mov	sp, r7
 800da6e:	bd80      	pop	{r7, pc}

0800da70 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI37TfLiteBidirectionalSequenceLSTMParamsEEPT_v>:
  T* AllocatePOD() {
 800da70:	b580      	push	{r7, lr}
 800da72:	b084      	sub	sp, #16
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	2204      	movs	r2, #4
 800da80:	2110      	movs	r1, #16
 800da82:	6878      	ldr	r0, [r7, #4]
 800da84:	4798      	blx	r3
 800da86:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	4619      	mov	r1, r3
 800da8c:	2010      	movs	r0, #16
 800da8e:	f7f7 fcd0 	bl	8005432 <_ZnwjPv>
 800da92:	4603      	mov	r3, r0
  }
 800da94:	4618      	mov	r0, r3
 800da96:	3710      	adds	r7, #16
 800da98:	46bd      	mov	sp, r7
 800da9a:	bd80      	pop	{r7, pc}

0800da9c <_ZSt4moveIRP37TfLiteBidirectionalSequenceLSTMParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800da9c:	b480      	push	{r7}
 800da9e:	b083      	sub	sp, #12
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	4618      	mov	r0, r3
 800daa8:	370c      	adds	r7, #12
 800daaa:	46bd      	mov	sp, r7
 800daac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab0:	4770      	bx	lr

0800dab2 <_ZNSt10unique_ptrI37TfLiteBidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 800dab2:	b5b0      	push	{r4, r5, r7, lr}
 800dab4:	b084      	sub	sp, #16
 800dab6:	af00      	add	r7, sp, #0
 800dab8:	60f8      	str	r0, [r7, #12]
 800daba:	60b9      	str	r1, [r7, #8]
 800dabc:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800dabe:	68fc      	ldr	r4, [r7, #12]
 800dac0:	f107 0308 	add.w	r3, r7, #8
 800dac4:	4618      	mov	r0, r3
 800dac6:	f7ff ffe9 	bl	800da9c <_ZSt4moveIRP37TfLiteBidirectionalSequenceLSTMParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800daca:	4603      	mov	r3, r0
 800dacc:	681d      	ldr	r5, [r3, #0]
 800dace:	6878      	ldr	r0, [r7, #4]
 800dad0:	f7fe fc72 	bl	800c3b8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800dad4:	4603      	mov	r3, r0
 800dad6:	461a      	mov	r2, r3
 800dad8:	4629      	mov	r1, r5
 800dada:	4620      	mov	r0, r4
 800dadc:	f000 f81f 	bl	800db1e <_ZNSt15__uniq_ptr_implI37TfLiteBidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	4618      	mov	r0, r3
 800dae4:	3710      	adds	r7, #16
 800dae6:	46bd      	mov	sp, r7
 800dae8:	bdb0      	pop	{r4, r5, r7, pc}

0800daea <_ZNSt15__uniq_ptr_implI37TfLiteBidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800daea:	b580      	push	{r7, lr}
 800daec:	b082      	sub	sp, #8
 800daee:	af00      	add	r7, sp, #0
 800daf0:	6078      	str	r0, [r7, #4]
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	4618      	mov	r0, r3
 800daf6:	f002 fd47 	bl	8010588 <_ZSt3getILj0EJP37TfLiteBidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800dafa:	4603      	mov	r3, r0
 800dafc:	4618      	mov	r0, r3
 800dafe:	3708      	adds	r7, #8
 800db00:	46bd      	mov	sp, r7
 800db02:	bd80      	pop	{r7, pc}

0800db04 <_ZNSt10unique_ptrI37TfLiteBidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800db04:	b580      	push	{r7, lr}
 800db06:	b082      	sub	sp, #8
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	4618      	mov	r0, r3
 800db10:	f002 fd47 	bl	80105a2 <_ZNSt15__uniq_ptr_implI37TfLiteBidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800db14:	4603      	mov	r3, r0
 800db16:	4618      	mov	r0, r3
 800db18:	3708      	adds	r7, #8
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}

0800db1e <_ZNSt15__uniq_ptr_implI37TfLiteBidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800db1e:	b590      	push	{r4, r7, lr}
 800db20:	b085      	sub	sp, #20
 800db22:	af00      	add	r7, sp, #0
 800db24:	60f8      	str	r0, [r7, #12]
 800db26:	60b9      	str	r1, [r7, #8]
 800db28:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800db2a:	68fc      	ldr	r4, [r7, #12]
 800db2c:	6878      	ldr	r0, [r7, #4]
 800db2e:	f7fe fc84 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800db32:	4602      	mov	r2, r0
 800db34:	f107 0308 	add.w	r3, r7, #8
 800db38:	4619      	mov	r1, r3
 800db3a:	4620      	mov	r0, r4
 800db3c:	f002 fd49 	bl	80105d2 <_ZNSt5tupleIJP37TfLiteBidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	4618      	mov	r0, r3
 800db44:	3714      	adds	r7, #20
 800db46:	46bd      	mov	sp, r7
 800db48:	bd90      	pop	{r4, r7, pc}

0800db4a <_ZNKSt10unique_ptrI37TfLiteBidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800db4a:	b580      	push	{r7, lr}
 800db4c:	b082      	sub	sp, #8
 800db4e:	af00      	add	r7, sp, #0
 800db50:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	f000 f80a 	bl	800db6c <_ZNKSt10unique_ptrI37TfLiteBidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800db58:	4603      	mov	r3, r0
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	bf14      	ite	ne
 800db5e:	2301      	movne	r3, #1
 800db60:	2300      	moveq	r3, #0
 800db62:	b2db      	uxtb	r3, r3
 800db64:	4618      	mov	r0, r3
 800db66:	3708      	adds	r7, #8
 800db68:	46bd      	mov	sp, r7
 800db6a:	bd80      	pop	{r7, pc}

0800db6c <_ZNKSt10unique_ptrI37TfLiteBidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b082      	sub	sp, #8
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	4618      	mov	r0, r3
 800db78:	f002 fd44 	bl	8010604 <_ZNKSt15__uniq_ptr_implI37TfLiteBidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800db7c:	4603      	mov	r3, r0
 800db7e:	4618      	mov	r0, r3
 800db80:	3708      	adds	r7, #8
 800db82:	46bd      	mov	sp, r7
 800db84:	bd80      	pop	{r7, pc}

0800db86 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI26TfLiteResizeBilinearParamsEEPT_v>:
  T* AllocatePOD() {
 800db86:	b580      	push	{r7, lr}
 800db88:	b084      	sub	sp, #16
 800db8a:	af00      	add	r7, sp, #0
 800db8c:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	2201      	movs	r2, #1
 800db96:	2102      	movs	r1, #2
 800db98:	6878      	ldr	r0, [r7, #4]
 800db9a:	4798      	blx	r3
 800db9c:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	4619      	mov	r1, r3
 800dba2:	2002      	movs	r0, #2
 800dba4:	f7f7 fc45 	bl	8005432 <_ZnwjPv>
 800dba8:	4603      	mov	r3, r0
  }
 800dbaa:	4618      	mov	r0, r3
 800dbac:	3710      	adds	r7, #16
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	bd80      	pop	{r7, pc}

0800dbb2 <_ZSt4moveIRP26TfLiteResizeBilinearParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800dbb2:	b480      	push	{r7}
 800dbb4:	b083      	sub	sp, #12
 800dbb6:	af00      	add	r7, sp, #0
 800dbb8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	370c      	adds	r7, #12
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc6:	4770      	bx	lr

0800dbc8 <_ZNSt10unique_ptrI26TfLiteResizeBilinearParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 800dbc8:	b5b0      	push	{r4, r5, r7, lr}
 800dbca:	b084      	sub	sp, #16
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	60f8      	str	r0, [r7, #12]
 800dbd0:	60b9      	str	r1, [r7, #8]
 800dbd2:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800dbd4:	68fc      	ldr	r4, [r7, #12]
 800dbd6:	f107 0308 	add.w	r3, r7, #8
 800dbda:	4618      	mov	r0, r3
 800dbdc:	f7ff ffe9 	bl	800dbb2 <_ZSt4moveIRP26TfLiteResizeBilinearParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	681d      	ldr	r5, [r3, #0]
 800dbe4:	6878      	ldr	r0, [r7, #4]
 800dbe6:	f7fe fbe7 	bl	800c3b8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800dbea:	4603      	mov	r3, r0
 800dbec:	461a      	mov	r2, r3
 800dbee:	4629      	mov	r1, r5
 800dbf0:	4620      	mov	r0, r4
 800dbf2:	f000 f81f 	bl	800dc34 <_ZNSt15__uniq_ptr_implI26TfLiteResizeBilinearParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	3710      	adds	r7, #16
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bdb0      	pop	{r4, r5, r7, pc}

0800dc00 <_ZNSt15__uniq_ptr_implI26TfLiteResizeBilinearParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b082      	sub	sp, #8
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	f002 fd08 	bl	8010620 <_ZSt3getILj0EJP26TfLiteResizeBilinearParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800dc10:	4603      	mov	r3, r0
 800dc12:	4618      	mov	r0, r3
 800dc14:	3708      	adds	r7, #8
 800dc16:	46bd      	mov	sp, r7
 800dc18:	bd80      	pop	{r7, pc}

0800dc1a <_ZNSt10unique_ptrI26TfLiteResizeBilinearParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800dc1a:	b580      	push	{r7, lr}
 800dc1c:	b082      	sub	sp, #8
 800dc1e:	af00      	add	r7, sp, #0
 800dc20:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	4618      	mov	r0, r3
 800dc26:	f002 fd08 	bl	801063a <_ZNSt15__uniq_ptr_implI26TfLiteResizeBilinearParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	3708      	adds	r7, #8
 800dc30:	46bd      	mov	sp, r7
 800dc32:	bd80      	pop	{r7, pc}

0800dc34 <_ZNSt15__uniq_ptr_implI26TfLiteResizeBilinearParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800dc34:	b590      	push	{r4, r7, lr}
 800dc36:	b085      	sub	sp, #20
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	60f8      	str	r0, [r7, #12]
 800dc3c:	60b9      	str	r1, [r7, #8]
 800dc3e:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800dc40:	68fc      	ldr	r4, [r7, #12]
 800dc42:	6878      	ldr	r0, [r7, #4]
 800dc44:	f7fe fbf9 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800dc48:	4602      	mov	r2, r0
 800dc4a:	f107 0308 	add.w	r3, r7, #8
 800dc4e:	4619      	mov	r1, r3
 800dc50:	4620      	mov	r0, r4
 800dc52:	f002 fd0a 	bl	801066a <_ZNSt5tupleIJP26TfLiteResizeBilinearParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	4618      	mov	r0, r3
 800dc5a:	3714      	adds	r7, #20
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	bd90      	pop	{r4, r7, pc}

0800dc60 <_ZNKSt10unique_ptrI26TfLiteResizeBilinearParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b082      	sub	sp, #8
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800dc68:	6878      	ldr	r0, [r7, #4]
 800dc6a:	f000 f80a 	bl	800dc82 <_ZNKSt10unique_ptrI26TfLiteResizeBilinearParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800dc6e:	4603      	mov	r3, r0
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	bf14      	ite	ne
 800dc74:	2301      	movne	r3, #1
 800dc76:	2300      	moveq	r3, #0
 800dc78:	b2db      	uxtb	r3, r3
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	3708      	adds	r7, #8
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}

0800dc82 <_ZNKSt10unique_ptrI26TfLiteResizeBilinearParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800dc82:	b580      	push	{r7, lr}
 800dc84:	b082      	sub	sp, #8
 800dc86:	af00      	add	r7, sp, #0
 800dc88:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	f002 fd05 	bl	801069c <_ZNKSt15__uniq_ptr_implI26TfLiteResizeBilinearParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800dc92:	4603      	mov	r3, r0
 800dc94:	4618      	mov	r0, r3
 800dc96:	3708      	adds	r7, #8
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	bd80      	pop	{r7, pc}

0800dc9c <_ZN6tflite20BuiltinDataAllocator11AllocatePODI33TfLiteResizeNearestNeighborParamsEEPT_v>:
  T* AllocatePOD() {
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	b084      	sub	sp, #16
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	2201      	movs	r2, #1
 800dcac:	2102      	movs	r1, #2
 800dcae:	6878      	ldr	r0, [r7, #4]
 800dcb0:	4798      	blx	r3
 800dcb2:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	4619      	mov	r1, r3
 800dcb8:	2002      	movs	r0, #2
 800dcba:	f7f7 fbba 	bl	8005432 <_ZnwjPv>
 800dcbe:	4603      	mov	r3, r0
  }
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	3710      	adds	r7, #16
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	bd80      	pop	{r7, pc}

0800dcc8 <_ZSt4moveIRP33TfLiteResizeNearestNeighborParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800dcc8:	b480      	push	{r7}
 800dcca:	b083      	sub	sp, #12
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	370c      	adds	r7, #12
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcdc:	4770      	bx	lr

0800dcde <_ZNSt10unique_ptrI33TfLiteResizeNearestNeighborParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 800dcde:	b5b0      	push	{r4, r5, r7, lr}
 800dce0:	b084      	sub	sp, #16
 800dce2:	af00      	add	r7, sp, #0
 800dce4:	60f8      	str	r0, [r7, #12]
 800dce6:	60b9      	str	r1, [r7, #8]
 800dce8:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800dcea:	68fc      	ldr	r4, [r7, #12]
 800dcec:	f107 0308 	add.w	r3, r7, #8
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	f7ff ffe9 	bl	800dcc8 <_ZSt4moveIRP33TfLiteResizeNearestNeighborParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	681d      	ldr	r5, [r3, #0]
 800dcfa:	6878      	ldr	r0, [r7, #4]
 800dcfc:	f7fe fb5c 	bl	800c3b8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800dd00:	4603      	mov	r3, r0
 800dd02:	461a      	mov	r2, r3
 800dd04:	4629      	mov	r1, r5
 800dd06:	4620      	mov	r0, r4
 800dd08:	f000 f81f 	bl	800dd4a <_ZNSt15__uniq_ptr_implI33TfLiteResizeNearestNeighborParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	4618      	mov	r0, r3
 800dd10:	3710      	adds	r7, #16
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bdb0      	pop	{r4, r5, r7, pc}

0800dd16 <_ZNSt15__uniq_ptr_implI33TfLiteResizeNearestNeighborParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800dd16:	b580      	push	{r7, lr}
 800dd18:	b082      	sub	sp, #8
 800dd1a:	af00      	add	r7, sp, #0
 800dd1c:	6078      	str	r0, [r7, #4]
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	4618      	mov	r0, r3
 800dd22:	f002 fcc9 	bl	80106b8 <_ZSt3getILj0EJP33TfLiteResizeNearestNeighborParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800dd26:	4603      	mov	r3, r0
 800dd28:	4618      	mov	r0, r3
 800dd2a:	3708      	adds	r7, #8
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	bd80      	pop	{r7, pc}

0800dd30 <_ZNSt10unique_ptrI33TfLiteResizeNearestNeighborParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b082      	sub	sp, #8
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	f002 fcc9 	bl	80106d2 <_ZNSt15__uniq_ptr_implI33TfLiteResizeNearestNeighborParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800dd40:	4603      	mov	r3, r0
 800dd42:	4618      	mov	r0, r3
 800dd44:	3708      	adds	r7, #8
 800dd46:	46bd      	mov	sp, r7
 800dd48:	bd80      	pop	{r7, pc}

0800dd4a <_ZNSt15__uniq_ptr_implI33TfLiteResizeNearestNeighborParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800dd4a:	b590      	push	{r4, r7, lr}
 800dd4c:	b085      	sub	sp, #20
 800dd4e:	af00      	add	r7, sp, #0
 800dd50:	60f8      	str	r0, [r7, #12]
 800dd52:	60b9      	str	r1, [r7, #8]
 800dd54:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800dd56:	68fc      	ldr	r4, [r7, #12]
 800dd58:	6878      	ldr	r0, [r7, #4]
 800dd5a:	f7fe fb6e 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800dd5e:	4602      	mov	r2, r0
 800dd60:	f107 0308 	add.w	r3, r7, #8
 800dd64:	4619      	mov	r1, r3
 800dd66:	4620      	mov	r0, r4
 800dd68:	f002 fccb 	bl	8010702 <_ZNSt5tupleIJP33TfLiteResizeNearestNeighborParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	4618      	mov	r0, r3
 800dd70:	3714      	adds	r7, #20
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd90      	pop	{r4, r7, pc}

0800dd76 <_ZNKSt10unique_ptrI33TfLiteResizeNearestNeighborParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800dd76:	b580      	push	{r7, lr}
 800dd78:	b082      	sub	sp, #8
 800dd7a:	af00      	add	r7, sp, #0
 800dd7c:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800dd7e:	6878      	ldr	r0, [r7, #4]
 800dd80:	f000 f80a 	bl	800dd98 <_ZNKSt10unique_ptrI33TfLiteResizeNearestNeighborParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800dd84:	4603      	mov	r3, r0
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	bf14      	ite	ne
 800dd8a:	2301      	movne	r3, #1
 800dd8c:	2300      	moveq	r3, #0
 800dd8e:	b2db      	uxtb	r3, r3
 800dd90:	4618      	mov	r0, r3
 800dd92:	3708      	adds	r7, #8
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bd80      	pop	{r7, pc}

0800dd98 <_ZNKSt10unique_ptrI33TfLiteResizeNearestNeighborParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b082      	sub	sp, #8
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	4618      	mov	r0, r3
 800dda4:	f002 fcc6 	bl	8010734 <_ZNKSt15__uniq_ptr_implI33TfLiteResizeNearestNeighborParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800dda8:	4603      	mov	r3, r0
 800ddaa:	4618      	mov	r0, r3
 800ddac:	3708      	adds	r7, #8
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	bd80      	pop	{r7, pc}

0800ddb2 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteReshapeParamsEEPT_v>:
  T* AllocatePOD() {
 800ddb2:	b580      	push	{r7, lr}
 800ddb4:	b084      	sub	sp, #16
 800ddb6:	af00      	add	r7, sp, #0
 800ddb8:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	2204      	movs	r2, #4
 800ddc2:	2124      	movs	r1, #36	; 0x24
 800ddc4:	6878      	ldr	r0, [r7, #4]
 800ddc6:	4798      	blx	r3
 800ddc8:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	4619      	mov	r1, r3
 800ddce:	2024      	movs	r0, #36	; 0x24
 800ddd0:	f7f7 fb2f 	bl	8005432 <_ZnwjPv>
 800ddd4:	4603      	mov	r3, r0
  }
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	3710      	adds	r7, #16
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bd80      	pop	{r7, pc}

0800ddde <_ZSt4moveIRP19TfLiteReshapeParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800ddde:	b480      	push	{r7}
 800dde0:	b083      	sub	sp, #12
 800dde2:	af00      	add	r7, sp, #0
 800dde4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	4618      	mov	r0, r3
 800ddea:	370c      	adds	r7, #12
 800ddec:	46bd      	mov	sp, r7
 800ddee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf2:	4770      	bx	lr

0800ddf4 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 800ddf4:	b5b0      	push	{r4, r5, r7, lr}
 800ddf6:	b084      	sub	sp, #16
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	60f8      	str	r0, [r7, #12]
 800ddfc:	60b9      	str	r1, [r7, #8]
 800ddfe:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800de00:	68fc      	ldr	r4, [r7, #12]
 800de02:	f107 0308 	add.w	r3, r7, #8
 800de06:	4618      	mov	r0, r3
 800de08:	f7ff ffe9 	bl	800ddde <_ZSt4moveIRP19TfLiteReshapeParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800de0c:	4603      	mov	r3, r0
 800de0e:	681d      	ldr	r5, [r3, #0]
 800de10:	6878      	ldr	r0, [r7, #4]
 800de12:	f7fe fad1 	bl	800c3b8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800de16:	4603      	mov	r3, r0
 800de18:	461a      	mov	r2, r3
 800de1a:	4629      	mov	r1, r5
 800de1c:	4620      	mov	r0, r4
 800de1e:	f000 f81f 	bl	800de60 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	4618      	mov	r0, r3
 800de26:	3710      	adds	r7, #16
 800de28:	46bd      	mov	sp, r7
 800de2a:	bdb0      	pop	{r4, r5, r7, pc}

0800de2c <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b082      	sub	sp, #8
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	4618      	mov	r0, r3
 800de38:	f002 fc8a 	bl	8010750 <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800de3c:	4603      	mov	r3, r0
 800de3e:	4618      	mov	r0, r3
 800de40:	3708      	adds	r7, #8
 800de42:	46bd      	mov	sp, r7
 800de44:	bd80      	pop	{r7, pc}

0800de46 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800de46:	b580      	push	{r7, lr}
 800de48:	b082      	sub	sp, #8
 800de4a:	af00      	add	r7, sp, #0
 800de4c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	4618      	mov	r0, r3
 800de52:	f002 fc8a 	bl	801076a <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800de56:	4603      	mov	r3, r0
 800de58:	4618      	mov	r0, r3
 800de5a:	3708      	adds	r7, #8
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bd80      	pop	{r7, pc}

0800de60 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800de60:	b590      	push	{r4, r7, lr}
 800de62:	b085      	sub	sp, #20
 800de64:	af00      	add	r7, sp, #0
 800de66:	60f8      	str	r0, [r7, #12]
 800de68:	60b9      	str	r1, [r7, #8]
 800de6a:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800de6c:	68fc      	ldr	r4, [r7, #12]
 800de6e:	6878      	ldr	r0, [r7, #4]
 800de70:	f7fe fae3 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800de74:	4602      	mov	r2, r0
 800de76:	f107 0308 	add.w	r3, r7, #8
 800de7a:	4619      	mov	r1, r3
 800de7c:	4620      	mov	r0, r4
 800de7e:	f002 fc8c 	bl	801079a <_ZNSt5tupleIJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	4618      	mov	r0, r3
 800de86:	3714      	adds	r7, #20
 800de88:	46bd      	mov	sp, r7
 800de8a:	bd90      	pop	{r4, r7, pc}

0800de8c <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800de8c:	b580      	push	{r7, lr}
 800de8e:	b082      	sub	sp, #8
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800de94:	6878      	ldr	r0, [r7, #4]
 800de96:	f000 f80a 	bl	800deae <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800de9a:	4603      	mov	r3, r0
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	bf14      	ite	ne
 800dea0:	2301      	movne	r3, #1
 800dea2:	2300      	moveq	r3, #0
 800dea4:	b2db      	uxtb	r3, r3
 800dea6:	4618      	mov	r0, r3
 800dea8:	3708      	adds	r7, #8
 800deaa:	46bd      	mov	sp, r7
 800deac:	bd80      	pop	{r7, pc}

0800deae <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800deae:	b580      	push	{r7, lr}
 800deb0:	b082      	sub	sp, #8
 800deb2:	af00      	add	r7, sp, #0
 800deb4:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	4618      	mov	r0, r3
 800deba:	f002 fc87 	bl	80107cc <_ZNKSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800debe:	4603      	mov	r3, r0
 800dec0:	4618      	mov	r0, r3
 800dec2:	3708      	adds	r7, #8
 800dec4:	46bd      	mov	sp, r7
 800dec6:	bd80      	pop	{r7, pc}

0800dec8 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI20TfLiteSkipGramParamsEEPT_v>:
  T* AllocatePOD() {
 800dec8:	b580      	push	{r7, lr}
 800deca:	b084      	sub	sp, #16
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	2204      	movs	r2, #4
 800ded8:	210c      	movs	r1, #12
 800deda:	6878      	ldr	r0, [r7, #4]
 800dedc:	4798      	blx	r3
 800dede:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	4619      	mov	r1, r3
 800dee4:	200c      	movs	r0, #12
 800dee6:	f7f7 faa4 	bl	8005432 <_ZnwjPv>
 800deea:	4603      	mov	r3, r0
  }
 800deec:	4618      	mov	r0, r3
 800deee:	3710      	adds	r7, #16
 800def0:	46bd      	mov	sp, r7
 800def2:	bd80      	pop	{r7, pc}

0800def4 <_ZSt4moveIRP20TfLiteSkipGramParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800def4:	b480      	push	{r7}
 800def6:	b083      	sub	sp, #12
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	4618      	mov	r0, r3
 800df00:	370c      	adds	r7, #12
 800df02:	46bd      	mov	sp, r7
 800df04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df08:	4770      	bx	lr

0800df0a <_ZNSt10unique_ptrI20TfLiteSkipGramParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 800df0a:	b5b0      	push	{r4, r5, r7, lr}
 800df0c:	b084      	sub	sp, #16
 800df0e:	af00      	add	r7, sp, #0
 800df10:	60f8      	str	r0, [r7, #12]
 800df12:	60b9      	str	r1, [r7, #8]
 800df14:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800df16:	68fc      	ldr	r4, [r7, #12]
 800df18:	f107 0308 	add.w	r3, r7, #8
 800df1c:	4618      	mov	r0, r3
 800df1e:	f7ff ffe9 	bl	800def4 <_ZSt4moveIRP20TfLiteSkipGramParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800df22:	4603      	mov	r3, r0
 800df24:	681d      	ldr	r5, [r3, #0]
 800df26:	6878      	ldr	r0, [r7, #4]
 800df28:	f7fe fa46 	bl	800c3b8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800df2c:	4603      	mov	r3, r0
 800df2e:	461a      	mov	r2, r3
 800df30:	4629      	mov	r1, r5
 800df32:	4620      	mov	r0, r4
 800df34:	f000 f81f 	bl	800df76 <_ZNSt15__uniq_ptr_implI20TfLiteSkipGramParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	4618      	mov	r0, r3
 800df3c:	3710      	adds	r7, #16
 800df3e:	46bd      	mov	sp, r7
 800df40:	bdb0      	pop	{r4, r5, r7, pc}

0800df42 <_ZNSt15__uniq_ptr_implI20TfLiteSkipGramParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800df42:	b580      	push	{r7, lr}
 800df44:	b082      	sub	sp, #8
 800df46:	af00      	add	r7, sp, #0
 800df48:	6078      	str	r0, [r7, #4]
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	4618      	mov	r0, r3
 800df4e:	f002 fc4b 	bl	80107e8 <_ZSt3getILj0EJP20TfLiteSkipGramParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800df52:	4603      	mov	r3, r0
 800df54:	4618      	mov	r0, r3
 800df56:	3708      	adds	r7, #8
 800df58:	46bd      	mov	sp, r7
 800df5a:	bd80      	pop	{r7, pc}

0800df5c <_ZNSt10unique_ptrI20TfLiteSkipGramParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b082      	sub	sp, #8
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	4618      	mov	r0, r3
 800df68:	f002 fc4b 	bl	8010802 <_ZNSt15__uniq_ptr_implI20TfLiteSkipGramParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800df6c:	4603      	mov	r3, r0
 800df6e:	4618      	mov	r0, r3
 800df70:	3708      	adds	r7, #8
 800df72:	46bd      	mov	sp, r7
 800df74:	bd80      	pop	{r7, pc}

0800df76 <_ZNSt15__uniq_ptr_implI20TfLiteSkipGramParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800df76:	b590      	push	{r4, r7, lr}
 800df78:	b085      	sub	sp, #20
 800df7a:	af00      	add	r7, sp, #0
 800df7c:	60f8      	str	r0, [r7, #12]
 800df7e:	60b9      	str	r1, [r7, #8]
 800df80:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800df82:	68fc      	ldr	r4, [r7, #12]
 800df84:	6878      	ldr	r0, [r7, #4]
 800df86:	f7fe fa58 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800df8a:	4602      	mov	r2, r0
 800df8c:	f107 0308 	add.w	r3, r7, #8
 800df90:	4619      	mov	r1, r3
 800df92:	4620      	mov	r0, r4
 800df94:	f002 fc4d 	bl	8010832 <_ZNSt5tupleIJP20TfLiteSkipGramParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	4618      	mov	r0, r3
 800df9c:	3714      	adds	r7, #20
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	bd90      	pop	{r4, r7, pc}

0800dfa2 <_ZNKSt10unique_ptrI20TfLiteSkipGramParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800dfa2:	b580      	push	{r7, lr}
 800dfa4:	b082      	sub	sp, #8
 800dfa6:	af00      	add	r7, sp, #0
 800dfa8:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800dfaa:	6878      	ldr	r0, [r7, #4]
 800dfac:	f000 f80a 	bl	800dfc4 <_ZNKSt10unique_ptrI20TfLiteSkipGramParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800dfb0:	4603      	mov	r3, r0
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	bf14      	ite	ne
 800dfb6:	2301      	movne	r3, #1
 800dfb8:	2300      	moveq	r3, #0
 800dfba:	b2db      	uxtb	r3, r3
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	3708      	adds	r7, #8
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	bd80      	pop	{r7, pc}

0800dfc4 <_ZNKSt10unique_ptrI20TfLiteSkipGramParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b082      	sub	sp, #8
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	4618      	mov	r0, r3
 800dfd0:	f002 fc48 	bl	8010864 <_ZNKSt15__uniq_ptr_implI20TfLiteSkipGramParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	3708      	adds	r7, #8
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	bd80      	pop	{r7, pc}

0800dfde <_ZN6tflite20BuiltinDataAllocator11AllocatePODI24TfLiteSpaceToDepthParamsEEPT_v>:
  T* AllocatePOD() {
 800dfde:	b580      	push	{r7, lr}
 800dfe0:	b084      	sub	sp, #16
 800dfe2:	af00      	add	r7, sp, #0
 800dfe4:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	2204      	movs	r2, #4
 800dfee:	2104      	movs	r1, #4
 800dff0:	6878      	ldr	r0, [r7, #4]
 800dff2:	4798      	blx	r3
 800dff4:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	4619      	mov	r1, r3
 800dffa:	2004      	movs	r0, #4
 800dffc:	f7f7 fa19 	bl	8005432 <_ZnwjPv>
 800e000:	4603      	mov	r3, r0
  }
 800e002:	4618      	mov	r0, r3
 800e004:	3710      	adds	r7, #16
 800e006:	46bd      	mov	sp, r7
 800e008:	bd80      	pop	{r7, pc}

0800e00a <_ZSt4moveIRP24TfLiteSpaceToDepthParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800e00a:	b480      	push	{r7}
 800e00c:	b083      	sub	sp, #12
 800e00e:	af00      	add	r7, sp, #0
 800e010:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	4618      	mov	r0, r3
 800e016:	370c      	adds	r7, #12
 800e018:	46bd      	mov	sp, r7
 800e01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01e:	4770      	bx	lr

0800e020 <_ZNSt10unique_ptrI24TfLiteSpaceToDepthParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 800e020:	b5b0      	push	{r4, r5, r7, lr}
 800e022:	b084      	sub	sp, #16
 800e024:	af00      	add	r7, sp, #0
 800e026:	60f8      	str	r0, [r7, #12]
 800e028:	60b9      	str	r1, [r7, #8]
 800e02a:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800e02c:	68fc      	ldr	r4, [r7, #12]
 800e02e:	f107 0308 	add.w	r3, r7, #8
 800e032:	4618      	mov	r0, r3
 800e034:	f7ff ffe9 	bl	800e00a <_ZSt4moveIRP24TfLiteSpaceToDepthParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800e038:	4603      	mov	r3, r0
 800e03a:	681d      	ldr	r5, [r3, #0]
 800e03c:	6878      	ldr	r0, [r7, #4]
 800e03e:	f7fe f9bb 	bl	800c3b8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800e042:	4603      	mov	r3, r0
 800e044:	461a      	mov	r2, r3
 800e046:	4629      	mov	r1, r5
 800e048:	4620      	mov	r0, r4
 800e04a:	f000 f81f 	bl	800e08c <_ZNSt15__uniq_ptr_implI24TfLiteSpaceToDepthParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	4618      	mov	r0, r3
 800e052:	3710      	adds	r7, #16
 800e054:	46bd      	mov	sp, r7
 800e056:	bdb0      	pop	{r4, r5, r7, pc}

0800e058 <_ZNSt15__uniq_ptr_implI24TfLiteSpaceToDepthParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800e058:	b580      	push	{r7, lr}
 800e05a:	b082      	sub	sp, #8
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	4618      	mov	r0, r3
 800e064:	f002 fc0c 	bl	8010880 <_ZSt3getILj0EJP24TfLiteSpaceToDepthParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800e068:	4603      	mov	r3, r0
 800e06a:	4618      	mov	r0, r3
 800e06c:	3708      	adds	r7, #8
 800e06e:	46bd      	mov	sp, r7
 800e070:	bd80      	pop	{r7, pc}

0800e072 <_ZNSt10unique_ptrI24TfLiteSpaceToDepthParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800e072:	b580      	push	{r7, lr}
 800e074:	b082      	sub	sp, #8
 800e076:	af00      	add	r7, sp, #0
 800e078:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	4618      	mov	r0, r3
 800e07e:	f002 fc0c 	bl	801089a <_ZNSt15__uniq_ptr_implI24TfLiteSpaceToDepthParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800e082:	4603      	mov	r3, r0
 800e084:	4618      	mov	r0, r3
 800e086:	3708      	adds	r7, #8
 800e088:	46bd      	mov	sp, r7
 800e08a:	bd80      	pop	{r7, pc}

0800e08c <_ZNSt15__uniq_ptr_implI24TfLiteSpaceToDepthParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800e08c:	b590      	push	{r4, r7, lr}
 800e08e:	b085      	sub	sp, #20
 800e090:	af00      	add	r7, sp, #0
 800e092:	60f8      	str	r0, [r7, #12]
 800e094:	60b9      	str	r1, [r7, #8]
 800e096:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800e098:	68fc      	ldr	r4, [r7, #12]
 800e09a:	6878      	ldr	r0, [r7, #4]
 800e09c:	f7fe f9cd 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800e0a0:	4602      	mov	r2, r0
 800e0a2:	f107 0308 	add.w	r3, r7, #8
 800e0a6:	4619      	mov	r1, r3
 800e0a8:	4620      	mov	r0, r4
 800e0aa:	f002 fc0e 	bl	80108ca <_ZNSt5tupleIJP24TfLiteSpaceToDepthParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	3714      	adds	r7, #20
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	bd90      	pop	{r4, r7, pc}

0800e0b8 <_ZNKSt10unique_ptrI24TfLiteSpaceToDepthParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b082      	sub	sp, #8
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800e0c0:	6878      	ldr	r0, [r7, #4]
 800e0c2:	f000 f80a 	bl	800e0da <_ZNKSt10unique_ptrI24TfLiteSpaceToDepthParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	bf14      	ite	ne
 800e0cc:	2301      	movne	r3, #1
 800e0ce:	2300      	moveq	r3, #0
 800e0d0:	b2db      	uxtb	r3, r3
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	3708      	adds	r7, #8
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}

0800e0da <_ZNKSt10unique_ptrI24TfLiteSpaceToDepthParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800e0da:	b580      	push	{r7, lr}
 800e0dc:	b082      	sub	sp, #8
 800e0de:	af00      	add	r7, sp, #0
 800e0e0:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	f002 fc09 	bl	80108fc <_ZNKSt15__uniq_ptr_implI24TfLiteSpaceToDepthParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800e0ea:	4603      	mov	r3, r0
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	3708      	adds	r7, #8
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	bd80      	pop	{r7, pc}

0800e0f4 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI24TfLiteDepthToSpaceParamsEEPT_v>:
  T* AllocatePOD() {
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b084      	sub	sp, #16
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	2204      	movs	r2, #4
 800e104:	2104      	movs	r1, #4
 800e106:	6878      	ldr	r0, [r7, #4]
 800e108:	4798      	blx	r3
 800e10a:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	4619      	mov	r1, r3
 800e110:	2004      	movs	r0, #4
 800e112:	f7f7 f98e 	bl	8005432 <_ZnwjPv>
 800e116:	4603      	mov	r3, r0
  }
 800e118:	4618      	mov	r0, r3
 800e11a:	3710      	adds	r7, #16
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd80      	pop	{r7, pc}

0800e120 <_ZSt4moveIRP24TfLiteDepthToSpaceParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800e120:	b480      	push	{r7}
 800e122:	b083      	sub	sp, #12
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	4618      	mov	r0, r3
 800e12c:	370c      	adds	r7, #12
 800e12e:	46bd      	mov	sp, r7
 800e130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e134:	4770      	bx	lr

0800e136 <_ZNSt10unique_ptrI24TfLiteDepthToSpaceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 800e136:	b5b0      	push	{r4, r5, r7, lr}
 800e138:	b084      	sub	sp, #16
 800e13a:	af00      	add	r7, sp, #0
 800e13c:	60f8      	str	r0, [r7, #12]
 800e13e:	60b9      	str	r1, [r7, #8]
 800e140:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800e142:	68fc      	ldr	r4, [r7, #12]
 800e144:	f107 0308 	add.w	r3, r7, #8
 800e148:	4618      	mov	r0, r3
 800e14a:	f7ff ffe9 	bl	800e120 <_ZSt4moveIRP24TfLiteDepthToSpaceParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800e14e:	4603      	mov	r3, r0
 800e150:	681d      	ldr	r5, [r3, #0]
 800e152:	6878      	ldr	r0, [r7, #4]
 800e154:	f7fe f930 	bl	800c3b8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800e158:	4603      	mov	r3, r0
 800e15a:	461a      	mov	r2, r3
 800e15c:	4629      	mov	r1, r5
 800e15e:	4620      	mov	r0, r4
 800e160:	f000 f81f 	bl	800e1a2 <_ZNSt15__uniq_ptr_implI24TfLiteDepthToSpaceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	4618      	mov	r0, r3
 800e168:	3710      	adds	r7, #16
 800e16a:	46bd      	mov	sp, r7
 800e16c:	bdb0      	pop	{r4, r5, r7, pc}

0800e16e <_ZNSt15__uniq_ptr_implI24TfLiteDepthToSpaceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800e16e:	b580      	push	{r7, lr}
 800e170:	b082      	sub	sp, #8
 800e172:	af00      	add	r7, sp, #0
 800e174:	6078      	str	r0, [r7, #4]
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	4618      	mov	r0, r3
 800e17a:	f002 fbcd 	bl	8010918 <_ZSt3getILj0EJP24TfLiteDepthToSpaceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800e17e:	4603      	mov	r3, r0
 800e180:	4618      	mov	r0, r3
 800e182:	3708      	adds	r7, #8
 800e184:	46bd      	mov	sp, r7
 800e186:	bd80      	pop	{r7, pc}

0800e188 <_ZNSt10unique_ptrI24TfLiteDepthToSpaceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800e188:	b580      	push	{r7, lr}
 800e18a:	b082      	sub	sp, #8
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	4618      	mov	r0, r3
 800e194:	f002 fbcd 	bl	8010932 <_ZNSt15__uniq_ptr_implI24TfLiteDepthToSpaceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800e198:	4603      	mov	r3, r0
 800e19a:	4618      	mov	r0, r3
 800e19c:	3708      	adds	r7, #8
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	bd80      	pop	{r7, pc}

0800e1a2 <_ZNSt15__uniq_ptr_implI24TfLiteDepthToSpaceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800e1a2:	b590      	push	{r4, r7, lr}
 800e1a4:	b085      	sub	sp, #20
 800e1a6:	af00      	add	r7, sp, #0
 800e1a8:	60f8      	str	r0, [r7, #12]
 800e1aa:	60b9      	str	r1, [r7, #8]
 800e1ac:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800e1ae:	68fc      	ldr	r4, [r7, #12]
 800e1b0:	6878      	ldr	r0, [r7, #4]
 800e1b2:	f7fe f942 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800e1b6:	4602      	mov	r2, r0
 800e1b8:	f107 0308 	add.w	r3, r7, #8
 800e1bc:	4619      	mov	r1, r3
 800e1be:	4620      	mov	r0, r4
 800e1c0:	f002 fbcf 	bl	8010962 <_ZNSt5tupleIJP24TfLiteDepthToSpaceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	3714      	adds	r7, #20
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	bd90      	pop	{r4, r7, pc}

0800e1ce <_ZNKSt10unique_ptrI24TfLiteDepthToSpaceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800e1ce:	b580      	push	{r7, lr}
 800e1d0:	b082      	sub	sp, #8
 800e1d2:	af00      	add	r7, sp, #0
 800e1d4:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800e1d6:	6878      	ldr	r0, [r7, #4]
 800e1d8:	f000 f80a 	bl	800e1f0 <_ZNKSt10unique_ptrI24TfLiteDepthToSpaceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800e1dc:	4603      	mov	r3, r0
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	bf14      	ite	ne
 800e1e2:	2301      	movne	r3, #1
 800e1e4:	2300      	moveq	r3, #0
 800e1e6:	b2db      	uxtb	r3, r3
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	3708      	adds	r7, #8
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	bd80      	pop	{r7, pc}

0800e1f0 <_ZNKSt10unique_ptrI24TfLiteDepthToSpaceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b082      	sub	sp, #8
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	f002 fbca 	bl	8010994 <_ZNKSt15__uniq_ptr_implI24TfLiteDepthToSpaceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800e200:	4603      	mov	r3, r0
 800e202:	4618      	mov	r0, r3
 800e204:	3708      	adds	r7, #8
 800e206:	46bd      	mov	sp, r7
 800e208:	bd80      	pop	{r7, pc}

0800e20a <_ZN6tflite20BuiltinDataAllocator11AllocatePODI18TfLiteGatherParamsEEPT_v>:
  T* AllocatePOD() {
 800e20a:	b580      	push	{r7, lr}
 800e20c:	b084      	sub	sp, #16
 800e20e:	af00      	add	r7, sp, #0
 800e210:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	2204      	movs	r2, #4
 800e21a:	2104      	movs	r1, #4
 800e21c:	6878      	ldr	r0, [r7, #4]
 800e21e:	4798      	blx	r3
 800e220:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	4619      	mov	r1, r3
 800e226:	2004      	movs	r0, #4
 800e228:	f7f7 f903 	bl	8005432 <_ZnwjPv>
 800e22c:	4603      	mov	r3, r0
  }
 800e22e:	4618      	mov	r0, r3
 800e230:	3710      	adds	r7, #16
 800e232:	46bd      	mov	sp, r7
 800e234:	bd80      	pop	{r7, pc}

0800e236 <_ZSt4moveIRP18TfLiteGatherParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800e236:	b480      	push	{r7}
 800e238:	b083      	sub	sp, #12
 800e23a:	af00      	add	r7, sp, #0
 800e23c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	4618      	mov	r0, r3
 800e242:	370c      	adds	r7, #12
 800e244:	46bd      	mov	sp, r7
 800e246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24a:	4770      	bx	lr

0800e24c <_ZNSt10unique_ptrI18TfLiteGatherParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 800e24c:	b5b0      	push	{r4, r5, r7, lr}
 800e24e:	b084      	sub	sp, #16
 800e250:	af00      	add	r7, sp, #0
 800e252:	60f8      	str	r0, [r7, #12]
 800e254:	60b9      	str	r1, [r7, #8]
 800e256:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800e258:	68fc      	ldr	r4, [r7, #12]
 800e25a:	f107 0308 	add.w	r3, r7, #8
 800e25e:	4618      	mov	r0, r3
 800e260:	f7ff ffe9 	bl	800e236 <_ZSt4moveIRP18TfLiteGatherParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800e264:	4603      	mov	r3, r0
 800e266:	681d      	ldr	r5, [r3, #0]
 800e268:	6878      	ldr	r0, [r7, #4]
 800e26a:	f7fe f8a5 	bl	800c3b8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800e26e:	4603      	mov	r3, r0
 800e270:	461a      	mov	r2, r3
 800e272:	4629      	mov	r1, r5
 800e274:	4620      	mov	r0, r4
 800e276:	f000 f81f 	bl	800e2b8 <_ZNSt15__uniq_ptr_implI18TfLiteGatherParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	4618      	mov	r0, r3
 800e27e:	3710      	adds	r7, #16
 800e280:	46bd      	mov	sp, r7
 800e282:	bdb0      	pop	{r4, r5, r7, pc}

0800e284 <_ZNSt15__uniq_ptr_implI18TfLiteGatherParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800e284:	b580      	push	{r7, lr}
 800e286:	b082      	sub	sp, #8
 800e288:	af00      	add	r7, sp, #0
 800e28a:	6078      	str	r0, [r7, #4]
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	4618      	mov	r0, r3
 800e290:	f002 fb8e 	bl	80109b0 <_ZSt3getILj0EJP18TfLiteGatherParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800e294:	4603      	mov	r3, r0
 800e296:	4618      	mov	r0, r3
 800e298:	3708      	adds	r7, #8
 800e29a:	46bd      	mov	sp, r7
 800e29c:	bd80      	pop	{r7, pc}

0800e29e <_ZNSt10unique_ptrI18TfLiteGatherParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800e29e:	b580      	push	{r7, lr}
 800e2a0:	b082      	sub	sp, #8
 800e2a2:	af00      	add	r7, sp, #0
 800e2a4:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	f002 fb8e 	bl	80109ca <_ZNSt15__uniq_ptr_implI18TfLiteGatherParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800e2ae:	4603      	mov	r3, r0
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	3708      	adds	r7, #8
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	bd80      	pop	{r7, pc}

0800e2b8 <_ZNSt15__uniq_ptr_implI18TfLiteGatherParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800e2b8:	b590      	push	{r4, r7, lr}
 800e2ba:	b085      	sub	sp, #20
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	60f8      	str	r0, [r7, #12]
 800e2c0:	60b9      	str	r1, [r7, #8]
 800e2c2:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800e2c4:	68fc      	ldr	r4, [r7, #12]
 800e2c6:	6878      	ldr	r0, [r7, #4]
 800e2c8:	f7fe f8b7 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800e2cc:	4602      	mov	r2, r0
 800e2ce:	f107 0308 	add.w	r3, r7, #8
 800e2d2:	4619      	mov	r1, r3
 800e2d4:	4620      	mov	r0, r4
 800e2d6:	f002 fb90 	bl	80109fa <_ZNSt5tupleIJP18TfLiteGatherParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	4618      	mov	r0, r3
 800e2de:	3714      	adds	r7, #20
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	bd90      	pop	{r4, r7, pc}

0800e2e4 <_ZNKSt10unique_ptrI18TfLiteGatherParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	b082      	sub	sp, #8
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800e2ec:	6878      	ldr	r0, [r7, #4]
 800e2ee:	f000 f80a 	bl	800e306 <_ZNKSt10unique_ptrI18TfLiteGatherParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	bf14      	ite	ne
 800e2f8:	2301      	movne	r3, #1
 800e2fa:	2300      	moveq	r3, #0
 800e2fc:	b2db      	uxtb	r3, r3
 800e2fe:	4618      	mov	r0, r3
 800e300:	3708      	adds	r7, #8
 800e302:	46bd      	mov	sp, r7
 800e304:	bd80      	pop	{r7, pc}

0800e306 <_ZNKSt10unique_ptrI18TfLiteGatherParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800e306:	b580      	push	{r7, lr}
 800e308:	b082      	sub	sp, #8
 800e30a:	af00      	add	r7, sp, #0
 800e30c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	4618      	mov	r0, r3
 800e312:	f002 fb8b 	bl	8010a2c <_ZNKSt15__uniq_ptr_implI18TfLiteGatherParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800e316:	4603      	mov	r3, r0
 800e318:	4618      	mov	r0, r3
 800e31a:	3708      	adds	r7, #8
 800e31c:	46bd      	mov	sp, r7
 800e31e:	bd80      	pop	{r7, pc}

0800e320 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteReducerParamsEEPT_v>:
  T* AllocatePOD() {
 800e320:	b580      	push	{r7, lr}
 800e322:	b084      	sub	sp, #16
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	2201      	movs	r2, #1
 800e330:	2101      	movs	r1, #1
 800e332:	6878      	ldr	r0, [r7, #4]
 800e334:	4798      	blx	r3
 800e336:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	4619      	mov	r1, r3
 800e33c:	2001      	movs	r0, #1
 800e33e:	f7f7 f878 	bl	8005432 <_ZnwjPv>
 800e342:	4603      	mov	r3, r0
  }
 800e344:	4618      	mov	r0, r3
 800e346:	3710      	adds	r7, #16
 800e348:	46bd      	mov	sp, r7
 800e34a:	bd80      	pop	{r7, pc}

0800e34c <_ZSt4moveIRP19TfLiteReducerParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800e34c:	b480      	push	{r7}
 800e34e:	b083      	sub	sp, #12
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	4618      	mov	r0, r3
 800e358:	370c      	adds	r7, #12
 800e35a:	46bd      	mov	sp, r7
 800e35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e360:	4770      	bx	lr

0800e362 <_ZNSt10unique_ptrI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 800e362:	b5b0      	push	{r4, r5, r7, lr}
 800e364:	b084      	sub	sp, #16
 800e366:	af00      	add	r7, sp, #0
 800e368:	60f8      	str	r0, [r7, #12]
 800e36a:	60b9      	str	r1, [r7, #8]
 800e36c:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800e36e:	68fc      	ldr	r4, [r7, #12]
 800e370:	f107 0308 	add.w	r3, r7, #8
 800e374:	4618      	mov	r0, r3
 800e376:	f7ff ffe9 	bl	800e34c <_ZSt4moveIRP19TfLiteReducerParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800e37a:	4603      	mov	r3, r0
 800e37c:	681d      	ldr	r5, [r3, #0]
 800e37e:	6878      	ldr	r0, [r7, #4]
 800e380:	f7fe f81a 	bl	800c3b8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800e384:	4603      	mov	r3, r0
 800e386:	461a      	mov	r2, r3
 800e388:	4629      	mov	r1, r5
 800e38a:	4620      	mov	r0, r4
 800e38c:	f000 f81f 	bl	800e3ce <_ZNSt15__uniq_ptr_implI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	4618      	mov	r0, r3
 800e394:	3710      	adds	r7, #16
 800e396:	46bd      	mov	sp, r7
 800e398:	bdb0      	pop	{r4, r5, r7, pc}

0800e39a <_ZNSt15__uniq_ptr_implI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800e39a:	b580      	push	{r7, lr}
 800e39c:	b082      	sub	sp, #8
 800e39e:	af00      	add	r7, sp, #0
 800e3a0:	6078      	str	r0, [r7, #4]
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	f002 fb4f 	bl	8010a48 <_ZSt3getILj0EJP19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	3708      	adds	r7, #8
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd80      	pop	{r7, pc}

0800e3b4 <_ZNSt10unique_ptrI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b082      	sub	sp, #8
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	4618      	mov	r0, r3
 800e3c0:	f002 fb4f 	bl	8010a62 <_ZNSt15__uniq_ptr_implI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	3708      	adds	r7, #8
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	bd80      	pop	{r7, pc}

0800e3ce <_ZNSt15__uniq_ptr_implI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800e3ce:	b590      	push	{r4, r7, lr}
 800e3d0:	b085      	sub	sp, #20
 800e3d2:	af00      	add	r7, sp, #0
 800e3d4:	60f8      	str	r0, [r7, #12]
 800e3d6:	60b9      	str	r1, [r7, #8]
 800e3d8:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800e3da:	68fc      	ldr	r4, [r7, #12]
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	f7fe f82c 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800e3e2:	4602      	mov	r2, r0
 800e3e4:	f107 0308 	add.w	r3, r7, #8
 800e3e8:	4619      	mov	r1, r3
 800e3ea:	4620      	mov	r0, r4
 800e3ec:	f002 fb51 	bl	8010a92 <_ZNSt5tupleIJP19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	3714      	adds	r7, #20
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	bd90      	pop	{r4, r7, pc}

0800e3fa <_ZNKSt10unique_ptrI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800e3fa:	b580      	push	{r7, lr}
 800e3fc:	b082      	sub	sp, #8
 800e3fe:	af00      	add	r7, sp, #0
 800e400:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800e402:	6878      	ldr	r0, [r7, #4]
 800e404:	f000 f80a 	bl	800e41c <_ZNKSt10unique_ptrI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800e408:	4603      	mov	r3, r0
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	bf14      	ite	ne
 800e40e:	2301      	movne	r3, #1
 800e410:	2300      	moveq	r3, #0
 800e412:	b2db      	uxtb	r3, r3
 800e414:	4618      	mov	r0, r3
 800e416:	3708      	adds	r7, #8
 800e418:	46bd      	mov	sp, r7
 800e41a:	bd80      	pop	{r7, pc}

0800e41c <_ZNKSt10unique_ptrI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b082      	sub	sp, #8
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	4618      	mov	r0, r3
 800e428:	f002 fb4c 	bl	8010ac4 <_ZNKSt15__uniq_ptr_implI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800e42c:	4603      	mov	r3, r0
 800e42e:	4618      	mov	r0, r3
 800e430:	3708      	adds	r7, #8
 800e432:	46bd      	mov	sp, r7
 800e434:	bd80      	pop	{r7, pc}

0800e436 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI17TfLiteSplitParamsEEPT_v>:
  T* AllocatePOD() {
 800e436:	b580      	push	{r7, lr}
 800e438:	b084      	sub	sp, #16
 800e43a:	af00      	add	r7, sp, #0
 800e43c:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	2204      	movs	r2, #4
 800e446:	2104      	movs	r1, #4
 800e448:	6878      	ldr	r0, [r7, #4]
 800e44a:	4798      	blx	r3
 800e44c:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	4619      	mov	r1, r3
 800e452:	2004      	movs	r0, #4
 800e454:	f7f6 ffed 	bl	8005432 <_ZnwjPv>
 800e458:	4603      	mov	r3, r0
  }
 800e45a:	4618      	mov	r0, r3
 800e45c:	3710      	adds	r7, #16
 800e45e:	46bd      	mov	sp, r7
 800e460:	bd80      	pop	{r7, pc}

0800e462 <_ZSt4moveIRP17TfLiteSplitParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800e462:	b480      	push	{r7}
 800e464:	b083      	sub	sp, #12
 800e466:	af00      	add	r7, sp, #0
 800e468:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	4618      	mov	r0, r3
 800e46e:	370c      	adds	r7, #12
 800e470:	46bd      	mov	sp, r7
 800e472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e476:	4770      	bx	lr

0800e478 <_ZNSt10unique_ptrI17TfLiteSplitParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 800e478:	b5b0      	push	{r4, r5, r7, lr}
 800e47a:	b084      	sub	sp, #16
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	60f8      	str	r0, [r7, #12]
 800e480:	60b9      	str	r1, [r7, #8]
 800e482:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800e484:	68fc      	ldr	r4, [r7, #12]
 800e486:	f107 0308 	add.w	r3, r7, #8
 800e48a:	4618      	mov	r0, r3
 800e48c:	f7ff ffe9 	bl	800e462 <_ZSt4moveIRP17TfLiteSplitParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800e490:	4603      	mov	r3, r0
 800e492:	681d      	ldr	r5, [r3, #0]
 800e494:	6878      	ldr	r0, [r7, #4]
 800e496:	f7fd ff8f 	bl	800c3b8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800e49a:	4603      	mov	r3, r0
 800e49c:	461a      	mov	r2, r3
 800e49e:	4629      	mov	r1, r5
 800e4a0:	4620      	mov	r0, r4
 800e4a2:	f000 f81f 	bl	800e4e4 <_ZNSt15__uniq_ptr_implI17TfLiteSplitParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	3710      	adds	r7, #16
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	bdb0      	pop	{r4, r5, r7, pc}

0800e4b0 <_ZNSt15__uniq_ptr_implI17TfLiteSplitParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b082      	sub	sp, #8
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	f002 fb10 	bl	8010ae0 <_ZSt3getILj0EJP17TfLiteSplitParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800e4c0:	4603      	mov	r3, r0
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	3708      	adds	r7, #8
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	bd80      	pop	{r7, pc}

0800e4ca <_ZNSt10unique_ptrI17TfLiteSplitParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800e4ca:	b580      	push	{r7, lr}
 800e4cc:	b082      	sub	sp, #8
 800e4ce:	af00      	add	r7, sp, #0
 800e4d0:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	f002 fb10 	bl	8010afa <_ZNSt15__uniq_ptr_implI17TfLiteSplitParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800e4da:	4603      	mov	r3, r0
 800e4dc:	4618      	mov	r0, r3
 800e4de:	3708      	adds	r7, #8
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	bd80      	pop	{r7, pc}

0800e4e4 <_ZNSt15__uniq_ptr_implI17TfLiteSplitParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800e4e4:	b590      	push	{r4, r7, lr}
 800e4e6:	b085      	sub	sp, #20
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	60f8      	str	r0, [r7, #12]
 800e4ec:	60b9      	str	r1, [r7, #8]
 800e4ee:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800e4f0:	68fc      	ldr	r4, [r7, #12]
 800e4f2:	6878      	ldr	r0, [r7, #4]
 800e4f4:	f7fd ffa1 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800e4f8:	4602      	mov	r2, r0
 800e4fa:	f107 0308 	add.w	r3, r7, #8
 800e4fe:	4619      	mov	r1, r3
 800e500:	4620      	mov	r0, r4
 800e502:	f002 fb12 	bl	8010b2a <_ZNSt5tupleIJP17TfLiteSplitParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	4618      	mov	r0, r3
 800e50a:	3714      	adds	r7, #20
 800e50c:	46bd      	mov	sp, r7
 800e50e:	bd90      	pop	{r4, r7, pc}

0800e510 <_ZNKSt10unique_ptrI17TfLiteSplitParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800e510:	b580      	push	{r7, lr}
 800e512:	b082      	sub	sp, #8
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800e518:	6878      	ldr	r0, [r7, #4]
 800e51a:	f000 f80a 	bl	800e532 <_ZNKSt10unique_ptrI17TfLiteSplitParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800e51e:	4603      	mov	r3, r0
 800e520:	2b00      	cmp	r3, #0
 800e522:	bf14      	ite	ne
 800e524:	2301      	movne	r3, #1
 800e526:	2300      	moveq	r3, #0
 800e528:	b2db      	uxtb	r3, r3
 800e52a:	4618      	mov	r0, r3
 800e52c:	3708      	adds	r7, #8
 800e52e:	46bd      	mov	sp, r7
 800e530:	bd80      	pop	{r7, pc}

0800e532 <_ZNKSt10unique_ptrI17TfLiteSplitParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800e532:	b580      	push	{r7, lr}
 800e534:	b082      	sub	sp, #8
 800e536:	af00      	add	r7, sp, #0
 800e538:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	4618      	mov	r0, r3
 800e53e:	f002 fb0d 	bl	8010b5c <_ZNKSt15__uniq_ptr_implI17TfLiteSplitParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800e542:	4603      	mov	r3, r0
 800e544:	4618      	mov	r0, r3
 800e546:	3708      	adds	r7, #8
 800e548:	46bd      	mov	sp, r7
 800e54a:	bd80      	pop	{r7, pc}

0800e54c <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteSqueezeParamsEEPT_v>:
  T* AllocatePOD() {
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b084      	sub	sp, #16
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	2204      	movs	r2, #4
 800e55c:	2124      	movs	r1, #36	; 0x24
 800e55e:	6878      	ldr	r0, [r7, #4]
 800e560:	4798      	blx	r3
 800e562:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	4619      	mov	r1, r3
 800e568:	2024      	movs	r0, #36	; 0x24
 800e56a:	f7f6 ff62 	bl	8005432 <_ZnwjPv>
 800e56e:	4603      	mov	r3, r0
  }
 800e570:	4618      	mov	r0, r3
 800e572:	3710      	adds	r7, #16
 800e574:	46bd      	mov	sp, r7
 800e576:	bd80      	pop	{r7, pc}

0800e578 <_ZSt4moveIRP19TfLiteSqueezeParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800e578:	b480      	push	{r7}
 800e57a:	b083      	sub	sp, #12
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	4618      	mov	r0, r3
 800e584:	370c      	adds	r7, #12
 800e586:	46bd      	mov	sp, r7
 800e588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58c:	4770      	bx	lr

0800e58e <_ZNSt10unique_ptrI19TfLiteSqueezeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 800e58e:	b5b0      	push	{r4, r5, r7, lr}
 800e590:	b084      	sub	sp, #16
 800e592:	af00      	add	r7, sp, #0
 800e594:	60f8      	str	r0, [r7, #12]
 800e596:	60b9      	str	r1, [r7, #8]
 800e598:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800e59a:	68fc      	ldr	r4, [r7, #12]
 800e59c:	f107 0308 	add.w	r3, r7, #8
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	f7ff ffe9 	bl	800e578 <_ZSt4moveIRP19TfLiteSqueezeParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	681d      	ldr	r5, [r3, #0]
 800e5aa:	6878      	ldr	r0, [r7, #4]
 800e5ac:	f7fd ff04 	bl	800c3b8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	461a      	mov	r2, r3
 800e5b4:	4629      	mov	r1, r5
 800e5b6:	4620      	mov	r0, r4
 800e5b8:	f000 f81f 	bl	800e5fa <_ZNSt15__uniq_ptr_implI19TfLiteSqueezeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	4618      	mov	r0, r3
 800e5c0:	3710      	adds	r7, #16
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	bdb0      	pop	{r4, r5, r7, pc}

0800e5c6 <_ZNSt15__uniq_ptr_implI19TfLiteSqueezeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800e5c6:	b580      	push	{r7, lr}
 800e5c8:	b082      	sub	sp, #8
 800e5ca:	af00      	add	r7, sp, #0
 800e5cc:	6078      	str	r0, [r7, #4]
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	f002 fad1 	bl	8010b78 <_ZSt3getILj0EJP19TfLiteSqueezeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	4618      	mov	r0, r3
 800e5da:	3708      	adds	r7, #8
 800e5dc:	46bd      	mov	sp, r7
 800e5de:	bd80      	pop	{r7, pc}

0800e5e0 <_ZNSt10unique_ptrI19TfLiteSqueezeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	b082      	sub	sp, #8
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	f002 fad1 	bl	8010b92 <_ZNSt15__uniq_ptr_implI19TfLiteSqueezeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800e5f0:	4603      	mov	r3, r0
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	3708      	adds	r7, #8
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	bd80      	pop	{r7, pc}

0800e5fa <_ZNSt15__uniq_ptr_implI19TfLiteSqueezeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800e5fa:	b590      	push	{r4, r7, lr}
 800e5fc:	b085      	sub	sp, #20
 800e5fe:	af00      	add	r7, sp, #0
 800e600:	60f8      	str	r0, [r7, #12]
 800e602:	60b9      	str	r1, [r7, #8]
 800e604:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800e606:	68fc      	ldr	r4, [r7, #12]
 800e608:	6878      	ldr	r0, [r7, #4]
 800e60a:	f7fd ff16 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800e60e:	4602      	mov	r2, r0
 800e610:	f107 0308 	add.w	r3, r7, #8
 800e614:	4619      	mov	r1, r3
 800e616:	4620      	mov	r0, r4
 800e618:	f002 fad3 	bl	8010bc2 <_ZNSt5tupleIJP19TfLiteSqueezeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	4618      	mov	r0, r3
 800e620:	3714      	adds	r7, #20
 800e622:	46bd      	mov	sp, r7
 800e624:	bd90      	pop	{r4, r7, pc}

0800e626 <_ZNKSt10unique_ptrI19TfLiteSqueezeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800e626:	b580      	push	{r7, lr}
 800e628:	b082      	sub	sp, #8
 800e62a:	af00      	add	r7, sp, #0
 800e62c:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800e62e:	6878      	ldr	r0, [r7, #4]
 800e630:	f000 f80a 	bl	800e648 <_ZNKSt10unique_ptrI19TfLiteSqueezeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800e634:	4603      	mov	r3, r0
 800e636:	2b00      	cmp	r3, #0
 800e638:	bf14      	ite	ne
 800e63a:	2301      	movne	r3, #1
 800e63c:	2300      	moveq	r3, #0
 800e63e:	b2db      	uxtb	r3, r3
 800e640:	4618      	mov	r0, r3
 800e642:	3708      	adds	r7, #8
 800e644:	46bd      	mov	sp, r7
 800e646:	bd80      	pop	{r7, pc}

0800e648 <_ZNKSt10unique_ptrI19TfLiteSqueezeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800e648:	b580      	push	{r7, lr}
 800e64a:	b082      	sub	sp, #8
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	4618      	mov	r0, r3
 800e654:	f002 face 	bl	8010bf4 <_ZNKSt15__uniq_ptr_implI19TfLiteSqueezeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800e658:	4603      	mov	r3, r0
 800e65a:	4618      	mov	r0, r3
 800e65c:	3708      	adds	r7, #8
 800e65e:	46bd      	mov	sp, r7
 800e660:	bd80      	pop	{r7, pc}

0800e662 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI24TfLiteStridedSliceParamsEEPT_v>:
  T* AllocatePOD() {
 800e662:	b580      	push	{r7, lr}
 800e664:	b084      	sub	sp, #16
 800e666:	af00      	add	r7, sp, #0
 800e668:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	2204      	movs	r2, #4
 800e672:	2114      	movs	r1, #20
 800e674:	6878      	ldr	r0, [r7, #4]
 800e676:	4798      	blx	r3
 800e678:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	4619      	mov	r1, r3
 800e67e:	2014      	movs	r0, #20
 800e680:	f7f6 fed7 	bl	8005432 <_ZnwjPv>
 800e684:	4603      	mov	r3, r0
  }
 800e686:	4618      	mov	r0, r3
 800e688:	3710      	adds	r7, #16
 800e68a:	46bd      	mov	sp, r7
 800e68c:	bd80      	pop	{r7, pc}

0800e68e <_ZSt4moveIRP24TfLiteStridedSliceParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800e68e:	b480      	push	{r7}
 800e690:	b083      	sub	sp, #12
 800e692:	af00      	add	r7, sp, #0
 800e694:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	4618      	mov	r0, r3
 800e69a:	370c      	adds	r7, #12
 800e69c:	46bd      	mov	sp, r7
 800e69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a2:	4770      	bx	lr

0800e6a4 <_ZNSt10unique_ptrI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 800e6a4:	b5b0      	push	{r4, r5, r7, lr}
 800e6a6:	b084      	sub	sp, #16
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	60f8      	str	r0, [r7, #12]
 800e6ac:	60b9      	str	r1, [r7, #8]
 800e6ae:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800e6b0:	68fc      	ldr	r4, [r7, #12]
 800e6b2:	f107 0308 	add.w	r3, r7, #8
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	f7ff ffe9 	bl	800e68e <_ZSt4moveIRP24TfLiteStridedSliceParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800e6bc:	4603      	mov	r3, r0
 800e6be:	681d      	ldr	r5, [r3, #0]
 800e6c0:	6878      	ldr	r0, [r7, #4]
 800e6c2:	f7fd fe79 	bl	800c3b8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	461a      	mov	r2, r3
 800e6ca:	4629      	mov	r1, r5
 800e6cc:	4620      	mov	r0, r4
 800e6ce:	f000 f81f 	bl	800e710 <_ZNSt15__uniq_ptr_implI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	3710      	adds	r7, #16
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	bdb0      	pop	{r4, r5, r7, pc}

0800e6dc <_ZNSt15__uniq_ptr_implI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b082      	sub	sp, #8
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	f002 fa92 	bl	8010c10 <_ZSt3getILj0EJP24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800e6ec:	4603      	mov	r3, r0
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	3708      	adds	r7, #8
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	bd80      	pop	{r7, pc}

0800e6f6 <_ZNSt10unique_ptrI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800e6f6:	b580      	push	{r7, lr}
 800e6f8:	b082      	sub	sp, #8
 800e6fa:	af00      	add	r7, sp, #0
 800e6fc:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	4618      	mov	r0, r3
 800e702:	f002 fa92 	bl	8010c2a <_ZNSt15__uniq_ptr_implI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800e706:	4603      	mov	r3, r0
 800e708:	4618      	mov	r0, r3
 800e70a:	3708      	adds	r7, #8
 800e70c:	46bd      	mov	sp, r7
 800e70e:	bd80      	pop	{r7, pc}

0800e710 <_ZNSt15__uniq_ptr_implI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800e710:	b590      	push	{r4, r7, lr}
 800e712:	b085      	sub	sp, #20
 800e714:	af00      	add	r7, sp, #0
 800e716:	60f8      	str	r0, [r7, #12]
 800e718:	60b9      	str	r1, [r7, #8]
 800e71a:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800e71c:	68fc      	ldr	r4, [r7, #12]
 800e71e:	6878      	ldr	r0, [r7, #4]
 800e720:	f7fd fe8b 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800e724:	4602      	mov	r2, r0
 800e726:	f107 0308 	add.w	r3, r7, #8
 800e72a:	4619      	mov	r1, r3
 800e72c:	4620      	mov	r0, r4
 800e72e:	f002 fa94 	bl	8010c5a <_ZNSt5tupleIJP24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	4618      	mov	r0, r3
 800e736:	3714      	adds	r7, #20
 800e738:	46bd      	mov	sp, r7
 800e73a:	bd90      	pop	{r4, r7, pc}

0800e73c <_ZNKSt10unique_ptrI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b082      	sub	sp, #8
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800e744:	6878      	ldr	r0, [r7, #4]
 800e746:	f000 f80a 	bl	800e75e <_ZNKSt10unique_ptrI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800e74a:	4603      	mov	r3, r0
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	bf14      	ite	ne
 800e750:	2301      	movne	r3, #1
 800e752:	2300      	moveq	r3, #0
 800e754:	b2db      	uxtb	r3, r3
 800e756:	4618      	mov	r0, r3
 800e758:	3708      	adds	r7, #8
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bd80      	pop	{r7, pc}

0800e75e <_ZNKSt10unique_ptrI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800e75e:	b580      	push	{r7, lr}
 800e760:	b082      	sub	sp, #8
 800e762:	af00      	add	r7, sp, #0
 800e764:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	4618      	mov	r0, r3
 800e76a:	f002 fa8f 	bl	8010c8c <_ZNKSt15__uniq_ptr_implI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800e76e:	4603      	mov	r3, r0
 800e770:	4618      	mov	r0, r3
 800e772:	3708      	adds	r7, #8
 800e774:	46bd      	mov	sp, r7
 800e776:	bd80      	pop	{r7, pc}

0800e778 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI18TfLiteArgMaxParamsEEPT_v>:
  T* AllocatePOD() {
 800e778:	b580      	push	{r7, lr}
 800e77a:	b084      	sub	sp, #16
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	2201      	movs	r2, #1
 800e788:	2101      	movs	r1, #1
 800e78a:	6878      	ldr	r0, [r7, #4]
 800e78c:	4798      	blx	r3
 800e78e:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	4619      	mov	r1, r3
 800e794:	2001      	movs	r0, #1
 800e796:	f7f6 fe4c 	bl	8005432 <_ZnwjPv>
 800e79a:	4603      	mov	r3, r0
  }
 800e79c:	4618      	mov	r0, r3
 800e79e:	3710      	adds	r7, #16
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	bd80      	pop	{r7, pc}

0800e7a4 <_ZSt4moveIRP18TfLiteArgMaxParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800e7a4:	b480      	push	{r7}
 800e7a6:	b083      	sub	sp, #12
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	370c      	adds	r7, #12
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b8:	4770      	bx	lr

0800e7ba <_ZNSt10unique_ptrI18TfLiteArgMaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 800e7ba:	b5b0      	push	{r4, r5, r7, lr}
 800e7bc:	b084      	sub	sp, #16
 800e7be:	af00      	add	r7, sp, #0
 800e7c0:	60f8      	str	r0, [r7, #12]
 800e7c2:	60b9      	str	r1, [r7, #8]
 800e7c4:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800e7c6:	68fc      	ldr	r4, [r7, #12]
 800e7c8:	f107 0308 	add.w	r3, r7, #8
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	f7ff ffe9 	bl	800e7a4 <_ZSt4moveIRP18TfLiteArgMaxParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800e7d2:	4603      	mov	r3, r0
 800e7d4:	681d      	ldr	r5, [r3, #0]
 800e7d6:	6878      	ldr	r0, [r7, #4]
 800e7d8:	f7fd fdee 	bl	800c3b8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800e7dc:	4603      	mov	r3, r0
 800e7de:	461a      	mov	r2, r3
 800e7e0:	4629      	mov	r1, r5
 800e7e2:	4620      	mov	r0, r4
 800e7e4:	f000 f81f 	bl	800e826 <_ZNSt15__uniq_ptr_implI18TfLiteArgMaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	3710      	adds	r7, #16
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bdb0      	pop	{r4, r5, r7, pc}

0800e7f2 <_ZNSt15__uniq_ptr_implI18TfLiteArgMaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800e7f2:	b580      	push	{r7, lr}
 800e7f4:	b082      	sub	sp, #8
 800e7f6:	af00      	add	r7, sp, #0
 800e7f8:	6078      	str	r0, [r7, #4]
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	f002 fa53 	bl	8010ca8 <_ZSt3getILj0EJP18TfLiteArgMaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800e802:	4603      	mov	r3, r0
 800e804:	4618      	mov	r0, r3
 800e806:	3708      	adds	r7, #8
 800e808:	46bd      	mov	sp, r7
 800e80a:	bd80      	pop	{r7, pc}

0800e80c <_ZNSt10unique_ptrI18TfLiteArgMaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b082      	sub	sp, #8
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	4618      	mov	r0, r3
 800e818:	f002 fa53 	bl	8010cc2 <_ZNSt15__uniq_ptr_implI18TfLiteArgMaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800e81c:	4603      	mov	r3, r0
 800e81e:	4618      	mov	r0, r3
 800e820:	3708      	adds	r7, #8
 800e822:	46bd      	mov	sp, r7
 800e824:	bd80      	pop	{r7, pc}

0800e826 <_ZNSt15__uniq_ptr_implI18TfLiteArgMaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800e826:	b590      	push	{r4, r7, lr}
 800e828:	b085      	sub	sp, #20
 800e82a:	af00      	add	r7, sp, #0
 800e82c:	60f8      	str	r0, [r7, #12]
 800e82e:	60b9      	str	r1, [r7, #8]
 800e830:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800e832:	68fc      	ldr	r4, [r7, #12]
 800e834:	6878      	ldr	r0, [r7, #4]
 800e836:	f7fd fe00 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800e83a:	4602      	mov	r2, r0
 800e83c:	f107 0308 	add.w	r3, r7, #8
 800e840:	4619      	mov	r1, r3
 800e842:	4620      	mov	r0, r4
 800e844:	f002 fa55 	bl	8010cf2 <_ZNSt5tupleIJP18TfLiteArgMaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	4618      	mov	r0, r3
 800e84c:	3714      	adds	r7, #20
 800e84e:	46bd      	mov	sp, r7
 800e850:	bd90      	pop	{r4, r7, pc}

0800e852 <_ZNKSt10unique_ptrI18TfLiteArgMaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800e852:	b580      	push	{r7, lr}
 800e854:	b082      	sub	sp, #8
 800e856:	af00      	add	r7, sp, #0
 800e858:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800e85a:	6878      	ldr	r0, [r7, #4]
 800e85c:	f000 f80a 	bl	800e874 <_ZNKSt10unique_ptrI18TfLiteArgMaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800e860:	4603      	mov	r3, r0
 800e862:	2b00      	cmp	r3, #0
 800e864:	bf14      	ite	ne
 800e866:	2301      	movne	r3, #1
 800e868:	2300      	moveq	r3, #0
 800e86a:	b2db      	uxtb	r3, r3
 800e86c:	4618      	mov	r0, r3
 800e86e:	3708      	adds	r7, #8
 800e870:	46bd      	mov	sp, r7
 800e872:	bd80      	pop	{r7, pc}

0800e874 <_ZNKSt10unique_ptrI18TfLiteArgMaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800e874:	b580      	push	{r7, lr}
 800e876:	b082      	sub	sp, #8
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	4618      	mov	r0, r3
 800e880:	f002 fa50 	bl	8010d24 <_ZNKSt15__uniq_ptr_implI18TfLiteArgMaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800e884:	4603      	mov	r3, r0
 800e886:	4618      	mov	r0, r3
 800e888:	3708      	adds	r7, #8
 800e88a:	46bd      	mov	sp, r7
 800e88c:	bd80      	pop	{r7, pc}

0800e88e <_ZN6tflite20BuiltinDataAllocator11AllocatePODI18TfLiteArgMinParamsEEPT_v>:
  T* AllocatePOD() {
 800e88e:	b580      	push	{r7, lr}
 800e890:	b084      	sub	sp, #16
 800e892:	af00      	add	r7, sp, #0
 800e894:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	2201      	movs	r2, #1
 800e89e:	2101      	movs	r1, #1
 800e8a0:	6878      	ldr	r0, [r7, #4]
 800e8a2:	4798      	blx	r3
 800e8a4:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	4619      	mov	r1, r3
 800e8aa:	2001      	movs	r0, #1
 800e8ac:	f7f6 fdc1 	bl	8005432 <_ZnwjPv>
 800e8b0:	4603      	mov	r3, r0
  }
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	3710      	adds	r7, #16
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	bd80      	pop	{r7, pc}

0800e8ba <_ZSt4moveIRP18TfLiteArgMinParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800e8ba:	b480      	push	{r7}
 800e8bc:	b083      	sub	sp, #12
 800e8be:	af00      	add	r7, sp, #0
 800e8c0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	370c      	adds	r7, #12
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ce:	4770      	bx	lr

0800e8d0 <_ZNSt10unique_ptrI18TfLiteArgMinParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 800e8d0:	b5b0      	push	{r4, r5, r7, lr}
 800e8d2:	b084      	sub	sp, #16
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	60f8      	str	r0, [r7, #12]
 800e8d8:	60b9      	str	r1, [r7, #8]
 800e8da:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800e8dc:	68fc      	ldr	r4, [r7, #12]
 800e8de:	f107 0308 	add.w	r3, r7, #8
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	f7ff ffe9 	bl	800e8ba <_ZSt4moveIRP18TfLiteArgMinParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800e8e8:	4603      	mov	r3, r0
 800e8ea:	681d      	ldr	r5, [r3, #0]
 800e8ec:	6878      	ldr	r0, [r7, #4]
 800e8ee:	f7fd fd63 	bl	800c3b8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	461a      	mov	r2, r3
 800e8f6:	4629      	mov	r1, r5
 800e8f8:	4620      	mov	r0, r4
 800e8fa:	f000 f81f 	bl	800e93c <_ZNSt15__uniq_ptr_implI18TfLiteArgMinParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	4618      	mov	r0, r3
 800e902:	3710      	adds	r7, #16
 800e904:	46bd      	mov	sp, r7
 800e906:	bdb0      	pop	{r4, r5, r7, pc}

0800e908 <_ZNSt15__uniq_ptr_implI18TfLiteArgMinParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800e908:	b580      	push	{r7, lr}
 800e90a:	b082      	sub	sp, #8
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	4618      	mov	r0, r3
 800e914:	f002 fa14 	bl	8010d40 <_ZSt3getILj0EJP18TfLiteArgMinParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800e918:	4603      	mov	r3, r0
 800e91a:	4618      	mov	r0, r3
 800e91c:	3708      	adds	r7, #8
 800e91e:	46bd      	mov	sp, r7
 800e920:	bd80      	pop	{r7, pc}

0800e922 <_ZNSt10unique_ptrI18TfLiteArgMinParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800e922:	b580      	push	{r7, lr}
 800e924:	b082      	sub	sp, #8
 800e926:	af00      	add	r7, sp, #0
 800e928:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	4618      	mov	r0, r3
 800e92e:	f002 fa14 	bl	8010d5a <_ZNSt15__uniq_ptr_implI18TfLiteArgMinParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800e932:	4603      	mov	r3, r0
 800e934:	4618      	mov	r0, r3
 800e936:	3708      	adds	r7, #8
 800e938:	46bd      	mov	sp, r7
 800e93a:	bd80      	pop	{r7, pc}

0800e93c <_ZNSt15__uniq_ptr_implI18TfLiteArgMinParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800e93c:	b590      	push	{r4, r7, lr}
 800e93e:	b085      	sub	sp, #20
 800e940:	af00      	add	r7, sp, #0
 800e942:	60f8      	str	r0, [r7, #12]
 800e944:	60b9      	str	r1, [r7, #8]
 800e946:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800e948:	68fc      	ldr	r4, [r7, #12]
 800e94a:	6878      	ldr	r0, [r7, #4]
 800e94c:	f7fd fd75 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800e950:	4602      	mov	r2, r0
 800e952:	f107 0308 	add.w	r3, r7, #8
 800e956:	4619      	mov	r1, r3
 800e958:	4620      	mov	r0, r4
 800e95a:	f002 fa16 	bl	8010d8a <_ZNSt5tupleIJP18TfLiteArgMinParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	4618      	mov	r0, r3
 800e962:	3714      	adds	r7, #20
 800e964:	46bd      	mov	sp, r7
 800e966:	bd90      	pop	{r4, r7, pc}

0800e968 <_ZNKSt10unique_ptrI18TfLiteArgMinParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800e968:	b580      	push	{r7, lr}
 800e96a:	b082      	sub	sp, #8
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800e970:	6878      	ldr	r0, [r7, #4]
 800e972:	f000 f80a 	bl	800e98a <_ZNKSt10unique_ptrI18TfLiteArgMinParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800e976:	4603      	mov	r3, r0
 800e978:	2b00      	cmp	r3, #0
 800e97a:	bf14      	ite	ne
 800e97c:	2301      	movne	r3, #1
 800e97e:	2300      	moveq	r3, #0
 800e980:	b2db      	uxtb	r3, r3
 800e982:	4618      	mov	r0, r3
 800e984:	3708      	adds	r7, #8
 800e986:	46bd      	mov	sp, r7
 800e988:	bd80      	pop	{r7, pc}

0800e98a <_ZNKSt10unique_ptrI18TfLiteArgMinParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800e98a:	b580      	push	{r7, lr}
 800e98c:	b082      	sub	sp, #8
 800e98e:	af00      	add	r7, sp, #0
 800e990:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	4618      	mov	r0, r3
 800e996:	f002 fa11 	bl	8010dbc <_ZNKSt15__uniq_ptr_implI18TfLiteArgMinParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800e99a:	4603      	mov	r3, r0
 800e99c:	4618      	mov	r0, r3
 800e99e:	3708      	adds	r7, #8
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	bd80      	pop	{r7, pc}

0800e9a4 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI25TfLiteTransposeConvParamsEEPT_v>:
  T* AllocatePOD() {
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b084      	sub	sp, #16
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	2204      	movs	r2, #4
 800e9b4:	210c      	movs	r1, #12
 800e9b6:	6878      	ldr	r0, [r7, #4]
 800e9b8:	4798      	blx	r3
 800e9ba:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	4619      	mov	r1, r3
 800e9c0:	200c      	movs	r0, #12
 800e9c2:	f7f6 fd36 	bl	8005432 <_ZnwjPv>
 800e9c6:	4603      	mov	r3, r0
  }
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	3710      	adds	r7, #16
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	bd80      	pop	{r7, pc}

0800e9d0 <_ZSt4moveIRP25TfLiteTransposeConvParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800e9d0:	b480      	push	{r7}
 800e9d2:	b083      	sub	sp, #12
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	4618      	mov	r0, r3
 800e9dc:	370c      	adds	r7, #12
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e4:	4770      	bx	lr

0800e9e6 <_ZNSt10unique_ptrI25TfLiteTransposeConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 800e9e6:	b5b0      	push	{r4, r5, r7, lr}
 800e9e8:	b084      	sub	sp, #16
 800e9ea:	af00      	add	r7, sp, #0
 800e9ec:	60f8      	str	r0, [r7, #12]
 800e9ee:	60b9      	str	r1, [r7, #8]
 800e9f0:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800e9f2:	68fc      	ldr	r4, [r7, #12]
 800e9f4:	f107 0308 	add.w	r3, r7, #8
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	f7ff ffe9 	bl	800e9d0 <_ZSt4moveIRP25TfLiteTransposeConvParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800e9fe:	4603      	mov	r3, r0
 800ea00:	681d      	ldr	r5, [r3, #0]
 800ea02:	6878      	ldr	r0, [r7, #4]
 800ea04:	f7fd fcd8 	bl	800c3b8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800ea08:	4603      	mov	r3, r0
 800ea0a:	461a      	mov	r2, r3
 800ea0c:	4629      	mov	r1, r5
 800ea0e:	4620      	mov	r0, r4
 800ea10:	f000 f81f 	bl	800ea52 <_ZNSt15__uniq_ptr_implI25TfLiteTransposeConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	4618      	mov	r0, r3
 800ea18:	3710      	adds	r7, #16
 800ea1a:	46bd      	mov	sp, r7
 800ea1c:	bdb0      	pop	{r4, r5, r7, pc}

0800ea1e <_ZNSt15__uniq_ptr_implI25TfLiteTransposeConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800ea1e:	b580      	push	{r7, lr}
 800ea20:	b082      	sub	sp, #8
 800ea22:	af00      	add	r7, sp, #0
 800ea24:	6078      	str	r0, [r7, #4]
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	4618      	mov	r0, r3
 800ea2a:	f002 f9d5 	bl	8010dd8 <_ZSt3getILj0EJP25TfLiteTransposeConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800ea2e:	4603      	mov	r3, r0
 800ea30:	4618      	mov	r0, r3
 800ea32:	3708      	adds	r7, #8
 800ea34:	46bd      	mov	sp, r7
 800ea36:	bd80      	pop	{r7, pc}

0800ea38 <_ZNSt10unique_ptrI25TfLiteTransposeConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b082      	sub	sp, #8
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	4618      	mov	r0, r3
 800ea44:	f002 f9d5 	bl	8010df2 <_ZNSt15__uniq_ptr_implI25TfLiteTransposeConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800ea48:	4603      	mov	r3, r0
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	3708      	adds	r7, #8
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	bd80      	pop	{r7, pc}

0800ea52 <_ZNSt15__uniq_ptr_implI25TfLiteTransposeConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800ea52:	b590      	push	{r4, r7, lr}
 800ea54:	b085      	sub	sp, #20
 800ea56:	af00      	add	r7, sp, #0
 800ea58:	60f8      	str	r0, [r7, #12]
 800ea5a:	60b9      	str	r1, [r7, #8]
 800ea5c:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800ea5e:	68fc      	ldr	r4, [r7, #12]
 800ea60:	6878      	ldr	r0, [r7, #4]
 800ea62:	f7fd fcea 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800ea66:	4602      	mov	r2, r0
 800ea68:	f107 0308 	add.w	r3, r7, #8
 800ea6c:	4619      	mov	r1, r3
 800ea6e:	4620      	mov	r0, r4
 800ea70:	f002 f9d7 	bl	8010e22 <_ZNSt5tupleIJP25TfLiteTransposeConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	4618      	mov	r0, r3
 800ea78:	3714      	adds	r7, #20
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bd90      	pop	{r4, r7, pc}

0800ea7e <_ZNKSt10unique_ptrI25TfLiteTransposeConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800ea7e:	b580      	push	{r7, lr}
 800ea80:	b082      	sub	sp, #8
 800ea82:	af00      	add	r7, sp, #0
 800ea84:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800ea86:	6878      	ldr	r0, [r7, #4]
 800ea88:	f000 f80a 	bl	800eaa0 <_ZNKSt10unique_ptrI25TfLiteTransposeConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800ea8c:	4603      	mov	r3, r0
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	bf14      	ite	ne
 800ea92:	2301      	movne	r3, #1
 800ea94:	2300      	moveq	r3, #0
 800ea96:	b2db      	uxtb	r3, r3
 800ea98:	4618      	mov	r0, r3
 800ea9a:	3708      	adds	r7, #8
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	bd80      	pop	{r7, pc}

0800eaa0 <_ZNKSt10unique_ptrI25TfLiteTransposeConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b082      	sub	sp, #8
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	4618      	mov	r0, r3
 800eaac:	f002 f9d2 	bl	8010e54 <_ZNKSt15__uniq_ptr_implI25TfLiteTransposeConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800eab0:	4603      	mov	r3, r0
 800eab2:	4618      	mov	r0, r3
 800eab4:	3708      	adds	r7, #8
 800eab6:	46bd      	mov	sp, r7
 800eab8:	bd80      	pop	{r7, pc}

0800eaba <_ZN6tflite20BuiltinDataAllocator11AllocatePODI25TfLiteSparseToDenseParamsEEPT_v>:
  T* AllocatePOD() {
 800eaba:	b580      	push	{r7, lr}
 800eabc:	b084      	sub	sp, #16
 800eabe:	af00      	add	r7, sp, #0
 800eac0:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	2201      	movs	r2, #1
 800eaca:	2101      	movs	r1, #1
 800eacc:	6878      	ldr	r0, [r7, #4]
 800eace:	4798      	blx	r3
 800ead0:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	4619      	mov	r1, r3
 800ead6:	2001      	movs	r0, #1
 800ead8:	f7f6 fcab 	bl	8005432 <_ZnwjPv>
 800eadc:	4603      	mov	r3, r0
  }
 800eade:	4618      	mov	r0, r3
 800eae0:	3710      	adds	r7, #16
 800eae2:	46bd      	mov	sp, r7
 800eae4:	bd80      	pop	{r7, pc}

0800eae6 <_ZSt4moveIRP25TfLiteSparseToDenseParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800eae6:	b480      	push	{r7}
 800eae8:	b083      	sub	sp, #12
 800eaea:	af00      	add	r7, sp, #0
 800eaec:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	370c      	adds	r7, #12
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafa:	4770      	bx	lr

0800eafc <_ZNSt10unique_ptrI25TfLiteSparseToDenseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 800eafc:	b5b0      	push	{r4, r5, r7, lr}
 800eafe:	b084      	sub	sp, #16
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	60f8      	str	r0, [r7, #12]
 800eb04:	60b9      	str	r1, [r7, #8]
 800eb06:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800eb08:	68fc      	ldr	r4, [r7, #12]
 800eb0a:	f107 0308 	add.w	r3, r7, #8
 800eb0e:	4618      	mov	r0, r3
 800eb10:	f7ff ffe9 	bl	800eae6 <_ZSt4moveIRP25TfLiteSparseToDenseParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800eb14:	4603      	mov	r3, r0
 800eb16:	681d      	ldr	r5, [r3, #0]
 800eb18:	6878      	ldr	r0, [r7, #4]
 800eb1a:	f7fd fc4d 	bl	800c3b8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800eb1e:	4603      	mov	r3, r0
 800eb20:	461a      	mov	r2, r3
 800eb22:	4629      	mov	r1, r5
 800eb24:	4620      	mov	r0, r4
 800eb26:	f000 f81f 	bl	800eb68 <_ZNSt15__uniq_ptr_implI25TfLiteSparseToDenseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	3710      	adds	r7, #16
 800eb30:	46bd      	mov	sp, r7
 800eb32:	bdb0      	pop	{r4, r5, r7, pc}

0800eb34 <_ZNSt15__uniq_ptr_implI25TfLiteSparseToDenseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b082      	sub	sp, #8
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	4618      	mov	r0, r3
 800eb40:	f002 f996 	bl	8010e70 <_ZSt3getILj0EJP25TfLiteSparseToDenseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800eb44:	4603      	mov	r3, r0
 800eb46:	4618      	mov	r0, r3
 800eb48:	3708      	adds	r7, #8
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	bd80      	pop	{r7, pc}

0800eb4e <_ZNSt10unique_ptrI25TfLiteSparseToDenseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800eb4e:	b580      	push	{r7, lr}
 800eb50:	b082      	sub	sp, #8
 800eb52:	af00      	add	r7, sp, #0
 800eb54:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	4618      	mov	r0, r3
 800eb5a:	f002 f996 	bl	8010e8a <_ZNSt15__uniq_ptr_implI25TfLiteSparseToDenseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800eb5e:	4603      	mov	r3, r0
 800eb60:	4618      	mov	r0, r3
 800eb62:	3708      	adds	r7, #8
 800eb64:	46bd      	mov	sp, r7
 800eb66:	bd80      	pop	{r7, pc}

0800eb68 <_ZNSt15__uniq_ptr_implI25TfLiteSparseToDenseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800eb68:	b590      	push	{r4, r7, lr}
 800eb6a:	b085      	sub	sp, #20
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	60f8      	str	r0, [r7, #12]
 800eb70:	60b9      	str	r1, [r7, #8]
 800eb72:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800eb74:	68fc      	ldr	r4, [r7, #12]
 800eb76:	6878      	ldr	r0, [r7, #4]
 800eb78:	f7fd fc5f 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800eb7c:	4602      	mov	r2, r0
 800eb7e:	f107 0308 	add.w	r3, r7, #8
 800eb82:	4619      	mov	r1, r3
 800eb84:	4620      	mov	r0, r4
 800eb86:	f002 f998 	bl	8010eba <_ZNSt5tupleIJP25TfLiteSparseToDenseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	3714      	adds	r7, #20
 800eb90:	46bd      	mov	sp, r7
 800eb92:	bd90      	pop	{r4, r7, pc}

0800eb94 <_ZNKSt10unique_ptrI25TfLiteSparseToDenseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b082      	sub	sp, #8
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800eb9c:	6878      	ldr	r0, [r7, #4]
 800eb9e:	f000 f80a 	bl	800ebb6 <_ZNKSt10unique_ptrI25TfLiteSparseToDenseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800eba2:	4603      	mov	r3, r0
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	bf14      	ite	ne
 800eba8:	2301      	movne	r3, #1
 800ebaa:	2300      	moveq	r3, #0
 800ebac:	b2db      	uxtb	r3, r3
 800ebae:	4618      	mov	r0, r3
 800ebb0:	3708      	adds	r7, #8
 800ebb2:	46bd      	mov	sp, r7
 800ebb4:	bd80      	pop	{r7, pc}

0800ebb6 <_ZNKSt10unique_ptrI25TfLiteSparseToDenseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800ebb6:	b580      	push	{r7, lr}
 800ebb8:	b082      	sub	sp, #8
 800ebba:	af00      	add	r7, sp, #0
 800ebbc:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	f002 f993 	bl	8010eec <_ZNKSt15__uniq_ptr_implI25TfLiteSparseToDenseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	4618      	mov	r0, r3
 800ebca:	3708      	adds	r7, #8
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	bd80      	pop	{r7, pc}

0800ebd0 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI17TfLiteShapeParamsEEPT_v>:
  T* AllocatePOD() {
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b084      	sub	sp, #16
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	2201      	movs	r2, #1
 800ebe0:	2101      	movs	r1, #1
 800ebe2:	6878      	ldr	r0, [r7, #4]
 800ebe4:	4798      	blx	r3
 800ebe6:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	4619      	mov	r1, r3
 800ebec:	2001      	movs	r0, #1
 800ebee:	f7f6 fc20 	bl	8005432 <_ZnwjPv>
 800ebf2:	4603      	mov	r3, r0
  }
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	3710      	adds	r7, #16
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	bd80      	pop	{r7, pc}

0800ebfc <_ZSt4moveIRP17TfLiteShapeParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800ebfc:	b480      	push	{r7}
 800ebfe:	b083      	sub	sp, #12
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	4618      	mov	r0, r3
 800ec08:	370c      	adds	r7, #12
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec10:	4770      	bx	lr

0800ec12 <_ZNSt10unique_ptrI17TfLiteShapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 800ec12:	b5b0      	push	{r4, r5, r7, lr}
 800ec14:	b084      	sub	sp, #16
 800ec16:	af00      	add	r7, sp, #0
 800ec18:	60f8      	str	r0, [r7, #12]
 800ec1a:	60b9      	str	r1, [r7, #8]
 800ec1c:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800ec1e:	68fc      	ldr	r4, [r7, #12]
 800ec20:	f107 0308 	add.w	r3, r7, #8
 800ec24:	4618      	mov	r0, r3
 800ec26:	f7ff ffe9 	bl	800ebfc <_ZSt4moveIRP17TfLiteShapeParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	681d      	ldr	r5, [r3, #0]
 800ec2e:	6878      	ldr	r0, [r7, #4]
 800ec30:	f7fd fbc2 	bl	800c3b8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800ec34:	4603      	mov	r3, r0
 800ec36:	461a      	mov	r2, r3
 800ec38:	4629      	mov	r1, r5
 800ec3a:	4620      	mov	r0, r4
 800ec3c:	f000 f81f 	bl	800ec7e <_ZNSt15__uniq_ptr_implI17TfLiteShapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	4618      	mov	r0, r3
 800ec44:	3710      	adds	r7, #16
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bdb0      	pop	{r4, r5, r7, pc}

0800ec4a <_ZNSt15__uniq_ptr_implI17TfLiteShapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800ec4a:	b580      	push	{r7, lr}
 800ec4c:	b082      	sub	sp, #8
 800ec4e:	af00      	add	r7, sp, #0
 800ec50:	6078      	str	r0, [r7, #4]
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	4618      	mov	r0, r3
 800ec56:	f002 f957 	bl	8010f08 <_ZSt3getILj0EJP17TfLiteShapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800ec5a:	4603      	mov	r3, r0
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	3708      	adds	r7, #8
 800ec60:	46bd      	mov	sp, r7
 800ec62:	bd80      	pop	{r7, pc}

0800ec64 <_ZNSt10unique_ptrI17TfLiteShapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b082      	sub	sp, #8
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	4618      	mov	r0, r3
 800ec70:	f002 f957 	bl	8010f22 <_ZNSt15__uniq_ptr_implI17TfLiteShapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800ec74:	4603      	mov	r3, r0
 800ec76:	4618      	mov	r0, r3
 800ec78:	3708      	adds	r7, #8
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	bd80      	pop	{r7, pc}

0800ec7e <_ZNSt15__uniq_ptr_implI17TfLiteShapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800ec7e:	b590      	push	{r4, r7, lr}
 800ec80:	b085      	sub	sp, #20
 800ec82:	af00      	add	r7, sp, #0
 800ec84:	60f8      	str	r0, [r7, #12]
 800ec86:	60b9      	str	r1, [r7, #8]
 800ec88:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800ec8a:	68fc      	ldr	r4, [r7, #12]
 800ec8c:	6878      	ldr	r0, [r7, #4]
 800ec8e:	f7fd fbd4 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800ec92:	4602      	mov	r2, r0
 800ec94:	f107 0308 	add.w	r3, r7, #8
 800ec98:	4619      	mov	r1, r3
 800ec9a:	4620      	mov	r0, r4
 800ec9c:	f002 f959 	bl	8010f52 <_ZNSt5tupleIJP17TfLiteShapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	4618      	mov	r0, r3
 800eca4:	3714      	adds	r7, #20
 800eca6:	46bd      	mov	sp, r7
 800eca8:	bd90      	pop	{r4, r7, pc}

0800ecaa <_ZNKSt10unique_ptrI17TfLiteShapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800ecaa:	b580      	push	{r7, lr}
 800ecac:	b082      	sub	sp, #8
 800ecae:	af00      	add	r7, sp, #0
 800ecb0:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800ecb2:	6878      	ldr	r0, [r7, #4]
 800ecb4:	f000 f80a 	bl	800eccc <_ZNKSt10unique_ptrI17TfLiteShapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800ecb8:	4603      	mov	r3, r0
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	bf14      	ite	ne
 800ecbe:	2301      	movne	r3, #1
 800ecc0:	2300      	moveq	r3, #0
 800ecc2:	b2db      	uxtb	r3, r3
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	3708      	adds	r7, #8
 800ecc8:	46bd      	mov	sp, r7
 800ecca:	bd80      	pop	{r7, pc}

0800eccc <_ZNKSt10unique_ptrI17TfLiteShapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800eccc:	b580      	push	{r7, lr}
 800ecce:	b082      	sub	sp, #8
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	f002 f954 	bl	8010f84 <_ZNKSt15__uniq_ptr_implI17TfLiteShapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800ecdc:	4603      	mov	r3, r0
 800ecde:	4618      	mov	r0, r3
 800ece0:	3708      	adds	r7, #8
 800ece2:	46bd      	mov	sp, r7
 800ece4:	bd80      	pop	{r7, pc}

0800ece6 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI16TfLitePackParamsEEPT_v>:
  T* AllocatePOD() {
 800ece6:	b580      	push	{r7, lr}
 800ece8:	b084      	sub	sp, #16
 800ecea:	af00      	add	r7, sp, #0
 800ecec:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	2204      	movs	r2, #4
 800ecf6:	2108      	movs	r1, #8
 800ecf8:	6878      	ldr	r0, [r7, #4]
 800ecfa:	4798      	blx	r3
 800ecfc:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	4619      	mov	r1, r3
 800ed02:	2008      	movs	r0, #8
 800ed04:	f7f6 fb95 	bl	8005432 <_ZnwjPv>
 800ed08:	4603      	mov	r3, r0
  }
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	3710      	adds	r7, #16
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	bd80      	pop	{r7, pc}

0800ed12 <_ZSt4moveIRP16TfLitePackParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800ed12:	b480      	push	{r7}
 800ed14:	b083      	sub	sp, #12
 800ed16:	af00      	add	r7, sp, #0
 800ed18:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	370c      	adds	r7, #12
 800ed20:	46bd      	mov	sp, r7
 800ed22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed26:	4770      	bx	lr

0800ed28 <_ZNSt10unique_ptrI16TfLitePackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 800ed28:	b5b0      	push	{r4, r5, r7, lr}
 800ed2a:	b084      	sub	sp, #16
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	60f8      	str	r0, [r7, #12]
 800ed30:	60b9      	str	r1, [r7, #8]
 800ed32:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800ed34:	68fc      	ldr	r4, [r7, #12]
 800ed36:	f107 0308 	add.w	r3, r7, #8
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	f7ff ffe9 	bl	800ed12 <_ZSt4moveIRP16TfLitePackParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800ed40:	4603      	mov	r3, r0
 800ed42:	681d      	ldr	r5, [r3, #0]
 800ed44:	6878      	ldr	r0, [r7, #4]
 800ed46:	f7fd fb37 	bl	800c3b8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800ed4a:	4603      	mov	r3, r0
 800ed4c:	461a      	mov	r2, r3
 800ed4e:	4629      	mov	r1, r5
 800ed50:	4620      	mov	r0, r4
 800ed52:	f000 f81f 	bl	800ed94 <_ZNSt15__uniq_ptr_implI16TfLitePackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	4618      	mov	r0, r3
 800ed5a:	3710      	adds	r7, #16
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	bdb0      	pop	{r4, r5, r7, pc}

0800ed60 <_ZNSt15__uniq_ptr_implI16TfLitePackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b082      	sub	sp, #8
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	f002 f918 	bl	8010fa0 <_ZSt3getILj0EJP16TfLitePackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800ed70:	4603      	mov	r3, r0
 800ed72:	4618      	mov	r0, r3
 800ed74:	3708      	adds	r7, #8
 800ed76:	46bd      	mov	sp, r7
 800ed78:	bd80      	pop	{r7, pc}

0800ed7a <_ZNSt10unique_ptrI16TfLitePackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800ed7a:	b580      	push	{r7, lr}
 800ed7c:	b082      	sub	sp, #8
 800ed7e:	af00      	add	r7, sp, #0
 800ed80:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	4618      	mov	r0, r3
 800ed86:	f002 f918 	bl	8010fba <_ZNSt15__uniq_ptr_implI16TfLitePackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800ed8a:	4603      	mov	r3, r0
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	3708      	adds	r7, #8
 800ed90:	46bd      	mov	sp, r7
 800ed92:	bd80      	pop	{r7, pc}

0800ed94 <_ZNSt15__uniq_ptr_implI16TfLitePackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800ed94:	b590      	push	{r4, r7, lr}
 800ed96:	b085      	sub	sp, #20
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	60f8      	str	r0, [r7, #12]
 800ed9c:	60b9      	str	r1, [r7, #8]
 800ed9e:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800eda0:	68fc      	ldr	r4, [r7, #12]
 800eda2:	6878      	ldr	r0, [r7, #4]
 800eda4:	f7fd fb49 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800eda8:	4602      	mov	r2, r0
 800edaa:	f107 0308 	add.w	r3, r7, #8
 800edae:	4619      	mov	r1, r3
 800edb0:	4620      	mov	r0, r4
 800edb2:	f002 f91a 	bl	8010fea <_ZNSt5tupleIJP16TfLitePackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	4618      	mov	r0, r3
 800edba:	3714      	adds	r7, #20
 800edbc:	46bd      	mov	sp, r7
 800edbe:	bd90      	pop	{r4, r7, pc}

0800edc0 <_ZNKSt10unique_ptrI16TfLitePackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800edc0:	b580      	push	{r7, lr}
 800edc2:	b082      	sub	sp, #8
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800edc8:	6878      	ldr	r0, [r7, #4]
 800edca:	f000 f80a 	bl	800ede2 <_ZNKSt10unique_ptrI16TfLitePackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800edce:	4603      	mov	r3, r0
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	bf14      	ite	ne
 800edd4:	2301      	movne	r3, #1
 800edd6:	2300      	moveq	r3, #0
 800edd8:	b2db      	uxtb	r3, r3
 800edda:	4618      	mov	r0, r3
 800eddc:	3708      	adds	r7, #8
 800edde:	46bd      	mov	sp, r7
 800ede0:	bd80      	pop	{r7, pc}

0800ede2 <_ZNKSt10unique_ptrI16TfLitePackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800ede2:	b580      	push	{r7, lr}
 800ede4:	b082      	sub	sp, #8
 800ede6:	af00      	add	r7, sp, #0
 800ede8:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	4618      	mov	r0, r3
 800edee:	f002 f915 	bl	801101c <_ZNKSt15__uniq_ptr_implI16TfLitePackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800edf2:	4603      	mov	r3, r0
 800edf4:	4618      	mov	r0, r3
 800edf6:	3708      	adds	r7, #8
 800edf8:	46bd      	mov	sp, r7
 800edfa:	bd80      	pop	{r7, pc}

0800edfc <_ZN6tflite20BuiltinDataAllocator11AllocatePODI21TfLiteFakeQuantParamsEEPT_v>:
  T* AllocatePOD() {
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b084      	sub	sp, #16
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	2204      	movs	r2, #4
 800ee0c:	2110      	movs	r1, #16
 800ee0e:	6878      	ldr	r0, [r7, #4]
 800ee10:	4798      	blx	r3
 800ee12:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	4619      	mov	r1, r3
 800ee18:	2010      	movs	r0, #16
 800ee1a:	f7f6 fb0a 	bl	8005432 <_ZnwjPv>
 800ee1e:	4603      	mov	r3, r0
  }
 800ee20:	4618      	mov	r0, r3
 800ee22:	3710      	adds	r7, #16
 800ee24:	46bd      	mov	sp, r7
 800ee26:	bd80      	pop	{r7, pc}

0800ee28 <_ZSt4moveIRP21TfLiteFakeQuantParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800ee28:	b480      	push	{r7}
 800ee2a:	b083      	sub	sp, #12
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	4618      	mov	r0, r3
 800ee34:	370c      	adds	r7, #12
 800ee36:	46bd      	mov	sp, r7
 800ee38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3c:	4770      	bx	lr

0800ee3e <_ZNSt10unique_ptrI21TfLiteFakeQuantParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 800ee3e:	b5b0      	push	{r4, r5, r7, lr}
 800ee40:	b084      	sub	sp, #16
 800ee42:	af00      	add	r7, sp, #0
 800ee44:	60f8      	str	r0, [r7, #12]
 800ee46:	60b9      	str	r1, [r7, #8]
 800ee48:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800ee4a:	68fc      	ldr	r4, [r7, #12]
 800ee4c:	f107 0308 	add.w	r3, r7, #8
 800ee50:	4618      	mov	r0, r3
 800ee52:	f7ff ffe9 	bl	800ee28 <_ZSt4moveIRP21TfLiteFakeQuantParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800ee56:	4603      	mov	r3, r0
 800ee58:	681d      	ldr	r5, [r3, #0]
 800ee5a:	6878      	ldr	r0, [r7, #4]
 800ee5c:	f7fd faac 	bl	800c3b8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800ee60:	4603      	mov	r3, r0
 800ee62:	461a      	mov	r2, r3
 800ee64:	4629      	mov	r1, r5
 800ee66:	4620      	mov	r0, r4
 800ee68:	f000 f81f 	bl	800eeaa <_ZNSt15__uniq_ptr_implI21TfLiteFakeQuantParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	4618      	mov	r0, r3
 800ee70:	3710      	adds	r7, #16
 800ee72:	46bd      	mov	sp, r7
 800ee74:	bdb0      	pop	{r4, r5, r7, pc}

0800ee76 <_ZNSt15__uniq_ptr_implI21TfLiteFakeQuantParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800ee76:	b580      	push	{r7, lr}
 800ee78:	b082      	sub	sp, #8
 800ee7a:	af00      	add	r7, sp, #0
 800ee7c:	6078      	str	r0, [r7, #4]
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	4618      	mov	r0, r3
 800ee82:	f002 f8d9 	bl	8011038 <_ZSt3getILj0EJP21TfLiteFakeQuantParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800ee86:	4603      	mov	r3, r0
 800ee88:	4618      	mov	r0, r3
 800ee8a:	3708      	adds	r7, #8
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	bd80      	pop	{r7, pc}

0800ee90 <_ZNSt10unique_ptrI21TfLiteFakeQuantParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800ee90:	b580      	push	{r7, lr}
 800ee92:	b082      	sub	sp, #8
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	f002 f8d9 	bl	8011052 <_ZNSt15__uniq_ptr_implI21TfLiteFakeQuantParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800eea0:	4603      	mov	r3, r0
 800eea2:	4618      	mov	r0, r3
 800eea4:	3708      	adds	r7, #8
 800eea6:	46bd      	mov	sp, r7
 800eea8:	bd80      	pop	{r7, pc}

0800eeaa <_ZNSt15__uniq_ptr_implI21TfLiteFakeQuantParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800eeaa:	b590      	push	{r4, r7, lr}
 800eeac:	b085      	sub	sp, #20
 800eeae:	af00      	add	r7, sp, #0
 800eeb0:	60f8      	str	r0, [r7, #12]
 800eeb2:	60b9      	str	r1, [r7, #8]
 800eeb4:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800eeb6:	68fc      	ldr	r4, [r7, #12]
 800eeb8:	6878      	ldr	r0, [r7, #4]
 800eeba:	f7fd fabe 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800eebe:	4602      	mov	r2, r0
 800eec0:	f107 0308 	add.w	r3, r7, #8
 800eec4:	4619      	mov	r1, r3
 800eec6:	4620      	mov	r0, r4
 800eec8:	f002 f8db 	bl	8011082 <_ZNSt5tupleIJP21TfLiteFakeQuantParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	4618      	mov	r0, r3
 800eed0:	3714      	adds	r7, #20
 800eed2:	46bd      	mov	sp, r7
 800eed4:	bd90      	pop	{r4, r7, pc}

0800eed6 <_ZNKSt10unique_ptrI21TfLiteFakeQuantParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800eed6:	b580      	push	{r7, lr}
 800eed8:	b082      	sub	sp, #8
 800eeda:	af00      	add	r7, sp, #0
 800eedc:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800eede:	6878      	ldr	r0, [r7, #4]
 800eee0:	f000 f80a 	bl	800eef8 <_ZNKSt10unique_ptrI21TfLiteFakeQuantParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800eee4:	4603      	mov	r3, r0
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	bf14      	ite	ne
 800eeea:	2301      	movne	r3, #1
 800eeec:	2300      	moveq	r3, #0
 800eeee:	b2db      	uxtb	r3, r3
 800eef0:	4618      	mov	r0, r3
 800eef2:	3708      	adds	r7, #8
 800eef4:	46bd      	mov	sp, r7
 800eef6:	bd80      	pop	{r7, pc}

0800eef8 <_ZNKSt10unique_ptrI21TfLiteFakeQuantParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b082      	sub	sp, #8
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	4618      	mov	r0, r3
 800ef04:	f002 f8d6 	bl	80110b4 <_ZNKSt15__uniq_ptr_implI21TfLiteFakeQuantParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800ef08:	4603      	mov	r3, r0
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	3708      	adds	r7, #8
 800ef0e:	46bd      	mov	sp, r7
 800ef10:	bd80      	pop	{r7, pc}

0800ef12 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI18TfLiteOneHotParamsEEPT_v>:
  T* AllocatePOD() {
 800ef12:	b580      	push	{r7, lr}
 800ef14:	b084      	sub	sp, #16
 800ef16:	af00      	add	r7, sp, #0
 800ef18:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	2204      	movs	r2, #4
 800ef22:	2104      	movs	r1, #4
 800ef24:	6878      	ldr	r0, [r7, #4]
 800ef26:	4798      	blx	r3
 800ef28:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	4619      	mov	r1, r3
 800ef2e:	2004      	movs	r0, #4
 800ef30:	f7f6 fa7f 	bl	8005432 <_ZnwjPv>
 800ef34:	4603      	mov	r3, r0
  }
 800ef36:	4618      	mov	r0, r3
 800ef38:	3710      	adds	r7, #16
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	bd80      	pop	{r7, pc}

0800ef3e <_ZSt4moveIRP18TfLiteOneHotParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800ef3e:	b480      	push	{r7}
 800ef40:	b083      	sub	sp, #12
 800ef42:	af00      	add	r7, sp, #0
 800ef44:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	4618      	mov	r0, r3
 800ef4a:	370c      	adds	r7, #12
 800ef4c:	46bd      	mov	sp, r7
 800ef4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef52:	4770      	bx	lr

0800ef54 <_ZNSt10unique_ptrI18TfLiteOneHotParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 800ef54:	b5b0      	push	{r4, r5, r7, lr}
 800ef56:	b084      	sub	sp, #16
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	60f8      	str	r0, [r7, #12]
 800ef5c:	60b9      	str	r1, [r7, #8]
 800ef5e:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800ef60:	68fc      	ldr	r4, [r7, #12]
 800ef62:	f107 0308 	add.w	r3, r7, #8
 800ef66:	4618      	mov	r0, r3
 800ef68:	f7ff ffe9 	bl	800ef3e <_ZSt4moveIRP18TfLiteOneHotParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800ef6c:	4603      	mov	r3, r0
 800ef6e:	681d      	ldr	r5, [r3, #0]
 800ef70:	6878      	ldr	r0, [r7, #4]
 800ef72:	f7fd fa21 	bl	800c3b8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800ef76:	4603      	mov	r3, r0
 800ef78:	461a      	mov	r2, r3
 800ef7a:	4629      	mov	r1, r5
 800ef7c:	4620      	mov	r0, r4
 800ef7e:	f000 f81f 	bl	800efc0 <_ZNSt15__uniq_ptr_implI18TfLiteOneHotParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	4618      	mov	r0, r3
 800ef86:	3710      	adds	r7, #16
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	bdb0      	pop	{r4, r5, r7, pc}

0800ef8c <_ZNSt15__uniq_ptr_implI18TfLiteOneHotParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b082      	sub	sp, #8
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	4618      	mov	r0, r3
 800ef98:	f002 f89a 	bl	80110d0 <_ZSt3getILj0EJP18TfLiteOneHotParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800ef9c:	4603      	mov	r3, r0
 800ef9e:	4618      	mov	r0, r3
 800efa0:	3708      	adds	r7, #8
 800efa2:	46bd      	mov	sp, r7
 800efa4:	bd80      	pop	{r7, pc}

0800efa6 <_ZNSt10unique_ptrI18TfLiteOneHotParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800efa6:	b580      	push	{r7, lr}
 800efa8:	b082      	sub	sp, #8
 800efaa:	af00      	add	r7, sp, #0
 800efac:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	4618      	mov	r0, r3
 800efb2:	f002 f89a 	bl	80110ea <_ZNSt15__uniq_ptr_implI18TfLiteOneHotParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800efb6:	4603      	mov	r3, r0
 800efb8:	4618      	mov	r0, r3
 800efba:	3708      	adds	r7, #8
 800efbc:	46bd      	mov	sp, r7
 800efbe:	bd80      	pop	{r7, pc}

0800efc0 <_ZNSt15__uniq_ptr_implI18TfLiteOneHotParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800efc0:	b590      	push	{r4, r7, lr}
 800efc2:	b085      	sub	sp, #20
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	60f8      	str	r0, [r7, #12]
 800efc8:	60b9      	str	r1, [r7, #8]
 800efca:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800efcc:	68fc      	ldr	r4, [r7, #12]
 800efce:	6878      	ldr	r0, [r7, #4]
 800efd0:	f7fd fa33 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800efd4:	4602      	mov	r2, r0
 800efd6:	f107 0308 	add.w	r3, r7, #8
 800efda:	4619      	mov	r1, r3
 800efdc:	4620      	mov	r0, r4
 800efde:	f002 f89c 	bl	801111a <_ZNSt5tupleIJP18TfLiteOneHotParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	4618      	mov	r0, r3
 800efe6:	3714      	adds	r7, #20
 800efe8:	46bd      	mov	sp, r7
 800efea:	bd90      	pop	{r4, r7, pc}

0800efec <_ZNKSt10unique_ptrI18TfLiteOneHotParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800efec:	b580      	push	{r7, lr}
 800efee:	b082      	sub	sp, #8
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800eff4:	6878      	ldr	r0, [r7, #4]
 800eff6:	f000 f80a 	bl	800f00e <_ZNKSt10unique_ptrI18TfLiteOneHotParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800effa:	4603      	mov	r3, r0
 800effc:	2b00      	cmp	r3, #0
 800effe:	bf14      	ite	ne
 800f000:	2301      	movne	r3, #1
 800f002:	2300      	moveq	r3, #0
 800f004:	b2db      	uxtb	r3, r3
 800f006:	4618      	mov	r0, r3
 800f008:	3708      	adds	r7, #8
 800f00a:	46bd      	mov	sp, r7
 800f00c:	bd80      	pop	{r7, pc}

0800f00e <_ZNKSt10unique_ptrI18TfLiteOneHotParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800f00e:	b580      	push	{r7, lr}
 800f010:	b082      	sub	sp, #8
 800f012:	af00      	add	r7, sp, #0
 800f014:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	4618      	mov	r0, r3
 800f01a:	f002 f897 	bl	801114c <_ZNKSt15__uniq_ptr_implI18TfLiteOneHotParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800f01e:	4603      	mov	r3, r0
 800f020:	4618      	mov	r0, r3
 800f022:	3708      	adds	r7, #8
 800f024:	46bd      	mov	sp, r7
 800f026:	bd80      	pop	{r7, pc}

0800f028 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI18TfLiteUnpackParamsEEPT_v>:
  T* AllocatePOD() {
 800f028:	b580      	push	{r7, lr}
 800f02a:	b084      	sub	sp, #16
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	2204      	movs	r2, #4
 800f038:	2108      	movs	r1, #8
 800f03a:	6878      	ldr	r0, [r7, #4]
 800f03c:	4798      	blx	r3
 800f03e:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	4619      	mov	r1, r3
 800f044:	2008      	movs	r0, #8
 800f046:	f7f6 f9f4 	bl	8005432 <_ZnwjPv>
 800f04a:	4603      	mov	r3, r0
  }
 800f04c:	4618      	mov	r0, r3
 800f04e:	3710      	adds	r7, #16
 800f050:	46bd      	mov	sp, r7
 800f052:	bd80      	pop	{r7, pc}

0800f054 <_ZSt4moveIRP18TfLiteUnpackParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800f054:	b480      	push	{r7}
 800f056:	b083      	sub	sp, #12
 800f058:	af00      	add	r7, sp, #0
 800f05a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	4618      	mov	r0, r3
 800f060:	370c      	adds	r7, #12
 800f062:	46bd      	mov	sp, r7
 800f064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f068:	4770      	bx	lr

0800f06a <_ZNSt10unique_ptrI18TfLiteUnpackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 800f06a:	b5b0      	push	{r4, r5, r7, lr}
 800f06c:	b084      	sub	sp, #16
 800f06e:	af00      	add	r7, sp, #0
 800f070:	60f8      	str	r0, [r7, #12]
 800f072:	60b9      	str	r1, [r7, #8]
 800f074:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800f076:	68fc      	ldr	r4, [r7, #12]
 800f078:	f107 0308 	add.w	r3, r7, #8
 800f07c:	4618      	mov	r0, r3
 800f07e:	f7ff ffe9 	bl	800f054 <_ZSt4moveIRP18TfLiteUnpackParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800f082:	4603      	mov	r3, r0
 800f084:	681d      	ldr	r5, [r3, #0]
 800f086:	6878      	ldr	r0, [r7, #4]
 800f088:	f7fd f996 	bl	800c3b8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800f08c:	4603      	mov	r3, r0
 800f08e:	461a      	mov	r2, r3
 800f090:	4629      	mov	r1, r5
 800f092:	4620      	mov	r0, r4
 800f094:	f000 f81f 	bl	800f0d6 <_ZNSt15__uniq_ptr_implI18TfLiteUnpackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	4618      	mov	r0, r3
 800f09c:	3710      	adds	r7, #16
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	bdb0      	pop	{r4, r5, r7, pc}

0800f0a2 <_ZNSt15__uniq_ptr_implI18TfLiteUnpackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800f0a2:	b580      	push	{r7, lr}
 800f0a4:	b082      	sub	sp, #8
 800f0a6:	af00      	add	r7, sp, #0
 800f0a8:	6078      	str	r0, [r7, #4]
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	f002 f85b 	bl	8011168 <_ZSt3getILj0EJP18TfLiteUnpackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800f0b2:	4603      	mov	r3, r0
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	3708      	adds	r7, #8
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	bd80      	pop	{r7, pc}

0800f0bc <_ZNSt10unique_ptrI18TfLiteUnpackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	b082      	sub	sp, #8
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	f002 f85b 	bl	8011182 <_ZNSt15__uniq_ptr_implI18TfLiteUnpackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	3708      	adds	r7, #8
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	bd80      	pop	{r7, pc}

0800f0d6 <_ZNSt15__uniq_ptr_implI18TfLiteUnpackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800f0d6:	b590      	push	{r4, r7, lr}
 800f0d8:	b085      	sub	sp, #20
 800f0da:	af00      	add	r7, sp, #0
 800f0dc:	60f8      	str	r0, [r7, #12]
 800f0de:	60b9      	str	r1, [r7, #8]
 800f0e0:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800f0e2:	68fc      	ldr	r4, [r7, #12]
 800f0e4:	6878      	ldr	r0, [r7, #4]
 800f0e6:	f7fd f9a8 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800f0ea:	4602      	mov	r2, r0
 800f0ec:	f107 0308 	add.w	r3, r7, #8
 800f0f0:	4619      	mov	r1, r3
 800f0f2:	4620      	mov	r0, r4
 800f0f4:	f002 f85d 	bl	80111b2 <_ZNSt5tupleIJP18TfLiteUnpackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	3714      	adds	r7, #20
 800f0fe:	46bd      	mov	sp, r7
 800f100:	bd90      	pop	{r4, r7, pc}

0800f102 <_ZNKSt10unique_ptrI18TfLiteUnpackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800f102:	b580      	push	{r7, lr}
 800f104:	b082      	sub	sp, #8
 800f106:	af00      	add	r7, sp, #0
 800f108:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800f10a:	6878      	ldr	r0, [r7, #4]
 800f10c:	f000 f80a 	bl	800f124 <_ZNKSt10unique_ptrI18TfLiteUnpackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800f110:	4603      	mov	r3, r0
 800f112:	2b00      	cmp	r3, #0
 800f114:	bf14      	ite	ne
 800f116:	2301      	movne	r3, #1
 800f118:	2300      	moveq	r3, #0
 800f11a:	b2db      	uxtb	r3, r3
 800f11c:	4618      	mov	r0, r3
 800f11e:	3708      	adds	r7, #8
 800f120:	46bd      	mov	sp, r7
 800f122:	bd80      	pop	{r7, pc}

0800f124 <_ZNKSt10unique_ptrI18TfLiteUnpackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800f124:	b580      	push	{r7, lr}
 800f126:	b082      	sub	sp, #8
 800f128:	af00      	add	r7, sp, #0
 800f12a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	4618      	mov	r0, r3
 800f130:	f002 f858 	bl	80111e4 <_ZNKSt15__uniq_ptr_implI18TfLiteUnpackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800f134:	4603      	mov	r3, r0
 800f136:	4618      	mov	r0, r3
 800f138:	3708      	adds	r7, #8
 800f13a:	46bd      	mov	sp, r7
 800f13c:	bd80      	pop	{r7, pc}

0800f13e <_ZN6tflite20BuiltinDataAllocator11AllocatePODI21TfLiteLeakyReluParamsEEPT_v>:
  T* AllocatePOD() {
 800f13e:	b580      	push	{r7, lr}
 800f140:	b084      	sub	sp, #16
 800f142:	af00      	add	r7, sp, #0
 800f144:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	2204      	movs	r2, #4
 800f14e:	2104      	movs	r1, #4
 800f150:	6878      	ldr	r0, [r7, #4]
 800f152:	4798      	blx	r3
 800f154:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	4619      	mov	r1, r3
 800f15a:	2004      	movs	r0, #4
 800f15c:	f7f6 f969 	bl	8005432 <_ZnwjPv>
 800f160:	4603      	mov	r3, r0
  }
 800f162:	4618      	mov	r0, r3
 800f164:	3710      	adds	r7, #16
 800f166:	46bd      	mov	sp, r7
 800f168:	bd80      	pop	{r7, pc}

0800f16a <_ZSt4moveIRP21TfLiteLeakyReluParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800f16a:	b480      	push	{r7}
 800f16c:	b083      	sub	sp, #12
 800f16e:	af00      	add	r7, sp, #0
 800f170:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	4618      	mov	r0, r3
 800f176:	370c      	adds	r7, #12
 800f178:	46bd      	mov	sp, r7
 800f17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f17e:	4770      	bx	lr

0800f180 <_ZNSt10unique_ptrI21TfLiteLeakyReluParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 800f180:	b5b0      	push	{r4, r5, r7, lr}
 800f182:	b084      	sub	sp, #16
 800f184:	af00      	add	r7, sp, #0
 800f186:	60f8      	str	r0, [r7, #12]
 800f188:	60b9      	str	r1, [r7, #8]
 800f18a:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800f18c:	68fc      	ldr	r4, [r7, #12]
 800f18e:	f107 0308 	add.w	r3, r7, #8
 800f192:	4618      	mov	r0, r3
 800f194:	f7ff ffe9 	bl	800f16a <_ZSt4moveIRP21TfLiteLeakyReluParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800f198:	4603      	mov	r3, r0
 800f19a:	681d      	ldr	r5, [r3, #0]
 800f19c:	6878      	ldr	r0, [r7, #4]
 800f19e:	f7fd f90b 	bl	800c3b8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800f1a2:	4603      	mov	r3, r0
 800f1a4:	461a      	mov	r2, r3
 800f1a6:	4629      	mov	r1, r5
 800f1a8:	4620      	mov	r0, r4
 800f1aa:	f000 f81f 	bl	800f1ec <_ZNSt15__uniq_ptr_implI21TfLiteLeakyReluParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	3710      	adds	r7, #16
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	bdb0      	pop	{r4, r5, r7, pc}

0800f1b8 <_ZNSt15__uniq_ptr_implI21TfLiteLeakyReluParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	b082      	sub	sp, #8
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	6078      	str	r0, [r7, #4]
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	f002 f81c 	bl	8011200 <_ZSt3getILj0EJP21TfLiteLeakyReluParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800f1c8:	4603      	mov	r3, r0
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	3708      	adds	r7, #8
 800f1ce:	46bd      	mov	sp, r7
 800f1d0:	bd80      	pop	{r7, pc}

0800f1d2 <_ZNSt10unique_ptrI21TfLiteLeakyReluParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800f1d2:	b580      	push	{r7, lr}
 800f1d4:	b082      	sub	sp, #8
 800f1d6:	af00      	add	r7, sp, #0
 800f1d8:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	4618      	mov	r0, r3
 800f1de:	f002 f81c 	bl	801121a <_ZNSt15__uniq_ptr_implI21TfLiteLeakyReluParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	3708      	adds	r7, #8
 800f1e8:	46bd      	mov	sp, r7
 800f1ea:	bd80      	pop	{r7, pc}

0800f1ec <_ZNSt15__uniq_ptr_implI21TfLiteLeakyReluParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800f1ec:	b590      	push	{r4, r7, lr}
 800f1ee:	b085      	sub	sp, #20
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	60f8      	str	r0, [r7, #12]
 800f1f4:	60b9      	str	r1, [r7, #8]
 800f1f6:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800f1f8:	68fc      	ldr	r4, [r7, #12]
 800f1fa:	6878      	ldr	r0, [r7, #4]
 800f1fc:	f7fd f91d 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800f200:	4602      	mov	r2, r0
 800f202:	f107 0308 	add.w	r3, r7, #8
 800f206:	4619      	mov	r1, r3
 800f208:	4620      	mov	r0, r4
 800f20a:	f002 f81e 	bl	801124a <_ZNSt5tupleIJP21TfLiteLeakyReluParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	4618      	mov	r0, r3
 800f212:	3714      	adds	r7, #20
 800f214:	46bd      	mov	sp, r7
 800f216:	bd90      	pop	{r4, r7, pc}

0800f218 <_ZNKSt10unique_ptrI21TfLiteLeakyReluParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800f218:	b580      	push	{r7, lr}
 800f21a:	b082      	sub	sp, #8
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800f220:	6878      	ldr	r0, [r7, #4]
 800f222:	f000 f80a 	bl	800f23a <_ZNKSt10unique_ptrI21TfLiteLeakyReluParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800f226:	4603      	mov	r3, r0
 800f228:	2b00      	cmp	r3, #0
 800f22a:	bf14      	ite	ne
 800f22c:	2301      	movne	r3, #1
 800f22e:	2300      	moveq	r3, #0
 800f230:	b2db      	uxtb	r3, r3
 800f232:	4618      	mov	r0, r3
 800f234:	3708      	adds	r7, #8
 800f236:	46bd      	mov	sp, r7
 800f238:	bd80      	pop	{r7, pc}

0800f23a <_ZNKSt10unique_ptrI21TfLiteLeakyReluParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800f23a:	b580      	push	{r7, lr}
 800f23c:	b082      	sub	sp, #8
 800f23e:	af00      	add	r7, sp, #0
 800f240:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	4618      	mov	r0, r3
 800f246:	f002 f819 	bl	801127c <_ZNKSt15__uniq_ptr_implI21TfLiteLeakyReluParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800f24a:	4603      	mov	r3, r0
 800f24c:	4618      	mov	r0, r3
 800f24e:	3708      	adds	r7, #8
 800f250:	46bd      	mov	sp, r7
 800f252:	bd80      	pop	{r7, pc}

0800f254 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI25TfLiteMirrorPaddingParamsEEPT_v>:
  T* AllocatePOD() {
 800f254:	b580      	push	{r7, lr}
 800f256:	b084      	sub	sp, #16
 800f258:	af00      	add	r7, sp, #0
 800f25a:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	2201      	movs	r2, #1
 800f264:	2101      	movs	r1, #1
 800f266:	6878      	ldr	r0, [r7, #4]
 800f268:	4798      	blx	r3
 800f26a:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	4619      	mov	r1, r3
 800f270:	2001      	movs	r0, #1
 800f272:	f7f6 f8de 	bl	8005432 <_ZnwjPv>
 800f276:	4603      	mov	r3, r0
  }
 800f278:	4618      	mov	r0, r3
 800f27a:	3710      	adds	r7, #16
 800f27c:	46bd      	mov	sp, r7
 800f27e:	bd80      	pop	{r7, pc}

0800f280 <_ZSt4moveIRP25TfLiteMirrorPaddingParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800f280:	b480      	push	{r7}
 800f282:	b083      	sub	sp, #12
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	4618      	mov	r0, r3
 800f28c:	370c      	adds	r7, #12
 800f28e:	46bd      	mov	sp, r7
 800f290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f294:	4770      	bx	lr

0800f296 <_ZNSt10unique_ptrI25TfLiteMirrorPaddingParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 800f296:	b5b0      	push	{r4, r5, r7, lr}
 800f298:	b084      	sub	sp, #16
 800f29a:	af00      	add	r7, sp, #0
 800f29c:	60f8      	str	r0, [r7, #12]
 800f29e:	60b9      	str	r1, [r7, #8]
 800f2a0:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800f2a2:	68fc      	ldr	r4, [r7, #12]
 800f2a4:	f107 0308 	add.w	r3, r7, #8
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	f7ff ffe9 	bl	800f280 <_ZSt4moveIRP25TfLiteMirrorPaddingParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800f2ae:	4603      	mov	r3, r0
 800f2b0:	681d      	ldr	r5, [r3, #0]
 800f2b2:	6878      	ldr	r0, [r7, #4]
 800f2b4:	f7fd f880 	bl	800c3b8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800f2b8:	4603      	mov	r3, r0
 800f2ba:	461a      	mov	r2, r3
 800f2bc:	4629      	mov	r1, r5
 800f2be:	4620      	mov	r0, r4
 800f2c0:	f000 f81f 	bl	800f302 <_ZNSt15__uniq_ptr_implI25TfLiteMirrorPaddingParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	3710      	adds	r7, #16
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	bdb0      	pop	{r4, r5, r7, pc}

0800f2ce <_ZNSt15__uniq_ptr_implI25TfLiteMirrorPaddingParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800f2ce:	b580      	push	{r7, lr}
 800f2d0:	b082      	sub	sp, #8
 800f2d2:	af00      	add	r7, sp, #0
 800f2d4:	6078      	str	r0, [r7, #4]
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	4618      	mov	r0, r3
 800f2da:	f001 ffdd 	bl	8011298 <_ZSt3getILj0EJP25TfLiteMirrorPaddingParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800f2de:	4603      	mov	r3, r0
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	3708      	adds	r7, #8
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	bd80      	pop	{r7, pc}

0800f2e8 <_ZNSt10unique_ptrI25TfLiteMirrorPaddingParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800f2e8:	b580      	push	{r7, lr}
 800f2ea:	b082      	sub	sp, #8
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	f001 ffdd 	bl	80112b2 <_ZNSt15__uniq_ptr_implI25TfLiteMirrorPaddingParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800f2f8:	4603      	mov	r3, r0
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	3708      	adds	r7, #8
 800f2fe:	46bd      	mov	sp, r7
 800f300:	bd80      	pop	{r7, pc}

0800f302 <_ZNSt15__uniq_ptr_implI25TfLiteMirrorPaddingParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800f302:	b590      	push	{r4, r7, lr}
 800f304:	b085      	sub	sp, #20
 800f306:	af00      	add	r7, sp, #0
 800f308:	60f8      	str	r0, [r7, #12]
 800f30a:	60b9      	str	r1, [r7, #8]
 800f30c:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800f30e:	68fc      	ldr	r4, [r7, #12]
 800f310:	6878      	ldr	r0, [r7, #4]
 800f312:	f7fd f892 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800f316:	4602      	mov	r2, r0
 800f318:	f107 0308 	add.w	r3, r7, #8
 800f31c:	4619      	mov	r1, r3
 800f31e:	4620      	mov	r0, r4
 800f320:	f001 ffdf 	bl	80112e2 <_ZNSt5tupleIJP25TfLiteMirrorPaddingParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	4618      	mov	r0, r3
 800f328:	3714      	adds	r7, #20
 800f32a:	46bd      	mov	sp, r7
 800f32c:	bd90      	pop	{r4, r7, pc}

0800f32e <_ZNKSt10unique_ptrI25TfLiteMirrorPaddingParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800f32e:	b580      	push	{r7, lr}
 800f330:	b082      	sub	sp, #8
 800f332:	af00      	add	r7, sp, #0
 800f334:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800f336:	6878      	ldr	r0, [r7, #4]
 800f338:	f000 f80a 	bl	800f350 <_ZNKSt10unique_ptrI25TfLiteMirrorPaddingParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800f33c:	4603      	mov	r3, r0
 800f33e:	2b00      	cmp	r3, #0
 800f340:	bf14      	ite	ne
 800f342:	2301      	movne	r3, #1
 800f344:	2300      	moveq	r3, #0
 800f346:	b2db      	uxtb	r3, r3
 800f348:	4618      	mov	r0, r3
 800f34a:	3708      	adds	r7, #8
 800f34c:	46bd      	mov	sp, r7
 800f34e:	bd80      	pop	{r7, pc}

0800f350 <_ZNKSt10unique_ptrI25TfLiteMirrorPaddingParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800f350:	b580      	push	{r7, lr}
 800f352:	b082      	sub	sp, #8
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	4618      	mov	r0, r3
 800f35c:	f001 ffda 	bl	8011314 <_ZNKSt15__uniq_ptr_implI25TfLiteMirrorPaddingParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800f360:	4603      	mov	r3, r0
 800f362:	4618      	mov	r0, r3
 800f364:	3708      	adds	r7, #8
 800f366:	46bd      	mov	sp, r7
 800f368:	bd80      	pop	{r7, pc}

0800f36a <_ZN6tflite20BuiltinDataAllocator11AllocatePODI18TfLiteUniqueParamsEEPT_v>:
  T* AllocatePOD() {
 800f36a:	b580      	push	{r7, lr}
 800f36c:	b084      	sub	sp, #16
 800f36e:	af00      	add	r7, sp, #0
 800f370:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	2201      	movs	r2, #1
 800f37a:	2101      	movs	r1, #1
 800f37c:	6878      	ldr	r0, [r7, #4]
 800f37e:	4798      	blx	r3
 800f380:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	4619      	mov	r1, r3
 800f386:	2001      	movs	r0, #1
 800f388:	f7f6 f853 	bl	8005432 <_ZnwjPv>
 800f38c:	4603      	mov	r3, r0
  }
 800f38e:	4618      	mov	r0, r3
 800f390:	3710      	adds	r7, #16
 800f392:	46bd      	mov	sp, r7
 800f394:	bd80      	pop	{r7, pc}

0800f396 <_ZSt4moveIRP18TfLiteUniqueParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800f396:	b480      	push	{r7}
 800f398:	b083      	sub	sp, #12
 800f39a:	af00      	add	r7, sp, #0
 800f39c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	370c      	adds	r7, #12
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3aa:	4770      	bx	lr

0800f3ac <_ZNSt10unique_ptrI18TfLiteUniqueParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 800f3ac:	b5b0      	push	{r4, r5, r7, lr}
 800f3ae:	b084      	sub	sp, #16
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	60f8      	str	r0, [r7, #12]
 800f3b4:	60b9      	str	r1, [r7, #8]
 800f3b6:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800f3b8:	68fc      	ldr	r4, [r7, #12]
 800f3ba:	f107 0308 	add.w	r3, r7, #8
 800f3be:	4618      	mov	r0, r3
 800f3c0:	f7ff ffe9 	bl	800f396 <_ZSt4moveIRP18TfLiteUniqueParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800f3c4:	4603      	mov	r3, r0
 800f3c6:	681d      	ldr	r5, [r3, #0]
 800f3c8:	6878      	ldr	r0, [r7, #4]
 800f3ca:	f7fc fff5 	bl	800c3b8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800f3ce:	4603      	mov	r3, r0
 800f3d0:	461a      	mov	r2, r3
 800f3d2:	4629      	mov	r1, r5
 800f3d4:	4620      	mov	r0, r4
 800f3d6:	f000 f81f 	bl	800f418 <_ZNSt15__uniq_ptr_implI18TfLiteUniqueParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	4618      	mov	r0, r3
 800f3de:	3710      	adds	r7, #16
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	bdb0      	pop	{r4, r5, r7, pc}

0800f3e4 <_ZNSt15__uniq_ptr_implI18TfLiteUniqueParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	b082      	sub	sp, #8
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	6078      	str	r0, [r7, #4]
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	f001 ff9e 	bl	8011330 <_ZSt3getILj0EJP18TfLiteUniqueParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800f3f4:	4603      	mov	r3, r0
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	3708      	adds	r7, #8
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	bd80      	pop	{r7, pc}

0800f3fe <_ZNSt10unique_ptrI18TfLiteUniqueParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800f3fe:	b580      	push	{r7, lr}
 800f400:	b082      	sub	sp, #8
 800f402:	af00      	add	r7, sp, #0
 800f404:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	4618      	mov	r0, r3
 800f40a:	f001 ff9e 	bl	801134a <_ZNSt15__uniq_ptr_implI18TfLiteUniqueParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800f40e:	4603      	mov	r3, r0
 800f410:	4618      	mov	r0, r3
 800f412:	3708      	adds	r7, #8
 800f414:	46bd      	mov	sp, r7
 800f416:	bd80      	pop	{r7, pc}

0800f418 <_ZNSt15__uniq_ptr_implI18TfLiteUniqueParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800f418:	b590      	push	{r4, r7, lr}
 800f41a:	b085      	sub	sp, #20
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	60f8      	str	r0, [r7, #12]
 800f420:	60b9      	str	r1, [r7, #8]
 800f422:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800f424:	68fc      	ldr	r4, [r7, #12]
 800f426:	6878      	ldr	r0, [r7, #4]
 800f428:	f7fd f807 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800f42c:	4602      	mov	r2, r0
 800f42e:	f107 0308 	add.w	r3, r7, #8
 800f432:	4619      	mov	r1, r3
 800f434:	4620      	mov	r0, r4
 800f436:	f001 ffa0 	bl	801137a <_ZNSt5tupleIJP18TfLiteUniqueParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	4618      	mov	r0, r3
 800f43e:	3714      	adds	r7, #20
 800f440:	46bd      	mov	sp, r7
 800f442:	bd90      	pop	{r4, r7, pc}

0800f444 <_ZNKSt10unique_ptrI18TfLiteUniqueParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800f444:	b580      	push	{r7, lr}
 800f446:	b082      	sub	sp, #8
 800f448:	af00      	add	r7, sp, #0
 800f44a:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800f44c:	6878      	ldr	r0, [r7, #4]
 800f44e:	f000 f80a 	bl	800f466 <_ZNKSt10unique_ptrI18TfLiteUniqueParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800f452:	4603      	mov	r3, r0
 800f454:	2b00      	cmp	r3, #0
 800f456:	bf14      	ite	ne
 800f458:	2301      	movne	r3, #1
 800f45a:	2300      	moveq	r3, #0
 800f45c:	b2db      	uxtb	r3, r3
 800f45e:	4618      	mov	r0, r3
 800f460:	3708      	adds	r7, #8
 800f462:	46bd      	mov	sp, r7
 800f464:	bd80      	pop	{r7, pc}

0800f466 <_ZNKSt10unique_ptrI18TfLiteUniqueParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800f466:	b580      	push	{r7, lr}
 800f468:	b082      	sub	sp, #8
 800f46a:	af00      	add	r7, sp, #0
 800f46c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	4618      	mov	r0, r3
 800f472:	f001 ff9b 	bl	80113ac <_ZNKSt15__uniq_ptr_implI18TfLiteUniqueParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800f476:	4603      	mov	r3, r0
 800f478:	4618      	mov	r0, r3
 800f47a:	3708      	adds	r7, #8
 800f47c:	46bd      	mov	sp, r7
 800f47e:	bd80      	pop	{r7, pc}

0800f480 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI27TfLiteReverseSequenceParamsEEPT_v>:
  T* AllocatePOD() {
 800f480:	b580      	push	{r7, lr}
 800f482:	b084      	sub	sp, #16
 800f484:	af00      	add	r7, sp, #0
 800f486:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	2204      	movs	r2, #4
 800f490:	2108      	movs	r1, #8
 800f492:	6878      	ldr	r0, [r7, #4]
 800f494:	4798      	blx	r3
 800f496:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	4619      	mov	r1, r3
 800f49c:	2008      	movs	r0, #8
 800f49e:	f7f5 ffc8 	bl	8005432 <_ZnwjPv>
 800f4a2:	4603      	mov	r3, r0
  }
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	3710      	adds	r7, #16
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	bd80      	pop	{r7, pc}

0800f4ac <_ZSt4moveIRP27TfLiteReverseSequenceParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800f4ac:	b480      	push	{r7}
 800f4ae:	b083      	sub	sp, #12
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	370c      	adds	r7, #12
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c0:	4770      	bx	lr

0800f4c2 <_ZNSt10unique_ptrI27TfLiteReverseSequenceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 800f4c2:	b5b0      	push	{r4, r5, r7, lr}
 800f4c4:	b084      	sub	sp, #16
 800f4c6:	af00      	add	r7, sp, #0
 800f4c8:	60f8      	str	r0, [r7, #12]
 800f4ca:	60b9      	str	r1, [r7, #8]
 800f4cc:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800f4ce:	68fc      	ldr	r4, [r7, #12]
 800f4d0:	f107 0308 	add.w	r3, r7, #8
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	f7ff ffe9 	bl	800f4ac <_ZSt4moveIRP27TfLiteReverseSequenceParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800f4da:	4603      	mov	r3, r0
 800f4dc:	681d      	ldr	r5, [r3, #0]
 800f4de:	6878      	ldr	r0, [r7, #4]
 800f4e0:	f7fc ff6a 	bl	800c3b8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800f4e4:	4603      	mov	r3, r0
 800f4e6:	461a      	mov	r2, r3
 800f4e8:	4629      	mov	r1, r5
 800f4ea:	4620      	mov	r0, r4
 800f4ec:	f000 f81f 	bl	800f52e <_ZNSt15__uniq_ptr_implI27TfLiteReverseSequenceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	3710      	adds	r7, #16
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	bdb0      	pop	{r4, r5, r7, pc}

0800f4fa <_ZNSt15__uniq_ptr_implI27TfLiteReverseSequenceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800f4fa:	b580      	push	{r7, lr}
 800f4fc:	b082      	sub	sp, #8
 800f4fe:	af00      	add	r7, sp, #0
 800f500:	6078      	str	r0, [r7, #4]
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	4618      	mov	r0, r3
 800f506:	f001 ff5f 	bl	80113c8 <_ZSt3getILj0EJP27TfLiteReverseSequenceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800f50a:	4603      	mov	r3, r0
 800f50c:	4618      	mov	r0, r3
 800f50e:	3708      	adds	r7, #8
 800f510:	46bd      	mov	sp, r7
 800f512:	bd80      	pop	{r7, pc}

0800f514 <_ZNSt10unique_ptrI27TfLiteReverseSequenceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800f514:	b580      	push	{r7, lr}
 800f516:	b082      	sub	sp, #8
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	4618      	mov	r0, r3
 800f520:	f001 ff5f 	bl	80113e2 <_ZNSt15__uniq_ptr_implI27TfLiteReverseSequenceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800f524:	4603      	mov	r3, r0
 800f526:	4618      	mov	r0, r3
 800f528:	3708      	adds	r7, #8
 800f52a:	46bd      	mov	sp, r7
 800f52c:	bd80      	pop	{r7, pc}

0800f52e <_ZNSt15__uniq_ptr_implI27TfLiteReverseSequenceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800f52e:	b590      	push	{r4, r7, lr}
 800f530:	b085      	sub	sp, #20
 800f532:	af00      	add	r7, sp, #0
 800f534:	60f8      	str	r0, [r7, #12]
 800f536:	60b9      	str	r1, [r7, #8]
 800f538:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800f53a:	68fc      	ldr	r4, [r7, #12]
 800f53c:	6878      	ldr	r0, [r7, #4]
 800f53e:	f7fc ff7c 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800f542:	4602      	mov	r2, r0
 800f544:	f107 0308 	add.w	r3, r7, #8
 800f548:	4619      	mov	r1, r3
 800f54a:	4620      	mov	r0, r4
 800f54c:	f001 ff61 	bl	8011412 <_ZNSt5tupleIJP27TfLiteReverseSequenceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	4618      	mov	r0, r3
 800f554:	3714      	adds	r7, #20
 800f556:	46bd      	mov	sp, r7
 800f558:	bd90      	pop	{r4, r7, pc}

0800f55a <_ZNKSt10unique_ptrI27TfLiteReverseSequenceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800f55a:	b580      	push	{r7, lr}
 800f55c:	b082      	sub	sp, #8
 800f55e:	af00      	add	r7, sp, #0
 800f560:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800f562:	6878      	ldr	r0, [r7, #4]
 800f564:	f000 f80a 	bl	800f57c <_ZNKSt10unique_ptrI27TfLiteReverseSequenceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800f568:	4603      	mov	r3, r0
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	bf14      	ite	ne
 800f56e:	2301      	movne	r3, #1
 800f570:	2300      	moveq	r3, #0
 800f572:	b2db      	uxtb	r3, r3
 800f574:	4618      	mov	r0, r3
 800f576:	3708      	adds	r7, #8
 800f578:	46bd      	mov	sp, r7
 800f57a:	bd80      	pop	{r7, pc}

0800f57c <_ZNKSt10unique_ptrI27TfLiteReverseSequenceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b082      	sub	sp, #8
 800f580:	af00      	add	r7, sp, #0
 800f582:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	4618      	mov	r0, r3
 800f588:	f001 ff5c 	bl	8011444 <_ZNKSt15__uniq_ptr_implI27TfLiteReverseSequenceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800f58c:	4603      	mov	r3, r0
 800f58e:	4618      	mov	r0, r3
 800f590:	3708      	adds	r7, #8
 800f592:	46bd      	mov	sp, r7
 800f594:	bd80      	pop	{r7, pc}

0800f596 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI14TfLiteIfParamsEEPT_v>:
  T* AllocatePOD() {
 800f596:	b580      	push	{r7, lr}
 800f598:	b084      	sub	sp, #16
 800f59a:	af00      	add	r7, sp, #0
 800f59c:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	2204      	movs	r2, #4
 800f5a6:	2108      	movs	r1, #8
 800f5a8:	6878      	ldr	r0, [r7, #4]
 800f5aa:	4798      	blx	r3
 800f5ac:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	4619      	mov	r1, r3
 800f5b2:	2008      	movs	r0, #8
 800f5b4:	f7f5 ff3d 	bl	8005432 <_ZnwjPv>
 800f5b8:	4603      	mov	r3, r0
  }
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	3710      	adds	r7, #16
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	bd80      	pop	{r7, pc}

0800f5c2 <_ZSt4moveIRP14TfLiteIfParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800f5c2:	b480      	push	{r7}
 800f5c4:	b083      	sub	sp, #12
 800f5c6:	af00      	add	r7, sp, #0
 800f5c8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	370c      	adds	r7, #12
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d6:	4770      	bx	lr

0800f5d8 <_ZNSt10unique_ptrI14TfLiteIfParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 800f5d8:	b5b0      	push	{r4, r5, r7, lr}
 800f5da:	b084      	sub	sp, #16
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	60f8      	str	r0, [r7, #12]
 800f5e0:	60b9      	str	r1, [r7, #8]
 800f5e2:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800f5e4:	68fc      	ldr	r4, [r7, #12]
 800f5e6:	f107 0308 	add.w	r3, r7, #8
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	f7ff ffe9 	bl	800f5c2 <_ZSt4moveIRP14TfLiteIfParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800f5f0:	4603      	mov	r3, r0
 800f5f2:	681d      	ldr	r5, [r3, #0]
 800f5f4:	6878      	ldr	r0, [r7, #4]
 800f5f6:	f7fc fedf 	bl	800c3b8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800f5fa:	4603      	mov	r3, r0
 800f5fc:	461a      	mov	r2, r3
 800f5fe:	4629      	mov	r1, r5
 800f600:	4620      	mov	r0, r4
 800f602:	f000 f81f 	bl	800f644 <_ZNSt15__uniq_ptr_implI14TfLiteIfParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	4618      	mov	r0, r3
 800f60a:	3710      	adds	r7, #16
 800f60c:	46bd      	mov	sp, r7
 800f60e:	bdb0      	pop	{r4, r5, r7, pc}

0800f610 <_ZNSt15__uniq_ptr_implI14TfLiteIfParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800f610:	b580      	push	{r7, lr}
 800f612:	b082      	sub	sp, #8
 800f614:	af00      	add	r7, sp, #0
 800f616:	6078      	str	r0, [r7, #4]
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	4618      	mov	r0, r3
 800f61c:	f001 ff20 	bl	8011460 <_ZSt3getILj0EJP14TfLiteIfParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800f620:	4603      	mov	r3, r0
 800f622:	4618      	mov	r0, r3
 800f624:	3708      	adds	r7, #8
 800f626:	46bd      	mov	sp, r7
 800f628:	bd80      	pop	{r7, pc}

0800f62a <_ZNSt10unique_ptrI14TfLiteIfParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800f62a:	b580      	push	{r7, lr}
 800f62c:	b082      	sub	sp, #8
 800f62e:	af00      	add	r7, sp, #0
 800f630:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	4618      	mov	r0, r3
 800f636:	f001 ff20 	bl	801147a <_ZNSt15__uniq_ptr_implI14TfLiteIfParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800f63a:	4603      	mov	r3, r0
 800f63c:	4618      	mov	r0, r3
 800f63e:	3708      	adds	r7, #8
 800f640:	46bd      	mov	sp, r7
 800f642:	bd80      	pop	{r7, pc}

0800f644 <_ZNSt15__uniq_ptr_implI14TfLiteIfParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800f644:	b590      	push	{r4, r7, lr}
 800f646:	b085      	sub	sp, #20
 800f648:	af00      	add	r7, sp, #0
 800f64a:	60f8      	str	r0, [r7, #12]
 800f64c:	60b9      	str	r1, [r7, #8]
 800f64e:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800f650:	68fc      	ldr	r4, [r7, #12]
 800f652:	6878      	ldr	r0, [r7, #4]
 800f654:	f7fc fef1 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800f658:	4602      	mov	r2, r0
 800f65a:	f107 0308 	add.w	r3, r7, #8
 800f65e:	4619      	mov	r1, r3
 800f660:	4620      	mov	r0, r4
 800f662:	f001 ff22 	bl	80114aa <_ZNSt5tupleIJP14TfLiteIfParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	4618      	mov	r0, r3
 800f66a:	3714      	adds	r7, #20
 800f66c:	46bd      	mov	sp, r7
 800f66e:	bd90      	pop	{r4, r7, pc}

0800f670 <_ZNKSt10unique_ptrI14TfLiteIfParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800f670:	b580      	push	{r7, lr}
 800f672:	b082      	sub	sp, #8
 800f674:	af00      	add	r7, sp, #0
 800f676:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800f678:	6878      	ldr	r0, [r7, #4]
 800f67a:	f000 f80a 	bl	800f692 <_ZNKSt10unique_ptrI14TfLiteIfParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800f67e:	4603      	mov	r3, r0
 800f680:	2b00      	cmp	r3, #0
 800f682:	bf14      	ite	ne
 800f684:	2301      	movne	r3, #1
 800f686:	2300      	moveq	r3, #0
 800f688:	b2db      	uxtb	r3, r3
 800f68a:	4618      	mov	r0, r3
 800f68c:	3708      	adds	r7, #8
 800f68e:	46bd      	mov	sp, r7
 800f690:	bd80      	pop	{r7, pc}

0800f692 <_ZNKSt10unique_ptrI14TfLiteIfParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800f692:	b580      	push	{r7, lr}
 800f694:	b082      	sub	sp, #8
 800f696:	af00      	add	r7, sp, #0
 800f698:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	4618      	mov	r0, r3
 800f69e:	f001 ff1d 	bl	80114dc <_ZNKSt15__uniq_ptr_implI14TfLiteIfParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800f6a2:	4603      	mov	r3, r0
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	3708      	adds	r7, #8
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	bd80      	pop	{r7, pc}

0800f6ac <_ZN6tflite20BuiltinDataAllocator11AllocatePODI17TfLiteWhileParamsEEPT_v>:
  T* AllocatePOD() {
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b084      	sub	sp, #16
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	2204      	movs	r2, #4
 800f6bc:	2108      	movs	r1, #8
 800f6be:	6878      	ldr	r0, [r7, #4]
 800f6c0:	4798      	blx	r3
 800f6c2:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	4619      	mov	r1, r3
 800f6c8:	2008      	movs	r0, #8
 800f6ca:	f7f5 feb2 	bl	8005432 <_ZnwjPv>
 800f6ce:	4603      	mov	r3, r0
  }
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	3710      	adds	r7, #16
 800f6d4:	46bd      	mov	sp, r7
 800f6d6:	bd80      	pop	{r7, pc}

0800f6d8 <_ZSt4moveIRP17TfLiteWhileParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800f6d8:	b480      	push	{r7}
 800f6da:	b083      	sub	sp, #12
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	370c      	adds	r7, #12
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ec:	4770      	bx	lr

0800f6ee <_ZNSt10unique_ptrI17TfLiteWhileParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 800f6ee:	b5b0      	push	{r4, r5, r7, lr}
 800f6f0:	b084      	sub	sp, #16
 800f6f2:	af00      	add	r7, sp, #0
 800f6f4:	60f8      	str	r0, [r7, #12]
 800f6f6:	60b9      	str	r1, [r7, #8]
 800f6f8:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800f6fa:	68fc      	ldr	r4, [r7, #12]
 800f6fc:	f107 0308 	add.w	r3, r7, #8
 800f700:	4618      	mov	r0, r3
 800f702:	f7ff ffe9 	bl	800f6d8 <_ZSt4moveIRP17TfLiteWhileParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800f706:	4603      	mov	r3, r0
 800f708:	681d      	ldr	r5, [r3, #0]
 800f70a:	6878      	ldr	r0, [r7, #4]
 800f70c:	f7fc fe54 	bl	800c3b8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800f710:	4603      	mov	r3, r0
 800f712:	461a      	mov	r2, r3
 800f714:	4629      	mov	r1, r5
 800f716:	4620      	mov	r0, r4
 800f718:	f000 f81f 	bl	800f75a <_ZNSt15__uniq_ptr_implI17TfLiteWhileParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	4618      	mov	r0, r3
 800f720:	3710      	adds	r7, #16
 800f722:	46bd      	mov	sp, r7
 800f724:	bdb0      	pop	{r4, r5, r7, pc}

0800f726 <_ZNSt15__uniq_ptr_implI17TfLiteWhileParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800f726:	b580      	push	{r7, lr}
 800f728:	b082      	sub	sp, #8
 800f72a:	af00      	add	r7, sp, #0
 800f72c:	6078      	str	r0, [r7, #4]
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	4618      	mov	r0, r3
 800f732:	f001 fee1 	bl	80114f8 <_ZSt3getILj0EJP17TfLiteWhileParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800f736:	4603      	mov	r3, r0
 800f738:	4618      	mov	r0, r3
 800f73a:	3708      	adds	r7, #8
 800f73c:	46bd      	mov	sp, r7
 800f73e:	bd80      	pop	{r7, pc}

0800f740 <_ZNSt10unique_ptrI17TfLiteWhileParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800f740:	b580      	push	{r7, lr}
 800f742:	b082      	sub	sp, #8
 800f744:	af00      	add	r7, sp, #0
 800f746:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	4618      	mov	r0, r3
 800f74c:	f001 fee1 	bl	8011512 <_ZNSt15__uniq_ptr_implI17TfLiteWhileParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800f750:	4603      	mov	r3, r0
 800f752:	4618      	mov	r0, r3
 800f754:	3708      	adds	r7, #8
 800f756:	46bd      	mov	sp, r7
 800f758:	bd80      	pop	{r7, pc}

0800f75a <_ZNSt15__uniq_ptr_implI17TfLiteWhileParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800f75a:	b590      	push	{r4, r7, lr}
 800f75c:	b085      	sub	sp, #20
 800f75e:	af00      	add	r7, sp, #0
 800f760:	60f8      	str	r0, [r7, #12]
 800f762:	60b9      	str	r1, [r7, #8]
 800f764:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800f766:	68fc      	ldr	r4, [r7, #12]
 800f768:	6878      	ldr	r0, [r7, #4]
 800f76a:	f7fc fe66 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800f76e:	4602      	mov	r2, r0
 800f770:	f107 0308 	add.w	r3, r7, #8
 800f774:	4619      	mov	r1, r3
 800f776:	4620      	mov	r0, r4
 800f778:	f001 fee3 	bl	8011542 <_ZNSt5tupleIJP17TfLiteWhileParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	4618      	mov	r0, r3
 800f780:	3714      	adds	r7, #20
 800f782:	46bd      	mov	sp, r7
 800f784:	bd90      	pop	{r4, r7, pc}

0800f786 <_ZNKSt10unique_ptrI17TfLiteWhileParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800f786:	b580      	push	{r7, lr}
 800f788:	b082      	sub	sp, #8
 800f78a:	af00      	add	r7, sp, #0
 800f78c:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800f78e:	6878      	ldr	r0, [r7, #4]
 800f790:	f000 f80a 	bl	800f7a8 <_ZNKSt10unique_ptrI17TfLiteWhileParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800f794:	4603      	mov	r3, r0
 800f796:	2b00      	cmp	r3, #0
 800f798:	bf14      	ite	ne
 800f79a:	2301      	movne	r3, #1
 800f79c:	2300      	moveq	r3, #0
 800f79e:	b2db      	uxtb	r3, r3
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	3708      	adds	r7, #8
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	bd80      	pop	{r7, pc}

0800f7a8 <_ZNKSt10unique_ptrI17TfLiteWhileParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b082      	sub	sp, #8
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	f001 fede 	bl	8011574 <_ZNKSt15__uniq_ptr_implI17TfLiteWhileParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800f7b8:	4603      	mov	r3, r0
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	3708      	adds	r7, #8
 800f7be:	46bd      	mov	sp, r7
 800f7c0:	bd80      	pop	{r7, pc}

0800f7c2 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI23TfLiteBatchMatMulParamsEEPT_v>:
  T* AllocatePOD() {
 800f7c2:	b580      	push	{r7, lr}
 800f7c4:	b084      	sub	sp, #16
 800f7c6:	af00      	add	r7, sp, #0
 800f7c8:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	2201      	movs	r2, #1
 800f7d2:	2102      	movs	r1, #2
 800f7d4:	6878      	ldr	r0, [r7, #4]
 800f7d6:	4798      	blx	r3
 800f7d8:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	4619      	mov	r1, r3
 800f7de:	2002      	movs	r0, #2
 800f7e0:	f7f5 fe27 	bl	8005432 <_ZnwjPv>
 800f7e4:	4603      	mov	r3, r0
  }
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	3710      	adds	r7, #16
 800f7ea:	46bd      	mov	sp, r7
 800f7ec:	bd80      	pop	{r7, pc}

0800f7ee <_ZSt4moveIRP23TfLiteBatchMatMulParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800f7ee:	b480      	push	{r7}
 800f7f0:	b083      	sub	sp, #12
 800f7f2:	af00      	add	r7, sp, #0
 800f7f4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	370c      	adds	r7, #12
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f802:	4770      	bx	lr

0800f804 <_ZNSt10unique_ptrI23TfLiteBatchMatMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 800f804:	b5b0      	push	{r4, r5, r7, lr}
 800f806:	b084      	sub	sp, #16
 800f808:	af00      	add	r7, sp, #0
 800f80a:	60f8      	str	r0, [r7, #12]
 800f80c:	60b9      	str	r1, [r7, #8]
 800f80e:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800f810:	68fc      	ldr	r4, [r7, #12]
 800f812:	f107 0308 	add.w	r3, r7, #8
 800f816:	4618      	mov	r0, r3
 800f818:	f7ff ffe9 	bl	800f7ee <_ZSt4moveIRP23TfLiteBatchMatMulParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800f81c:	4603      	mov	r3, r0
 800f81e:	681d      	ldr	r5, [r3, #0]
 800f820:	6878      	ldr	r0, [r7, #4]
 800f822:	f7fc fdc9 	bl	800c3b8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800f826:	4603      	mov	r3, r0
 800f828:	461a      	mov	r2, r3
 800f82a:	4629      	mov	r1, r5
 800f82c:	4620      	mov	r0, r4
 800f82e:	f000 f81f 	bl	800f870 <_ZNSt15__uniq_ptr_implI23TfLiteBatchMatMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	4618      	mov	r0, r3
 800f836:	3710      	adds	r7, #16
 800f838:	46bd      	mov	sp, r7
 800f83a:	bdb0      	pop	{r4, r5, r7, pc}

0800f83c <_ZNSt15__uniq_ptr_implI23TfLiteBatchMatMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800f83c:	b580      	push	{r7, lr}
 800f83e:	b082      	sub	sp, #8
 800f840:	af00      	add	r7, sp, #0
 800f842:	6078      	str	r0, [r7, #4]
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	4618      	mov	r0, r3
 800f848:	f001 fea2 	bl	8011590 <_ZSt3getILj0EJP23TfLiteBatchMatMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800f84c:	4603      	mov	r3, r0
 800f84e:	4618      	mov	r0, r3
 800f850:	3708      	adds	r7, #8
 800f852:	46bd      	mov	sp, r7
 800f854:	bd80      	pop	{r7, pc}

0800f856 <_ZNSt10unique_ptrI23TfLiteBatchMatMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800f856:	b580      	push	{r7, lr}
 800f858:	b082      	sub	sp, #8
 800f85a:	af00      	add	r7, sp, #0
 800f85c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	4618      	mov	r0, r3
 800f862:	f001 fea2 	bl	80115aa <_ZNSt15__uniq_ptr_implI23TfLiteBatchMatMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800f866:	4603      	mov	r3, r0
 800f868:	4618      	mov	r0, r3
 800f86a:	3708      	adds	r7, #8
 800f86c:	46bd      	mov	sp, r7
 800f86e:	bd80      	pop	{r7, pc}

0800f870 <_ZNSt15__uniq_ptr_implI23TfLiteBatchMatMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800f870:	b590      	push	{r4, r7, lr}
 800f872:	b085      	sub	sp, #20
 800f874:	af00      	add	r7, sp, #0
 800f876:	60f8      	str	r0, [r7, #12]
 800f878:	60b9      	str	r1, [r7, #8]
 800f87a:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800f87c:	68fc      	ldr	r4, [r7, #12]
 800f87e:	6878      	ldr	r0, [r7, #4]
 800f880:	f7fc fddb 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800f884:	4602      	mov	r2, r0
 800f886:	f107 0308 	add.w	r3, r7, #8
 800f88a:	4619      	mov	r1, r3
 800f88c:	4620      	mov	r0, r4
 800f88e:	f001 fea4 	bl	80115da <_ZNSt5tupleIJP23TfLiteBatchMatMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	4618      	mov	r0, r3
 800f896:	3714      	adds	r7, #20
 800f898:	46bd      	mov	sp, r7
 800f89a:	bd90      	pop	{r4, r7, pc}

0800f89c <_ZNKSt10unique_ptrI23TfLiteBatchMatMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b082      	sub	sp, #8
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800f8a4:	6878      	ldr	r0, [r7, #4]
 800f8a6:	f000 f80a 	bl	800f8be <_ZNKSt10unique_ptrI23TfLiteBatchMatMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800f8aa:	4603      	mov	r3, r0
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	bf14      	ite	ne
 800f8b0:	2301      	movne	r3, #1
 800f8b2:	2300      	moveq	r3, #0
 800f8b4:	b2db      	uxtb	r3, r3
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	3708      	adds	r7, #8
 800f8ba:	46bd      	mov	sp, r7
 800f8bc:	bd80      	pop	{r7, pc}

0800f8be <_ZNKSt10unique_ptrI23TfLiteBatchMatMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800f8be:	b580      	push	{r7, lr}
 800f8c0:	b082      	sub	sp, #8
 800f8c2:	af00      	add	r7, sp, #0
 800f8c4:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	f001 fe9f 	bl	801160c <_ZNKSt15__uniq_ptr_implI23TfLiteBatchMatMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800f8ce:	4603      	mov	r3, r0
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	3708      	adds	r7, #8
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	bd80      	pop	{r7, pc}

0800f8d8 <_ZN11flatbuffers12EndianScalarIaEET_S1_>:
template<typename T> T EndianScalar(T t) {
 800f8d8:	b480      	push	{r7}
 800f8da:	b083      	sub	sp, #12
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	4603      	mov	r3, r0
 800f8e0:	71fb      	strb	r3, [r7, #7]
    return t;
 800f8e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	370c      	adds	r7, #12
 800f8ea:	46bd      	mov	sp, r7
 800f8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f0:	4770      	bx	lr

0800f8f2 <_ZN11flatbuffers12EndianScalarIfEET_S1_>:
template<typename T> T EndianScalar(T t) {
 800f8f2:	b480      	push	{r7}
 800f8f4:	b083      	sub	sp, #12
 800f8f6:	af00      	add	r7, sp, #0
 800f8f8:	ed87 0a01 	vstr	s0, [r7, #4]
    return t;
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	ee07 3a90 	vmov	s15, r3
}
 800f902:	eeb0 0a67 	vmov.f32	s0, s15
 800f906:	370c      	adds	r7, #12
 800f908:	46bd      	mov	sp, r7
 800f90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90e:	4770      	bx	lr

0800f910 <_ZSt3getILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 800f910:	b580      	push	{r7, lr}
 800f912:	b082      	sub	sp, #8
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	4618      	mov	r0, r3
 800f91c:	f001 fe84 	bl	8011628 <_ZSt12__get_helperILj0EP16TfLiteConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800f920:	4603      	mov	r3, r0
 800f922:	4618      	mov	r0, r3
 800f924:	3708      	adds	r7, #8
 800f926:	46bd      	mov	sp, r7
 800f928:	bd80      	pop	{r7, pc}

0800f92a <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800f92a:	b580      	push	{r7, lr}
 800f92c:	b082      	sub	sp, #8
 800f92e:	af00      	add	r7, sp, #0
 800f930:	6078      	str	r0, [r7, #4]
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	4618      	mov	r0, r3
 800f936:	f001 fe83 	bl	8011640 <_ZSt3getILj1EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800f93a:	4603      	mov	r3, r0
 800f93c:	4618      	mov	r0, r3
 800f93e:	3708      	adds	r7, #8
 800f940:	46bd      	mov	sp, r7
 800f942:	bd80      	pop	{r7, pc}

0800f944 <_ZSt7forwardIRP16TfLiteConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f944:	b480      	push	{r7}
 800f946:	b083      	sub	sp, #12
 800f948:	af00      	add	r7, sp, #0
 800f94a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	4618      	mov	r0, r3
 800f950:	370c      	adds	r7, #12
 800f952:	46bd      	mov	sp, r7
 800f954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f958:	4770      	bx	lr

0800f95a <_ZNSt5tupleIJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 800f95a:	b5b0      	push	{r4, r5, r7, lr}
 800f95c:	b084      	sub	sp, #16
 800f95e:	af00      	add	r7, sp, #0
 800f960:	60f8      	str	r0, [r7, #12]
 800f962:	60b9      	str	r1, [r7, #8]
 800f964:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800f966:	68fc      	ldr	r4, [r7, #12]
 800f968:	68b8      	ldr	r0, [r7, #8]
 800f96a:	f7ff ffeb 	bl	800f944 <_ZSt7forwardIRP16TfLiteConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800f96e:	4605      	mov	r5, r0
 800f970:	6878      	ldr	r0, [r7, #4]
 800f972:	f7fc fd62 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800f976:	4603      	mov	r3, r0
 800f978:	461a      	mov	r2, r3
 800f97a:	4629      	mov	r1, r5
 800f97c:	4620      	mov	r0, r4
 800f97e:	f001 fe6c 	bl	801165a <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	4618      	mov	r0, r3
 800f986:	3710      	adds	r7, #16
 800f988:	46bd      	mov	sp, r7
 800f98a:	bdb0      	pop	{r4, r5, r7, pc}

0800f98c <_ZNKSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b082      	sub	sp, #8
 800f990:	af00      	add	r7, sp, #0
 800f992:	6078      	str	r0, [r7, #4]
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	4618      	mov	r0, r3
 800f998:	f001 fe7d 	bl	8011696 <_ZSt3getILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 800f99c:	4603      	mov	r3, r0
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	3708      	adds	r7, #8
 800f9a4:	46bd      	mov	sp, r7
 800f9a6:	bd80      	pop	{r7, pc}

0800f9a8 <_ZSt3getILj0EJP16TfLiteCastParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b082      	sub	sp, #8
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	f001 fe7c 	bl	80116b0 <_ZSt12__get_helperILj0EP16TfLiteCastParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800f9b8:	4603      	mov	r3, r0
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	3708      	adds	r7, #8
 800f9be:	46bd      	mov	sp, r7
 800f9c0:	bd80      	pop	{r7, pc}

0800f9c2 <_ZNSt15__uniq_ptr_implI16TfLiteCastParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800f9c2:	b580      	push	{r7, lr}
 800f9c4:	b082      	sub	sp, #8
 800f9c6:	af00      	add	r7, sp, #0
 800f9c8:	6078      	str	r0, [r7, #4]
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	4618      	mov	r0, r3
 800f9ce:	f001 fe7b 	bl	80116c8 <_ZSt3getILj1EJP16TfLiteCastParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800f9d2:	4603      	mov	r3, r0
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	3708      	adds	r7, #8
 800f9d8:	46bd      	mov	sp, r7
 800f9da:	bd80      	pop	{r7, pc}

0800f9dc <_ZSt7forwardIRP16TfLiteCastParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f9dc:	b480      	push	{r7}
 800f9de:	b083      	sub	sp, #12
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	370c      	adds	r7, #12
 800f9ea:	46bd      	mov	sp, r7
 800f9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f0:	4770      	bx	lr

0800f9f2 <_ZNSt5tupleIJP16TfLiteCastParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 800f9f2:	b5b0      	push	{r4, r5, r7, lr}
 800f9f4:	b084      	sub	sp, #16
 800f9f6:	af00      	add	r7, sp, #0
 800f9f8:	60f8      	str	r0, [r7, #12]
 800f9fa:	60b9      	str	r1, [r7, #8]
 800f9fc:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800f9fe:	68fc      	ldr	r4, [r7, #12]
 800fa00:	68b8      	ldr	r0, [r7, #8]
 800fa02:	f7ff ffeb 	bl	800f9dc <_ZSt7forwardIRP16TfLiteCastParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800fa06:	4605      	mov	r5, r0
 800fa08:	6878      	ldr	r0, [r7, #4]
 800fa0a:	f7fc fd16 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800fa0e:	4603      	mov	r3, r0
 800fa10:	461a      	mov	r2, r3
 800fa12:	4629      	mov	r1, r5
 800fa14:	4620      	mov	r0, r4
 800fa16:	f001 fe64 	bl	80116e2 <_ZNSt11_Tuple_implILj0EJP16TfLiteCastParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	3710      	adds	r7, #16
 800fa20:	46bd      	mov	sp, r7
 800fa22:	bdb0      	pop	{r4, r5, r7, pc}

0800fa24 <_ZNKSt15__uniq_ptr_implI16TfLiteCastParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800fa24:	b580      	push	{r7, lr}
 800fa26:	b082      	sub	sp, #8
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	4618      	mov	r0, r3
 800fa30:	f001 fe75 	bl	801171e <_ZSt3getILj0EJP16TfLiteCastParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 800fa34:	4603      	mov	r3, r0
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	4618      	mov	r0, r3
 800fa3a:	3708      	adds	r7, #8
 800fa3c:	46bd      	mov	sp, r7
 800fa3e:	bd80      	pop	{r7, pc}

0800fa40 <_ZSt3getILj0EJP25TfLiteLSHProjectionParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800fa40:	b580      	push	{r7, lr}
 800fa42:	b082      	sub	sp, #8
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	f001 fe74 	bl	8011738 <_ZSt12__get_helperILj0EP25TfLiteLSHProjectionParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800fa50:	4603      	mov	r3, r0
 800fa52:	4618      	mov	r0, r3
 800fa54:	3708      	adds	r7, #8
 800fa56:	46bd      	mov	sp, r7
 800fa58:	bd80      	pop	{r7, pc}

0800fa5a <_ZNSt15__uniq_ptr_implI25TfLiteLSHProjectionParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800fa5a:	b580      	push	{r7, lr}
 800fa5c:	b082      	sub	sp, #8
 800fa5e:	af00      	add	r7, sp, #0
 800fa60:	6078      	str	r0, [r7, #4]
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	4618      	mov	r0, r3
 800fa66:	f001 fe73 	bl	8011750 <_ZSt3getILj1EJP25TfLiteLSHProjectionParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800fa6a:	4603      	mov	r3, r0
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	3708      	adds	r7, #8
 800fa70:	46bd      	mov	sp, r7
 800fa72:	bd80      	pop	{r7, pc}

0800fa74 <_ZSt7forwardIRP25TfLiteLSHProjectionParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800fa74:	b480      	push	{r7}
 800fa76:	b083      	sub	sp, #12
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	4618      	mov	r0, r3
 800fa80:	370c      	adds	r7, #12
 800fa82:	46bd      	mov	sp, r7
 800fa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa88:	4770      	bx	lr

0800fa8a <_ZNSt5tupleIJP25TfLiteLSHProjectionParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 800fa8a:	b5b0      	push	{r4, r5, r7, lr}
 800fa8c:	b084      	sub	sp, #16
 800fa8e:	af00      	add	r7, sp, #0
 800fa90:	60f8      	str	r0, [r7, #12]
 800fa92:	60b9      	str	r1, [r7, #8]
 800fa94:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800fa96:	68fc      	ldr	r4, [r7, #12]
 800fa98:	68b8      	ldr	r0, [r7, #8]
 800fa9a:	f7ff ffeb 	bl	800fa74 <_ZSt7forwardIRP25TfLiteLSHProjectionParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800fa9e:	4605      	mov	r5, r0
 800faa0:	6878      	ldr	r0, [r7, #4]
 800faa2:	f7fc fcca 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800faa6:	4603      	mov	r3, r0
 800faa8:	461a      	mov	r2, r3
 800faaa:	4629      	mov	r1, r5
 800faac:	4620      	mov	r0, r4
 800faae:	f001 fe5c 	bl	801176a <_ZNSt11_Tuple_implILj0EJP25TfLiteLSHProjectionParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	4618      	mov	r0, r3
 800fab6:	3710      	adds	r7, #16
 800fab8:	46bd      	mov	sp, r7
 800faba:	bdb0      	pop	{r4, r5, r7, pc}

0800fabc <_ZNKSt15__uniq_ptr_implI25TfLiteLSHProjectionParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b082      	sub	sp, #8
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	4618      	mov	r0, r3
 800fac8:	f001 fe6d 	bl	80117a6 <_ZSt3getILj0EJP25TfLiteLSHProjectionParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 800facc:	4603      	mov	r3, r0
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	4618      	mov	r0, r3
 800fad2:	3708      	adds	r7, #8
 800fad4:	46bd      	mov	sp, r7
 800fad6:	bd80      	pop	{r7, pc}

0800fad8 <_ZSt3getILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800fad8:	b580      	push	{r7, lr}
 800fada:	b082      	sub	sp, #8
 800fadc:	af00      	add	r7, sp, #0
 800fade:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	4618      	mov	r0, r3
 800fae4:	f001 fe6c 	bl	80117c0 <_ZSt12__get_helperILj0EP16TfLitePoolParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800fae8:	4603      	mov	r3, r0
 800faea:	4618      	mov	r0, r3
 800faec:	3708      	adds	r7, #8
 800faee:	46bd      	mov	sp, r7
 800faf0:	bd80      	pop	{r7, pc}

0800faf2 <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800faf2:	b580      	push	{r7, lr}
 800faf4:	b082      	sub	sp, #8
 800faf6:	af00      	add	r7, sp, #0
 800faf8:	6078      	str	r0, [r7, #4]
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	4618      	mov	r0, r3
 800fafe:	f001 fe6b 	bl	80117d8 <_ZSt3getILj1EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800fb02:	4603      	mov	r3, r0
 800fb04:	4618      	mov	r0, r3
 800fb06:	3708      	adds	r7, #8
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	bd80      	pop	{r7, pc}

0800fb0c <_ZSt7forwardIRP16TfLitePoolParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800fb0c:	b480      	push	{r7}
 800fb0e:	b083      	sub	sp, #12
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	4618      	mov	r0, r3
 800fb18:	370c      	adds	r7, #12
 800fb1a:	46bd      	mov	sp, r7
 800fb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb20:	4770      	bx	lr

0800fb22 <_ZNSt5tupleIJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 800fb22:	b5b0      	push	{r4, r5, r7, lr}
 800fb24:	b084      	sub	sp, #16
 800fb26:	af00      	add	r7, sp, #0
 800fb28:	60f8      	str	r0, [r7, #12]
 800fb2a:	60b9      	str	r1, [r7, #8]
 800fb2c:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800fb2e:	68fc      	ldr	r4, [r7, #12]
 800fb30:	68b8      	ldr	r0, [r7, #8]
 800fb32:	f7ff ffeb 	bl	800fb0c <_ZSt7forwardIRP16TfLitePoolParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800fb36:	4605      	mov	r5, r0
 800fb38:	6878      	ldr	r0, [r7, #4]
 800fb3a:	f7fc fc7e 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800fb3e:	4603      	mov	r3, r0
 800fb40:	461a      	mov	r2, r3
 800fb42:	4629      	mov	r1, r5
 800fb44:	4620      	mov	r0, r4
 800fb46:	f001 fe54 	bl	80117f2 <_ZNSt11_Tuple_implILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	3710      	adds	r7, #16
 800fb50:	46bd      	mov	sp, r7
 800fb52:	bdb0      	pop	{r4, r5, r7, pc}

0800fb54 <_ZNKSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800fb54:	b580      	push	{r7, lr}
 800fb56:	b082      	sub	sp, #8
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	6078      	str	r0, [r7, #4]
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	4618      	mov	r0, r3
 800fb60:	f001 fe65 	bl	801182e <_ZSt3getILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 800fb64:	4603      	mov	r3, r0
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	4618      	mov	r0, r3
 800fb6a:	3708      	adds	r7, #8
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	bd80      	pop	{r7, pc}

0800fb70 <_ZSt3getILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b082      	sub	sp, #8
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	f001 fe64 	bl	8011848 <_ZSt12__get_helperILj0EP25TfLiteDepthwiseConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800fb80:	4603      	mov	r3, r0
 800fb82:	4618      	mov	r0, r3
 800fb84:	3708      	adds	r7, #8
 800fb86:	46bd      	mov	sp, r7
 800fb88:	bd80      	pop	{r7, pc}

0800fb8a <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800fb8a:	b580      	push	{r7, lr}
 800fb8c:	b082      	sub	sp, #8
 800fb8e:	af00      	add	r7, sp, #0
 800fb90:	6078      	str	r0, [r7, #4]
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	4618      	mov	r0, r3
 800fb96:	f001 fe63 	bl	8011860 <_ZSt3getILj1EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	3708      	adds	r7, #8
 800fba0:	46bd      	mov	sp, r7
 800fba2:	bd80      	pop	{r7, pc}

0800fba4 <_ZSt7forwardIRP25TfLiteDepthwiseConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800fba4:	b480      	push	{r7}
 800fba6:	b083      	sub	sp, #12
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	4618      	mov	r0, r3
 800fbb0:	370c      	adds	r7, #12
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb8:	4770      	bx	lr

0800fbba <_ZNSt5tupleIJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 800fbba:	b5b0      	push	{r4, r5, r7, lr}
 800fbbc:	b084      	sub	sp, #16
 800fbbe:	af00      	add	r7, sp, #0
 800fbc0:	60f8      	str	r0, [r7, #12]
 800fbc2:	60b9      	str	r1, [r7, #8]
 800fbc4:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800fbc6:	68fc      	ldr	r4, [r7, #12]
 800fbc8:	68b8      	ldr	r0, [r7, #8]
 800fbca:	f7ff ffeb 	bl	800fba4 <_ZSt7forwardIRP25TfLiteDepthwiseConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800fbce:	4605      	mov	r5, r0
 800fbd0:	6878      	ldr	r0, [r7, #4]
 800fbd2:	f7fc fc32 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	461a      	mov	r2, r3
 800fbda:	4629      	mov	r1, r5
 800fbdc:	4620      	mov	r0, r4
 800fbde:	f001 fe4c 	bl	801187a <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	3710      	adds	r7, #16
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	bdb0      	pop	{r4, r5, r7, pc}

0800fbec <_ZNKSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b082      	sub	sp, #8
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	6078      	str	r0, [r7, #4]
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	f001 fe5d 	bl	80118b6 <_ZSt3getILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 800fbfc:	4603      	mov	r3, r0
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	4618      	mov	r0, r3
 800fc02:	3708      	adds	r7, #8
 800fc04:	46bd      	mov	sp, r7
 800fc06:	bd80      	pop	{r7, pc}

0800fc08 <_ZSt3getILj0EJP16TfLiteSVDFParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b082      	sub	sp, #8
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	4618      	mov	r0, r3
 800fc14:	f001 fe5c 	bl	80118d0 <_ZSt12__get_helperILj0EP16TfLiteSVDFParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800fc18:	4603      	mov	r3, r0
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	3708      	adds	r7, #8
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	bd80      	pop	{r7, pc}

0800fc22 <_ZNSt15__uniq_ptr_implI16TfLiteSVDFParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800fc22:	b580      	push	{r7, lr}
 800fc24:	b082      	sub	sp, #8
 800fc26:	af00      	add	r7, sp, #0
 800fc28:	6078      	str	r0, [r7, #4]
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	f001 fe5b 	bl	80118e8 <_ZSt3getILj1EJP16TfLiteSVDFParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800fc32:	4603      	mov	r3, r0
 800fc34:	4618      	mov	r0, r3
 800fc36:	3708      	adds	r7, #8
 800fc38:	46bd      	mov	sp, r7
 800fc3a:	bd80      	pop	{r7, pc}

0800fc3c <_ZSt7forwardIRP16TfLiteSVDFParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800fc3c:	b480      	push	{r7}
 800fc3e:	b083      	sub	sp, #12
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	4618      	mov	r0, r3
 800fc48:	370c      	adds	r7, #12
 800fc4a:	46bd      	mov	sp, r7
 800fc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc50:	4770      	bx	lr

0800fc52 <_ZNSt5tupleIJP16TfLiteSVDFParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 800fc52:	b5b0      	push	{r4, r5, r7, lr}
 800fc54:	b084      	sub	sp, #16
 800fc56:	af00      	add	r7, sp, #0
 800fc58:	60f8      	str	r0, [r7, #12]
 800fc5a:	60b9      	str	r1, [r7, #8]
 800fc5c:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800fc5e:	68fc      	ldr	r4, [r7, #12]
 800fc60:	68b8      	ldr	r0, [r7, #8]
 800fc62:	f7ff ffeb 	bl	800fc3c <_ZSt7forwardIRP16TfLiteSVDFParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800fc66:	4605      	mov	r5, r0
 800fc68:	6878      	ldr	r0, [r7, #4]
 800fc6a:	f7fc fbe6 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800fc6e:	4603      	mov	r3, r0
 800fc70:	461a      	mov	r2, r3
 800fc72:	4629      	mov	r1, r5
 800fc74:	4620      	mov	r0, r4
 800fc76:	f001 fe44 	bl	8011902 <_ZNSt11_Tuple_implILj0EJP16TfLiteSVDFParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	3710      	adds	r7, #16
 800fc80:	46bd      	mov	sp, r7
 800fc82:	bdb0      	pop	{r4, r5, r7, pc}

0800fc84 <_ZNKSt15__uniq_ptr_implI16TfLiteSVDFParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800fc84:	b580      	push	{r7, lr}
 800fc86:	b082      	sub	sp, #8
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	6078      	str	r0, [r7, #4]
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	4618      	mov	r0, r3
 800fc90:	f001 fe55 	bl	801193e <_ZSt3getILj0EJP16TfLiteSVDFParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 800fc94:	4603      	mov	r3, r0
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	4618      	mov	r0, r3
 800fc9a:	3708      	adds	r7, #8
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	bd80      	pop	{r7, pc}

0800fca0 <_ZSt3getILj0EJP23TfLiteSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b082      	sub	sp, #8
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	4618      	mov	r0, r3
 800fcac:	f001 fe54 	bl	8011958 <_ZSt12__get_helperILj0EP23TfLiteSequenceRNNParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800fcb0:	4603      	mov	r3, r0
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	3708      	adds	r7, #8
 800fcb6:	46bd      	mov	sp, r7
 800fcb8:	bd80      	pop	{r7, pc}

0800fcba <_ZNSt15__uniq_ptr_implI23TfLiteSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800fcba:	b580      	push	{r7, lr}
 800fcbc:	b082      	sub	sp, #8
 800fcbe:	af00      	add	r7, sp, #0
 800fcc0:	6078      	str	r0, [r7, #4]
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	f001 fe53 	bl	8011970 <_ZSt3getILj1EJP23TfLiteSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800fcca:	4603      	mov	r3, r0
 800fccc:	4618      	mov	r0, r3
 800fcce:	3708      	adds	r7, #8
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	bd80      	pop	{r7, pc}

0800fcd4 <_ZSt7forwardIRP23TfLiteSequenceRNNParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800fcd4:	b480      	push	{r7}
 800fcd6:	b083      	sub	sp, #12
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	4618      	mov	r0, r3
 800fce0:	370c      	adds	r7, #12
 800fce2:	46bd      	mov	sp, r7
 800fce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce8:	4770      	bx	lr

0800fcea <_ZNSt5tupleIJP23TfLiteSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 800fcea:	b5b0      	push	{r4, r5, r7, lr}
 800fcec:	b084      	sub	sp, #16
 800fcee:	af00      	add	r7, sp, #0
 800fcf0:	60f8      	str	r0, [r7, #12]
 800fcf2:	60b9      	str	r1, [r7, #8]
 800fcf4:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800fcf6:	68fc      	ldr	r4, [r7, #12]
 800fcf8:	68b8      	ldr	r0, [r7, #8]
 800fcfa:	f7ff ffeb 	bl	800fcd4 <_ZSt7forwardIRP23TfLiteSequenceRNNParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800fcfe:	4605      	mov	r5, r0
 800fd00:	6878      	ldr	r0, [r7, #4]
 800fd02:	f7fc fb9a 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800fd06:	4603      	mov	r3, r0
 800fd08:	461a      	mov	r2, r3
 800fd0a:	4629      	mov	r1, r5
 800fd0c:	4620      	mov	r0, r4
 800fd0e:	f001 fe3c 	bl	801198a <_ZNSt11_Tuple_implILj0EJP23TfLiteSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	4618      	mov	r0, r3
 800fd16:	3710      	adds	r7, #16
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	bdb0      	pop	{r4, r5, r7, pc}

0800fd1c <_ZNKSt15__uniq_ptr_implI23TfLiteSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	b082      	sub	sp, #8
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	6078      	str	r0, [r7, #4]
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	4618      	mov	r0, r3
 800fd28:	f001 fe4d 	bl	80119c6 <_ZSt3getILj0EJP23TfLiteSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 800fd2c:	4603      	mov	r3, r0
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	4618      	mov	r0, r3
 800fd32:	3708      	adds	r7, #8
 800fd34:	46bd      	mov	sp, r7
 800fd36:	bd80      	pop	{r7, pc}

0800fd38 <_ZSt3getILj0EJP36TfLiteBidirectionalSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800fd38:	b580      	push	{r7, lr}
 800fd3a:	b082      	sub	sp, #8
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	4618      	mov	r0, r3
 800fd44:	f001 fe4c 	bl	80119e0 <_ZSt12__get_helperILj0EP36TfLiteBidirectionalSequenceRNNParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800fd48:	4603      	mov	r3, r0
 800fd4a:	4618      	mov	r0, r3
 800fd4c:	3708      	adds	r7, #8
 800fd4e:	46bd      	mov	sp, r7
 800fd50:	bd80      	pop	{r7, pc}

0800fd52 <_ZNSt15__uniq_ptr_implI36TfLiteBidirectionalSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800fd52:	b580      	push	{r7, lr}
 800fd54:	b082      	sub	sp, #8
 800fd56:	af00      	add	r7, sp, #0
 800fd58:	6078      	str	r0, [r7, #4]
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	f001 fe4b 	bl	80119f8 <_ZSt3getILj1EJP36TfLiteBidirectionalSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800fd62:	4603      	mov	r3, r0
 800fd64:	4618      	mov	r0, r3
 800fd66:	3708      	adds	r7, #8
 800fd68:	46bd      	mov	sp, r7
 800fd6a:	bd80      	pop	{r7, pc}

0800fd6c <_ZSt7forwardIRP36TfLiteBidirectionalSequenceRNNParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800fd6c:	b480      	push	{r7}
 800fd6e:	b083      	sub	sp, #12
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	4618      	mov	r0, r3
 800fd78:	370c      	adds	r7, #12
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd80:	4770      	bx	lr

0800fd82 <_ZNSt5tupleIJP36TfLiteBidirectionalSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 800fd82:	b5b0      	push	{r4, r5, r7, lr}
 800fd84:	b084      	sub	sp, #16
 800fd86:	af00      	add	r7, sp, #0
 800fd88:	60f8      	str	r0, [r7, #12]
 800fd8a:	60b9      	str	r1, [r7, #8]
 800fd8c:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800fd8e:	68fc      	ldr	r4, [r7, #12]
 800fd90:	68b8      	ldr	r0, [r7, #8]
 800fd92:	f7ff ffeb 	bl	800fd6c <_ZSt7forwardIRP36TfLiteBidirectionalSequenceRNNParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800fd96:	4605      	mov	r5, r0
 800fd98:	6878      	ldr	r0, [r7, #4]
 800fd9a:	f7fc fb4e 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800fd9e:	4603      	mov	r3, r0
 800fda0:	461a      	mov	r2, r3
 800fda2:	4629      	mov	r1, r5
 800fda4:	4620      	mov	r0, r4
 800fda6:	f001 fe34 	bl	8011a12 <_ZNSt11_Tuple_implILj0EJP36TfLiteBidirectionalSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	4618      	mov	r0, r3
 800fdae:	3710      	adds	r7, #16
 800fdb0:	46bd      	mov	sp, r7
 800fdb2:	bdb0      	pop	{r4, r5, r7, pc}

0800fdb4 <_ZNKSt15__uniq_ptr_implI36TfLiteBidirectionalSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800fdb4:	b580      	push	{r7, lr}
 800fdb6:	b082      	sub	sp, #8
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	6078      	str	r0, [r7, #4]
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	f001 fe45 	bl	8011a4e <_ZSt3getILj0EJP36TfLiteBidirectionalSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 800fdc4:	4603      	mov	r3, r0
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	4618      	mov	r0, r3
 800fdca:	3708      	adds	r7, #8
 800fdcc:	46bd      	mov	sp, r7
 800fdce:	bd80      	pop	{r7, pc}

0800fdd0 <_ZSt3getILj0EJP15TfLiteRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b082      	sub	sp, #8
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	4618      	mov	r0, r3
 800fddc:	f001 fe44 	bl	8011a68 <_ZSt12__get_helperILj0EP15TfLiteRNNParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800fde0:	4603      	mov	r3, r0
 800fde2:	4618      	mov	r0, r3
 800fde4:	3708      	adds	r7, #8
 800fde6:	46bd      	mov	sp, r7
 800fde8:	bd80      	pop	{r7, pc}

0800fdea <_ZNSt15__uniq_ptr_implI15TfLiteRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800fdea:	b580      	push	{r7, lr}
 800fdec:	b082      	sub	sp, #8
 800fdee:	af00      	add	r7, sp, #0
 800fdf0:	6078      	str	r0, [r7, #4]
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	f001 fe43 	bl	8011a80 <_ZSt3getILj1EJP15TfLiteRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800fdfa:	4603      	mov	r3, r0
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	3708      	adds	r7, #8
 800fe00:	46bd      	mov	sp, r7
 800fe02:	bd80      	pop	{r7, pc}

0800fe04 <_ZSt7forwardIRP15TfLiteRNNParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800fe04:	b480      	push	{r7}
 800fe06:	b083      	sub	sp, #12
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	4618      	mov	r0, r3
 800fe10:	370c      	adds	r7, #12
 800fe12:	46bd      	mov	sp, r7
 800fe14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe18:	4770      	bx	lr

0800fe1a <_ZNSt5tupleIJP15TfLiteRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 800fe1a:	b5b0      	push	{r4, r5, r7, lr}
 800fe1c:	b084      	sub	sp, #16
 800fe1e:	af00      	add	r7, sp, #0
 800fe20:	60f8      	str	r0, [r7, #12]
 800fe22:	60b9      	str	r1, [r7, #8]
 800fe24:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800fe26:	68fc      	ldr	r4, [r7, #12]
 800fe28:	68b8      	ldr	r0, [r7, #8]
 800fe2a:	f7ff ffeb 	bl	800fe04 <_ZSt7forwardIRP15TfLiteRNNParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800fe2e:	4605      	mov	r5, r0
 800fe30:	6878      	ldr	r0, [r7, #4]
 800fe32:	f7fc fb02 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800fe36:	4603      	mov	r3, r0
 800fe38:	461a      	mov	r2, r3
 800fe3a:	4629      	mov	r1, r5
 800fe3c:	4620      	mov	r0, r4
 800fe3e:	f001 fe2c 	bl	8011a9a <_ZNSt11_Tuple_implILj0EJP15TfLiteRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	4618      	mov	r0, r3
 800fe46:	3710      	adds	r7, #16
 800fe48:	46bd      	mov	sp, r7
 800fe4a:	bdb0      	pop	{r4, r5, r7, pc}

0800fe4c <_ZNKSt15__uniq_ptr_implI15TfLiteRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800fe4c:	b580      	push	{r7, lr}
 800fe4e:	b082      	sub	sp, #8
 800fe50:	af00      	add	r7, sp, #0
 800fe52:	6078      	str	r0, [r7, #4]
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	4618      	mov	r0, r3
 800fe58:	f001 fe3d 	bl	8011ad6 <_ZSt3getILj0EJP15TfLiteRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 800fe5c:	4603      	mov	r3, r0
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	4618      	mov	r0, r3
 800fe62:	3708      	adds	r7, #8
 800fe64:	46bd      	mov	sp, r7
 800fe66:	bd80      	pop	{r7, pc}

0800fe68 <_ZSt3getILj0EJP33TfLiteEmbeddingLookupSparseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800fe68:	b580      	push	{r7, lr}
 800fe6a:	b082      	sub	sp, #8
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	4618      	mov	r0, r3
 800fe74:	f001 fe3c 	bl	8011af0 <_ZSt12__get_helperILj0EP33TfLiteEmbeddingLookupSparseParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800fe78:	4603      	mov	r3, r0
 800fe7a:	4618      	mov	r0, r3
 800fe7c:	3708      	adds	r7, #8
 800fe7e:	46bd      	mov	sp, r7
 800fe80:	bd80      	pop	{r7, pc}

0800fe82 <_ZNSt15__uniq_ptr_implI33TfLiteEmbeddingLookupSparseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800fe82:	b580      	push	{r7, lr}
 800fe84:	b082      	sub	sp, #8
 800fe86:	af00      	add	r7, sp, #0
 800fe88:	6078      	str	r0, [r7, #4]
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	f001 fe3b 	bl	8011b08 <_ZSt3getILj1EJP33TfLiteEmbeddingLookupSparseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800fe92:	4603      	mov	r3, r0
 800fe94:	4618      	mov	r0, r3
 800fe96:	3708      	adds	r7, #8
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	bd80      	pop	{r7, pc}

0800fe9c <_ZSt7forwardIRP33TfLiteEmbeddingLookupSparseParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800fe9c:	b480      	push	{r7}
 800fe9e:	b083      	sub	sp, #12
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	4618      	mov	r0, r3
 800fea8:	370c      	adds	r7, #12
 800feaa:	46bd      	mov	sp, r7
 800feac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb0:	4770      	bx	lr

0800feb2 <_ZNSt5tupleIJP33TfLiteEmbeddingLookupSparseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 800feb2:	b5b0      	push	{r4, r5, r7, lr}
 800feb4:	b084      	sub	sp, #16
 800feb6:	af00      	add	r7, sp, #0
 800feb8:	60f8      	str	r0, [r7, #12]
 800feba:	60b9      	str	r1, [r7, #8]
 800febc:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800febe:	68fc      	ldr	r4, [r7, #12]
 800fec0:	68b8      	ldr	r0, [r7, #8]
 800fec2:	f7ff ffeb 	bl	800fe9c <_ZSt7forwardIRP33TfLiteEmbeddingLookupSparseParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800fec6:	4605      	mov	r5, r0
 800fec8:	6878      	ldr	r0, [r7, #4]
 800feca:	f7fc fab6 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800fece:	4603      	mov	r3, r0
 800fed0:	461a      	mov	r2, r3
 800fed2:	4629      	mov	r1, r5
 800fed4:	4620      	mov	r0, r4
 800fed6:	f001 fe24 	bl	8011b22 <_ZNSt11_Tuple_implILj0EJP33TfLiteEmbeddingLookupSparseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	4618      	mov	r0, r3
 800fede:	3710      	adds	r7, #16
 800fee0:	46bd      	mov	sp, r7
 800fee2:	bdb0      	pop	{r4, r5, r7, pc}

0800fee4 <_ZNKSt15__uniq_ptr_implI33TfLiteEmbeddingLookupSparseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b082      	sub	sp, #8
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	4618      	mov	r0, r3
 800fef0:	f001 fe35 	bl	8011b5e <_ZSt3getILj0EJP33TfLiteEmbeddingLookupSparseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 800fef4:	4603      	mov	r3, r0
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	4618      	mov	r0, r3
 800fefa:	3708      	adds	r7, #8
 800fefc:	46bd      	mov	sp, r7
 800fefe:	bd80      	pop	{r7, pc}

0800ff00 <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800ff00:	b580      	push	{r7, lr}
 800ff02:	b082      	sub	sp, #8
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	4618      	mov	r0, r3
 800ff0c:	f001 fe34 	bl	8011b78 <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800ff10:	4603      	mov	r3, r0
 800ff12:	4618      	mov	r0, r3
 800ff14:	3708      	adds	r7, #8
 800ff16:	46bd      	mov	sp, r7
 800ff18:	bd80      	pop	{r7, pc}

0800ff1a <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800ff1a:	b580      	push	{r7, lr}
 800ff1c:	b082      	sub	sp, #8
 800ff1e:	af00      	add	r7, sp, #0
 800ff20:	6078      	str	r0, [r7, #4]
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	4618      	mov	r0, r3
 800ff26:	f001 fe33 	bl	8011b90 <_ZSt3getILj1EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800ff2a:	4603      	mov	r3, r0
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	3708      	adds	r7, #8
 800ff30:	46bd      	mov	sp, r7
 800ff32:	bd80      	pop	{r7, pc}

0800ff34 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ff34:	b480      	push	{r7}
 800ff36:	b083      	sub	sp, #12
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	4618      	mov	r0, r3
 800ff40:	370c      	adds	r7, #12
 800ff42:	46bd      	mov	sp, r7
 800ff44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff48:	4770      	bx	lr

0800ff4a <_ZNSt5tupleIJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 800ff4a:	b5b0      	push	{r4, r5, r7, lr}
 800ff4c:	b084      	sub	sp, #16
 800ff4e:	af00      	add	r7, sp, #0
 800ff50:	60f8      	str	r0, [r7, #12]
 800ff52:	60b9      	str	r1, [r7, #8]
 800ff54:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800ff56:	68fc      	ldr	r4, [r7, #12]
 800ff58:	68b8      	ldr	r0, [r7, #8]
 800ff5a:	f7ff ffeb 	bl	800ff34 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800ff5e:	4605      	mov	r5, r0
 800ff60:	6878      	ldr	r0, [r7, #4]
 800ff62:	f7fc fa6a 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800ff66:	4603      	mov	r3, r0
 800ff68:	461a      	mov	r2, r3
 800ff6a:	4629      	mov	r1, r5
 800ff6c:	4620      	mov	r0, r4
 800ff6e:	f001 fe1c 	bl	8011baa <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	4618      	mov	r0, r3
 800ff76:	3710      	adds	r7, #16
 800ff78:	46bd      	mov	sp, r7
 800ff7a:	bdb0      	pop	{r4, r5, r7, pc}

0800ff7c <_ZNKSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b082      	sub	sp, #8
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	6078      	str	r0, [r7, #4]
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	4618      	mov	r0, r3
 800ff88:	f001 fe2d 	bl	8011be6 <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 800ff8c:	4603      	mov	r3, r0
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	4618      	mov	r0, r3
 800ff92:	3708      	adds	r7, #8
 800ff94:	46bd      	mov	sp, r7
 800ff96:	bd80      	pop	{r7, pc}

0800ff98 <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b082      	sub	sp, #8
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	f001 fe2c 	bl	8011c00 <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800ffa8:	4603      	mov	r3, r0
 800ffaa:	4618      	mov	r0, r3
 800ffac:	3708      	adds	r7, #8
 800ffae:	46bd      	mov	sp, r7
 800ffb0:	bd80      	pop	{r7, pc}

0800ffb2 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800ffb2:	b580      	push	{r7, lr}
 800ffb4:	b082      	sub	sp, #8
 800ffb6:	af00      	add	r7, sp, #0
 800ffb8:	6078      	str	r0, [r7, #4]
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	f001 fe2b 	bl	8011c18 <_ZSt3getILj1EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800ffc2:	4603      	mov	r3, r0
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	3708      	adds	r7, #8
 800ffc8:	46bd      	mov	sp, r7
 800ffca:	bd80      	pop	{r7, pc}

0800ffcc <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ffcc:	b480      	push	{r7}
 800ffce:	b083      	sub	sp, #12
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	370c      	adds	r7, #12
 800ffda:	46bd      	mov	sp, r7
 800ffdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe0:	4770      	bx	lr

0800ffe2 <_ZNSt5tupleIJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 800ffe2:	b5b0      	push	{r4, r5, r7, lr}
 800ffe4:	b084      	sub	sp, #16
 800ffe6:	af00      	add	r7, sp, #0
 800ffe8:	60f8      	str	r0, [r7, #12]
 800ffea:	60b9      	str	r1, [r7, #8]
 800ffec:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800ffee:	68fc      	ldr	r4, [r7, #12]
 800fff0:	68b8      	ldr	r0, [r7, #8]
 800fff2:	f7ff ffeb 	bl	800ffcc <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800fff6:	4605      	mov	r5, r0
 800fff8:	6878      	ldr	r0, [r7, #4]
 800fffa:	f7fc fa1e 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800fffe:	4603      	mov	r3, r0
 8010000:	461a      	mov	r2, r3
 8010002:	4629      	mov	r1, r5
 8010004:	4620      	mov	r0, r4
 8010006:	f001 fe14 	bl	8011c32 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	4618      	mov	r0, r3
 801000e:	3710      	adds	r7, #16
 8010010:	46bd      	mov	sp, r7
 8010012:	bdb0      	pop	{r4, r5, r7, pc}

08010014 <_ZNKSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8010014:	b580      	push	{r7, lr}
 8010016:	b082      	sub	sp, #8
 8010018:	af00      	add	r7, sp, #0
 801001a:	6078      	str	r0, [r7, #4]
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	4618      	mov	r0, r3
 8010020:	f001 fe25 	bl	8011c6e <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 8010024:	4603      	mov	r3, r0
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	4618      	mov	r0, r3
 801002a:	3708      	adds	r7, #8
 801002c:	46bd      	mov	sp, r7
 801002e:	bd80      	pop	{r7, pc}

08010030 <_ZSt3getILj0EJP25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8010030:	b580      	push	{r7, lr}
 8010032:	b082      	sub	sp, #8
 8010034:	af00      	add	r7, sp, #0
 8010036:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	4618      	mov	r0, r3
 801003c:	f001 fe24 	bl	8011c88 <_ZSt12__get_helperILj0EP25TfLiteConcatenationParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8010040:	4603      	mov	r3, r0
 8010042:	4618      	mov	r0, r3
 8010044:	3708      	adds	r7, #8
 8010046:	46bd      	mov	sp, r7
 8010048:	bd80      	pop	{r7, pc}

0801004a <_ZNSt15__uniq_ptr_implI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 801004a:	b580      	push	{r7, lr}
 801004c:	b082      	sub	sp, #8
 801004e:	af00      	add	r7, sp, #0
 8010050:	6078      	str	r0, [r7, #4]
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	4618      	mov	r0, r3
 8010056:	f001 fe23 	bl	8011ca0 <_ZSt3getILj1EJP25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 801005a:	4603      	mov	r3, r0
 801005c:	4618      	mov	r0, r3
 801005e:	3708      	adds	r7, #8
 8010060:	46bd      	mov	sp, r7
 8010062:	bd80      	pop	{r7, pc}

08010064 <_ZSt7forwardIRP25TfLiteConcatenationParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010064:	b480      	push	{r7}
 8010066:	b083      	sub	sp, #12
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	4618      	mov	r0, r3
 8010070:	370c      	adds	r7, #12
 8010072:	46bd      	mov	sp, r7
 8010074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010078:	4770      	bx	lr

0801007a <_ZNSt5tupleIJP25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 801007a:	b5b0      	push	{r4, r5, r7, lr}
 801007c:	b084      	sub	sp, #16
 801007e:	af00      	add	r7, sp, #0
 8010080:	60f8      	str	r0, [r7, #12]
 8010082:	60b9      	str	r1, [r7, #8]
 8010084:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8010086:	68fc      	ldr	r4, [r7, #12]
 8010088:	68b8      	ldr	r0, [r7, #8]
 801008a:	f7ff ffeb 	bl	8010064 <_ZSt7forwardIRP25TfLiteConcatenationParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 801008e:	4605      	mov	r5, r0
 8010090:	6878      	ldr	r0, [r7, #4]
 8010092:	f7fc f9d2 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8010096:	4603      	mov	r3, r0
 8010098:	461a      	mov	r2, r3
 801009a:	4629      	mov	r1, r5
 801009c:	4620      	mov	r0, r4
 801009e:	f001 fe0c 	bl	8011cba <_ZNSt11_Tuple_implILj0EJP25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	4618      	mov	r0, r3
 80100a6:	3710      	adds	r7, #16
 80100a8:	46bd      	mov	sp, r7
 80100aa:	bdb0      	pop	{r4, r5, r7, pc}

080100ac <_ZNKSt15__uniq_ptr_implI25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80100ac:	b580      	push	{r7, lr}
 80100ae:	b082      	sub	sp, #8
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	6078      	str	r0, [r7, #4]
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	4618      	mov	r0, r3
 80100b8:	f001 fe1d 	bl	8011cf6 <_ZSt3getILj0EJP25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 80100bc:	4603      	mov	r3, r0
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	4618      	mov	r0, r3
 80100c2:	3708      	adds	r7, #8
 80100c4:	46bd      	mov	sp, r7
 80100c6:	bd80      	pop	{r7, pc}

080100c8 <_ZSt3getILj0EJP15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80100c8:	b580      	push	{r7, lr}
 80100ca:	b082      	sub	sp, #8
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	4618      	mov	r0, r3
 80100d4:	f001 fe1c 	bl	8011d10 <_ZSt12__get_helperILj0EP15TfLiteMulParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80100d8:	4603      	mov	r3, r0
 80100da:	4618      	mov	r0, r3
 80100dc:	3708      	adds	r7, #8
 80100de:	46bd      	mov	sp, r7
 80100e0:	bd80      	pop	{r7, pc}

080100e2 <_ZNSt15__uniq_ptr_implI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 80100e2:	b580      	push	{r7, lr}
 80100e4:	b082      	sub	sp, #8
 80100e6:	af00      	add	r7, sp, #0
 80100e8:	6078      	str	r0, [r7, #4]
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	4618      	mov	r0, r3
 80100ee:	f001 fe1b 	bl	8011d28 <_ZSt3getILj1EJP15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 80100f2:	4603      	mov	r3, r0
 80100f4:	4618      	mov	r0, r3
 80100f6:	3708      	adds	r7, #8
 80100f8:	46bd      	mov	sp, r7
 80100fa:	bd80      	pop	{r7, pc}

080100fc <_ZSt7forwardIRP15TfLiteMulParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80100fc:	b480      	push	{r7}
 80100fe:	b083      	sub	sp, #12
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	4618      	mov	r0, r3
 8010108:	370c      	adds	r7, #12
 801010a:	46bd      	mov	sp, r7
 801010c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010110:	4770      	bx	lr

08010112 <_ZNSt5tupleIJP15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 8010112:	b5b0      	push	{r4, r5, r7, lr}
 8010114:	b084      	sub	sp, #16
 8010116:	af00      	add	r7, sp, #0
 8010118:	60f8      	str	r0, [r7, #12]
 801011a:	60b9      	str	r1, [r7, #8]
 801011c:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 801011e:	68fc      	ldr	r4, [r7, #12]
 8010120:	68b8      	ldr	r0, [r7, #8]
 8010122:	f7ff ffeb 	bl	80100fc <_ZSt7forwardIRP15TfLiteMulParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8010126:	4605      	mov	r5, r0
 8010128:	6878      	ldr	r0, [r7, #4]
 801012a:	f7fc f986 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 801012e:	4603      	mov	r3, r0
 8010130:	461a      	mov	r2, r3
 8010132:	4629      	mov	r1, r5
 8010134:	4620      	mov	r0, r4
 8010136:	f001 fe04 	bl	8011d42 <_ZNSt11_Tuple_implILj0EJP15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	4618      	mov	r0, r3
 801013e:	3710      	adds	r7, #16
 8010140:	46bd      	mov	sp, r7
 8010142:	bdb0      	pop	{r4, r5, r7, pc}

08010144 <_ZNKSt15__uniq_ptr_implI15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8010144:	b580      	push	{r7, lr}
 8010146:	b082      	sub	sp, #8
 8010148:	af00      	add	r7, sp, #0
 801014a:	6078      	str	r0, [r7, #4]
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	4618      	mov	r0, r3
 8010150:	f001 fe15 	bl	8011d7e <_ZSt3getILj0EJP15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 8010154:	4603      	mov	r3, r0
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	4618      	mov	r0, r3
 801015a:	3708      	adds	r7, #8
 801015c:	46bd      	mov	sp, r7
 801015e:	bd80      	pop	{r7, pc}

08010160 <_ZSt3getILj0EJP15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8010160:	b580      	push	{r7, lr}
 8010162:	b082      	sub	sp, #8
 8010164:	af00      	add	r7, sp, #0
 8010166:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	4618      	mov	r0, r3
 801016c:	f001 fe14 	bl	8011d98 <_ZSt12__get_helperILj0EP15TfLiteAddParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8010170:	4603      	mov	r3, r0
 8010172:	4618      	mov	r0, r3
 8010174:	3708      	adds	r7, #8
 8010176:	46bd      	mov	sp, r7
 8010178:	bd80      	pop	{r7, pc}

0801017a <_ZNSt15__uniq_ptr_implI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 801017a:	b580      	push	{r7, lr}
 801017c:	b082      	sub	sp, #8
 801017e:	af00      	add	r7, sp, #0
 8010180:	6078      	str	r0, [r7, #4]
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	4618      	mov	r0, r3
 8010186:	f001 fe13 	bl	8011db0 <_ZSt3getILj1EJP15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 801018a:	4603      	mov	r3, r0
 801018c:	4618      	mov	r0, r3
 801018e:	3708      	adds	r7, #8
 8010190:	46bd      	mov	sp, r7
 8010192:	bd80      	pop	{r7, pc}

08010194 <_ZSt7forwardIRP15TfLiteAddParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010194:	b480      	push	{r7}
 8010196:	b083      	sub	sp, #12
 8010198:	af00      	add	r7, sp, #0
 801019a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	4618      	mov	r0, r3
 80101a0:	370c      	adds	r7, #12
 80101a2:	46bd      	mov	sp, r7
 80101a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a8:	4770      	bx	lr

080101aa <_ZNSt5tupleIJP15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 80101aa:	b5b0      	push	{r4, r5, r7, lr}
 80101ac:	b084      	sub	sp, #16
 80101ae:	af00      	add	r7, sp, #0
 80101b0:	60f8      	str	r0, [r7, #12]
 80101b2:	60b9      	str	r1, [r7, #8]
 80101b4:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 80101b6:	68fc      	ldr	r4, [r7, #12]
 80101b8:	68b8      	ldr	r0, [r7, #8]
 80101ba:	f7ff ffeb 	bl	8010194 <_ZSt7forwardIRP15TfLiteAddParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80101be:	4605      	mov	r5, r0
 80101c0:	6878      	ldr	r0, [r7, #4]
 80101c2:	f7fc f93a 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80101c6:	4603      	mov	r3, r0
 80101c8:	461a      	mov	r2, r3
 80101ca:	4629      	mov	r1, r5
 80101cc:	4620      	mov	r0, r4
 80101ce:	f001 fdfc 	bl	8011dca <_ZNSt11_Tuple_implILj0EJP15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	4618      	mov	r0, r3
 80101d6:	3710      	adds	r7, #16
 80101d8:	46bd      	mov	sp, r7
 80101da:	bdb0      	pop	{r4, r5, r7, pc}

080101dc <_ZNKSt15__uniq_ptr_implI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80101dc:	b580      	push	{r7, lr}
 80101de:	b082      	sub	sp, #8
 80101e0:	af00      	add	r7, sp, #0
 80101e2:	6078      	str	r0, [r7, #4]
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	4618      	mov	r0, r3
 80101e8:	f001 fe0d 	bl	8011e06 <_ZSt3getILj0EJP15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 80101ec:	4603      	mov	r3, r0
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	4618      	mov	r0, r3
 80101f2:	3708      	adds	r7, #8
 80101f4:	46bd      	mov	sp, r7
 80101f6:	bd80      	pop	{r7, pc}

080101f8 <_ZSt3getILj0EJP15TfLiteDivParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b082      	sub	sp, #8
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	4618      	mov	r0, r3
 8010204:	f001 fe0c 	bl	8011e20 <_ZSt12__get_helperILj0EP15TfLiteDivParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8010208:	4603      	mov	r3, r0
 801020a:	4618      	mov	r0, r3
 801020c:	3708      	adds	r7, #8
 801020e:	46bd      	mov	sp, r7
 8010210:	bd80      	pop	{r7, pc}

08010212 <_ZNSt15__uniq_ptr_implI15TfLiteDivParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8010212:	b580      	push	{r7, lr}
 8010214:	b082      	sub	sp, #8
 8010216:	af00      	add	r7, sp, #0
 8010218:	6078      	str	r0, [r7, #4]
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	4618      	mov	r0, r3
 801021e:	f001 fe0b 	bl	8011e38 <_ZSt3getILj1EJP15TfLiteDivParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8010222:	4603      	mov	r3, r0
 8010224:	4618      	mov	r0, r3
 8010226:	3708      	adds	r7, #8
 8010228:	46bd      	mov	sp, r7
 801022a:	bd80      	pop	{r7, pc}

0801022c <_ZSt7forwardIRP15TfLiteDivParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801022c:	b480      	push	{r7}
 801022e:	b083      	sub	sp, #12
 8010230:	af00      	add	r7, sp, #0
 8010232:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	4618      	mov	r0, r3
 8010238:	370c      	adds	r7, #12
 801023a:	46bd      	mov	sp, r7
 801023c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010240:	4770      	bx	lr

08010242 <_ZNSt5tupleIJP15TfLiteDivParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 8010242:	b5b0      	push	{r4, r5, r7, lr}
 8010244:	b084      	sub	sp, #16
 8010246:	af00      	add	r7, sp, #0
 8010248:	60f8      	str	r0, [r7, #12]
 801024a:	60b9      	str	r1, [r7, #8]
 801024c:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 801024e:	68fc      	ldr	r4, [r7, #12]
 8010250:	68b8      	ldr	r0, [r7, #8]
 8010252:	f7ff ffeb 	bl	801022c <_ZSt7forwardIRP15TfLiteDivParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8010256:	4605      	mov	r5, r0
 8010258:	6878      	ldr	r0, [r7, #4]
 801025a:	f7fc f8ee 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 801025e:	4603      	mov	r3, r0
 8010260:	461a      	mov	r2, r3
 8010262:	4629      	mov	r1, r5
 8010264:	4620      	mov	r0, r4
 8010266:	f001 fdf4 	bl	8011e52 <_ZNSt11_Tuple_implILj0EJP15TfLiteDivParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	4618      	mov	r0, r3
 801026e:	3710      	adds	r7, #16
 8010270:	46bd      	mov	sp, r7
 8010272:	bdb0      	pop	{r4, r5, r7, pc}

08010274 <_ZNKSt15__uniq_ptr_implI15TfLiteDivParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8010274:	b580      	push	{r7, lr}
 8010276:	b082      	sub	sp, #8
 8010278:	af00      	add	r7, sp, #0
 801027a:	6078      	str	r0, [r7, #4]
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	4618      	mov	r0, r3
 8010280:	f001 fe05 	bl	8011e8e <_ZSt3getILj0EJP15TfLiteDivParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 8010284:	4603      	mov	r3, r0
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	4618      	mov	r0, r3
 801028a:	3708      	adds	r7, #8
 801028c:	46bd      	mov	sp, r7
 801028e:	bd80      	pop	{r7, pc}

08010290 <_ZSt3getILj0EJP15TfLiteSubParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8010290:	b580      	push	{r7, lr}
 8010292:	b082      	sub	sp, #8
 8010294:	af00      	add	r7, sp, #0
 8010296:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	4618      	mov	r0, r3
 801029c:	f001 fe04 	bl	8011ea8 <_ZSt12__get_helperILj0EP15TfLiteSubParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80102a0:	4603      	mov	r3, r0
 80102a2:	4618      	mov	r0, r3
 80102a4:	3708      	adds	r7, #8
 80102a6:	46bd      	mov	sp, r7
 80102a8:	bd80      	pop	{r7, pc}

080102aa <_ZNSt15__uniq_ptr_implI15TfLiteSubParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 80102aa:	b580      	push	{r7, lr}
 80102ac:	b082      	sub	sp, #8
 80102ae:	af00      	add	r7, sp, #0
 80102b0:	6078      	str	r0, [r7, #4]
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	4618      	mov	r0, r3
 80102b6:	f001 fe03 	bl	8011ec0 <_ZSt3getILj1EJP15TfLiteSubParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 80102ba:	4603      	mov	r3, r0
 80102bc:	4618      	mov	r0, r3
 80102be:	3708      	adds	r7, #8
 80102c0:	46bd      	mov	sp, r7
 80102c2:	bd80      	pop	{r7, pc}

080102c4 <_ZSt7forwardIRP15TfLiteSubParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80102c4:	b480      	push	{r7}
 80102c6:	b083      	sub	sp, #12
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	4618      	mov	r0, r3
 80102d0:	370c      	adds	r7, #12
 80102d2:	46bd      	mov	sp, r7
 80102d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d8:	4770      	bx	lr

080102da <_ZNSt5tupleIJP15TfLiteSubParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 80102da:	b5b0      	push	{r4, r5, r7, lr}
 80102dc:	b084      	sub	sp, #16
 80102de:	af00      	add	r7, sp, #0
 80102e0:	60f8      	str	r0, [r7, #12]
 80102e2:	60b9      	str	r1, [r7, #8]
 80102e4:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 80102e6:	68fc      	ldr	r4, [r7, #12]
 80102e8:	68b8      	ldr	r0, [r7, #8]
 80102ea:	f7ff ffeb 	bl	80102c4 <_ZSt7forwardIRP15TfLiteSubParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80102ee:	4605      	mov	r5, r0
 80102f0:	6878      	ldr	r0, [r7, #4]
 80102f2:	f7fc f8a2 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80102f6:	4603      	mov	r3, r0
 80102f8:	461a      	mov	r2, r3
 80102fa:	4629      	mov	r1, r5
 80102fc:	4620      	mov	r0, r4
 80102fe:	f001 fdec 	bl	8011eda <_ZNSt11_Tuple_implILj0EJP15TfLiteSubParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	4618      	mov	r0, r3
 8010306:	3710      	adds	r7, #16
 8010308:	46bd      	mov	sp, r7
 801030a:	bdb0      	pop	{r4, r5, r7, pc}

0801030c <_ZNKSt15__uniq_ptr_implI15TfLiteSubParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 801030c:	b580      	push	{r7, lr}
 801030e:	b082      	sub	sp, #8
 8010310:	af00      	add	r7, sp, #0
 8010312:	6078      	str	r0, [r7, #4]
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	4618      	mov	r0, r3
 8010318:	f001 fdfd 	bl	8011f16 <_ZSt3getILj0EJP15TfLiteSubParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 801031c:	4603      	mov	r3, r0
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	4618      	mov	r0, r3
 8010322:	3708      	adds	r7, #8
 8010324:	46bd      	mov	sp, r7
 8010326:	bd80      	pop	{r7, pc}

08010328 <_ZSt3getILj0EJP18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8010328:	b580      	push	{r7, lr}
 801032a:	b082      	sub	sp, #8
 801032c:	af00      	add	r7, sp, #0
 801032e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	4618      	mov	r0, r3
 8010334:	f001 fdfc 	bl	8011f30 <_ZSt12__get_helperILj0EP18TfLiteL2NormParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8010338:	4603      	mov	r3, r0
 801033a:	4618      	mov	r0, r3
 801033c:	3708      	adds	r7, #8
 801033e:	46bd      	mov	sp, r7
 8010340:	bd80      	pop	{r7, pc}

08010342 <_ZNSt15__uniq_ptr_implI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8010342:	b580      	push	{r7, lr}
 8010344:	b082      	sub	sp, #8
 8010346:	af00      	add	r7, sp, #0
 8010348:	6078      	str	r0, [r7, #4]
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	4618      	mov	r0, r3
 801034e:	f001 fdfb 	bl	8011f48 <_ZSt3getILj1EJP18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8010352:	4603      	mov	r3, r0
 8010354:	4618      	mov	r0, r3
 8010356:	3708      	adds	r7, #8
 8010358:	46bd      	mov	sp, r7
 801035a:	bd80      	pop	{r7, pc}

0801035c <_ZSt7forwardIRP18TfLiteL2NormParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801035c:	b480      	push	{r7}
 801035e:	b083      	sub	sp, #12
 8010360:	af00      	add	r7, sp, #0
 8010362:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	4618      	mov	r0, r3
 8010368:	370c      	adds	r7, #12
 801036a:	46bd      	mov	sp, r7
 801036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010370:	4770      	bx	lr

08010372 <_ZNSt5tupleIJP18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 8010372:	b5b0      	push	{r4, r5, r7, lr}
 8010374:	b084      	sub	sp, #16
 8010376:	af00      	add	r7, sp, #0
 8010378:	60f8      	str	r0, [r7, #12]
 801037a:	60b9      	str	r1, [r7, #8]
 801037c:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 801037e:	68fc      	ldr	r4, [r7, #12]
 8010380:	68b8      	ldr	r0, [r7, #8]
 8010382:	f7ff ffeb 	bl	801035c <_ZSt7forwardIRP18TfLiteL2NormParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8010386:	4605      	mov	r5, r0
 8010388:	6878      	ldr	r0, [r7, #4]
 801038a:	f7fc f856 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 801038e:	4603      	mov	r3, r0
 8010390:	461a      	mov	r2, r3
 8010392:	4629      	mov	r1, r5
 8010394:	4620      	mov	r0, r4
 8010396:	f001 fde4 	bl	8011f62 <_ZNSt11_Tuple_implILj0EJP18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	4618      	mov	r0, r3
 801039e:	3710      	adds	r7, #16
 80103a0:	46bd      	mov	sp, r7
 80103a2:	bdb0      	pop	{r4, r5, r7, pc}

080103a4 <_ZNKSt15__uniq_ptr_implI18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80103a4:	b580      	push	{r7, lr}
 80103a6:	b082      	sub	sp, #8
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	4618      	mov	r0, r3
 80103b0:	f001 fdf5 	bl	8011f9e <_ZSt3getILj0EJP18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 80103b4:	4603      	mov	r3, r0
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	4618      	mov	r0, r3
 80103ba:	3708      	adds	r7, #8
 80103bc:	46bd      	mov	sp, r7
 80103be:	bd80      	pop	{r7, pc}

080103c0 <_ZSt3getILj0EJP29TfLiteLocalResponseNormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80103c0:	b580      	push	{r7, lr}
 80103c2:	b082      	sub	sp, #8
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	4618      	mov	r0, r3
 80103cc:	f001 fdf4 	bl	8011fb8 <_ZSt12__get_helperILj0EP29TfLiteLocalResponseNormParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80103d0:	4603      	mov	r3, r0
 80103d2:	4618      	mov	r0, r3
 80103d4:	3708      	adds	r7, #8
 80103d6:	46bd      	mov	sp, r7
 80103d8:	bd80      	pop	{r7, pc}

080103da <_ZNSt15__uniq_ptr_implI29TfLiteLocalResponseNormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 80103da:	b580      	push	{r7, lr}
 80103dc:	b082      	sub	sp, #8
 80103de:	af00      	add	r7, sp, #0
 80103e0:	6078      	str	r0, [r7, #4]
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	4618      	mov	r0, r3
 80103e6:	f001 fdf3 	bl	8011fd0 <_ZSt3getILj1EJP29TfLiteLocalResponseNormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 80103ea:	4603      	mov	r3, r0
 80103ec:	4618      	mov	r0, r3
 80103ee:	3708      	adds	r7, #8
 80103f0:	46bd      	mov	sp, r7
 80103f2:	bd80      	pop	{r7, pc}

080103f4 <_ZSt7forwardIRP29TfLiteLocalResponseNormParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80103f4:	b480      	push	{r7}
 80103f6:	b083      	sub	sp, #12
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	4618      	mov	r0, r3
 8010400:	370c      	adds	r7, #12
 8010402:	46bd      	mov	sp, r7
 8010404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010408:	4770      	bx	lr

0801040a <_ZNSt5tupleIJP29TfLiteLocalResponseNormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 801040a:	b5b0      	push	{r4, r5, r7, lr}
 801040c:	b084      	sub	sp, #16
 801040e:	af00      	add	r7, sp, #0
 8010410:	60f8      	str	r0, [r7, #12]
 8010412:	60b9      	str	r1, [r7, #8]
 8010414:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8010416:	68fc      	ldr	r4, [r7, #12]
 8010418:	68b8      	ldr	r0, [r7, #8]
 801041a:	f7ff ffeb 	bl	80103f4 <_ZSt7forwardIRP29TfLiteLocalResponseNormParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 801041e:	4605      	mov	r5, r0
 8010420:	6878      	ldr	r0, [r7, #4]
 8010422:	f7fc f80a 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8010426:	4603      	mov	r3, r0
 8010428:	461a      	mov	r2, r3
 801042a:	4629      	mov	r1, r5
 801042c:	4620      	mov	r0, r4
 801042e:	f001 fddc 	bl	8011fea <_ZNSt11_Tuple_implILj0EJP29TfLiteLocalResponseNormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	4618      	mov	r0, r3
 8010436:	3710      	adds	r7, #16
 8010438:	46bd      	mov	sp, r7
 801043a:	bdb0      	pop	{r4, r5, r7, pc}

0801043c <_ZNKSt15__uniq_ptr_implI29TfLiteLocalResponseNormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 801043c:	b580      	push	{r7, lr}
 801043e:	b082      	sub	sp, #8
 8010440:	af00      	add	r7, sp, #0
 8010442:	6078      	str	r0, [r7, #4]
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	4618      	mov	r0, r3
 8010448:	f001 fded 	bl	8012026 <_ZSt3getILj0EJP29TfLiteLocalResponseNormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 801044c:	4603      	mov	r3, r0
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	4618      	mov	r0, r3
 8010452:	3708      	adds	r7, #8
 8010454:	46bd      	mov	sp, r7
 8010456:	bd80      	pop	{r7, pc}

08010458 <_ZSt3getILj0EJP16TfLiteLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8010458:	b580      	push	{r7, lr}
 801045a:	b082      	sub	sp, #8
 801045c:	af00      	add	r7, sp, #0
 801045e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	4618      	mov	r0, r3
 8010464:	f001 fdec 	bl	8012040 <_ZSt12__get_helperILj0EP16TfLiteLSTMParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8010468:	4603      	mov	r3, r0
 801046a:	4618      	mov	r0, r3
 801046c:	3708      	adds	r7, #8
 801046e:	46bd      	mov	sp, r7
 8010470:	bd80      	pop	{r7, pc}

08010472 <_ZNSt15__uniq_ptr_implI16TfLiteLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8010472:	b580      	push	{r7, lr}
 8010474:	b082      	sub	sp, #8
 8010476:	af00      	add	r7, sp, #0
 8010478:	6078      	str	r0, [r7, #4]
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	4618      	mov	r0, r3
 801047e:	f001 fdeb 	bl	8012058 <_ZSt3getILj1EJP16TfLiteLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8010482:	4603      	mov	r3, r0
 8010484:	4618      	mov	r0, r3
 8010486:	3708      	adds	r7, #8
 8010488:	46bd      	mov	sp, r7
 801048a:	bd80      	pop	{r7, pc}

0801048c <_ZSt7forwardIRP16TfLiteLSTMParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801048c:	b480      	push	{r7}
 801048e:	b083      	sub	sp, #12
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	4618      	mov	r0, r3
 8010498:	370c      	adds	r7, #12
 801049a:	46bd      	mov	sp, r7
 801049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a0:	4770      	bx	lr

080104a2 <_ZNSt5tupleIJP16TfLiteLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 80104a2:	b5b0      	push	{r4, r5, r7, lr}
 80104a4:	b084      	sub	sp, #16
 80104a6:	af00      	add	r7, sp, #0
 80104a8:	60f8      	str	r0, [r7, #12]
 80104aa:	60b9      	str	r1, [r7, #8]
 80104ac:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 80104ae:	68fc      	ldr	r4, [r7, #12]
 80104b0:	68b8      	ldr	r0, [r7, #8]
 80104b2:	f7ff ffeb 	bl	801048c <_ZSt7forwardIRP16TfLiteLSTMParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80104b6:	4605      	mov	r5, r0
 80104b8:	6878      	ldr	r0, [r7, #4]
 80104ba:	f7fb ffbe 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80104be:	4603      	mov	r3, r0
 80104c0:	461a      	mov	r2, r3
 80104c2:	4629      	mov	r1, r5
 80104c4:	4620      	mov	r0, r4
 80104c6:	f001 fdd4 	bl	8012072 <_ZNSt11_Tuple_implILj0EJP16TfLiteLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	4618      	mov	r0, r3
 80104ce:	3710      	adds	r7, #16
 80104d0:	46bd      	mov	sp, r7
 80104d2:	bdb0      	pop	{r4, r5, r7, pc}

080104d4 <_ZNKSt15__uniq_ptr_implI16TfLiteLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80104d4:	b580      	push	{r7, lr}
 80104d6:	b082      	sub	sp, #8
 80104d8:	af00      	add	r7, sp, #0
 80104da:	6078      	str	r0, [r7, #4]
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	4618      	mov	r0, r3
 80104e0:	f001 fde5 	bl	80120ae <_ZSt3getILj0EJP16TfLiteLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 80104e4:	4603      	mov	r3, r0
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	4618      	mov	r0, r3
 80104ea:	3708      	adds	r7, #8
 80104ec:	46bd      	mov	sp, r7
 80104ee:	bd80      	pop	{r7, pc}

080104f0 <_ZSt3getILj0EJP38TfLiteUnidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80104f0:	b580      	push	{r7, lr}
 80104f2:	b082      	sub	sp, #8
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	4618      	mov	r0, r3
 80104fc:	f001 fde4 	bl	80120c8 <_ZSt12__get_helperILj0EP38TfLiteUnidirectionalSequenceLSTMParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8010500:	4603      	mov	r3, r0
 8010502:	4618      	mov	r0, r3
 8010504:	3708      	adds	r7, #8
 8010506:	46bd      	mov	sp, r7
 8010508:	bd80      	pop	{r7, pc}

0801050a <_ZNSt15__uniq_ptr_implI38TfLiteUnidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 801050a:	b580      	push	{r7, lr}
 801050c:	b082      	sub	sp, #8
 801050e:	af00      	add	r7, sp, #0
 8010510:	6078      	str	r0, [r7, #4]
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	4618      	mov	r0, r3
 8010516:	f001 fde3 	bl	80120e0 <_ZSt3getILj1EJP38TfLiteUnidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 801051a:	4603      	mov	r3, r0
 801051c:	4618      	mov	r0, r3
 801051e:	3708      	adds	r7, #8
 8010520:	46bd      	mov	sp, r7
 8010522:	bd80      	pop	{r7, pc}

08010524 <_ZSt7forwardIRP38TfLiteUnidirectionalSequenceLSTMParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010524:	b480      	push	{r7}
 8010526:	b083      	sub	sp, #12
 8010528:	af00      	add	r7, sp, #0
 801052a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	4618      	mov	r0, r3
 8010530:	370c      	adds	r7, #12
 8010532:	46bd      	mov	sp, r7
 8010534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010538:	4770      	bx	lr

0801053a <_ZNSt5tupleIJP38TfLiteUnidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 801053a:	b5b0      	push	{r4, r5, r7, lr}
 801053c:	b084      	sub	sp, #16
 801053e:	af00      	add	r7, sp, #0
 8010540:	60f8      	str	r0, [r7, #12]
 8010542:	60b9      	str	r1, [r7, #8]
 8010544:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8010546:	68fc      	ldr	r4, [r7, #12]
 8010548:	68b8      	ldr	r0, [r7, #8]
 801054a:	f7ff ffeb 	bl	8010524 <_ZSt7forwardIRP38TfLiteUnidirectionalSequenceLSTMParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 801054e:	4605      	mov	r5, r0
 8010550:	6878      	ldr	r0, [r7, #4]
 8010552:	f7fb ff72 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8010556:	4603      	mov	r3, r0
 8010558:	461a      	mov	r2, r3
 801055a:	4629      	mov	r1, r5
 801055c:	4620      	mov	r0, r4
 801055e:	f001 fdcc 	bl	80120fa <_ZNSt11_Tuple_implILj0EJP38TfLiteUnidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	4618      	mov	r0, r3
 8010566:	3710      	adds	r7, #16
 8010568:	46bd      	mov	sp, r7
 801056a:	bdb0      	pop	{r4, r5, r7, pc}

0801056c <_ZNKSt15__uniq_ptr_implI38TfLiteUnidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 801056c:	b580      	push	{r7, lr}
 801056e:	b082      	sub	sp, #8
 8010570:	af00      	add	r7, sp, #0
 8010572:	6078      	str	r0, [r7, #4]
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	4618      	mov	r0, r3
 8010578:	f001 fddd 	bl	8012136 <_ZSt3getILj0EJP38TfLiteUnidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 801057c:	4603      	mov	r3, r0
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	4618      	mov	r0, r3
 8010582:	3708      	adds	r7, #8
 8010584:	46bd      	mov	sp, r7
 8010586:	bd80      	pop	{r7, pc}

08010588 <_ZSt3getILj0EJP37TfLiteBidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8010588:	b580      	push	{r7, lr}
 801058a:	b082      	sub	sp, #8
 801058c:	af00      	add	r7, sp, #0
 801058e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	4618      	mov	r0, r3
 8010594:	f001 fddc 	bl	8012150 <_ZSt12__get_helperILj0EP37TfLiteBidirectionalSequenceLSTMParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8010598:	4603      	mov	r3, r0
 801059a:	4618      	mov	r0, r3
 801059c:	3708      	adds	r7, #8
 801059e:	46bd      	mov	sp, r7
 80105a0:	bd80      	pop	{r7, pc}

080105a2 <_ZNSt15__uniq_ptr_implI37TfLiteBidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 80105a2:	b580      	push	{r7, lr}
 80105a4:	b082      	sub	sp, #8
 80105a6:	af00      	add	r7, sp, #0
 80105a8:	6078      	str	r0, [r7, #4]
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	4618      	mov	r0, r3
 80105ae:	f001 fddb 	bl	8012168 <_ZSt3getILj1EJP37TfLiteBidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 80105b2:	4603      	mov	r3, r0
 80105b4:	4618      	mov	r0, r3
 80105b6:	3708      	adds	r7, #8
 80105b8:	46bd      	mov	sp, r7
 80105ba:	bd80      	pop	{r7, pc}

080105bc <_ZSt7forwardIRP37TfLiteBidirectionalSequenceLSTMParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80105bc:	b480      	push	{r7}
 80105be:	b083      	sub	sp, #12
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	4618      	mov	r0, r3
 80105c8:	370c      	adds	r7, #12
 80105ca:	46bd      	mov	sp, r7
 80105cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d0:	4770      	bx	lr

080105d2 <_ZNSt5tupleIJP37TfLiteBidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 80105d2:	b5b0      	push	{r4, r5, r7, lr}
 80105d4:	b084      	sub	sp, #16
 80105d6:	af00      	add	r7, sp, #0
 80105d8:	60f8      	str	r0, [r7, #12]
 80105da:	60b9      	str	r1, [r7, #8]
 80105dc:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 80105de:	68fc      	ldr	r4, [r7, #12]
 80105e0:	68b8      	ldr	r0, [r7, #8]
 80105e2:	f7ff ffeb 	bl	80105bc <_ZSt7forwardIRP37TfLiteBidirectionalSequenceLSTMParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80105e6:	4605      	mov	r5, r0
 80105e8:	6878      	ldr	r0, [r7, #4]
 80105ea:	f7fb ff26 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80105ee:	4603      	mov	r3, r0
 80105f0:	461a      	mov	r2, r3
 80105f2:	4629      	mov	r1, r5
 80105f4:	4620      	mov	r0, r4
 80105f6:	f001 fdc4 	bl	8012182 <_ZNSt11_Tuple_implILj0EJP37TfLiteBidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	4618      	mov	r0, r3
 80105fe:	3710      	adds	r7, #16
 8010600:	46bd      	mov	sp, r7
 8010602:	bdb0      	pop	{r4, r5, r7, pc}

08010604 <_ZNKSt15__uniq_ptr_implI37TfLiteBidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8010604:	b580      	push	{r7, lr}
 8010606:	b082      	sub	sp, #8
 8010608:	af00      	add	r7, sp, #0
 801060a:	6078      	str	r0, [r7, #4]
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	4618      	mov	r0, r3
 8010610:	f001 fdd5 	bl	80121be <_ZSt3getILj0EJP37TfLiteBidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 8010614:	4603      	mov	r3, r0
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	4618      	mov	r0, r3
 801061a:	3708      	adds	r7, #8
 801061c:	46bd      	mov	sp, r7
 801061e:	bd80      	pop	{r7, pc}

08010620 <_ZSt3getILj0EJP26TfLiteResizeBilinearParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8010620:	b580      	push	{r7, lr}
 8010622:	b082      	sub	sp, #8
 8010624:	af00      	add	r7, sp, #0
 8010626:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	4618      	mov	r0, r3
 801062c:	f001 fdd4 	bl	80121d8 <_ZSt12__get_helperILj0EP26TfLiteResizeBilinearParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8010630:	4603      	mov	r3, r0
 8010632:	4618      	mov	r0, r3
 8010634:	3708      	adds	r7, #8
 8010636:	46bd      	mov	sp, r7
 8010638:	bd80      	pop	{r7, pc}

0801063a <_ZNSt15__uniq_ptr_implI26TfLiteResizeBilinearParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 801063a:	b580      	push	{r7, lr}
 801063c:	b082      	sub	sp, #8
 801063e:	af00      	add	r7, sp, #0
 8010640:	6078      	str	r0, [r7, #4]
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	4618      	mov	r0, r3
 8010646:	f001 fdd3 	bl	80121f0 <_ZSt3getILj1EJP26TfLiteResizeBilinearParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 801064a:	4603      	mov	r3, r0
 801064c:	4618      	mov	r0, r3
 801064e:	3708      	adds	r7, #8
 8010650:	46bd      	mov	sp, r7
 8010652:	bd80      	pop	{r7, pc}

08010654 <_ZSt7forwardIRP26TfLiteResizeBilinearParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010654:	b480      	push	{r7}
 8010656:	b083      	sub	sp, #12
 8010658:	af00      	add	r7, sp, #0
 801065a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	4618      	mov	r0, r3
 8010660:	370c      	adds	r7, #12
 8010662:	46bd      	mov	sp, r7
 8010664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010668:	4770      	bx	lr

0801066a <_ZNSt5tupleIJP26TfLiteResizeBilinearParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 801066a:	b5b0      	push	{r4, r5, r7, lr}
 801066c:	b084      	sub	sp, #16
 801066e:	af00      	add	r7, sp, #0
 8010670:	60f8      	str	r0, [r7, #12]
 8010672:	60b9      	str	r1, [r7, #8]
 8010674:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8010676:	68fc      	ldr	r4, [r7, #12]
 8010678:	68b8      	ldr	r0, [r7, #8]
 801067a:	f7ff ffeb 	bl	8010654 <_ZSt7forwardIRP26TfLiteResizeBilinearParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 801067e:	4605      	mov	r5, r0
 8010680:	6878      	ldr	r0, [r7, #4]
 8010682:	f7fb feda 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8010686:	4603      	mov	r3, r0
 8010688:	461a      	mov	r2, r3
 801068a:	4629      	mov	r1, r5
 801068c:	4620      	mov	r0, r4
 801068e:	f001 fdbc 	bl	801220a <_ZNSt11_Tuple_implILj0EJP26TfLiteResizeBilinearParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	4618      	mov	r0, r3
 8010696:	3710      	adds	r7, #16
 8010698:	46bd      	mov	sp, r7
 801069a:	bdb0      	pop	{r4, r5, r7, pc}

0801069c <_ZNKSt15__uniq_ptr_implI26TfLiteResizeBilinearParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 801069c:	b580      	push	{r7, lr}
 801069e:	b082      	sub	sp, #8
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	6078      	str	r0, [r7, #4]
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	4618      	mov	r0, r3
 80106a8:	f001 fdcd 	bl	8012246 <_ZSt3getILj0EJP26TfLiteResizeBilinearParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 80106ac:	4603      	mov	r3, r0
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	4618      	mov	r0, r3
 80106b2:	3708      	adds	r7, #8
 80106b4:	46bd      	mov	sp, r7
 80106b6:	bd80      	pop	{r7, pc}

080106b8 <_ZSt3getILj0EJP33TfLiteResizeNearestNeighborParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80106b8:	b580      	push	{r7, lr}
 80106ba:	b082      	sub	sp, #8
 80106bc:	af00      	add	r7, sp, #0
 80106be:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	4618      	mov	r0, r3
 80106c4:	f001 fdcc 	bl	8012260 <_ZSt12__get_helperILj0EP33TfLiteResizeNearestNeighborParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80106c8:	4603      	mov	r3, r0
 80106ca:	4618      	mov	r0, r3
 80106cc:	3708      	adds	r7, #8
 80106ce:	46bd      	mov	sp, r7
 80106d0:	bd80      	pop	{r7, pc}

080106d2 <_ZNSt15__uniq_ptr_implI33TfLiteResizeNearestNeighborParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 80106d2:	b580      	push	{r7, lr}
 80106d4:	b082      	sub	sp, #8
 80106d6:	af00      	add	r7, sp, #0
 80106d8:	6078      	str	r0, [r7, #4]
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	4618      	mov	r0, r3
 80106de:	f001 fdcb 	bl	8012278 <_ZSt3getILj1EJP33TfLiteResizeNearestNeighborParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 80106e2:	4603      	mov	r3, r0
 80106e4:	4618      	mov	r0, r3
 80106e6:	3708      	adds	r7, #8
 80106e8:	46bd      	mov	sp, r7
 80106ea:	bd80      	pop	{r7, pc}

080106ec <_ZSt7forwardIRP33TfLiteResizeNearestNeighborParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80106ec:	b480      	push	{r7}
 80106ee:	b083      	sub	sp, #12
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	4618      	mov	r0, r3
 80106f8:	370c      	adds	r7, #12
 80106fa:	46bd      	mov	sp, r7
 80106fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010700:	4770      	bx	lr

08010702 <_ZNSt5tupleIJP33TfLiteResizeNearestNeighborParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 8010702:	b5b0      	push	{r4, r5, r7, lr}
 8010704:	b084      	sub	sp, #16
 8010706:	af00      	add	r7, sp, #0
 8010708:	60f8      	str	r0, [r7, #12]
 801070a:	60b9      	str	r1, [r7, #8]
 801070c:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 801070e:	68fc      	ldr	r4, [r7, #12]
 8010710:	68b8      	ldr	r0, [r7, #8]
 8010712:	f7ff ffeb 	bl	80106ec <_ZSt7forwardIRP33TfLiteResizeNearestNeighborParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8010716:	4605      	mov	r5, r0
 8010718:	6878      	ldr	r0, [r7, #4]
 801071a:	f7fb fe8e 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 801071e:	4603      	mov	r3, r0
 8010720:	461a      	mov	r2, r3
 8010722:	4629      	mov	r1, r5
 8010724:	4620      	mov	r0, r4
 8010726:	f001 fdb4 	bl	8012292 <_ZNSt11_Tuple_implILj0EJP33TfLiteResizeNearestNeighborParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	4618      	mov	r0, r3
 801072e:	3710      	adds	r7, #16
 8010730:	46bd      	mov	sp, r7
 8010732:	bdb0      	pop	{r4, r5, r7, pc}

08010734 <_ZNKSt15__uniq_ptr_implI33TfLiteResizeNearestNeighborParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8010734:	b580      	push	{r7, lr}
 8010736:	b082      	sub	sp, #8
 8010738:	af00      	add	r7, sp, #0
 801073a:	6078      	str	r0, [r7, #4]
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	4618      	mov	r0, r3
 8010740:	f001 fdc5 	bl	80122ce <_ZSt3getILj0EJP33TfLiteResizeNearestNeighborParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 8010744:	4603      	mov	r3, r0
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	4618      	mov	r0, r3
 801074a:	3708      	adds	r7, #8
 801074c:	46bd      	mov	sp, r7
 801074e:	bd80      	pop	{r7, pc}

08010750 <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8010750:	b580      	push	{r7, lr}
 8010752:	b082      	sub	sp, #8
 8010754:	af00      	add	r7, sp, #0
 8010756:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	4618      	mov	r0, r3
 801075c:	f001 fdc4 	bl	80122e8 <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8010760:	4603      	mov	r3, r0
 8010762:	4618      	mov	r0, r3
 8010764:	3708      	adds	r7, #8
 8010766:	46bd      	mov	sp, r7
 8010768:	bd80      	pop	{r7, pc}

0801076a <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 801076a:	b580      	push	{r7, lr}
 801076c:	b082      	sub	sp, #8
 801076e:	af00      	add	r7, sp, #0
 8010770:	6078      	str	r0, [r7, #4]
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	4618      	mov	r0, r3
 8010776:	f001 fdc3 	bl	8012300 <_ZSt3getILj1EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 801077a:	4603      	mov	r3, r0
 801077c:	4618      	mov	r0, r3
 801077e:	3708      	adds	r7, #8
 8010780:	46bd      	mov	sp, r7
 8010782:	bd80      	pop	{r7, pc}

08010784 <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010784:	b480      	push	{r7}
 8010786:	b083      	sub	sp, #12
 8010788:	af00      	add	r7, sp, #0
 801078a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	4618      	mov	r0, r3
 8010790:	370c      	adds	r7, #12
 8010792:	46bd      	mov	sp, r7
 8010794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010798:	4770      	bx	lr

0801079a <_ZNSt5tupleIJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 801079a:	b5b0      	push	{r4, r5, r7, lr}
 801079c:	b084      	sub	sp, #16
 801079e:	af00      	add	r7, sp, #0
 80107a0:	60f8      	str	r0, [r7, #12]
 80107a2:	60b9      	str	r1, [r7, #8]
 80107a4:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 80107a6:	68fc      	ldr	r4, [r7, #12]
 80107a8:	68b8      	ldr	r0, [r7, #8]
 80107aa:	f7ff ffeb 	bl	8010784 <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80107ae:	4605      	mov	r5, r0
 80107b0:	6878      	ldr	r0, [r7, #4]
 80107b2:	f7fb fe42 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80107b6:	4603      	mov	r3, r0
 80107b8:	461a      	mov	r2, r3
 80107ba:	4629      	mov	r1, r5
 80107bc:	4620      	mov	r0, r4
 80107be:	f001 fdac 	bl	801231a <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	4618      	mov	r0, r3
 80107c6:	3710      	adds	r7, #16
 80107c8:	46bd      	mov	sp, r7
 80107ca:	bdb0      	pop	{r4, r5, r7, pc}

080107cc <_ZNKSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80107cc:	b580      	push	{r7, lr}
 80107ce:	b082      	sub	sp, #8
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	4618      	mov	r0, r3
 80107d8:	f001 fdbd 	bl	8012356 <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 80107dc:	4603      	mov	r3, r0
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	4618      	mov	r0, r3
 80107e2:	3708      	adds	r7, #8
 80107e4:	46bd      	mov	sp, r7
 80107e6:	bd80      	pop	{r7, pc}

080107e8 <_ZSt3getILj0EJP20TfLiteSkipGramParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80107e8:	b580      	push	{r7, lr}
 80107ea:	b082      	sub	sp, #8
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	4618      	mov	r0, r3
 80107f4:	f001 fdbc 	bl	8012370 <_ZSt12__get_helperILj0EP20TfLiteSkipGramParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80107f8:	4603      	mov	r3, r0
 80107fa:	4618      	mov	r0, r3
 80107fc:	3708      	adds	r7, #8
 80107fe:	46bd      	mov	sp, r7
 8010800:	bd80      	pop	{r7, pc}

08010802 <_ZNSt15__uniq_ptr_implI20TfLiteSkipGramParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8010802:	b580      	push	{r7, lr}
 8010804:	b082      	sub	sp, #8
 8010806:	af00      	add	r7, sp, #0
 8010808:	6078      	str	r0, [r7, #4]
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	4618      	mov	r0, r3
 801080e:	f001 fdbb 	bl	8012388 <_ZSt3getILj1EJP20TfLiteSkipGramParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8010812:	4603      	mov	r3, r0
 8010814:	4618      	mov	r0, r3
 8010816:	3708      	adds	r7, #8
 8010818:	46bd      	mov	sp, r7
 801081a:	bd80      	pop	{r7, pc}

0801081c <_ZSt7forwardIRP20TfLiteSkipGramParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801081c:	b480      	push	{r7}
 801081e:	b083      	sub	sp, #12
 8010820:	af00      	add	r7, sp, #0
 8010822:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	4618      	mov	r0, r3
 8010828:	370c      	adds	r7, #12
 801082a:	46bd      	mov	sp, r7
 801082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010830:	4770      	bx	lr

08010832 <_ZNSt5tupleIJP20TfLiteSkipGramParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 8010832:	b5b0      	push	{r4, r5, r7, lr}
 8010834:	b084      	sub	sp, #16
 8010836:	af00      	add	r7, sp, #0
 8010838:	60f8      	str	r0, [r7, #12]
 801083a:	60b9      	str	r1, [r7, #8]
 801083c:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 801083e:	68fc      	ldr	r4, [r7, #12]
 8010840:	68b8      	ldr	r0, [r7, #8]
 8010842:	f7ff ffeb 	bl	801081c <_ZSt7forwardIRP20TfLiteSkipGramParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8010846:	4605      	mov	r5, r0
 8010848:	6878      	ldr	r0, [r7, #4]
 801084a:	f7fb fdf6 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 801084e:	4603      	mov	r3, r0
 8010850:	461a      	mov	r2, r3
 8010852:	4629      	mov	r1, r5
 8010854:	4620      	mov	r0, r4
 8010856:	f001 fda4 	bl	80123a2 <_ZNSt11_Tuple_implILj0EJP20TfLiteSkipGramParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	4618      	mov	r0, r3
 801085e:	3710      	adds	r7, #16
 8010860:	46bd      	mov	sp, r7
 8010862:	bdb0      	pop	{r4, r5, r7, pc}

08010864 <_ZNKSt15__uniq_ptr_implI20TfLiteSkipGramParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8010864:	b580      	push	{r7, lr}
 8010866:	b082      	sub	sp, #8
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	4618      	mov	r0, r3
 8010870:	f001 fdb5 	bl	80123de <_ZSt3getILj0EJP20TfLiteSkipGramParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 8010874:	4603      	mov	r3, r0
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	4618      	mov	r0, r3
 801087a:	3708      	adds	r7, #8
 801087c:	46bd      	mov	sp, r7
 801087e:	bd80      	pop	{r7, pc}

08010880 <_ZSt3getILj0EJP24TfLiteSpaceToDepthParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8010880:	b580      	push	{r7, lr}
 8010882:	b082      	sub	sp, #8
 8010884:	af00      	add	r7, sp, #0
 8010886:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	4618      	mov	r0, r3
 801088c:	f001 fdb4 	bl	80123f8 <_ZSt12__get_helperILj0EP24TfLiteSpaceToDepthParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8010890:	4603      	mov	r3, r0
 8010892:	4618      	mov	r0, r3
 8010894:	3708      	adds	r7, #8
 8010896:	46bd      	mov	sp, r7
 8010898:	bd80      	pop	{r7, pc}

0801089a <_ZNSt15__uniq_ptr_implI24TfLiteSpaceToDepthParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 801089a:	b580      	push	{r7, lr}
 801089c:	b082      	sub	sp, #8
 801089e:	af00      	add	r7, sp, #0
 80108a0:	6078      	str	r0, [r7, #4]
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	4618      	mov	r0, r3
 80108a6:	f001 fdb3 	bl	8012410 <_ZSt3getILj1EJP24TfLiteSpaceToDepthParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 80108aa:	4603      	mov	r3, r0
 80108ac:	4618      	mov	r0, r3
 80108ae:	3708      	adds	r7, #8
 80108b0:	46bd      	mov	sp, r7
 80108b2:	bd80      	pop	{r7, pc}

080108b4 <_ZSt7forwardIRP24TfLiteSpaceToDepthParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80108b4:	b480      	push	{r7}
 80108b6:	b083      	sub	sp, #12
 80108b8:	af00      	add	r7, sp, #0
 80108ba:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	4618      	mov	r0, r3
 80108c0:	370c      	adds	r7, #12
 80108c2:	46bd      	mov	sp, r7
 80108c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c8:	4770      	bx	lr

080108ca <_ZNSt5tupleIJP24TfLiteSpaceToDepthParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 80108ca:	b5b0      	push	{r4, r5, r7, lr}
 80108cc:	b084      	sub	sp, #16
 80108ce:	af00      	add	r7, sp, #0
 80108d0:	60f8      	str	r0, [r7, #12]
 80108d2:	60b9      	str	r1, [r7, #8]
 80108d4:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 80108d6:	68fc      	ldr	r4, [r7, #12]
 80108d8:	68b8      	ldr	r0, [r7, #8]
 80108da:	f7ff ffeb 	bl	80108b4 <_ZSt7forwardIRP24TfLiteSpaceToDepthParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80108de:	4605      	mov	r5, r0
 80108e0:	6878      	ldr	r0, [r7, #4]
 80108e2:	f7fb fdaa 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80108e6:	4603      	mov	r3, r0
 80108e8:	461a      	mov	r2, r3
 80108ea:	4629      	mov	r1, r5
 80108ec:	4620      	mov	r0, r4
 80108ee:	f001 fd9c 	bl	801242a <_ZNSt11_Tuple_implILj0EJP24TfLiteSpaceToDepthParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	4618      	mov	r0, r3
 80108f6:	3710      	adds	r7, #16
 80108f8:	46bd      	mov	sp, r7
 80108fa:	bdb0      	pop	{r4, r5, r7, pc}

080108fc <_ZNKSt15__uniq_ptr_implI24TfLiteSpaceToDepthParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b082      	sub	sp, #8
 8010900:	af00      	add	r7, sp, #0
 8010902:	6078      	str	r0, [r7, #4]
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	4618      	mov	r0, r3
 8010908:	f001 fdad 	bl	8012466 <_ZSt3getILj0EJP24TfLiteSpaceToDepthParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 801090c:	4603      	mov	r3, r0
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	4618      	mov	r0, r3
 8010912:	3708      	adds	r7, #8
 8010914:	46bd      	mov	sp, r7
 8010916:	bd80      	pop	{r7, pc}

08010918 <_ZSt3getILj0EJP24TfLiteDepthToSpaceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8010918:	b580      	push	{r7, lr}
 801091a:	b082      	sub	sp, #8
 801091c:	af00      	add	r7, sp, #0
 801091e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	4618      	mov	r0, r3
 8010924:	f001 fdac 	bl	8012480 <_ZSt12__get_helperILj0EP24TfLiteDepthToSpaceParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8010928:	4603      	mov	r3, r0
 801092a:	4618      	mov	r0, r3
 801092c:	3708      	adds	r7, #8
 801092e:	46bd      	mov	sp, r7
 8010930:	bd80      	pop	{r7, pc}

08010932 <_ZNSt15__uniq_ptr_implI24TfLiteDepthToSpaceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8010932:	b580      	push	{r7, lr}
 8010934:	b082      	sub	sp, #8
 8010936:	af00      	add	r7, sp, #0
 8010938:	6078      	str	r0, [r7, #4]
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	4618      	mov	r0, r3
 801093e:	f001 fdab 	bl	8012498 <_ZSt3getILj1EJP24TfLiteDepthToSpaceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8010942:	4603      	mov	r3, r0
 8010944:	4618      	mov	r0, r3
 8010946:	3708      	adds	r7, #8
 8010948:	46bd      	mov	sp, r7
 801094a:	bd80      	pop	{r7, pc}

0801094c <_ZSt7forwardIRP24TfLiteDepthToSpaceParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801094c:	b480      	push	{r7}
 801094e:	b083      	sub	sp, #12
 8010950:	af00      	add	r7, sp, #0
 8010952:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	4618      	mov	r0, r3
 8010958:	370c      	adds	r7, #12
 801095a:	46bd      	mov	sp, r7
 801095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010960:	4770      	bx	lr

08010962 <_ZNSt5tupleIJP24TfLiteDepthToSpaceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 8010962:	b5b0      	push	{r4, r5, r7, lr}
 8010964:	b084      	sub	sp, #16
 8010966:	af00      	add	r7, sp, #0
 8010968:	60f8      	str	r0, [r7, #12]
 801096a:	60b9      	str	r1, [r7, #8]
 801096c:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 801096e:	68fc      	ldr	r4, [r7, #12]
 8010970:	68b8      	ldr	r0, [r7, #8]
 8010972:	f7ff ffeb 	bl	801094c <_ZSt7forwardIRP24TfLiteDepthToSpaceParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8010976:	4605      	mov	r5, r0
 8010978:	6878      	ldr	r0, [r7, #4]
 801097a:	f7fb fd5e 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 801097e:	4603      	mov	r3, r0
 8010980:	461a      	mov	r2, r3
 8010982:	4629      	mov	r1, r5
 8010984:	4620      	mov	r0, r4
 8010986:	f001 fd94 	bl	80124b2 <_ZNSt11_Tuple_implILj0EJP24TfLiteDepthToSpaceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	4618      	mov	r0, r3
 801098e:	3710      	adds	r7, #16
 8010990:	46bd      	mov	sp, r7
 8010992:	bdb0      	pop	{r4, r5, r7, pc}

08010994 <_ZNKSt15__uniq_ptr_implI24TfLiteDepthToSpaceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8010994:	b580      	push	{r7, lr}
 8010996:	b082      	sub	sp, #8
 8010998:	af00      	add	r7, sp, #0
 801099a:	6078      	str	r0, [r7, #4]
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	4618      	mov	r0, r3
 80109a0:	f001 fda5 	bl	80124ee <_ZSt3getILj0EJP24TfLiteDepthToSpaceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 80109a4:	4603      	mov	r3, r0
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	4618      	mov	r0, r3
 80109aa:	3708      	adds	r7, #8
 80109ac:	46bd      	mov	sp, r7
 80109ae:	bd80      	pop	{r7, pc}

080109b0 <_ZSt3getILj0EJP18TfLiteGatherParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80109b0:	b580      	push	{r7, lr}
 80109b2:	b082      	sub	sp, #8
 80109b4:	af00      	add	r7, sp, #0
 80109b6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	4618      	mov	r0, r3
 80109bc:	f001 fda4 	bl	8012508 <_ZSt12__get_helperILj0EP18TfLiteGatherParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80109c0:	4603      	mov	r3, r0
 80109c2:	4618      	mov	r0, r3
 80109c4:	3708      	adds	r7, #8
 80109c6:	46bd      	mov	sp, r7
 80109c8:	bd80      	pop	{r7, pc}

080109ca <_ZNSt15__uniq_ptr_implI18TfLiteGatherParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 80109ca:	b580      	push	{r7, lr}
 80109cc:	b082      	sub	sp, #8
 80109ce:	af00      	add	r7, sp, #0
 80109d0:	6078      	str	r0, [r7, #4]
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	4618      	mov	r0, r3
 80109d6:	f001 fda3 	bl	8012520 <_ZSt3getILj1EJP18TfLiteGatherParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 80109da:	4603      	mov	r3, r0
 80109dc:	4618      	mov	r0, r3
 80109de:	3708      	adds	r7, #8
 80109e0:	46bd      	mov	sp, r7
 80109e2:	bd80      	pop	{r7, pc}

080109e4 <_ZSt7forwardIRP18TfLiteGatherParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80109e4:	b480      	push	{r7}
 80109e6:	b083      	sub	sp, #12
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	4618      	mov	r0, r3
 80109f0:	370c      	adds	r7, #12
 80109f2:	46bd      	mov	sp, r7
 80109f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f8:	4770      	bx	lr

080109fa <_ZNSt5tupleIJP18TfLiteGatherParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 80109fa:	b5b0      	push	{r4, r5, r7, lr}
 80109fc:	b084      	sub	sp, #16
 80109fe:	af00      	add	r7, sp, #0
 8010a00:	60f8      	str	r0, [r7, #12]
 8010a02:	60b9      	str	r1, [r7, #8]
 8010a04:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8010a06:	68fc      	ldr	r4, [r7, #12]
 8010a08:	68b8      	ldr	r0, [r7, #8]
 8010a0a:	f7ff ffeb 	bl	80109e4 <_ZSt7forwardIRP18TfLiteGatherParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8010a0e:	4605      	mov	r5, r0
 8010a10:	6878      	ldr	r0, [r7, #4]
 8010a12:	f7fb fd12 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8010a16:	4603      	mov	r3, r0
 8010a18:	461a      	mov	r2, r3
 8010a1a:	4629      	mov	r1, r5
 8010a1c:	4620      	mov	r0, r4
 8010a1e:	f001 fd8c 	bl	801253a <_ZNSt11_Tuple_implILj0EJP18TfLiteGatherParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	4618      	mov	r0, r3
 8010a26:	3710      	adds	r7, #16
 8010a28:	46bd      	mov	sp, r7
 8010a2a:	bdb0      	pop	{r4, r5, r7, pc}

08010a2c <_ZNKSt15__uniq_ptr_implI18TfLiteGatherParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8010a2c:	b580      	push	{r7, lr}
 8010a2e:	b082      	sub	sp, #8
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	6078      	str	r0, [r7, #4]
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	4618      	mov	r0, r3
 8010a38:	f001 fd9d 	bl	8012576 <_ZSt3getILj0EJP18TfLiteGatherParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 8010a3c:	4603      	mov	r3, r0
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	4618      	mov	r0, r3
 8010a42:	3708      	adds	r7, #8
 8010a44:	46bd      	mov	sp, r7
 8010a46:	bd80      	pop	{r7, pc}

08010a48 <_ZSt3getILj0EJP19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8010a48:	b580      	push	{r7, lr}
 8010a4a:	b082      	sub	sp, #8
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	4618      	mov	r0, r3
 8010a54:	f001 fd9c 	bl	8012590 <_ZSt12__get_helperILj0EP19TfLiteReducerParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8010a58:	4603      	mov	r3, r0
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	3708      	adds	r7, #8
 8010a5e:	46bd      	mov	sp, r7
 8010a60:	bd80      	pop	{r7, pc}

08010a62 <_ZNSt15__uniq_ptr_implI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8010a62:	b580      	push	{r7, lr}
 8010a64:	b082      	sub	sp, #8
 8010a66:	af00      	add	r7, sp, #0
 8010a68:	6078      	str	r0, [r7, #4]
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	f001 fd9b 	bl	80125a8 <_ZSt3getILj1EJP19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8010a72:	4603      	mov	r3, r0
 8010a74:	4618      	mov	r0, r3
 8010a76:	3708      	adds	r7, #8
 8010a78:	46bd      	mov	sp, r7
 8010a7a:	bd80      	pop	{r7, pc}

08010a7c <_ZSt7forwardIRP19TfLiteReducerParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010a7c:	b480      	push	{r7}
 8010a7e:	b083      	sub	sp, #12
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	4618      	mov	r0, r3
 8010a88:	370c      	adds	r7, #12
 8010a8a:	46bd      	mov	sp, r7
 8010a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a90:	4770      	bx	lr

08010a92 <_ZNSt5tupleIJP19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 8010a92:	b5b0      	push	{r4, r5, r7, lr}
 8010a94:	b084      	sub	sp, #16
 8010a96:	af00      	add	r7, sp, #0
 8010a98:	60f8      	str	r0, [r7, #12]
 8010a9a:	60b9      	str	r1, [r7, #8]
 8010a9c:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8010a9e:	68fc      	ldr	r4, [r7, #12]
 8010aa0:	68b8      	ldr	r0, [r7, #8]
 8010aa2:	f7ff ffeb 	bl	8010a7c <_ZSt7forwardIRP19TfLiteReducerParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8010aa6:	4605      	mov	r5, r0
 8010aa8:	6878      	ldr	r0, [r7, #4]
 8010aaa:	f7fb fcc6 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8010aae:	4603      	mov	r3, r0
 8010ab0:	461a      	mov	r2, r3
 8010ab2:	4629      	mov	r1, r5
 8010ab4:	4620      	mov	r0, r4
 8010ab6:	f001 fd84 	bl	80125c2 <_ZNSt11_Tuple_implILj0EJP19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	4618      	mov	r0, r3
 8010abe:	3710      	adds	r7, #16
 8010ac0:	46bd      	mov	sp, r7
 8010ac2:	bdb0      	pop	{r4, r5, r7, pc}

08010ac4 <_ZNKSt15__uniq_ptr_implI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b082      	sub	sp, #8
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	6078      	str	r0, [r7, #4]
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	4618      	mov	r0, r3
 8010ad0:	f001 fd95 	bl	80125fe <_ZSt3getILj0EJP19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 8010ad4:	4603      	mov	r3, r0
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	4618      	mov	r0, r3
 8010ada:	3708      	adds	r7, #8
 8010adc:	46bd      	mov	sp, r7
 8010ade:	bd80      	pop	{r7, pc}

08010ae0 <_ZSt3getILj0EJP17TfLiteSplitParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8010ae0:	b580      	push	{r7, lr}
 8010ae2:	b082      	sub	sp, #8
 8010ae4:	af00      	add	r7, sp, #0
 8010ae6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	4618      	mov	r0, r3
 8010aec:	f001 fd94 	bl	8012618 <_ZSt12__get_helperILj0EP17TfLiteSplitParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8010af0:	4603      	mov	r3, r0
 8010af2:	4618      	mov	r0, r3
 8010af4:	3708      	adds	r7, #8
 8010af6:	46bd      	mov	sp, r7
 8010af8:	bd80      	pop	{r7, pc}

08010afa <_ZNSt15__uniq_ptr_implI17TfLiteSplitParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8010afa:	b580      	push	{r7, lr}
 8010afc:	b082      	sub	sp, #8
 8010afe:	af00      	add	r7, sp, #0
 8010b00:	6078      	str	r0, [r7, #4]
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	4618      	mov	r0, r3
 8010b06:	f001 fd93 	bl	8012630 <_ZSt3getILj1EJP17TfLiteSplitParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8010b0a:	4603      	mov	r3, r0
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	3708      	adds	r7, #8
 8010b10:	46bd      	mov	sp, r7
 8010b12:	bd80      	pop	{r7, pc}

08010b14 <_ZSt7forwardIRP17TfLiteSplitParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010b14:	b480      	push	{r7}
 8010b16:	b083      	sub	sp, #12
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	4618      	mov	r0, r3
 8010b20:	370c      	adds	r7, #12
 8010b22:	46bd      	mov	sp, r7
 8010b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b28:	4770      	bx	lr

08010b2a <_ZNSt5tupleIJP17TfLiteSplitParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 8010b2a:	b5b0      	push	{r4, r5, r7, lr}
 8010b2c:	b084      	sub	sp, #16
 8010b2e:	af00      	add	r7, sp, #0
 8010b30:	60f8      	str	r0, [r7, #12]
 8010b32:	60b9      	str	r1, [r7, #8]
 8010b34:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8010b36:	68fc      	ldr	r4, [r7, #12]
 8010b38:	68b8      	ldr	r0, [r7, #8]
 8010b3a:	f7ff ffeb 	bl	8010b14 <_ZSt7forwardIRP17TfLiteSplitParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8010b3e:	4605      	mov	r5, r0
 8010b40:	6878      	ldr	r0, [r7, #4]
 8010b42:	f7fb fc7a 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8010b46:	4603      	mov	r3, r0
 8010b48:	461a      	mov	r2, r3
 8010b4a:	4629      	mov	r1, r5
 8010b4c:	4620      	mov	r0, r4
 8010b4e:	f001 fd7c 	bl	801264a <_ZNSt11_Tuple_implILj0EJP17TfLiteSplitParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	4618      	mov	r0, r3
 8010b56:	3710      	adds	r7, #16
 8010b58:	46bd      	mov	sp, r7
 8010b5a:	bdb0      	pop	{r4, r5, r7, pc}

08010b5c <_ZNKSt15__uniq_ptr_implI17TfLiteSplitParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8010b5c:	b580      	push	{r7, lr}
 8010b5e:	b082      	sub	sp, #8
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	6078      	str	r0, [r7, #4]
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	4618      	mov	r0, r3
 8010b68:	f001 fd8d 	bl	8012686 <_ZSt3getILj0EJP17TfLiteSplitParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 8010b6c:	4603      	mov	r3, r0
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	4618      	mov	r0, r3
 8010b72:	3708      	adds	r7, #8
 8010b74:	46bd      	mov	sp, r7
 8010b76:	bd80      	pop	{r7, pc}

08010b78 <_ZSt3getILj0EJP19TfLiteSqueezeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b082      	sub	sp, #8
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	4618      	mov	r0, r3
 8010b84:	f001 fd8c 	bl	80126a0 <_ZSt12__get_helperILj0EP19TfLiteSqueezeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8010b88:	4603      	mov	r3, r0
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	3708      	adds	r7, #8
 8010b8e:	46bd      	mov	sp, r7
 8010b90:	bd80      	pop	{r7, pc}

08010b92 <_ZNSt15__uniq_ptr_implI19TfLiteSqueezeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8010b92:	b580      	push	{r7, lr}
 8010b94:	b082      	sub	sp, #8
 8010b96:	af00      	add	r7, sp, #0
 8010b98:	6078      	str	r0, [r7, #4]
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	f001 fd8b 	bl	80126b8 <_ZSt3getILj1EJP19TfLiteSqueezeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8010ba2:	4603      	mov	r3, r0
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	3708      	adds	r7, #8
 8010ba8:	46bd      	mov	sp, r7
 8010baa:	bd80      	pop	{r7, pc}

08010bac <_ZSt7forwardIRP19TfLiteSqueezeParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010bac:	b480      	push	{r7}
 8010bae:	b083      	sub	sp, #12
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	370c      	adds	r7, #12
 8010bba:	46bd      	mov	sp, r7
 8010bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc0:	4770      	bx	lr

08010bc2 <_ZNSt5tupleIJP19TfLiteSqueezeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 8010bc2:	b5b0      	push	{r4, r5, r7, lr}
 8010bc4:	b084      	sub	sp, #16
 8010bc6:	af00      	add	r7, sp, #0
 8010bc8:	60f8      	str	r0, [r7, #12]
 8010bca:	60b9      	str	r1, [r7, #8]
 8010bcc:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8010bce:	68fc      	ldr	r4, [r7, #12]
 8010bd0:	68b8      	ldr	r0, [r7, #8]
 8010bd2:	f7ff ffeb 	bl	8010bac <_ZSt7forwardIRP19TfLiteSqueezeParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8010bd6:	4605      	mov	r5, r0
 8010bd8:	6878      	ldr	r0, [r7, #4]
 8010bda:	f7fb fc2e 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8010bde:	4603      	mov	r3, r0
 8010be0:	461a      	mov	r2, r3
 8010be2:	4629      	mov	r1, r5
 8010be4:	4620      	mov	r0, r4
 8010be6:	f001 fd74 	bl	80126d2 <_ZNSt11_Tuple_implILj0EJP19TfLiteSqueezeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	4618      	mov	r0, r3
 8010bee:	3710      	adds	r7, #16
 8010bf0:	46bd      	mov	sp, r7
 8010bf2:	bdb0      	pop	{r4, r5, r7, pc}

08010bf4 <_ZNKSt15__uniq_ptr_implI19TfLiteSqueezeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8010bf4:	b580      	push	{r7, lr}
 8010bf6:	b082      	sub	sp, #8
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	6078      	str	r0, [r7, #4]
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	4618      	mov	r0, r3
 8010c00:	f001 fd85 	bl	801270e <_ZSt3getILj0EJP19TfLiteSqueezeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 8010c04:	4603      	mov	r3, r0
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	4618      	mov	r0, r3
 8010c0a:	3708      	adds	r7, #8
 8010c0c:	46bd      	mov	sp, r7
 8010c0e:	bd80      	pop	{r7, pc}

08010c10 <_ZSt3getILj0EJP24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8010c10:	b580      	push	{r7, lr}
 8010c12:	b082      	sub	sp, #8
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	f001 fd84 	bl	8012728 <_ZSt12__get_helperILj0EP24TfLiteStridedSliceParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8010c20:	4603      	mov	r3, r0
 8010c22:	4618      	mov	r0, r3
 8010c24:	3708      	adds	r7, #8
 8010c26:	46bd      	mov	sp, r7
 8010c28:	bd80      	pop	{r7, pc}

08010c2a <_ZNSt15__uniq_ptr_implI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8010c2a:	b580      	push	{r7, lr}
 8010c2c:	b082      	sub	sp, #8
 8010c2e:	af00      	add	r7, sp, #0
 8010c30:	6078      	str	r0, [r7, #4]
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	4618      	mov	r0, r3
 8010c36:	f001 fd83 	bl	8012740 <_ZSt3getILj1EJP24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8010c3a:	4603      	mov	r3, r0
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	3708      	adds	r7, #8
 8010c40:	46bd      	mov	sp, r7
 8010c42:	bd80      	pop	{r7, pc}

08010c44 <_ZSt7forwardIRP24TfLiteStridedSliceParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010c44:	b480      	push	{r7}
 8010c46:	b083      	sub	sp, #12
 8010c48:	af00      	add	r7, sp, #0
 8010c4a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	4618      	mov	r0, r3
 8010c50:	370c      	adds	r7, #12
 8010c52:	46bd      	mov	sp, r7
 8010c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c58:	4770      	bx	lr

08010c5a <_ZNSt5tupleIJP24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 8010c5a:	b5b0      	push	{r4, r5, r7, lr}
 8010c5c:	b084      	sub	sp, #16
 8010c5e:	af00      	add	r7, sp, #0
 8010c60:	60f8      	str	r0, [r7, #12]
 8010c62:	60b9      	str	r1, [r7, #8]
 8010c64:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8010c66:	68fc      	ldr	r4, [r7, #12]
 8010c68:	68b8      	ldr	r0, [r7, #8]
 8010c6a:	f7ff ffeb 	bl	8010c44 <_ZSt7forwardIRP24TfLiteStridedSliceParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8010c6e:	4605      	mov	r5, r0
 8010c70:	6878      	ldr	r0, [r7, #4]
 8010c72:	f7fb fbe2 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8010c76:	4603      	mov	r3, r0
 8010c78:	461a      	mov	r2, r3
 8010c7a:	4629      	mov	r1, r5
 8010c7c:	4620      	mov	r0, r4
 8010c7e:	f001 fd6c 	bl	801275a <_ZNSt11_Tuple_implILj0EJP24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	4618      	mov	r0, r3
 8010c86:	3710      	adds	r7, #16
 8010c88:	46bd      	mov	sp, r7
 8010c8a:	bdb0      	pop	{r4, r5, r7, pc}

08010c8c <_ZNKSt15__uniq_ptr_implI24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8010c8c:	b580      	push	{r7, lr}
 8010c8e:	b082      	sub	sp, #8
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	6078      	str	r0, [r7, #4]
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	4618      	mov	r0, r3
 8010c98:	f001 fd7d 	bl	8012796 <_ZSt3getILj0EJP24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 8010c9c:	4603      	mov	r3, r0
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	3708      	adds	r7, #8
 8010ca4:	46bd      	mov	sp, r7
 8010ca6:	bd80      	pop	{r7, pc}

08010ca8 <_ZSt3getILj0EJP18TfLiteArgMaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b082      	sub	sp, #8
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	f001 fd7c 	bl	80127b0 <_ZSt12__get_helperILj0EP18TfLiteArgMaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8010cb8:	4603      	mov	r3, r0
 8010cba:	4618      	mov	r0, r3
 8010cbc:	3708      	adds	r7, #8
 8010cbe:	46bd      	mov	sp, r7
 8010cc0:	bd80      	pop	{r7, pc}

08010cc2 <_ZNSt15__uniq_ptr_implI18TfLiteArgMaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8010cc2:	b580      	push	{r7, lr}
 8010cc4:	b082      	sub	sp, #8
 8010cc6:	af00      	add	r7, sp, #0
 8010cc8:	6078      	str	r0, [r7, #4]
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	4618      	mov	r0, r3
 8010cce:	f001 fd7b 	bl	80127c8 <_ZSt3getILj1EJP18TfLiteArgMaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8010cd2:	4603      	mov	r3, r0
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	3708      	adds	r7, #8
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	bd80      	pop	{r7, pc}

08010cdc <_ZSt7forwardIRP18TfLiteArgMaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010cdc:	b480      	push	{r7}
 8010cde:	b083      	sub	sp, #12
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	4618      	mov	r0, r3
 8010ce8:	370c      	adds	r7, #12
 8010cea:	46bd      	mov	sp, r7
 8010cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf0:	4770      	bx	lr

08010cf2 <_ZNSt5tupleIJP18TfLiteArgMaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 8010cf2:	b5b0      	push	{r4, r5, r7, lr}
 8010cf4:	b084      	sub	sp, #16
 8010cf6:	af00      	add	r7, sp, #0
 8010cf8:	60f8      	str	r0, [r7, #12]
 8010cfa:	60b9      	str	r1, [r7, #8]
 8010cfc:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8010cfe:	68fc      	ldr	r4, [r7, #12]
 8010d00:	68b8      	ldr	r0, [r7, #8]
 8010d02:	f7ff ffeb 	bl	8010cdc <_ZSt7forwardIRP18TfLiteArgMaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8010d06:	4605      	mov	r5, r0
 8010d08:	6878      	ldr	r0, [r7, #4]
 8010d0a:	f7fb fb96 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8010d0e:	4603      	mov	r3, r0
 8010d10:	461a      	mov	r2, r3
 8010d12:	4629      	mov	r1, r5
 8010d14:	4620      	mov	r0, r4
 8010d16:	f001 fd64 	bl	80127e2 <_ZNSt11_Tuple_implILj0EJP18TfLiteArgMaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	3710      	adds	r7, #16
 8010d20:	46bd      	mov	sp, r7
 8010d22:	bdb0      	pop	{r4, r5, r7, pc}

08010d24 <_ZNKSt15__uniq_ptr_implI18TfLiteArgMaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8010d24:	b580      	push	{r7, lr}
 8010d26:	b082      	sub	sp, #8
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	6078      	str	r0, [r7, #4]
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	4618      	mov	r0, r3
 8010d30:	f001 fd75 	bl	801281e <_ZSt3getILj0EJP18TfLiteArgMaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 8010d34:	4603      	mov	r3, r0
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	4618      	mov	r0, r3
 8010d3a:	3708      	adds	r7, #8
 8010d3c:	46bd      	mov	sp, r7
 8010d3e:	bd80      	pop	{r7, pc}

08010d40 <_ZSt3getILj0EJP18TfLiteArgMinParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8010d40:	b580      	push	{r7, lr}
 8010d42:	b082      	sub	sp, #8
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	f001 fd74 	bl	8012838 <_ZSt12__get_helperILj0EP18TfLiteArgMinParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8010d50:	4603      	mov	r3, r0
 8010d52:	4618      	mov	r0, r3
 8010d54:	3708      	adds	r7, #8
 8010d56:	46bd      	mov	sp, r7
 8010d58:	bd80      	pop	{r7, pc}

08010d5a <_ZNSt15__uniq_ptr_implI18TfLiteArgMinParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8010d5a:	b580      	push	{r7, lr}
 8010d5c:	b082      	sub	sp, #8
 8010d5e:	af00      	add	r7, sp, #0
 8010d60:	6078      	str	r0, [r7, #4]
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	4618      	mov	r0, r3
 8010d66:	f001 fd73 	bl	8012850 <_ZSt3getILj1EJP18TfLiteArgMinParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8010d6a:	4603      	mov	r3, r0
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	3708      	adds	r7, #8
 8010d70:	46bd      	mov	sp, r7
 8010d72:	bd80      	pop	{r7, pc}

08010d74 <_ZSt7forwardIRP18TfLiteArgMinParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010d74:	b480      	push	{r7}
 8010d76:	b083      	sub	sp, #12
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	4618      	mov	r0, r3
 8010d80:	370c      	adds	r7, #12
 8010d82:	46bd      	mov	sp, r7
 8010d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d88:	4770      	bx	lr

08010d8a <_ZNSt5tupleIJP18TfLiteArgMinParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 8010d8a:	b5b0      	push	{r4, r5, r7, lr}
 8010d8c:	b084      	sub	sp, #16
 8010d8e:	af00      	add	r7, sp, #0
 8010d90:	60f8      	str	r0, [r7, #12]
 8010d92:	60b9      	str	r1, [r7, #8]
 8010d94:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8010d96:	68fc      	ldr	r4, [r7, #12]
 8010d98:	68b8      	ldr	r0, [r7, #8]
 8010d9a:	f7ff ffeb 	bl	8010d74 <_ZSt7forwardIRP18TfLiteArgMinParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8010d9e:	4605      	mov	r5, r0
 8010da0:	6878      	ldr	r0, [r7, #4]
 8010da2:	f7fb fb4a 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8010da6:	4603      	mov	r3, r0
 8010da8:	461a      	mov	r2, r3
 8010daa:	4629      	mov	r1, r5
 8010dac:	4620      	mov	r0, r4
 8010dae:	f001 fd5c 	bl	801286a <_ZNSt11_Tuple_implILj0EJP18TfLiteArgMinParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	4618      	mov	r0, r3
 8010db6:	3710      	adds	r7, #16
 8010db8:	46bd      	mov	sp, r7
 8010dba:	bdb0      	pop	{r4, r5, r7, pc}

08010dbc <_ZNKSt15__uniq_ptr_implI18TfLiteArgMinParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8010dbc:	b580      	push	{r7, lr}
 8010dbe:	b082      	sub	sp, #8
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	6078      	str	r0, [r7, #4]
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	f001 fd6d 	bl	80128a6 <_ZSt3getILj0EJP18TfLiteArgMinParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 8010dcc:	4603      	mov	r3, r0
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	4618      	mov	r0, r3
 8010dd2:	3708      	adds	r7, #8
 8010dd4:	46bd      	mov	sp, r7
 8010dd6:	bd80      	pop	{r7, pc}

08010dd8 <_ZSt3getILj0EJP25TfLiteTransposeConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8010dd8:	b580      	push	{r7, lr}
 8010dda:	b082      	sub	sp, #8
 8010ddc:	af00      	add	r7, sp, #0
 8010dde:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	4618      	mov	r0, r3
 8010de4:	f001 fd6c 	bl	80128c0 <_ZSt12__get_helperILj0EP25TfLiteTransposeConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8010de8:	4603      	mov	r3, r0
 8010dea:	4618      	mov	r0, r3
 8010dec:	3708      	adds	r7, #8
 8010dee:	46bd      	mov	sp, r7
 8010df0:	bd80      	pop	{r7, pc}

08010df2 <_ZNSt15__uniq_ptr_implI25TfLiteTransposeConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8010df2:	b580      	push	{r7, lr}
 8010df4:	b082      	sub	sp, #8
 8010df6:	af00      	add	r7, sp, #0
 8010df8:	6078      	str	r0, [r7, #4]
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	f001 fd6b 	bl	80128d8 <_ZSt3getILj1EJP25TfLiteTransposeConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8010e02:	4603      	mov	r3, r0
 8010e04:	4618      	mov	r0, r3
 8010e06:	3708      	adds	r7, #8
 8010e08:	46bd      	mov	sp, r7
 8010e0a:	bd80      	pop	{r7, pc}

08010e0c <_ZSt7forwardIRP25TfLiteTransposeConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010e0c:	b480      	push	{r7}
 8010e0e:	b083      	sub	sp, #12
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	4618      	mov	r0, r3
 8010e18:	370c      	adds	r7, #12
 8010e1a:	46bd      	mov	sp, r7
 8010e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e20:	4770      	bx	lr

08010e22 <_ZNSt5tupleIJP25TfLiteTransposeConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 8010e22:	b5b0      	push	{r4, r5, r7, lr}
 8010e24:	b084      	sub	sp, #16
 8010e26:	af00      	add	r7, sp, #0
 8010e28:	60f8      	str	r0, [r7, #12]
 8010e2a:	60b9      	str	r1, [r7, #8]
 8010e2c:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8010e2e:	68fc      	ldr	r4, [r7, #12]
 8010e30:	68b8      	ldr	r0, [r7, #8]
 8010e32:	f7ff ffeb 	bl	8010e0c <_ZSt7forwardIRP25TfLiteTransposeConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8010e36:	4605      	mov	r5, r0
 8010e38:	6878      	ldr	r0, [r7, #4]
 8010e3a:	f7fb fafe 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8010e3e:	4603      	mov	r3, r0
 8010e40:	461a      	mov	r2, r3
 8010e42:	4629      	mov	r1, r5
 8010e44:	4620      	mov	r0, r4
 8010e46:	f001 fd54 	bl	80128f2 <_ZNSt11_Tuple_implILj0EJP25TfLiteTransposeConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	3710      	adds	r7, #16
 8010e50:	46bd      	mov	sp, r7
 8010e52:	bdb0      	pop	{r4, r5, r7, pc}

08010e54 <_ZNKSt15__uniq_ptr_implI25TfLiteTransposeConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8010e54:	b580      	push	{r7, lr}
 8010e56:	b082      	sub	sp, #8
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	6078      	str	r0, [r7, #4]
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	4618      	mov	r0, r3
 8010e60:	f001 fd65 	bl	801292e <_ZSt3getILj0EJP25TfLiteTransposeConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 8010e64:	4603      	mov	r3, r0
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	4618      	mov	r0, r3
 8010e6a:	3708      	adds	r7, #8
 8010e6c:	46bd      	mov	sp, r7
 8010e6e:	bd80      	pop	{r7, pc}

08010e70 <_ZSt3getILj0EJP25TfLiteSparseToDenseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8010e70:	b580      	push	{r7, lr}
 8010e72:	b082      	sub	sp, #8
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	4618      	mov	r0, r3
 8010e7c:	f001 fd64 	bl	8012948 <_ZSt12__get_helperILj0EP25TfLiteSparseToDenseParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8010e80:	4603      	mov	r3, r0
 8010e82:	4618      	mov	r0, r3
 8010e84:	3708      	adds	r7, #8
 8010e86:	46bd      	mov	sp, r7
 8010e88:	bd80      	pop	{r7, pc}

08010e8a <_ZNSt15__uniq_ptr_implI25TfLiteSparseToDenseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8010e8a:	b580      	push	{r7, lr}
 8010e8c:	b082      	sub	sp, #8
 8010e8e:	af00      	add	r7, sp, #0
 8010e90:	6078      	str	r0, [r7, #4]
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	4618      	mov	r0, r3
 8010e96:	f001 fd63 	bl	8012960 <_ZSt3getILj1EJP25TfLiteSparseToDenseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8010e9a:	4603      	mov	r3, r0
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	3708      	adds	r7, #8
 8010ea0:	46bd      	mov	sp, r7
 8010ea2:	bd80      	pop	{r7, pc}

08010ea4 <_ZSt7forwardIRP25TfLiteSparseToDenseParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010ea4:	b480      	push	{r7}
 8010ea6:	b083      	sub	sp, #12
 8010ea8:	af00      	add	r7, sp, #0
 8010eaa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	4618      	mov	r0, r3
 8010eb0:	370c      	adds	r7, #12
 8010eb2:	46bd      	mov	sp, r7
 8010eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb8:	4770      	bx	lr

08010eba <_ZNSt5tupleIJP25TfLiteSparseToDenseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 8010eba:	b5b0      	push	{r4, r5, r7, lr}
 8010ebc:	b084      	sub	sp, #16
 8010ebe:	af00      	add	r7, sp, #0
 8010ec0:	60f8      	str	r0, [r7, #12]
 8010ec2:	60b9      	str	r1, [r7, #8]
 8010ec4:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8010ec6:	68fc      	ldr	r4, [r7, #12]
 8010ec8:	68b8      	ldr	r0, [r7, #8]
 8010eca:	f7ff ffeb 	bl	8010ea4 <_ZSt7forwardIRP25TfLiteSparseToDenseParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8010ece:	4605      	mov	r5, r0
 8010ed0:	6878      	ldr	r0, [r7, #4]
 8010ed2:	f7fb fab2 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8010ed6:	4603      	mov	r3, r0
 8010ed8:	461a      	mov	r2, r3
 8010eda:	4629      	mov	r1, r5
 8010edc:	4620      	mov	r0, r4
 8010ede:	f001 fd4c 	bl	801297a <_ZNSt11_Tuple_implILj0EJP25TfLiteSparseToDenseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	4618      	mov	r0, r3
 8010ee6:	3710      	adds	r7, #16
 8010ee8:	46bd      	mov	sp, r7
 8010eea:	bdb0      	pop	{r4, r5, r7, pc}

08010eec <_ZNKSt15__uniq_ptr_implI25TfLiteSparseToDenseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8010eec:	b580      	push	{r7, lr}
 8010eee:	b082      	sub	sp, #8
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	6078      	str	r0, [r7, #4]
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	4618      	mov	r0, r3
 8010ef8:	f001 fd5d 	bl	80129b6 <_ZSt3getILj0EJP25TfLiteSparseToDenseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 8010efc:	4603      	mov	r3, r0
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	4618      	mov	r0, r3
 8010f02:	3708      	adds	r7, #8
 8010f04:	46bd      	mov	sp, r7
 8010f06:	bd80      	pop	{r7, pc}

08010f08 <_ZSt3getILj0EJP17TfLiteShapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8010f08:	b580      	push	{r7, lr}
 8010f0a:	b082      	sub	sp, #8
 8010f0c:	af00      	add	r7, sp, #0
 8010f0e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	4618      	mov	r0, r3
 8010f14:	f001 fd5c 	bl	80129d0 <_ZSt12__get_helperILj0EP17TfLiteShapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8010f18:	4603      	mov	r3, r0
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	3708      	adds	r7, #8
 8010f1e:	46bd      	mov	sp, r7
 8010f20:	bd80      	pop	{r7, pc}

08010f22 <_ZNSt15__uniq_ptr_implI17TfLiteShapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8010f22:	b580      	push	{r7, lr}
 8010f24:	b082      	sub	sp, #8
 8010f26:	af00      	add	r7, sp, #0
 8010f28:	6078      	str	r0, [r7, #4]
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	4618      	mov	r0, r3
 8010f2e:	f001 fd5b 	bl	80129e8 <_ZSt3getILj1EJP17TfLiteShapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8010f32:	4603      	mov	r3, r0
 8010f34:	4618      	mov	r0, r3
 8010f36:	3708      	adds	r7, #8
 8010f38:	46bd      	mov	sp, r7
 8010f3a:	bd80      	pop	{r7, pc}

08010f3c <_ZSt7forwardIRP17TfLiteShapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010f3c:	b480      	push	{r7}
 8010f3e:	b083      	sub	sp, #12
 8010f40:	af00      	add	r7, sp, #0
 8010f42:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	4618      	mov	r0, r3
 8010f48:	370c      	adds	r7, #12
 8010f4a:	46bd      	mov	sp, r7
 8010f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f50:	4770      	bx	lr

08010f52 <_ZNSt5tupleIJP17TfLiteShapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 8010f52:	b5b0      	push	{r4, r5, r7, lr}
 8010f54:	b084      	sub	sp, #16
 8010f56:	af00      	add	r7, sp, #0
 8010f58:	60f8      	str	r0, [r7, #12]
 8010f5a:	60b9      	str	r1, [r7, #8]
 8010f5c:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8010f5e:	68fc      	ldr	r4, [r7, #12]
 8010f60:	68b8      	ldr	r0, [r7, #8]
 8010f62:	f7ff ffeb 	bl	8010f3c <_ZSt7forwardIRP17TfLiteShapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8010f66:	4605      	mov	r5, r0
 8010f68:	6878      	ldr	r0, [r7, #4]
 8010f6a:	f7fb fa66 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8010f6e:	4603      	mov	r3, r0
 8010f70:	461a      	mov	r2, r3
 8010f72:	4629      	mov	r1, r5
 8010f74:	4620      	mov	r0, r4
 8010f76:	f001 fd44 	bl	8012a02 <_ZNSt11_Tuple_implILj0EJP17TfLiteShapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	4618      	mov	r0, r3
 8010f7e:	3710      	adds	r7, #16
 8010f80:	46bd      	mov	sp, r7
 8010f82:	bdb0      	pop	{r4, r5, r7, pc}

08010f84 <_ZNKSt15__uniq_ptr_implI17TfLiteShapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8010f84:	b580      	push	{r7, lr}
 8010f86:	b082      	sub	sp, #8
 8010f88:	af00      	add	r7, sp, #0
 8010f8a:	6078      	str	r0, [r7, #4]
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	4618      	mov	r0, r3
 8010f90:	f001 fd55 	bl	8012a3e <_ZSt3getILj0EJP17TfLiteShapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 8010f94:	4603      	mov	r3, r0
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	4618      	mov	r0, r3
 8010f9a:	3708      	adds	r7, #8
 8010f9c:	46bd      	mov	sp, r7
 8010f9e:	bd80      	pop	{r7, pc}

08010fa0 <_ZSt3getILj0EJP16TfLitePackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b082      	sub	sp, #8
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	4618      	mov	r0, r3
 8010fac:	f001 fd54 	bl	8012a58 <_ZSt12__get_helperILj0EP16TfLitePackParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8010fb0:	4603      	mov	r3, r0
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	3708      	adds	r7, #8
 8010fb6:	46bd      	mov	sp, r7
 8010fb8:	bd80      	pop	{r7, pc}

08010fba <_ZNSt15__uniq_ptr_implI16TfLitePackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8010fba:	b580      	push	{r7, lr}
 8010fbc:	b082      	sub	sp, #8
 8010fbe:	af00      	add	r7, sp, #0
 8010fc0:	6078      	str	r0, [r7, #4]
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	f001 fd53 	bl	8012a70 <_ZSt3getILj1EJP16TfLitePackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8010fca:	4603      	mov	r3, r0
 8010fcc:	4618      	mov	r0, r3
 8010fce:	3708      	adds	r7, #8
 8010fd0:	46bd      	mov	sp, r7
 8010fd2:	bd80      	pop	{r7, pc}

08010fd4 <_ZSt7forwardIRP16TfLitePackParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010fd4:	b480      	push	{r7}
 8010fd6:	b083      	sub	sp, #12
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	4618      	mov	r0, r3
 8010fe0:	370c      	adds	r7, #12
 8010fe2:	46bd      	mov	sp, r7
 8010fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe8:	4770      	bx	lr

08010fea <_ZNSt5tupleIJP16TfLitePackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 8010fea:	b5b0      	push	{r4, r5, r7, lr}
 8010fec:	b084      	sub	sp, #16
 8010fee:	af00      	add	r7, sp, #0
 8010ff0:	60f8      	str	r0, [r7, #12]
 8010ff2:	60b9      	str	r1, [r7, #8]
 8010ff4:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8010ff6:	68fc      	ldr	r4, [r7, #12]
 8010ff8:	68b8      	ldr	r0, [r7, #8]
 8010ffa:	f7ff ffeb 	bl	8010fd4 <_ZSt7forwardIRP16TfLitePackParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8010ffe:	4605      	mov	r5, r0
 8011000:	6878      	ldr	r0, [r7, #4]
 8011002:	f7fb fa1a 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8011006:	4603      	mov	r3, r0
 8011008:	461a      	mov	r2, r3
 801100a:	4629      	mov	r1, r5
 801100c:	4620      	mov	r0, r4
 801100e:	f001 fd3c 	bl	8012a8a <_ZNSt11_Tuple_implILj0EJP16TfLitePackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	4618      	mov	r0, r3
 8011016:	3710      	adds	r7, #16
 8011018:	46bd      	mov	sp, r7
 801101a:	bdb0      	pop	{r4, r5, r7, pc}

0801101c <_ZNKSt15__uniq_ptr_implI16TfLitePackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 801101c:	b580      	push	{r7, lr}
 801101e:	b082      	sub	sp, #8
 8011020:	af00      	add	r7, sp, #0
 8011022:	6078      	str	r0, [r7, #4]
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	4618      	mov	r0, r3
 8011028:	f001 fd4d 	bl	8012ac6 <_ZSt3getILj0EJP16TfLitePackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 801102c:	4603      	mov	r3, r0
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	4618      	mov	r0, r3
 8011032:	3708      	adds	r7, #8
 8011034:	46bd      	mov	sp, r7
 8011036:	bd80      	pop	{r7, pc}

08011038 <_ZSt3getILj0EJP21TfLiteFakeQuantParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8011038:	b580      	push	{r7, lr}
 801103a:	b082      	sub	sp, #8
 801103c:	af00      	add	r7, sp, #0
 801103e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	4618      	mov	r0, r3
 8011044:	f001 fd4c 	bl	8012ae0 <_ZSt12__get_helperILj0EP21TfLiteFakeQuantParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8011048:	4603      	mov	r3, r0
 801104a:	4618      	mov	r0, r3
 801104c:	3708      	adds	r7, #8
 801104e:	46bd      	mov	sp, r7
 8011050:	bd80      	pop	{r7, pc}

08011052 <_ZNSt15__uniq_ptr_implI21TfLiteFakeQuantParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8011052:	b580      	push	{r7, lr}
 8011054:	b082      	sub	sp, #8
 8011056:	af00      	add	r7, sp, #0
 8011058:	6078      	str	r0, [r7, #4]
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	4618      	mov	r0, r3
 801105e:	f001 fd4b 	bl	8012af8 <_ZSt3getILj1EJP21TfLiteFakeQuantParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8011062:	4603      	mov	r3, r0
 8011064:	4618      	mov	r0, r3
 8011066:	3708      	adds	r7, #8
 8011068:	46bd      	mov	sp, r7
 801106a:	bd80      	pop	{r7, pc}

0801106c <_ZSt7forwardIRP21TfLiteFakeQuantParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801106c:	b480      	push	{r7}
 801106e:	b083      	sub	sp, #12
 8011070:	af00      	add	r7, sp, #0
 8011072:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	4618      	mov	r0, r3
 8011078:	370c      	adds	r7, #12
 801107a:	46bd      	mov	sp, r7
 801107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011080:	4770      	bx	lr

08011082 <_ZNSt5tupleIJP21TfLiteFakeQuantParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 8011082:	b5b0      	push	{r4, r5, r7, lr}
 8011084:	b084      	sub	sp, #16
 8011086:	af00      	add	r7, sp, #0
 8011088:	60f8      	str	r0, [r7, #12]
 801108a:	60b9      	str	r1, [r7, #8]
 801108c:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 801108e:	68fc      	ldr	r4, [r7, #12]
 8011090:	68b8      	ldr	r0, [r7, #8]
 8011092:	f7ff ffeb 	bl	801106c <_ZSt7forwardIRP21TfLiteFakeQuantParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8011096:	4605      	mov	r5, r0
 8011098:	6878      	ldr	r0, [r7, #4]
 801109a:	f7fb f9ce 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 801109e:	4603      	mov	r3, r0
 80110a0:	461a      	mov	r2, r3
 80110a2:	4629      	mov	r1, r5
 80110a4:	4620      	mov	r0, r4
 80110a6:	f001 fd34 	bl	8012b12 <_ZNSt11_Tuple_implILj0EJP21TfLiteFakeQuantParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	4618      	mov	r0, r3
 80110ae:	3710      	adds	r7, #16
 80110b0:	46bd      	mov	sp, r7
 80110b2:	bdb0      	pop	{r4, r5, r7, pc}

080110b4 <_ZNKSt15__uniq_ptr_implI21TfLiteFakeQuantParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80110b4:	b580      	push	{r7, lr}
 80110b6:	b082      	sub	sp, #8
 80110b8:	af00      	add	r7, sp, #0
 80110ba:	6078      	str	r0, [r7, #4]
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	4618      	mov	r0, r3
 80110c0:	f001 fd45 	bl	8012b4e <_ZSt3getILj0EJP21TfLiteFakeQuantParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 80110c4:	4603      	mov	r3, r0
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	4618      	mov	r0, r3
 80110ca:	3708      	adds	r7, #8
 80110cc:	46bd      	mov	sp, r7
 80110ce:	bd80      	pop	{r7, pc}

080110d0 <_ZSt3getILj0EJP18TfLiteOneHotParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80110d0:	b580      	push	{r7, lr}
 80110d2:	b082      	sub	sp, #8
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	4618      	mov	r0, r3
 80110dc:	f001 fd44 	bl	8012b68 <_ZSt12__get_helperILj0EP18TfLiteOneHotParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80110e0:	4603      	mov	r3, r0
 80110e2:	4618      	mov	r0, r3
 80110e4:	3708      	adds	r7, #8
 80110e6:	46bd      	mov	sp, r7
 80110e8:	bd80      	pop	{r7, pc}

080110ea <_ZNSt15__uniq_ptr_implI18TfLiteOneHotParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 80110ea:	b580      	push	{r7, lr}
 80110ec:	b082      	sub	sp, #8
 80110ee:	af00      	add	r7, sp, #0
 80110f0:	6078      	str	r0, [r7, #4]
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	4618      	mov	r0, r3
 80110f6:	f001 fd43 	bl	8012b80 <_ZSt3getILj1EJP18TfLiteOneHotParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 80110fa:	4603      	mov	r3, r0
 80110fc:	4618      	mov	r0, r3
 80110fe:	3708      	adds	r7, #8
 8011100:	46bd      	mov	sp, r7
 8011102:	bd80      	pop	{r7, pc}

08011104 <_ZSt7forwardIRP18TfLiteOneHotParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011104:	b480      	push	{r7}
 8011106:	b083      	sub	sp, #12
 8011108:	af00      	add	r7, sp, #0
 801110a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	4618      	mov	r0, r3
 8011110:	370c      	adds	r7, #12
 8011112:	46bd      	mov	sp, r7
 8011114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011118:	4770      	bx	lr

0801111a <_ZNSt5tupleIJP18TfLiteOneHotParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 801111a:	b5b0      	push	{r4, r5, r7, lr}
 801111c:	b084      	sub	sp, #16
 801111e:	af00      	add	r7, sp, #0
 8011120:	60f8      	str	r0, [r7, #12]
 8011122:	60b9      	str	r1, [r7, #8]
 8011124:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8011126:	68fc      	ldr	r4, [r7, #12]
 8011128:	68b8      	ldr	r0, [r7, #8]
 801112a:	f7ff ffeb 	bl	8011104 <_ZSt7forwardIRP18TfLiteOneHotParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 801112e:	4605      	mov	r5, r0
 8011130:	6878      	ldr	r0, [r7, #4]
 8011132:	f7fb f982 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8011136:	4603      	mov	r3, r0
 8011138:	461a      	mov	r2, r3
 801113a:	4629      	mov	r1, r5
 801113c:	4620      	mov	r0, r4
 801113e:	f001 fd2c 	bl	8012b9a <_ZNSt11_Tuple_implILj0EJP18TfLiteOneHotParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	4618      	mov	r0, r3
 8011146:	3710      	adds	r7, #16
 8011148:	46bd      	mov	sp, r7
 801114a:	bdb0      	pop	{r4, r5, r7, pc}

0801114c <_ZNKSt15__uniq_ptr_implI18TfLiteOneHotParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 801114c:	b580      	push	{r7, lr}
 801114e:	b082      	sub	sp, #8
 8011150:	af00      	add	r7, sp, #0
 8011152:	6078      	str	r0, [r7, #4]
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	4618      	mov	r0, r3
 8011158:	f001 fd3d 	bl	8012bd6 <_ZSt3getILj0EJP18TfLiteOneHotParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 801115c:	4603      	mov	r3, r0
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	4618      	mov	r0, r3
 8011162:	3708      	adds	r7, #8
 8011164:	46bd      	mov	sp, r7
 8011166:	bd80      	pop	{r7, pc}

08011168 <_ZSt3getILj0EJP18TfLiteUnpackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8011168:	b580      	push	{r7, lr}
 801116a:	b082      	sub	sp, #8
 801116c:	af00      	add	r7, sp, #0
 801116e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	4618      	mov	r0, r3
 8011174:	f001 fd3c 	bl	8012bf0 <_ZSt12__get_helperILj0EP18TfLiteUnpackParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8011178:	4603      	mov	r3, r0
 801117a:	4618      	mov	r0, r3
 801117c:	3708      	adds	r7, #8
 801117e:	46bd      	mov	sp, r7
 8011180:	bd80      	pop	{r7, pc}

08011182 <_ZNSt15__uniq_ptr_implI18TfLiteUnpackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8011182:	b580      	push	{r7, lr}
 8011184:	b082      	sub	sp, #8
 8011186:	af00      	add	r7, sp, #0
 8011188:	6078      	str	r0, [r7, #4]
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	4618      	mov	r0, r3
 801118e:	f001 fd3b 	bl	8012c08 <_ZSt3getILj1EJP18TfLiteUnpackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8011192:	4603      	mov	r3, r0
 8011194:	4618      	mov	r0, r3
 8011196:	3708      	adds	r7, #8
 8011198:	46bd      	mov	sp, r7
 801119a:	bd80      	pop	{r7, pc}

0801119c <_ZSt7forwardIRP18TfLiteUnpackParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801119c:	b480      	push	{r7}
 801119e:	b083      	sub	sp, #12
 80111a0:	af00      	add	r7, sp, #0
 80111a2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	4618      	mov	r0, r3
 80111a8:	370c      	adds	r7, #12
 80111aa:	46bd      	mov	sp, r7
 80111ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b0:	4770      	bx	lr

080111b2 <_ZNSt5tupleIJP18TfLiteUnpackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 80111b2:	b5b0      	push	{r4, r5, r7, lr}
 80111b4:	b084      	sub	sp, #16
 80111b6:	af00      	add	r7, sp, #0
 80111b8:	60f8      	str	r0, [r7, #12]
 80111ba:	60b9      	str	r1, [r7, #8]
 80111bc:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 80111be:	68fc      	ldr	r4, [r7, #12]
 80111c0:	68b8      	ldr	r0, [r7, #8]
 80111c2:	f7ff ffeb 	bl	801119c <_ZSt7forwardIRP18TfLiteUnpackParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80111c6:	4605      	mov	r5, r0
 80111c8:	6878      	ldr	r0, [r7, #4]
 80111ca:	f7fb f936 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80111ce:	4603      	mov	r3, r0
 80111d0:	461a      	mov	r2, r3
 80111d2:	4629      	mov	r1, r5
 80111d4:	4620      	mov	r0, r4
 80111d6:	f001 fd24 	bl	8012c22 <_ZNSt11_Tuple_implILj0EJP18TfLiteUnpackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	4618      	mov	r0, r3
 80111de:	3710      	adds	r7, #16
 80111e0:	46bd      	mov	sp, r7
 80111e2:	bdb0      	pop	{r4, r5, r7, pc}

080111e4 <_ZNKSt15__uniq_ptr_implI18TfLiteUnpackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80111e4:	b580      	push	{r7, lr}
 80111e6:	b082      	sub	sp, #8
 80111e8:	af00      	add	r7, sp, #0
 80111ea:	6078      	str	r0, [r7, #4]
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	4618      	mov	r0, r3
 80111f0:	f001 fd35 	bl	8012c5e <_ZSt3getILj0EJP18TfLiteUnpackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 80111f4:	4603      	mov	r3, r0
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	4618      	mov	r0, r3
 80111fa:	3708      	adds	r7, #8
 80111fc:	46bd      	mov	sp, r7
 80111fe:	bd80      	pop	{r7, pc}

08011200 <_ZSt3getILj0EJP21TfLiteLeakyReluParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8011200:	b580      	push	{r7, lr}
 8011202:	b082      	sub	sp, #8
 8011204:	af00      	add	r7, sp, #0
 8011206:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	4618      	mov	r0, r3
 801120c:	f001 fd34 	bl	8012c78 <_ZSt12__get_helperILj0EP21TfLiteLeakyReluParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8011210:	4603      	mov	r3, r0
 8011212:	4618      	mov	r0, r3
 8011214:	3708      	adds	r7, #8
 8011216:	46bd      	mov	sp, r7
 8011218:	bd80      	pop	{r7, pc}

0801121a <_ZNSt15__uniq_ptr_implI21TfLiteLeakyReluParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 801121a:	b580      	push	{r7, lr}
 801121c:	b082      	sub	sp, #8
 801121e:	af00      	add	r7, sp, #0
 8011220:	6078      	str	r0, [r7, #4]
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	4618      	mov	r0, r3
 8011226:	f001 fd33 	bl	8012c90 <_ZSt3getILj1EJP21TfLiteLeakyReluParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 801122a:	4603      	mov	r3, r0
 801122c:	4618      	mov	r0, r3
 801122e:	3708      	adds	r7, #8
 8011230:	46bd      	mov	sp, r7
 8011232:	bd80      	pop	{r7, pc}

08011234 <_ZSt7forwardIRP21TfLiteLeakyReluParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011234:	b480      	push	{r7}
 8011236:	b083      	sub	sp, #12
 8011238:	af00      	add	r7, sp, #0
 801123a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	4618      	mov	r0, r3
 8011240:	370c      	adds	r7, #12
 8011242:	46bd      	mov	sp, r7
 8011244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011248:	4770      	bx	lr

0801124a <_ZNSt5tupleIJP21TfLiteLeakyReluParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 801124a:	b5b0      	push	{r4, r5, r7, lr}
 801124c:	b084      	sub	sp, #16
 801124e:	af00      	add	r7, sp, #0
 8011250:	60f8      	str	r0, [r7, #12]
 8011252:	60b9      	str	r1, [r7, #8]
 8011254:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8011256:	68fc      	ldr	r4, [r7, #12]
 8011258:	68b8      	ldr	r0, [r7, #8]
 801125a:	f7ff ffeb 	bl	8011234 <_ZSt7forwardIRP21TfLiteLeakyReluParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 801125e:	4605      	mov	r5, r0
 8011260:	6878      	ldr	r0, [r7, #4]
 8011262:	f7fb f8ea 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8011266:	4603      	mov	r3, r0
 8011268:	461a      	mov	r2, r3
 801126a:	4629      	mov	r1, r5
 801126c:	4620      	mov	r0, r4
 801126e:	f001 fd1c 	bl	8012caa <_ZNSt11_Tuple_implILj0EJP21TfLiteLeakyReluParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	4618      	mov	r0, r3
 8011276:	3710      	adds	r7, #16
 8011278:	46bd      	mov	sp, r7
 801127a:	bdb0      	pop	{r4, r5, r7, pc}

0801127c <_ZNKSt15__uniq_ptr_implI21TfLiteLeakyReluParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 801127c:	b580      	push	{r7, lr}
 801127e:	b082      	sub	sp, #8
 8011280:	af00      	add	r7, sp, #0
 8011282:	6078      	str	r0, [r7, #4]
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	4618      	mov	r0, r3
 8011288:	f001 fd2d 	bl	8012ce6 <_ZSt3getILj0EJP21TfLiteLeakyReluParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 801128c:	4603      	mov	r3, r0
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	4618      	mov	r0, r3
 8011292:	3708      	adds	r7, #8
 8011294:	46bd      	mov	sp, r7
 8011296:	bd80      	pop	{r7, pc}

08011298 <_ZSt3getILj0EJP25TfLiteMirrorPaddingParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8011298:	b580      	push	{r7, lr}
 801129a:	b082      	sub	sp, #8
 801129c:	af00      	add	r7, sp, #0
 801129e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	4618      	mov	r0, r3
 80112a4:	f001 fd2c 	bl	8012d00 <_ZSt12__get_helperILj0EP25TfLiteMirrorPaddingParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80112a8:	4603      	mov	r3, r0
 80112aa:	4618      	mov	r0, r3
 80112ac:	3708      	adds	r7, #8
 80112ae:	46bd      	mov	sp, r7
 80112b0:	bd80      	pop	{r7, pc}

080112b2 <_ZNSt15__uniq_ptr_implI25TfLiteMirrorPaddingParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 80112b2:	b580      	push	{r7, lr}
 80112b4:	b082      	sub	sp, #8
 80112b6:	af00      	add	r7, sp, #0
 80112b8:	6078      	str	r0, [r7, #4]
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	4618      	mov	r0, r3
 80112be:	f001 fd2b 	bl	8012d18 <_ZSt3getILj1EJP25TfLiteMirrorPaddingParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 80112c2:	4603      	mov	r3, r0
 80112c4:	4618      	mov	r0, r3
 80112c6:	3708      	adds	r7, #8
 80112c8:	46bd      	mov	sp, r7
 80112ca:	bd80      	pop	{r7, pc}

080112cc <_ZSt7forwardIRP25TfLiteMirrorPaddingParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80112cc:	b480      	push	{r7}
 80112ce:	b083      	sub	sp, #12
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	4618      	mov	r0, r3
 80112d8:	370c      	adds	r7, #12
 80112da:	46bd      	mov	sp, r7
 80112dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e0:	4770      	bx	lr

080112e2 <_ZNSt5tupleIJP25TfLiteMirrorPaddingParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 80112e2:	b5b0      	push	{r4, r5, r7, lr}
 80112e4:	b084      	sub	sp, #16
 80112e6:	af00      	add	r7, sp, #0
 80112e8:	60f8      	str	r0, [r7, #12]
 80112ea:	60b9      	str	r1, [r7, #8]
 80112ec:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 80112ee:	68fc      	ldr	r4, [r7, #12]
 80112f0:	68b8      	ldr	r0, [r7, #8]
 80112f2:	f7ff ffeb 	bl	80112cc <_ZSt7forwardIRP25TfLiteMirrorPaddingParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80112f6:	4605      	mov	r5, r0
 80112f8:	6878      	ldr	r0, [r7, #4]
 80112fa:	f7fb f89e 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80112fe:	4603      	mov	r3, r0
 8011300:	461a      	mov	r2, r3
 8011302:	4629      	mov	r1, r5
 8011304:	4620      	mov	r0, r4
 8011306:	f001 fd14 	bl	8012d32 <_ZNSt11_Tuple_implILj0EJP25TfLiteMirrorPaddingParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	4618      	mov	r0, r3
 801130e:	3710      	adds	r7, #16
 8011310:	46bd      	mov	sp, r7
 8011312:	bdb0      	pop	{r4, r5, r7, pc}

08011314 <_ZNKSt15__uniq_ptr_implI25TfLiteMirrorPaddingParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8011314:	b580      	push	{r7, lr}
 8011316:	b082      	sub	sp, #8
 8011318:	af00      	add	r7, sp, #0
 801131a:	6078      	str	r0, [r7, #4]
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	4618      	mov	r0, r3
 8011320:	f001 fd25 	bl	8012d6e <_ZSt3getILj0EJP25TfLiteMirrorPaddingParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 8011324:	4603      	mov	r3, r0
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	4618      	mov	r0, r3
 801132a:	3708      	adds	r7, #8
 801132c:	46bd      	mov	sp, r7
 801132e:	bd80      	pop	{r7, pc}

08011330 <_ZSt3getILj0EJP18TfLiteUniqueParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8011330:	b580      	push	{r7, lr}
 8011332:	b082      	sub	sp, #8
 8011334:	af00      	add	r7, sp, #0
 8011336:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	4618      	mov	r0, r3
 801133c:	f001 fd24 	bl	8012d88 <_ZSt12__get_helperILj0EP18TfLiteUniqueParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8011340:	4603      	mov	r3, r0
 8011342:	4618      	mov	r0, r3
 8011344:	3708      	adds	r7, #8
 8011346:	46bd      	mov	sp, r7
 8011348:	bd80      	pop	{r7, pc}

0801134a <_ZNSt15__uniq_ptr_implI18TfLiteUniqueParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 801134a:	b580      	push	{r7, lr}
 801134c:	b082      	sub	sp, #8
 801134e:	af00      	add	r7, sp, #0
 8011350:	6078      	str	r0, [r7, #4]
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	4618      	mov	r0, r3
 8011356:	f001 fd23 	bl	8012da0 <_ZSt3getILj1EJP18TfLiteUniqueParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 801135a:	4603      	mov	r3, r0
 801135c:	4618      	mov	r0, r3
 801135e:	3708      	adds	r7, #8
 8011360:	46bd      	mov	sp, r7
 8011362:	bd80      	pop	{r7, pc}

08011364 <_ZSt7forwardIRP18TfLiteUniqueParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011364:	b480      	push	{r7}
 8011366:	b083      	sub	sp, #12
 8011368:	af00      	add	r7, sp, #0
 801136a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	4618      	mov	r0, r3
 8011370:	370c      	adds	r7, #12
 8011372:	46bd      	mov	sp, r7
 8011374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011378:	4770      	bx	lr

0801137a <_ZNSt5tupleIJP18TfLiteUniqueParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 801137a:	b5b0      	push	{r4, r5, r7, lr}
 801137c:	b084      	sub	sp, #16
 801137e:	af00      	add	r7, sp, #0
 8011380:	60f8      	str	r0, [r7, #12]
 8011382:	60b9      	str	r1, [r7, #8]
 8011384:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8011386:	68fc      	ldr	r4, [r7, #12]
 8011388:	68b8      	ldr	r0, [r7, #8]
 801138a:	f7ff ffeb 	bl	8011364 <_ZSt7forwardIRP18TfLiteUniqueParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 801138e:	4605      	mov	r5, r0
 8011390:	6878      	ldr	r0, [r7, #4]
 8011392:	f7fb f852 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8011396:	4603      	mov	r3, r0
 8011398:	461a      	mov	r2, r3
 801139a:	4629      	mov	r1, r5
 801139c:	4620      	mov	r0, r4
 801139e:	f001 fd0c 	bl	8012dba <_ZNSt11_Tuple_implILj0EJP18TfLiteUniqueParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	4618      	mov	r0, r3
 80113a6:	3710      	adds	r7, #16
 80113a8:	46bd      	mov	sp, r7
 80113aa:	bdb0      	pop	{r4, r5, r7, pc}

080113ac <_ZNKSt15__uniq_ptr_implI18TfLiteUniqueParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80113ac:	b580      	push	{r7, lr}
 80113ae:	b082      	sub	sp, #8
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	6078      	str	r0, [r7, #4]
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	4618      	mov	r0, r3
 80113b8:	f001 fd1d 	bl	8012df6 <_ZSt3getILj0EJP18TfLiteUniqueParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 80113bc:	4603      	mov	r3, r0
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	4618      	mov	r0, r3
 80113c2:	3708      	adds	r7, #8
 80113c4:	46bd      	mov	sp, r7
 80113c6:	bd80      	pop	{r7, pc}

080113c8 <_ZSt3getILj0EJP27TfLiteReverseSequenceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b082      	sub	sp, #8
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	4618      	mov	r0, r3
 80113d4:	f001 fd1c 	bl	8012e10 <_ZSt12__get_helperILj0EP27TfLiteReverseSequenceParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80113d8:	4603      	mov	r3, r0
 80113da:	4618      	mov	r0, r3
 80113dc:	3708      	adds	r7, #8
 80113de:	46bd      	mov	sp, r7
 80113e0:	bd80      	pop	{r7, pc}

080113e2 <_ZNSt15__uniq_ptr_implI27TfLiteReverseSequenceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 80113e2:	b580      	push	{r7, lr}
 80113e4:	b082      	sub	sp, #8
 80113e6:	af00      	add	r7, sp, #0
 80113e8:	6078      	str	r0, [r7, #4]
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	4618      	mov	r0, r3
 80113ee:	f001 fd1b 	bl	8012e28 <_ZSt3getILj1EJP27TfLiteReverseSequenceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 80113f2:	4603      	mov	r3, r0
 80113f4:	4618      	mov	r0, r3
 80113f6:	3708      	adds	r7, #8
 80113f8:	46bd      	mov	sp, r7
 80113fa:	bd80      	pop	{r7, pc}

080113fc <_ZSt7forwardIRP27TfLiteReverseSequenceParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80113fc:	b480      	push	{r7}
 80113fe:	b083      	sub	sp, #12
 8011400:	af00      	add	r7, sp, #0
 8011402:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	4618      	mov	r0, r3
 8011408:	370c      	adds	r7, #12
 801140a:	46bd      	mov	sp, r7
 801140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011410:	4770      	bx	lr

08011412 <_ZNSt5tupleIJP27TfLiteReverseSequenceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 8011412:	b5b0      	push	{r4, r5, r7, lr}
 8011414:	b084      	sub	sp, #16
 8011416:	af00      	add	r7, sp, #0
 8011418:	60f8      	str	r0, [r7, #12]
 801141a:	60b9      	str	r1, [r7, #8]
 801141c:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 801141e:	68fc      	ldr	r4, [r7, #12]
 8011420:	68b8      	ldr	r0, [r7, #8]
 8011422:	f7ff ffeb 	bl	80113fc <_ZSt7forwardIRP27TfLiteReverseSequenceParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8011426:	4605      	mov	r5, r0
 8011428:	6878      	ldr	r0, [r7, #4]
 801142a:	f7fb f806 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 801142e:	4603      	mov	r3, r0
 8011430:	461a      	mov	r2, r3
 8011432:	4629      	mov	r1, r5
 8011434:	4620      	mov	r0, r4
 8011436:	f001 fd04 	bl	8012e42 <_ZNSt11_Tuple_implILj0EJP27TfLiteReverseSequenceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	4618      	mov	r0, r3
 801143e:	3710      	adds	r7, #16
 8011440:	46bd      	mov	sp, r7
 8011442:	bdb0      	pop	{r4, r5, r7, pc}

08011444 <_ZNKSt15__uniq_ptr_implI27TfLiteReverseSequenceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8011444:	b580      	push	{r7, lr}
 8011446:	b082      	sub	sp, #8
 8011448:	af00      	add	r7, sp, #0
 801144a:	6078      	str	r0, [r7, #4]
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	4618      	mov	r0, r3
 8011450:	f001 fd15 	bl	8012e7e <_ZSt3getILj0EJP27TfLiteReverseSequenceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 8011454:	4603      	mov	r3, r0
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	4618      	mov	r0, r3
 801145a:	3708      	adds	r7, #8
 801145c:	46bd      	mov	sp, r7
 801145e:	bd80      	pop	{r7, pc}

08011460 <_ZSt3getILj0EJP14TfLiteIfParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8011460:	b580      	push	{r7, lr}
 8011462:	b082      	sub	sp, #8
 8011464:	af00      	add	r7, sp, #0
 8011466:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	4618      	mov	r0, r3
 801146c:	f001 fd14 	bl	8012e98 <_ZSt12__get_helperILj0EP14TfLiteIfParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8011470:	4603      	mov	r3, r0
 8011472:	4618      	mov	r0, r3
 8011474:	3708      	adds	r7, #8
 8011476:	46bd      	mov	sp, r7
 8011478:	bd80      	pop	{r7, pc}

0801147a <_ZNSt15__uniq_ptr_implI14TfLiteIfParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 801147a:	b580      	push	{r7, lr}
 801147c:	b082      	sub	sp, #8
 801147e:	af00      	add	r7, sp, #0
 8011480:	6078      	str	r0, [r7, #4]
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	4618      	mov	r0, r3
 8011486:	f001 fd13 	bl	8012eb0 <_ZSt3getILj1EJP14TfLiteIfParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 801148a:	4603      	mov	r3, r0
 801148c:	4618      	mov	r0, r3
 801148e:	3708      	adds	r7, #8
 8011490:	46bd      	mov	sp, r7
 8011492:	bd80      	pop	{r7, pc}

08011494 <_ZSt7forwardIRP14TfLiteIfParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011494:	b480      	push	{r7}
 8011496:	b083      	sub	sp, #12
 8011498:	af00      	add	r7, sp, #0
 801149a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	4618      	mov	r0, r3
 80114a0:	370c      	adds	r7, #12
 80114a2:	46bd      	mov	sp, r7
 80114a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114a8:	4770      	bx	lr

080114aa <_ZNSt5tupleIJP14TfLiteIfParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 80114aa:	b5b0      	push	{r4, r5, r7, lr}
 80114ac:	b084      	sub	sp, #16
 80114ae:	af00      	add	r7, sp, #0
 80114b0:	60f8      	str	r0, [r7, #12]
 80114b2:	60b9      	str	r1, [r7, #8]
 80114b4:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 80114b6:	68fc      	ldr	r4, [r7, #12]
 80114b8:	68b8      	ldr	r0, [r7, #8]
 80114ba:	f7ff ffeb 	bl	8011494 <_ZSt7forwardIRP14TfLiteIfParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80114be:	4605      	mov	r5, r0
 80114c0:	6878      	ldr	r0, [r7, #4]
 80114c2:	f7fa ffba 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80114c6:	4603      	mov	r3, r0
 80114c8:	461a      	mov	r2, r3
 80114ca:	4629      	mov	r1, r5
 80114cc:	4620      	mov	r0, r4
 80114ce:	f001 fcfc 	bl	8012eca <_ZNSt11_Tuple_implILj0EJP14TfLiteIfParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	4618      	mov	r0, r3
 80114d6:	3710      	adds	r7, #16
 80114d8:	46bd      	mov	sp, r7
 80114da:	bdb0      	pop	{r4, r5, r7, pc}

080114dc <_ZNKSt15__uniq_ptr_implI14TfLiteIfParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80114dc:	b580      	push	{r7, lr}
 80114de:	b082      	sub	sp, #8
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	6078      	str	r0, [r7, #4]
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	4618      	mov	r0, r3
 80114e8:	f001 fd0d 	bl	8012f06 <_ZSt3getILj0EJP14TfLiteIfParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 80114ec:	4603      	mov	r3, r0
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	4618      	mov	r0, r3
 80114f2:	3708      	adds	r7, #8
 80114f4:	46bd      	mov	sp, r7
 80114f6:	bd80      	pop	{r7, pc}

080114f8 <_ZSt3getILj0EJP17TfLiteWhileParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80114f8:	b580      	push	{r7, lr}
 80114fa:	b082      	sub	sp, #8
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	4618      	mov	r0, r3
 8011504:	f001 fd0c 	bl	8012f20 <_ZSt12__get_helperILj0EP17TfLiteWhileParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8011508:	4603      	mov	r3, r0
 801150a:	4618      	mov	r0, r3
 801150c:	3708      	adds	r7, #8
 801150e:	46bd      	mov	sp, r7
 8011510:	bd80      	pop	{r7, pc}

08011512 <_ZNSt15__uniq_ptr_implI17TfLiteWhileParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8011512:	b580      	push	{r7, lr}
 8011514:	b082      	sub	sp, #8
 8011516:	af00      	add	r7, sp, #0
 8011518:	6078      	str	r0, [r7, #4]
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	4618      	mov	r0, r3
 801151e:	f001 fd0b 	bl	8012f38 <_ZSt3getILj1EJP17TfLiteWhileParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8011522:	4603      	mov	r3, r0
 8011524:	4618      	mov	r0, r3
 8011526:	3708      	adds	r7, #8
 8011528:	46bd      	mov	sp, r7
 801152a:	bd80      	pop	{r7, pc}

0801152c <_ZSt7forwardIRP17TfLiteWhileParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801152c:	b480      	push	{r7}
 801152e:	b083      	sub	sp, #12
 8011530:	af00      	add	r7, sp, #0
 8011532:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	4618      	mov	r0, r3
 8011538:	370c      	adds	r7, #12
 801153a:	46bd      	mov	sp, r7
 801153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011540:	4770      	bx	lr

08011542 <_ZNSt5tupleIJP17TfLiteWhileParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 8011542:	b5b0      	push	{r4, r5, r7, lr}
 8011544:	b084      	sub	sp, #16
 8011546:	af00      	add	r7, sp, #0
 8011548:	60f8      	str	r0, [r7, #12]
 801154a:	60b9      	str	r1, [r7, #8]
 801154c:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 801154e:	68fc      	ldr	r4, [r7, #12]
 8011550:	68b8      	ldr	r0, [r7, #8]
 8011552:	f7ff ffeb 	bl	801152c <_ZSt7forwardIRP17TfLiteWhileParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8011556:	4605      	mov	r5, r0
 8011558:	6878      	ldr	r0, [r7, #4]
 801155a:	f7fa ff6e 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 801155e:	4603      	mov	r3, r0
 8011560:	461a      	mov	r2, r3
 8011562:	4629      	mov	r1, r5
 8011564:	4620      	mov	r0, r4
 8011566:	f001 fcf4 	bl	8012f52 <_ZNSt11_Tuple_implILj0EJP17TfLiteWhileParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	4618      	mov	r0, r3
 801156e:	3710      	adds	r7, #16
 8011570:	46bd      	mov	sp, r7
 8011572:	bdb0      	pop	{r4, r5, r7, pc}

08011574 <_ZNKSt15__uniq_ptr_implI17TfLiteWhileParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8011574:	b580      	push	{r7, lr}
 8011576:	b082      	sub	sp, #8
 8011578:	af00      	add	r7, sp, #0
 801157a:	6078      	str	r0, [r7, #4]
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	4618      	mov	r0, r3
 8011580:	f001 fd05 	bl	8012f8e <_ZSt3getILj0EJP17TfLiteWhileParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 8011584:	4603      	mov	r3, r0
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	4618      	mov	r0, r3
 801158a:	3708      	adds	r7, #8
 801158c:	46bd      	mov	sp, r7
 801158e:	bd80      	pop	{r7, pc}

08011590 <_ZSt3getILj0EJP23TfLiteBatchMatMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8011590:	b580      	push	{r7, lr}
 8011592:	b082      	sub	sp, #8
 8011594:	af00      	add	r7, sp, #0
 8011596:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	4618      	mov	r0, r3
 801159c:	f001 fd04 	bl	8012fa8 <_ZSt12__get_helperILj0EP23TfLiteBatchMatMulParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80115a0:	4603      	mov	r3, r0
 80115a2:	4618      	mov	r0, r3
 80115a4:	3708      	adds	r7, #8
 80115a6:	46bd      	mov	sp, r7
 80115a8:	bd80      	pop	{r7, pc}

080115aa <_ZNSt15__uniq_ptr_implI23TfLiteBatchMatMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 80115aa:	b580      	push	{r7, lr}
 80115ac:	b082      	sub	sp, #8
 80115ae:	af00      	add	r7, sp, #0
 80115b0:	6078      	str	r0, [r7, #4]
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	4618      	mov	r0, r3
 80115b6:	f001 fd03 	bl	8012fc0 <_ZSt3getILj1EJP23TfLiteBatchMatMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 80115ba:	4603      	mov	r3, r0
 80115bc:	4618      	mov	r0, r3
 80115be:	3708      	adds	r7, #8
 80115c0:	46bd      	mov	sp, r7
 80115c2:	bd80      	pop	{r7, pc}

080115c4 <_ZSt7forwardIRP23TfLiteBatchMatMulParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80115c4:	b480      	push	{r7}
 80115c6:	b083      	sub	sp, #12
 80115c8:	af00      	add	r7, sp, #0
 80115ca:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	4618      	mov	r0, r3
 80115d0:	370c      	adds	r7, #12
 80115d2:	46bd      	mov	sp, r7
 80115d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d8:	4770      	bx	lr

080115da <_ZNSt5tupleIJP23TfLiteBatchMatMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 80115da:	b5b0      	push	{r4, r5, r7, lr}
 80115dc:	b084      	sub	sp, #16
 80115de:	af00      	add	r7, sp, #0
 80115e0:	60f8      	str	r0, [r7, #12]
 80115e2:	60b9      	str	r1, [r7, #8]
 80115e4:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 80115e6:	68fc      	ldr	r4, [r7, #12]
 80115e8:	68b8      	ldr	r0, [r7, #8]
 80115ea:	f7ff ffeb 	bl	80115c4 <_ZSt7forwardIRP23TfLiteBatchMatMulParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80115ee:	4605      	mov	r5, r0
 80115f0:	6878      	ldr	r0, [r7, #4]
 80115f2:	f7fa ff22 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80115f6:	4603      	mov	r3, r0
 80115f8:	461a      	mov	r2, r3
 80115fa:	4629      	mov	r1, r5
 80115fc:	4620      	mov	r0, r4
 80115fe:	f001 fcec 	bl	8012fda <_ZNSt11_Tuple_implILj0EJP23TfLiteBatchMatMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	4618      	mov	r0, r3
 8011606:	3710      	adds	r7, #16
 8011608:	46bd      	mov	sp, r7
 801160a:	bdb0      	pop	{r4, r5, r7, pc}

0801160c <_ZNKSt15__uniq_ptr_implI23TfLiteBatchMatMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 801160c:	b580      	push	{r7, lr}
 801160e:	b082      	sub	sp, #8
 8011610:	af00      	add	r7, sp, #0
 8011612:	6078      	str	r0, [r7, #4]
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	4618      	mov	r0, r3
 8011618:	f001 fcfd 	bl	8013016 <_ZSt3getILj0EJP23TfLiteBatchMatMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 801161c:	4603      	mov	r3, r0
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	4618      	mov	r0, r3
 8011622:	3708      	adds	r7, #8
 8011624:	46bd      	mov	sp, r7
 8011626:	bd80      	pop	{r7, pc}

08011628 <_ZSt12__get_helperILj0EP16TfLiteConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8011628:	b580      	push	{r7, lr}
 801162a:	b082      	sub	sp, #8
 801162c:	af00      	add	r7, sp, #0
 801162e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8011630:	6878      	ldr	r0, [r7, #4]
 8011632:	f001 fcfd 	bl	8013030 <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8011636:	4603      	mov	r3, r0
 8011638:	4618      	mov	r0, r3
 801163a:	3708      	adds	r7, #8
 801163c:	46bd      	mov	sp, r7
 801163e:	bd80      	pop	{r7, pc}

08011640 <_ZSt3getILj1EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8011640:	b580      	push	{r7, lr}
 8011642:	b082      	sub	sp, #8
 8011644:	af00      	add	r7, sp, #0
 8011646:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	4618      	mov	r0, r3
 801164c:	f001 fcfe 	bl	801304c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8011650:	4603      	mov	r3, r0
 8011652:	4618      	mov	r0, r3
 8011654:	3708      	adds	r7, #8
 8011656:	46bd      	mov	sp, r7
 8011658:	bd80      	pop	{r7, pc}

0801165a <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 801165a:	b590      	push	{r4, r7, lr}
 801165c:	b085      	sub	sp, #20
 801165e:	af00      	add	r7, sp, #0
 8011660:	60f8      	str	r0, [r7, #12]
 8011662:	60b9      	str	r1, [r7, #8]
 8011664:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8011666:	68fc      	ldr	r4, [r7, #12]
 8011668:	6878      	ldr	r0, [r7, #4]
 801166a:	f7fa fee6 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 801166e:	4603      	mov	r3, r0
 8011670:	4619      	mov	r1, r3
 8011672:	4620      	mov	r0, r4
 8011674:	f001 fcf6 	bl	8013064 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	1d1c      	adds	r4, r3, #4
 801167c:	68b8      	ldr	r0, [r7, #8]
 801167e:	f7fe f961 	bl	800f944 <_ZSt7forwardIRP16TfLiteConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8011682:	4603      	mov	r3, r0
 8011684:	4619      	mov	r1, r3
 8011686:	4620      	mov	r0, r4
 8011688:	f001 fcff 	bl	801308a <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EEC1IRS1_EEOT_>
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	4618      	mov	r0, r3
 8011690:	3714      	adds	r7, #20
 8011692:	46bd      	mov	sp, r7
 8011694:	bd90      	pop	{r4, r7, pc}

08011696 <_ZSt3getILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 8011696:	b580      	push	{r7, lr}
 8011698:	b082      	sub	sp, #8
 801169a:	af00      	add	r7, sp, #0
 801169c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	4618      	mov	r0, r3
 80116a2:	f001 fd03 	bl	80130ac <_ZSt12__get_helperILj0EP16TfLiteConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80116a6:	4603      	mov	r3, r0
 80116a8:	4618      	mov	r0, r3
 80116aa:	3708      	adds	r7, #8
 80116ac:	46bd      	mov	sp, r7
 80116ae:	bd80      	pop	{r7, pc}

080116b0 <_ZSt12__get_helperILj0EP16TfLiteCastParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80116b0:	b580      	push	{r7, lr}
 80116b2:	b082      	sub	sp, #8
 80116b4:	af00      	add	r7, sp, #0
 80116b6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80116b8:	6878      	ldr	r0, [r7, #4]
 80116ba:	f001 fd03 	bl	80130c4 <_ZNSt11_Tuple_implILj0EJP16TfLiteCastParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 80116be:	4603      	mov	r3, r0
 80116c0:	4618      	mov	r0, r3
 80116c2:	3708      	adds	r7, #8
 80116c4:	46bd      	mov	sp, r7
 80116c6:	bd80      	pop	{r7, pc}

080116c8 <_ZSt3getILj1EJP16TfLiteCastParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80116c8:	b580      	push	{r7, lr}
 80116ca:	b082      	sub	sp, #8
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	4618      	mov	r0, r3
 80116d4:	f001 fcba 	bl	801304c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80116d8:	4603      	mov	r3, r0
 80116da:	4618      	mov	r0, r3
 80116dc:	3708      	adds	r7, #8
 80116de:	46bd      	mov	sp, r7
 80116e0:	bd80      	pop	{r7, pc}

080116e2 <_ZNSt11_Tuple_implILj0EJP16TfLiteCastParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 80116e2:	b590      	push	{r4, r7, lr}
 80116e4:	b085      	sub	sp, #20
 80116e6:	af00      	add	r7, sp, #0
 80116e8:	60f8      	str	r0, [r7, #12]
 80116ea:	60b9      	str	r1, [r7, #8]
 80116ec:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 80116ee:	68fc      	ldr	r4, [r7, #12]
 80116f0:	6878      	ldr	r0, [r7, #4]
 80116f2:	f7fa fea2 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80116f6:	4603      	mov	r3, r0
 80116f8:	4619      	mov	r1, r3
 80116fa:	4620      	mov	r0, r4
 80116fc:	f001 fcb2 	bl	8013064 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	1d1c      	adds	r4, r3, #4
 8011704:	68b8      	ldr	r0, [r7, #8]
 8011706:	f7fe f969 	bl	800f9dc <_ZSt7forwardIRP16TfLiteCastParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 801170a:	4603      	mov	r3, r0
 801170c:	4619      	mov	r1, r3
 801170e:	4620      	mov	r0, r4
 8011710:	f001 fce6 	bl	80130e0 <_ZNSt10_Head_baseILj0EP16TfLiteCastParamsLb0EEC1IRS1_EEOT_>
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	4618      	mov	r0, r3
 8011718:	3714      	adds	r7, #20
 801171a:	46bd      	mov	sp, r7
 801171c:	bd90      	pop	{r4, r7, pc}

0801171e <_ZSt3getILj0EJP16TfLiteCastParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 801171e:	b580      	push	{r7, lr}
 8011720:	b082      	sub	sp, #8
 8011722:	af00      	add	r7, sp, #0
 8011724:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	4618      	mov	r0, r3
 801172a:	f001 fcea 	bl	8013102 <_ZSt12__get_helperILj0EP16TfLiteCastParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 801172e:	4603      	mov	r3, r0
 8011730:	4618      	mov	r0, r3
 8011732:	3708      	adds	r7, #8
 8011734:	46bd      	mov	sp, r7
 8011736:	bd80      	pop	{r7, pc}

08011738 <_ZSt12__get_helperILj0EP25TfLiteLSHProjectionParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8011738:	b580      	push	{r7, lr}
 801173a:	b082      	sub	sp, #8
 801173c:	af00      	add	r7, sp, #0
 801173e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8011740:	6878      	ldr	r0, [r7, #4]
 8011742:	f001 fcea 	bl	801311a <_ZNSt11_Tuple_implILj0EJP25TfLiteLSHProjectionParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8011746:	4603      	mov	r3, r0
 8011748:	4618      	mov	r0, r3
 801174a:	3708      	adds	r7, #8
 801174c:	46bd      	mov	sp, r7
 801174e:	bd80      	pop	{r7, pc}

08011750 <_ZSt3getILj1EJP25TfLiteLSHProjectionParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8011750:	b580      	push	{r7, lr}
 8011752:	b082      	sub	sp, #8
 8011754:	af00      	add	r7, sp, #0
 8011756:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	4618      	mov	r0, r3
 801175c:	f001 fc76 	bl	801304c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8011760:	4603      	mov	r3, r0
 8011762:	4618      	mov	r0, r3
 8011764:	3708      	adds	r7, #8
 8011766:	46bd      	mov	sp, r7
 8011768:	bd80      	pop	{r7, pc}

0801176a <_ZNSt11_Tuple_implILj0EJP25TfLiteLSHProjectionParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 801176a:	b590      	push	{r4, r7, lr}
 801176c:	b085      	sub	sp, #20
 801176e:	af00      	add	r7, sp, #0
 8011770:	60f8      	str	r0, [r7, #12]
 8011772:	60b9      	str	r1, [r7, #8]
 8011774:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8011776:	68fc      	ldr	r4, [r7, #12]
 8011778:	6878      	ldr	r0, [r7, #4]
 801177a:	f7fa fe5e 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 801177e:	4603      	mov	r3, r0
 8011780:	4619      	mov	r1, r3
 8011782:	4620      	mov	r0, r4
 8011784:	f001 fc6e 	bl	8013064 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	1d1c      	adds	r4, r3, #4
 801178c:	68b8      	ldr	r0, [r7, #8]
 801178e:	f7fe f971 	bl	800fa74 <_ZSt7forwardIRP25TfLiteLSHProjectionParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8011792:	4603      	mov	r3, r0
 8011794:	4619      	mov	r1, r3
 8011796:	4620      	mov	r0, r4
 8011798:	f001 fccd 	bl	8013136 <_ZNSt10_Head_baseILj0EP25TfLiteLSHProjectionParamsLb0EEC1IRS1_EEOT_>
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	4618      	mov	r0, r3
 80117a0:	3714      	adds	r7, #20
 80117a2:	46bd      	mov	sp, r7
 80117a4:	bd90      	pop	{r4, r7, pc}

080117a6 <_ZSt3getILj0EJP25TfLiteLSHProjectionParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 80117a6:	b580      	push	{r7, lr}
 80117a8:	b082      	sub	sp, #8
 80117aa:	af00      	add	r7, sp, #0
 80117ac:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	4618      	mov	r0, r3
 80117b2:	f001 fcd1 	bl	8013158 <_ZSt12__get_helperILj0EP25TfLiteLSHProjectionParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80117b6:	4603      	mov	r3, r0
 80117b8:	4618      	mov	r0, r3
 80117ba:	3708      	adds	r7, #8
 80117bc:	46bd      	mov	sp, r7
 80117be:	bd80      	pop	{r7, pc}

080117c0 <_ZSt12__get_helperILj0EP16TfLitePoolParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80117c0:	b580      	push	{r7, lr}
 80117c2:	b082      	sub	sp, #8
 80117c4:	af00      	add	r7, sp, #0
 80117c6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80117c8:	6878      	ldr	r0, [r7, #4]
 80117ca:	f001 fcd1 	bl	8013170 <_ZNSt11_Tuple_implILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 80117ce:	4603      	mov	r3, r0
 80117d0:	4618      	mov	r0, r3
 80117d2:	3708      	adds	r7, #8
 80117d4:	46bd      	mov	sp, r7
 80117d6:	bd80      	pop	{r7, pc}

080117d8 <_ZSt3getILj1EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80117d8:	b580      	push	{r7, lr}
 80117da:	b082      	sub	sp, #8
 80117dc:	af00      	add	r7, sp, #0
 80117de:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	4618      	mov	r0, r3
 80117e4:	f001 fc32 	bl	801304c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80117e8:	4603      	mov	r3, r0
 80117ea:	4618      	mov	r0, r3
 80117ec:	3708      	adds	r7, #8
 80117ee:	46bd      	mov	sp, r7
 80117f0:	bd80      	pop	{r7, pc}

080117f2 <_ZNSt11_Tuple_implILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 80117f2:	b590      	push	{r4, r7, lr}
 80117f4:	b085      	sub	sp, #20
 80117f6:	af00      	add	r7, sp, #0
 80117f8:	60f8      	str	r0, [r7, #12]
 80117fa:	60b9      	str	r1, [r7, #8]
 80117fc:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 80117fe:	68fc      	ldr	r4, [r7, #12]
 8011800:	6878      	ldr	r0, [r7, #4]
 8011802:	f7fa fe1a 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8011806:	4603      	mov	r3, r0
 8011808:	4619      	mov	r1, r3
 801180a:	4620      	mov	r0, r4
 801180c:	f001 fc2a 	bl	8013064 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	1d1c      	adds	r4, r3, #4
 8011814:	68b8      	ldr	r0, [r7, #8]
 8011816:	f7fe f979 	bl	800fb0c <_ZSt7forwardIRP16TfLitePoolParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 801181a:	4603      	mov	r3, r0
 801181c:	4619      	mov	r1, r3
 801181e:	4620      	mov	r0, r4
 8011820:	f001 fcb4 	bl	801318c <_ZNSt10_Head_baseILj0EP16TfLitePoolParamsLb0EEC1IRS1_EEOT_>
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	4618      	mov	r0, r3
 8011828:	3714      	adds	r7, #20
 801182a:	46bd      	mov	sp, r7
 801182c:	bd90      	pop	{r4, r7, pc}

0801182e <_ZSt3getILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 801182e:	b580      	push	{r7, lr}
 8011830:	b082      	sub	sp, #8
 8011832:	af00      	add	r7, sp, #0
 8011834:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	4618      	mov	r0, r3
 801183a:	f001 fcb8 	bl	80131ae <_ZSt12__get_helperILj0EP16TfLitePoolParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 801183e:	4603      	mov	r3, r0
 8011840:	4618      	mov	r0, r3
 8011842:	3708      	adds	r7, #8
 8011844:	46bd      	mov	sp, r7
 8011846:	bd80      	pop	{r7, pc}

08011848 <_ZSt12__get_helperILj0EP25TfLiteDepthwiseConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8011848:	b580      	push	{r7, lr}
 801184a:	b082      	sub	sp, #8
 801184c:	af00      	add	r7, sp, #0
 801184e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8011850:	6878      	ldr	r0, [r7, #4]
 8011852:	f001 fcb8 	bl	80131c6 <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8011856:	4603      	mov	r3, r0
 8011858:	4618      	mov	r0, r3
 801185a:	3708      	adds	r7, #8
 801185c:	46bd      	mov	sp, r7
 801185e:	bd80      	pop	{r7, pc}

08011860 <_ZSt3getILj1EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8011860:	b580      	push	{r7, lr}
 8011862:	b082      	sub	sp, #8
 8011864:	af00      	add	r7, sp, #0
 8011866:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	4618      	mov	r0, r3
 801186c:	f001 fbee 	bl	801304c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8011870:	4603      	mov	r3, r0
 8011872:	4618      	mov	r0, r3
 8011874:	3708      	adds	r7, #8
 8011876:	46bd      	mov	sp, r7
 8011878:	bd80      	pop	{r7, pc}

0801187a <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 801187a:	b590      	push	{r4, r7, lr}
 801187c:	b085      	sub	sp, #20
 801187e:	af00      	add	r7, sp, #0
 8011880:	60f8      	str	r0, [r7, #12]
 8011882:	60b9      	str	r1, [r7, #8]
 8011884:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8011886:	68fc      	ldr	r4, [r7, #12]
 8011888:	6878      	ldr	r0, [r7, #4]
 801188a:	f7fa fdd6 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 801188e:	4603      	mov	r3, r0
 8011890:	4619      	mov	r1, r3
 8011892:	4620      	mov	r0, r4
 8011894:	f001 fbe6 	bl	8013064 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	1d1c      	adds	r4, r3, #4
 801189c:	68b8      	ldr	r0, [r7, #8]
 801189e:	f7fe f981 	bl	800fba4 <_ZSt7forwardIRP25TfLiteDepthwiseConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80118a2:	4603      	mov	r3, r0
 80118a4:	4619      	mov	r1, r3
 80118a6:	4620      	mov	r0, r4
 80118a8:	f001 fc9b 	bl	80131e2 <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EEC1IRS1_EEOT_>
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	4618      	mov	r0, r3
 80118b0:	3714      	adds	r7, #20
 80118b2:	46bd      	mov	sp, r7
 80118b4:	bd90      	pop	{r4, r7, pc}

080118b6 <_ZSt3getILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 80118b6:	b580      	push	{r7, lr}
 80118b8:	b082      	sub	sp, #8
 80118ba:	af00      	add	r7, sp, #0
 80118bc:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	4618      	mov	r0, r3
 80118c2:	f001 fc9f 	bl	8013204 <_ZSt12__get_helperILj0EP25TfLiteDepthwiseConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80118c6:	4603      	mov	r3, r0
 80118c8:	4618      	mov	r0, r3
 80118ca:	3708      	adds	r7, #8
 80118cc:	46bd      	mov	sp, r7
 80118ce:	bd80      	pop	{r7, pc}

080118d0 <_ZSt12__get_helperILj0EP16TfLiteSVDFParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80118d0:	b580      	push	{r7, lr}
 80118d2:	b082      	sub	sp, #8
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80118d8:	6878      	ldr	r0, [r7, #4]
 80118da:	f001 fc9f 	bl	801321c <_ZNSt11_Tuple_implILj0EJP16TfLiteSVDFParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 80118de:	4603      	mov	r3, r0
 80118e0:	4618      	mov	r0, r3
 80118e2:	3708      	adds	r7, #8
 80118e4:	46bd      	mov	sp, r7
 80118e6:	bd80      	pop	{r7, pc}

080118e8 <_ZSt3getILj1EJP16TfLiteSVDFParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80118e8:	b580      	push	{r7, lr}
 80118ea:	b082      	sub	sp, #8
 80118ec:	af00      	add	r7, sp, #0
 80118ee:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	4618      	mov	r0, r3
 80118f4:	f001 fbaa 	bl	801304c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80118f8:	4603      	mov	r3, r0
 80118fa:	4618      	mov	r0, r3
 80118fc:	3708      	adds	r7, #8
 80118fe:	46bd      	mov	sp, r7
 8011900:	bd80      	pop	{r7, pc}

08011902 <_ZNSt11_Tuple_implILj0EJP16TfLiteSVDFParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8011902:	b590      	push	{r4, r7, lr}
 8011904:	b085      	sub	sp, #20
 8011906:	af00      	add	r7, sp, #0
 8011908:	60f8      	str	r0, [r7, #12]
 801190a:	60b9      	str	r1, [r7, #8]
 801190c:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 801190e:	68fc      	ldr	r4, [r7, #12]
 8011910:	6878      	ldr	r0, [r7, #4]
 8011912:	f7fa fd92 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8011916:	4603      	mov	r3, r0
 8011918:	4619      	mov	r1, r3
 801191a:	4620      	mov	r0, r4
 801191c:	f001 fba2 	bl	8013064 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	1d1c      	adds	r4, r3, #4
 8011924:	68b8      	ldr	r0, [r7, #8]
 8011926:	f7fe f989 	bl	800fc3c <_ZSt7forwardIRP16TfLiteSVDFParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 801192a:	4603      	mov	r3, r0
 801192c:	4619      	mov	r1, r3
 801192e:	4620      	mov	r0, r4
 8011930:	f001 fc82 	bl	8013238 <_ZNSt10_Head_baseILj0EP16TfLiteSVDFParamsLb0EEC1IRS1_EEOT_>
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	4618      	mov	r0, r3
 8011938:	3714      	adds	r7, #20
 801193a:	46bd      	mov	sp, r7
 801193c:	bd90      	pop	{r4, r7, pc}

0801193e <_ZSt3getILj0EJP16TfLiteSVDFParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 801193e:	b580      	push	{r7, lr}
 8011940:	b082      	sub	sp, #8
 8011942:	af00      	add	r7, sp, #0
 8011944:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	4618      	mov	r0, r3
 801194a:	f001 fc86 	bl	801325a <_ZSt12__get_helperILj0EP16TfLiteSVDFParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 801194e:	4603      	mov	r3, r0
 8011950:	4618      	mov	r0, r3
 8011952:	3708      	adds	r7, #8
 8011954:	46bd      	mov	sp, r7
 8011956:	bd80      	pop	{r7, pc}

08011958 <_ZSt12__get_helperILj0EP23TfLiteSequenceRNNParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8011958:	b580      	push	{r7, lr}
 801195a:	b082      	sub	sp, #8
 801195c:	af00      	add	r7, sp, #0
 801195e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8011960:	6878      	ldr	r0, [r7, #4]
 8011962:	f001 fc86 	bl	8013272 <_ZNSt11_Tuple_implILj0EJP23TfLiteSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8011966:	4603      	mov	r3, r0
 8011968:	4618      	mov	r0, r3
 801196a:	3708      	adds	r7, #8
 801196c:	46bd      	mov	sp, r7
 801196e:	bd80      	pop	{r7, pc}

08011970 <_ZSt3getILj1EJP23TfLiteSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8011970:	b580      	push	{r7, lr}
 8011972:	b082      	sub	sp, #8
 8011974:	af00      	add	r7, sp, #0
 8011976:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	4618      	mov	r0, r3
 801197c:	f001 fb66 	bl	801304c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8011980:	4603      	mov	r3, r0
 8011982:	4618      	mov	r0, r3
 8011984:	3708      	adds	r7, #8
 8011986:	46bd      	mov	sp, r7
 8011988:	bd80      	pop	{r7, pc}

0801198a <_ZNSt11_Tuple_implILj0EJP23TfLiteSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 801198a:	b590      	push	{r4, r7, lr}
 801198c:	b085      	sub	sp, #20
 801198e:	af00      	add	r7, sp, #0
 8011990:	60f8      	str	r0, [r7, #12]
 8011992:	60b9      	str	r1, [r7, #8]
 8011994:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8011996:	68fc      	ldr	r4, [r7, #12]
 8011998:	6878      	ldr	r0, [r7, #4]
 801199a:	f7fa fd4e 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 801199e:	4603      	mov	r3, r0
 80119a0:	4619      	mov	r1, r3
 80119a2:	4620      	mov	r0, r4
 80119a4:	f001 fb5e 	bl	8013064 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	1d1c      	adds	r4, r3, #4
 80119ac:	68b8      	ldr	r0, [r7, #8]
 80119ae:	f7fe f991 	bl	800fcd4 <_ZSt7forwardIRP23TfLiteSequenceRNNParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80119b2:	4603      	mov	r3, r0
 80119b4:	4619      	mov	r1, r3
 80119b6:	4620      	mov	r0, r4
 80119b8:	f001 fc69 	bl	801328e <_ZNSt10_Head_baseILj0EP23TfLiteSequenceRNNParamsLb0EEC1IRS1_EEOT_>
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	4618      	mov	r0, r3
 80119c0:	3714      	adds	r7, #20
 80119c2:	46bd      	mov	sp, r7
 80119c4:	bd90      	pop	{r4, r7, pc}

080119c6 <_ZSt3getILj0EJP23TfLiteSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 80119c6:	b580      	push	{r7, lr}
 80119c8:	b082      	sub	sp, #8
 80119ca:	af00      	add	r7, sp, #0
 80119cc:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	4618      	mov	r0, r3
 80119d2:	f001 fc6d 	bl	80132b0 <_ZSt12__get_helperILj0EP23TfLiteSequenceRNNParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80119d6:	4603      	mov	r3, r0
 80119d8:	4618      	mov	r0, r3
 80119da:	3708      	adds	r7, #8
 80119dc:	46bd      	mov	sp, r7
 80119de:	bd80      	pop	{r7, pc}

080119e0 <_ZSt12__get_helperILj0EP36TfLiteBidirectionalSequenceRNNParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80119e0:	b580      	push	{r7, lr}
 80119e2:	b082      	sub	sp, #8
 80119e4:	af00      	add	r7, sp, #0
 80119e6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80119e8:	6878      	ldr	r0, [r7, #4]
 80119ea:	f001 fc6d 	bl	80132c8 <_ZNSt11_Tuple_implILj0EJP36TfLiteBidirectionalSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 80119ee:	4603      	mov	r3, r0
 80119f0:	4618      	mov	r0, r3
 80119f2:	3708      	adds	r7, #8
 80119f4:	46bd      	mov	sp, r7
 80119f6:	bd80      	pop	{r7, pc}

080119f8 <_ZSt3getILj1EJP36TfLiteBidirectionalSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80119f8:	b580      	push	{r7, lr}
 80119fa:	b082      	sub	sp, #8
 80119fc:	af00      	add	r7, sp, #0
 80119fe:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	4618      	mov	r0, r3
 8011a04:	f001 fb22 	bl	801304c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8011a08:	4603      	mov	r3, r0
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	3708      	adds	r7, #8
 8011a0e:	46bd      	mov	sp, r7
 8011a10:	bd80      	pop	{r7, pc}

08011a12 <_ZNSt11_Tuple_implILj0EJP36TfLiteBidirectionalSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8011a12:	b590      	push	{r4, r7, lr}
 8011a14:	b085      	sub	sp, #20
 8011a16:	af00      	add	r7, sp, #0
 8011a18:	60f8      	str	r0, [r7, #12]
 8011a1a:	60b9      	str	r1, [r7, #8]
 8011a1c:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8011a1e:	68fc      	ldr	r4, [r7, #12]
 8011a20:	6878      	ldr	r0, [r7, #4]
 8011a22:	f7fa fd0a 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8011a26:	4603      	mov	r3, r0
 8011a28:	4619      	mov	r1, r3
 8011a2a:	4620      	mov	r0, r4
 8011a2c:	f001 fb1a 	bl	8013064 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	1d1c      	adds	r4, r3, #4
 8011a34:	68b8      	ldr	r0, [r7, #8]
 8011a36:	f7fe f999 	bl	800fd6c <_ZSt7forwardIRP36TfLiteBidirectionalSequenceRNNParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8011a3a:	4603      	mov	r3, r0
 8011a3c:	4619      	mov	r1, r3
 8011a3e:	4620      	mov	r0, r4
 8011a40:	f001 fc50 	bl	80132e4 <_ZNSt10_Head_baseILj0EP36TfLiteBidirectionalSequenceRNNParamsLb0EEC1IRS1_EEOT_>
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	4618      	mov	r0, r3
 8011a48:	3714      	adds	r7, #20
 8011a4a:	46bd      	mov	sp, r7
 8011a4c:	bd90      	pop	{r4, r7, pc}

08011a4e <_ZSt3getILj0EJP36TfLiteBidirectionalSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 8011a4e:	b580      	push	{r7, lr}
 8011a50:	b082      	sub	sp, #8
 8011a52:	af00      	add	r7, sp, #0
 8011a54:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	4618      	mov	r0, r3
 8011a5a:	f001 fc54 	bl	8013306 <_ZSt12__get_helperILj0EP36TfLiteBidirectionalSequenceRNNParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8011a5e:	4603      	mov	r3, r0
 8011a60:	4618      	mov	r0, r3
 8011a62:	3708      	adds	r7, #8
 8011a64:	46bd      	mov	sp, r7
 8011a66:	bd80      	pop	{r7, pc}

08011a68 <_ZSt12__get_helperILj0EP15TfLiteRNNParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8011a68:	b580      	push	{r7, lr}
 8011a6a:	b082      	sub	sp, #8
 8011a6c:	af00      	add	r7, sp, #0
 8011a6e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8011a70:	6878      	ldr	r0, [r7, #4]
 8011a72:	f001 fc54 	bl	801331e <_ZNSt11_Tuple_implILj0EJP15TfLiteRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8011a76:	4603      	mov	r3, r0
 8011a78:	4618      	mov	r0, r3
 8011a7a:	3708      	adds	r7, #8
 8011a7c:	46bd      	mov	sp, r7
 8011a7e:	bd80      	pop	{r7, pc}

08011a80 <_ZSt3getILj1EJP15TfLiteRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8011a80:	b580      	push	{r7, lr}
 8011a82:	b082      	sub	sp, #8
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	f001 fade 	bl	801304c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8011a90:	4603      	mov	r3, r0
 8011a92:	4618      	mov	r0, r3
 8011a94:	3708      	adds	r7, #8
 8011a96:	46bd      	mov	sp, r7
 8011a98:	bd80      	pop	{r7, pc}

08011a9a <_ZNSt11_Tuple_implILj0EJP15TfLiteRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8011a9a:	b590      	push	{r4, r7, lr}
 8011a9c:	b085      	sub	sp, #20
 8011a9e:	af00      	add	r7, sp, #0
 8011aa0:	60f8      	str	r0, [r7, #12]
 8011aa2:	60b9      	str	r1, [r7, #8]
 8011aa4:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8011aa6:	68fc      	ldr	r4, [r7, #12]
 8011aa8:	6878      	ldr	r0, [r7, #4]
 8011aaa:	f7fa fcc6 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8011aae:	4603      	mov	r3, r0
 8011ab0:	4619      	mov	r1, r3
 8011ab2:	4620      	mov	r0, r4
 8011ab4:	f001 fad6 	bl	8013064 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	1d1c      	adds	r4, r3, #4
 8011abc:	68b8      	ldr	r0, [r7, #8]
 8011abe:	f7fe f9a1 	bl	800fe04 <_ZSt7forwardIRP15TfLiteRNNParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8011ac2:	4603      	mov	r3, r0
 8011ac4:	4619      	mov	r1, r3
 8011ac6:	4620      	mov	r0, r4
 8011ac8:	f001 fc37 	bl	801333a <_ZNSt10_Head_baseILj0EP15TfLiteRNNParamsLb0EEC1IRS1_EEOT_>
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	4618      	mov	r0, r3
 8011ad0:	3714      	adds	r7, #20
 8011ad2:	46bd      	mov	sp, r7
 8011ad4:	bd90      	pop	{r4, r7, pc}

08011ad6 <_ZSt3getILj0EJP15TfLiteRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 8011ad6:	b580      	push	{r7, lr}
 8011ad8:	b082      	sub	sp, #8
 8011ada:	af00      	add	r7, sp, #0
 8011adc:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	4618      	mov	r0, r3
 8011ae2:	f001 fc3b 	bl	801335c <_ZSt12__get_helperILj0EP15TfLiteRNNParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8011ae6:	4603      	mov	r3, r0
 8011ae8:	4618      	mov	r0, r3
 8011aea:	3708      	adds	r7, #8
 8011aec:	46bd      	mov	sp, r7
 8011aee:	bd80      	pop	{r7, pc}

08011af0 <_ZSt12__get_helperILj0EP33TfLiteEmbeddingLookupSparseParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8011af0:	b580      	push	{r7, lr}
 8011af2:	b082      	sub	sp, #8
 8011af4:	af00      	add	r7, sp, #0
 8011af6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8011af8:	6878      	ldr	r0, [r7, #4]
 8011afa:	f001 fc3b 	bl	8013374 <_ZNSt11_Tuple_implILj0EJP33TfLiteEmbeddingLookupSparseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8011afe:	4603      	mov	r3, r0
 8011b00:	4618      	mov	r0, r3
 8011b02:	3708      	adds	r7, #8
 8011b04:	46bd      	mov	sp, r7
 8011b06:	bd80      	pop	{r7, pc}

08011b08 <_ZSt3getILj1EJP33TfLiteEmbeddingLookupSparseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8011b08:	b580      	push	{r7, lr}
 8011b0a:	b082      	sub	sp, #8
 8011b0c:	af00      	add	r7, sp, #0
 8011b0e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	4618      	mov	r0, r3
 8011b14:	f001 fa9a 	bl	801304c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8011b18:	4603      	mov	r3, r0
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	3708      	adds	r7, #8
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	bd80      	pop	{r7, pc}

08011b22 <_ZNSt11_Tuple_implILj0EJP33TfLiteEmbeddingLookupSparseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8011b22:	b590      	push	{r4, r7, lr}
 8011b24:	b085      	sub	sp, #20
 8011b26:	af00      	add	r7, sp, #0
 8011b28:	60f8      	str	r0, [r7, #12]
 8011b2a:	60b9      	str	r1, [r7, #8]
 8011b2c:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8011b2e:	68fc      	ldr	r4, [r7, #12]
 8011b30:	6878      	ldr	r0, [r7, #4]
 8011b32:	f7fa fc82 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8011b36:	4603      	mov	r3, r0
 8011b38:	4619      	mov	r1, r3
 8011b3a:	4620      	mov	r0, r4
 8011b3c:	f001 fa92 	bl	8013064 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	1d1c      	adds	r4, r3, #4
 8011b44:	68b8      	ldr	r0, [r7, #8]
 8011b46:	f7fe f9a9 	bl	800fe9c <_ZSt7forwardIRP33TfLiteEmbeddingLookupSparseParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8011b4a:	4603      	mov	r3, r0
 8011b4c:	4619      	mov	r1, r3
 8011b4e:	4620      	mov	r0, r4
 8011b50:	f001 fc1e 	bl	8013390 <_ZNSt10_Head_baseILj0EP33TfLiteEmbeddingLookupSparseParamsLb0EEC1IRS1_EEOT_>
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	4618      	mov	r0, r3
 8011b58:	3714      	adds	r7, #20
 8011b5a:	46bd      	mov	sp, r7
 8011b5c:	bd90      	pop	{r4, r7, pc}

08011b5e <_ZSt3getILj0EJP33TfLiteEmbeddingLookupSparseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 8011b5e:	b580      	push	{r7, lr}
 8011b60:	b082      	sub	sp, #8
 8011b62:	af00      	add	r7, sp, #0
 8011b64:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	4618      	mov	r0, r3
 8011b6a:	f001 fc22 	bl	80133b2 <_ZSt12__get_helperILj0EP33TfLiteEmbeddingLookupSparseParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8011b6e:	4603      	mov	r3, r0
 8011b70:	4618      	mov	r0, r3
 8011b72:	3708      	adds	r7, #8
 8011b74:	46bd      	mov	sp, r7
 8011b76:	bd80      	pop	{r7, pc}

08011b78 <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8011b78:	b580      	push	{r7, lr}
 8011b7a:	b082      	sub	sp, #8
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8011b80:	6878      	ldr	r0, [r7, #4]
 8011b82:	f001 fc22 	bl	80133ca <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8011b86:	4603      	mov	r3, r0
 8011b88:	4618      	mov	r0, r3
 8011b8a:	3708      	adds	r7, #8
 8011b8c:	46bd      	mov	sp, r7
 8011b8e:	bd80      	pop	{r7, pc}

08011b90 <_ZSt3getILj1EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8011b90:	b580      	push	{r7, lr}
 8011b92:	b082      	sub	sp, #8
 8011b94:	af00      	add	r7, sp, #0
 8011b96:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	4618      	mov	r0, r3
 8011b9c:	f001 fa56 	bl	801304c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8011ba0:	4603      	mov	r3, r0
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	3708      	adds	r7, #8
 8011ba6:	46bd      	mov	sp, r7
 8011ba8:	bd80      	pop	{r7, pc}

08011baa <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8011baa:	b590      	push	{r4, r7, lr}
 8011bac:	b085      	sub	sp, #20
 8011bae:	af00      	add	r7, sp, #0
 8011bb0:	60f8      	str	r0, [r7, #12]
 8011bb2:	60b9      	str	r1, [r7, #8]
 8011bb4:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8011bb6:	68fc      	ldr	r4, [r7, #12]
 8011bb8:	6878      	ldr	r0, [r7, #4]
 8011bba:	f7fa fc3e 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8011bbe:	4603      	mov	r3, r0
 8011bc0:	4619      	mov	r1, r3
 8011bc2:	4620      	mov	r0, r4
 8011bc4:	f001 fa4e 	bl	8013064 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	1d1c      	adds	r4, r3, #4
 8011bcc:	68b8      	ldr	r0, [r7, #8]
 8011bce:	f7fe f9b1 	bl	800ff34 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8011bd2:	4603      	mov	r3, r0
 8011bd4:	4619      	mov	r1, r3
 8011bd6:	4620      	mov	r0, r4
 8011bd8:	f001 fc05 	bl	80133e6 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EEC1IRS1_EEOT_>
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	4618      	mov	r0, r3
 8011be0:	3714      	adds	r7, #20
 8011be2:	46bd      	mov	sp, r7
 8011be4:	bd90      	pop	{r4, r7, pc}

08011be6 <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 8011be6:	b580      	push	{r7, lr}
 8011be8:	b082      	sub	sp, #8
 8011bea:	af00      	add	r7, sp, #0
 8011bec:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	4618      	mov	r0, r3
 8011bf2:	f001 fc09 	bl	8013408 <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8011bf6:	4603      	mov	r3, r0
 8011bf8:	4618      	mov	r0, r3
 8011bfa:	3708      	adds	r7, #8
 8011bfc:	46bd      	mov	sp, r7
 8011bfe:	bd80      	pop	{r7, pc}

08011c00 <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8011c00:	b580      	push	{r7, lr}
 8011c02:	b082      	sub	sp, #8
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8011c08:	6878      	ldr	r0, [r7, #4]
 8011c0a:	f001 fc09 	bl	8013420 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8011c0e:	4603      	mov	r3, r0
 8011c10:	4618      	mov	r0, r3
 8011c12:	3708      	adds	r7, #8
 8011c14:	46bd      	mov	sp, r7
 8011c16:	bd80      	pop	{r7, pc}

08011c18 <_ZSt3getILj1EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8011c18:	b580      	push	{r7, lr}
 8011c1a:	b082      	sub	sp, #8
 8011c1c:	af00      	add	r7, sp, #0
 8011c1e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	4618      	mov	r0, r3
 8011c24:	f001 fa12 	bl	801304c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8011c28:	4603      	mov	r3, r0
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	3708      	adds	r7, #8
 8011c2e:	46bd      	mov	sp, r7
 8011c30:	bd80      	pop	{r7, pc}

08011c32 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8011c32:	b590      	push	{r4, r7, lr}
 8011c34:	b085      	sub	sp, #20
 8011c36:	af00      	add	r7, sp, #0
 8011c38:	60f8      	str	r0, [r7, #12]
 8011c3a:	60b9      	str	r1, [r7, #8]
 8011c3c:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8011c3e:	68fc      	ldr	r4, [r7, #12]
 8011c40:	6878      	ldr	r0, [r7, #4]
 8011c42:	f7fa fbfa 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8011c46:	4603      	mov	r3, r0
 8011c48:	4619      	mov	r1, r3
 8011c4a:	4620      	mov	r0, r4
 8011c4c:	f001 fa0a 	bl	8013064 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	1d1c      	adds	r4, r3, #4
 8011c54:	68b8      	ldr	r0, [r7, #8]
 8011c56:	f7fe f9b9 	bl	800ffcc <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8011c5a:	4603      	mov	r3, r0
 8011c5c:	4619      	mov	r1, r3
 8011c5e:	4620      	mov	r0, r4
 8011c60:	f001 fbec 	bl	801343c <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EEC1IRS1_EEOT_>
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	4618      	mov	r0, r3
 8011c68:	3714      	adds	r7, #20
 8011c6a:	46bd      	mov	sp, r7
 8011c6c:	bd90      	pop	{r4, r7, pc}

08011c6e <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 8011c6e:	b580      	push	{r7, lr}
 8011c70:	b082      	sub	sp, #8
 8011c72:	af00      	add	r7, sp, #0
 8011c74:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	4618      	mov	r0, r3
 8011c7a:	f001 fbf0 	bl	801345e <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8011c7e:	4603      	mov	r3, r0
 8011c80:	4618      	mov	r0, r3
 8011c82:	3708      	adds	r7, #8
 8011c84:	46bd      	mov	sp, r7
 8011c86:	bd80      	pop	{r7, pc}

08011c88 <_ZSt12__get_helperILj0EP25TfLiteConcatenationParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8011c88:	b580      	push	{r7, lr}
 8011c8a:	b082      	sub	sp, #8
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8011c90:	6878      	ldr	r0, [r7, #4]
 8011c92:	f001 fbf0 	bl	8013476 <_ZNSt11_Tuple_implILj0EJP25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8011c96:	4603      	mov	r3, r0
 8011c98:	4618      	mov	r0, r3
 8011c9a:	3708      	adds	r7, #8
 8011c9c:	46bd      	mov	sp, r7
 8011c9e:	bd80      	pop	{r7, pc}

08011ca0 <_ZSt3getILj1EJP25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8011ca0:	b580      	push	{r7, lr}
 8011ca2:	b082      	sub	sp, #8
 8011ca4:	af00      	add	r7, sp, #0
 8011ca6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	4618      	mov	r0, r3
 8011cac:	f001 f9ce 	bl	801304c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8011cb0:	4603      	mov	r3, r0
 8011cb2:	4618      	mov	r0, r3
 8011cb4:	3708      	adds	r7, #8
 8011cb6:	46bd      	mov	sp, r7
 8011cb8:	bd80      	pop	{r7, pc}

08011cba <_ZNSt11_Tuple_implILj0EJP25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8011cba:	b590      	push	{r4, r7, lr}
 8011cbc:	b085      	sub	sp, #20
 8011cbe:	af00      	add	r7, sp, #0
 8011cc0:	60f8      	str	r0, [r7, #12]
 8011cc2:	60b9      	str	r1, [r7, #8]
 8011cc4:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8011cc6:	68fc      	ldr	r4, [r7, #12]
 8011cc8:	6878      	ldr	r0, [r7, #4]
 8011cca:	f7fa fbb6 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8011cce:	4603      	mov	r3, r0
 8011cd0:	4619      	mov	r1, r3
 8011cd2:	4620      	mov	r0, r4
 8011cd4:	f001 f9c6 	bl	8013064 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	1d1c      	adds	r4, r3, #4
 8011cdc:	68b8      	ldr	r0, [r7, #8]
 8011cde:	f7fe f9c1 	bl	8010064 <_ZSt7forwardIRP25TfLiteConcatenationParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8011ce2:	4603      	mov	r3, r0
 8011ce4:	4619      	mov	r1, r3
 8011ce6:	4620      	mov	r0, r4
 8011ce8:	f001 fbd3 	bl	8013492 <_ZNSt10_Head_baseILj0EP25TfLiteConcatenationParamsLb0EEC1IRS1_EEOT_>
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	4618      	mov	r0, r3
 8011cf0:	3714      	adds	r7, #20
 8011cf2:	46bd      	mov	sp, r7
 8011cf4:	bd90      	pop	{r4, r7, pc}

08011cf6 <_ZSt3getILj0EJP25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 8011cf6:	b580      	push	{r7, lr}
 8011cf8:	b082      	sub	sp, #8
 8011cfa:	af00      	add	r7, sp, #0
 8011cfc:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	4618      	mov	r0, r3
 8011d02:	f001 fbd7 	bl	80134b4 <_ZSt12__get_helperILj0EP25TfLiteConcatenationParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8011d06:	4603      	mov	r3, r0
 8011d08:	4618      	mov	r0, r3
 8011d0a:	3708      	adds	r7, #8
 8011d0c:	46bd      	mov	sp, r7
 8011d0e:	bd80      	pop	{r7, pc}

08011d10 <_ZSt12__get_helperILj0EP15TfLiteMulParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8011d10:	b580      	push	{r7, lr}
 8011d12:	b082      	sub	sp, #8
 8011d14:	af00      	add	r7, sp, #0
 8011d16:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8011d18:	6878      	ldr	r0, [r7, #4]
 8011d1a:	f001 fbd7 	bl	80134cc <_ZNSt11_Tuple_implILj0EJP15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8011d1e:	4603      	mov	r3, r0
 8011d20:	4618      	mov	r0, r3
 8011d22:	3708      	adds	r7, #8
 8011d24:	46bd      	mov	sp, r7
 8011d26:	bd80      	pop	{r7, pc}

08011d28 <_ZSt3getILj1EJP15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8011d28:	b580      	push	{r7, lr}
 8011d2a:	b082      	sub	sp, #8
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	4618      	mov	r0, r3
 8011d34:	f001 f98a 	bl	801304c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8011d38:	4603      	mov	r3, r0
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	3708      	adds	r7, #8
 8011d3e:	46bd      	mov	sp, r7
 8011d40:	bd80      	pop	{r7, pc}

08011d42 <_ZNSt11_Tuple_implILj0EJP15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8011d42:	b590      	push	{r4, r7, lr}
 8011d44:	b085      	sub	sp, #20
 8011d46:	af00      	add	r7, sp, #0
 8011d48:	60f8      	str	r0, [r7, #12]
 8011d4a:	60b9      	str	r1, [r7, #8]
 8011d4c:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8011d4e:	68fc      	ldr	r4, [r7, #12]
 8011d50:	6878      	ldr	r0, [r7, #4]
 8011d52:	f7fa fb72 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8011d56:	4603      	mov	r3, r0
 8011d58:	4619      	mov	r1, r3
 8011d5a:	4620      	mov	r0, r4
 8011d5c:	f001 f982 	bl	8013064 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	1d1c      	adds	r4, r3, #4
 8011d64:	68b8      	ldr	r0, [r7, #8]
 8011d66:	f7fe f9c9 	bl	80100fc <_ZSt7forwardIRP15TfLiteMulParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8011d6a:	4603      	mov	r3, r0
 8011d6c:	4619      	mov	r1, r3
 8011d6e:	4620      	mov	r0, r4
 8011d70:	f001 fbba 	bl	80134e8 <_ZNSt10_Head_baseILj0EP15TfLiteMulParamsLb0EEC1IRS1_EEOT_>
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	4618      	mov	r0, r3
 8011d78:	3714      	adds	r7, #20
 8011d7a:	46bd      	mov	sp, r7
 8011d7c:	bd90      	pop	{r4, r7, pc}

08011d7e <_ZSt3getILj0EJP15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 8011d7e:	b580      	push	{r7, lr}
 8011d80:	b082      	sub	sp, #8
 8011d82:	af00      	add	r7, sp, #0
 8011d84:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	4618      	mov	r0, r3
 8011d8a:	f001 fbbe 	bl	801350a <_ZSt12__get_helperILj0EP15TfLiteMulParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8011d8e:	4603      	mov	r3, r0
 8011d90:	4618      	mov	r0, r3
 8011d92:	3708      	adds	r7, #8
 8011d94:	46bd      	mov	sp, r7
 8011d96:	bd80      	pop	{r7, pc}

08011d98 <_ZSt12__get_helperILj0EP15TfLiteAddParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8011d98:	b580      	push	{r7, lr}
 8011d9a:	b082      	sub	sp, #8
 8011d9c:	af00      	add	r7, sp, #0
 8011d9e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8011da0:	6878      	ldr	r0, [r7, #4]
 8011da2:	f001 fbbe 	bl	8013522 <_ZNSt11_Tuple_implILj0EJP15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8011da6:	4603      	mov	r3, r0
 8011da8:	4618      	mov	r0, r3
 8011daa:	3708      	adds	r7, #8
 8011dac:	46bd      	mov	sp, r7
 8011dae:	bd80      	pop	{r7, pc}

08011db0 <_ZSt3getILj1EJP15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8011db0:	b580      	push	{r7, lr}
 8011db2:	b082      	sub	sp, #8
 8011db4:	af00      	add	r7, sp, #0
 8011db6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	4618      	mov	r0, r3
 8011dbc:	f001 f946 	bl	801304c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8011dc0:	4603      	mov	r3, r0
 8011dc2:	4618      	mov	r0, r3
 8011dc4:	3708      	adds	r7, #8
 8011dc6:	46bd      	mov	sp, r7
 8011dc8:	bd80      	pop	{r7, pc}

08011dca <_ZNSt11_Tuple_implILj0EJP15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8011dca:	b590      	push	{r4, r7, lr}
 8011dcc:	b085      	sub	sp, #20
 8011dce:	af00      	add	r7, sp, #0
 8011dd0:	60f8      	str	r0, [r7, #12]
 8011dd2:	60b9      	str	r1, [r7, #8]
 8011dd4:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8011dd6:	68fc      	ldr	r4, [r7, #12]
 8011dd8:	6878      	ldr	r0, [r7, #4]
 8011dda:	f7fa fb2e 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8011dde:	4603      	mov	r3, r0
 8011de0:	4619      	mov	r1, r3
 8011de2:	4620      	mov	r0, r4
 8011de4:	f001 f93e 	bl	8013064 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	1d1c      	adds	r4, r3, #4
 8011dec:	68b8      	ldr	r0, [r7, #8]
 8011dee:	f7fe f9d1 	bl	8010194 <_ZSt7forwardIRP15TfLiteAddParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8011df2:	4603      	mov	r3, r0
 8011df4:	4619      	mov	r1, r3
 8011df6:	4620      	mov	r0, r4
 8011df8:	f001 fba1 	bl	801353e <_ZNSt10_Head_baseILj0EP15TfLiteAddParamsLb0EEC1IRS1_EEOT_>
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	4618      	mov	r0, r3
 8011e00:	3714      	adds	r7, #20
 8011e02:	46bd      	mov	sp, r7
 8011e04:	bd90      	pop	{r4, r7, pc}

08011e06 <_ZSt3getILj0EJP15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 8011e06:	b580      	push	{r7, lr}
 8011e08:	b082      	sub	sp, #8
 8011e0a:	af00      	add	r7, sp, #0
 8011e0c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	4618      	mov	r0, r3
 8011e12:	f001 fba5 	bl	8013560 <_ZSt12__get_helperILj0EP15TfLiteAddParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8011e16:	4603      	mov	r3, r0
 8011e18:	4618      	mov	r0, r3
 8011e1a:	3708      	adds	r7, #8
 8011e1c:	46bd      	mov	sp, r7
 8011e1e:	bd80      	pop	{r7, pc}

08011e20 <_ZSt12__get_helperILj0EP15TfLiteDivParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8011e20:	b580      	push	{r7, lr}
 8011e22:	b082      	sub	sp, #8
 8011e24:	af00      	add	r7, sp, #0
 8011e26:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8011e28:	6878      	ldr	r0, [r7, #4]
 8011e2a:	f001 fba5 	bl	8013578 <_ZNSt11_Tuple_implILj0EJP15TfLiteDivParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8011e2e:	4603      	mov	r3, r0
 8011e30:	4618      	mov	r0, r3
 8011e32:	3708      	adds	r7, #8
 8011e34:	46bd      	mov	sp, r7
 8011e36:	bd80      	pop	{r7, pc}

08011e38 <_ZSt3getILj1EJP15TfLiteDivParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8011e38:	b580      	push	{r7, lr}
 8011e3a:	b082      	sub	sp, #8
 8011e3c:	af00      	add	r7, sp, #0
 8011e3e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	4618      	mov	r0, r3
 8011e44:	f001 f902 	bl	801304c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8011e48:	4603      	mov	r3, r0
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	3708      	adds	r7, #8
 8011e4e:	46bd      	mov	sp, r7
 8011e50:	bd80      	pop	{r7, pc}

08011e52 <_ZNSt11_Tuple_implILj0EJP15TfLiteDivParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8011e52:	b590      	push	{r4, r7, lr}
 8011e54:	b085      	sub	sp, #20
 8011e56:	af00      	add	r7, sp, #0
 8011e58:	60f8      	str	r0, [r7, #12]
 8011e5a:	60b9      	str	r1, [r7, #8]
 8011e5c:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8011e5e:	68fc      	ldr	r4, [r7, #12]
 8011e60:	6878      	ldr	r0, [r7, #4]
 8011e62:	f7fa faea 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8011e66:	4603      	mov	r3, r0
 8011e68:	4619      	mov	r1, r3
 8011e6a:	4620      	mov	r0, r4
 8011e6c:	f001 f8fa 	bl	8013064 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	1d1c      	adds	r4, r3, #4
 8011e74:	68b8      	ldr	r0, [r7, #8]
 8011e76:	f7fe f9d9 	bl	801022c <_ZSt7forwardIRP15TfLiteDivParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8011e7a:	4603      	mov	r3, r0
 8011e7c:	4619      	mov	r1, r3
 8011e7e:	4620      	mov	r0, r4
 8011e80:	f001 fb88 	bl	8013594 <_ZNSt10_Head_baseILj0EP15TfLiteDivParamsLb0EEC1IRS1_EEOT_>
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	4618      	mov	r0, r3
 8011e88:	3714      	adds	r7, #20
 8011e8a:	46bd      	mov	sp, r7
 8011e8c:	bd90      	pop	{r4, r7, pc}

08011e8e <_ZSt3getILj0EJP15TfLiteDivParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 8011e8e:	b580      	push	{r7, lr}
 8011e90:	b082      	sub	sp, #8
 8011e92:	af00      	add	r7, sp, #0
 8011e94:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	4618      	mov	r0, r3
 8011e9a:	f001 fb8c 	bl	80135b6 <_ZSt12__get_helperILj0EP15TfLiteDivParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8011e9e:	4603      	mov	r3, r0
 8011ea0:	4618      	mov	r0, r3
 8011ea2:	3708      	adds	r7, #8
 8011ea4:	46bd      	mov	sp, r7
 8011ea6:	bd80      	pop	{r7, pc}

08011ea8 <_ZSt12__get_helperILj0EP15TfLiteSubParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8011ea8:	b580      	push	{r7, lr}
 8011eaa:	b082      	sub	sp, #8
 8011eac:	af00      	add	r7, sp, #0
 8011eae:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8011eb0:	6878      	ldr	r0, [r7, #4]
 8011eb2:	f001 fb8c 	bl	80135ce <_ZNSt11_Tuple_implILj0EJP15TfLiteSubParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8011eb6:	4603      	mov	r3, r0
 8011eb8:	4618      	mov	r0, r3
 8011eba:	3708      	adds	r7, #8
 8011ebc:	46bd      	mov	sp, r7
 8011ebe:	bd80      	pop	{r7, pc}

08011ec0 <_ZSt3getILj1EJP15TfLiteSubParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	b082      	sub	sp, #8
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	4618      	mov	r0, r3
 8011ecc:	f001 f8be 	bl	801304c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8011ed0:	4603      	mov	r3, r0
 8011ed2:	4618      	mov	r0, r3
 8011ed4:	3708      	adds	r7, #8
 8011ed6:	46bd      	mov	sp, r7
 8011ed8:	bd80      	pop	{r7, pc}

08011eda <_ZNSt11_Tuple_implILj0EJP15TfLiteSubParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8011eda:	b590      	push	{r4, r7, lr}
 8011edc:	b085      	sub	sp, #20
 8011ede:	af00      	add	r7, sp, #0
 8011ee0:	60f8      	str	r0, [r7, #12]
 8011ee2:	60b9      	str	r1, [r7, #8]
 8011ee4:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8011ee6:	68fc      	ldr	r4, [r7, #12]
 8011ee8:	6878      	ldr	r0, [r7, #4]
 8011eea:	f7fa faa6 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8011eee:	4603      	mov	r3, r0
 8011ef0:	4619      	mov	r1, r3
 8011ef2:	4620      	mov	r0, r4
 8011ef4:	f001 f8b6 	bl	8013064 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	1d1c      	adds	r4, r3, #4
 8011efc:	68b8      	ldr	r0, [r7, #8]
 8011efe:	f7fe f9e1 	bl	80102c4 <_ZSt7forwardIRP15TfLiteSubParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8011f02:	4603      	mov	r3, r0
 8011f04:	4619      	mov	r1, r3
 8011f06:	4620      	mov	r0, r4
 8011f08:	f001 fb6f 	bl	80135ea <_ZNSt10_Head_baseILj0EP15TfLiteSubParamsLb0EEC1IRS1_EEOT_>
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	4618      	mov	r0, r3
 8011f10:	3714      	adds	r7, #20
 8011f12:	46bd      	mov	sp, r7
 8011f14:	bd90      	pop	{r4, r7, pc}

08011f16 <_ZSt3getILj0EJP15TfLiteSubParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 8011f16:	b580      	push	{r7, lr}
 8011f18:	b082      	sub	sp, #8
 8011f1a:	af00      	add	r7, sp, #0
 8011f1c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	4618      	mov	r0, r3
 8011f22:	f001 fb73 	bl	801360c <_ZSt12__get_helperILj0EP15TfLiteSubParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8011f26:	4603      	mov	r3, r0
 8011f28:	4618      	mov	r0, r3
 8011f2a:	3708      	adds	r7, #8
 8011f2c:	46bd      	mov	sp, r7
 8011f2e:	bd80      	pop	{r7, pc}

08011f30 <_ZSt12__get_helperILj0EP18TfLiteL2NormParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8011f30:	b580      	push	{r7, lr}
 8011f32:	b082      	sub	sp, #8
 8011f34:	af00      	add	r7, sp, #0
 8011f36:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8011f38:	6878      	ldr	r0, [r7, #4]
 8011f3a:	f001 fb73 	bl	8013624 <_ZNSt11_Tuple_implILj0EJP18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8011f3e:	4603      	mov	r3, r0
 8011f40:	4618      	mov	r0, r3
 8011f42:	3708      	adds	r7, #8
 8011f44:	46bd      	mov	sp, r7
 8011f46:	bd80      	pop	{r7, pc}

08011f48 <_ZSt3getILj1EJP18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8011f48:	b580      	push	{r7, lr}
 8011f4a:	b082      	sub	sp, #8
 8011f4c:	af00      	add	r7, sp, #0
 8011f4e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	4618      	mov	r0, r3
 8011f54:	f001 f87a 	bl	801304c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8011f58:	4603      	mov	r3, r0
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	3708      	adds	r7, #8
 8011f5e:	46bd      	mov	sp, r7
 8011f60:	bd80      	pop	{r7, pc}

08011f62 <_ZNSt11_Tuple_implILj0EJP18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8011f62:	b590      	push	{r4, r7, lr}
 8011f64:	b085      	sub	sp, #20
 8011f66:	af00      	add	r7, sp, #0
 8011f68:	60f8      	str	r0, [r7, #12]
 8011f6a:	60b9      	str	r1, [r7, #8]
 8011f6c:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8011f6e:	68fc      	ldr	r4, [r7, #12]
 8011f70:	6878      	ldr	r0, [r7, #4]
 8011f72:	f7fa fa62 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8011f76:	4603      	mov	r3, r0
 8011f78:	4619      	mov	r1, r3
 8011f7a:	4620      	mov	r0, r4
 8011f7c:	f001 f872 	bl	8013064 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	1d1c      	adds	r4, r3, #4
 8011f84:	68b8      	ldr	r0, [r7, #8]
 8011f86:	f7fe f9e9 	bl	801035c <_ZSt7forwardIRP18TfLiteL2NormParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8011f8a:	4603      	mov	r3, r0
 8011f8c:	4619      	mov	r1, r3
 8011f8e:	4620      	mov	r0, r4
 8011f90:	f001 fb56 	bl	8013640 <_ZNSt10_Head_baseILj0EP18TfLiteL2NormParamsLb0EEC1IRS1_EEOT_>
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	4618      	mov	r0, r3
 8011f98:	3714      	adds	r7, #20
 8011f9a:	46bd      	mov	sp, r7
 8011f9c:	bd90      	pop	{r4, r7, pc}

08011f9e <_ZSt3getILj0EJP18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 8011f9e:	b580      	push	{r7, lr}
 8011fa0:	b082      	sub	sp, #8
 8011fa2:	af00      	add	r7, sp, #0
 8011fa4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	4618      	mov	r0, r3
 8011faa:	f001 fb5a 	bl	8013662 <_ZSt12__get_helperILj0EP18TfLiteL2NormParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8011fae:	4603      	mov	r3, r0
 8011fb0:	4618      	mov	r0, r3
 8011fb2:	3708      	adds	r7, #8
 8011fb4:	46bd      	mov	sp, r7
 8011fb6:	bd80      	pop	{r7, pc}

08011fb8 <_ZSt12__get_helperILj0EP29TfLiteLocalResponseNormParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8011fb8:	b580      	push	{r7, lr}
 8011fba:	b082      	sub	sp, #8
 8011fbc:	af00      	add	r7, sp, #0
 8011fbe:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8011fc0:	6878      	ldr	r0, [r7, #4]
 8011fc2:	f001 fb5a 	bl	801367a <_ZNSt11_Tuple_implILj0EJP29TfLiteLocalResponseNormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8011fc6:	4603      	mov	r3, r0
 8011fc8:	4618      	mov	r0, r3
 8011fca:	3708      	adds	r7, #8
 8011fcc:	46bd      	mov	sp, r7
 8011fce:	bd80      	pop	{r7, pc}

08011fd0 <_ZSt3getILj1EJP29TfLiteLocalResponseNormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8011fd0:	b580      	push	{r7, lr}
 8011fd2:	b082      	sub	sp, #8
 8011fd4:	af00      	add	r7, sp, #0
 8011fd6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	4618      	mov	r0, r3
 8011fdc:	f001 f836 	bl	801304c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8011fe0:	4603      	mov	r3, r0
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	3708      	adds	r7, #8
 8011fe6:	46bd      	mov	sp, r7
 8011fe8:	bd80      	pop	{r7, pc}

08011fea <_ZNSt11_Tuple_implILj0EJP29TfLiteLocalResponseNormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8011fea:	b590      	push	{r4, r7, lr}
 8011fec:	b085      	sub	sp, #20
 8011fee:	af00      	add	r7, sp, #0
 8011ff0:	60f8      	str	r0, [r7, #12]
 8011ff2:	60b9      	str	r1, [r7, #8]
 8011ff4:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8011ff6:	68fc      	ldr	r4, [r7, #12]
 8011ff8:	6878      	ldr	r0, [r7, #4]
 8011ffa:	f7fa fa1e 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8011ffe:	4603      	mov	r3, r0
 8012000:	4619      	mov	r1, r3
 8012002:	4620      	mov	r0, r4
 8012004:	f001 f82e 	bl	8013064 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	1d1c      	adds	r4, r3, #4
 801200c:	68b8      	ldr	r0, [r7, #8]
 801200e:	f7fe f9f1 	bl	80103f4 <_ZSt7forwardIRP29TfLiteLocalResponseNormParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8012012:	4603      	mov	r3, r0
 8012014:	4619      	mov	r1, r3
 8012016:	4620      	mov	r0, r4
 8012018:	f001 fb3d 	bl	8013696 <_ZNSt10_Head_baseILj0EP29TfLiteLocalResponseNormParamsLb0EEC1IRS1_EEOT_>
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	4618      	mov	r0, r3
 8012020:	3714      	adds	r7, #20
 8012022:	46bd      	mov	sp, r7
 8012024:	bd90      	pop	{r4, r7, pc}

08012026 <_ZSt3getILj0EJP29TfLiteLocalResponseNormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 8012026:	b580      	push	{r7, lr}
 8012028:	b082      	sub	sp, #8
 801202a:	af00      	add	r7, sp, #0
 801202c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	4618      	mov	r0, r3
 8012032:	f001 fb41 	bl	80136b8 <_ZSt12__get_helperILj0EP29TfLiteLocalResponseNormParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8012036:	4603      	mov	r3, r0
 8012038:	4618      	mov	r0, r3
 801203a:	3708      	adds	r7, #8
 801203c:	46bd      	mov	sp, r7
 801203e:	bd80      	pop	{r7, pc}

08012040 <_ZSt12__get_helperILj0EP16TfLiteLSTMParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8012040:	b580      	push	{r7, lr}
 8012042:	b082      	sub	sp, #8
 8012044:	af00      	add	r7, sp, #0
 8012046:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8012048:	6878      	ldr	r0, [r7, #4]
 801204a:	f001 fb41 	bl	80136d0 <_ZNSt11_Tuple_implILj0EJP16TfLiteLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 801204e:	4603      	mov	r3, r0
 8012050:	4618      	mov	r0, r3
 8012052:	3708      	adds	r7, #8
 8012054:	46bd      	mov	sp, r7
 8012056:	bd80      	pop	{r7, pc}

08012058 <_ZSt3getILj1EJP16TfLiteLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8012058:	b580      	push	{r7, lr}
 801205a:	b082      	sub	sp, #8
 801205c:	af00      	add	r7, sp, #0
 801205e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	4618      	mov	r0, r3
 8012064:	f000 fff2 	bl	801304c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8012068:	4603      	mov	r3, r0
 801206a:	4618      	mov	r0, r3
 801206c:	3708      	adds	r7, #8
 801206e:	46bd      	mov	sp, r7
 8012070:	bd80      	pop	{r7, pc}

08012072 <_ZNSt11_Tuple_implILj0EJP16TfLiteLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8012072:	b590      	push	{r4, r7, lr}
 8012074:	b085      	sub	sp, #20
 8012076:	af00      	add	r7, sp, #0
 8012078:	60f8      	str	r0, [r7, #12]
 801207a:	60b9      	str	r1, [r7, #8]
 801207c:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 801207e:	68fc      	ldr	r4, [r7, #12]
 8012080:	6878      	ldr	r0, [r7, #4]
 8012082:	f7fa f9da 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8012086:	4603      	mov	r3, r0
 8012088:	4619      	mov	r1, r3
 801208a:	4620      	mov	r0, r4
 801208c:	f000 ffea 	bl	8013064 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	1d1c      	adds	r4, r3, #4
 8012094:	68b8      	ldr	r0, [r7, #8]
 8012096:	f7fe f9f9 	bl	801048c <_ZSt7forwardIRP16TfLiteLSTMParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 801209a:	4603      	mov	r3, r0
 801209c:	4619      	mov	r1, r3
 801209e:	4620      	mov	r0, r4
 80120a0:	f001 fb24 	bl	80136ec <_ZNSt10_Head_baseILj0EP16TfLiteLSTMParamsLb0EEC1IRS1_EEOT_>
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	4618      	mov	r0, r3
 80120a8:	3714      	adds	r7, #20
 80120aa:	46bd      	mov	sp, r7
 80120ac:	bd90      	pop	{r4, r7, pc}

080120ae <_ZSt3getILj0EJP16TfLiteLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 80120ae:	b580      	push	{r7, lr}
 80120b0:	b082      	sub	sp, #8
 80120b2:	af00      	add	r7, sp, #0
 80120b4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	4618      	mov	r0, r3
 80120ba:	f001 fb28 	bl	801370e <_ZSt12__get_helperILj0EP16TfLiteLSTMParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80120be:	4603      	mov	r3, r0
 80120c0:	4618      	mov	r0, r3
 80120c2:	3708      	adds	r7, #8
 80120c4:	46bd      	mov	sp, r7
 80120c6:	bd80      	pop	{r7, pc}

080120c8 <_ZSt12__get_helperILj0EP38TfLiteUnidirectionalSequenceLSTMParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80120c8:	b580      	push	{r7, lr}
 80120ca:	b082      	sub	sp, #8
 80120cc:	af00      	add	r7, sp, #0
 80120ce:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80120d0:	6878      	ldr	r0, [r7, #4]
 80120d2:	f001 fb28 	bl	8013726 <_ZNSt11_Tuple_implILj0EJP38TfLiteUnidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 80120d6:	4603      	mov	r3, r0
 80120d8:	4618      	mov	r0, r3
 80120da:	3708      	adds	r7, #8
 80120dc:	46bd      	mov	sp, r7
 80120de:	bd80      	pop	{r7, pc}

080120e0 <_ZSt3getILj1EJP38TfLiteUnidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80120e0:	b580      	push	{r7, lr}
 80120e2:	b082      	sub	sp, #8
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	4618      	mov	r0, r3
 80120ec:	f000 ffae 	bl	801304c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80120f0:	4603      	mov	r3, r0
 80120f2:	4618      	mov	r0, r3
 80120f4:	3708      	adds	r7, #8
 80120f6:	46bd      	mov	sp, r7
 80120f8:	bd80      	pop	{r7, pc}

080120fa <_ZNSt11_Tuple_implILj0EJP38TfLiteUnidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 80120fa:	b590      	push	{r4, r7, lr}
 80120fc:	b085      	sub	sp, #20
 80120fe:	af00      	add	r7, sp, #0
 8012100:	60f8      	str	r0, [r7, #12]
 8012102:	60b9      	str	r1, [r7, #8]
 8012104:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8012106:	68fc      	ldr	r4, [r7, #12]
 8012108:	6878      	ldr	r0, [r7, #4]
 801210a:	f7fa f996 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 801210e:	4603      	mov	r3, r0
 8012110:	4619      	mov	r1, r3
 8012112:	4620      	mov	r0, r4
 8012114:	f000 ffa6 	bl	8013064 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	1d1c      	adds	r4, r3, #4
 801211c:	68b8      	ldr	r0, [r7, #8]
 801211e:	f7fe fa01 	bl	8010524 <_ZSt7forwardIRP38TfLiteUnidirectionalSequenceLSTMParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8012122:	4603      	mov	r3, r0
 8012124:	4619      	mov	r1, r3
 8012126:	4620      	mov	r0, r4
 8012128:	f001 fb0b 	bl	8013742 <_ZNSt10_Head_baseILj0EP38TfLiteUnidirectionalSequenceLSTMParamsLb0EEC1IRS1_EEOT_>
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	4618      	mov	r0, r3
 8012130:	3714      	adds	r7, #20
 8012132:	46bd      	mov	sp, r7
 8012134:	bd90      	pop	{r4, r7, pc}

08012136 <_ZSt3getILj0EJP38TfLiteUnidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 8012136:	b580      	push	{r7, lr}
 8012138:	b082      	sub	sp, #8
 801213a:	af00      	add	r7, sp, #0
 801213c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	4618      	mov	r0, r3
 8012142:	f001 fb0f 	bl	8013764 <_ZSt12__get_helperILj0EP38TfLiteUnidirectionalSequenceLSTMParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8012146:	4603      	mov	r3, r0
 8012148:	4618      	mov	r0, r3
 801214a:	3708      	adds	r7, #8
 801214c:	46bd      	mov	sp, r7
 801214e:	bd80      	pop	{r7, pc}

08012150 <_ZSt12__get_helperILj0EP37TfLiteBidirectionalSequenceLSTMParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8012150:	b580      	push	{r7, lr}
 8012152:	b082      	sub	sp, #8
 8012154:	af00      	add	r7, sp, #0
 8012156:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8012158:	6878      	ldr	r0, [r7, #4]
 801215a:	f001 fb0f 	bl	801377c <_ZNSt11_Tuple_implILj0EJP37TfLiteBidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 801215e:	4603      	mov	r3, r0
 8012160:	4618      	mov	r0, r3
 8012162:	3708      	adds	r7, #8
 8012164:	46bd      	mov	sp, r7
 8012166:	bd80      	pop	{r7, pc}

08012168 <_ZSt3getILj1EJP37TfLiteBidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8012168:	b580      	push	{r7, lr}
 801216a:	b082      	sub	sp, #8
 801216c:	af00      	add	r7, sp, #0
 801216e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	4618      	mov	r0, r3
 8012174:	f000 ff6a 	bl	801304c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8012178:	4603      	mov	r3, r0
 801217a:	4618      	mov	r0, r3
 801217c:	3708      	adds	r7, #8
 801217e:	46bd      	mov	sp, r7
 8012180:	bd80      	pop	{r7, pc}

08012182 <_ZNSt11_Tuple_implILj0EJP37TfLiteBidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8012182:	b590      	push	{r4, r7, lr}
 8012184:	b085      	sub	sp, #20
 8012186:	af00      	add	r7, sp, #0
 8012188:	60f8      	str	r0, [r7, #12]
 801218a:	60b9      	str	r1, [r7, #8]
 801218c:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 801218e:	68fc      	ldr	r4, [r7, #12]
 8012190:	6878      	ldr	r0, [r7, #4]
 8012192:	f7fa f952 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8012196:	4603      	mov	r3, r0
 8012198:	4619      	mov	r1, r3
 801219a:	4620      	mov	r0, r4
 801219c:	f000 ff62 	bl	8013064 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	1d1c      	adds	r4, r3, #4
 80121a4:	68b8      	ldr	r0, [r7, #8]
 80121a6:	f7fe fa09 	bl	80105bc <_ZSt7forwardIRP37TfLiteBidirectionalSequenceLSTMParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80121aa:	4603      	mov	r3, r0
 80121ac:	4619      	mov	r1, r3
 80121ae:	4620      	mov	r0, r4
 80121b0:	f001 faf2 	bl	8013798 <_ZNSt10_Head_baseILj0EP37TfLiteBidirectionalSequenceLSTMParamsLb0EEC1IRS1_EEOT_>
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	4618      	mov	r0, r3
 80121b8:	3714      	adds	r7, #20
 80121ba:	46bd      	mov	sp, r7
 80121bc:	bd90      	pop	{r4, r7, pc}

080121be <_ZSt3getILj0EJP37TfLiteBidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 80121be:	b580      	push	{r7, lr}
 80121c0:	b082      	sub	sp, #8
 80121c2:	af00      	add	r7, sp, #0
 80121c4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	4618      	mov	r0, r3
 80121ca:	f001 faf6 	bl	80137ba <_ZSt12__get_helperILj0EP37TfLiteBidirectionalSequenceLSTMParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80121ce:	4603      	mov	r3, r0
 80121d0:	4618      	mov	r0, r3
 80121d2:	3708      	adds	r7, #8
 80121d4:	46bd      	mov	sp, r7
 80121d6:	bd80      	pop	{r7, pc}

080121d8 <_ZSt12__get_helperILj0EP26TfLiteResizeBilinearParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80121d8:	b580      	push	{r7, lr}
 80121da:	b082      	sub	sp, #8
 80121dc:	af00      	add	r7, sp, #0
 80121de:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80121e0:	6878      	ldr	r0, [r7, #4]
 80121e2:	f001 faf6 	bl	80137d2 <_ZNSt11_Tuple_implILj0EJP26TfLiteResizeBilinearParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 80121e6:	4603      	mov	r3, r0
 80121e8:	4618      	mov	r0, r3
 80121ea:	3708      	adds	r7, #8
 80121ec:	46bd      	mov	sp, r7
 80121ee:	bd80      	pop	{r7, pc}

080121f0 <_ZSt3getILj1EJP26TfLiteResizeBilinearParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80121f0:	b580      	push	{r7, lr}
 80121f2:	b082      	sub	sp, #8
 80121f4:	af00      	add	r7, sp, #0
 80121f6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	4618      	mov	r0, r3
 80121fc:	f000 ff26 	bl	801304c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8012200:	4603      	mov	r3, r0
 8012202:	4618      	mov	r0, r3
 8012204:	3708      	adds	r7, #8
 8012206:	46bd      	mov	sp, r7
 8012208:	bd80      	pop	{r7, pc}

0801220a <_ZNSt11_Tuple_implILj0EJP26TfLiteResizeBilinearParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 801220a:	b590      	push	{r4, r7, lr}
 801220c:	b085      	sub	sp, #20
 801220e:	af00      	add	r7, sp, #0
 8012210:	60f8      	str	r0, [r7, #12]
 8012212:	60b9      	str	r1, [r7, #8]
 8012214:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8012216:	68fc      	ldr	r4, [r7, #12]
 8012218:	6878      	ldr	r0, [r7, #4]
 801221a:	f7fa f90e 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 801221e:	4603      	mov	r3, r0
 8012220:	4619      	mov	r1, r3
 8012222:	4620      	mov	r0, r4
 8012224:	f000 ff1e 	bl	8013064 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	1d1c      	adds	r4, r3, #4
 801222c:	68b8      	ldr	r0, [r7, #8]
 801222e:	f7fe fa11 	bl	8010654 <_ZSt7forwardIRP26TfLiteResizeBilinearParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8012232:	4603      	mov	r3, r0
 8012234:	4619      	mov	r1, r3
 8012236:	4620      	mov	r0, r4
 8012238:	f001 fad9 	bl	80137ee <_ZNSt10_Head_baseILj0EP26TfLiteResizeBilinearParamsLb0EEC1IRS1_EEOT_>
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	4618      	mov	r0, r3
 8012240:	3714      	adds	r7, #20
 8012242:	46bd      	mov	sp, r7
 8012244:	bd90      	pop	{r4, r7, pc}

08012246 <_ZSt3getILj0EJP26TfLiteResizeBilinearParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 8012246:	b580      	push	{r7, lr}
 8012248:	b082      	sub	sp, #8
 801224a:	af00      	add	r7, sp, #0
 801224c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	4618      	mov	r0, r3
 8012252:	f001 fadd 	bl	8013810 <_ZSt12__get_helperILj0EP26TfLiteResizeBilinearParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8012256:	4603      	mov	r3, r0
 8012258:	4618      	mov	r0, r3
 801225a:	3708      	adds	r7, #8
 801225c:	46bd      	mov	sp, r7
 801225e:	bd80      	pop	{r7, pc}

08012260 <_ZSt12__get_helperILj0EP33TfLiteResizeNearestNeighborParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8012260:	b580      	push	{r7, lr}
 8012262:	b082      	sub	sp, #8
 8012264:	af00      	add	r7, sp, #0
 8012266:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8012268:	6878      	ldr	r0, [r7, #4]
 801226a:	f001 fadd 	bl	8013828 <_ZNSt11_Tuple_implILj0EJP33TfLiteResizeNearestNeighborParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 801226e:	4603      	mov	r3, r0
 8012270:	4618      	mov	r0, r3
 8012272:	3708      	adds	r7, #8
 8012274:	46bd      	mov	sp, r7
 8012276:	bd80      	pop	{r7, pc}

08012278 <_ZSt3getILj1EJP33TfLiteResizeNearestNeighborParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8012278:	b580      	push	{r7, lr}
 801227a:	b082      	sub	sp, #8
 801227c:	af00      	add	r7, sp, #0
 801227e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	4618      	mov	r0, r3
 8012284:	f000 fee2 	bl	801304c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8012288:	4603      	mov	r3, r0
 801228a:	4618      	mov	r0, r3
 801228c:	3708      	adds	r7, #8
 801228e:	46bd      	mov	sp, r7
 8012290:	bd80      	pop	{r7, pc}

08012292 <_ZNSt11_Tuple_implILj0EJP33TfLiteResizeNearestNeighborParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8012292:	b590      	push	{r4, r7, lr}
 8012294:	b085      	sub	sp, #20
 8012296:	af00      	add	r7, sp, #0
 8012298:	60f8      	str	r0, [r7, #12]
 801229a:	60b9      	str	r1, [r7, #8]
 801229c:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 801229e:	68fc      	ldr	r4, [r7, #12]
 80122a0:	6878      	ldr	r0, [r7, #4]
 80122a2:	f7fa f8ca 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80122a6:	4603      	mov	r3, r0
 80122a8:	4619      	mov	r1, r3
 80122aa:	4620      	mov	r0, r4
 80122ac:	f000 feda 	bl	8013064 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	1d1c      	adds	r4, r3, #4
 80122b4:	68b8      	ldr	r0, [r7, #8]
 80122b6:	f7fe fa19 	bl	80106ec <_ZSt7forwardIRP33TfLiteResizeNearestNeighborParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80122ba:	4603      	mov	r3, r0
 80122bc:	4619      	mov	r1, r3
 80122be:	4620      	mov	r0, r4
 80122c0:	f001 fac0 	bl	8013844 <_ZNSt10_Head_baseILj0EP33TfLiteResizeNearestNeighborParamsLb0EEC1IRS1_EEOT_>
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	4618      	mov	r0, r3
 80122c8:	3714      	adds	r7, #20
 80122ca:	46bd      	mov	sp, r7
 80122cc:	bd90      	pop	{r4, r7, pc}

080122ce <_ZSt3getILj0EJP33TfLiteResizeNearestNeighborParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 80122ce:	b580      	push	{r7, lr}
 80122d0:	b082      	sub	sp, #8
 80122d2:	af00      	add	r7, sp, #0
 80122d4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	4618      	mov	r0, r3
 80122da:	f001 fac4 	bl	8013866 <_ZSt12__get_helperILj0EP33TfLiteResizeNearestNeighborParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80122de:	4603      	mov	r3, r0
 80122e0:	4618      	mov	r0, r3
 80122e2:	3708      	adds	r7, #8
 80122e4:	46bd      	mov	sp, r7
 80122e6:	bd80      	pop	{r7, pc}

080122e8 <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80122e8:	b580      	push	{r7, lr}
 80122ea:	b082      	sub	sp, #8
 80122ec:	af00      	add	r7, sp, #0
 80122ee:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80122f0:	6878      	ldr	r0, [r7, #4]
 80122f2:	f001 fac4 	bl	801387e <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 80122f6:	4603      	mov	r3, r0
 80122f8:	4618      	mov	r0, r3
 80122fa:	3708      	adds	r7, #8
 80122fc:	46bd      	mov	sp, r7
 80122fe:	bd80      	pop	{r7, pc}

08012300 <_ZSt3getILj1EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8012300:	b580      	push	{r7, lr}
 8012302:	b082      	sub	sp, #8
 8012304:	af00      	add	r7, sp, #0
 8012306:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	4618      	mov	r0, r3
 801230c:	f000 fe9e 	bl	801304c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8012310:	4603      	mov	r3, r0
 8012312:	4618      	mov	r0, r3
 8012314:	3708      	adds	r7, #8
 8012316:	46bd      	mov	sp, r7
 8012318:	bd80      	pop	{r7, pc}

0801231a <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 801231a:	b590      	push	{r4, r7, lr}
 801231c:	b085      	sub	sp, #20
 801231e:	af00      	add	r7, sp, #0
 8012320:	60f8      	str	r0, [r7, #12]
 8012322:	60b9      	str	r1, [r7, #8]
 8012324:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8012326:	68fc      	ldr	r4, [r7, #12]
 8012328:	6878      	ldr	r0, [r7, #4]
 801232a:	f7fa f886 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 801232e:	4603      	mov	r3, r0
 8012330:	4619      	mov	r1, r3
 8012332:	4620      	mov	r0, r4
 8012334:	f000 fe96 	bl	8013064 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	1d1c      	adds	r4, r3, #4
 801233c:	68b8      	ldr	r0, [r7, #8]
 801233e:	f7fe fa21 	bl	8010784 <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8012342:	4603      	mov	r3, r0
 8012344:	4619      	mov	r1, r3
 8012346:	4620      	mov	r0, r4
 8012348:	f001 faa7 	bl	801389a <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EEC1IRS1_EEOT_>
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	4618      	mov	r0, r3
 8012350:	3714      	adds	r7, #20
 8012352:	46bd      	mov	sp, r7
 8012354:	bd90      	pop	{r4, r7, pc}

08012356 <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 8012356:	b580      	push	{r7, lr}
 8012358:	b082      	sub	sp, #8
 801235a:	af00      	add	r7, sp, #0
 801235c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	4618      	mov	r0, r3
 8012362:	f001 faab 	bl	80138bc <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8012366:	4603      	mov	r3, r0
 8012368:	4618      	mov	r0, r3
 801236a:	3708      	adds	r7, #8
 801236c:	46bd      	mov	sp, r7
 801236e:	bd80      	pop	{r7, pc}

08012370 <_ZSt12__get_helperILj0EP20TfLiteSkipGramParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8012370:	b580      	push	{r7, lr}
 8012372:	b082      	sub	sp, #8
 8012374:	af00      	add	r7, sp, #0
 8012376:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8012378:	6878      	ldr	r0, [r7, #4]
 801237a:	f001 faab 	bl	80138d4 <_ZNSt11_Tuple_implILj0EJP20TfLiteSkipGramParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 801237e:	4603      	mov	r3, r0
 8012380:	4618      	mov	r0, r3
 8012382:	3708      	adds	r7, #8
 8012384:	46bd      	mov	sp, r7
 8012386:	bd80      	pop	{r7, pc}

08012388 <_ZSt3getILj1EJP20TfLiteSkipGramParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8012388:	b580      	push	{r7, lr}
 801238a:	b082      	sub	sp, #8
 801238c:	af00      	add	r7, sp, #0
 801238e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	4618      	mov	r0, r3
 8012394:	f000 fe5a 	bl	801304c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8012398:	4603      	mov	r3, r0
 801239a:	4618      	mov	r0, r3
 801239c:	3708      	adds	r7, #8
 801239e:	46bd      	mov	sp, r7
 80123a0:	bd80      	pop	{r7, pc}

080123a2 <_ZNSt11_Tuple_implILj0EJP20TfLiteSkipGramParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 80123a2:	b590      	push	{r4, r7, lr}
 80123a4:	b085      	sub	sp, #20
 80123a6:	af00      	add	r7, sp, #0
 80123a8:	60f8      	str	r0, [r7, #12]
 80123aa:	60b9      	str	r1, [r7, #8]
 80123ac:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 80123ae:	68fc      	ldr	r4, [r7, #12]
 80123b0:	6878      	ldr	r0, [r7, #4]
 80123b2:	f7fa f842 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80123b6:	4603      	mov	r3, r0
 80123b8:	4619      	mov	r1, r3
 80123ba:	4620      	mov	r0, r4
 80123bc:	f000 fe52 	bl	8013064 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	1d1c      	adds	r4, r3, #4
 80123c4:	68b8      	ldr	r0, [r7, #8]
 80123c6:	f7fe fa29 	bl	801081c <_ZSt7forwardIRP20TfLiteSkipGramParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80123ca:	4603      	mov	r3, r0
 80123cc:	4619      	mov	r1, r3
 80123ce:	4620      	mov	r0, r4
 80123d0:	f001 fa8e 	bl	80138f0 <_ZNSt10_Head_baseILj0EP20TfLiteSkipGramParamsLb0EEC1IRS1_EEOT_>
 80123d4:	68fb      	ldr	r3, [r7, #12]
 80123d6:	4618      	mov	r0, r3
 80123d8:	3714      	adds	r7, #20
 80123da:	46bd      	mov	sp, r7
 80123dc:	bd90      	pop	{r4, r7, pc}

080123de <_ZSt3getILj0EJP20TfLiteSkipGramParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 80123de:	b580      	push	{r7, lr}
 80123e0:	b082      	sub	sp, #8
 80123e2:	af00      	add	r7, sp, #0
 80123e4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	4618      	mov	r0, r3
 80123ea:	f001 fa92 	bl	8013912 <_ZSt12__get_helperILj0EP20TfLiteSkipGramParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80123ee:	4603      	mov	r3, r0
 80123f0:	4618      	mov	r0, r3
 80123f2:	3708      	adds	r7, #8
 80123f4:	46bd      	mov	sp, r7
 80123f6:	bd80      	pop	{r7, pc}

080123f8 <_ZSt12__get_helperILj0EP24TfLiteSpaceToDepthParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80123f8:	b580      	push	{r7, lr}
 80123fa:	b082      	sub	sp, #8
 80123fc:	af00      	add	r7, sp, #0
 80123fe:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8012400:	6878      	ldr	r0, [r7, #4]
 8012402:	f001 fa92 	bl	801392a <_ZNSt11_Tuple_implILj0EJP24TfLiteSpaceToDepthParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8012406:	4603      	mov	r3, r0
 8012408:	4618      	mov	r0, r3
 801240a:	3708      	adds	r7, #8
 801240c:	46bd      	mov	sp, r7
 801240e:	bd80      	pop	{r7, pc}

08012410 <_ZSt3getILj1EJP24TfLiteSpaceToDepthParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8012410:	b580      	push	{r7, lr}
 8012412:	b082      	sub	sp, #8
 8012414:	af00      	add	r7, sp, #0
 8012416:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	4618      	mov	r0, r3
 801241c:	f000 fe16 	bl	801304c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8012420:	4603      	mov	r3, r0
 8012422:	4618      	mov	r0, r3
 8012424:	3708      	adds	r7, #8
 8012426:	46bd      	mov	sp, r7
 8012428:	bd80      	pop	{r7, pc}

0801242a <_ZNSt11_Tuple_implILj0EJP24TfLiteSpaceToDepthParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 801242a:	b590      	push	{r4, r7, lr}
 801242c:	b085      	sub	sp, #20
 801242e:	af00      	add	r7, sp, #0
 8012430:	60f8      	str	r0, [r7, #12]
 8012432:	60b9      	str	r1, [r7, #8]
 8012434:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8012436:	68fc      	ldr	r4, [r7, #12]
 8012438:	6878      	ldr	r0, [r7, #4]
 801243a:	f7f9 fffe 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 801243e:	4603      	mov	r3, r0
 8012440:	4619      	mov	r1, r3
 8012442:	4620      	mov	r0, r4
 8012444:	f000 fe0e 	bl	8013064 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	1d1c      	adds	r4, r3, #4
 801244c:	68b8      	ldr	r0, [r7, #8]
 801244e:	f7fe fa31 	bl	80108b4 <_ZSt7forwardIRP24TfLiteSpaceToDepthParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8012452:	4603      	mov	r3, r0
 8012454:	4619      	mov	r1, r3
 8012456:	4620      	mov	r0, r4
 8012458:	f001 fa75 	bl	8013946 <_ZNSt10_Head_baseILj0EP24TfLiteSpaceToDepthParamsLb0EEC1IRS1_EEOT_>
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	4618      	mov	r0, r3
 8012460:	3714      	adds	r7, #20
 8012462:	46bd      	mov	sp, r7
 8012464:	bd90      	pop	{r4, r7, pc}

08012466 <_ZSt3getILj0EJP24TfLiteSpaceToDepthParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 8012466:	b580      	push	{r7, lr}
 8012468:	b082      	sub	sp, #8
 801246a:	af00      	add	r7, sp, #0
 801246c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	4618      	mov	r0, r3
 8012472:	f001 fa79 	bl	8013968 <_ZSt12__get_helperILj0EP24TfLiteSpaceToDepthParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8012476:	4603      	mov	r3, r0
 8012478:	4618      	mov	r0, r3
 801247a:	3708      	adds	r7, #8
 801247c:	46bd      	mov	sp, r7
 801247e:	bd80      	pop	{r7, pc}

08012480 <_ZSt12__get_helperILj0EP24TfLiteDepthToSpaceParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8012480:	b580      	push	{r7, lr}
 8012482:	b082      	sub	sp, #8
 8012484:	af00      	add	r7, sp, #0
 8012486:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8012488:	6878      	ldr	r0, [r7, #4]
 801248a:	f001 fa79 	bl	8013980 <_ZNSt11_Tuple_implILj0EJP24TfLiteDepthToSpaceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 801248e:	4603      	mov	r3, r0
 8012490:	4618      	mov	r0, r3
 8012492:	3708      	adds	r7, #8
 8012494:	46bd      	mov	sp, r7
 8012496:	bd80      	pop	{r7, pc}

08012498 <_ZSt3getILj1EJP24TfLiteDepthToSpaceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8012498:	b580      	push	{r7, lr}
 801249a:	b082      	sub	sp, #8
 801249c:	af00      	add	r7, sp, #0
 801249e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	4618      	mov	r0, r3
 80124a4:	f000 fdd2 	bl	801304c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80124a8:	4603      	mov	r3, r0
 80124aa:	4618      	mov	r0, r3
 80124ac:	3708      	adds	r7, #8
 80124ae:	46bd      	mov	sp, r7
 80124b0:	bd80      	pop	{r7, pc}

080124b2 <_ZNSt11_Tuple_implILj0EJP24TfLiteDepthToSpaceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 80124b2:	b590      	push	{r4, r7, lr}
 80124b4:	b085      	sub	sp, #20
 80124b6:	af00      	add	r7, sp, #0
 80124b8:	60f8      	str	r0, [r7, #12]
 80124ba:	60b9      	str	r1, [r7, #8]
 80124bc:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 80124be:	68fc      	ldr	r4, [r7, #12]
 80124c0:	6878      	ldr	r0, [r7, #4]
 80124c2:	f7f9 ffba 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80124c6:	4603      	mov	r3, r0
 80124c8:	4619      	mov	r1, r3
 80124ca:	4620      	mov	r0, r4
 80124cc:	f000 fdca 	bl	8013064 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	1d1c      	adds	r4, r3, #4
 80124d4:	68b8      	ldr	r0, [r7, #8]
 80124d6:	f7fe fa39 	bl	801094c <_ZSt7forwardIRP24TfLiteDepthToSpaceParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80124da:	4603      	mov	r3, r0
 80124dc:	4619      	mov	r1, r3
 80124de:	4620      	mov	r0, r4
 80124e0:	f001 fa5c 	bl	801399c <_ZNSt10_Head_baseILj0EP24TfLiteDepthToSpaceParamsLb0EEC1IRS1_EEOT_>
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	4618      	mov	r0, r3
 80124e8:	3714      	adds	r7, #20
 80124ea:	46bd      	mov	sp, r7
 80124ec:	bd90      	pop	{r4, r7, pc}

080124ee <_ZSt3getILj0EJP24TfLiteDepthToSpaceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 80124ee:	b580      	push	{r7, lr}
 80124f0:	b082      	sub	sp, #8
 80124f2:	af00      	add	r7, sp, #0
 80124f4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	4618      	mov	r0, r3
 80124fa:	f001 fa60 	bl	80139be <_ZSt12__get_helperILj0EP24TfLiteDepthToSpaceParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80124fe:	4603      	mov	r3, r0
 8012500:	4618      	mov	r0, r3
 8012502:	3708      	adds	r7, #8
 8012504:	46bd      	mov	sp, r7
 8012506:	bd80      	pop	{r7, pc}

08012508 <_ZSt12__get_helperILj0EP18TfLiteGatherParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8012508:	b580      	push	{r7, lr}
 801250a:	b082      	sub	sp, #8
 801250c:	af00      	add	r7, sp, #0
 801250e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8012510:	6878      	ldr	r0, [r7, #4]
 8012512:	f001 fa60 	bl	80139d6 <_ZNSt11_Tuple_implILj0EJP18TfLiteGatherParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8012516:	4603      	mov	r3, r0
 8012518:	4618      	mov	r0, r3
 801251a:	3708      	adds	r7, #8
 801251c:	46bd      	mov	sp, r7
 801251e:	bd80      	pop	{r7, pc}

08012520 <_ZSt3getILj1EJP18TfLiteGatherParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8012520:	b580      	push	{r7, lr}
 8012522:	b082      	sub	sp, #8
 8012524:	af00      	add	r7, sp, #0
 8012526:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	4618      	mov	r0, r3
 801252c:	f000 fd8e 	bl	801304c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8012530:	4603      	mov	r3, r0
 8012532:	4618      	mov	r0, r3
 8012534:	3708      	adds	r7, #8
 8012536:	46bd      	mov	sp, r7
 8012538:	bd80      	pop	{r7, pc}

0801253a <_ZNSt11_Tuple_implILj0EJP18TfLiteGatherParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 801253a:	b590      	push	{r4, r7, lr}
 801253c:	b085      	sub	sp, #20
 801253e:	af00      	add	r7, sp, #0
 8012540:	60f8      	str	r0, [r7, #12]
 8012542:	60b9      	str	r1, [r7, #8]
 8012544:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8012546:	68fc      	ldr	r4, [r7, #12]
 8012548:	6878      	ldr	r0, [r7, #4]
 801254a:	f7f9 ff76 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 801254e:	4603      	mov	r3, r0
 8012550:	4619      	mov	r1, r3
 8012552:	4620      	mov	r0, r4
 8012554:	f000 fd86 	bl	8013064 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	1d1c      	adds	r4, r3, #4
 801255c:	68b8      	ldr	r0, [r7, #8]
 801255e:	f7fe fa41 	bl	80109e4 <_ZSt7forwardIRP18TfLiteGatherParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8012562:	4603      	mov	r3, r0
 8012564:	4619      	mov	r1, r3
 8012566:	4620      	mov	r0, r4
 8012568:	f001 fa43 	bl	80139f2 <_ZNSt10_Head_baseILj0EP18TfLiteGatherParamsLb0EEC1IRS1_EEOT_>
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	4618      	mov	r0, r3
 8012570:	3714      	adds	r7, #20
 8012572:	46bd      	mov	sp, r7
 8012574:	bd90      	pop	{r4, r7, pc}

08012576 <_ZSt3getILj0EJP18TfLiteGatherParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 8012576:	b580      	push	{r7, lr}
 8012578:	b082      	sub	sp, #8
 801257a:	af00      	add	r7, sp, #0
 801257c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	4618      	mov	r0, r3
 8012582:	f001 fa47 	bl	8013a14 <_ZSt12__get_helperILj0EP18TfLiteGatherParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8012586:	4603      	mov	r3, r0
 8012588:	4618      	mov	r0, r3
 801258a:	3708      	adds	r7, #8
 801258c:	46bd      	mov	sp, r7
 801258e:	bd80      	pop	{r7, pc}

08012590 <_ZSt12__get_helperILj0EP19TfLiteReducerParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8012590:	b580      	push	{r7, lr}
 8012592:	b082      	sub	sp, #8
 8012594:	af00      	add	r7, sp, #0
 8012596:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8012598:	6878      	ldr	r0, [r7, #4]
 801259a:	f001 fa47 	bl	8013a2c <_ZNSt11_Tuple_implILj0EJP19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 801259e:	4603      	mov	r3, r0
 80125a0:	4618      	mov	r0, r3
 80125a2:	3708      	adds	r7, #8
 80125a4:	46bd      	mov	sp, r7
 80125a6:	bd80      	pop	{r7, pc}

080125a8 <_ZSt3getILj1EJP19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80125a8:	b580      	push	{r7, lr}
 80125aa:	b082      	sub	sp, #8
 80125ac:	af00      	add	r7, sp, #0
 80125ae:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	4618      	mov	r0, r3
 80125b4:	f000 fd4a 	bl	801304c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80125b8:	4603      	mov	r3, r0
 80125ba:	4618      	mov	r0, r3
 80125bc:	3708      	adds	r7, #8
 80125be:	46bd      	mov	sp, r7
 80125c0:	bd80      	pop	{r7, pc}

080125c2 <_ZNSt11_Tuple_implILj0EJP19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 80125c2:	b590      	push	{r4, r7, lr}
 80125c4:	b085      	sub	sp, #20
 80125c6:	af00      	add	r7, sp, #0
 80125c8:	60f8      	str	r0, [r7, #12]
 80125ca:	60b9      	str	r1, [r7, #8]
 80125cc:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 80125ce:	68fc      	ldr	r4, [r7, #12]
 80125d0:	6878      	ldr	r0, [r7, #4]
 80125d2:	f7f9 ff32 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80125d6:	4603      	mov	r3, r0
 80125d8:	4619      	mov	r1, r3
 80125da:	4620      	mov	r0, r4
 80125dc:	f000 fd42 	bl	8013064 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	1d1c      	adds	r4, r3, #4
 80125e4:	68b8      	ldr	r0, [r7, #8]
 80125e6:	f7fe fa49 	bl	8010a7c <_ZSt7forwardIRP19TfLiteReducerParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80125ea:	4603      	mov	r3, r0
 80125ec:	4619      	mov	r1, r3
 80125ee:	4620      	mov	r0, r4
 80125f0:	f001 fa2a 	bl	8013a48 <_ZNSt10_Head_baseILj0EP19TfLiteReducerParamsLb0EEC1IRS1_EEOT_>
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	4618      	mov	r0, r3
 80125f8:	3714      	adds	r7, #20
 80125fa:	46bd      	mov	sp, r7
 80125fc:	bd90      	pop	{r4, r7, pc}

080125fe <_ZSt3getILj0EJP19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 80125fe:	b580      	push	{r7, lr}
 8012600:	b082      	sub	sp, #8
 8012602:	af00      	add	r7, sp, #0
 8012604:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	4618      	mov	r0, r3
 801260a:	f001 fa2e 	bl	8013a6a <_ZSt12__get_helperILj0EP19TfLiteReducerParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 801260e:	4603      	mov	r3, r0
 8012610:	4618      	mov	r0, r3
 8012612:	3708      	adds	r7, #8
 8012614:	46bd      	mov	sp, r7
 8012616:	bd80      	pop	{r7, pc}

08012618 <_ZSt12__get_helperILj0EP17TfLiteSplitParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8012618:	b580      	push	{r7, lr}
 801261a:	b082      	sub	sp, #8
 801261c:	af00      	add	r7, sp, #0
 801261e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8012620:	6878      	ldr	r0, [r7, #4]
 8012622:	f001 fa2e 	bl	8013a82 <_ZNSt11_Tuple_implILj0EJP17TfLiteSplitParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8012626:	4603      	mov	r3, r0
 8012628:	4618      	mov	r0, r3
 801262a:	3708      	adds	r7, #8
 801262c:	46bd      	mov	sp, r7
 801262e:	bd80      	pop	{r7, pc}

08012630 <_ZSt3getILj1EJP17TfLiteSplitParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8012630:	b580      	push	{r7, lr}
 8012632:	b082      	sub	sp, #8
 8012634:	af00      	add	r7, sp, #0
 8012636:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	4618      	mov	r0, r3
 801263c:	f000 fd06 	bl	801304c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8012640:	4603      	mov	r3, r0
 8012642:	4618      	mov	r0, r3
 8012644:	3708      	adds	r7, #8
 8012646:	46bd      	mov	sp, r7
 8012648:	bd80      	pop	{r7, pc}

0801264a <_ZNSt11_Tuple_implILj0EJP17TfLiteSplitParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 801264a:	b590      	push	{r4, r7, lr}
 801264c:	b085      	sub	sp, #20
 801264e:	af00      	add	r7, sp, #0
 8012650:	60f8      	str	r0, [r7, #12]
 8012652:	60b9      	str	r1, [r7, #8]
 8012654:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8012656:	68fc      	ldr	r4, [r7, #12]
 8012658:	6878      	ldr	r0, [r7, #4]
 801265a:	f7f9 feee 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 801265e:	4603      	mov	r3, r0
 8012660:	4619      	mov	r1, r3
 8012662:	4620      	mov	r0, r4
 8012664:	f000 fcfe 	bl	8013064 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	1d1c      	adds	r4, r3, #4
 801266c:	68b8      	ldr	r0, [r7, #8]
 801266e:	f7fe fa51 	bl	8010b14 <_ZSt7forwardIRP17TfLiteSplitParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8012672:	4603      	mov	r3, r0
 8012674:	4619      	mov	r1, r3
 8012676:	4620      	mov	r0, r4
 8012678:	f001 fa11 	bl	8013a9e <_ZNSt10_Head_baseILj0EP17TfLiteSplitParamsLb0EEC1IRS1_EEOT_>
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	4618      	mov	r0, r3
 8012680:	3714      	adds	r7, #20
 8012682:	46bd      	mov	sp, r7
 8012684:	bd90      	pop	{r4, r7, pc}

08012686 <_ZSt3getILj0EJP17TfLiteSplitParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 8012686:	b580      	push	{r7, lr}
 8012688:	b082      	sub	sp, #8
 801268a:	af00      	add	r7, sp, #0
 801268c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	4618      	mov	r0, r3
 8012692:	f001 fa15 	bl	8013ac0 <_ZSt12__get_helperILj0EP17TfLiteSplitParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8012696:	4603      	mov	r3, r0
 8012698:	4618      	mov	r0, r3
 801269a:	3708      	adds	r7, #8
 801269c:	46bd      	mov	sp, r7
 801269e:	bd80      	pop	{r7, pc}

080126a0 <_ZSt12__get_helperILj0EP19TfLiteSqueezeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80126a0:	b580      	push	{r7, lr}
 80126a2:	b082      	sub	sp, #8
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80126a8:	6878      	ldr	r0, [r7, #4]
 80126aa:	f001 fa15 	bl	8013ad8 <_ZNSt11_Tuple_implILj0EJP19TfLiteSqueezeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 80126ae:	4603      	mov	r3, r0
 80126b0:	4618      	mov	r0, r3
 80126b2:	3708      	adds	r7, #8
 80126b4:	46bd      	mov	sp, r7
 80126b6:	bd80      	pop	{r7, pc}

080126b8 <_ZSt3getILj1EJP19TfLiteSqueezeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80126b8:	b580      	push	{r7, lr}
 80126ba:	b082      	sub	sp, #8
 80126bc:	af00      	add	r7, sp, #0
 80126be:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	4618      	mov	r0, r3
 80126c4:	f000 fcc2 	bl	801304c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80126c8:	4603      	mov	r3, r0
 80126ca:	4618      	mov	r0, r3
 80126cc:	3708      	adds	r7, #8
 80126ce:	46bd      	mov	sp, r7
 80126d0:	bd80      	pop	{r7, pc}

080126d2 <_ZNSt11_Tuple_implILj0EJP19TfLiteSqueezeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 80126d2:	b590      	push	{r4, r7, lr}
 80126d4:	b085      	sub	sp, #20
 80126d6:	af00      	add	r7, sp, #0
 80126d8:	60f8      	str	r0, [r7, #12]
 80126da:	60b9      	str	r1, [r7, #8]
 80126dc:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 80126de:	68fc      	ldr	r4, [r7, #12]
 80126e0:	6878      	ldr	r0, [r7, #4]
 80126e2:	f7f9 feaa 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80126e6:	4603      	mov	r3, r0
 80126e8:	4619      	mov	r1, r3
 80126ea:	4620      	mov	r0, r4
 80126ec:	f000 fcba 	bl	8013064 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 80126f0:	68fb      	ldr	r3, [r7, #12]
 80126f2:	1d1c      	adds	r4, r3, #4
 80126f4:	68b8      	ldr	r0, [r7, #8]
 80126f6:	f7fe fa59 	bl	8010bac <_ZSt7forwardIRP19TfLiteSqueezeParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80126fa:	4603      	mov	r3, r0
 80126fc:	4619      	mov	r1, r3
 80126fe:	4620      	mov	r0, r4
 8012700:	f001 f9f8 	bl	8013af4 <_ZNSt10_Head_baseILj0EP19TfLiteSqueezeParamsLb0EEC1IRS1_EEOT_>
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	4618      	mov	r0, r3
 8012708:	3714      	adds	r7, #20
 801270a:	46bd      	mov	sp, r7
 801270c:	bd90      	pop	{r4, r7, pc}

0801270e <_ZSt3getILj0EJP19TfLiteSqueezeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 801270e:	b580      	push	{r7, lr}
 8012710:	b082      	sub	sp, #8
 8012712:	af00      	add	r7, sp, #0
 8012714:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	4618      	mov	r0, r3
 801271a:	f001 f9fc 	bl	8013b16 <_ZSt12__get_helperILj0EP19TfLiteSqueezeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 801271e:	4603      	mov	r3, r0
 8012720:	4618      	mov	r0, r3
 8012722:	3708      	adds	r7, #8
 8012724:	46bd      	mov	sp, r7
 8012726:	bd80      	pop	{r7, pc}

08012728 <_ZSt12__get_helperILj0EP24TfLiteStridedSliceParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8012728:	b580      	push	{r7, lr}
 801272a:	b082      	sub	sp, #8
 801272c:	af00      	add	r7, sp, #0
 801272e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8012730:	6878      	ldr	r0, [r7, #4]
 8012732:	f001 f9fc 	bl	8013b2e <_ZNSt11_Tuple_implILj0EJP24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8012736:	4603      	mov	r3, r0
 8012738:	4618      	mov	r0, r3
 801273a:	3708      	adds	r7, #8
 801273c:	46bd      	mov	sp, r7
 801273e:	bd80      	pop	{r7, pc}

08012740 <_ZSt3getILj1EJP24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8012740:	b580      	push	{r7, lr}
 8012742:	b082      	sub	sp, #8
 8012744:	af00      	add	r7, sp, #0
 8012746:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	4618      	mov	r0, r3
 801274c:	f000 fc7e 	bl	801304c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8012750:	4603      	mov	r3, r0
 8012752:	4618      	mov	r0, r3
 8012754:	3708      	adds	r7, #8
 8012756:	46bd      	mov	sp, r7
 8012758:	bd80      	pop	{r7, pc}

0801275a <_ZNSt11_Tuple_implILj0EJP24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 801275a:	b590      	push	{r4, r7, lr}
 801275c:	b085      	sub	sp, #20
 801275e:	af00      	add	r7, sp, #0
 8012760:	60f8      	str	r0, [r7, #12]
 8012762:	60b9      	str	r1, [r7, #8]
 8012764:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8012766:	68fc      	ldr	r4, [r7, #12]
 8012768:	6878      	ldr	r0, [r7, #4]
 801276a:	f7f9 fe66 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 801276e:	4603      	mov	r3, r0
 8012770:	4619      	mov	r1, r3
 8012772:	4620      	mov	r0, r4
 8012774:	f000 fc76 	bl	8013064 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	1d1c      	adds	r4, r3, #4
 801277c:	68b8      	ldr	r0, [r7, #8]
 801277e:	f7fe fa61 	bl	8010c44 <_ZSt7forwardIRP24TfLiteStridedSliceParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8012782:	4603      	mov	r3, r0
 8012784:	4619      	mov	r1, r3
 8012786:	4620      	mov	r0, r4
 8012788:	f001 f9df 	bl	8013b4a <_ZNSt10_Head_baseILj0EP24TfLiteStridedSliceParamsLb0EEC1IRS1_EEOT_>
 801278c:	68fb      	ldr	r3, [r7, #12]
 801278e:	4618      	mov	r0, r3
 8012790:	3714      	adds	r7, #20
 8012792:	46bd      	mov	sp, r7
 8012794:	bd90      	pop	{r4, r7, pc}

08012796 <_ZSt3getILj0EJP24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 8012796:	b580      	push	{r7, lr}
 8012798:	b082      	sub	sp, #8
 801279a:	af00      	add	r7, sp, #0
 801279c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	4618      	mov	r0, r3
 80127a2:	f001 f9e3 	bl	8013b6c <_ZSt12__get_helperILj0EP24TfLiteStridedSliceParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80127a6:	4603      	mov	r3, r0
 80127a8:	4618      	mov	r0, r3
 80127aa:	3708      	adds	r7, #8
 80127ac:	46bd      	mov	sp, r7
 80127ae:	bd80      	pop	{r7, pc}

080127b0 <_ZSt12__get_helperILj0EP18TfLiteArgMaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80127b0:	b580      	push	{r7, lr}
 80127b2:	b082      	sub	sp, #8
 80127b4:	af00      	add	r7, sp, #0
 80127b6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80127b8:	6878      	ldr	r0, [r7, #4]
 80127ba:	f001 f9e3 	bl	8013b84 <_ZNSt11_Tuple_implILj0EJP18TfLiteArgMaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 80127be:	4603      	mov	r3, r0
 80127c0:	4618      	mov	r0, r3
 80127c2:	3708      	adds	r7, #8
 80127c4:	46bd      	mov	sp, r7
 80127c6:	bd80      	pop	{r7, pc}

080127c8 <_ZSt3getILj1EJP18TfLiteArgMaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80127c8:	b580      	push	{r7, lr}
 80127ca:	b082      	sub	sp, #8
 80127cc:	af00      	add	r7, sp, #0
 80127ce:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	4618      	mov	r0, r3
 80127d4:	f000 fc3a 	bl	801304c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80127d8:	4603      	mov	r3, r0
 80127da:	4618      	mov	r0, r3
 80127dc:	3708      	adds	r7, #8
 80127de:	46bd      	mov	sp, r7
 80127e0:	bd80      	pop	{r7, pc}

080127e2 <_ZNSt11_Tuple_implILj0EJP18TfLiteArgMaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 80127e2:	b590      	push	{r4, r7, lr}
 80127e4:	b085      	sub	sp, #20
 80127e6:	af00      	add	r7, sp, #0
 80127e8:	60f8      	str	r0, [r7, #12]
 80127ea:	60b9      	str	r1, [r7, #8]
 80127ec:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 80127ee:	68fc      	ldr	r4, [r7, #12]
 80127f0:	6878      	ldr	r0, [r7, #4]
 80127f2:	f7f9 fe22 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80127f6:	4603      	mov	r3, r0
 80127f8:	4619      	mov	r1, r3
 80127fa:	4620      	mov	r0, r4
 80127fc:	f000 fc32 	bl	8013064 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	1d1c      	adds	r4, r3, #4
 8012804:	68b8      	ldr	r0, [r7, #8]
 8012806:	f7fe fa69 	bl	8010cdc <_ZSt7forwardIRP18TfLiteArgMaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 801280a:	4603      	mov	r3, r0
 801280c:	4619      	mov	r1, r3
 801280e:	4620      	mov	r0, r4
 8012810:	f001 f9c6 	bl	8013ba0 <_ZNSt10_Head_baseILj0EP18TfLiteArgMaxParamsLb0EEC1IRS1_EEOT_>
 8012814:	68fb      	ldr	r3, [r7, #12]
 8012816:	4618      	mov	r0, r3
 8012818:	3714      	adds	r7, #20
 801281a:	46bd      	mov	sp, r7
 801281c:	bd90      	pop	{r4, r7, pc}

0801281e <_ZSt3getILj0EJP18TfLiteArgMaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 801281e:	b580      	push	{r7, lr}
 8012820:	b082      	sub	sp, #8
 8012822:	af00      	add	r7, sp, #0
 8012824:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	4618      	mov	r0, r3
 801282a:	f001 f9ca 	bl	8013bc2 <_ZSt12__get_helperILj0EP18TfLiteArgMaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 801282e:	4603      	mov	r3, r0
 8012830:	4618      	mov	r0, r3
 8012832:	3708      	adds	r7, #8
 8012834:	46bd      	mov	sp, r7
 8012836:	bd80      	pop	{r7, pc}

08012838 <_ZSt12__get_helperILj0EP18TfLiteArgMinParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8012838:	b580      	push	{r7, lr}
 801283a:	b082      	sub	sp, #8
 801283c:	af00      	add	r7, sp, #0
 801283e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8012840:	6878      	ldr	r0, [r7, #4]
 8012842:	f001 f9ca 	bl	8013bda <_ZNSt11_Tuple_implILj0EJP18TfLiteArgMinParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8012846:	4603      	mov	r3, r0
 8012848:	4618      	mov	r0, r3
 801284a:	3708      	adds	r7, #8
 801284c:	46bd      	mov	sp, r7
 801284e:	bd80      	pop	{r7, pc}

08012850 <_ZSt3getILj1EJP18TfLiteArgMinParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8012850:	b580      	push	{r7, lr}
 8012852:	b082      	sub	sp, #8
 8012854:	af00      	add	r7, sp, #0
 8012856:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	4618      	mov	r0, r3
 801285c:	f000 fbf6 	bl	801304c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8012860:	4603      	mov	r3, r0
 8012862:	4618      	mov	r0, r3
 8012864:	3708      	adds	r7, #8
 8012866:	46bd      	mov	sp, r7
 8012868:	bd80      	pop	{r7, pc}

0801286a <_ZNSt11_Tuple_implILj0EJP18TfLiteArgMinParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 801286a:	b590      	push	{r4, r7, lr}
 801286c:	b085      	sub	sp, #20
 801286e:	af00      	add	r7, sp, #0
 8012870:	60f8      	str	r0, [r7, #12]
 8012872:	60b9      	str	r1, [r7, #8]
 8012874:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8012876:	68fc      	ldr	r4, [r7, #12]
 8012878:	6878      	ldr	r0, [r7, #4]
 801287a:	f7f9 fdde 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 801287e:	4603      	mov	r3, r0
 8012880:	4619      	mov	r1, r3
 8012882:	4620      	mov	r0, r4
 8012884:	f000 fbee 	bl	8013064 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8012888:	68fb      	ldr	r3, [r7, #12]
 801288a:	1d1c      	adds	r4, r3, #4
 801288c:	68b8      	ldr	r0, [r7, #8]
 801288e:	f7fe fa71 	bl	8010d74 <_ZSt7forwardIRP18TfLiteArgMinParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8012892:	4603      	mov	r3, r0
 8012894:	4619      	mov	r1, r3
 8012896:	4620      	mov	r0, r4
 8012898:	f001 f9ad 	bl	8013bf6 <_ZNSt10_Head_baseILj0EP18TfLiteArgMinParamsLb0EEC1IRS1_EEOT_>
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	4618      	mov	r0, r3
 80128a0:	3714      	adds	r7, #20
 80128a2:	46bd      	mov	sp, r7
 80128a4:	bd90      	pop	{r4, r7, pc}

080128a6 <_ZSt3getILj0EJP18TfLiteArgMinParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 80128a6:	b580      	push	{r7, lr}
 80128a8:	b082      	sub	sp, #8
 80128aa:	af00      	add	r7, sp, #0
 80128ac:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	4618      	mov	r0, r3
 80128b2:	f001 f9b1 	bl	8013c18 <_ZSt12__get_helperILj0EP18TfLiteArgMinParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80128b6:	4603      	mov	r3, r0
 80128b8:	4618      	mov	r0, r3
 80128ba:	3708      	adds	r7, #8
 80128bc:	46bd      	mov	sp, r7
 80128be:	bd80      	pop	{r7, pc}

080128c0 <_ZSt12__get_helperILj0EP25TfLiteTransposeConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80128c0:	b580      	push	{r7, lr}
 80128c2:	b082      	sub	sp, #8
 80128c4:	af00      	add	r7, sp, #0
 80128c6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80128c8:	6878      	ldr	r0, [r7, #4]
 80128ca:	f001 f9b1 	bl	8013c30 <_ZNSt11_Tuple_implILj0EJP25TfLiteTransposeConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 80128ce:	4603      	mov	r3, r0
 80128d0:	4618      	mov	r0, r3
 80128d2:	3708      	adds	r7, #8
 80128d4:	46bd      	mov	sp, r7
 80128d6:	bd80      	pop	{r7, pc}

080128d8 <_ZSt3getILj1EJP25TfLiteTransposeConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80128d8:	b580      	push	{r7, lr}
 80128da:	b082      	sub	sp, #8
 80128dc:	af00      	add	r7, sp, #0
 80128de:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	4618      	mov	r0, r3
 80128e4:	f000 fbb2 	bl	801304c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80128e8:	4603      	mov	r3, r0
 80128ea:	4618      	mov	r0, r3
 80128ec:	3708      	adds	r7, #8
 80128ee:	46bd      	mov	sp, r7
 80128f0:	bd80      	pop	{r7, pc}

080128f2 <_ZNSt11_Tuple_implILj0EJP25TfLiteTransposeConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 80128f2:	b590      	push	{r4, r7, lr}
 80128f4:	b085      	sub	sp, #20
 80128f6:	af00      	add	r7, sp, #0
 80128f8:	60f8      	str	r0, [r7, #12]
 80128fa:	60b9      	str	r1, [r7, #8]
 80128fc:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 80128fe:	68fc      	ldr	r4, [r7, #12]
 8012900:	6878      	ldr	r0, [r7, #4]
 8012902:	f7f9 fd9a 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8012906:	4603      	mov	r3, r0
 8012908:	4619      	mov	r1, r3
 801290a:	4620      	mov	r0, r4
 801290c:	f000 fbaa 	bl	8013064 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	1d1c      	adds	r4, r3, #4
 8012914:	68b8      	ldr	r0, [r7, #8]
 8012916:	f7fe fa79 	bl	8010e0c <_ZSt7forwardIRP25TfLiteTransposeConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 801291a:	4603      	mov	r3, r0
 801291c:	4619      	mov	r1, r3
 801291e:	4620      	mov	r0, r4
 8012920:	f001 f994 	bl	8013c4c <_ZNSt10_Head_baseILj0EP25TfLiteTransposeConvParamsLb0EEC1IRS1_EEOT_>
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	4618      	mov	r0, r3
 8012928:	3714      	adds	r7, #20
 801292a:	46bd      	mov	sp, r7
 801292c:	bd90      	pop	{r4, r7, pc}

0801292e <_ZSt3getILj0EJP25TfLiteTransposeConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 801292e:	b580      	push	{r7, lr}
 8012930:	b082      	sub	sp, #8
 8012932:	af00      	add	r7, sp, #0
 8012934:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	4618      	mov	r0, r3
 801293a:	f001 f998 	bl	8013c6e <_ZSt12__get_helperILj0EP25TfLiteTransposeConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 801293e:	4603      	mov	r3, r0
 8012940:	4618      	mov	r0, r3
 8012942:	3708      	adds	r7, #8
 8012944:	46bd      	mov	sp, r7
 8012946:	bd80      	pop	{r7, pc}

08012948 <_ZSt12__get_helperILj0EP25TfLiteSparseToDenseParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8012948:	b580      	push	{r7, lr}
 801294a:	b082      	sub	sp, #8
 801294c:	af00      	add	r7, sp, #0
 801294e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8012950:	6878      	ldr	r0, [r7, #4]
 8012952:	f001 f998 	bl	8013c86 <_ZNSt11_Tuple_implILj0EJP25TfLiteSparseToDenseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8012956:	4603      	mov	r3, r0
 8012958:	4618      	mov	r0, r3
 801295a:	3708      	adds	r7, #8
 801295c:	46bd      	mov	sp, r7
 801295e:	bd80      	pop	{r7, pc}

08012960 <_ZSt3getILj1EJP25TfLiteSparseToDenseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8012960:	b580      	push	{r7, lr}
 8012962:	b082      	sub	sp, #8
 8012964:	af00      	add	r7, sp, #0
 8012966:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	4618      	mov	r0, r3
 801296c:	f000 fb6e 	bl	801304c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8012970:	4603      	mov	r3, r0
 8012972:	4618      	mov	r0, r3
 8012974:	3708      	adds	r7, #8
 8012976:	46bd      	mov	sp, r7
 8012978:	bd80      	pop	{r7, pc}

0801297a <_ZNSt11_Tuple_implILj0EJP25TfLiteSparseToDenseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 801297a:	b590      	push	{r4, r7, lr}
 801297c:	b085      	sub	sp, #20
 801297e:	af00      	add	r7, sp, #0
 8012980:	60f8      	str	r0, [r7, #12]
 8012982:	60b9      	str	r1, [r7, #8]
 8012984:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8012986:	68fc      	ldr	r4, [r7, #12]
 8012988:	6878      	ldr	r0, [r7, #4]
 801298a:	f7f9 fd56 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 801298e:	4603      	mov	r3, r0
 8012990:	4619      	mov	r1, r3
 8012992:	4620      	mov	r0, r4
 8012994:	f000 fb66 	bl	8013064 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8012998:	68fb      	ldr	r3, [r7, #12]
 801299a:	1d1c      	adds	r4, r3, #4
 801299c:	68b8      	ldr	r0, [r7, #8]
 801299e:	f7fe fa81 	bl	8010ea4 <_ZSt7forwardIRP25TfLiteSparseToDenseParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80129a2:	4603      	mov	r3, r0
 80129a4:	4619      	mov	r1, r3
 80129a6:	4620      	mov	r0, r4
 80129a8:	f001 f97b 	bl	8013ca2 <_ZNSt10_Head_baseILj0EP25TfLiteSparseToDenseParamsLb0EEC1IRS1_EEOT_>
 80129ac:	68fb      	ldr	r3, [r7, #12]
 80129ae:	4618      	mov	r0, r3
 80129b0:	3714      	adds	r7, #20
 80129b2:	46bd      	mov	sp, r7
 80129b4:	bd90      	pop	{r4, r7, pc}

080129b6 <_ZSt3getILj0EJP25TfLiteSparseToDenseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 80129b6:	b580      	push	{r7, lr}
 80129b8:	b082      	sub	sp, #8
 80129ba:	af00      	add	r7, sp, #0
 80129bc:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	4618      	mov	r0, r3
 80129c2:	f001 f97f 	bl	8013cc4 <_ZSt12__get_helperILj0EP25TfLiteSparseToDenseParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80129c6:	4603      	mov	r3, r0
 80129c8:	4618      	mov	r0, r3
 80129ca:	3708      	adds	r7, #8
 80129cc:	46bd      	mov	sp, r7
 80129ce:	bd80      	pop	{r7, pc}

080129d0 <_ZSt12__get_helperILj0EP17TfLiteShapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80129d0:	b580      	push	{r7, lr}
 80129d2:	b082      	sub	sp, #8
 80129d4:	af00      	add	r7, sp, #0
 80129d6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80129d8:	6878      	ldr	r0, [r7, #4]
 80129da:	f001 f97f 	bl	8013cdc <_ZNSt11_Tuple_implILj0EJP17TfLiteShapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 80129de:	4603      	mov	r3, r0
 80129e0:	4618      	mov	r0, r3
 80129e2:	3708      	adds	r7, #8
 80129e4:	46bd      	mov	sp, r7
 80129e6:	bd80      	pop	{r7, pc}

080129e8 <_ZSt3getILj1EJP17TfLiteShapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80129e8:	b580      	push	{r7, lr}
 80129ea:	b082      	sub	sp, #8
 80129ec:	af00      	add	r7, sp, #0
 80129ee:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	4618      	mov	r0, r3
 80129f4:	f000 fb2a 	bl	801304c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80129f8:	4603      	mov	r3, r0
 80129fa:	4618      	mov	r0, r3
 80129fc:	3708      	adds	r7, #8
 80129fe:	46bd      	mov	sp, r7
 8012a00:	bd80      	pop	{r7, pc}

08012a02 <_ZNSt11_Tuple_implILj0EJP17TfLiteShapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8012a02:	b590      	push	{r4, r7, lr}
 8012a04:	b085      	sub	sp, #20
 8012a06:	af00      	add	r7, sp, #0
 8012a08:	60f8      	str	r0, [r7, #12]
 8012a0a:	60b9      	str	r1, [r7, #8]
 8012a0c:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8012a0e:	68fc      	ldr	r4, [r7, #12]
 8012a10:	6878      	ldr	r0, [r7, #4]
 8012a12:	f7f9 fd12 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8012a16:	4603      	mov	r3, r0
 8012a18:	4619      	mov	r1, r3
 8012a1a:	4620      	mov	r0, r4
 8012a1c:	f000 fb22 	bl	8013064 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8012a20:	68fb      	ldr	r3, [r7, #12]
 8012a22:	1d1c      	adds	r4, r3, #4
 8012a24:	68b8      	ldr	r0, [r7, #8]
 8012a26:	f7fe fa89 	bl	8010f3c <_ZSt7forwardIRP17TfLiteShapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8012a2a:	4603      	mov	r3, r0
 8012a2c:	4619      	mov	r1, r3
 8012a2e:	4620      	mov	r0, r4
 8012a30:	f001 f962 	bl	8013cf8 <_ZNSt10_Head_baseILj0EP17TfLiteShapeParamsLb0EEC1IRS1_EEOT_>
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	4618      	mov	r0, r3
 8012a38:	3714      	adds	r7, #20
 8012a3a:	46bd      	mov	sp, r7
 8012a3c:	bd90      	pop	{r4, r7, pc}

08012a3e <_ZSt3getILj0EJP17TfLiteShapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 8012a3e:	b580      	push	{r7, lr}
 8012a40:	b082      	sub	sp, #8
 8012a42:	af00      	add	r7, sp, #0
 8012a44:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	4618      	mov	r0, r3
 8012a4a:	f001 f966 	bl	8013d1a <_ZSt12__get_helperILj0EP17TfLiteShapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8012a4e:	4603      	mov	r3, r0
 8012a50:	4618      	mov	r0, r3
 8012a52:	3708      	adds	r7, #8
 8012a54:	46bd      	mov	sp, r7
 8012a56:	bd80      	pop	{r7, pc}

08012a58 <_ZSt12__get_helperILj0EP16TfLitePackParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8012a58:	b580      	push	{r7, lr}
 8012a5a:	b082      	sub	sp, #8
 8012a5c:	af00      	add	r7, sp, #0
 8012a5e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8012a60:	6878      	ldr	r0, [r7, #4]
 8012a62:	f001 f966 	bl	8013d32 <_ZNSt11_Tuple_implILj0EJP16TfLitePackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8012a66:	4603      	mov	r3, r0
 8012a68:	4618      	mov	r0, r3
 8012a6a:	3708      	adds	r7, #8
 8012a6c:	46bd      	mov	sp, r7
 8012a6e:	bd80      	pop	{r7, pc}

08012a70 <_ZSt3getILj1EJP16TfLitePackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8012a70:	b580      	push	{r7, lr}
 8012a72:	b082      	sub	sp, #8
 8012a74:	af00      	add	r7, sp, #0
 8012a76:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	4618      	mov	r0, r3
 8012a7c:	f000 fae6 	bl	801304c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8012a80:	4603      	mov	r3, r0
 8012a82:	4618      	mov	r0, r3
 8012a84:	3708      	adds	r7, #8
 8012a86:	46bd      	mov	sp, r7
 8012a88:	bd80      	pop	{r7, pc}

08012a8a <_ZNSt11_Tuple_implILj0EJP16TfLitePackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8012a8a:	b590      	push	{r4, r7, lr}
 8012a8c:	b085      	sub	sp, #20
 8012a8e:	af00      	add	r7, sp, #0
 8012a90:	60f8      	str	r0, [r7, #12]
 8012a92:	60b9      	str	r1, [r7, #8]
 8012a94:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8012a96:	68fc      	ldr	r4, [r7, #12]
 8012a98:	6878      	ldr	r0, [r7, #4]
 8012a9a:	f7f9 fcce 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8012a9e:	4603      	mov	r3, r0
 8012aa0:	4619      	mov	r1, r3
 8012aa2:	4620      	mov	r0, r4
 8012aa4:	f000 fade 	bl	8013064 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	1d1c      	adds	r4, r3, #4
 8012aac:	68b8      	ldr	r0, [r7, #8]
 8012aae:	f7fe fa91 	bl	8010fd4 <_ZSt7forwardIRP16TfLitePackParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8012ab2:	4603      	mov	r3, r0
 8012ab4:	4619      	mov	r1, r3
 8012ab6:	4620      	mov	r0, r4
 8012ab8:	f001 f949 	bl	8013d4e <_ZNSt10_Head_baseILj0EP16TfLitePackParamsLb0EEC1IRS1_EEOT_>
 8012abc:	68fb      	ldr	r3, [r7, #12]
 8012abe:	4618      	mov	r0, r3
 8012ac0:	3714      	adds	r7, #20
 8012ac2:	46bd      	mov	sp, r7
 8012ac4:	bd90      	pop	{r4, r7, pc}

08012ac6 <_ZSt3getILj0EJP16TfLitePackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 8012ac6:	b580      	push	{r7, lr}
 8012ac8:	b082      	sub	sp, #8
 8012aca:	af00      	add	r7, sp, #0
 8012acc:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	4618      	mov	r0, r3
 8012ad2:	f001 f94d 	bl	8013d70 <_ZSt12__get_helperILj0EP16TfLitePackParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8012ad6:	4603      	mov	r3, r0
 8012ad8:	4618      	mov	r0, r3
 8012ada:	3708      	adds	r7, #8
 8012adc:	46bd      	mov	sp, r7
 8012ade:	bd80      	pop	{r7, pc}

08012ae0 <_ZSt12__get_helperILj0EP21TfLiteFakeQuantParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8012ae0:	b580      	push	{r7, lr}
 8012ae2:	b082      	sub	sp, #8
 8012ae4:	af00      	add	r7, sp, #0
 8012ae6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8012ae8:	6878      	ldr	r0, [r7, #4]
 8012aea:	f001 f94d 	bl	8013d88 <_ZNSt11_Tuple_implILj0EJP21TfLiteFakeQuantParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8012aee:	4603      	mov	r3, r0
 8012af0:	4618      	mov	r0, r3
 8012af2:	3708      	adds	r7, #8
 8012af4:	46bd      	mov	sp, r7
 8012af6:	bd80      	pop	{r7, pc}

08012af8 <_ZSt3getILj1EJP21TfLiteFakeQuantParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8012af8:	b580      	push	{r7, lr}
 8012afa:	b082      	sub	sp, #8
 8012afc:	af00      	add	r7, sp, #0
 8012afe:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	4618      	mov	r0, r3
 8012b04:	f000 faa2 	bl	801304c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8012b08:	4603      	mov	r3, r0
 8012b0a:	4618      	mov	r0, r3
 8012b0c:	3708      	adds	r7, #8
 8012b0e:	46bd      	mov	sp, r7
 8012b10:	bd80      	pop	{r7, pc}

08012b12 <_ZNSt11_Tuple_implILj0EJP21TfLiteFakeQuantParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8012b12:	b590      	push	{r4, r7, lr}
 8012b14:	b085      	sub	sp, #20
 8012b16:	af00      	add	r7, sp, #0
 8012b18:	60f8      	str	r0, [r7, #12]
 8012b1a:	60b9      	str	r1, [r7, #8]
 8012b1c:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8012b1e:	68fc      	ldr	r4, [r7, #12]
 8012b20:	6878      	ldr	r0, [r7, #4]
 8012b22:	f7f9 fc8a 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8012b26:	4603      	mov	r3, r0
 8012b28:	4619      	mov	r1, r3
 8012b2a:	4620      	mov	r0, r4
 8012b2c:	f000 fa9a 	bl	8013064 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8012b30:	68fb      	ldr	r3, [r7, #12]
 8012b32:	1d1c      	adds	r4, r3, #4
 8012b34:	68b8      	ldr	r0, [r7, #8]
 8012b36:	f7fe fa99 	bl	801106c <_ZSt7forwardIRP21TfLiteFakeQuantParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8012b3a:	4603      	mov	r3, r0
 8012b3c:	4619      	mov	r1, r3
 8012b3e:	4620      	mov	r0, r4
 8012b40:	f001 f930 	bl	8013da4 <_ZNSt10_Head_baseILj0EP21TfLiteFakeQuantParamsLb0EEC1IRS1_EEOT_>
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	4618      	mov	r0, r3
 8012b48:	3714      	adds	r7, #20
 8012b4a:	46bd      	mov	sp, r7
 8012b4c:	bd90      	pop	{r4, r7, pc}

08012b4e <_ZSt3getILj0EJP21TfLiteFakeQuantParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 8012b4e:	b580      	push	{r7, lr}
 8012b50:	b082      	sub	sp, #8
 8012b52:	af00      	add	r7, sp, #0
 8012b54:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	4618      	mov	r0, r3
 8012b5a:	f001 f934 	bl	8013dc6 <_ZSt12__get_helperILj0EP21TfLiteFakeQuantParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8012b5e:	4603      	mov	r3, r0
 8012b60:	4618      	mov	r0, r3
 8012b62:	3708      	adds	r7, #8
 8012b64:	46bd      	mov	sp, r7
 8012b66:	bd80      	pop	{r7, pc}

08012b68 <_ZSt12__get_helperILj0EP18TfLiteOneHotParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8012b68:	b580      	push	{r7, lr}
 8012b6a:	b082      	sub	sp, #8
 8012b6c:	af00      	add	r7, sp, #0
 8012b6e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8012b70:	6878      	ldr	r0, [r7, #4]
 8012b72:	f001 f934 	bl	8013dde <_ZNSt11_Tuple_implILj0EJP18TfLiteOneHotParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8012b76:	4603      	mov	r3, r0
 8012b78:	4618      	mov	r0, r3
 8012b7a:	3708      	adds	r7, #8
 8012b7c:	46bd      	mov	sp, r7
 8012b7e:	bd80      	pop	{r7, pc}

08012b80 <_ZSt3getILj1EJP18TfLiteOneHotParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8012b80:	b580      	push	{r7, lr}
 8012b82:	b082      	sub	sp, #8
 8012b84:	af00      	add	r7, sp, #0
 8012b86:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	4618      	mov	r0, r3
 8012b8c:	f000 fa5e 	bl	801304c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8012b90:	4603      	mov	r3, r0
 8012b92:	4618      	mov	r0, r3
 8012b94:	3708      	adds	r7, #8
 8012b96:	46bd      	mov	sp, r7
 8012b98:	bd80      	pop	{r7, pc}

08012b9a <_ZNSt11_Tuple_implILj0EJP18TfLiteOneHotParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8012b9a:	b590      	push	{r4, r7, lr}
 8012b9c:	b085      	sub	sp, #20
 8012b9e:	af00      	add	r7, sp, #0
 8012ba0:	60f8      	str	r0, [r7, #12]
 8012ba2:	60b9      	str	r1, [r7, #8]
 8012ba4:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8012ba6:	68fc      	ldr	r4, [r7, #12]
 8012ba8:	6878      	ldr	r0, [r7, #4]
 8012baa:	f7f9 fc46 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8012bae:	4603      	mov	r3, r0
 8012bb0:	4619      	mov	r1, r3
 8012bb2:	4620      	mov	r0, r4
 8012bb4:	f000 fa56 	bl	8013064 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8012bb8:	68fb      	ldr	r3, [r7, #12]
 8012bba:	1d1c      	adds	r4, r3, #4
 8012bbc:	68b8      	ldr	r0, [r7, #8]
 8012bbe:	f7fe faa1 	bl	8011104 <_ZSt7forwardIRP18TfLiteOneHotParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8012bc2:	4603      	mov	r3, r0
 8012bc4:	4619      	mov	r1, r3
 8012bc6:	4620      	mov	r0, r4
 8012bc8:	f001 f917 	bl	8013dfa <_ZNSt10_Head_baseILj0EP18TfLiteOneHotParamsLb0EEC1IRS1_EEOT_>
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	4618      	mov	r0, r3
 8012bd0:	3714      	adds	r7, #20
 8012bd2:	46bd      	mov	sp, r7
 8012bd4:	bd90      	pop	{r4, r7, pc}

08012bd6 <_ZSt3getILj0EJP18TfLiteOneHotParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 8012bd6:	b580      	push	{r7, lr}
 8012bd8:	b082      	sub	sp, #8
 8012bda:	af00      	add	r7, sp, #0
 8012bdc:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	4618      	mov	r0, r3
 8012be2:	f001 f91b 	bl	8013e1c <_ZSt12__get_helperILj0EP18TfLiteOneHotParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8012be6:	4603      	mov	r3, r0
 8012be8:	4618      	mov	r0, r3
 8012bea:	3708      	adds	r7, #8
 8012bec:	46bd      	mov	sp, r7
 8012bee:	bd80      	pop	{r7, pc}

08012bf0 <_ZSt12__get_helperILj0EP18TfLiteUnpackParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8012bf0:	b580      	push	{r7, lr}
 8012bf2:	b082      	sub	sp, #8
 8012bf4:	af00      	add	r7, sp, #0
 8012bf6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8012bf8:	6878      	ldr	r0, [r7, #4]
 8012bfa:	f001 f91b 	bl	8013e34 <_ZNSt11_Tuple_implILj0EJP18TfLiteUnpackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8012bfe:	4603      	mov	r3, r0
 8012c00:	4618      	mov	r0, r3
 8012c02:	3708      	adds	r7, #8
 8012c04:	46bd      	mov	sp, r7
 8012c06:	bd80      	pop	{r7, pc}

08012c08 <_ZSt3getILj1EJP18TfLiteUnpackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8012c08:	b580      	push	{r7, lr}
 8012c0a:	b082      	sub	sp, #8
 8012c0c:	af00      	add	r7, sp, #0
 8012c0e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	4618      	mov	r0, r3
 8012c14:	f000 fa1a 	bl	801304c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8012c18:	4603      	mov	r3, r0
 8012c1a:	4618      	mov	r0, r3
 8012c1c:	3708      	adds	r7, #8
 8012c1e:	46bd      	mov	sp, r7
 8012c20:	bd80      	pop	{r7, pc}

08012c22 <_ZNSt11_Tuple_implILj0EJP18TfLiteUnpackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8012c22:	b590      	push	{r4, r7, lr}
 8012c24:	b085      	sub	sp, #20
 8012c26:	af00      	add	r7, sp, #0
 8012c28:	60f8      	str	r0, [r7, #12]
 8012c2a:	60b9      	str	r1, [r7, #8]
 8012c2c:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8012c2e:	68fc      	ldr	r4, [r7, #12]
 8012c30:	6878      	ldr	r0, [r7, #4]
 8012c32:	f7f9 fc02 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8012c36:	4603      	mov	r3, r0
 8012c38:	4619      	mov	r1, r3
 8012c3a:	4620      	mov	r0, r4
 8012c3c:	f000 fa12 	bl	8013064 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	1d1c      	adds	r4, r3, #4
 8012c44:	68b8      	ldr	r0, [r7, #8]
 8012c46:	f7fe faa9 	bl	801119c <_ZSt7forwardIRP18TfLiteUnpackParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8012c4a:	4603      	mov	r3, r0
 8012c4c:	4619      	mov	r1, r3
 8012c4e:	4620      	mov	r0, r4
 8012c50:	f001 f8fe 	bl	8013e50 <_ZNSt10_Head_baseILj0EP18TfLiteUnpackParamsLb0EEC1IRS1_EEOT_>
 8012c54:	68fb      	ldr	r3, [r7, #12]
 8012c56:	4618      	mov	r0, r3
 8012c58:	3714      	adds	r7, #20
 8012c5a:	46bd      	mov	sp, r7
 8012c5c:	bd90      	pop	{r4, r7, pc}

08012c5e <_ZSt3getILj0EJP18TfLiteUnpackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 8012c5e:	b580      	push	{r7, lr}
 8012c60:	b082      	sub	sp, #8
 8012c62:	af00      	add	r7, sp, #0
 8012c64:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	4618      	mov	r0, r3
 8012c6a:	f001 f902 	bl	8013e72 <_ZSt12__get_helperILj0EP18TfLiteUnpackParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8012c6e:	4603      	mov	r3, r0
 8012c70:	4618      	mov	r0, r3
 8012c72:	3708      	adds	r7, #8
 8012c74:	46bd      	mov	sp, r7
 8012c76:	bd80      	pop	{r7, pc}

08012c78 <_ZSt12__get_helperILj0EP21TfLiteLeakyReluParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8012c78:	b580      	push	{r7, lr}
 8012c7a:	b082      	sub	sp, #8
 8012c7c:	af00      	add	r7, sp, #0
 8012c7e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8012c80:	6878      	ldr	r0, [r7, #4]
 8012c82:	f001 f902 	bl	8013e8a <_ZNSt11_Tuple_implILj0EJP21TfLiteLeakyReluParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8012c86:	4603      	mov	r3, r0
 8012c88:	4618      	mov	r0, r3
 8012c8a:	3708      	adds	r7, #8
 8012c8c:	46bd      	mov	sp, r7
 8012c8e:	bd80      	pop	{r7, pc}

08012c90 <_ZSt3getILj1EJP21TfLiteLeakyReluParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8012c90:	b580      	push	{r7, lr}
 8012c92:	b082      	sub	sp, #8
 8012c94:	af00      	add	r7, sp, #0
 8012c96:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	f000 f9d6 	bl	801304c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8012ca0:	4603      	mov	r3, r0
 8012ca2:	4618      	mov	r0, r3
 8012ca4:	3708      	adds	r7, #8
 8012ca6:	46bd      	mov	sp, r7
 8012ca8:	bd80      	pop	{r7, pc}

08012caa <_ZNSt11_Tuple_implILj0EJP21TfLiteLeakyReluParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8012caa:	b590      	push	{r4, r7, lr}
 8012cac:	b085      	sub	sp, #20
 8012cae:	af00      	add	r7, sp, #0
 8012cb0:	60f8      	str	r0, [r7, #12]
 8012cb2:	60b9      	str	r1, [r7, #8]
 8012cb4:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8012cb6:	68fc      	ldr	r4, [r7, #12]
 8012cb8:	6878      	ldr	r0, [r7, #4]
 8012cba:	f7f9 fbbe 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8012cbe:	4603      	mov	r3, r0
 8012cc0:	4619      	mov	r1, r3
 8012cc2:	4620      	mov	r0, r4
 8012cc4:	f000 f9ce 	bl	8013064 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8012cc8:	68fb      	ldr	r3, [r7, #12]
 8012cca:	1d1c      	adds	r4, r3, #4
 8012ccc:	68b8      	ldr	r0, [r7, #8]
 8012cce:	f7fe fab1 	bl	8011234 <_ZSt7forwardIRP21TfLiteLeakyReluParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8012cd2:	4603      	mov	r3, r0
 8012cd4:	4619      	mov	r1, r3
 8012cd6:	4620      	mov	r0, r4
 8012cd8:	f001 f8e5 	bl	8013ea6 <_ZNSt10_Head_baseILj0EP21TfLiteLeakyReluParamsLb0EEC1IRS1_EEOT_>
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	4618      	mov	r0, r3
 8012ce0:	3714      	adds	r7, #20
 8012ce2:	46bd      	mov	sp, r7
 8012ce4:	bd90      	pop	{r4, r7, pc}

08012ce6 <_ZSt3getILj0EJP21TfLiteLeakyReluParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 8012ce6:	b580      	push	{r7, lr}
 8012ce8:	b082      	sub	sp, #8
 8012cea:	af00      	add	r7, sp, #0
 8012cec:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	4618      	mov	r0, r3
 8012cf2:	f001 f8e9 	bl	8013ec8 <_ZSt12__get_helperILj0EP21TfLiteLeakyReluParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8012cf6:	4603      	mov	r3, r0
 8012cf8:	4618      	mov	r0, r3
 8012cfa:	3708      	adds	r7, #8
 8012cfc:	46bd      	mov	sp, r7
 8012cfe:	bd80      	pop	{r7, pc}

08012d00 <_ZSt12__get_helperILj0EP25TfLiteMirrorPaddingParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8012d00:	b580      	push	{r7, lr}
 8012d02:	b082      	sub	sp, #8
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8012d08:	6878      	ldr	r0, [r7, #4]
 8012d0a:	f001 f8e9 	bl	8013ee0 <_ZNSt11_Tuple_implILj0EJP25TfLiteMirrorPaddingParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8012d0e:	4603      	mov	r3, r0
 8012d10:	4618      	mov	r0, r3
 8012d12:	3708      	adds	r7, #8
 8012d14:	46bd      	mov	sp, r7
 8012d16:	bd80      	pop	{r7, pc}

08012d18 <_ZSt3getILj1EJP25TfLiteMirrorPaddingParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8012d18:	b580      	push	{r7, lr}
 8012d1a:	b082      	sub	sp, #8
 8012d1c:	af00      	add	r7, sp, #0
 8012d1e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	4618      	mov	r0, r3
 8012d24:	f000 f992 	bl	801304c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8012d28:	4603      	mov	r3, r0
 8012d2a:	4618      	mov	r0, r3
 8012d2c:	3708      	adds	r7, #8
 8012d2e:	46bd      	mov	sp, r7
 8012d30:	bd80      	pop	{r7, pc}

08012d32 <_ZNSt11_Tuple_implILj0EJP25TfLiteMirrorPaddingParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8012d32:	b590      	push	{r4, r7, lr}
 8012d34:	b085      	sub	sp, #20
 8012d36:	af00      	add	r7, sp, #0
 8012d38:	60f8      	str	r0, [r7, #12]
 8012d3a:	60b9      	str	r1, [r7, #8]
 8012d3c:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8012d3e:	68fc      	ldr	r4, [r7, #12]
 8012d40:	6878      	ldr	r0, [r7, #4]
 8012d42:	f7f9 fb7a 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8012d46:	4603      	mov	r3, r0
 8012d48:	4619      	mov	r1, r3
 8012d4a:	4620      	mov	r0, r4
 8012d4c:	f000 f98a 	bl	8013064 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	1d1c      	adds	r4, r3, #4
 8012d54:	68b8      	ldr	r0, [r7, #8]
 8012d56:	f7fe fab9 	bl	80112cc <_ZSt7forwardIRP25TfLiteMirrorPaddingParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8012d5a:	4603      	mov	r3, r0
 8012d5c:	4619      	mov	r1, r3
 8012d5e:	4620      	mov	r0, r4
 8012d60:	f001 f8cc 	bl	8013efc <_ZNSt10_Head_baseILj0EP25TfLiteMirrorPaddingParamsLb0EEC1IRS1_EEOT_>
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	4618      	mov	r0, r3
 8012d68:	3714      	adds	r7, #20
 8012d6a:	46bd      	mov	sp, r7
 8012d6c:	bd90      	pop	{r4, r7, pc}

08012d6e <_ZSt3getILj0EJP25TfLiteMirrorPaddingParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 8012d6e:	b580      	push	{r7, lr}
 8012d70:	b082      	sub	sp, #8
 8012d72:	af00      	add	r7, sp, #0
 8012d74:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	4618      	mov	r0, r3
 8012d7a:	f001 f8d0 	bl	8013f1e <_ZSt12__get_helperILj0EP25TfLiteMirrorPaddingParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8012d7e:	4603      	mov	r3, r0
 8012d80:	4618      	mov	r0, r3
 8012d82:	3708      	adds	r7, #8
 8012d84:	46bd      	mov	sp, r7
 8012d86:	bd80      	pop	{r7, pc}

08012d88 <_ZSt12__get_helperILj0EP18TfLiteUniqueParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8012d88:	b580      	push	{r7, lr}
 8012d8a:	b082      	sub	sp, #8
 8012d8c:	af00      	add	r7, sp, #0
 8012d8e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8012d90:	6878      	ldr	r0, [r7, #4]
 8012d92:	f001 f8d0 	bl	8013f36 <_ZNSt11_Tuple_implILj0EJP18TfLiteUniqueParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8012d96:	4603      	mov	r3, r0
 8012d98:	4618      	mov	r0, r3
 8012d9a:	3708      	adds	r7, #8
 8012d9c:	46bd      	mov	sp, r7
 8012d9e:	bd80      	pop	{r7, pc}

08012da0 <_ZSt3getILj1EJP18TfLiteUniqueParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8012da0:	b580      	push	{r7, lr}
 8012da2:	b082      	sub	sp, #8
 8012da4:	af00      	add	r7, sp, #0
 8012da6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	4618      	mov	r0, r3
 8012dac:	f000 f94e 	bl	801304c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8012db0:	4603      	mov	r3, r0
 8012db2:	4618      	mov	r0, r3
 8012db4:	3708      	adds	r7, #8
 8012db6:	46bd      	mov	sp, r7
 8012db8:	bd80      	pop	{r7, pc}

08012dba <_ZNSt11_Tuple_implILj0EJP18TfLiteUniqueParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8012dba:	b590      	push	{r4, r7, lr}
 8012dbc:	b085      	sub	sp, #20
 8012dbe:	af00      	add	r7, sp, #0
 8012dc0:	60f8      	str	r0, [r7, #12]
 8012dc2:	60b9      	str	r1, [r7, #8]
 8012dc4:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8012dc6:	68fc      	ldr	r4, [r7, #12]
 8012dc8:	6878      	ldr	r0, [r7, #4]
 8012dca:	f7f9 fb36 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8012dce:	4603      	mov	r3, r0
 8012dd0:	4619      	mov	r1, r3
 8012dd2:	4620      	mov	r0, r4
 8012dd4:	f000 f946 	bl	8013064 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8012dd8:	68fb      	ldr	r3, [r7, #12]
 8012dda:	1d1c      	adds	r4, r3, #4
 8012ddc:	68b8      	ldr	r0, [r7, #8]
 8012dde:	f7fe fac1 	bl	8011364 <_ZSt7forwardIRP18TfLiteUniqueParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8012de2:	4603      	mov	r3, r0
 8012de4:	4619      	mov	r1, r3
 8012de6:	4620      	mov	r0, r4
 8012de8:	f001 f8b3 	bl	8013f52 <_ZNSt10_Head_baseILj0EP18TfLiteUniqueParamsLb0EEC1IRS1_EEOT_>
 8012dec:	68fb      	ldr	r3, [r7, #12]
 8012dee:	4618      	mov	r0, r3
 8012df0:	3714      	adds	r7, #20
 8012df2:	46bd      	mov	sp, r7
 8012df4:	bd90      	pop	{r4, r7, pc}

08012df6 <_ZSt3getILj0EJP18TfLiteUniqueParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 8012df6:	b580      	push	{r7, lr}
 8012df8:	b082      	sub	sp, #8
 8012dfa:	af00      	add	r7, sp, #0
 8012dfc:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	4618      	mov	r0, r3
 8012e02:	f001 f8b7 	bl	8013f74 <_ZSt12__get_helperILj0EP18TfLiteUniqueParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8012e06:	4603      	mov	r3, r0
 8012e08:	4618      	mov	r0, r3
 8012e0a:	3708      	adds	r7, #8
 8012e0c:	46bd      	mov	sp, r7
 8012e0e:	bd80      	pop	{r7, pc}

08012e10 <_ZSt12__get_helperILj0EP27TfLiteReverseSequenceParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8012e10:	b580      	push	{r7, lr}
 8012e12:	b082      	sub	sp, #8
 8012e14:	af00      	add	r7, sp, #0
 8012e16:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8012e18:	6878      	ldr	r0, [r7, #4]
 8012e1a:	f001 f8b7 	bl	8013f8c <_ZNSt11_Tuple_implILj0EJP27TfLiteReverseSequenceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8012e1e:	4603      	mov	r3, r0
 8012e20:	4618      	mov	r0, r3
 8012e22:	3708      	adds	r7, #8
 8012e24:	46bd      	mov	sp, r7
 8012e26:	bd80      	pop	{r7, pc}

08012e28 <_ZSt3getILj1EJP27TfLiteReverseSequenceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8012e28:	b580      	push	{r7, lr}
 8012e2a:	b082      	sub	sp, #8
 8012e2c:	af00      	add	r7, sp, #0
 8012e2e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	4618      	mov	r0, r3
 8012e34:	f000 f90a 	bl	801304c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8012e38:	4603      	mov	r3, r0
 8012e3a:	4618      	mov	r0, r3
 8012e3c:	3708      	adds	r7, #8
 8012e3e:	46bd      	mov	sp, r7
 8012e40:	bd80      	pop	{r7, pc}

08012e42 <_ZNSt11_Tuple_implILj0EJP27TfLiteReverseSequenceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8012e42:	b590      	push	{r4, r7, lr}
 8012e44:	b085      	sub	sp, #20
 8012e46:	af00      	add	r7, sp, #0
 8012e48:	60f8      	str	r0, [r7, #12]
 8012e4a:	60b9      	str	r1, [r7, #8]
 8012e4c:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8012e4e:	68fc      	ldr	r4, [r7, #12]
 8012e50:	6878      	ldr	r0, [r7, #4]
 8012e52:	f7f9 faf2 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8012e56:	4603      	mov	r3, r0
 8012e58:	4619      	mov	r1, r3
 8012e5a:	4620      	mov	r0, r4
 8012e5c:	f000 f902 	bl	8013064 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	1d1c      	adds	r4, r3, #4
 8012e64:	68b8      	ldr	r0, [r7, #8]
 8012e66:	f7fe fac9 	bl	80113fc <_ZSt7forwardIRP27TfLiteReverseSequenceParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8012e6a:	4603      	mov	r3, r0
 8012e6c:	4619      	mov	r1, r3
 8012e6e:	4620      	mov	r0, r4
 8012e70:	f001 f89a 	bl	8013fa8 <_ZNSt10_Head_baseILj0EP27TfLiteReverseSequenceParamsLb0EEC1IRS1_EEOT_>
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	4618      	mov	r0, r3
 8012e78:	3714      	adds	r7, #20
 8012e7a:	46bd      	mov	sp, r7
 8012e7c:	bd90      	pop	{r4, r7, pc}

08012e7e <_ZSt3getILj0EJP27TfLiteReverseSequenceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 8012e7e:	b580      	push	{r7, lr}
 8012e80:	b082      	sub	sp, #8
 8012e82:	af00      	add	r7, sp, #0
 8012e84:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	4618      	mov	r0, r3
 8012e8a:	f001 f89e 	bl	8013fca <_ZSt12__get_helperILj0EP27TfLiteReverseSequenceParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8012e8e:	4603      	mov	r3, r0
 8012e90:	4618      	mov	r0, r3
 8012e92:	3708      	adds	r7, #8
 8012e94:	46bd      	mov	sp, r7
 8012e96:	bd80      	pop	{r7, pc}

08012e98 <_ZSt12__get_helperILj0EP14TfLiteIfParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8012e98:	b580      	push	{r7, lr}
 8012e9a:	b082      	sub	sp, #8
 8012e9c:	af00      	add	r7, sp, #0
 8012e9e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8012ea0:	6878      	ldr	r0, [r7, #4]
 8012ea2:	f001 f89e 	bl	8013fe2 <_ZNSt11_Tuple_implILj0EJP14TfLiteIfParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8012ea6:	4603      	mov	r3, r0
 8012ea8:	4618      	mov	r0, r3
 8012eaa:	3708      	adds	r7, #8
 8012eac:	46bd      	mov	sp, r7
 8012eae:	bd80      	pop	{r7, pc}

08012eb0 <_ZSt3getILj1EJP14TfLiteIfParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8012eb0:	b580      	push	{r7, lr}
 8012eb2:	b082      	sub	sp, #8
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	4618      	mov	r0, r3
 8012ebc:	f000 f8c6 	bl	801304c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8012ec0:	4603      	mov	r3, r0
 8012ec2:	4618      	mov	r0, r3
 8012ec4:	3708      	adds	r7, #8
 8012ec6:	46bd      	mov	sp, r7
 8012ec8:	bd80      	pop	{r7, pc}

08012eca <_ZNSt11_Tuple_implILj0EJP14TfLiteIfParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8012eca:	b590      	push	{r4, r7, lr}
 8012ecc:	b085      	sub	sp, #20
 8012ece:	af00      	add	r7, sp, #0
 8012ed0:	60f8      	str	r0, [r7, #12]
 8012ed2:	60b9      	str	r1, [r7, #8]
 8012ed4:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8012ed6:	68fc      	ldr	r4, [r7, #12]
 8012ed8:	6878      	ldr	r0, [r7, #4]
 8012eda:	f7f9 faae 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8012ede:	4603      	mov	r3, r0
 8012ee0:	4619      	mov	r1, r3
 8012ee2:	4620      	mov	r0, r4
 8012ee4:	f000 f8be 	bl	8013064 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	1d1c      	adds	r4, r3, #4
 8012eec:	68b8      	ldr	r0, [r7, #8]
 8012eee:	f7fe fad1 	bl	8011494 <_ZSt7forwardIRP14TfLiteIfParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8012ef2:	4603      	mov	r3, r0
 8012ef4:	4619      	mov	r1, r3
 8012ef6:	4620      	mov	r0, r4
 8012ef8:	f001 f881 	bl	8013ffe <_ZNSt10_Head_baseILj0EP14TfLiteIfParamsLb0EEC1IRS1_EEOT_>
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	4618      	mov	r0, r3
 8012f00:	3714      	adds	r7, #20
 8012f02:	46bd      	mov	sp, r7
 8012f04:	bd90      	pop	{r4, r7, pc}

08012f06 <_ZSt3getILj0EJP14TfLiteIfParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 8012f06:	b580      	push	{r7, lr}
 8012f08:	b082      	sub	sp, #8
 8012f0a:	af00      	add	r7, sp, #0
 8012f0c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	4618      	mov	r0, r3
 8012f12:	f001 f885 	bl	8014020 <_ZSt12__get_helperILj0EP14TfLiteIfParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8012f16:	4603      	mov	r3, r0
 8012f18:	4618      	mov	r0, r3
 8012f1a:	3708      	adds	r7, #8
 8012f1c:	46bd      	mov	sp, r7
 8012f1e:	bd80      	pop	{r7, pc}

08012f20 <_ZSt12__get_helperILj0EP17TfLiteWhileParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8012f20:	b580      	push	{r7, lr}
 8012f22:	b082      	sub	sp, #8
 8012f24:	af00      	add	r7, sp, #0
 8012f26:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8012f28:	6878      	ldr	r0, [r7, #4]
 8012f2a:	f001 f885 	bl	8014038 <_ZNSt11_Tuple_implILj0EJP17TfLiteWhileParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8012f2e:	4603      	mov	r3, r0
 8012f30:	4618      	mov	r0, r3
 8012f32:	3708      	adds	r7, #8
 8012f34:	46bd      	mov	sp, r7
 8012f36:	bd80      	pop	{r7, pc}

08012f38 <_ZSt3getILj1EJP17TfLiteWhileParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8012f38:	b580      	push	{r7, lr}
 8012f3a:	b082      	sub	sp, #8
 8012f3c:	af00      	add	r7, sp, #0
 8012f3e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	4618      	mov	r0, r3
 8012f44:	f000 f882 	bl	801304c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8012f48:	4603      	mov	r3, r0
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	3708      	adds	r7, #8
 8012f4e:	46bd      	mov	sp, r7
 8012f50:	bd80      	pop	{r7, pc}

08012f52 <_ZNSt11_Tuple_implILj0EJP17TfLiteWhileParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8012f52:	b590      	push	{r4, r7, lr}
 8012f54:	b085      	sub	sp, #20
 8012f56:	af00      	add	r7, sp, #0
 8012f58:	60f8      	str	r0, [r7, #12]
 8012f5a:	60b9      	str	r1, [r7, #8]
 8012f5c:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8012f5e:	68fc      	ldr	r4, [r7, #12]
 8012f60:	6878      	ldr	r0, [r7, #4]
 8012f62:	f7f9 fa6a 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8012f66:	4603      	mov	r3, r0
 8012f68:	4619      	mov	r1, r3
 8012f6a:	4620      	mov	r0, r4
 8012f6c:	f000 f87a 	bl	8013064 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8012f70:	68fb      	ldr	r3, [r7, #12]
 8012f72:	1d1c      	adds	r4, r3, #4
 8012f74:	68b8      	ldr	r0, [r7, #8]
 8012f76:	f7fe fad9 	bl	801152c <_ZSt7forwardIRP17TfLiteWhileParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8012f7a:	4603      	mov	r3, r0
 8012f7c:	4619      	mov	r1, r3
 8012f7e:	4620      	mov	r0, r4
 8012f80:	f001 f868 	bl	8014054 <_ZNSt10_Head_baseILj0EP17TfLiteWhileParamsLb0EEC1IRS1_EEOT_>
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	4618      	mov	r0, r3
 8012f88:	3714      	adds	r7, #20
 8012f8a:	46bd      	mov	sp, r7
 8012f8c:	bd90      	pop	{r4, r7, pc}

08012f8e <_ZSt3getILj0EJP17TfLiteWhileParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 8012f8e:	b580      	push	{r7, lr}
 8012f90:	b082      	sub	sp, #8
 8012f92:	af00      	add	r7, sp, #0
 8012f94:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	4618      	mov	r0, r3
 8012f9a:	f001 f86c 	bl	8014076 <_ZSt12__get_helperILj0EP17TfLiteWhileParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8012f9e:	4603      	mov	r3, r0
 8012fa0:	4618      	mov	r0, r3
 8012fa2:	3708      	adds	r7, #8
 8012fa4:	46bd      	mov	sp, r7
 8012fa6:	bd80      	pop	{r7, pc}

08012fa8 <_ZSt12__get_helperILj0EP23TfLiteBatchMatMulParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8012fa8:	b580      	push	{r7, lr}
 8012faa:	b082      	sub	sp, #8
 8012fac:	af00      	add	r7, sp, #0
 8012fae:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8012fb0:	6878      	ldr	r0, [r7, #4]
 8012fb2:	f001 f86c 	bl	801408e <_ZNSt11_Tuple_implILj0EJP23TfLiteBatchMatMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8012fb6:	4603      	mov	r3, r0
 8012fb8:	4618      	mov	r0, r3
 8012fba:	3708      	adds	r7, #8
 8012fbc:	46bd      	mov	sp, r7
 8012fbe:	bd80      	pop	{r7, pc}

08012fc0 <_ZSt3getILj1EJP23TfLiteBatchMatMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8012fc0:	b580      	push	{r7, lr}
 8012fc2:	b082      	sub	sp, #8
 8012fc4:	af00      	add	r7, sp, #0
 8012fc6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	4618      	mov	r0, r3
 8012fcc:	f000 f83e 	bl	801304c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8012fd0:	4603      	mov	r3, r0
 8012fd2:	4618      	mov	r0, r3
 8012fd4:	3708      	adds	r7, #8
 8012fd6:	46bd      	mov	sp, r7
 8012fd8:	bd80      	pop	{r7, pc}

08012fda <_ZNSt11_Tuple_implILj0EJP23TfLiteBatchMatMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8012fda:	b590      	push	{r4, r7, lr}
 8012fdc:	b085      	sub	sp, #20
 8012fde:	af00      	add	r7, sp, #0
 8012fe0:	60f8      	str	r0, [r7, #12]
 8012fe2:	60b9      	str	r1, [r7, #8]
 8012fe4:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8012fe6:	68fc      	ldr	r4, [r7, #12]
 8012fe8:	6878      	ldr	r0, [r7, #4]
 8012fea:	f7f9 fa26 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8012fee:	4603      	mov	r3, r0
 8012ff0:	4619      	mov	r1, r3
 8012ff2:	4620      	mov	r0, r4
 8012ff4:	f000 f836 	bl	8013064 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	1d1c      	adds	r4, r3, #4
 8012ffc:	68b8      	ldr	r0, [r7, #8]
 8012ffe:	f7fe fae1 	bl	80115c4 <_ZSt7forwardIRP23TfLiteBatchMatMulParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8013002:	4603      	mov	r3, r0
 8013004:	4619      	mov	r1, r3
 8013006:	4620      	mov	r0, r4
 8013008:	f001 f84f 	bl	80140aa <_ZNSt10_Head_baseILj0EP23TfLiteBatchMatMulParamsLb0EEC1IRS1_EEOT_>
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	4618      	mov	r0, r3
 8013010:	3714      	adds	r7, #20
 8013012:	46bd      	mov	sp, r7
 8013014:	bd90      	pop	{r4, r7, pc}

08013016 <_ZSt3getILj0EJP23TfLiteBatchMatMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 8013016:	b580      	push	{r7, lr}
 8013018:	b082      	sub	sp, #8
 801301a:	af00      	add	r7, sp, #0
 801301c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	4618      	mov	r0, r3
 8013022:	f001 f853 	bl	80140cc <_ZSt12__get_helperILj0EP23TfLiteBatchMatMulParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8013026:	4603      	mov	r3, r0
 8013028:	4618      	mov	r0, r3
 801302a:	3708      	adds	r7, #8
 801302c:	46bd      	mov	sp, r7
 801302e:	bd80      	pop	{r7, pc}

08013030 <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8013030:	b580      	push	{r7, lr}
 8013032:	b082      	sub	sp, #8
 8013034:	af00      	add	r7, sp, #0
 8013036:	6078      	str	r0, [r7, #4]
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	3304      	adds	r3, #4
 801303c:	4618      	mov	r0, r3
 801303e:	f001 f851 	bl	80140e4 <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EE7_M_headERS2_>
 8013042:	4603      	mov	r3, r0
 8013044:	4618      	mov	r0, r3
 8013046:	3708      	adds	r7, #8
 8013048:	46bd      	mov	sp, r7
 801304a:	bd80      	pop	{r7, pc}

0801304c <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801304c:	b580      	push	{r7, lr}
 801304e:	b082      	sub	sp, #8
 8013050:	af00      	add	r7, sp, #0
 8013052:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8013054:	6878      	ldr	r0, [r7, #4]
 8013056:	f001 f850 	bl	80140fa <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS4_>
 801305a:	4603      	mov	r3, r0
 801305c:	4618      	mov	r0, r3
 801305e:	3708      	adds	r7, #8
 8013060:	46bd      	mov	sp, r7
 8013062:	bd80      	pop	{r7, pc}

08013064 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 8013064:	b590      	push	{r4, r7, lr}
 8013066:	b083      	sub	sp, #12
 8013068:	af00      	add	r7, sp, #0
 801306a:	6078      	str	r0, [r7, #4]
 801306c:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 801306e:	687c      	ldr	r4, [r7, #4]
 8013070:	6838      	ldr	r0, [r7, #0]
 8013072:	f7f9 f9e2 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8013076:	4603      	mov	r3, r0
 8013078:	4619      	mov	r1, r3
 801307a:	4620      	mov	r0, r4
 801307c:	f001 f84a 	bl	8014114 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EEC2IS3_EEOT_>
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	4618      	mov	r0, r3
 8013084:	370c      	adds	r7, #12
 8013086:	46bd      	mov	sp, r7
 8013088:	bd90      	pop	{r4, r7, pc}

0801308a <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 801308a:	b580      	push	{r7, lr}
 801308c:	b082      	sub	sp, #8
 801308e:	af00      	add	r7, sp, #0
 8013090:	6078      	str	r0, [r7, #4]
 8013092:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8013094:	6838      	ldr	r0, [r7, #0]
 8013096:	f7fc fc55 	bl	800f944 <_ZSt7forwardIRP16TfLiteConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 801309a:	4603      	mov	r3, r0
 801309c:	681a      	ldr	r2, [r3, #0]
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	601a      	str	r2, [r3, #0]
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	4618      	mov	r0, r3
 80130a6:	3708      	adds	r7, #8
 80130a8:	46bd      	mov	sp, r7
 80130aa:	bd80      	pop	{r7, pc}

080130ac <_ZSt12__get_helperILj0EP16TfLiteConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80130ac:	b580      	push	{r7, lr}
 80130ae:	b082      	sub	sp, #8
 80130b0:	af00      	add	r7, sp, #0
 80130b2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80130b4:	6878      	ldr	r0, [r7, #4]
 80130b6:	f001 f83e 	bl	8014136 <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 80130ba:	4603      	mov	r3, r0
 80130bc:	4618      	mov	r0, r3
 80130be:	3708      	adds	r7, #8
 80130c0:	46bd      	mov	sp, r7
 80130c2:	bd80      	pop	{r7, pc}

080130c4 <_ZNSt11_Tuple_implILj0EJP16TfLiteCastParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80130c4:	b580      	push	{r7, lr}
 80130c6:	b082      	sub	sp, #8
 80130c8:	af00      	add	r7, sp, #0
 80130ca:	6078      	str	r0, [r7, #4]
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	3304      	adds	r3, #4
 80130d0:	4618      	mov	r0, r3
 80130d2:	f001 f83e 	bl	8014152 <_ZNSt10_Head_baseILj0EP16TfLiteCastParamsLb0EE7_M_headERS2_>
 80130d6:	4603      	mov	r3, r0
 80130d8:	4618      	mov	r0, r3
 80130da:	3708      	adds	r7, #8
 80130dc:	46bd      	mov	sp, r7
 80130de:	bd80      	pop	{r7, pc}

080130e0 <_ZNSt10_Head_baseILj0EP16TfLiteCastParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 80130e0:	b580      	push	{r7, lr}
 80130e2:	b082      	sub	sp, #8
 80130e4:	af00      	add	r7, sp, #0
 80130e6:	6078      	str	r0, [r7, #4]
 80130e8:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80130ea:	6838      	ldr	r0, [r7, #0]
 80130ec:	f7fc fc76 	bl	800f9dc <_ZSt7forwardIRP16TfLiteCastParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80130f0:	4603      	mov	r3, r0
 80130f2:	681a      	ldr	r2, [r3, #0]
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	601a      	str	r2, [r3, #0]
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	4618      	mov	r0, r3
 80130fc:	3708      	adds	r7, #8
 80130fe:	46bd      	mov	sp, r7
 8013100:	bd80      	pop	{r7, pc}

08013102 <_ZSt12__get_helperILj0EP16TfLiteCastParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8013102:	b580      	push	{r7, lr}
 8013104:	b082      	sub	sp, #8
 8013106:	af00      	add	r7, sp, #0
 8013108:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801310a:	6878      	ldr	r0, [r7, #4]
 801310c:	f001 f82c 	bl	8014168 <_ZNSt11_Tuple_implILj0EJP16TfLiteCastParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8013110:	4603      	mov	r3, r0
 8013112:	4618      	mov	r0, r3
 8013114:	3708      	adds	r7, #8
 8013116:	46bd      	mov	sp, r7
 8013118:	bd80      	pop	{r7, pc}

0801311a <_ZNSt11_Tuple_implILj0EJP25TfLiteLSHProjectionParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801311a:	b580      	push	{r7, lr}
 801311c:	b082      	sub	sp, #8
 801311e:	af00      	add	r7, sp, #0
 8013120:	6078      	str	r0, [r7, #4]
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	3304      	adds	r3, #4
 8013126:	4618      	mov	r0, r3
 8013128:	f001 f82c 	bl	8014184 <_ZNSt10_Head_baseILj0EP25TfLiteLSHProjectionParamsLb0EE7_M_headERS2_>
 801312c:	4603      	mov	r3, r0
 801312e:	4618      	mov	r0, r3
 8013130:	3708      	adds	r7, #8
 8013132:	46bd      	mov	sp, r7
 8013134:	bd80      	pop	{r7, pc}

08013136 <_ZNSt10_Head_baseILj0EP25TfLiteLSHProjectionParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8013136:	b580      	push	{r7, lr}
 8013138:	b082      	sub	sp, #8
 801313a:	af00      	add	r7, sp, #0
 801313c:	6078      	str	r0, [r7, #4]
 801313e:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8013140:	6838      	ldr	r0, [r7, #0]
 8013142:	f7fc fc97 	bl	800fa74 <_ZSt7forwardIRP25TfLiteLSHProjectionParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8013146:	4603      	mov	r3, r0
 8013148:	681a      	ldr	r2, [r3, #0]
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	601a      	str	r2, [r3, #0]
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	4618      	mov	r0, r3
 8013152:	3708      	adds	r7, #8
 8013154:	46bd      	mov	sp, r7
 8013156:	bd80      	pop	{r7, pc}

08013158 <_ZSt12__get_helperILj0EP25TfLiteLSHProjectionParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8013158:	b580      	push	{r7, lr}
 801315a:	b082      	sub	sp, #8
 801315c:	af00      	add	r7, sp, #0
 801315e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8013160:	6878      	ldr	r0, [r7, #4]
 8013162:	f001 f81a 	bl	801419a <_ZNSt11_Tuple_implILj0EJP25TfLiteLSHProjectionParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8013166:	4603      	mov	r3, r0
 8013168:	4618      	mov	r0, r3
 801316a:	3708      	adds	r7, #8
 801316c:	46bd      	mov	sp, r7
 801316e:	bd80      	pop	{r7, pc}

08013170 <_ZNSt11_Tuple_implILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8013170:	b580      	push	{r7, lr}
 8013172:	b082      	sub	sp, #8
 8013174:	af00      	add	r7, sp, #0
 8013176:	6078      	str	r0, [r7, #4]
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	3304      	adds	r3, #4
 801317c:	4618      	mov	r0, r3
 801317e:	f001 f81a 	bl	80141b6 <_ZNSt10_Head_baseILj0EP16TfLitePoolParamsLb0EE7_M_headERS2_>
 8013182:	4603      	mov	r3, r0
 8013184:	4618      	mov	r0, r3
 8013186:	3708      	adds	r7, #8
 8013188:	46bd      	mov	sp, r7
 801318a:	bd80      	pop	{r7, pc}

0801318c <_ZNSt10_Head_baseILj0EP16TfLitePoolParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 801318c:	b580      	push	{r7, lr}
 801318e:	b082      	sub	sp, #8
 8013190:	af00      	add	r7, sp, #0
 8013192:	6078      	str	r0, [r7, #4]
 8013194:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8013196:	6838      	ldr	r0, [r7, #0]
 8013198:	f7fc fcb8 	bl	800fb0c <_ZSt7forwardIRP16TfLitePoolParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 801319c:	4603      	mov	r3, r0
 801319e:	681a      	ldr	r2, [r3, #0]
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	601a      	str	r2, [r3, #0]
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	4618      	mov	r0, r3
 80131a8:	3708      	adds	r7, #8
 80131aa:	46bd      	mov	sp, r7
 80131ac:	bd80      	pop	{r7, pc}

080131ae <_ZSt12__get_helperILj0EP16TfLitePoolParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80131ae:	b580      	push	{r7, lr}
 80131b0:	b082      	sub	sp, #8
 80131b2:	af00      	add	r7, sp, #0
 80131b4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80131b6:	6878      	ldr	r0, [r7, #4]
 80131b8:	f001 f808 	bl	80141cc <_ZNSt11_Tuple_implILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 80131bc:	4603      	mov	r3, r0
 80131be:	4618      	mov	r0, r3
 80131c0:	3708      	adds	r7, #8
 80131c2:	46bd      	mov	sp, r7
 80131c4:	bd80      	pop	{r7, pc}

080131c6 <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80131c6:	b580      	push	{r7, lr}
 80131c8:	b082      	sub	sp, #8
 80131ca:	af00      	add	r7, sp, #0
 80131cc:	6078      	str	r0, [r7, #4]
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	3304      	adds	r3, #4
 80131d2:	4618      	mov	r0, r3
 80131d4:	f001 f808 	bl	80141e8 <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EE7_M_headERS2_>
 80131d8:	4603      	mov	r3, r0
 80131da:	4618      	mov	r0, r3
 80131dc:	3708      	adds	r7, #8
 80131de:	46bd      	mov	sp, r7
 80131e0:	bd80      	pop	{r7, pc}

080131e2 <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 80131e2:	b580      	push	{r7, lr}
 80131e4:	b082      	sub	sp, #8
 80131e6:	af00      	add	r7, sp, #0
 80131e8:	6078      	str	r0, [r7, #4]
 80131ea:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80131ec:	6838      	ldr	r0, [r7, #0]
 80131ee:	f7fc fcd9 	bl	800fba4 <_ZSt7forwardIRP25TfLiteDepthwiseConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80131f2:	4603      	mov	r3, r0
 80131f4:	681a      	ldr	r2, [r3, #0]
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	601a      	str	r2, [r3, #0]
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	4618      	mov	r0, r3
 80131fe:	3708      	adds	r7, #8
 8013200:	46bd      	mov	sp, r7
 8013202:	bd80      	pop	{r7, pc}

08013204 <_ZSt12__get_helperILj0EP25TfLiteDepthwiseConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8013204:	b580      	push	{r7, lr}
 8013206:	b082      	sub	sp, #8
 8013208:	af00      	add	r7, sp, #0
 801320a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801320c:	6878      	ldr	r0, [r7, #4]
 801320e:	f000 fff6 	bl	80141fe <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8013212:	4603      	mov	r3, r0
 8013214:	4618      	mov	r0, r3
 8013216:	3708      	adds	r7, #8
 8013218:	46bd      	mov	sp, r7
 801321a:	bd80      	pop	{r7, pc}

0801321c <_ZNSt11_Tuple_implILj0EJP16TfLiteSVDFParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801321c:	b580      	push	{r7, lr}
 801321e:	b082      	sub	sp, #8
 8013220:	af00      	add	r7, sp, #0
 8013222:	6078      	str	r0, [r7, #4]
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	3304      	adds	r3, #4
 8013228:	4618      	mov	r0, r3
 801322a:	f000 fff6 	bl	801421a <_ZNSt10_Head_baseILj0EP16TfLiteSVDFParamsLb0EE7_M_headERS2_>
 801322e:	4603      	mov	r3, r0
 8013230:	4618      	mov	r0, r3
 8013232:	3708      	adds	r7, #8
 8013234:	46bd      	mov	sp, r7
 8013236:	bd80      	pop	{r7, pc}

08013238 <_ZNSt10_Head_baseILj0EP16TfLiteSVDFParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8013238:	b580      	push	{r7, lr}
 801323a:	b082      	sub	sp, #8
 801323c:	af00      	add	r7, sp, #0
 801323e:	6078      	str	r0, [r7, #4]
 8013240:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8013242:	6838      	ldr	r0, [r7, #0]
 8013244:	f7fc fcfa 	bl	800fc3c <_ZSt7forwardIRP16TfLiteSVDFParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8013248:	4603      	mov	r3, r0
 801324a:	681a      	ldr	r2, [r3, #0]
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	601a      	str	r2, [r3, #0]
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	4618      	mov	r0, r3
 8013254:	3708      	adds	r7, #8
 8013256:	46bd      	mov	sp, r7
 8013258:	bd80      	pop	{r7, pc}

0801325a <_ZSt12__get_helperILj0EP16TfLiteSVDFParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801325a:	b580      	push	{r7, lr}
 801325c:	b082      	sub	sp, #8
 801325e:	af00      	add	r7, sp, #0
 8013260:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8013262:	6878      	ldr	r0, [r7, #4]
 8013264:	f000 ffe4 	bl	8014230 <_ZNSt11_Tuple_implILj0EJP16TfLiteSVDFParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8013268:	4603      	mov	r3, r0
 801326a:	4618      	mov	r0, r3
 801326c:	3708      	adds	r7, #8
 801326e:	46bd      	mov	sp, r7
 8013270:	bd80      	pop	{r7, pc}

08013272 <_ZNSt11_Tuple_implILj0EJP23TfLiteSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8013272:	b580      	push	{r7, lr}
 8013274:	b082      	sub	sp, #8
 8013276:	af00      	add	r7, sp, #0
 8013278:	6078      	str	r0, [r7, #4]
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	3304      	adds	r3, #4
 801327e:	4618      	mov	r0, r3
 8013280:	f000 ffe4 	bl	801424c <_ZNSt10_Head_baseILj0EP23TfLiteSequenceRNNParamsLb0EE7_M_headERS2_>
 8013284:	4603      	mov	r3, r0
 8013286:	4618      	mov	r0, r3
 8013288:	3708      	adds	r7, #8
 801328a:	46bd      	mov	sp, r7
 801328c:	bd80      	pop	{r7, pc}

0801328e <_ZNSt10_Head_baseILj0EP23TfLiteSequenceRNNParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 801328e:	b580      	push	{r7, lr}
 8013290:	b082      	sub	sp, #8
 8013292:	af00      	add	r7, sp, #0
 8013294:	6078      	str	r0, [r7, #4]
 8013296:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8013298:	6838      	ldr	r0, [r7, #0]
 801329a:	f7fc fd1b 	bl	800fcd4 <_ZSt7forwardIRP23TfLiteSequenceRNNParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 801329e:	4603      	mov	r3, r0
 80132a0:	681a      	ldr	r2, [r3, #0]
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	601a      	str	r2, [r3, #0]
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	4618      	mov	r0, r3
 80132aa:	3708      	adds	r7, #8
 80132ac:	46bd      	mov	sp, r7
 80132ae:	bd80      	pop	{r7, pc}

080132b0 <_ZSt12__get_helperILj0EP23TfLiteSequenceRNNParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80132b0:	b580      	push	{r7, lr}
 80132b2:	b082      	sub	sp, #8
 80132b4:	af00      	add	r7, sp, #0
 80132b6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80132b8:	6878      	ldr	r0, [r7, #4]
 80132ba:	f000 ffd2 	bl	8014262 <_ZNSt11_Tuple_implILj0EJP23TfLiteSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 80132be:	4603      	mov	r3, r0
 80132c0:	4618      	mov	r0, r3
 80132c2:	3708      	adds	r7, #8
 80132c4:	46bd      	mov	sp, r7
 80132c6:	bd80      	pop	{r7, pc}

080132c8 <_ZNSt11_Tuple_implILj0EJP36TfLiteBidirectionalSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80132c8:	b580      	push	{r7, lr}
 80132ca:	b082      	sub	sp, #8
 80132cc:	af00      	add	r7, sp, #0
 80132ce:	6078      	str	r0, [r7, #4]
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	3304      	adds	r3, #4
 80132d4:	4618      	mov	r0, r3
 80132d6:	f000 ffd2 	bl	801427e <_ZNSt10_Head_baseILj0EP36TfLiteBidirectionalSequenceRNNParamsLb0EE7_M_headERS2_>
 80132da:	4603      	mov	r3, r0
 80132dc:	4618      	mov	r0, r3
 80132de:	3708      	adds	r7, #8
 80132e0:	46bd      	mov	sp, r7
 80132e2:	bd80      	pop	{r7, pc}

080132e4 <_ZNSt10_Head_baseILj0EP36TfLiteBidirectionalSequenceRNNParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 80132e4:	b580      	push	{r7, lr}
 80132e6:	b082      	sub	sp, #8
 80132e8:	af00      	add	r7, sp, #0
 80132ea:	6078      	str	r0, [r7, #4]
 80132ec:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80132ee:	6838      	ldr	r0, [r7, #0]
 80132f0:	f7fc fd3c 	bl	800fd6c <_ZSt7forwardIRP36TfLiteBidirectionalSequenceRNNParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80132f4:	4603      	mov	r3, r0
 80132f6:	681a      	ldr	r2, [r3, #0]
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	601a      	str	r2, [r3, #0]
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	4618      	mov	r0, r3
 8013300:	3708      	adds	r7, #8
 8013302:	46bd      	mov	sp, r7
 8013304:	bd80      	pop	{r7, pc}

08013306 <_ZSt12__get_helperILj0EP36TfLiteBidirectionalSequenceRNNParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8013306:	b580      	push	{r7, lr}
 8013308:	b082      	sub	sp, #8
 801330a:	af00      	add	r7, sp, #0
 801330c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801330e:	6878      	ldr	r0, [r7, #4]
 8013310:	f000 ffc0 	bl	8014294 <_ZNSt11_Tuple_implILj0EJP36TfLiteBidirectionalSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8013314:	4603      	mov	r3, r0
 8013316:	4618      	mov	r0, r3
 8013318:	3708      	adds	r7, #8
 801331a:	46bd      	mov	sp, r7
 801331c:	bd80      	pop	{r7, pc}

0801331e <_ZNSt11_Tuple_implILj0EJP15TfLiteRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801331e:	b580      	push	{r7, lr}
 8013320:	b082      	sub	sp, #8
 8013322:	af00      	add	r7, sp, #0
 8013324:	6078      	str	r0, [r7, #4]
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	3304      	adds	r3, #4
 801332a:	4618      	mov	r0, r3
 801332c:	f000 ffc0 	bl	80142b0 <_ZNSt10_Head_baseILj0EP15TfLiteRNNParamsLb0EE7_M_headERS2_>
 8013330:	4603      	mov	r3, r0
 8013332:	4618      	mov	r0, r3
 8013334:	3708      	adds	r7, #8
 8013336:	46bd      	mov	sp, r7
 8013338:	bd80      	pop	{r7, pc}

0801333a <_ZNSt10_Head_baseILj0EP15TfLiteRNNParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 801333a:	b580      	push	{r7, lr}
 801333c:	b082      	sub	sp, #8
 801333e:	af00      	add	r7, sp, #0
 8013340:	6078      	str	r0, [r7, #4]
 8013342:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8013344:	6838      	ldr	r0, [r7, #0]
 8013346:	f7fc fd5d 	bl	800fe04 <_ZSt7forwardIRP15TfLiteRNNParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 801334a:	4603      	mov	r3, r0
 801334c:	681a      	ldr	r2, [r3, #0]
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	601a      	str	r2, [r3, #0]
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	4618      	mov	r0, r3
 8013356:	3708      	adds	r7, #8
 8013358:	46bd      	mov	sp, r7
 801335a:	bd80      	pop	{r7, pc}

0801335c <_ZSt12__get_helperILj0EP15TfLiteRNNParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801335c:	b580      	push	{r7, lr}
 801335e:	b082      	sub	sp, #8
 8013360:	af00      	add	r7, sp, #0
 8013362:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8013364:	6878      	ldr	r0, [r7, #4]
 8013366:	f000 ffae 	bl	80142c6 <_ZNSt11_Tuple_implILj0EJP15TfLiteRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 801336a:	4603      	mov	r3, r0
 801336c:	4618      	mov	r0, r3
 801336e:	3708      	adds	r7, #8
 8013370:	46bd      	mov	sp, r7
 8013372:	bd80      	pop	{r7, pc}

08013374 <_ZNSt11_Tuple_implILj0EJP33TfLiteEmbeddingLookupSparseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8013374:	b580      	push	{r7, lr}
 8013376:	b082      	sub	sp, #8
 8013378:	af00      	add	r7, sp, #0
 801337a:	6078      	str	r0, [r7, #4]
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	3304      	adds	r3, #4
 8013380:	4618      	mov	r0, r3
 8013382:	f000 ffae 	bl	80142e2 <_ZNSt10_Head_baseILj0EP33TfLiteEmbeddingLookupSparseParamsLb0EE7_M_headERS2_>
 8013386:	4603      	mov	r3, r0
 8013388:	4618      	mov	r0, r3
 801338a:	3708      	adds	r7, #8
 801338c:	46bd      	mov	sp, r7
 801338e:	bd80      	pop	{r7, pc}

08013390 <_ZNSt10_Head_baseILj0EP33TfLiteEmbeddingLookupSparseParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8013390:	b580      	push	{r7, lr}
 8013392:	b082      	sub	sp, #8
 8013394:	af00      	add	r7, sp, #0
 8013396:	6078      	str	r0, [r7, #4]
 8013398:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 801339a:	6838      	ldr	r0, [r7, #0]
 801339c:	f7fc fd7e 	bl	800fe9c <_ZSt7forwardIRP33TfLiteEmbeddingLookupSparseParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80133a0:	4603      	mov	r3, r0
 80133a2:	681a      	ldr	r2, [r3, #0]
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	601a      	str	r2, [r3, #0]
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	4618      	mov	r0, r3
 80133ac:	3708      	adds	r7, #8
 80133ae:	46bd      	mov	sp, r7
 80133b0:	bd80      	pop	{r7, pc}

080133b2 <_ZSt12__get_helperILj0EP33TfLiteEmbeddingLookupSparseParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80133b2:	b580      	push	{r7, lr}
 80133b4:	b082      	sub	sp, #8
 80133b6:	af00      	add	r7, sp, #0
 80133b8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80133ba:	6878      	ldr	r0, [r7, #4]
 80133bc:	f000 ff9c 	bl	80142f8 <_ZNSt11_Tuple_implILj0EJP33TfLiteEmbeddingLookupSparseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 80133c0:	4603      	mov	r3, r0
 80133c2:	4618      	mov	r0, r3
 80133c4:	3708      	adds	r7, #8
 80133c6:	46bd      	mov	sp, r7
 80133c8:	bd80      	pop	{r7, pc}

080133ca <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80133ca:	b580      	push	{r7, lr}
 80133cc:	b082      	sub	sp, #8
 80133ce:	af00      	add	r7, sp, #0
 80133d0:	6078      	str	r0, [r7, #4]
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	3304      	adds	r3, #4
 80133d6:	4618      	mov	r0, r3
 80133d8:	f000 ff9c 	bl	8014314 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERS2_>
 80133dc:	4603      	mov	r3, r0
 80133de:	4618      	mov	r0, r3
 80133e0:	3708      	adds	r7, #8
 80133e2:	46bd      	mov	sp, r7
 80133e4:	bd80      	pop	{r7, pc}

080133e6 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 80133e6:	b580      	push	{r7, lr}
 80133e8:	b082      	sub	sp, #8
 80133ea:	af00      	add	r7, sp, #0
 80133ec:	6078      	str	r0, [r7, #4]
 80133ee:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80133f0:	6838      	ldr	r0, [r7, #0]
 80133f2:	f7fc fd9f 	bl	800ff34 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80133f6:	4603      	mov	r3, r0
 80133f8:	681a      	ldr	r2, [r3, #0]
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	601a      	str	r2, [r3, #0]
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	4618      	mov	r0, r3
 8013402:	3708      	adds	r7, #8
 8013404:	46bd      	mov	sp, r7
 8013406:	bd80      	pop	{r7, pc}

08013408 <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8013408:	b580      	push	{r7, lr}
 801340a:	b082      	sub	sp, #8
 801340c:	af00      	add	r7, sp, #0
 801340e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8013410:	6878      	ldr	r0, [r7, #4]
 8013412:	f000 ff8a 	bl	801432a <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8013416:	4603      	mov	r3, r0
 8013418:	4618      	mov	r0, r3
 801341a:	3708      	adds	r7, #8
 801341c:	46bd      	mov	sp, r7
 801341e:	bd80      	pop	{r7, pc}

08013420 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8013420:	b580      	push	{r7, lr}
 8013422:	b082      	sub	sp, #8
 8013424:	af00      	add	r7, sp, #0
 8013426:	6078      	str	r0, [r7, #4]
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	3304      	adds	r3, #4
 801342c:	4618      	mov	r0, r3
 801342e:	f000 ff8a 	bl	8014346 <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERS2_>
 8013432:	4603      	mov	r3, r0
 8013434:	4618      	mov	r0, r3
 8013436:	3708      	adds	r7, #8
 8013438:	46bd      	mov	sp, r7
 801343a:	bd80      	pop	{r7, pc}

0801343c <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 801343c:	b580      	push	{r7, lr}
 801343e:	b082      	sub	sp, #8
 8013440:	af00      	add	r7, sp, #0
 8013442:	6078      	str	r0, [r7, #4]
 8013444:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8013446:	6838      	ldr	r0, [r7, #0]
 8013448:	f7fc fdc0 	bl	800ffcc <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 801344c:	4603      	mov	r3, r0
 801344e:	681a      	ldr	r2, [r3, #0]
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	601a      	str	r2, [r3, #0]
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	4618      	mov	r0, r3
 8013458:	3708      	adds	r7, #8
 801345a:	46bd      	mov	sp, r7
 801345c:	bd80      	pop	{r7, pc}

0801345e <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801345e:	b580      	push	{r7, lr}
 8013460:	b082      	sub	sp, #8
 8013462:	af00      	add	r7, sp, #0
 8013464:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8013466:	6878      	ldr	r0, [r7, #4]
 8013468:	f000 ff78 	bl	801435c <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 801346c:	4603      	mov	r3, r0
 801346e:	4618      	mov	r0, r3
 8013470:	3708      	adds	r7, #8
 8013472:	46bd      	mov	sp, r7
 8013474:	bd80      	pop	{r7, pc}

08013476 <_ZNSt11_Tuple_implILj0EJP25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8013476:	b580      	push	{r7, lr}
 8013478:	b082      	sub	sp, #8
 801347a:	af00      	add	r7, sp, #0
 801347c:	6078      	str	r0, [r7, #4]
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	3304      	adds	r3, #4
 8013482:	4618      	mov	r0, r3
 8013484:	f000 ff78 	bl	8014378 <_ZNSt10_Head_baseILj0EP25TfLiteConcatenationParamsLb0EE7_M_headERS2_>
 8013488:	4603      	mov	r3, r0
 801348a:	4618      	mov	r0, r3
 801348c:	3708      	adds	r7, #8
 801348e:	46bd      	mov	sp, r7
 8013490:	bd80      	pop	{r7, pc}

08013492 <_ZNSt10_Head_baseILj0EP25TfLiteConcatenationParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8013492:	b580      	push	{r7, lr}
 8013494:	b082      	sub	sp, #8
 8013496:	af00      	add	r7, sp, #0
 8013498:	6078      	str	r0, [r7, #4]
 801349a:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 801349c:	6838      	ldr	r0, [r7, #0]
 801349e:	f7fc fde1 	bl	8010064 <_ZSt7forwardIRP25TfLiteConcatenationParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80134a2:	4603      	mov	r3, r0
 80134a4:	681a      	ldr	r2, [r3, #0]
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	601a      	str	r2, [r3, #0]
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	4618      	mov	r0, r3
 80134ae:	3708      	adds	r7, #8
 80134b0:	46bd      	mov	sp, r7
 80134b2:	bd80      	pop	{r7, pc}

080134b4 <_ZSt12__get_helperILj0EP25TfLiteConcatenationParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80134b4:	b580      	push	{r7, lr}
 80134b6:	b082      	sub	sp, #8
 80134b8:	af00      	add	r7, sp, #0
 80134ba:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80134bc:	6878      	ldr	r0, [r7, #4]
 80134be:	f000 ff66 	bl	801438e <_ZNSt11_Tuple_implILj0EJP25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 80134c2:	4603      	mov	r3, r0
 80134c4:	4618      	mov	r0, r3
 80134c6:	3708      	adds	r7, #8
 80134c8:	46bd      	mov	sp, r7
 80134ca:	bd80      	pop	{r7, pc}

080134cc <_ZNSt11_Tuple_implILj0EJP15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80134cc:	b580      	push	{r7, lr}
 80134ce:	b082      	sub	sp, #8
 80134d0:	af00      	add	r7, sp, #0
 80134d2:	6078      	str	r0, [r7, #4]
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	3304      	adds	r3, #4
 80134d8:	4618      	mov	r0, r3
 80134da:	f000 ff66 	bl	80143aa <_ZNSt10_Head_baseILj0EP15TfLiteMulParamsLb0EE7_M_headERS2_>
 80134de:	4603      	mov	r3, r0
 80134e0:	4618      	mov	r0, r3
 80134e2:	3708      	adds	r7, #8
 80134e4:	46bd      	mov	sp, r7
 80134e6:	bd80      	pop	{r7, pc}

080134e8 <_ZNSt10_Head_baseILj0EP15TfLiteMulParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 80134e8:	b580      	push	{r7, lr}
 80134ea:	b082      	sub	sp, #8
 80134ec:	af00      	add	r7, sp, #0
 80134ee:	6078      	str	r0, [r7, #4]
 80134f0:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80134f2:	6838      	ldr	r0, [r7, #0]
 80134f4:	f7fc fe02 	bl	80100fc <_ZSt7forwardIRP15TfLiteMulParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80134f8:	4603      	mov	r3, r0
 80134fa:	681a      	ldr	r2, [r3, #0]
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	601a      	str	r2, [r3, #0]
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	4618      	mov	r0, r3
 8013504:	3708      	adds	r7, #8
 8013506:	46bd      	mov	sp, r7
 8013508:	bd80      	pop	{r7, pc}

0801350a <_ZSt12__get_helperILj0EP15TfLiteMulParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801350a:	b580      	push	{r7, lr}
 801350c:	b082      	sub	sp, #8
 801350e:	af00      	add	r7, sp, #0
 8013510:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8013512:	6878      	ldr	r0, [r7, #4]
 8013514:	f000 ff54 	bl	80143c0 <_ZNSt11_Tuple_implILj0EJP15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8013518:	4603      	mov	r3, r0
 801351a:	4618      	mov	r0, r3
 801351c:	3708      	adds	r7, #8
 801351e:	46bd      	mov	sp, r7
 8013520:	bd80      	pop	{r7, pc}

08013522 <_ZNSt11_Tuple_implILj0EJP15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8013522:	b580      	push	{r7, lr}
 8013524:	b082      	sub	sp, #8
 8013526:	af00      	add	r7, sp, #0
 8013528:	6078      	str	r0, [r7, #4]
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	3304      	adds	r3, #4
 801352e:	4618      	mov	r0, r3
 8013530:	f000 ff54 	bl	80143dc <_ZNSt10_Head_baseILj0EP15TfLiteAddParamsLb0EE7_M_headERS2_>
 8013534:	4603      	mov	r3, r0
 8013536:	4618      	mov	r0, r3
 8013538:	3708      	adds	r7, #8
 801353a:	46bd      	mov	sp, r7
 801353c:	bd80      	pop	{r7, pc}

0801353e <_ZNSt10_Head_baseILj0EP15TfLiteAddParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 801353e:	b580      	push	{r7, lr}
 8013540:	b082      	sub	sp, #8
 8013542:	af00      	add	r7, sp, #0
 8013544:	6078      	str	r0, [r7, #4]
 8013546:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8013548:	6838      	ldr	r0, [r7, #0]
 801354a:	f7fc fe23 	bl	8010194 <_ZSt7forwardIRP15TfLiteAddParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 801354e:	4603      	mov	r3, r0
 8013550:	681a      	ldr	r2, [r3, #0]
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	601a      	str	r2, [r3, #0]
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	4618      	mov	r0, r3
 801355a:	3708      	adds	r7, #8
 801355c:	46bd      	mov	sp, r7
 801355e:	bd80      	pop	{r7, pc}

08013560 <_ZSt12__get_helperILj0EP15TfLiteAddParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8013560:	b580      	push	{r7, lr}
 8013562:	b082      	sub	sp, #8
 8013564:	af00      	add	r7, sp, #0
 8013566:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8013568:	6878      	ldr	r0, [r7, #4]
 801356a:	f000 ff42 	bl	80143f2 <_ZNSt11_Tuple_implILj0EJP15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 801356e:	4603      	mov	r3, r0
 8013570:	4618      	mov	r0, r3
 8013572:	3708      	adds	r7, #8
 8013574:	46bd      	mov	sp, r7
 8013576:	bd80      	pop	{r7, pc}

08013578 <_ZNSt11_Tuple_implILj0EJP15TfLiteDivParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8013578:	b580      	push	{r7, lr}
 801357a:	b082      	sub	sp, #8
 801357c:	af00      	add	r7, sp, #0
 801357e:	6078      	str	r0, [r7, #4]
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	3304      	adds	r3, #4
 8013584:	4618      	mov	r0, r3
 8013586:	f000 ff42 	bl	801440e <_ZNSt10_Head_baseILj0EP15TfLiteDivParamsLb0EE7_M_headERS2_>
 801358a:	4603      	mov	r3, r0
 801358c:	4618      	mov	r0, r3
 801358e:	3708      	adds	r7, #8
 8013590:	46bd      	mov	sp, r7
 8013592:	bd80      	pop	{r7, pc}

08013594 <_ZNSt10_Head_baseILj0EP15TfLiteDivParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8013594:	b580      	push	{r7, lr}
 8013596:	b082      	sub	sp, #8
 8013598:	af00      	add	r7, sp, #0
 801359a:	6078      	str	r0, [r7, #4]
 801359c:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 801359e:	6838      	ldr	r0, [r7, #0]
 80135a0:	f7fc fe44 	bl	801022c <_ZSt7forwardIRP15TfLiteDivParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80135a4:	4603      	mov	r3, r0
 80135a6:	681a      	ldr	r2, [r3, #0]
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	601a      	str	r2, [r3, #0]
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	4618      	mov	r0, r3
 80135b0:	3708      	adds	r7, #8
 80135b2:	46bd      	mov	sp, r7
 80135b4:	bd80      	pop	{r7, pc}

080135b6 <_ZSt12__get_helperILj0EP15TfLiteDivParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80135b6:	b580      	push	{r7, lr}
 80135b8:	b082      	sub	sp, #8
 80135ba:	af00      	add	r7, sp, #0
 80135bc:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80135be:	6878      	ldr	r0, [r7, #4]
 80135c0:	f000 ff30 	bl	8014424 <_ZNSt11_Tuple_implILj0EJP15TfLiteDivParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 80135c4:	4603      	mov	r3, r0
 80135c6:	4618      	mov	r0, r3
 80135c8:	3708      	adds	r7, #8
 80135ca:	46bd      	mov	sp, r7
 80135cc:	bd80      	pop	{r7, pc}

080135ce <_ZNSt11_Tuple_implILj0EJP15TfLiteSubParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80135ce:	b580      	push	{r7, lr}
 80135d0:	b082      	sub	sp, #8
 80135d2:	af00      	add	r7, sp, #0
 80135d4:	6078      	str	r0, [r7, #4]
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	3304      	adds	r3, #4
 80135da:	4618      	mov	r0, r3
 80135dc:	f000 ff30 	bl	8014440 <_ZNSt10_Head_baseILj0EP15TfLiteSubParamsLb0EE7_M_headERS2_>
 80135e0:	4603      	mov	r3, r0
 80135e2:	4618      	mov	r0, r3
 80135e4:	3708      	adds	r7, #8
 80135e6:	46bd      	mov	sp, r7
 80135e8:	bd80      	pop	{r7, pc}

080135ea <_ZNSt10_Head_baseILj0EP15TfLiteSubParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 80135ea:	b580      	push	{r7, lr}
 80135ec:	b082      	sub	sp, #8
 80135ee:	af00      	add	r7, sp, #0
 80135f0:	6078      	str	r0, [r7, #4]
 80135f2:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80135f4:	6838      	ldr	r0, [r7, #0]
 80135f6:	f7fc fe65 	bl	80102c4 <_ZSt7forwardIRP15TfLiteSubParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80135fa:	4603      	mov	r3, r0
 80135fc:	681a      	ldr	r2, [r3, #0]
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	601a      	str	r2, [r3, #0]
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	4618      	mov	r0, r3
 8013606:	3708      	adds	r7, #8
 8013608:	46bd      	mov	sp, r7
 801360a:	bd80      	pop	{r7, pc}

0801360c <_ZSt12__get_helperILj0EP15TfLiteSubParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801360c:	b580      	push	{r7, lr}
 801360e:	b082      	sub	sp, #8
 8013610:	af00      	add	r7, sp, #0
 8013612:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8013614:	6878      	ldr	r0, [r7, #4]
 8013616:	f000 ff1e 	bl	8014456 <_ZNSt11_Tuple_implILj0EJP15TfLiteSubParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 801361a:	4603      	mov	r3, r0
 801361c:	4618      	mov	r0, r3
 801361e:	3708      	adds	r7, #8
 8013620:	46bd      	mov	sp, r7
 8013622:	bd80      	pop	{r7, pc}

08013624 <_ZNSt11_Tuple_implILj0EJP18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8013624:	b580      	push	{r7, lr}
 8013626:	b082      	sub	sp, #8
 8013628:	af00      	add	r7, sp, #0
 801362a:	6078      	str	r0, [r7, #4]
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	3304      	adds	r3, #4
 8013630:	4618      	mov	r0, r3
 8013632:	f000 ff1e 	bl	8014472 <_ZNSt10_Head_baseILj0EP18TfLiteL2NormParamsLb0EE7_M_headERS2_>
 8013636:	4603      	mov	r3, r0
 8013638:	4618      	mov	r0, r3
 801363a:	3708      	adds	r7, #8
 801363c:	46bd      	mov	sp, r7
 801363e:	bd80      	pop	{r7, pc}

08013640 <_ZNSt10_Head_baseILj0EP18TfLiteL2NormParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8013640:	b580      	push	{r7, lr}
 8013642:	b082      	sub	sp, #8
 8013644:	af00      	add	r7, sp, #0
 8013646:	6078      	str	r0, [r7, #4]
 8013648:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 801364a:	6838      	ldr	r0, [r7, #0]
 801364c:	f7fc fe86 	bl	801035c <_ZSt7forwardIRP18TfLiteL2NormParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8013650:	4603      	mov	r3, r0
 8013652:	681a      	ldr	r2, [r3, #0]
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	601a      	str	r2, [r3, #0]
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	4618      	mov	r0, r3
 801365c:	3708      	adds	r7, #8
 801365e:	46bd      	mov	sp, r7
 8013660:	bd80      	pop	{r7, pc}

08013662 <_ZSt12__get_helperILj0EP18TfLiteL2NormParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8013662:	b580      	push	{r7, lr}
 8013664:	b082      	sub	sp, #8
 8013666:	af00      	add	r7, sp, #0
 8013668:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801366a:	6878      	ldr	r0, [r7, #4]
 801366c:	f000 ff0c 	bl	8014488 <_ZNSt11_Tuple_implILj0EJP18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8013670:	4603      	mov	r3, r0
 8013672:	4618      	mov	r0, r3
 8013674:	3708      	adds	r7, #8
 8013676:	46bd      	mov	sp, r7
 8013678:	bd80      	pop	{r7, pc}

0801367a <_ZNSt11_Tuple_implILj0EJP29TfLiteLocalResponseNormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801367a:	b580      	push	{r7, lr}
 801367c:	b082      	sub	sp, #8
 801367e:	af00      	add	r7, sp, #0
 8013680:	6078      	str	r0, [r7, #4]
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	3304      	adds	r3, #4
 8013686:	4618      	mov	r0, r3
 8013688:	f000 ff0c 	bl	80144a4 <_ZNSt10_Head_baseILj0EP29TfLiteLocalResponseNormParamsLb0EE7_M_headERS2_>
 801368c:	4603      	mov	r3, r0
 801368e:	4618      	mov	r0, r3
 8013690:	3708      	adds	r7, #8
 8013692:	46bd      	mov	sp, r7
 8013694:	bd80      	pop	{r7, pc}

08013696 <_ZNSt10_Head_baseILj0EP29TfLiteLocalResponseNormParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8013696:	b580      	push	{r7, lr}
 8013698:	b082      	sub	sp, #8
 801369a:	af00      	add	r7, sp, #0
 801369c:	6078      	str	r0, [r7, #4]
 801369e:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80136a0:	6838      	ldr	r0, [r7, #0]
 80136a2:	f7fc fea7 	bl	80103f4 <_ZSt7forwardIRP29TfLiteLocalResponseNormParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80136a6:	4603      	mov	r3, r0
 80136a8:	681a      	ldr	r2, [r3, #0]
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	601a      	str	r2, [r3, #0]
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	4618      	mov	r0, r3
 80136b2:	3708      	adds	r7, #8
 80136b4:	46bd      	mov	sp, r7
 80136b6:	bd80      	pop	{r7, pc}

080136b8 <_ZSt12__get_helperILj0EP29TfLiteLocalResponseNormParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80136b8:	b580      	push	{r7, lr}
 80136ba:	b082      	sub	sp, #8
 80136bc:	af00      	add	r7, sp, #0
 80136be:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80136c0:	6878      	ldr	r0, [r7, #4]
 80136c2:	f000 fefa 	bl	80144ba <_ZNSt11_Tuple_implILj0EJP29TfLiteLocalResponseNormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 80136c6:	4603      	mov	r3, r0
 80136c8:	4618      	mov	r0, r3
 80136ca:	3708      	adds	r7, #8
 80136cc:	46bd      	mov	sp, r7
 80136ce:	bd80      	pop	{r7, pc}

080136d0 <_ZNSt11_Tuple_implILj0EJP16TfLiteLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80136d0:	b580      	push	{r7, lr}
 80136d2:	b082      	sub	sp, #8
 80136d4:	af00      	add	r7, sp, #0
 80136d6:	6078      	str	r0, [r7, #4]
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	3304      	adds	r3, #4
 80136dc:	4618      	mov	r0, r3
 80136de:	f000 fefa 	bl	80144d6 <_ZNSt10_Head_baseILj0EP16TfLiteLSTMParamsLb0EE7_M_headERS2_>
 80136e2:	4603      	mov	r3, r0
 80136e4:	4618      	mov	r0, r3
 80136e6:	3708      	adds	r7, #8
 80136e8:	46bd      	mov	sp, r7
 80136ea:	bd80      	pop	{r7, pc}

080136ec <_ZNSt10_Head_baseILj0EP16TfLiteLSTMParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 80136ec:	b580      	push	{r7, lr}
 80136ee:	b082      	sub	sp, #8
 80136f0:	af00      	add	r7, sp, #0
 80136f2:	6078      	str	r0, [r7, #4]
 80136f4:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80136f6:	6838      	ldr	r0, [r7, #0]
 80136f8:	f7fc fec8 	bl	801048c <_ZSt7forwardIRP16TfLiteLSTMParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80136fc:	4603      	mov	r3, r0
 80136fe:	681a      	ldr	r2, [r3, #0]
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	601a      	str	r2, [r3, #0]
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	4618      	mov	r0, r3
 8013708:	3708      	adds	r7, #8
 801370a:	46bd      	mov	sp, r7
 801370c:	bd80      	pop	{r7, pc}

0801370e <_ZSt12__get_helperILj0EP16TfLiteLSTMParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801370e:	b580      	push	{r7, lr}
 8013710:	b082      	sub	sp, #8
 8013712:	af00      	add	r7, sp, #0
 8013714:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8013716:	6878      	ldr	r0, [r7, #4]
 8013718:	f000 fee8 	bl	80144ec <_ZNSt11_Tuple_implILj0EJP16TfLiteLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 801371c:	4603      	mov	r3, r0
 801371e:	4618      	mov	r0, r3
 8013720:	3708      	adds	r7, #8
 8013722:	46bd      	mov	sp, r7
 8013724:	bd80      	pop	{r7, pc}

08013726 <_ZNSt11_Tuple_implILj0EJP38TfLiteUnidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8013726:	b580      	push	{r7, lr}
 8013728:	b082      	sub	sp, #8
 801372a:	af00      	add	r7, sp, #0
 801372c:	6078      	str	r0, [r7, #4]
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	3304      	adds	r3, #4
 8013732:	4618      	mov	r0, r3
 8013734:	f000 fee8 	bl	8014508 <_ZNSt10_Head_baseILj0EP38TfLiteUnidirectionalSequenceLSTMParamsLb0EE7_M_headERS2_>
 8013738:	4603      	mov	r3, r0
 801373a:	4618      	mov	r0, r3
 801373c:	3708      	adds	r7, #8
 801373e:	46bd      	mov	sp, r7
 8013740:	bd80      	pop	{r7, pc}

08013742 <_ZNSt10_Head_baseILj0EP38TfLiteUnidirectionalSequenceLSTMParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8013742:	b580      	push	{r7, lr}
 8013744:	b082      	sub	sp, #8
 8013746:	af00      	add	r7, sp, #0
 8013748:	6078      	str	r0, [r7, #4]
 801374a:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 801374c:	6838      	ldr	r0, [r7, #0]
 801374e:	f7fc fee9 	bl	8010524 <_ZSt7forwardIRP38TfLiteUnidirectionalSequenceLSTMParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8013752:	4603      	mov	r3, r0
 8013754:	681a      	ldr	r2, [r3, #0]
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	601a      	str	r2, [r3, #0]
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	4618      	mov	r0, r3
 801375e:	3708      	adds	r7, #8
 8013760:	46bd      	mov	sp, r7
 8013762:	bd80      	pop	{r7, pc}

08013764 <_ZSt12__get_helperILj0EP38TfLiteUnidirectionalSequenceLSTMParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8013764:	b580      	push	{r7, lr}
 8013766:	b082      	sub	sp, #8
 8013768:	af00      	add	r7, sp, #0
 801376a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801376c:	6878      	ldr	r0, [r7, #4]
 801376e:	f000 fed6 	bl	801451e <_ZNSt11_Tuple_implILj0EJP38TfLiteUnidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8013772:	4603      	mov	r3, r0
 8013774:	4618      	mov	r0, r3
 8013776:	3708      	adds	r7, #8
 8013778:	46bd      	mov	sp, r7
 801377a:	bd80      	pop	{r7, pc}

0801377c <_ZNSt11_Tuple_implILj0EJP37TfLiteBidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801377c:	b580      	push	{r7, lr}
 801377e:	b082      	sub	sp, #8
 8013780:	af00      	add	r7, sp, #0
 8013782:	6078      	str	r0, [r7, #4]
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	3304      	adds	r3, #4
 8013788:	4618      	mov	r0, r3
 801378a:	f000 fed6 	bl	801453a <_ZNSt10_Head_baseILj0EP37TfLiteBidirectionalSequenceLSTMParamsLb0EE7_M_headERS2_>
 801378e:	4603      	mov	r3, r0
 8013790:	4618      	mov	r0, r3
 8013792:	3708      	adds	r7, #8
 8013794:	46bd      	mov	sp, r7
 8013796:	bd80      	pop	{r7, pc}

08013798 <_ZNSt10_Head_baseILj0EP37TfLiteBidirectionalSequenceLSTMParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8013798:	b580      	push	{r7, lr}
 801379a:	b082      	sub	sp, #8
 801379c:	af00      	add	r7, sp, #0
 801379e:	6078      	str	r0, [r7, #4]
 80137a0:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80137a2:	6838      	ldr	r0, [r7, #0]
 80137a4:	f7fc ff0a 	bl	80105bc <_ZSt7forwardIRP37TfLiteBidirectionalSequenceLSTMParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80137a8:	4603      	mov	r3, r0
 80137aa:	681a      	ldr	r2, [r3, #0]
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	601a      	str	r2, [r3, #0]
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	4618      	mov	r0, r3
 80137b4:	3708      	adds	r7, #8
 80137b6:	46bd      	mov	sp, r7
 80137b8:	bd80      	pop	{r7, pc}

080137ba <_ZSt12__get_helperILj0EP37TfLiteBidirectionalSequenceLSTMParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80137ba:	b580      	push	{r7, lr}
 80137bc:	b082      	sub	sp, #8
 80137be:	af00      	add	r7, sp, #0
 80137c0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80137c2:	6878      	ldr	r0, [r7, #4]
 80137c4:	f000 fec4 	bl	8014550 <_ZNSt11_Tuple_implILj0EJP37TfLiteBidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 80137c8:	4603      	mov	r3, r0
 80137ca:	4618      	mov	r0, r3
 80137cc:	3708      	adds	r7, #8
 80137ce:	46bd      	mov	sp, r7
 80137d0:	bd80      	pop	{r7, pc}

080137d2 <_ZNSt11_Tuple_implILj0EJP26TfLiteResizeBilinearParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80137d2:	b580      	push	{r7, lr}
 80137d4:	b082      	sub	sp, #8
 80137d6:	af00      	add	r7, sp, #0
 80137d8:	6078      	str	r0, [r7, #4]
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	3304      	adds	r3, #4
 80137de:	4618      	mov	r0, r3
 80137e0:	f000 fec4 	bl	801456c <_ZNSt10_Head_baseILj0EP26TfLiteResizeBilinearParamsLb0EE7_M_headERS2_>
 80137e4:	4603      	mov	r3, r0
 80137e6:	4618      	mov	r0, r3
 80137e8:	3708      	adds	r7, #8
 80137ea:	46bd      	mov	sp, r7
 80137ec:	bd80      	pop	{r7, pc}

080137ee <_ZNSt10_Head_baseILj0EP26TfLiteResizeBilinearParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 80137ee:	b580      	push	{r7, lr}
 80137f0:	b082      	sub	sp, #8
 80137f2:	af00      	add	r7, sp, #0
 80137f4:	6078      	str	r0, [r7, #4]
 80137f6:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80137f8:	6838      	ldr	r0, [r7, #0]
 80137fa:	f7fc ff2b 	bl	8010654 <_ZSt7forwardIRP26TfLiteResizeBilinearParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80137fe:	4603      	mov	r3, r0
 8013800:	681a      	ldr	r2, [r3, #0]
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	601a      	str	r2, [r3, #0]
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	4618      	mov	r0, r3
 801380a:	3708      	adds	r7, #8
 801380c:	46bd      	mov	sp, r7
 801380e:	bd80      	pop	{r7, pc}

08013810 <_ZSt12__get_helperILj0EP26TfLiteResizeBilinearParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8013810:	b580      	push	{r7, lr}
 8013812:	b082      	sub	sp, #8
 8013814:	af00      	add	r7, sp, #0
 8013816:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8013818:	6878      	ldr	r0, [r7, #4]
 801381a:	f000 feb2 	bl	8014582 <_ZNSt11_Tuple_implILj0EJP26TfLiteResizeBilinearParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 801381e:	4603      	mov	r3, r0
 8013820:	4618      	mov	r0, r3
 8013822:	3708      	adds	r7, #8
 8013824:	46bd      	mov	sp, r7
 8013826:	bd80      	pop	{r7, pc}

08013828 <_ZNSt11_Tuple_implILj0EJP33TfLiteResizeNearestNeighborParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8013828:	b580      	push	{r7, lr}
 801382a:	b082      	sub	sp, #8
 801382c:	af00      	add	r7, sp, #0
 801382e:	6078      	str	r0, [r7, #4]
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	3304      	adds	r3, #4
 8013834:	4618      	mov	r0, r3
 8013836:	f000 feb2 	bl	801459e <_ZNSt10_Head_baseILj0EP33TfLiteResizeNearestNeighborParamsLb0EE7_M_headERS2_>
 801383a:	4603      	mov	r3, r0
 801383c:	4618      	mov	r0, r3
 801383e:	3708      	adds	r7, #8
 8013840:	46bd      	mov	sp, r7
 8013842:	bd80      	pop	{r7, pc}

08013844 <_ZNSt10_Head_baseILj0EP33TfLiteResizeNearestNeighborParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8013844:	b580      	push	{r7, lr}
 8013846:	b082      	sub	sp, #8
 8013848:	af00      	add	r7, sp, #0
 801384a:	6078      	str	r0, [r7, #4]
 801384c:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 801384e:	6838      	ldr	r0, [r7, #0]
 8013850:	f7fc ff4c 	bl	80106ec <_ZSt7forwardIRP33TfLiteResizeNearestNeighborParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8013854:	4603      	mov	r3, r0
 8013856:	681a      	ldr	r2, [r3, #0]
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	601a      	str	r2, [r3, #0]
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	4618      	mov	r0, r3
 8013860:	3708      	adds	r7, #8
 8013862:	46bd      	mov	sp, r7
 8013864:	bd80      	pop	{r7, pc}

08013866 <_ZSt12__get_helperILj0EP33TfLiteResizeNearestNeighborParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8013866:	b580      	push	{r7, lr}
 8013868:	b082      	sub	sp, #8
 801386a:	af00      	add	r7, sp, #0
 801386c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801386e:	6878      	ldr	r0, [r7, #4]
 8013870:	f000 fea0 	bl	80145b4 <_ZNSt11_Tuple_implILj0EJP33TfLiteResizeNearestNeighborParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8013874:	4603      	mov	r3, r0
 8013876:	4618      	mov	r0, r3
 8013878:	3708      	adds	r7, #8
 801387a:	46bd      	mov	sp, r7
 801387c:	bd80      	pop	{r7, pc}

0801387e <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801387e:	b580      	push	{r7, lr}
 8013880:	b082      	sub	sp, #8
 8013882:	af00      	add	r7, sp, #0
 8013884:	6078      	str	r0, [r7, #4]
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	3304      	adds	r3, #4
 801388a:	4618      	mov	r0, r3
 801388c:	f000 fea0 	bl	80145d0 <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERS2_>
 8013890:	4603      	mov	r3, r0
 8013892:	4618      	mov	r0, r3
 8013894:	3708      	adds	r7, #8
 8013896:	46bd      	mov	sp, r7
 8013898:	bd80      	pop	{r7, pc}

0801389a <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 801389a:	b580      	push	{r7, lr}
 801389c:	b082      	sub	sp, #8
 801389e:	af00      	add	r7, sp, #0
 80138a0:	6078      	str	r0, [r7, #4]
 80138a2:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80138a4:	6838      	ldr	r0, [r7, #0]
 80138a6:	f7fc ff6d 	bl	8010784 <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80138aa:	4603      	mov	r3, r0
 80138ac:	681a      	ldr	r2, [r3, #0]
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	601a      	str	r2, [r3, #0]
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	4618      	mov	r0, r3
 80138b6:	3708      	adds	r7, #8
 80138b8:	46bd      	mov	sp, r7
 80138ba:	bd80      	pop	{r7, pc}

080138bc <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80138bc:	b580      	push	{r7, lr}
 80138be:	b082      	sub	sp, #8
 80138c0:	af00      	add	r7, sp, #0
 80138c2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80138c4:	6878      	ldr	r0, [r7, #4]
 80138c6:	f000 fe8e 	bl	80145e6 <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 80138ca:	4603      	mov	r3, r0
 80138cc:	4618      	mov	r0, r3
 80138ce:	3708      	adds	r7, #8
 80138d0:	46bd      	mov	sp, r7
 80138d2:	bd80      	pop	{r7, pc}

080138d4 <_ZNSt11_Tuple_implILj0EJP20TfLiteSkipGramParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80138d4:	b580      	push	{r7, lr}
 80138d6:	b082      	sub	sp, #8
 80138d8:	af00      	add	r7, sp, #0
 80138da:	6078      	str	r0, [r7, #4]
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	3304      	adds	r3, #4
 80138e0:	4618      	mov	r0, r3
 80138e2:	f000 fe8e 	bl	8014602 <_ZNSt10_Head_baseILj0EP20TfLiteSkipGramParamsLb0EE7_M_headERS2_>
 80138e6:	4603      	mov	r3, r0
 80138e8:	4618      	mov	r0, r3
 80138ea:	3708      	adds	r7, #8
 80138ec:	46bd      	mov	sp, r7
 80138ee:	bd80      	pop	{r7, pc}

080138f0 <_ZNSt10_Head_baseILj0EP20TfLiteSkipGramParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 80138f0:	b580      	push	{r7, lr}
 80138f2:	b082      	sub	sp, #8
 80138f4:	af00      	add	r7, sp, #0
 80138f6:	6078      	str	r0, [r7, #4]
 80138f8:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80138fa:	6838      	ldr	r0, [r7, #0]
 80138fc:	f7fc ff8e 	bl	801081c <_ZSt7forwardIRP20TfLiteSkipGramParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8013900:	4603      	mov	r3, r0
 8013902:	681a      	ldr	r2, [r3, #0]
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	601a      	str	r2, [r3, #0]
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	4618      	mov	r0, r3
 801390c:	3708      	adds	r7, #8
 801390e:	46bd      	mov	sp, r7
 8013910:	bd80      	pop	{r7, pc}

08013912 <_ZSt12__get_helperILj0EP20TfLiteSkipGramParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8013912:	b580      	push	{r7, lr}
 8013914:	b082      	sub	sp, #8
 8013916:	af00      	add	r7, sp, #0
 8013918:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801391a:	6878      	ldr	r0, [r7, #4]
 801391c:	f000 fe7c 	bl	8014618 <_ZNSt11_Tuple_implILj0EJP20TfLiteSkipGramParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8013920:	4603      	mov	r3, r0
 8013922:	4618      	mov	r0, r3
 8013924:	3708      	adds	r7, #8
 8013926:	46bd      	mov	sp, r7
 8013928:	bd80      	pop	{r7, pc}

0801392a <_ZNSt11_Tuple_implILj0EJP24TfLiteSpaceToDepthParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801392a:	b580      	push	{r7, lr}
 801392c:	b082      	sub	sp, #8
 801392e:	af00      	add	r7, sp, #0
 8013930:	6078      	str	r0, [r7, #4]
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	3304      	adds	r3, #4
 8013936:	4618      	mov	r0, r3
 8013938:	f000 fe7c 	bl	8014634 <_ZNSt10_Head_baseILj0EP24TfLiteSpaceToDepthParamsLb0EE7_M_headERS2_>
 801393c:	4603      	mov	r3, r0
 801393e:	4618      	mov	r0, r3
 8013940:	3708      	adds	r7, #8
 8013942:	46bd      	mov	sp, r7
 8013944:	bd80      	pop	{r7, pc}

08013946 <_ZNSt10_Head_baseILj0EP24TfLiteSpaceToDepthParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8013946:	b580      	push	{r7, lr}
 8013948:	b082      	sub	sp, #8
 801394a:	af00      	add	r7, sp, #0
 801394c:	6078      	str	r0, [r7, #4]
 801394e:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8013950:	6838      	ldr	r0, [r7, #0]
 8013952:	f7fc ffaf 	bl	80108b4 <_ZSt7forwardIRP24TfLiteSpaceToDepthParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8013956:	4603      	mov	r3, r0
 8013958:	681a      	ldr	r2, [r3, #0]
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	601a      	str	r2, [r3, #0]
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	4618      	mov	r0, r3
 8013962:	3708      	adds	r7, #8
 8013964:	46bd      	mov	sp, r7
 8013966:	bd80      	pop	{r7, pc}

08013968 <_ZSt12__get_helperILj0EP24TfLiteSpaceToDepthParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8013968:	b580      	push	{r7, lr}
 801396a:	b082      	sub	sp, #8
 801396c:	af00      	add	r7, sp, #0
 801396e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8013970:	6878      	ldr	r0, [r7, #4]
 8013972:	f000 fe6a 	bl	801464a <_ZNSt11_Tuple_implILj0EJP24TfLiteSpaceToDepthParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8013976:	4603      	mov	r3, r0
 8013978:	4618      	mov	r0, r3
 801397a:	3708      	adds	r7, #8
 801397c:	46bd      	mov	sp, r7
 801397e:	bd80      	pop	{r7, pc}

08013980 <_ZNSt11_Tuple_implILj0EJP24TfLiteDepthToSpaceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8013980:	b580      	push	{r7, lr}
 8013982:	b082      	sub	sp, #8
 8013984:	af00      	add	r7, sp, #0
 8013986:	6078      	str	r0, [r7, #4]
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	3304      	adds	r3, #4
 801398c:	4618      	mov	r0, r3
 801398e:	f000 fe6a 	bl	8014666 <_ZNSt10_Head_baseILj0EP24TfLiteDepthToSpaceParamsLb0EE7_M_headERS2_>
 8013992:	4603      	mov	r3, r0
 8013994:	4618      	mov	r0, r3
 8013996:	3708      	adds	r7, #8
 8013998:	46bd      	mov	sp, r7
 801399a:	bd80      	pop	{r7, pc}

0801399c <_ZNSt10_Head_baseILj0EP24TfLiteDepthToSpaceParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 801399c:	b580      	push	{r7, lr}
 801399e:	b082      	sub	sp, #8
 80139a0:	af00      	add	r7, sp, #0
 80139a2:	6078      	str	r0, [r7, #4]
 80139a4:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80139a6:	6838      	ldr	r0, [r7, #0]
 80139a8:	f7fc ffd0 	bl	801094c <_ZSt7forwardIRP24TfLiteDepthToSpaceParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80139ac:	4603      	mov	r3, r0
 80139ae:	681a      	ldr	r2, [r3, #0]
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	601a      	str	r2, [r3, #0]
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	4618      	mov	r0, r3
 80139b8:	3708      	adds	r7, #8
 80139ba:	46bd      	mov	sp, r7
 80139bc:	bd80      	pop	{r7, pc}

080139be <_ZSt12__get_helperILj0EP24TfLiteDepthToSpaceParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80139be:	b580      	push	{r7, lr}
 80139c0:	b082      	sub	sp, #8
 80139c2:	af00      	add	r7, sp, #0
 80139c4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80139c6:	6878      	ldr	r0, [r7, #4]
 80139c8:	f000 fe58 	bl	801467c <_ZNSt11_Tuple_implILj0EJP24TfLiteDepthToSpaceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 80139cc:	4603      	mov	r3, r0
 80139ce:	4618      	mov	r0, r3
 80139d0:	3708      	adds	r7, #8
 80139d2:	46bd      	mov	sp, r7
 80139d4:	bd80      	pop	{r7, pc}

080139d6 <_ZNSt11_Tuple_implILj0EJP18TfLiteGatherParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80139d6:	b580      	push	{r7, lr}
 80139d8:	b082      	sub	sp, #8
 80139da:	af00      	add	r7, sp, #0
 80139dc:	6078      	str	r0, [r7, #4]
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	3304      	adds	r3, #4
 80139e2:	4618      	mov	r0, r3
 80139e4:	f000 fe58 	bl	8014698 <_ZNSt10_Head_baseILj0EP18TfLiteGatherParamsLb0EE7_M_headERS2_>
 80139e8:	4603      	mov	r3, r0
 80139ea:	4618      	mov	r0, r3
 80139ec:	3708      	adds	r7, #8
 80139ee:	46bd      	mov	sp, r7
 80139f0:	bd80      	pop	{r7, pc}

080139f2 <_ZNSt10_Head_baseILj0EP18TfLiteGatherParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 80139f2:	b580      	push	{r7, lr}
 80139f4:	b082      	sub	sp, #8
 80139f6:	af00      	add	r7, sp, #0
 80139f8:	6078      	str	r0, [r7, #4]
 80139fa:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80139fc:	6838      	ldr	r0, [r7, #0]
 80139fe:	f7fc fff1 	bl	80109e4 <_ZSt7forwardIRP18TfLiteGatherParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8013a02:	4603      	mov	r3, r0
 8013a04:	681a      	ldr	r2, [r3, #0]
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	601a      	str	r2, [r3, #0]
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	4618      	mov	r0, r3
 8013a0e:	3708      	adds	r7, #8
 8013a10:	46bd      	mov	sp, r7
 8013a12:	bd80      	pop	{r7, pc}

08013a14 <_ZSt12__get_helperILj0EP18TfLiteGatherParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8013a14:	b580      	push	{r7, lr}
 8013a16:	b082      	sub	sp, #8
 8013a18:	af00      	add	r7, sp, #0
 8013a1a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8013a1c:	6878      	ldr	r0, [r7, #4]
 8013a1e:	f000 fe46 	bl	80146ae <_ZNSt11_Tuple_implILj0EJP18TfLiteGatherParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8013a22:	4603      	mov	r3, r0
 8013a24:	4618      	mov	r0, r3
 8013a26:	3708      	adds	r7, #8
 8013a28:	46bd      	mov	sp, r7
 8013a2a:	bd80      	pop	{r7, pc}

08013a2c <_ZNSt11_Tuple_implILj0EJP19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8013a2c:	b580      	push	{r7, lr}
 8013a2e:	b082      	sub	sp, #8
 8013a30:	af00      	add	r7, sp, #0
 8013a32:	6078      	str	r0, [r7, #4]
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	3304      	adds	r3, #4
 8013a38:	4618      	mov	r0, r3
 8013a3a:	f000 fe46 	bl	80146ca <_ZNSt10_Head_baseILj0EP19TfLiteReducerParamsLb0EE7_M_headERS2_>
 8013a3e:	4603      	mov	r3, r0
 8013a40:	4618      	mov	r0, r3
 8013a42:	3708      	adds	r7, #8
 8013a44:	46bd      	mov	sp, r7
 8013a46:	bd80      	pop	{r7, pc}

08013a48 <_ZNSt10_Head_baseILj0EP19TfLiteReducerParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8013a48:	b580      	push	{r7, lr}
 8013a4a:	b082      	sub	sp, #8
 8013a4c:	af00      	add	r7, sp, #0
 8013a4e:	6078      	str	r0, [r7, #4]
 8013a50:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8013a52:	6838      	ldr	r0, [r7, #0]
 8013a54:	f7fd f812 	bl	8010a7c <_ZSt7forwardIRP19TfLiteReducerParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8013a58:	4603      	mov	r3, r0
 8013a5a:	681a      	ldr	r2, [r3, #0]
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	601a      	str	r2, [r3, #0]
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	4618      	mov	r0, r3
 8013a64:	3708      	adds	r7, #8
 8013a66:	46bd      	mov	sp, r7
 8013a68:	bd80      	pop	{r7, pc}

08013a6a <_ZSt12__get_helperILj0EP19TfLiteReducerParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8013a6a:	b580      	push	{r7, lr}
 8013a6c:	b082      	sub	sp, #8
 8013a6e:	af00      	add	r7, sp, #0
 8013a70:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8013a72:	6878      	ldr	r0, [r7, #4]
 8013a74:	f000 fe34 	bl	80146e0 <_ZNSt11_Tuple_implILj0EJP19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8013a78:	4603      	mov	r3, r0
 8013a7a:	4618      	mov	r0, r3
 8013a7c:	3708      	adds	r7, #8
 8013a7e:	46bd      	mov	sp, r7
 8013a80:	bd80      	pop	{r7, pc}

08013a82 <_ZNSt11_Tuple_implILj0EJP17TfLiteSplitParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8013a82:	b580      	push	{r7, lr}
 8013a84:	b082      	sub	sp, #8
 8013a86:	af00      	add	r7, sp, #0
 8013a88:	6078      	str	r0, [r7, #4]
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	3304      	adds	r3, #4
 8013a8e:	4618      	mov	r0, r3
 8013a90:	f000 fe34 	bl	80146fc <_ZNSt10_Head_baseILj0EP17TfLiteSplitParamsLb0EE7_M_headERS2_>
 8013a94:	4603      	mov	r3, r0
 8013a96:	4618      	mov	r0, r3
 8013a98:	3708      	adds	r7, #8
 8013a9a:	46bd      	mov	sp, r7
 8013a9c:	bd80      	pop	{r7, pc}

08013a9e <_ZNSt10_Head_baseILj0EP17TfLiteSplitParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8013a9e:	b580      	push	{r7, lr}
 8013aa0:	b082      	sub	sp, #8
 8013aa2:	af00      	add	r7, sp, #0
 8013aa4:	6078      	str	r0, [r7, #4]
 8013aa6:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8013aa8:	6838      	ldr	r0, [r7, #0]
 8013aaa:	f7fd f833 	bl	8010b14 <_ZSt7forwardIRP17TfLiteSplitParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8013aae:	4603      	mov	r3, r0
 8013ab0:	681a      	ldr	r2, [r3, #0]
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	601a      	str	r2, [r3, #0]
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	4618      	mov	r0, r3
 8013aba:	3708      	adds	r7, #8
 8013abc:	46bd      	mov	sp, r7
 8013abe:	bd80      	pop	{r7, pc}

08013ac0 <_ZSt12__get_helperILj0EP17TfLiteSplitParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8013ac0:	b580      	push	{r7, lr}
 8013ac2:	b082      	sub	sp, #8
 8013ac4:	af00      	add	r7, sp, #0
 8013ac6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8013ac8:	6878      	ldr	r0, [r7, #4]
 8013aca:	f000 fe22 	bl	8014712 <_ZNSt11_Tuple_implILj0EJP17TfLiteSplitParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8013ace:	4603      	mov	r3, r0
 8013ad0:	4618      	mov	r0, r3
 8013ad2:	3708      	adds	r7, #8
 8013ad4:	46bd      	mov	sp, r7
 8013ad6:	bd80      	pop	{r7, pc}

08013ad8 <_ZNSt11_Tuple_implILj0EJP19TfLiteSqueezeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8013ad8:	b580      	push	{r7, lr}
 8013ada:	b082      	sub	sp, #8
 8013adc:	af00      	add	r7, sp, #0
 8013ade:	6078      	str	r0, [r7, #4]
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	3304      	adds	r3, #4
 8013ae4:	4618      	mov	r0, r3
 8013ae6:	f000 fe22 	bl	801472e <_ZNSt10_Head_baseILj0EP19TfLiteSqueezeParamsLb0EE7_M_headERS2_>
 8013aea:	4603      	mov	r3, r0
 8013aec:	4618      	mov	r0, r3
 8013aee:	3708      	adds	r7, #8
 8013af0:	46bd      	mov	sp, r7
 8013af2:	bd80      	pop	{r7, pc}

08013af4 <_ZNSt10_Head_baseILj0EP19TfLiteSqueezeParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8013af4:	b580      	push	{r7, lr}
 8013af6:	b082      	sub	sp, #8
 8013af8:	af00      	add	r7, sp, #0
 8013afa:	6078      	str	r0, [r7, #4]
 8013afc:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8013afe:	6838      	ldr	r0, [r7, #0]
 8013b00:	f7fd f854 	bl	8010bac <_ZSt7forwardIRP19TfLiteSqueezeParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8013b04:	4603      	mov	r3, r0
 8013b06:	681a      	ldr	r2, [r3, #0]
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	601a      	str	r2, [r3, #0]
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	4618      	mov	r0, r3
 8013b10:	3708      	adds	r7, #8
 8013b12:	46bd      	mov	sp, r7
 8013b14:	bd80      	pop	{r7, pc}

08013b16 <_ZSt12__get_helperILj0EP19TfLiteSqueezeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8013b16:	b580      	push	{r7, lr}
 8013b18:	b082      	sub	sp, #8
 8013b1a:	af00      	add	r7, sp, #0
 8013b1c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8013b1e:	6878      	ldr	r0, [r7, #4]
 8013b20:	f000 fe10 	bl	8014744 <_ZNSt11_Tuple_implILj0EJP19TfLiteSqueezeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8013b24:	4603      	mov	r3, r0
 8013b26:	4618      	mov	r0, r3
 8013b28:	3708      	adds	r7, #8
 8013b2a:	46bd      	mov	sp, r7
 8013b2c:	bd80      	pop	{r7, pc}

08013b2e <_ZNSt11_Tuple_implILj0EJP24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8013b2e:	b580      	push	{r7, lr}
 8013b30:	b082      	sub	sp, #8
 8013b32:	af00      	add	r7, sp, #0
 8013b34:	6078      	str	r0, [r7, #4]
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	3304      	adds	r3, #4
 8013b3a:	4618      	mov	r0, r3
 8013b3c:	f000 fe10 	bl	8014760 <_ZNSt10_Head_baseILj0EP24TfLiteStridedSliceParamsLb0EE7_M_headERS2_>
 8013b40:	4603      	mov	r3, r0
 8013b42:	4618      	mov	r0, r3
 8013b44:	3708      	adds	r7, #8
 8013b46:	46bd      	mov	sp, r7
 8013b48:	bd80      	pop	{r7, pc}

08013b4a <_ZNSt10_Head_baseILj0EP24TfLiteStridedSliceParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8013b4a:	b580      	push	{r7, lr}
 8013b4c:	b082      	sub	sp, #8
 8013b4e:	af00      	add	r7, sp, #0
 8013b50:	6078      	str	r0, [r7, #4]
 8013b52:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8013b54:	6838      	ldr	r0, [r7, #0]
 8013b56:	f7fd f875 	bl	8010c44 <_ZSt7forwardIRP24TfLiteStridedSliceParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8013b5a:	4603      	mov	r3, r0
 8013b5c:	681a      	ldr	r2, [r3, #0]
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	601a      	str	r2, [r3, #0]
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	4618      	mov	r0, r3
 8013b66:	3708      	adds	r7, #8
 8013b68:	46bd      	mov	sp, r7
 8013b6a:	bd80      	pop	{r7, pc}

08013b6c <_ZSt12__get_helperILj0EP24TfLiteStridedSliceParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8013b6c:	b580      	push	{r7, lr}
 8013b6e:	b082      	sub	sp, #8
 8013b70:	af00      	add	r7, sp, #0
 8013b72:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8013b74:	6878      	ldr	r0, [r7, #4]
 8013b76:	f000 fdfe 	bl	8014776 <_ZNSt11_Tuple_implILj0EJP24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8013b7a:	4603      	mov	r3, r0
 8013b7c:	4618      	mov	r0, r3
 8013b7e:	3708      	adds	r7, #8
 8013b80:	46bd      	mov	sp, r7
 8013b82:	bd80      	pop	{r7, pc}

08013b84 <_ZNSt11_Tuple_implILj0EJP18TfLiteArgMaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8013b84:	b580      	push	{r7, lr}
 8013b86:	b082      	sub	sp, #8
 8013b88:	af00      	add	r7, sp, #0
 8013b8a:	6078      	str	r0, [r7, #4]
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	3304      	adds	r3, #4
 8013b90:	4618      	mov	r0, r3
 8013b92:	f000 fdfe 	bl	8014792 <_ZNSt10_Head_baseILj0EP18TfLiteArgMaxParamsLb0EE7_M_headERS2_>
 8013b96:	4603      	mov	r3, r0
 8013b98:	4618      	mov	r0, r3
 8013b9a:	3708      	adds	r7, #8
 8013b9c:	46bd      	mov	sp, r7
 8013b9e:	bd80      	pop	{r7, pc}

08013ba0 <_ZNSt10_Head_baseILj0EP18TfLiteArgMaxParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8013ba0:	b580      	push	{r7, lr}
 8013ba2:	b082      	sub	sp, #8
 8013ba4:	af00      	add	r7, sp, #0
 8013ba6:	6078      	str	r0, [r7, #4]
 8013ba8:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8013baa:	6838      	ldr	r0, [r7, #0]
 8013bac:	f7fd f896 	bl	8010cdc <_ZSt7forwardIRP18TfLiteArgMaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8013bb0:	4603      	mov	r3, r0
 8013bb2:	681a      	ldr	r2, [r3, #0]
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	601a      	str	r2, [r3, #0]
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	4618      	mov	r0, r3
 8013bbc:	3708      	adds	r7, #8
 8013bbe:	46bd      	mov	sp, r7
 8013bc0:	bd80      	pop	{r7, pc}

08013bc2 <_ZSt12__get_helperILj0EP18TfLiteArgMaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8013bc2:	b580      	push	{r7, lr}
 8013bc4:	b082      	sub	sp, #8
 8013bc6:	af00      	add	r7, sp, #0
 8013bc8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8013bca:	6878      	ldr	r0, [r7, #4]
 8013bcc:	f000 fdec 	bl	80147a8 <_ZNSt11_Tuple_implILj0EJP18TfLiteArgMaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8013bd0:	4603      	mov	r3, r0
 8013bd2:	4618      	mov	r0, r3
 8013bd4:	3708      	adds	r7, #8
 8013bd6:	46bd      	mov	sp, r7
 8013bd8:	bd80      	pop	{r7, pc}

08013bda <_ZNSt11_Tuple_implILj0EJP18TfLiteArgMinParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8013bda:	b580      	push	{r7, lr}
 8013bdc:	b082      	sub	sp, #8
 8013bde:	af00      	add	r7, sp, #0
 8013be0:	6078      	str	r0, [r7, #4]
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	3304      	adds	r3, #4
 8013be6:	4618      	mov	r0, r3
 8013be8:	f000 fdec 	bl	80147c4 <_ZNSt10_Head_baseILj0EP18TfLiteArgMinParamsLb0EE7_M_headERS2_>
 8013bec:	4603      	mov	r3, r0
 8013bee:	4618      	mov	r0, r3
 8013bf0:	3708      	adds	r7, #8
 8013bf2:	46bd      	mov	sp, r7
 8013bf4:	bd80      	pop	{r7, pc}

08013bf6 <_ZNSt10_Head_baseILj0EP18TfLiteArgMinParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8013bf6:	b580      	push	{r7, lr}
 8013bf8:	b082      	sub	sp, #8
 8013bfa:	af00      	add	r7, sp, #0
 8013bfc:	6078      	str	r0, [r7, #4]
 8013bfe:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8013c00:	6838      	ldr	r0, [r7, #0]
 8013c02:	f7fd f8b7 	bl	8010d74 <_ZSt7forwardIRP18TfLiteArgMinParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8013c06:	4603      	mov	r3, r0
 8013c08:	681a      	ldr	r2, [r3, #0]
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	601a      	str	r2, [r3, #0]
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	4618      	mov	r0, r3
 8013c12:	3708      	adds	r7, #8
 8013c14:	46bd      	mov	sp, r7
 8013c16:	bd80      	pop	{r7, pc}

08013c18 <_ZSt12__get_helperILj0EP18TfLiteArgMinParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8013c18:	b580      	push	{r7, lr}
 8013c1a:	b082      	sub	sp, #8
 8013c1c:	af00      	add	r7, sp, #0
 8013c1e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8013c20:	6878      	ldr	r0, [r7, #4]
 8013c22:	f000 fdda 	bl	80147da <_ZNSt11_Tuple_implILj0EJP18TfLiteArgMinParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8013c26:	4603      	mov	r3, r0
 8013c28:	4618      	mov	r0, r3
 8013c2a:	3708      	adds	r7, #8
 8013c2c:	46bd      	mov	sp, r7
 8013c2e:	bd80      	pop	{r7, pc}

08013c30 <_ZNSt11_Tuple_implILj0EJP25TfLiteTransposeConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8013c30:	b580      	push	{r7, lr}
 8013c32:	b082      	sub	sp, #8
 8013c34:	af00      	add	r7, sp, #0
 8013c36:	6078      	str	r0, [r7, #4]
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	3304      	adds	r3, #4
 8013c3c:	4618      	mov	r0, r3
 8013c3e:	f000 fdda 	bl	80147f6 <_ZNSt10_Head_baseILj0EP25TfLiteTransposeConvParamsLb0EE7_M_headERS2_>
 8013c42:	4603      	mov	r3, r0
 8013c44:	4618      	mov	r0, r3
 8013c46:	3708      	adds	r7, #8
 8013c48:	46bd      	mov	sp, r7
 8013c4a:	bd80      	pop	{r7, pc}

08013c4c <_ZNSt10_Head_baseILj0EP25TfLiteTransposeConvParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8013c4c:	b580      	push	{r7, lr}
 8013c4e:	b082      	sub	sp, #8
 8013c50:	af00      	add	r7, sp, #0
 8013c52:	6078      	str	r0, [r7, #4]
 8013c54:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8013c56:	6838      	ldr	r0, [r7, #0]
 8013c58:	f7fd f8d8 	bl	8010e0c <_ZSt7forwardIRP25TfLiteTransposeConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8013c5c:	4603      	mov	r3, r0
 8013c5e:	681a      	ldr	r2, [r3, #0]
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	601a      	str	r2, [r3, #0]
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	4618      	mov	r0, r3
 8013c68:	3708      	adds	r7, #8
 8013c6a:	46bd      	mov	sp, r7
 8013c6c:	bd80      	pop	{r7, pc}

08013c6e <_ZSt12__get_helperILj0EP25TfLiteTransposeConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8013c6e:	b580      	push	{r7, lr}
 8013c70:	b082      	sub	sp, #8
 8013c72:	af00      	add	r7, sp, #0
 8013c74:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8013c76:	6878      	ldr	r0, [r7, #4]
 8013c78:	f000 fdc8 	bl	801480c <_ZNSt11_Tuple_implILj0EJP25TfLiteTransposeConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8013c7c:	4603      	mov	r3, r0
 8013c7e:	4618      	mov	r0, r3
 8013c80:	3708      	adds	r7, #8
 8013c82:	46bd      	mov	sp, r7
 8013c84:	bd80      	pop	{r7, pc}

08013c86 <_ZNSt11_Tuple_implILj0EJP25TfLiteSparseToDenseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8013c86:	b580      	push	{r7, lr}
 8013c88:	b082      	sub	sp, #8
 8013c8a:	af00      	add	r7, sp, #0
 8013c8c:	6078      	str	r0, [r7, #4]
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	3304      	adds	r3, #4
 8013c92:	4618      	mov	r0, r3
 8013c94:	f000 fdc8 	bl	8014828 <_ZNSt10_Head_baseILj0EP25TfLiteSparseToDenseParamsLb0EE7_M_headERS2_>
 8013c98:	4603      	mov	r3, r0
 8013c9a:	4618      	mov	r0, r3
 8013c9c:	3708      	adds	r7, #8
 8013c9e:	46bd      	mov	sp, r7
 8013ca0:	bd80      	pop	{r7, pc}

08013ca2 <_ZNSt10_Head_baseILj0EP25TfLiteSparseToDenseParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8013ca2:	b580      	push	{r7, lr}
 8013ca4:	b082      	sub	sp, #8
 8013ca6:	af00      	add	r7, sp, #0
 8013ca8:	6078      	str	r0, [r7, #4]
 8013caa:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8013cac:	6838      	ldr	r0, [r7, #0]
 8013cae:	f7fd f8f9 	bl	8010ea4 <_ZSt7forwardIRP25TfLiteSparseToDenseParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8013cb2:	4603      	mov	r3, r0
 8013cb4:	681a      	ldr	r2, [r3, #0]
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	601a      	str	r2, [r3, #0]
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	4618      	mov	r0, r3
 8013cbe:	3708      	adds	r7, #8
 8013cc0:	46bd      	mov	sp, r7
 8013cc2:	bd80      	pop	{r7, pc}

08013cc4 <_ZSt12__get_helperILj0EP25TfLiteSparseToDenseParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8013cc4:	b580      	push	{r7, lr}
 8013cc6:	b082      	sub	sp, #8
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8013ccc:	6878      	ldr	r0, [r7, #4]
 8013cce:	f000 fdb6 	bl	801483e <_ZNSt11_Tuple_implILj0EJP25TfLiteSparseToDenseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8013cd2:	4603      	mov	r3, r0
 8013cd4:	4618      	mov	r0, r3
 8013cd6:	3708      	adds	r7, #8
 8013cd8:	46bd      	mov	sp, r7
 8013cda:	bd80      	pop	{r7, pc}

08013cdc <_ZNSt11_Tuple_implILj0EJP17TfLiteShapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8013cdc:	b580      	push	{r7, lr}
 8013cde:	b082      	sub	sp, #8
 8013ce0:	af00      	add	r7, sp, #0
 8013ce2:	6078      	str	r0, [r7, #4]
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	3304      	adds	r3, #4
 8013ce8:	4618      	mov	r0, r3
 8013cea:	f000 fdb6 	bl	801485a <_ZNSt10_Head_baseILj0EP17TfLiteShapeParamsLb0EE7_M_headERS2_>
 8013cee:	4603      	mov	r3, r0
 8013cf0:	4618      	mov	r0, r3
 8013cf2:	3708      	adds	r7, #8
 8013cf4:	46bd      	mov	sp, r7
 8013cf6:	bd80      	pop	{r7, pc}

08013cf8 <_ZNSt10_Head_baseILj0EP17TfLiteShapeParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8013cf8:	b580      	push	{r7, lr}
 8013cfa:	b082      	sub	sp, #8
 8013cfc:	af00      	add	r7, sp, #0
 8013cfe:	6078      	str	r0, [r7, #4]
 8013d00:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8013d02:	6838      	ldr	r0, [r7, #0]
 8013d04:	f7fd f91a 	bl	8010f3c <_ZSt7forwardIRP17TfLiteShapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8013d08:	4603      	mov	r3, r0
 8013d0a:	681a      	ldr	r2, [r3, #0]
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	601a      	str	r2, [r3, #0]
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	4618      	mov	r0, r3
 8013d14:	3708      	adds	r7, #8
 8013d16:	46bd      	mov	sp, r7
 8013d18:	bd80      	pop	{r7, pc}

08013d1a <_ZSt12__get_helperILj0EP17TfLiteShapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8013d1a:	b580      	push	{r7, lr}
 8013d1c:	b082      	sub	sp, #8
 8013d1e:	af00      	add	r7, sp, #0
 8013d20:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8013d22:	6878      	ldr	r0, [r7, #4]
 8013d24:	f000 fda4 	bl	8014870 <_ZNSt11_Tuple_implILj0EJP17TfLiteShapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8013d28:	4603      	mov	r3, r0
 8013d2a:	4618      	mov	r0, r3
 8013d2c:	3708      	adds	r7, #8
 8013d2e:	46bd      	mov	sp, r7
 8013d30:	bd80      	pop	{r7, pc}

08013d32 <_ZNSt11_Tuple_implILj0EJP16TfLitePackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8013d32:	b580      	push	{r7, lr}
 8013d34:	b082      	sub	sp, #8
 8013d36:	af00      	add	r7, sp, #0
 8013d38:	6078      	str	r0, [r7, #4]
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	3304      	adds	r3, #4
 8013d3e:	4618      	mov	r0, r3
 8013d40:	f000 fda4 	bl	801488c <_ZNSt10_Head_baseILj0EP16TfLitePackParamsLb0EE7_M_headERS2_>
 8013d44:	4603      	mov	r3, r0
 8013d46:	4618      	mov	r0, r3
 8013d48:	3708      	adds	r7, #8
 8013d4a:	46bd      	mov	sp, r7
 8013d4c:	bd80      	pop	{r7, pc}

08013d4e <_ZNSt10_Head_baseILj0EP16TfLitePackParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8013d4e:	b580      	push	{r7, lr}
 8013d50:	b082      	sub	sp, #8
 8013d52:	af00      	add	r7, sp, #0
 8013d54:	6078      	str	r0, [r7, #4]
 8013d56:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8013d58:	6838      	ldr	r0, [r7, #0]
 8013d5a:	f7fd f93b 	bl	8010fd4 <_ZSt7forwardIRP16TfLitePackParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8013d5e:	4603      	mov	r3, r0
 8013d60:	681a      	ldr	r2, [r3, #0]
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	601a      	str	r2, [r3, #0]
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	4618      	mov	r0, r3
 8013d6a:	3708      	adds	r7, #8
 8013d6c:	46bd      	mov	sp, r7
 8013d6e:	bd80      	pop	{r7, pc}

08013d70 <_ZSt12__get_helperILj0EP16TfLitePackParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8013d70:	b580      	push	{r7, lr}
 8013d72:	b082      	sub	sp, #8
 8013d74:	af00      	add	r7, sp, #0
 8013d76:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8013d78:	6878      	ldr	r0, [r7, #4]
 8013d7a:	f000 fd92 	bl	80148a2 <_ZNSt11_Tuple_implILj0EJP16TfLitePackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8013d7e:	4603      	mov	r3, r0
 8013d80:	4618      	mov	r0, r3
 8013d82:	3708      	adds	r7, #8
 8013d84:	46bd      	mov	sp, r7
 8013d86:	bd80      	pop	{r7, pc}

08013d88 <_ZNSt11_Tuple_implILj0EJP21TfLiteFakeQuantParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8013d88:	b580      	push	{r7, lr}
 8013d8a:	b082      	sub	sp, #8
 8013d8c:	af00      	add	r7, sp, #0
 8013d8e:	6078      	str	r0, [r7, #4]
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	3304      	adds	r3, #4
 8013d94:	4618      	mov	r0, r3
 8013d96:	f000 fd92 	bl	80148be <_ZNSt10_Head_baseILj0EP21TfLiteFakeQuantParamsLb0EE7_M_headERS2_>
 8013d9a:	4603      	mov	r3, r0
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	3708      	adds	r7, #8
 8013da0:	46bd      	mov	sp, r7
 8013da2:	bd80      	pop	{r7, pc}

08013da4 <_ZNSt10_Head_baseILj0EP21TfLiteFakeQuantParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8013da4:	b580      	push	{r7, lr}
 8013da6:	b082      	sub	sp, #8
 8013da8:	af00      	add	r7, sp, #0
 8013daa:	6078      	str	r0, [r7, #4]
 8013dac:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8013dae:	6838      	ldr	r0, [r7, #0]
 8013db0:	f7fd f95c 	bl	801106c <_ZSt7forwardIRP21TfLiteFakeQuantParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8013db4:	4603      	mov	r3, r0
 8013db6:	681a      	ldr	r2, [r3, #0]
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	601a      	str	r2, [r3, #0]
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	4618      	mov	r0, r3
 8013dc0:	3708      	adds	r7, #8
 8013dc2:	46bd      	mov	sp, r7
 8013dc4:	bd80      	pop	{r7, pc}

08013dc6 <_ZSt12__get_helperILj0EP21TfLiteFakeQuantParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8013dc6:	b580      	push	{r7, lr}
 8013dc8:	b082      	sub	sp, #8
 8013dca:	af00      	add	r7, sp, #0
 8013dcc:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8013dce:	6878      	ldr	r0, [r7, #4]
 8013dd0:	f000 fd80 	bl	80148d4 <_ZNSt11_Tuple_implILj0EJP21TfLiteFakeQuantParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8013dd4:	4603      	mov	r3, r0
 8013dd6:	4618      	mov	r0, r3
 8013dd8:	3708      	adds	r7, #8
 8013dda:	46bd      	mov	sp, r7
 8013ddc:	bd80      	pop	{r7, pc}

08013dde <_ZNSt11_Tuple_implILj0EJP18TfLiteOneHotParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8013dde:	b580      	push	{r7, lr}
 8013de0:	b082      	sub	sp, #8
 8013de2:	af00      	add	r7, sp, #0
 8013de4:	6078      	str	r0, [r7, #4]
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	3304      	adds	r3, #4
 8013dea:	4618      	mov	r0, r3
 8013dec:	f000 fd80 	bl	80148f0 <_ZNSt10_Head_baseILj0EP18TfLiteOneHotParamsLb0EE7_M_headERS2_>
 8013df0:	4603      	mov	r3, r0
 8013df2:	4618      	mov	r0, r3
 8013df4:	3708      	adds	r7, #8
 8013df6:	46bd      	mov	sp, r7
 8013df8:	bd80      	pop	{r7, pc}

08013dfa <_ZNSt10_Head_baseILj0EP18TfLiteOneHotParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8013dfa:	b580      	push	{r7, lr}
 8013dfc:	b082      	sub	sp, #8
 8013dfe:	af00      	add	r7, sp, #0
 8013e00:	6078      	str	r0, [r7, #4]
 8013e02:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8013e04:	6838      	ldr	r0, [r7, #0]
 8013e06:	f7fd f97d 	bl	8011104 <_ZSt7forwardIRP18TfLiteOneHotParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8013e0a:	4603      	mov	r3, r0
 8013e0c:	681a      	ldr	r2, [r3, #0]
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	601a      	str	r2, [r3, #0]
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	4618      	mov	r0, r3
 8013e16:	3708      	adds	r7, #8
 8013e18:	46bd      	mov	sp, r7
 8013e1a:	bd80      	pop	{r7, pc}

08013e1c <_ZSt12__get_helperILj0EP18TfLiteOneHotParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8013e1c:	b580      	push	{r7, lr}
 8013e1e:	b082      	sub	sp, #8
 8013e20:	af00      	add	r7, sp, #0
 8013e22:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8013e24:	6878      	ldr	r0, [r7, #4]
 8013e26:	f000 fd6e 	bl	8014906 <_ZNSt11_Tuple_implILj0EJP18TfLiteOneHotParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8013e2a:	4603      	mov	r3, r0
 8013e2c:	4618      	mov	r0, r3
 8013e2e:	3708      	adds	r7, #8
 8013e30:	46bd      	mov	sp, r7
 8013e32:	bd80      	pop	{r7, pc}

08013e34 <_ZNSt11_Tuple_implILj0EJP18TfLiteUnpackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8013e34:	b580      	push	{r7, lr}
 8013e36:	b082      	sub	sp, #8
 8013e38:	af00      	add	r7, sp, #0
 8013e3a:	6078      	str	r0, [r7, #4]
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	3304      	adds	r3, #4
 8013e40:	4618      	mov	r0, r3
 8013e42:	f000 fd6e 	bl	8014922 <_ZNSt10_Head_baseILj0EP18TfLiteUnpackParamsLb0EE7_M_headERS2_>
 8013e46:	4603      	mov	r3, r0
 8013e48:	4618      	mov	r0, r3
 8013e4a:	3708      	adds	r7, #8
 8013e4c:	46bd      	mov	sp, r7
 8013e4e:	bd80      	pop	{r7, pc}

08013e50 <_ZNSt10_Head_baseILj0EP18TfLiteUnpackParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8013e50:	b580      	push	{r7, lr}
 8013e52:	b082      	sub	sp, #8
 8013e54:	af00      	add	r7, sp, #0
 8013e56:	6078      	str	r0, [r7, #4]
 8013e58:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8013e5a:	6838      	ldr	r0, [r7, #0]
 8013e5c:	f7fd f99e 	bl	801119c <_ZSt7forwardIRP18TfLiteUnpackParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8013e60:	4603      	mov	r3, r0
 8013e62:	681a      	ldr	r2, [r3, #0]
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	601a      	str	r2, [r3, #0]
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	4618      	mov	r0, r3
 8013e6c:	3708      	adds	r7, #8
 8013e6e:	46bd      	mov	sp, r7
 8013e70:	bd80      	pop	{r7, pc}

08013e72 <_ZSt12__get_helperILj0EP18TfLiteUnpackParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8013e72:	b580      	push	{r7, lr}
 8013e74:	b082      	sub	sp, #8
 8013e76:	af00      	add	r7, sp, #0
 8013e78:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8013e7a:	6878      	ldr	r0, [r7, #4]
 8013e7c:	f000 fd5c 	bl	8014938 <_ZNSt11_Tuple_implILj0EJP18TfLiteUnpackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8013e80:	4603      	mov	r3, r0
 8013e82:	4618      	mov	r0, r3
 8013e84:	3708      	adds	r7, #8
 8013e86:	46bd      	mov	sp, r7
 8013e88:	bd80      	pop	{r7, pc}

08013e8a <_ZNSt11_Tuple_implILj0EJP21TfLiteLeakyReluParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8013e8a:	b580      	push	{r7, lr}
 8013e8c:	b082      	sub	sp, #8
 8013e8e:	af00      	add	r7, sp, #0
 8013e90:	6078      	str	r0, [r7, #4]
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	3304      	adds	r3, #4
 8013e96:	4618      	mov	r0, r3
 8013e98:	f000 fd5c 	bl	8014954 <_ZNSt10_Head_baseILj0EP21TfLiteLeakyReluParamsLb0EE7_M_headERS2_>
 8013e9c:	4603      	mov	r3, r0
 8013e9e:	4618      	mov	r0, r3
 8013ea0:	3708      	adds	r7, #8
 8013ea2:	46bd      	mov	sp, r7
 8013ea4:	bd80      	pop	{r7, pc}

08013ea6 <_ZNSt10_Head_baseILj0EP21TfLiteLeakyReluParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8013ea6:	b580      	push	{r7, lr}
 8013ea8:	b082      	sub	sp, #8
 8013eaa:	af00      	add	r7, sp, #0
 8013eac:	6078      	str	r0, [r7, #4]
 8013eae:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8013eb0:	6838      	ldr	r0, [r7, #0]
 8013eb2:	f7fd f9bf 	bl	8011234 <_ZSt7forwardIRP21TfLiteLeakyReluParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8013eb6:	4603      	mov	r3, r0
 8013eb8:	681a      	ldr	r2, [r3, #0]
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	601a      	str	r2, [r3, #0]
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	4618      	mov	r0, r3
 8013ec2:	3708      	adds	r7, #8
 8013ec4:	46bd      	mov	sp, r7
 8013ec6:	bd80      	pop	{r7, pc}

08013ec8 <_ZSt12__get_helperILj0EP21TfLiteLeakyReluParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8013ec8:	b580      	push	{r7, lr}
 8013eca:	b082      	sub	sp, #8
 8013ecc:	af00      	add	r7, sp, #0
 8013ece:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8013ed0:	6878      	ldr	r0, [r7, #4]
 8013ed2:	f000 fd4a 	bl	801496a <_ZNSt11_Tuple_implILj0EJP21TfLiteLeakyReluParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8013ed6:	4603      	mov	r3, r0
 8013ed8:	4618      	mov	r0, r3
 8013eda:	3708      	adds	r7, #8
 8013edc:	46bd      	mov	sp, r7
 8013ede:	bd80      	pop	{r7, pc}

08013ee0 <_ZNSt11_Tuple_implILj0EJP25TfLiteMirrorPaddingParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8013ee0:	b580      	push	{r7, lr}
 8013ee2:	b082      	sub	sp, #8
 8013ee4:	af00      	add	r7, sp, #0
 8013ee6:	6078      	str	r0, [r7, #4]
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	3304      	adds	r3, #4
 8013eec:	4618      	mov	r0, r3
 8013eee:	f000 fd4a 	bl	8014986 <_ZNSt10_Head_baseILj0EP25TfLiteMirrorPaddingParamsLb0EE7_M_headERS2_>
 8013ef2:	4603      	mov	r3, r0
 8013ef4:	4618      	mov	r0, r3
 8013ef6:	3708      	adds	r7, #8
 8013ef8:	46bd      	mov	sp, r7
 8013efa:	bd80      	pop	{r7, pc}

08013efc <_ZNSt10_Head_baseILj0EP25TfLiteMirrorPaddingParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8013efc:	b580      	push	{r7, lr}
 8013efe:	b082      	sub	sp, #8
 8013f00:	af00      	add	r7, sp, #0
 8013f02:	6078      	str	r0, [r7, #4]
 8013f04:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8013f06:	6838      	ldr	r0, [r7, #0]
 8013f08:	f7fd f9e0 	bl	80112cc <_ZSt7forwardIRP25TfLiteMirrorPaddingParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8013f0c:	4603      	mov	r3, r0
 8013f0e:	681a      	ldr	r2, [r3, #0]
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	601a      	str	r2, [r3, #0]
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	4618      	mov	r0, r3
 8013f18:	3708      	adds	r7, #8
 8013f1a:	46bd      	mov	sp, r7
 8013f1c:	bd80      	pop	{r7, pc}

08013f1e <_ZSt12__get_helperILj0EP25TfLiteMirrorPaddingParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8013f1e:	b580      	push	{r7, lr}
 8013f20:	b082      	sub	sp, #8
 8013f22:	af00      	add	r7, sp, #0
 8013f24:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8013f26:	6878      	ldr	r0, [r7, #4]
 8013f28:	f000 fd38 	bl	801499c <_ZNSt11_Tuple_implILj0EJP25TfLiteMirrorPaddingParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8013f2c:	4603      	mov	r3, r0
 8013f2e:	4618      	mov	r0, r3
 8013f30:	3708      	adds	r7, #8
 8013f32:	46bd      	mov	sp, r7
 8013f34:	bd80      	pop	{r7, pc}

08013f36 <_ZNSt11_Tuple_implILj0EJP18TfLiteUniqueParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8013f36:	b580      	push	{r7, lr}
 8013f38:	b082      	sub	sp, #8
 8013f3a:	af00      	add	r7, sp, #0
 8013f3c:	6078      	str	r0, [r7, #4]
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	3304      	adds	r3, #4
 8013f42:	4618      	mov	r0, r3
 8013f44:	f000 fd38 	bl	80149b8 <_ZNSt10_Head_baseILj0EP18TfLiteUniqueParamsLb0EE7_M_headERS2_>
 8013f48:	4603      	mov	r3, r0
 8013f4a:	4618      	mov	r0, r3
 8013f4c:	3708      	adds	r7, #8
 8013f4e:	46bd      	mov	sp, r7
 8013f50:	bd80      	pop	{r7, pc}

08013f52 <_ZNSt10_Head_baseILj0EP18TfLiteUniqueParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8013f52:	b580      	push	{r7, lr}
 8013f54:	b082      	sub	sp, #8
 8013f56:	af00      	add	r7, sp, #0
 8013f58:	6078      	str	r0, [r7, #4]
 8013f5a:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8013f5c:	6838      	ldr	r0, [r7, #0]
 8013f5e:	f7fd fa01 	bl	8011364 <_ZSt7forwardIRP18TfLiteUniqueParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8013f62:	4603      	mov	r3, r0
 8013f64:	681a      	ldr	r2, [r3, #0]
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	601a      	str	r2, [r3, #0]
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	4618      	mov	r0, r3
 8013f6e:	3708      	adds	r7, #8
 8013f70:	46bd      	mov	sp, r7
 8013f72:	bd80      	pop	{r7, pc}

08013f74 <_ZSt12__get_helperILj0EP18TfLiteUniqueParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8013f74:	b580      	push	{r7, lr}
 8013f76:	b082      	sub	sp, #8
 8013f78:	af00      	add	r7, sp, #0
 8013f7a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8013f7c:	6878      	ldr	r0, [r7, #4]
 8013f7e:	f000 fd26 	bl	80149ce <_ZNSt11_Tuple_implILj0EJP18TfLiteUniqueParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8013f82:	4603      	mov	r3, r0
 8013f84:	4618      	mov	r0, r3
 8013f86:	3708      	adds	r7, #8
 8013f88:	46bd      	mov	sp, r7
 8013f8a:	bd80      	pop	{r7, pc}

08013f8c <_ZNSt11_Tuple_implILj0EJP27TfLiteReverseSequenceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8013f8c:	b580      	push	{r7, lr}
 8013f8e:	b082      	sub	sp, #8
 8013f90:	af00      	add	r7, sp, #0
 8013f92:	6078      	str	r0, [r7, #4]
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	3304      	adds	r3, #4
 8013f98:	4618      	mov	r0, r3
 8013f9a:	f000 fd26 	bl	80149ea <_ZNSt10_Head_baseILj0EP27TfLiteReverseSequenceParamsLb0EE7_M_headERS2_>
 8013f9e:	4603      	mov	r3, r0
 8013fa0:	4618      	mov	r0, r3
 8013fa2:	3708      	adds	r7, #8
 8013fa4:	46bd      	mov	sp, r7
 8013fa6:	bd80      	pop	{r7, pc}

08013fa8 <_ZNSt10_Head_baseILj0EP27TfLiteReverseSequenceParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8013fa8:	b580      	push	{r7, lr}
 8013faa:	b082      	sub	sp, #8
 8013fac:	af00      	add	r7, sp, #0
 8013fae:	6078      	str	r0, [r7, #4]
 8013fb0:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8013fb2:	6838      	ldr	r0, [r7, #0]
 8013fb4:	f7fd fa22 	bl	80113fc <_ZSt7forwardIRP27TfLiteReverseSequenceParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8013fb8:	4603      	mov	r3, r0
 8013fba:	681a      	ldr	r2, [r3, #0]
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	601a      	str	r2, [r3, #0]
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	4618      	mov	r0, r3
 8013fc4:	3708      	adds	r7, #8
 8013fc6:	46bd      	mov	sp, r7
 8013fc8:	bd80      	pop	{r7, pc}

08013fca <_ZSt12__get_helperILj0EP27TfLiteReverseSequenceParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8013fca:	b580      	push	{r7, lr}
 8013fcc:	b082      	sub	sp, #8
 8013fce:	af00      	add	r7, sp, #0
 8013fd0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8013fd2:	6878      	ldr	r0, [r7, #4]
 8013fd4:	f000 fd14 	bl	8014a00 <_ZNSt11_Tuple_implILj0EJP27TfLiteReverseSequenceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8013fd8:	4603      	mov	r3, r0
 8013fda:	4618      	mov	r0, r3
 8013fdc:	3708      	adds	r7, #8
 8013fde:	46bd      	mov	sp, r7
 8013fe0:	bd80      	pop	{r7, pc}

08013fe2 <_ZNSt11_Tuple_implILj0EJP14TfLiteIfParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8013fe2:	b580      	push	{r7, lr}
 8013fe4:	b082      	sub	sp, #8
 8013fe6:	af00      	add	r7, sp, #0
 8013fe8:	6078      	str	r0, [r7, #4]
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	3304      	adds	r3, #4
 8013fee:	4618      	mov	r0, r3
 8013ff0:	f000 fd14 	bl	8014a1c <_ZNSt10_Head_baseILj0EP14TfLiteIfParamsLb0EE7_M_headERS2_>
 8013ff4:	4603      	mov	r3, r0
 8013ff6:	4618      	mov	r0, r3
 8013ff8:	3708      	adds	r7, #8
 8013ffa:	46bd      	mov	sp, r7
 8013ffc:	bd80      	pop	{r7, pc}

08013ffe <_ZNSt10_Head_baseILj0EP14TfLiteIfParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8013ffe:	b580      	push	{r7, lr}
 8014000:	b082      	sub	sp, #8
 8014002:	af00      	add	r7, sp, #0
 8014004:	6078      	str	r0, [r7, #4]
 8014006:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8014008:	6838      	ldr	r0, [r7, #0]
 801400a:	f7fd fa43 	bl	8011494 <_ZSt7forwardIRP14TfLiteIfParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 801400e:	4603      	mov	r3, r0
 8014010:	681a      	ldr	r2, [r3, #0]
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	601a      	str	r2, [r3, #0]
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	4618      	mov	r0, r3
 801401a:	3708      	adds	r7, #8
 801401c:	46bd      	mov	sp, r7
 801401e:	bd80      	pop	{r7, pc}

08014020 <_ZSt12__get_helperILj0EP14TfLiteIfParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8014020:	b580      	push	{r7, lr}
 8014022:	b082      	sub	sp, #8
 8014024:	af00      	add	r7, sp, #0
 8014026:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8014028:	6878      	ldr	r0, [r7, #4]
 801402a:	f000 fd02 	bl	8014a32 <_ZNSt11_Tuple_implILj0EJP14TfLiteIfParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 801402e:	4603      	mov	r3, r0
 8014030:	4618      	mov	r0, r3
 8014032:	3708      	adds	r7, #8
 8014034:	46bd      	mov	sp, r7
 8014036:	bd80      	pop	{r7, pc}

08014038 <_ZNSt11_Tuple_implILj0EJP17TfLiteWhileParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8014038:	b580      	push	{r7, lr}
 801403a:	b082      	sub	sp, #8
 801403c:	af00      	add	r7, sp, #0
 801403e:	6078      	str	r0, [r7, #4]
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	3304      	adds	r3, #4
 8014044:	4618      	mov	r0, r3
 8014046:	f000 fd02 	bl	8014a4e <_ZNSt10_Head_baseILj0EP17TfLiteWhileParamsLb0EE7_M_headERS2_>
 801404a:	4603      	mov	r3, r0
 801404c:	4618      	mov	r0, r3
 801404e:	3708      	adds	r7, #8
 8014050:	46bd      	mov	sp, r7
 8014052:	bd80      	pop	{r7, pc}

08014054 <_ZNSt10_Head_baseILj0EP17TfLiteWhileParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8014054:	b580      	push	{r7, lr}
 8014056:	b082      	sub	sp, #8
 8014058:	af00      	add	r7, sp, #0
 801405a:	6078      	str	r0, [r7, #4]
 801405c:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 801405e:	6838      	ldr	r0, [r7, #0]
 8014060:	f7fd fa64 	bl	801152c <_ZSt7forwardIRP17TfLiteWhileParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8014064:	4603      	mov	r3, r0
 8014066:	681a      	ldr	r2, [r3, #0]
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	601a      	str	r2, [r3, #0]
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	4618      	mov	r0, r3
 8014070:	3708      	adds	r7, #8
 8014072:	46bd      	mov	sp, r7
 8014074:	bd80      	pop	{r7, pc}

08014076 <_ZSt12__get_helperILj0EP17TfLiteWhileParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8014076:	b580      	push	{r7, lr}
 8014078:	b082      	sub	sp, #8
 801407a:	af00      	add	r7, sp, #0
 801407c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801407e:	6878      	ldr	r0, [r7, #4]
 8014080:	f000 fcf0 	bl	8014a64 <_ZNSt11_Tuple_implILj0EJP17TfLiteWhileParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8014084:	4603      	mov	r3, r0
 8014086:	4618      	mov	r0, r3
 8014088:	3708      	adds	r7, #8
 801408a:	46bd      	mov	sp, r7
 801408c:	bd80      	pop	{r7, pc}

0801408e <_ZNSt11_Tuple_implILj0EJP23TfLiteBatchMatMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801408e:	b580      	push	{r7, lr}
 8014090:	b082      	sub	sp, #8
 8014092:	af00      	add	r7, sp, #0
 8014094:	6078      	str	r0, [r7, #4]
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	3304      	adds	r3, #4
 801409a:	4618      	mov	r0, r3
 801409c:	f000 fcf0 	bl	8014a80 <_ZNSt10_Head_baseILj0EP23TfLiteBatchMatMulParamsLb0EE7_M_headERS2_>
 80140a0:	4603      	mov	r3, r0
 80140a2:	4618      	mov	r0, r3
 80140a4:	3708      	adds	r7, #8
 80140a6:	46bd      	mov	sp, r7
 80140a8:	bd80      	pop	{r7, pc}

080140aa <_ZNSt10_Head_baseILj0EP23TfLiteBatchMatMulParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 80140aa:	b580      	push	{r7, lr}
 80140ac:	b082      	sub	sp, #8
 80140ae:	af00      	add	r7, sp, #0
 80140b0:	6078      	str	r0, [r7, #4]
 80140b2:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80140b4:	6838      	ldr	r0, [r7, #0]
 80140b6:	f7fd fa85 	bl	80115c4 <_ZSt7forwardIRP23TfLiteBatchMatMulParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80140ba:	4603      	mov	r3, r0
 80140bc:	681a      	ldr	r2, [r3, #0]
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	601a      	str	r2, [r3, #0]
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	4618      	mov	r0, r3
 80140c6:	3708      	adds	r7, #8
 80140c8:	46bd      	mov	sp, r7
 80140ca:	bd80      	pop	{r7, pc}

080140cc <_ZSt12__get_helperILj0EP23TfLiteBatchMatMulParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80140cc:	b580      	push	{r7, lr}
 80140ce:	b082      	sub	sp, #8
 80140d0:	af00      	add	r7, sp, #0
 80140d2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80140d4:	6878      	ldr	r0, [r7, #4]
 80140d6:	f000 fcde 	bl	8014a96 <_ZNSt11_Tuple_implILj0EJP23TfLiteBatchMatMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 80140da:	4603      	mov	r3, r0
 80140dc:	4618      	mov	r0, r3
 80140de:	3708      	adds	r7, #8
 80140e0:	46bd      	mov	sp, r7
 80140e2:	bd80      	pop	{r7, pc}

080140e4 <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80140e4:	b480      	push	{r7}
 80140e6:	b083      	sub	sp, #12
 80140e8:	af00      	add	r7, sp, #0
 80140ea:	6078      	str	r0, [r7, #4]
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	4618      	mov	r0, r3
 80140f0:	370c      	adds	r7, #12
 80140f2:	46bd      	mov	sp, r7
 80140f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140f8:	4770      	bx	lr

080140fa <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80140fa:	b580      	push	{r7, lr}
 80140fc:	b082      	sub	sp, #8
 80140fe:	af00      	add	r7, sp, #0
 8014100:	6078      	str	r0, [r7, #4]
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	4618      	mov	r0, r3
 8014106:	f000 fcd4 	bl	8014ab2 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EE7_M_headERS4_>
 801410a:	4603      	mov	r3, r0
 801410c:	4618      	mov	r0, r3
 801410e:	3708      	adds	r7, #8
 8014110:	46bd      	mov	sp, r7
 8014112:	bd80      	pop	{r7, pc}

08014114 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EEC2IS3_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8014114:	b580      	push	{r7, lr}
 8014116:	b082      	sub	sp, #8
 8014118:	af00      	add	r7, sp, #0
 801411a:	6078      	str	r0, [r7, #4]
 801411c:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 801411e:	6838      	ldr	r0, [r7, #0]
 8014120:	f7f8 f98b 	bl	800c43a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8014124:	4602      	mov	r2, r0
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	6812      	ldr	r2, [r2, #0]
 801412a:	601a      	str	r2, [r3, #0]
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	4618      	mov	r0, r3
 8014130:	3708      	adds	r7, #8
 8014132:	46bd      	mov	sp, r7
 8014134:	bd80      	pop	{r7, pc}

08014136 <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8014136:	b580      	push	{r7, lr}
 8014138:	b082      	sub	sp, #8
 801413a:	af00      	add	r7, sp, #0
 801413c:	6078      	str	r0, [r7, #4]
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	3304      	adds	r3, #4
 8014142:	4618      	mov	r0, r3
 8014144:	f000 fcc0 	bl	8014ac8 <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EE7_M_headERKS2_>
 8014148:	4603      	mov	r3, r0
 801414a:	4618      	mov	r0, r3
 801414c:	3708      	adds	r7, #8
 801414e:	46bd      	mov	sp, r7
 8014150:	bd80      	pop	{r7, pc}

08014152 <_ZNSt10_Head_baseILj0EP16TfLiteCastParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8014152:	b480      	push	{r7}
 8014154:	b083      	sub	sp, #12
 8014156:	af00      	add	r7, sp, #0
 8014158:	6078      	str	r0, [r7, #4]
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	4618      	mov	r0, r3
 801415e:	370c      	adds	r7, #12
 8014160:	46bd      	mov	sp, r7
 8014162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014166:	4770      	bx	lr

08014168 <_ZNSt11_Tuple_implILj0EJP16TfLiteCastParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8014168:	b580      	push	{r7, lr}
 801416a:	b082      	sub	sp, #8
 801416c:	af00      	add	r7, sp, #0
 801416e:	6078      	str	r0, [r7, #4]
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	3304      	adds	r3, #4
 8014174:	4618      	mov	r0, r3
 8014176:	f000 fcb2 	bl	8014ade <_ZNSt10_Head_baseILj0EP16TfLiteCastParamsLb0EE7_M_headERKS2_>
 801417a:	4603      	mov	r3, r0
 801417c:	4618      	mov	r0, r3
 801417e:	3708      	adds	r7, #8
 8014180:	46bd      	mov	sp, r7
 8014182:	bd80      	pop	{r7, pc}

08014184 <_ZNSt10_Head_baseILj0EP25TfLiteLSHProjectionParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8014184:	b480      	push	{r7}
 8014186:	b083      	sub	sp, #12
 8014188:	af00      	add	r7, sp, #0
 801418a:	6078      	str	r0, [r7, #4]
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	4618      	mov	r0, r3
 8014190:	370c      	adds	r7, #12
 8014192:	46bd      	mov	sp, r7
 8014194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014198:	4770      	bx	lr

0801419a <_ZNSt11_Tuple_implILj0EJP25TfLiteLSHProjectionParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801419a:	b580      	push	{r7, lr}
 801419c:	b082      	sub	sp, #8
 801419e:	af00      	add	r7, sp, #0
 80141a0:	6078      	str	r0, [r7, #4]
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	3304      	adds	r3, #4
 80141a6:	4618      	mov	r0, r3
 80141a8:	f000 fca4 	bl	8014af4 <_ZNSt10_Head_baseILj0EP25TfLiteLSHProjectionParamsLb0EE7_M_headERKS2_>
 80141ac:	4603      	mov	r3, r0
 80141ae:	4618      	mov	r0, r3
 80141b0:	3708      	adds	r7, #8
 80141b2:	46bd      	mov	sp, r7
 80141b4:	bd80      	pop	{r7, pc}

080141b6 <_ZNSt10_Head_baseILj0EP16TfLitePoolParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80141b6:	b480      	push	{r7}
 80141b8:	b083      	sub	sp, #12
 80141ba:	af00      	add	r7, sp, #0
 80141bc:	6078      	str	r0, [r7, #4]
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	4618      	mov	r0, r3
 80141c2:	370c      	adds	r7, #12
 80141c4:	46bd      	mov	sp, r7
 80141c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ca:	4770      	bx	lr

080141cc <_ZNSt11_Tuple_implILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80141cc:	b580      	push	{r7, lr}
 80141ce:	b082      	sub	sp, #8
 80141d0:	af00      	add	r7, sp, #0
 80141d2:	6078      	str	r0, [r7, #4]
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	3304      	adds	r3, #4
 80141d8:	4618      	mov	r0, r3
 80141da:	f000 fc96 	bl	8014b0a <_ZNSt10_Head_baseILj0EP16TfLitePoolParamsLb0EE7_M_headERKS2_>
 80141de:	4603      	mov	r3, r0
 80141e0:	4618      	mov	r0, r3
 80141e2:	3708      	adds	r7, #8
 80141e4:	46bd      	mov	sp, r7
 80141e6:	bd80      	pop	{r7, pc}

080141e8 <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80141e8:	b480      	push	{r7}
 80141ea:	b083      	sub	sp, #12
 80141ec:	af00      	add	r7, sp, #0
 80141ee:	6078      	str	r0, [r7, #4]
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	4618      	mov	r0, r3
 80141f4:	370c      	adds	r7, #12
 80141f6:	46bd      	mov	sp, r7
 80141f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141fc:	4770      	bx	lr

080141fe <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80141fe:	b580      	push	{r7, lr}
 8014200:	b082      	sub	sp, #8
 8014202:	af00      	add	r7, sp, #0
 8014204:	6078      	str	r0, [r7, #4]
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	3304      	adds	r3, #4
 801420a:	4618      	mov	r0, r3
 801420c:	f000 fc88 	bl	8014b20 <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EE7_M_headERKS2_>
 8014210:	4603      	mov	r3, r0
 8014212:	4618      	mov	r0, r3
 8014214:	3708      	adds	r7, #8
 8014216:	46bd      	mov	sp, r7
 8014218:	bd80      	pop	{r7, pc}

0801421a <_ZNSt10_Head_baseILj0EP16TfLiteSVDFParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 801421a:	b480      	push	{r7}
 801421c:	b083      	sub	sp, #12
 801421e:	af00      	add	r7, sp, #0
 8014220:	6078      	str	r0, [r7, #4]
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	4618      	mov	r0, r3
 8014226:	370c      	adds	r7, #12
 8014228:	46bd      	mov	sp, r7
 801422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801422e:	4770      	bx	lr

08014230 <_ZNSt11_Tuple_implILj0EJP16TfLiteSVDFParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8014230:	b580      	push	{r7, lr}
 8014232:	b082      	sub	sp, #8
 8014234:	af00      	add	r7, sp, #0
 8014236:	6078      	str	r0, [r7, #4]
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	3304      	adds	r3, #4
 801423c:	4618      	mov	r0, r3
 801423e:	f000 fc7a 	bl	8014b36 <_ZNSt10_Head_baseILj0EP16TfLiteSVDFParamsLb0EE7_M_headERKS2_>
 8014242:	4603      	mov	r3, r0
 8014244:	4618      	mov	r0, r3
 8014246:	3708      	adds	r7, #8
 8014248:	46bd      	mov	sp, r7
 801424a:	bd80      	pop	{r7, pc}

0801424c <_ZNSt10_Head_baseILj0EP23TfLiteSequenceRNNParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 801424c:	b480      	push	{r7}
 801424e:	b083      	sub	sp, #12
 8014250:	af00      	add	r7, sp, #0
 8014252:	6078      	str	r0, [r7, #4]
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	4618      	mov	r0, r3
 8014258:	370c      	adds	r7, #12
 801425a:	46bd      	mov	sp, r7
 801425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014260:	4770      	bx	lr

08014262 <_ZNSt11_Tuple_implILj0EJP23TfLiteSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8014262:	b580      	push	{r7, lr}
 8014264:	b082      	sub	sp, #8
 8014266:	af00      	add	r7, sp, #0
 8014268:	6078      	str	r0, [r7, #4]
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	3304      	adds	r3, #4
 801426e:	4618      	mov	r0, r3
 8014270:	f000 fc6c 	bl	8014b4c <_ZNSt10_Head_baseILj0EP23TfLiteSequenceRNNParamsLb0EE7_M_headERKS2_>
 8014274:	4603      	mov	r3, r0
 8014276:	4618      	mov	r0, r3
 8014278:	3708      	adds	r7, #8
 801427a:	46bd      	mov	sp, r7
 801427c:	bd80      	pop	{r7, pc}

0801427e <_ZNSt10_Head_baseILj0EP36TfLiteBidirectionalSequenceRNNParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 801427e:	b480      	push	{r7}
 8014280:	b083      	sub	sp, #12
 8014282:	af00      	add	r7, sp, #0
 8014284:	6078      	str	r0, [r7, #4]
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	4618      	mov	r0, r3
 801428a:	370c      	adds	r7, #12
 801428c:	46bd      	mov	sp, r7
 801428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014292:	4770      	bx	lr

08014294 <_ZNSt11_Tuple_implILj0EJP36TfLiteBidirectionalSequenceRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8014294:	b580      	push	{r7, lr}
 8014296:	b082      	sub	sp, #8
 8014298:	af00      	add	r7, sp, #0
 801429a:	6078      	str	r0, [r7, #4]
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	3304      	adds	r3, #4
 80142a0:	4618      	mov	r0, r3
 80142a2:	f000 fc5e 	bl	8014b62 <_ZNSt10_Head_baseILj0EP36TfLiteBidirectionalSequenceRNNParamsLb0EE7_M_headERKS2_>
 80142a6:	4603      	mov	r3, r0
 80142a8:	4618      	mov	r0, r3
 80142aa:	3708      	adds	r7, #8
 80142ac:	46bd      	mov	sp, r7
 80142ae:	bd80      	pop	{r7, pc}

080142b0 <_ZNSt10_Head_baseILj0EP15TfLiteRNNParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80142b0:	b480      	push	{r7}
 80142b2:	b083      	sub	sp, #12
 80142b4:	af00      	add	r7, sp, #0
 80142b6:	6078      	str	r0, [r7, #4]
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	4618      	mov	r0, r3
 80142bc:	370c      	adds	r7, #12
 80142be:	46bd      	mov	sp, r7
 80142c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142c4:	4770      	bx	lr

080142c6 <_ZNSt11_Tuple_implILj0EJP15TfLiteRNNParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80142c6:	b580      	push	{r7, lr}
 80142c8:	b082      	sub	sp, #8
 80142ca:	af00      	add	r7, sp, #0
 80142cc:	6078      	str	r0, [r7, #4]
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	3304      	adds	r3, #4
 80142d2:	4618      	mov	r0, r3
 80142d4:	f000 fc50 	bl	8014b78 <_ZNSt10_Head_baseILj0EP15TfLiteRNNParamsLb0EE7_M_headERKS2_>
 80142d8:	4603      	mov	r3, r0
 80142da:	4618      	mov	r0, r3
 80142dc:	3708      	adds	r7, #8
 80142de:	46bd      	mov	sp, r7
 80142e0:	bd80      	pop	{r7, pc}

080142e2 <_ZNSt10_Head_baseILj0EP33TfLiteEmbeddingLookupSparseParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80142e2:	b480      	push	{r7}
 80142e4:	b083      	sub	sp, #12
 80142e6:	af00      	add	r7, sp, #0
 80142e8:	6078      	str	r0, [r7, #4]
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	4618      	mov	r0, r3
 80142ee:	370c      	adds	r7, #12
 80142f0:	46bd      	mov	sp, r7
 80142f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142f6:	4770      	bx	lr

080142f8 <_ZNSt11_Tuple_implILj0EJP33TfLiteEmbeddingLookupSparseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80142f8:	b580      	push	{r7, lr}
 80142fa:	b082      	sub	sp, #8
 80142fc:	af00      	add	r7, sp, #0
 80142fe:	6078      	str	r0, [r7, #4]
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	3304      	adds	r3, #4
 8014304:	4618      	mov	r0, r3
 8014306:	f000 fc42 	bl	8014b8e <_ZNSt10_Head_baseILj0EP33TfLiteEmbeddingLookupSparseParamsLb0EE7_M_headERKS2_>
 801430a:	4603      	mov	r3, r0
 801430c:	4618      	mov	r0, r3
 801430e:	3708      	adds	r7, #8
 8014310:	46bd      	mov	sp, r7
 8014312:	bd80      	pop	{r7, pc}

08014314 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8014314:	b480      	push	{r7}
 8014316:	b083      	sub	sp, #12
 8014318:	af00      	add	r7, sp, #0
 801431a:	6078      	str	r0, [r7, #4]
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	4618      	mov	r0, r3
 8014320:	370c      	adds	r7, #12
 8014322:	46bd      	mov	sp, r7
 8014324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014328:	4770      	bx	lr

0801432a <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801432a:	b580      	push	{r7, lr}
 801432c:	b082      	sub	sp, #8
 801432e:	af00      	add	r7, sp, #0
 8014330:	6078      	str	r0, [r7, #4]
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	3304      	adds	r3, #4
 8014336:	4618      	mov	r0, r3
 8014338:	f000 fc34 	bl	8014ba4 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERKS2_>
 801433c:	4603      	mov	r3, r0
 801433e:	4618      	mov	r0, r3
 8014340:	3708      	adds	r7, #8
 8014342:	46bd      	mov	sp, r7
 8014344:	bd80      	pop	{r7, pc}

08014346 <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8014346:	b480      	push	{r7}
 8014348:	b083      	sub	sp, #12
 801434a:	af00      	add	r7, sp, #0
 801434c:	6078      	str	r0, [r7, #4]
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	4618      	mov	r0, r3
 8014352:	370c      	adds	r7, #12
 8014354:	46bd      	mov	sp, r7
 8014356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801435a:	4770      	bx	lr

0801435c <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801435c:	b580      	push	{r7, lr}
 801435e:	b082      	sub	sp, #8
 8014360:	af00      	add	r7, sp, #0
 8014362:	6078      	str	r0, [r7, #4]
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	3304      	adds	r3, #4
 8014368:	4618      	mov	r0, r3
 801436a:	f000 fc26 	bl	8014bba <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERKS2_>
 801436e:	4603      	mov	r3, r0
 8014370:	4618      	mov	r0, r3
 8014372:	3708      	adds	r7, #8
 8014374:	46bd      	mov	sp, r7
 8014376:	bd80      	pop	{r7, pc}

08014378 <_ZNSt10_Head_baseILj0EP25TfLiteConcatenationParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8014378:	b480      	push	{r7}
 801437a:	b083      	sub	sp, #12
 801437c:	af00      	add	r7, sp, #0
 801437e:	6078      	str	r0, [r7, #4]
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	4618      	mov	r0, r3
 8014384:	370c      	adds	r7, #12
 8014386:	46bd      	mov	sp, r7
 8014388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801438c:	4770      	bx	lr

0801438e <_ZNSt11_Tuple_implILj0EJP25TfLiteConcatenationParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801438e:	b580      	push	{r7, lr}
 8014390:	b082      	sub	sp, #8
 8014392:	af00      	add	r7, sp, #0
 8014394:	6078      	str	r0, [r7, #4]
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	3304      	adds	r3, #4
 801439a:	4618      	mov	r0, r3
 801439c:	f000 fc18 	bl	8014bd0 <_ZNSt10_Head_baseILj0EP25TfLiteConcatenationParamsLb0EE7_M_headERKS2_>
 80143a0:	4603      	mov	r3, r0
 80143a2:	4618      	mov	r0, r3
 80143a4:	3708      	adds	r7, #8
 80143a6:	46bd      	mov	sp, r7
 80143a8:	bd80      	pop	{r7, pc}

080143aa <_ZNSt10_Head_baseILj0EP15TfLiteMulParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80143aa:	b480      	push	{r7}
 80143ac:	b083      	sub	sp, #12
 80143ae:	af00      	add	r7, sp, #0
 80143b0:	6078      	str	r0, [r7, #4]
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	4618      	mov	r0, r3
 80143b6:	370c      	adds	r7, #12
 80143b8:	46bd      	mov	sp, r7
 80143ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143be:	4770      	bx	lr

080143c0 <_ZNSt11_Tuple_implILj0EJP15TfLiteMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80143c0:	b580      	push	{r7, lr}
 80143c2:	b082      	sub	sp, #8
 80143c4:	af00      	add	r7, sp, #0
 80143c6:	6078      	str	r0, [r7, #4]
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	3304      	adds	r3, #4
 80143cc:	4618      	mov	r0, r3
 80143ce:	f000 fc0a 	bl	8014be6 <_ZNSt10_Head_baseILj0EP15TfLiteMulParamsLb0EE7_M_headERKS2_>
 80143d2:	4603      	mov	r3, r0
 80143d4:	4618      	mov	r0, r3
 80143d6:	3708      	adds	r7, #8
 80143d8:	46bd      	mov	sp, r7
 80143da:	bd80      	pop	{r7, pc}

080143dc <_ZNSt10_Head_baseILj0EP15TfLiteAddParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80143dc:	b480      	push	{r7}
 80143de:	b083      	sub	sp, #12
 80143e0:	af00      	add	r7, sp, #0
 80143e2:	6078      	str	r0, [r7, #4]
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	4618      	mov	r0, r3
 80143e8:	370c      	adds	r7, #12
 80143ea:	46bd      	mov	sp, r7
 80143ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143f0:	4770      	bx	lr

080143f2 <_ZNSt11_Tuple_implILj0EJP15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80143f2:	b580      	push	{r7, lr}
 80143f4:	b082      	sub	sp, #8
 80143f6:	af00      	add	r7, sp, #0
 80143f8:	6078      	str	r0, [r7, #4]
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	3304      	adds	r3, #4
 80143fe:	4618      	mov	r0, r3
 8014400:	f000 fbfc 	bl	8014bfc <_ZNSt10_Head_baseILj0EP15TfLiteAddParamsLb0EE7_M_headERKS2_>
 8014404:	4603      	mov	r3, r0
 8014406:	4618      	mov	r0, r3
 8014408:	3708      	adds	r7, #8
 801440a:	46bd      	mov	sp, r7
 801440c:	bd80      	pop	{r7, pc}

0801440e <_ZNSt10_Head_baseILj0EP15TfLiteDivParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 801440e:	b480      	push	{r7}
 8014410:	b083      	sub	sp, #12
 8014412:	af00      	add	r7, sp, #0
 8014414:	6078      	str	r0, [r7, #4]
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	4618      	mov	r0, r3
 801441a:	370c      	adds	r7, #12
 801441c:	46bd      	mov	sp, r7
 801441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014422:	4770      	bx	lr

08014424 <_ZNSt11_Tuple_implILj0EJP15TfLiteDivParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8014424:	b580      	push	{r7, lr}
 8014426:	b082      	sub	sp, #8
 8014428:	af00      	add	r7, sp, #0
 801442a:	6078      	str	r0, [r7, #4]
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	3304      	adds	r3, #4
 8014430:	4618      	mov	r0, r3
 8014432:	f000 fbee 	bl	8014c12 <_ZNSt10_Head_baseILj0EP15TfLiteDivParamsLb0EE7_M_headERKS2_>
 8014436:	4603      	mov	r3, r0
 8014438:	4618      	mov	r0, r3
 801443a:	3708      	adds	r7, #8
 801443c:	46bd      	mov	sp, r7
 801443e:	bd80      	pop	{r7, pc}

08014440 <_ZNSt10_Head_baseILj0EP15TfLiteSubParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8014440:	b480      	push	{r7}
 8014442:	b083      	sub	sp, #12
 8014444:	af00      	add	r7, sp, #0
 8014446:	6078      	str	r0, [r7, #4]
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	4618      	mov	r0, r3
 801444c:	370c      	adds	r7, #12
 801444e:	46bd      	mov	sp, r7
 8014450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014454:	4770      	bx	lr

08014456 <_ZNSt11_Tuple_implILj0EJP15TfLiteSubParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8014456:	b580      	push	{r7, lr}
 8014458:	b082      	sub	sp, #8
 801445a:	af00      	add	r7, sp, #0
 801445c:	6078      	str	r0, [r7, #4]
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	3304      	adds	r3, #4
 8014462:	4618      	mov	r0, r3
 8014464:	f000 fbe0 	bl	8014c28 <_ZNSt10_Head_baseILj0EP15TfLiteSubParamsLb0EE7_M_headERKS2_>
 8014468:	4603      	mov	r3, r0
 801446a:	4618      	mov	r0, r3
 801446c:	3708      	adds	r7, #8
 801446e:	46bd      	mov	sp, r7
 8014470:	bd80      	pop	{r7, pc}

08014472 <_ZNSt10_Head_baseILj0EP18TfLiteL2NormParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8014472:	b480      	push	{r7}
 8014474:	b083      	sub	sp, #12
 8014476:	af00      	add	r7, sp, #0
 8014478:	6078      	str	r0, [r7, #4]
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	4618      	mov	r0, r3
 801447e:	370c      	adds	r7, #12
 8014480:	46bd      	mov	sp, r7
 8014482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014486:	4770      	bx	lr

08014488 <_ZNSt11_Tuple_implILj0EJP18TfLiteL2NormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8014488:	b580      	push	{r7, lr}
 801448a:	b082      	sub	sp, #8
 801448c:	af00      	add	r7, sp, #0
 801448e:	6078      	str	r0, [r7, #4]
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	3304      	adds	r3, #4
 8014494:	4618      	mov	r0, r3
 8014496:	f000 fbd2 	bl	8014c3e <_ZNSt10_Head_baseILj0EP18TfLiteL2NormParamsLb0EE7_M_headERKS2_>
 801449a:	4603      	mov	r3, r0
 801449c:	4618      	mov	r0, r3
 801449e:	3708      	adds	r7, #8
 80144a0:	46bd      	mov	sp, r7
 80144a2:	bd80      	pop	{r7, pc}

080144a4 <_ZNSt10_Head_baseILj0EP29TfLiteLocalResponseNormParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80144a4:	b480      	push	{r7}
 80144a6:	b083      	sub	sp, #12
 80144a8:	af00      	add	r7, sp, #0
 80144aa:	6078      	str	r0, [r7, #4]
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	4618      	mov	r0, r3
 80144b0:	370c      	adds	r7, #12
 80144b2:	46bd      	mov	sp, r7
 80144b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144b8:	4770      	bx	lr

080144ba <_ZNSt11_Tuple_implILj0EJP29TfLiteLocalResponseNormParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80144ba:	b580      	push	{r7, lr}
 80144bc:	b082      	sub	sp, #8
 80144be:	af00      	add	r7, sp, #0
 80144c0:	6078      	str	r0, [r7, #4]
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	3304      	adds	r3, #4
 80144c6:	4618      	mov	r0, r3
 80144c8:	f000 fbc4 	bl	8014c54 <_ZNSt10_Head_baseILj0EP29TfLiteLocalResponseNormParamsLb0EE7_M_headERKS2_>
 80144cc:	4603      	mov	r3, r0
 80144ce:	4618      	mov	r0, r3
 80144d0:	3708      	adds	r7, #8
 80144d2:	46bd      	mov	sp, r7
 80144d4:	bd80      	pop	{r7, pc}

080144d6 <_ZNSt10_Head_baseILj0EP16TfLiteLSTMParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80144d6:	b480      	push	{r7}
 80144d8:	b083      	sub	sp, #12
 80144da:	af00      	add	r7, sp, #0
 80144dc:	6078      	str	r0, [r7, #4]
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	4618      	mov	r0, r3
 80144e2:	370c      	adds	r7, #12
 80144e4:	46bd      	mov	sp, r7
 80144e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ea:	4770      	bx	lr

080144ec <_ZNSt11_Tuple_implILj0EJP16TfLiteLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80144ec:	b580      	push	{r7, lr}
 80144ee:	b082      	sub	sp, #8
 80144f0:	af00      	add	r7, sp, #0
 80144f2:	6078      	str	r0, [r7, #4]
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	3304      	adds	r3, #4
 80144f8:	4618      	mov	r0, r3
 80144fa:	f000 fbb6 	bl	8014c6a <_ZNSt10_Head_baseILj0EP16TfLiteLSTMParamsLb0EE7_M_headERKS2_>
 80144fe:	4603      	mov	r3, r0
 8014500:	4618      	mov	r0, r3
 8014502:	3708      	adds	r7, #8
 8014504:	46bd      	mov	sp, r7
 8014506:	bd80      	pop	{r7, pc}

08014508 <_ZNSt10_Head_baseILj0EP38TfLiteUnidirectionalSequenceLSTMParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8014508:	b480      	push	{r7}
 801450a:	b083      	sub	sp, #12
 801450c:	af00      	add	r7, sp, #0
 801450e:	6078      	str	r0, [r7, #4]
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	4618      	mov	r0, r3
 8014514:	370c      	adds	r7, #12
 8014516:	46bd      	mov	sp, r7
 8014518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801451c:	4770      	bx	lr

0801451e <_ZNSt11_Tuple_implILj0EJP38TfLiteUnidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801451e:	b580      	push	{r7, lr}
 8014520:	b082      	sub	sp, #8
 8014522:	af00      	add	r7, sp, #0
 8014524:	6078      	str	r0, [r7, #4]
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	3304      	adds	r3, #4
 801452a:	4618      	mov	r0, r3
 801452c:	f000 fba8 	bl	8014c80 <_ZNSt10_Head_baseILj0EP38TfLiteUnidirectionalSequenceLSTMParamsLb0EE7_M_headERKS2_>
 8014530:	4603      	mov	r3, r0
 8014532:	4618      	mov	r0, r3
 8014534:	3708      	adds	r7, #8
 8014536:	46bd      	mov	sp, r7
 8014538:	bd80      	pop	{r7, pc}

0801453a <_ZNSt10_Head_baseILj0EP37TfLiteBidirectionalSequenceLSTMParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 801453a:	b480      	push	{r7}
 801453c:	b083      	sub	sp, #12
 801453e:	af00      	add	r7, sp, #0
 8014540:	6078      	str	r0, [r7, #4]
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	4618      	mov	r0, r3
 8014546:	370c      	adds	r7, #12
 8014548:	46bd      	mov	sp, r7
 801454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801454e:	4770      	bx	lr

08014550 <_ZNSt11_Tuple_implILj0EJP37TfLiteBidirectionalSequenceLSTMParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8014550:	b580      	push	{r7, lr}
 8014552:	b082      	sub	sp, #8
 8014554:	af00      	add	r7, sp, #0
 8014556:	6078      	str	r0, [r7, #4]
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	3304      	adds	r3, #4
 801455c:	4618      	mov	r0, r3
 801455e:	f000 fb9a 	bl	8014c96 <_ZNSt10_Head_baseILj0EP37TfLiteBidirectionalSequenceLSTMParamsLb0EE7_M_headERKS2_>
 8014562:	4603      	mov	r3, r0
 8014564:	4618      	mov	r0, r3
 8014566:	3708      	adds	r7, #8
 8014568:	46bd      	mov	sp, r7
 801456a:	bd80      	pop	{r7, pc}

0801456c <_ZNSt10_Head_baseILj0EP26TfLiteResizeBilinearParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 801456c:	b480      	push	{r7}
 801456e:	b083      	sub	sp, #12
 8014570:	af00      	add	r7, sp, #0
 8014572:	6078      	str	r0, [r7, #4]
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	4618      	mov	r0, r3
 8014578:	370c      	adds	r7, #12
 801457a:	46bd      	mov	sp, r7
 801457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014580:	4770      	bx	lr

08014582 <_ZNSt11_Tuple_implILj0EJP26TfLiteResizeBilinearParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8014582:	b580      	push	{r7, lr}
 8014584:	b082      	sub	sp, #8
 8014586:	af00      	add	r7, sp, #0
 8014588:	6078      	str	r0, [r7, #4]
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	3304      	adds	r3, #4
 801458e:	4618      	mov	r0, r3
 8014590:	f000 fb8c 	bl	8014cac <_ZNSt10_Head_baseILj0EP26TfLiteResizeBilinearParamsLb0EE7_M_headERKS2_>
 8014594:	4603      	mov	r3, r0
 8014596:	4618      	mov	r0, r3
 8014598:	3708      	adds	r7, #8
 801459a:	46bd      	mov	sp, r7
 801459c:	bd80      	pop	{r7, pc}

0801459e <_ZNSt10_Head_baseILj0EP33TfLiteResizeNearestNeighborParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 801459e:	b480      	push	{r7}
 80145a0:	b083      	sub	sp, #12
 80145a2:	af00      	add	r7, sp, #0
 80145a4:	6078      	str	r0, [r7, #4]
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	4618      	mov	r0, r3
 80145aa:	370c      	adds	r7, #12
 80145ac:	46bd      	mov	sp, r7
 80145ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145b2:	4770      	bx	lr

080145b4 <_ZNSt11_Tuple_implILj0EJP33TfLiteResizeNearestNeighborParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80145b4:	b580      	push	{r7, lr}
 80145b6:	b082      	sub	sp, #8
 80145b8:	af00      	add	r7, sp, #0
 80145ba:	6078      	str	r0, [r7, #4]
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	3304      	adds	r3, #4
 80145c0:	4618      	mov	r0, r3
 80145c2:	f000 fb7e 	bl	8014cc2 <_ZNSt10_Head_baseILj0EP33TfLiteResizeNearestNeighborParamsLb0EE7_M_headERKS2_>
 80145c6:	4603      	mov	r3, r0
 80145c8:	4618      	mov	r0, r3
 80145ca:	3708      	adds	r7, #8
 80145cc:	46bd      	mov	sp, r7
 80145ce:	bd80      	pop	{r7, pc}

080145d0 <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80145d0:	b480      	push	{r7}
 80145d2:	b083      	sub	sp, #12
 80145d4:	af00      	add	r7, sp, #0
 80145d6:	6078      	str	r0, [r7, #4]
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	4618      	mov	r0, r3
 80145dc:	370c      	adds	r7, #12
 80145de:	46bd      	mov	sp, r7
 80145e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145e4:	4770      	bx	lr

080145e6 <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80145e6:	b580      	push	{r7, lr}
 80145e8:	b082      	sub	sp, #8
 80145ea:	af00      	add	r7, sp, #0
 80145ec:	6078      	str	r0, [r7, #4]
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	3304      	adds	r3, #4
 80145f2:	4618      	mov	r0, r3
 80145f4:	f000 fb70 	bl	8014cd8 <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERKS2_>
 80145f8:	4603      	mov	r3, r0
 80145fa:	4618      	mov	r0, r3
 80145fc:	3708      	adds	r7, #8
 80145fe:	46bd      	mov	sp, r7
 8014600:	bd80      	pop	{r7, pc}

08014602 <_ZNSt10_Head_baseILj0EP20TfLiteSkipGramParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8014602:	b480      	push	{r7}
 8014604:	b083      	sub	sp, #12
 8014606:	af00      	add	r7, sp, #0
 8014608:	6078      	str	r0, [r7, #4]
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	4618      	mov	r0, r3
 801460e:	370c      	adds	r7, #12
 8014610:	46bd      	mov	sp, r7
 8014612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014616:	4770      	bx	lr

08014618 <_ZNSt11_Tuple_implILj0EJP20TfLiteSkipGramParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8014618:	b580      	push	{r7, lr}
 801461a:	b082      	sub	sp, #8
 801461c:	af00      	add	r7, sp, #0
 801461e:	6078      	str	r0, [r7, #4]
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	3304      	adds	r3, #4
 8014624:	4618      	mov	r0, r3
 8014626:	f000 fb62 	bl	8014cee <_ZNSt10_Head_baseILj0EP20TfLiteSkipGramParamsLb0EE7_M_headERKS2_>
 801462a:	4603      	mov	r3, r0
 801462c:	4618      	mov	r0, r3
 801462e:	3708      	adds	r7, #8
 8014630:	46bd      	mov	sp, r7
 8014632:	bd80      	pop	{r7, pc}

08014634 <_ZNSt10_Head_baseILj0EP24TfLiteSpaceToDepthParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8014634:	b480      	push	{r7}
 8014636:	b083      	sub	sp, #12
 8014638:	af00      	add	r7, sp, #0
 801463a:	6078      	str	r0, [r7, #4]
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	4618      	mov	r0, r3
 8014640:	370c      	adds	r7, #12
 8014642:	46bd      	mov	sp, r7
 8014644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014648:	4770      	bx	lr

0801464a <_ZNSt11_Tuple_implILj0EJP24TfLiteSpaceToDepthParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801464a:	b580      	push	{r7, lr}
 801464c:	b082      	sub	sp, #8
 801464e:	af00      	add	r7, sp, #0
 8014650:	6078      	str	r0, [r7, #4]
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	3304      	adds	r3, #4
 8014656:	4618      	mov	r0, r3
 8014658:	f000 fb54 	bl	8014d04 <_ZNSt10_Head_baseILj0EP24TfLiteSpaceToDepthParamsLb0EE7_M_headERKS2_>
 801465c:	4603      	mov	r3, r0
 801465e:	4618      	mov	r0, r3
 8014660:	3708      	adds	r7, #8
 8014662:	46bd      	mov	sp, r7
 8014664:	bd80      	pop	{r7, pc}

08014666 <_ZNSt10_Head_baseILj0EP24TfLiteDepthToSpaceParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8014666:	b480      	push	{r7}
 8014668:	b083      	sub	sp, #12
 801466a:	af00      	add	r7, sp, #0
 801466c:	6078      	str	r0, [r7, #4]
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	4618      	mov	r0, r3
 8014672:	370c      	adds	r7, #12
 8014674:	46bd      	mov	sp, r7
 8014676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801467a:	4770      	bx	lr

0801467c <_ZNSt11_Tuple_implILj0EJP24TfLiteDepthToSpaceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801467c:	b580      	push	{r7, lr}
 801467e:	b082      	sub	sp, #8
 8014680:	af00      	add	r7, sp, #0
 8014682:	6078      	str	r0, [r7, #4]
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	3304      	adds	r3, #4
 8014688:	4618      	mov	r0, r3
 801468a:	f000 fb46 	bl	8014d1a <_ZNSt10_Head_baseILj0EP24TfLiteDepthToSpaceParamsLb0EE7_M_headERKS2_>
 801468e:	4603      	mov	r3, r0
 8014690:	4618      	mov	r0, r3
 8014692:	3708      	adds	r7, #8
 8014694:	46bd      	mov	sp, r7
 8014696:	bd80      	pop	{r7, pc}

08014698 <_ZNSt10_Head_baseILj0EP18TfLiteGatherParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8014698:	b480      	push	{r7}
 801469a:	b083      	sub	sp, #12
 801469c:	af00      	add	r7, sp, #0
 801469e:	6078      	str	r0, [r7, #4]
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	4618      	mov	r0, r3
 80146a4:	370c      	adds	r7, #12
 80146a6:	46bd      	mov	sp, r7
 80146a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ac:	4770      	bx	lr

080146ae <_ZNSt11_Tuple_implILj0EJP18TfLiteGatherParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80146ae:	b580      	push	{r7, lr}
 80146b0:	b082      	sub	sp, #8
 80146b2:	af00      	add	r7, sp, #0
 80146b4:	6078      	str	r0, [r7, #4]
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	3304      	adds	r3, #4
 80146ba:	4618      	mov	r0, r3
 80146bc:	f000 fb38 	bl	8014d30 <_ZNSt10_Head_baseILj0EP18TfLiteGatherParamsLb0EE7_M_headERKS2_>
 80146c0:	4603      	mov	r3, r0
 80146c2:	4618      	mov	r0, r3
 80146c4:	3708      	adds	r7, #8
 80146c6:	46bd      	mov	sp, r7
 80146c8:	bd80      	pop	{r7, pc}

080146ca <_ZNSt10_Head_baseILj0EP19TfLiteReducerParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80146ca:	b480      	push	{r7}
 80146cc:	b083      	sub	sp, #12
 80146ce:	af00      	add	r7, sp, #0
 80146d0:	6078      	str	r0, [r7, #4]
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	4618      	mov	r0, r3
 80146d6:	370c      	adds	r7, #12
 80146d8:	46bd      	mov	sp, r7
 80146da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146de:	4770      	bx	lr

080146e0 <_ZNSt11_Tuple_implILj0EJP19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80146e0:	b580      	push	{r7, lr}
 80146e2:	b082      	sub	sp, #8
 80146e4:	af00      	add	r7, sp, #0
 80146e6:	6078      	str	r0, [r7, #4]
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	3304      	adds	r3, #4
 80146ec:	4618      	mov	r0, r3
 80146ee:	f000 fb2a 	bl	8014d46 <_ZNSt10_Head_baseILj0EP19TfLiteReducerParamsLb0EE7_M_headERKS2_>
 80146f2:	4603      	mov	r3, r0
 80146f4:	4618      	mov	r0, r3
 80146f6:	3708      	adds	r7, #8
 80146f8:	46bd      	mov	sp, r7
 80146fa:	bd80      	pop	{r7, pc}

080146fc <_ZNSt10_Head_baseILj0EP17TfLiteSplitParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80146fc:	b480      	push	{r7}
 80146fe:	b083      	sub	sp, #12
 8014700:	af00      	add	r7, sp, #0
 8014702:	6078      	str	r0, [r7, #4]
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	4618      	mov	r0, r3
 8014708:	370c      	adds	r7, #12
 801470a:	46bd      	mov	sp, r7
 801470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014710:	4770      	bx	lr

08014712 <_ZNSt11_Tuple_implILj0EJP17TfLiteSplitParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8014712:	b580      	push	{r7, lr}
 8014714:	b082      	sub	sp, #8
 8014716:	af00      	add	r7, sp, #0
 8014718:	6078      	str	r0, [r7, #4]
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	3304      	adds	r3, #4
 801471e:	4618      	mov	r0, r3
 8014720:	f000 fb1c 	bl	8014d5c <_ZNSt10_Head_baseILj0EP17TfLiteSplitParamsLb0EE7_M_headERKS2_>
 8014724:	4603      	mov	r3, r0
 8014726:	4618      	mov	r0, r3
 8014728:	3708      	adds	r7, #8
 801472a:	46bd      	mov	sp, r7
 801472c:	bd80      	pop	{r7, pc}

0801472e <_ZNSt10_Head_baseILj0EP19TfLiteSqueezeParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 801472e:	b480      	push	{r7}
 8014730:	b083      	sub	sp, #12
 8014732:	af00      	add	r7, sp, #0
 8014734:	6078      	str	r0, [r7, #4]
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	4618      	mov	r0, r3
 801473a:	370c      	adds	r7, #12
 801473c:	46bd      	mov	sp, r7
 801473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014742:	4770      	bx	lr

08014744 <_ZNSt11_Tuple_implILj0EJP19TfLiteSqueezeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8014744:	b580      	push	{r7, lr}
 8014746:	b082      	sub	sp, #8
 8014748:	af00      	add	r7, sp, #0
 801474a:	6078      	str	r0, [r7, #4]
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	3304      	adds	r3, #4
 8014750:	4618      	mov	r0, r3
 8014752:	f000 fb0e 	bl	8014d72 <_ZNSt10_Head_baseILj0EP19TfLiteSqueezeParamsLb0EE7_M_headERKS2_>
 8014756:	4603      	mov	r3, r0
 8014758:	4618      	mov	r0, r3
 801475a:	3708      	adds	r7, #8
 801475c:	46bd      	mov	sp, r7
 801475e:	bd80      	pop	{r7, pc}

08014760 <_ZNSt10_Head_baseILj0EP24TfLiteStridedSliceParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8014760:	b480      	push	{r7}
 8014762:	b083      	sub	sp, #12
 8014764:	af00      	add	r7, sp, #0
 8014766:	6078      	str	r0, [r7, #4]
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	4618      	mov	r0, r3
 801476c:	370c      	adds	r7, #12
 801476e:	46bd      	mov	sp, r7
 8014770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014774:	4770      	bx	lr

08014776 <_ZNSt11_Tuple_implILj0EJP24TfLiteStridedSliceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8014776:	b580      	push	{r7, lr}
 8014778:	b082      	sub	sp, #8
 801477a:	af00      	add	r7, sp, #0
 801477c:	6078      	str	r0, [r7, #4]
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	3304      	adds	r3, #4
 8014782:	4618      	mov	r0, r3
 8014784:	f000 fb00 	bl	8014d88 <_ZNSt10_Head_baseILj0EP24TfLiteStridedSliceParamsLb0EE7_M_headERKS2_>
 8014788:	4603      	mov	r3, r0
 801478a:	4618      	mov	r0, r3
 801478c:	3708      	adds	r7, #8
 801478e:	46bd      	mov	sp, r7
 8014790:	bd80      	pop	{r7, pc}

08014792 <_ZNSt10_Head_baseILj0EP18TfLiteArgMaxParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8014792:	b480      	push	{r7}
 8014794:	b083      	sub	sp, #12
 8014796:	af00      	add	r7, sp, #0
 8014798:	6078      	str	r0, [r7, #4]
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	4618      	mov	r0, r3
 801479e:	370c      	adds	r7, #12
 80147a0:	46bd      	mov	sp, r7
 80147a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147a6:	4770      	bx	lr

080147a8 <_ZNSt11_Tuple_implILj0EJP18TfLiteArgMaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80147a8:	b580      	push	{r7, lr}
 80147aa:	b082      	sub	sp, #8
 80147ac:	af00      	add	r7, sp, #0
 80147ae:	6078      	str	r0, [r7, #4]
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	3304      	adds	r3, #4
 80147b4:	4618      	mov	r0, r3
 80147b6:	f000 faf2 	bl	8014d9e <_ZNSt10_Head_baseILj0EP18TfLiteArgMaxParamsLb0EE7_M_headERKS2_>
 80147ba:	4603      	mov	r3, r0
 80147bc:	4618      	mov	r0, r3
 80147be:	3708      	adds	r7, #8
 80147c0:	46bd      	mov	sp, r7
 80147c2:	bd80      	pop	{r7, pc}

080147c4 <_ZNSt10_Head_baseILj0EP18TfLiteArgMinParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80147c4:	b480      	push	{r7}
 80147c6:	b083      	sub	sp, #12
 80147c8:	af00      	add	r7, sp, #0
 80147ca:	6078      	str	r0, [r7, #4]
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	4618      	mov	r0, r3
 80147d0:	370c      	adds	r7, #12
 80147d2:	46bd      	mov	sp, r7
 80147d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147d8:	4770      	bx	lr

080147da <_ZNSt11_Tuple_implILj0EJP18TfLiteArgMinParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80147da:	b580      	push	{r7, lr}
 80147dc:	b082      	sub	sp, #8
 80147de:	af00      	add	r7, sp, #0
 80147e0:	6078      	str	r0, [r7, #4]
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	3304      	adds	r3, #4
 80147e6:	4618      	mov	r0, r3
 80147e8:	f000 fae4 	bl	8014db4 <_ZNSt10_Head_baseILj0EP18TfLiteArgMinParamsLb0EE7_M_headERKS2_>
 80147ec:	4603      	mov	r3, r0
 80147ee:	4618      	mov	r0, r3
 80147f0:	3708      	adds	r7, #8
 80147f2:	46bd      	mov	sp, r7
 80147f4:	bd80      	pop	{r7, pc}

080147f6 <_ZNSt10_Head_baseILj0EP25TfLiteTransposeConvParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80147f6:	b480      	push	{r7}
 80147f8:	b083      	sub	sp, #12
 80147fa:	af00      	add	r7, sp, #0
 80147fc:	6078      	str	r0, [r7, #4]
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	4618      	mov	r0, r3
 8014802:	370c      	adds	r7, #12
 8014804:	46bd      	mov	sp, r7
 8014806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801480a:	4770      	bx	lr

0801480c <_ZNSt11_Tuple_implILj0EJP25TfLiteTransposeConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801480c:	b580      	push	{r7, lr}
 801480e:	b082      	sub	sp, #8
 8014810:	af00      	add	r7, sp, #0
 8014812:	6078      	str	r0, [r7, #4]
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	3304      	adds	r3, #4
 8014818:	4618      	mov	r0, r3
 801481a:	f000 fad6 	bl	8014dca <_ZNSt10_Head_baseILj0EP25TfLiteTransposeConvParamsLb0EE7_M_headERKS2_>
 801481e:	4603      	mov	r3, r0
 8014820:	4618      	mov	r0, r3
 8014822:	3708      	adds	r7, #8
 8014824:	46bd      	mov	sp, r7
 8014826:	bd80      	pop	{r7, pc}

08014828 <_ZNSt10_Head_baseILj0EP25TfLiteSparseToDenseParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8014828:	b480      	push	{r7}
 801482a:	b083      	sub	sp, #12
 801482c:	af00      	add	r7, sp, #0
 801482e:	6078      	str	r0, [r7, #4]
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	4618      	mov	r0, r3
 8014834:	370c      	adds	r7, #12
 8014836:	46bd      	mov	sp, r7
 8014838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801483c:	4770      	bx	lr

0801483e <_ZNSt11_Tuple_implILj0EJP25TfLiteSparseToDenseParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801483e:	b580      	push	{r7, lr}
 8014840:	b082      	sub	sp, #8
 8014842:	af00      	add	r7, sp, #0
 8014844:	6078      	str	r0, [r7, #4]
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	3304      	adds	r3, #4
 801484a:	4618      	mov	r0, r3
 801484c:	f000 fac8 	bl	8014de0 <_ZNSt10_Head_baseILj0EP25TfLiteSparseToDenseParamsLb0EE7_M_headERKS2_>
 8014850:	4603      	mov	r3, r0
 8014852:	4618      	mov	r0, r3
 8014854:	3708      	adds	r7, #8
 8014856:	46bd      	mov	sp, r7
 8014858:	bd80      	pop	{r7, pc}

0801485a <_ZNSt10_Head_baseILj0EP17TfLiteShapeParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 801485a:	b480      	push	{r7}
 801485c:	b083      	sub	sp, #12
 801485e:	af00      	add	r7, sp, #0
 8014860:	6078      	str	r0, [r7, #4]
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	4618      	mov	r0, r3
 8014866:	370c      	adds	r7, #12
 8014868:	46bd      	mov	sp, r7
 801486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801486e:	4770      	bx	lr

08014870 <_ZNSt11_Tuple_implILj0EJP17TfLiteShapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8014870:	b580      	push	{r7, lr}
 8014872:	b082      	sub	sp, #8
 8014874:	af00      	add	r7, sp, #0
 8014876:	6078      	str	r0, [r7, #4]
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	3304      	adds	r3, #4
 801487c:	4618      	mov	r0, r3
 801487e:	f000 faba 	bl	8014df6 <_ZNSt10_Head_baseILj0EP17TfLiteShapeParamsLb0EE7_M_headERKS2_>
 8014882:	4603      	mov	r3, r0
 8014884:	4618      	mov	r0, r3
 8014886:	3708      	adds	r7, #8
 8014888:	46bd      	mov	sp, r7
 801488a:	bd80      	pop	{r7, pc}

0801488c <_ZNSt10_Head_baseILj0EP16TfLitePackParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 801488c:	b480      	push	{r7}
 801488e:	b083      	sub	sp, #12
 8014890:	af00      	add	r7, sp, #0
 8014892:	6078      	str	r0, [r7, #4]
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	4618      	mov	r0, r3
 8014898:	370c      	adds	r7, #12
 801489a:	46bd      	mov	sp, r7
 801489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148a0:	4770      	bx	lr

080148a2 <_ZNSt11_Tuple_implILj0EJP16TfLitePackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80148a2:	b580      	push	{r7, lr}
 80148a4:	b082      	sub	sp, #8
 80148a6:	af00      	add	r7, sp, #0
 80148a8:	6078      	str	r0, [r7, #4]
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	3304      	adds	r3, #4
 80148ae:	4618      	mov	r0, r3
 80148b0:	f000 faac 	bl	8014e0c <_ZNSt10_Head_baseILj0EP16TfLitePackParamsLb0EE7_M_headERKS2_>
 80148b4:	4603      	mov	r3, r0
 80148b6:	4618      	mov	r0, r3
 80148b8:	3708      	adds	r7, #8
 80148ba:	46bd      	mov	sp, r7
 80148bc:	bd80      	pop	{r7, pc}

080148be <_ZNSt10_Head_baseILj0EP21TfLiteFakeQuantParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80148be:	b480      	push	{r7}
 80148c0:	b083      	sub	sp, #12
 80148c2:	af00      	add	r7, sp, #0
 80148c4:	6078      	str	r0, [r7, #4]
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	4618      	mov	r0, r3
 80148ca:	370c      	adds	r7, #12
 80148cc:	46bd      	mov	sp, r7
 80148ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148d2:	4770      	bx	lr

080148d4 <_ZNSt11_Tuple_implILj0EJP21TfLiteFakeQuantParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80148d4:	b580      	push	{r7, lr}
 80148d6:	b082      	sub	sp, #8
 80148d8:	af00      	add	r7, sp, #0
 80148da:	6078      	str	r0, [r7, #4]
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	3304      	adds	r3, #4
 80148e0:	4618      	mov	r0, r3
 80148e2:	f000 fa9e 	bl	8014e22 <_ZNSt10_Head_baseILj0EP21TfLiteFakeQuantParamsLb0EE7_M_headERKS2_>
 80148e6:	4603      	mov	r3, r0
 80148e8:	4618      	mov	r0, r3
 80148ea:	3708      	adds	r7, #8
 80148ec:	46bd      	mov	sp, r7
 80148ee:	bd80      	pop	{r7, pc}

080148f0 <_ZNSt10_Head_baseILj0EP18TfLiteOneHotParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80148f0:	b480      	push	{r7}
 80148f2:	b083      	sub	sp, #12
 80148f4:	af00      	add	r7, sp, #0
 80148f6:	6078      	str	r0, [r7, #4]
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	4618      	mov	r0, r3
 80148fc:	370c      	adds	r7, #12
 80148fe:	46bd      	mov	sp, r7
 8014900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014904:	4770      	bx	lr

08014906 <_ZNSt11_Tuple_implILj0EJP18TfLiteOneHotParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8014906:	b580      	push	{r7, lr}
 8014908:	b082      	sub	sp, #8
 801490a:	af00      	add	r7, sp, #0
 801490c:	6078      	str	r0, [r7, #4]
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	3304      	adds	r3, #4
 8014912:	4618      	mov	r0, r3
 8014914:	f000 fa90 	bl	8014e38 <_ZNSt10_Head_baseILj0EP18TfLiteOneHotParamsLb0EE7_M_headERKS2_>
 8014918:	4603      	mov	r3, r0
 801491a:	4618      	mov	r0, r3
 801491c:	3708      	adds	r7, #8
 801491e:	46bd      	mov	sp, r7
 8014920:	bd80      	pop	{r7, pc}

08014922 <_ZNSt10_Head_baseILj0EP18TfLiteUnpackParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8014922:	b480      	push	{r7}
 8014924:	b083      	sub	sp, #12
 8014926:	af00      	add	r7, sp, #0
 8014928:	6078      	str	r0, [r7, #4]
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	4618      	mov	r0, r3
 801492e:	370c      	adds	r7, #12
 8014930:	46bd      	mov	sp, r7
 8014932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014936:	4770      	bx	lr

08014938 <_ZNSt11_Tuple_implILj0EJP18TfLiteUnpackParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8014938:	b580      	push	{r7, lr}
 801493a:	b082      	sub	sp, #8
 801493c:	af00      	add	r7, sp, #0
 801493e:	6078      	str	r0, [r7, #4]
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	3304      	adds	r3, #4
 8014944:	4618      	mov	r0, r3
 8014946:	f000 fa82 	bl	8014e4e <_ZNSt10_Head_baseILj0EP18TfLiteUnpackParamsLb0EE7_M_headERKS2_>
 801494a:	4603      	mov	r3, r0
 801494c:	4618      	mov	r0, r3
 801494e:	3708      	adds	r7, #8
 8014950:	46bd      	mov	sp, r7
 8014952:	bd80      	pop	{r7, pc}

08014954 <_ZNSt10_Head_baseILj0EP21TfLiteLeakyReluParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8014954:	b480      	push	{r7}
 8014956:	b083      	sub	sp, #12
 8014958:	af00      	add	r7, sp, #0
 801495a:	6078      	str	r0, [r7, #4]
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	4618      	mov	r0, r3
 8014960:	370c      	adds	r7, #12
 8014962:	46bd      	mov	sp, r7
 8014964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014968:	4770      	bx	lr

0801496a <_ZNSt11_Tuple_implILj0EJP21TfLiteLeakyReluParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801496a:	b580      	push	{r7, lr}
 801496c:	b082      	sub	sp, #8
 801496e:	af00      	add	r7, sp, #0
 8014970:	6078      	str	r0, [r7, #4]
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	3304      	adds	r3, #4
 8014976:	4618      	mov	r0, r3
 8014978:	f000 fa74 	bl	8014e64 <_ZNSt10_Head_baseILj0EP21TfLiteLeakyReluParamsLb0EE7_M_headERKS2_>
 801497c:	4603      	mov	r3, r0
 801497e:	4618      	mov	r0, r3
 8014980:	3708      	adds	r7, #8
 8014982:	46bd      	mov	sp, r7
 8014984:	bd80      	pop	{r7, pc}

08014986 <_ZNSt10_Head_baseILj0EP25TfLiteMirrorPaddingParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8014986:	b480      	push	{r7}
 8014988:	b083      	sub	sp, #12
 801498a:	af00      	add	r7, sp, #0
 801498c:	6078      	str	r0, [r7, #4]
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	4618      	mov	r0, r3
 8014992:	370c      	adds	r7, #12
 8014994:	46bd      	mov	sp, r7
 8014996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801499a:	4770      	bx	lr

0801499c <_ZNSt11_Tuple_implILj0EJP25TfLiteMirrorPaddingParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801499c:	b580      	push	{r7, lr}
 801499e:	b082      	sub	sp, #8
 80149a0:	af00      	add	r7, sp, #0
 80149a2:	6078      	str	r0, [r7, #4]
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	3304      	adds	r3, #4
 80149a8:	4618      	mov	r0, r3
 80149aa:	f000 fa66 	bl	8014e7a <_ZNSt10_Head_baseILj0EP25TfLiteMirrorPaddingParamsLb0EE7_M_headERKS2_>
 80149ae:	4603      	mov	r3, r0
 80149b0:	4618      	mov	r0, r3
 80149b2:	3708      	adds	r7, #8
 80149b4:	46bd      	mov	sp, r7
 80149b6:	bd80      	pop	{r7, pc}

080149b8 <_ZNSt10_Head_baseILj0EP18TfLiteUniqueParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80149b8:	b480      	push	{r7}
 80149ba:	b083      	sub	sp, #12
 80149bc:	af00      	add	r7, sp, #0
 80149be:	6078      	str	r0, [r7, #4]
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	4618      	mov	r0, r3
 80149c4:	370c      	adds	r7, #12
 80149c6:	46bd      	mov	sp, r7
 80149c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149cc:	4770      	bx	lr

080149ce <_ZNSt11_Tuple_implILj0EJP18TfLiteUniqueParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80149ce:	b580      	push	{r7, lr}
 80149d0:	b082      	sub	sp, #8
 80149d2:	af00      	add	r7, sp, #0
 80149d4:	6078      	str	r0, [r7, #4]
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	3304      	adds	r3, #4
 80149da:	4618      	mov	r0, r3
 80149dc:	f000 fa58 	bl	8014e90 <_ZNSt10_Head_baseILj0EP18TfLiteUniqueParamsLb0EE7_M_headERKS2_>
 80149e0:	4603      	mov	r3, r0
 80149e2:	4618      	mov	r0, r3
 80149e4:	3708      	adds	r7, #8
 80149e6:	46bd      	mov	sp, r7
 80149e8:	bd80      	pop	{r7, pc}

080149ea <_ZNSt10_Head_baseILj0EP27TfLiteReverseSequenceParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80149ea:	b480      	push	{r7}
 80149ec:	b083      	sub	sp, #12
 80149ee:	af00      	add	r7, sp, #0
 80149f0:	6078      	str	r0, [r7, #4]
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	4618      	mov	r0, r3
 80149f6:	370c      	adds	r7, #12
 80149f8:	46bd      	mov	sp, r7
 80149fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149fe:	4770      	bx	lr

08014a00 <_ZNSt11_Tuple_implILj0EJP27TfLiteReverseSequenceParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8014a00:	b580      	push	{r7, lr}
 8014a02:	b082      	sub	sp, #8
 8014a04:	af00      	add	r7, sp, #0
 8014a06:	6078      	str	r0, [r7, #4]
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	3304      	adds	r3, #4
 8014a0c:	4618      	mov	r0, r3
 8014a0e:	f000 fa4a 	bl	8014ea6 <_ZNSt10_Head_baseILj0EP27TfLiteReverseSequenceParamsLb0EE7_M_headERKS2_>
 8014a12:	4603      	mov	r3, r0
 8014a14:	4618      	mov	r0, r3
 8014a16:	3708      	adds	r7, #8
 8014a18:	46bd      	mov	sp, r7
 8014a1a:	bd80      	pop	{r7, pc}

08014a1c <_ZNSt10_Head_baseILj0EP14TfLiteIfParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8014a1c:	b480      	push	{r7}
 8014a1e:	b083      	sub	sp, #12
 8014a20:	af00      	add	r7, sp, #0
 8014a22:	6078      	str	r0, [r7, #4]
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	4618      	mov	r0, r3
 8014a28:	370c      	adds	r7, #12
 8014a2a:	46bd      	mov	sp, r7
 8014a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a30:	4770      	bx	lr

08014a32 <_ZNSt11_Tuple_implILj0EJP14TfLiteIfParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8014a32:	b580      	push	{r7, lr}
 8014a34:	b082      	sub	sp, #8
 8014a36:	af00      	add	r7, sp, #0
 8014a38:	6078      	str	r0, [r7, #4]
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	3304      	adds	r3, #4
 8014a3e:	4618      	mov	r0, r3
 8014a40:	f000 fa3c 	bl	8014ebc <_ZNSt10_Head_baseILj0EP14TfLiteIfParamsLb0EE7_M_headERKS2_>
 8014a44:	4603      	mov	r3, r0
 8014a46:	4618      	mov	r0, r3
 8014a48:	3708      	adds	r7, #8
 8014a4a:	46bd      	mov	sp, r7
 8014a4c:	bd80      	pop	{r7, pc}

08014a4e <_ZNSt10_Head_baseILj0EP17TfLiteWhileParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8014a4e:	b480      	push	{r7}
 8014a50:	b083      	sub	sp, #12
 8014a52:	af00      	add	r7, sp, #0
 8014a54:	6078      	str	r0, [r7, #4]
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	4618      	mov	r0, r3
 8014a5a:	370c      	adds	r7, #12
 8014a5c:	46bd      	mov	sp, r7
 8014a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a62:	4770      	bx	lr

08014a64 <_ZNSt11_Tuple_implILj0EJP17TfLiteWhileParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8014a64:	b580      	push	{r7, lr}
 8014a66:	b082      	sub	sp, #8
 8014a68:	af00      	add	r7, sp, #0
 8014a6a:	6078      	str	r0, [r7, #4]
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	3304      	adds	r3, #4
 8014a70:	4618      	mov	r0, r3
 8014a72:	f000 fa2e 	bl	8014ed2 <_ZNSt10_Head_baseILj0EP17TfLiteWhileParamsLb0EE7_M_headERKS2_>
 8014a76:	4603      	mov	r3, r0
 8014a78:	4618      	mov	r0, r3
 8014a7a:	3708      	adds	r7, #8
 8014a7c:	46bd      	mov	sp, r7
 8014a7e:	bd80      	pop	{r7, pc}

08014a80 <_ZNSt10_Head_baseILj0EP23TfLiteBatchMatMulParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8014a80:	b480      	push	{r7}
 8014a82:	b083      	sub	sp, #12
 8014a84:	af00      	add	r7, sp, #0
 8014a86:	6078      	str	r0, [r7, #4]
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	4618      	mov	r0, r3
 8014a8c:	370c      	adds	r7, #12
 8014a8e:	46bd      	mov	sp, r7
 8014a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a94:	4770      	bx	lr

08014a96 <_ZNSt11_Tuple_implILj0EJP23TfLiteBatchMatMulParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8014a96:	b580      	push	{r7, lr}
 8014a98:	b082      	sub	sp, #8
 8014a9a:	af00      	add	r7, sp, #0
 8014a9c:	6078      	str	r0, [r7, #4]
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	3304      	adds	r3, #4
 8014aa2:	4618      	mov	r0, r3
 8014aa4:	f000 fa20 	bl	8014ee8 <_ZNSt10_Head_baseILj0EP23TfLiteBatchMatMulParamsLb0EE7_M_headERKS2_>
 8014aa8:	4603      	mov	r3, r0
 8014aaa:	4618      	mov	r0, r3
 8014aac:	3708      	adds	r7, #8
 8014aae:	46bd      	mov	sp, r7
 8014ab0:	bd80      	pop	{r7, pc}

08014ab2 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8014ab2:	b480      	push	{r7}
 8014ab4:	b083      	sub	sp, #12
 8014ab6:	af00      	add	r7, sp, #0
 8014ab8:	6078      	str	r0, [r7, #4]
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	4618      	mov	r0, r3
 8014abe:	370c      	adds	r7, #12
 8014ac0:	46bd      	mov	sp, r7
 8014ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ac6:	4770      	bx	lr

08014ac8 <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8014ac8:	b480      	push	{r7}
 8014aca:	b083      	sub	sp, #12
 8014acc:	af00      	add	r7, sp, #0
 8014ace:	6078      	str	r0, [r7, #4]
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	4618      	mov	r0, r3
 8014ad4:	370c      	adds	r7, #12
 8014ad6:	46bd      	mov	sp, r7
 8014ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014adc:	4770      	bx	lr

08014ade <_ZNSt10_Head_baseILj0EP16TfLiteCastParamsLb0EE7_M_headERKS2_>:
 8014ade:	b480      	push	{r7}
 8014ae0:	b083      	sub	sp, #12
 8014ae2:	af00      	add	r7, sp, #0
 8014ae4:	6078      	str	r0, [r7, #4]
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	4618      	mov	r0, r3
 8014aea:	370c      	adds	r7, #12
 8014aec:	46bd      	mov	sp, r7
 8014aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014af2:	4770      	bx	lr

08014af4 <_ZNSt10_Head_baseILj0EP25TfLiteLSHProjectionParamsLb0EE7_M_headERKS2_>:
 8014af4:	b480      	push	{r7}
 8014af6:	b083      	sub	sp, #12
 8014af8:	af00      	add	r7, sp, #0
 8014afa:	6078      	str	r0, [r7, #4]
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	4618      	mov	r0, r3
 8014b00:	370c      	adds	r7, #12
 8014b02:	46bd      	mov	sp, r7
 8014b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b08:	4770      	bx	lr

08014b0a <_ZNSt10_Head_baseILj0EP16TfLitePoolParamsLb0EE7_M_headERKS2_>:
 8014b0a:	b480      	push	{r7}
 8014b0c:	b083      	sub	sp, #12
 8014b0e:	af00      	add	r7, sp, #0
 8014b10:	6078      	str	r0, [r7, #4]
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	4618      	mov	r0, r3
 8014b16:	370c      	adds	r7, #12
 8014b18:	46bd      	mov	sp, r7
 8014b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b1e:	4770      	bx	lr

08014b20 <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EE7_M_headERKS2_>:
 8014b20:	b480      	push	{r7}
 8014b22:	b083      	sub	sp, #12
 8014b24:	af00      	add	r7, sp, #0
 8014b26:	6078      	str	r0, [r7, #4]
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	4618      	mov	r0, r3
 8014b2c:	370c      	adds	r7, #12
 8014b2e:	46bd      	mov	sp, r7
 8014b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b34:	4770      	bx	lr

08014b36 <_ZNSt10_Head_baseILj0EP16TfLiteSVDFParamsLb0EE7_M_headERKS2_>:
 8014b36:	b480      	push	{r7}
 8014b38:	b083      	sub	sp, #12
 8014b3a:	af00      	add	r7, sp, #0
 8014b3c:	6078      	str	r0, [r7, #4]
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	4618      	mov	r0, r3
 8014b42:	370c      	adds	r7, #12
 8014b44:	46bd      	mov	sp, r7
 8014b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b4a:	4770      	bx	lr

08014b4c <_ZNSt10_Head_baseILj0EP23TfLiteSequenceRNNParamsLb0EE7_M_headERKS2_>:
 8014b4c:	b480      	push	{r7}
 8014b4e:	b083      	sub	sp, #12
 8014b50:	af00      	add	r7, sp, #0
 8014b52:	6078      	str	r0, [r7, #4]
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	4618      	mov	r0, r3
 8014b58:	370c      	adds	r7, #12
 8014b5a:	46bd      	mov	sp, r7
 8014b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b60:	4770      	bx	lr

08014b62 <_ZNSt10_Head_baseILj0EP36TfLiteBidirectionalSequenceRNNParamsLb0EE7_M_headERKS2_>:
 8014b62:	b480      	push	{r7}
 8014b64:	b083      	sub	sp, #12
 8014b66:	af00      	add	r7, sp, #0
 8014b68:	6078      	str	r0, [r7, #4]
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	4618      	mov	r0, r3
 8014b6e:	370c      	adds	r7, #12
 8014b70:	46bd      	mov	sp, r7
 8014b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b76:	4770      	bx	lr

08014b78 <_ZNSt10_Head_baseILj0EP15TfLiteRNNParamsLb0EE7_M_headERKS2_>:
 8014b78:	b480      	push	{r7}
 8014b7a:	b083      	sub	sp, #12
 8014b7c:	af00      	add	r7, sp, #0
 8014b7e:	6078      	str	r0, [r7, #4]
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	4618      	mov	r0, r3
 8014b84:	370c      	adds	r7, #12
 8014b86:	46bd      	mov	sp, r7
 8014b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b8c:	4770      	bx	lr

08014b8e <_ZNSt10_Head_baseILj0EP33TfLiteEmbeddingLookupSparseParamsLb0EE7_M_headERKS2_>:
 8014b8e:	b480      	push	{r7}
 8014b90:	b083      	sub	sp, #12
 8014b92:	af00      	add	r7, sp, #0
 8014b94:	6078      	str	r0, [r7, #4]
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	4618      	mov	r0, r3
 8014b9a:	370c      	adds	r7, #12
 8014b9c:	46bd      	mov	sp, r7
 8014b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ba2:	4770      	bx	lr

08014ba4 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERKS2_>:
 8014ba4:	b480      	push	{r7}
 8014ba6:	b083      	sub	sp, #12
 8014ba8:	af00      	add	r7, sp, #0
 8014baa:	6078      	str	r0, [r7, #4]
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	4618      	mov	r0, r3
 8014bb0:	370c      	adds	r7, #12
 8014bb2:	46bd      	mov	sp, r7
 8014bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bb8:	4770      	bx	lr

08014bba <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERKS2_>:
 8014bba:	b480      	push	{r7}
 8014bbc:	b083      	sub	sp, #12
 8014bbe:	af00      	add	r7, sp, #0
 8014bc0:	6078      	str	r0, [r7, #4]
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	4618      	mov	r0, r3
 8014bc6:	370c      	adds	r7, #12
 8014bc8:	46bd      	mov	sp, r7
 8014bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bce:	4770      	bx	lr

08014bd0 <_ZNSt10_Head_baseILj0EP25TfLiteConcatenationParamsLb0EE7_M_headERKS2_>:
 8014bd0:	b480      	push	{r7}
 8014bd2:	b083      	sub	sp, #12
 8014bd4:	af00      	add	r7, sp, #0
 8014bd6:	6078      	str	r0, [r7, #4]
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	4618      	mov	r0, r3
 8014bdc:	370c      	adds	r7, #12
 8014bde:	46bd      	mov	sp, r7
 8014be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014be4:	4770      	bx	lr

08014be6 <_ZNSt10_Head_baseILj0EP15TfLiteMulParamsLb0EE7_M_headERKS2_>:
 8014be6:	b480      	push	{r7}
 8014be8:	b083      	sub	sp, #12
 8014bea:	af00      	add	r7, sp, #0
 8014bec:	6078      	str	r0, [r7, #4]
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	4618      	mov	r0, r3
 8014bf2:	370c      	adds	r7, #12
 8014bf4:	46bd      	mov	sp, r7
 8014bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bfa:	4770      	bx	lr

08014bfc <_ZNSt10_Head_baseILj0EP15TfLiteAddParamsLb0EE7_M_headERKS2_>:
 8014bfc:	b480      	push	{r7}
 8014bfe:	b083      	sub	sp, #12
 8014c00:	af00      	add	r7, sp, #0
 8014c02:	6078      	str	r0, [r7, #4]
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	4618      	mov	r0, r3
 8014c08:	370c      	adds	r7, #12
 8014c0a:	46bd      	mov	sp, r7
 8014c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c10:	4770      	bx	lr

08014c12 <_ZNSt10_Head_baseILj0EP15TfLiteDivParamsLb0EE7_M_headERKS2_>:
 8014c12:	b480      	push	{r7}
 8014c14:	b083      	sub	sp, #12
 8014c16:	af00      	add	r7, sp, #0
 8014c18:	6078      	str	r0, [r7, #4]
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	4618      	mov	r0, r3
 8014c1e:	370c      	adds	r7, #12
 8014c20:	46bd      	mov	sp, r7
 8014c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c26:	4770      	bx	lr

08014c28 <_ZNSt10_Head_baseILj0EP15TfLiteSubParamsLb0EE7_M_headERKS2_>:
 8014c28:	b480      	push	{r7}
 8014c2a:	b083      	sub	sp, #12
 8014c2c:	af00      	add	r7, sp, #0
 8014c2e:	6078      	str	r0, [r7, #4]
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	4618      	mov	r0, r3
 8014c34:	370c      	adds	r7, #12
 8014c36:	46bd      	mov	sp, r7
 8014c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c3c:	4770      	bx	lr

08014c3e <_ZNSt10_Head_baseILj0EP18TfLiteL2NormParamsLb0EE7_M_headERKS2_>:
 8014c3e:	b480      	push	{r7}
 8014c40:	b083      	sub	sp, #12
 8014c42:	af00      	add	r7, sp, #0
 8014c44:	6078      	str	r0, [r7, #4]
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	4618      	mov	r0, r3
 8014c4a:	370c      	adds	r7, #12
 8014c4c:	46bd      	mov	sp, r7
 8014c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c52:	4770      	bx	lr

08014c54 <_ZNSt10_Head_baseILj0EP29TfLiteLocalResponseNormParamsLb0EE7_M_headERKS2_>:
 8014c54:	b480      	push	{r7}
 8014c56:	b083      	sub	sp, #12
 8014c58:	af00      	add	r7, sp, #0
 8014c5a:	6078      	str	r0, [r7, #4]
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	4618      	mov	r0, r3
 8014c60:	370c      	adds	r7, #12
 8014c62:	46bd      	mov	sp, r7
 8014c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c68:	4770      	bx	lr

08014c6a <_ZNSt10_Head_baseILj0EP16TfLiteLSTMParamsLb0EE7_M_headERKS2_>:
 8014c6a:	b480      	push	{r7}
 8014c6c:	b083      	sub	sp, #12
 8014c6e:	af00      	add	r7, sp, #0
 8014c70:	6078      	str	r0, [r7, #4]
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	4618      	mov	r0, r3
 8014c76:	370c      	adds	r7, #12
 8014c78:	46bd      	mov	sp, r7
 8014c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c7e:	4770      	bx	lr

08014c80 <_ZNSt10_Head_baseILj0EP38TfLiteUnidirectionalSequenceLSTMParamsLb0EE7_M_headERKS2_>:
 8014c80:	b480      	push	{r7}
 8014c82:	b083      	sub	sp, #12
 8014c84:	af00      	add	r7, sp, #0
 8014c86:	6078      	str	r0, [r7, #4]
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	4618      	mov	r0, r3
 8014c8c:	370c      	adds	r7, #12
 8014c8e:	46bd      	mov	sp, r7
 8014c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c94:	4770      	bx	lr

08014c96 <_ZNSt10_Head_baseILj0EP37TfLiteBidirectionalSequenceLSTMParamsLb0EE7_M_headERKS2_>:
 8014c96:	b480      	push	{r7}
 8014c98:	b083      	sub	sp, #12
 8014c9a:	af00      	add	r7, sp, #0
 8014c9c:	6078      	str	r0, [r7, #4]
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	4618      	mov	r0, r3
 8014ca2:	370c      	adds	r7, #12
 8014ca4:	46bd      	mov	sp, r7
 8014ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014caa:	4770      	bx	lr

08014cac <_ZNSt10_Head_baseILj0EP26TfLiteResizeBilinearParamsLb0EE7_M_headERKS2_>:
 8014cac:	b480      	push	{r7}
 8014cae:	b083      	sub	sp, #12
 8014cb0:	af00      	add	r7, sp, #0
 8014cb2:	6078      	str	r0, [r7, #4]
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	4618      	mov	r0, r3
 8014cb8:	370c      	adds	r7, #12
 8014cba:	46bd      	mov	sp, r7
 8014cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cc0:	4770      	bx	lr

08014cc2 <_ZNSt10_Head_baseILj0EP33TfLiteResizeNearestNeighborParamsLb0EE7_M_headERKS2_>:
 8014cc2:	b480      	push	{r7}
 8014cc4:	b083      	sub	sp, #12
 8014cc6:	af00      	add	r7, sp, #0
 8014cc8:	6078      	str	r0, [r7, #4]
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	4618      	mov	r0, r3
 8014cce:	370c      	adds	r7, #12
 8014cd0:	46bd      	mov	sp, r7
 8014cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cd6:	4770      	bx	lr

08014cd8 <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERKS2_>:
 8014cd8:	b480      	push	{r7}
 8014cda:	b083      	sub	sp, #12
 8014cdc:	af00      	add	r7, sp, #0
 8014cde:	6078      	str	r0, [r7, #4]
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	4618      	mov	r0, r3
 8014ce4:	370c      	adds	r7, #12
 8014ce6:	46bd      	mov	sp, r7
 8014ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cec:	4770      	bx	lr

08014cee <_ZNSt10_Head_baseILj0EP20TfLiteSkipGramParamsLb0EE7_M_headERKS2_>:
 8014cee:	b480      	push	{r7}
 8014cf0:	b083      	sub	sp, #12
 8014cf2:	af00      	add	r7, sp, #0
 8014cf4:	6078      	str	r0, [r7, #4]
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	4618      	mov	r0, r3
 8014cfa:	370c      	adds	r7, #12
 8014cfc:	46bd      	mov	sp, r7
 8014cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d02:	4770      	bx	lr

08014d04 <_ZNSt10_Head_baseILj0EP24TfLiteSpaceToDepthParamsLb0EE7_M_headERKS2_>:
 8014d04:	b480      	push	{r7}
 8014d06:	b083      	sub	sp, #12
 8014d08:	af00      	add	r7, sp, #0
 8014d0a:	6078      	str	r0, [r7, #4]
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	4618      	mov	r0, r3
 8014d10:	370c      	adds	r7, #12
 8014d12:	46bd      	mov	sp, r7
 8014d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d18:	4770      	bx	lr

08014d1a <_ZNSt10_Head_baseILj0EP24TfLiteDepthToSpaceParamsLb0EE7_M_headERKS2_>:
 8014d1a:	b480      	push	{r7}
 8014d1c:	b083      	sub	sp, #12
 8014d1e:	af00      	add	r7, sp, #0
 8014d20:	6078      	str	r0, [r7, #4]
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	4618      	mov	r0, r3
 8014d26:	370c      	adds	r7, #12
 8014d28:	46bd      	mov	sp, r7
 8014d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d2e:	4770      	bx	lr

08014d30 <_ZNSt10_Head_baseILj0EP18TfLiteGatherParamsLb0EE7_M_headERKS2_>:
 8014d30:	b480      	push	{r7}
 8014d32:	b083      	sub	sp, #12
 8014d34:	af00      	add	r7, sp, #0
 8014d36:	6078      	str	r0, [r7, #4]
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	4618      	mov	r0, r3
 8014d3c:	370c      	adds	r7, #12
 8014d3e:	46bd      	mov	sp, r7
 8014d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d44:	4770      	bx	lr

08014d46 <_ZNSt10_Head_baseILj0EP19TfLiteReducerParamsLb0EE7_M_headERKS2_>:
 8014d46:	b480      	push	{r7}
 8014d48:	b083      	sub	sp, #12
 8014d4a:	af00      	add	r7, sp, #0
 8014d4c:	6078      	str	r0, [r7, #4]
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	4618      	mov	r0, r3
 8014d52:	370c      	adds	r7, #12
 8014d54:	46bd      	mov	sp, r7
 8014d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d5a:	4770      	bx	lr

08014d5c <_ZNSt10_Head_baseILj0EP17TfLiteSplitParamsLb0EE7_M_headERKS2_>:
 8014d5c:	b480      	push	{r7}
 8014d5e:	b083      	sub	sp, #12
 8014d60:	af00      	add	r7, sp, #0
 8014d62:	6078      	str	r0, [r7, #4]
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	4618      	mov	r0, r3
 8014d68:	370c      	adds	r7, #12
 8014d6a:	46bd      	mov	sp, r7
 8014d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d70:	4770      	bx	lr

08014d72 <_ZNSt10_Head_baseILj0EP19TfLiteSqueezeParamsLb0EE7_M_headERKS2_>:
 8014d72:	b480      	push	{r7}
 8014d74:	b083      	sub	sp, #12
 8014d76:	af00      	add	r7, sp, #0
 8014d78:	6078      	str	r0, [r7, #4]
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	4618      	mov	r0, r3
 8014d7e:	370c      	adds	r7, #12
 8014d80:	46bd      	mov	sp, r7
 8014d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d86:	4770      	bx	lr

08014d88 <_ZNSt10_Head_baseILj0EP24TfLiteStridedSliceParamsLb0EE7_M_headERKS2_>:
 8014d88:	b480      	push	{r7}
 8014d8a:	b083      	sub	sp, #12
 8014d8c:	af00      	add	r7, sp, #0
 8014d8e:	6078      	str	r0, [r7, #4]
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	4618      	mov	r0, r3
 8014d94:	370c      	adds	r7, #12
 8014d96:	46bd      	mov	sp, r7
 8014d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d9c:	4770      	bx	lr

08014d9e <_ZNSt10_Head_baseILj0EP18TfLiteArgMaxParamsLb0EE7_M_headERKS2_>:
 8014d9e:	b480      	push	{r7}
 8014da0:	b083      	sub	sp, #12
 8014da2:	af00      	add	r7, sp, #0
 8014da4:	6078      	str	r0, [r7, #4]
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	4618      	mov	r0, r3
 8014daa:	370c      	adds	r7, #12
 8014dac:	46bd      	mov	sp, r7
 8014dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014db2:	4770      	bx	lr

08014db4 <_ZNSt10_Head_baseILj0EP18TfLiteArgMinParamsLb0EE7_M_headERKS2_>:
 8014db4:	b480      	push	{r7}
 8014db6:	b083      	sub	sp, #12
 8014db8:	af00      	add	r7, sp, #0
 8014dba:	6078      	str	r0, [r7, #4]
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	4618      	mov	r0, r3
 8014dc0:	370c      	adds	r7, #12
 8014dc2:	46bd      	mov	sp, r7
 8014dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dc8:	4770      	bx	lr

08014dca <_ZNSt10_Head_baseILj0EP25TfLiteTransposeConvParamsLb0EE7_M_headERKS2_>:
 8014dca:	b480      	push	{r7}
 8014dcc:	b083      	sub	sp, #12
 8014dce:	af00      	add	r7, sp, #0
 8014dd0:	6078      	str	r0, [r7, #4]
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	4618      	mov	r0, r3
 8014dd6:	370c      	adds	r7, #12
 8014dd8:	46bd      	mov	sp, r7
 8014dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dde:	4770      	bx	lr

08014de0 <_ZNSt10_Head_baseILj0EP25TfLiteSparseToDenseParamsLb0EE7_M_headERKS2_>:
 8014de0:	b480      	push	{r7}
 8014de2:	b083      	sub	sp, #12
 8014de4:	af00      	add	r7, sp, #0
 8014de6:	6078      	str	r0, [r7, #4]
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	4618      	mov	r0, r3
 8014dec:	370c      	adds	r7, #12
 8014dee:	46bd      	mov	sp, r7
 8014df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014df4:	4770      	bx	lr

08014df6 <_ZNSt10_Head_baseILj0EP17TfLiteShapeParamsLb0EE7_M_headERKS2_>:
 8014df6:	b480      	push	{r7}
 8014df8:	b083      	sub	sp, #12
 8014dfa:	af00      	add	r7, sp, #0
 8014dfc:	6078      	str	r0, [r7, #4]
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	4618      	mov	r0, r3
 8014e02:	370c      	adds	r7, #12
 8014e04:	46bd      	mov	sp, r7
 8014e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e0a:	4770      	bx	lr

08014e0c <_ZNSt10_Head_baseILj0EP16TfLitePackParamsLb0EE7_M_headERKS2_>:
 8014e0c:	b480      	push	{r7}
 8014e0e:	b083      	sub	sp, #12
 8014e10:	af00      	add	r7, sp, #0
 8014e12:	6078      	str	r0, [r7, #4]
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	4618      	mov	r0, r3
 8014e18:	370c      	adds	r7, #12
 8014e1a:	46bd      	mov	sp, r7
 8014e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e20:	4770      	bx	lr

08014e22 <_ZNSt10_Head_baseILj0EP21TfLiteFakeQuantParamsLb0EE7_M_headERKS2_>:
 8014e22:	b480      	push	{r7}
 8014e24:	b083      	sub	sp, #12
 8014e26:	af00      	add	r7, sp, #0
 8014e28:	6078      	str	r0, [r7, #4]
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	4618      	mov	r0, r3
 8014e2e:	370c      	adds	r7, #12
 8014e30:	46bd      	mov	sp, r7
 8014e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e36:	4770      	bx	lr

08014e38 <_ZNSt10_Head_baseILj0EP18TfLiteOneHotParamsLb0EE7_M_headERKS2_>:
 8014e38:	b480      	push	{r7}
 8014e3a:	b083      	sub	sp, #12
 8014e3c:	af00      	add	r7, sp, #0
 8014e3e:	6078      	str	r0, [r7, #4]
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	4618      	mov	r0, r3
 8014e44:	370c      	adds	r7, #12
 8014e46:	46bd      	mov	sp, r7
 8014e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e4c:	4770      	bx	lr

08014e4e <_ZNSt10_Head_baseILj0EP18TfLiteUnpackParamsLb0EE7_M_headERKS2_>:
 8014e4e:	b480      	push	{r7}
 8014e50:	b083      	sub	sp, #12
 8014e52:	af00      	add	r7, sp, #0
 8014e54:	6078      	str	r0, [r7, #4]
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	4618      	mov	r0, r3
 8014e5a:	370c      	adds	r7, #12
 8014e5c:	46bd      	mov	sp, r7
 8014e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e62:	4770      	bx	lr

08014e64 <_ZNSt10_Head_baseILj0EP21TfLiteLeakyReluParamsLb0EE7_M_headERKS2_>:
 8014e64:	b480      	push	{r7}
 8014e66:	b083      	sub	sp, #12
 8014e68:	af00      	add	r7, sp, #0
 8014e6a:	6078      	str	r0, [r7, #4]
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	4618      	mov	r0, r3
 8014e70:	370c      	adds	r7, #12
 8014e72:	46bd      	mov	sp, r7
 8014e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e78:	4770      	bx	lr

08014e7a <_ZNSt10_Head_baseILj0EP25TfLiteMirrorPaddingParamsLb0EE7_M_headERKS2_>:
 8014e7a:	b480      	push	{r7}
 8014e7c:	b083      	sub	sp, #12
 8014e7e:	af00      	add	r7, sp, #0
 8014e80:	6078      	str	r0, [r7, #4]
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	4618      	mov	r0, r3
 8014e86:	370c      	adds	r7, #12
 8014e88:	46bd      	mov	sp, r7
 8014e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e8e:	4770      	bx	lr

08014e90 <_ZNSt10_Head_baseILj0EP18TfLiteUniqueParamsLb0EE7_M_headERKS2_>:
 8014e90:	b480      	push	{r7}
 8014e92:	b083      	sub	sp, #12
 8014e94:	af00      	add	r7, sp, #0
 8014e96:	6078      	str	r0, [r7, #4]
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	4618      	mov	r0, r3
 8014e9c:	370c      	adds	r7, #12
 8014e9e:	46bd      	mov	sp, r7
 8014ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ea4:	4770      	bx	lr

08014ea6 <_ZNSt10_Head_baseILj0EP27TfLiteReverseSequenceParamsLb0EE7_M_headERKS2_>:
 8014ea6:	b480      	push	{r7}
 8014ea8:	b083      	sub	sp, #12
 8014eaa:	af00      	add	r7, sp, #0
 8014eac:	6078      	str	r0, [r7, #4]
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	4618      	mov	r0, r3
 8014eb2:	370c      	adds	r7, #12
 8014eb4:	46bd      	mov	sp, r7
 8014eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eba:	4770      	bx	lr

08014ebc <_ZNSt10_Head_baseILj0EP14TfLiteIfParamsLb0EE7_M_headERKS2_>:
 8014ebc:	b480      	push	{r7}
 8014ebe:	b083      	sub	sp, #12
 8014ec0:	af00      	add	r7, sp, #0
 8014ec2:	6078      	str	r0, [r7, #4]
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	4618      	mov	r0, r3
 8014ec8:	370c      	adds	r7, #12
 8014eca:	46bd      	mov	sp, r7
 8014ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ed0:	4770      	bx	lr

08014ed2 <_ZNSt10_Head_baseILj0EP17TfLiteWhileParamsLb0EE7_M_headERKS2_>:
 8014ed2:	b480      	push	{r7}
 8014ed4:	b083      	sub	sp, #12
 8014ed6:	af00      	add	r7, sp, #0
 8014ed8:	6078      	str	r0, [r7, #4]
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	4618      	mov	r0, r3
 8014ede:	370c      	adds	r7, #12
 8014ee0:	46bd      	mov	sp, r7
 8014ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ee6:	4770      	bx	lr

08014ee8 <_ZNSt10_Head_baseILj0EP23TfLiteBatchMatMulParamsLb0EE7_M_headERKS2_>:
 8014ee8:	b480      	push	{r7}
 8014eea:	b083      	sub	sp, #12
 8014eec:	af00      	add	r7, sp, #0
 8014eee:	6078      	str	r0, [r7, #4]
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	4618      	mov	r0, r3
 8014ef4:	370c      	adds	r7, #12
 8014ef6:	46bd      	mov	sp, r7
 8014ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014efc:	4770      	bx	lr

08014efe <_ZNK11flatbuffers6String5c_strEv>:
  const char *c_str() const { return reinterpret_cast<const char *>(Data()); }
 8014efe:	b580      	push	{r7, lr}
 8014f00:	b082      	sub	sp, #8
 8014f02:	af00      	add	r7, sp, #0
 8014f04:	6078      	str	r0, [r7, #4]
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	4618      	mov	r0, r3
 8014f0a:	f000 f8d9 	bl	80150c0 <_ZNK11flatbuffers6VectorIcE4DataEv>
 8014f0e:	4603      	mov	r3, r0
 8014f10:	4618      	mov	r0, r3
 8014f12:	3708      	adds	r7, #8
 8014f14:	46bd      	mov	sp, r7
 8014f16:	bd80      	pop	{r7, pc}

08014f18 <_ZN6tflite24EnumNamesBuiltinOperatorEv>:
inline const char * const *EnumNamesBuiltinOperator() {
 8014f18:	b480      	push	{r7}
 8014f1a:	af00      	add	r7, sp, #0
  return names;
 8014f1c:	4b02      	ldr	r3, [pc, #8]	; (8014f28 <_ZN6tflite24EnumNamesBuiltinOperatorEv+0x10>)
}
 8014f1e:	4618      	mov	r0, r3
 8014f20:	46bd      	mov	sp, r7
 8014f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f26:	4770      	bx	lr
 8014f28:	080256a8 	.word	0x080256a8

08014f2c <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>:
inline const char *EnumNameBuiltinOperator(BuiltinOperator e) {
 8014f2c:	b580      	push	{r7, lr}
 8014f2e:	b084      	sub	sp, #16
 8014f30:	af00      	add	r7, sp, #0
 8014f32:	4603      	mov	r3, r0
 8014f34:	71fb      	strb	r3, [r7, #7]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BATCH_MATMUL)) return "";
 8014f36:	2300      	movs	r3, #0
 8014f38:	72bb      	strb	r3, [r7, #10]
 8014f3a:	237e      	movs	r3, #126	; 0x7e
 8014f3c:	72fb      	strb	r3, [r7, #11]
 8014f3e:	f107 020b 	add.w	r2, r7, #11
 8014f42:	f107 010a 	add.w	r1, r7, #10
 8014f46:	1dfb      	adds	r3, r7, #7
 8014f48:	4618      	mov	r0, r3
 8014f4a:	f000 f8c5 	bl	80150d8 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_>
 8014f4e:	4603      	mov	r3, r0
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	d001      	beq.n	8014f58 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x2c>
 8014f54:	4b07      	ldr	r3, [pc, #28]	; (8014f74 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x48>)
 8014f56:	e008      	b.n	8014f6a <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x3e>
  const size_t index = static_cast<size_t>(e);
 8014f58:	79fb      	ldrb	r3, [r7, #7]
 8014f5a:	60fb      	str	r3, [r7, #12]
  return EnumNamesBuiltinOperator()[index];
 8014f5c:	f7ff ffdc 	bl	8014f18 <_ZN6tflite24EnumNamesBuiltinOperatorEv>
 8014f60:	4602      	mov	r2, r0
 8014f62:	68fb      	ldr	r3, [r7, #12]
 8014f64:	009b      	lsls	r3, r3, #2
 8014f66:	4413      	add	r3, r2
 8014f68:	681b      	ldr	r3, [r3, #0]
}
 8014f6a:	4618      	mov	r0, r3
 8014f6c:	3710      	adds	r7, #16
 8014f6e:	46bd      	mov	sp, r7
 8014f70:	bd80      	pop	{r7, pc}
 8014f72:	bf00      	nop
 8014f74:	08022710 	.word	0x08022710

08014f78 <_ZNK6tflite12OperatorCode12builtin_codeEv>:
  tflite::BuiltinOperator builtin_code() const {
 8014f78:	b580      	push	{r7, lr}
 8014f7a:	b082      	sub	sp, #8
 8014f7c:	af00      	add	r7, sp, #0
 8014f7e:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::BuiltinOperator>(GetField<int8_t>(VT_BUILTIN_CODE, 0));
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	2200      	movs	r2, #0
 8014f84:	2104      	movs	r1, #4
 8014f86:	4618      	mov	r0, r3
 8014f88:	f7f4 fc9b 	bl	80098c2 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8014f8c:	4603      	mov	r3, r0
 8014f8e:	b2db      	uxtb	r3, r3
  }
 8014f90:	4618      	mov	r0, r3
 8014f92:	3708      	adds	r7, #8
 8014f94:	46bd      	mov	sp, r7
 8014f96:	bd80      	pop	{r7, pc}

08014f98 <_ZNK6tflite12OperatorCode11custom_codeEv>:
  const flatbuffers::String *custom_code() const {
 8014f98:	b580      	push	{r7, lr}
 8014f9a:	b082      	sub	sp, #8
 8014f9c:	af00      	add	r7, sp, #0
 8014f9e:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::String *>(VT_CUSTOM_CODE);
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	2106      	movs	r1, #6
 8014fa4:	4618      	mov	r0, r3
 8014fa6:	f000 f8b2 	bl	801510e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 8014faa:	4603      	mov	r3, r0
  }
 8014fac:	4618      	mov	r0, r3
 8014fae:	3708      	adds	r7, #8
 8014fb0:	46bd      	mov	sp, r7
 8014fb2:	bd80      	pop	{r7, pc}

08014fb4 <_ZNK6tflite12OperatorCode7versionEv>:
  int32_t version() const {
 8014fb4:	b580      	push	{r7, lr}
 8014fb6:	b082      	sub	sp, #8
 8014fb8:	af00      	add	r7, sp, #0
 8014fba:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_VERSION, 1);
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	2201      	movs	r2, #1
 8014fc0:	2108      	movs	r1, #8
 8014fc2:	4618      	mov	r0, r3
 8014fc4:	f7f4 fc4f 	bl	8009866 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8014fc8:	4603      	mov	r3, r0
  }
 8014fca:	4618      	mov	r0, r3
 8014fcc:	3708      	adds	r7, #8
 8014fce:	46bd      	mov	sp, r7
 8014fd0:	bd80      	pop	{r7, pc}
	...

08014fd4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>:

namespace tflite {

TfLiteStatus GetRegistrationFromOpCode(
    const OperatorCode* opcode, const OpResolver& op_resolver,
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
 8014fd4:	b580      	push	{r7, lr}
 8014fd6:	b088      	sub	sp, #32
 8014fd8:	af00      	add	r7, sp, #0
 8014fda:	60f8      	str	r0, [r7, #12]
 8014fdc:	60b9      	str	r1, [r7, #8]
 8014fde:	607a      	str	r2, [r7, #4]
 8014fe0:	603b      	str	r3, [r7, #0]
  TfLiteStatus status = kTfLiteOk;
 8014fe2:	2300      	movs	r3, #0
 8014fe4:	77fb      	strb	r3, [r7, #31]
  *registration = nullptr;
 8014fe6:	683b      	ldr	r3, [r7, #0]
 8014fe8:	2200      	movs	r2, #0
 8014fea:	601a      	str	r2, [r3, #0]
  auto builtin_code = opcode->builtin_code();
 8014fec:	68f8      	ldr	r0, [r7, #12]
 8014fee:	f7ff ffc3 	bl	8014f78 <_ZNK6tflite12OperatorCode12builtin_codeEv>
 8014ff2:	4603      	mov	r3, r0
 8014ff4:	77bb      	strb	r3, [r7, #30]
  int version = opcode->version();
 8014ff6:	68f8      	ldr	r0, [r7, #12]
 8014ff8:	f7ff ffdc 	bl	8014fb4 <_ZNK6tflite12OperatorCode7versionEv>
 8014ffc:	61b8      	str	r0, [r7, #24]

  if (builtin_code > BuiltinOperator_MAX ||
 8014ffe:	7fbb      	ldrb	r3, [r7, #30]
 8015000:	2b7e      	cmp	r3, #126	; 0x7e
 8015002:	d908      	bls.n	8015016 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x42>
      builtin_code < BuiltinOperator_MIN) {
    TF_LITE_REPORT_ERROR(
 8015004:	7fbb      	ldrb	r3, [r7, #30]
 8015006:	461a      	mov	r2, r3
 8015008:	492a      	ldr	r1, [pc, #168]	; (80150b4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe0>)
 801500a:	6878      	ldr	r0, [r7, #4]
 801500c:	f7f0 f9de 	bl	80053cc <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter,
        "Op builtin_code out of range: %d. Are you using old TFLite binary "
        "with newer model?",
        builtin_code);
    status = kTfLiteError;
 8015010:	2301      	movs	r3, #1
 8015012:	77fb      	strb	r3, [r7, #31]
 8015014:	e048      	b.n	80150a8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
 8015016:	7fbb      	ldrb	r3, [r7, #30]
 8015018:	2b20      	cmp	r3, #32
 801501a:	d01a      	beq.n	8015052 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x7e>
    *registration = op_resolver.FindOp(builtin_code, version);
 801501c:	68bb      	ldr	r3, [r7, #8]
 801501e:	681b      	ldr	r3, [r3, #0]
 8015020:	681b      	ldr	r3, [r3, #0]
 8015022:	7fb9      	ldrb	r1, [r7, #30]
 8015024:	69ba      	ldr	r2, [r7, #24]
 8015026:	68b8      	ldr	r0, [r7, #8]
 8015028:	4798      	blx	r3
 801502a:	4602      	mov	r2, r0
 801502c:	683b      	ldr	r3, [r7, #0]
 801502e:	601a      	str	r2, [r3, #0]
    if (*registration == nullptr) {
 8015030:	683b      	ldr	r3, [r7, #0]
 8015032:	681b      	ldr	r3, [r3, #0]
 8015034:	2b00      	cmp	r3, #0
 8015036:	d137      	bne.n	80150a8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
      TF_LITE_REPORT_ERROR(
 8015038:	7fbb      	ldrb	r3, [r7, #30]
 801503a:	4618      	mov	r0, r3
 801503c:	f7ff ff76 	bl	8014f2c <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 8015040:	4602      	mov	r2, r0
 8015042:	69bb      	ldr	r3, [r7, #24]
 8015044:	491c      	ldr	r1, [pc, #112]	; (80150b8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe4>)
 8015046:	6878      	ldr	r0, [r7, #4]
 8015048:	f7f0 f9c0 	bl	80053cc <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter,
          "Didn't find op for builtin opcode '%s' version '%d'\n",
          EnumNameBuiltinOperator(builtin_code), version);
      status = kTfLiteError;
 801504c:	2301      	movs	r3, #1
 801504e:	77fb      	strb	r3, [r7, #31]
 8015050:	e02a      	b.n	80150a8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
    }
  } else if (!opcode->custom_code()) {
 8015052:	68f8      	ldr	r0, [r7, #12]
 8015054:	f7ff ffa0 	bl	8014f98 <_ZNK6tflite12OperatorCode11custom_codeEv>
 8015058:	4603      	mov	r3, r0
 801505a:	2b00      	cmp	r3, #0
 801505c:	bf0c      	ite	eq
 801505e:	2301      	moveq	r3, #1
 8015060:	2300      	movne	r3, #0
 8015062:	b2db      	uxtb	r3, r3
 8015064:	2b00      	cmp	r3, #0
 8015066:	d006      	beq.n	8015076 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa2>
    TF_LITE_REPORT_ERROR(
 8015068:	4914      	ldr	r1, [pc, #80]	; (80150bc <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe8>)
 801506a:	6878      	ldr	r0, [r7, #4]
 801506c:	f7f0 f9ae 	bl	80053cc <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter,
        "Operator with CUSTOM builtin_code has no custom_code.\n");
    status = kTfLiteError;
 8015070:	2301      	movs	r3, #1
 8015072:	77fb      	strb	r3, [r7, #31]
 8015074:	e018      	b.n	80150a8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
  } else {
    const char* name = opcode->custom_code()->c_str();
 8015076:	68f8      	ldr	r0, [r7, #12]
 8015078:	f7ff ff8e 	bl	8014f98 <_ZNK6tflite12OperatorCode11custom_codeEv>
 801507c:	4603      	mov	r3, r0
 801507e:	4618      	mov	r0, r3
 8015080:	f7ff ff3d 	bl	8014efe <_ZNK11flatbuffers6String5c_strEv>
 8015084:	6178      	str	r0, [r7, #20]
    *registration = op_resolver.FindOp(name, version);
 8015086:	68bb      	ldr	r3, [r7, #8]
 8015088:	681b      	ldr	r3, [r3, #0]
 801508a:	3304      	adds	r3, #4
 801508c:	681b      	ldr	r3, [r3, #0]
 801508e:	69ba      	ldr	r2, [r7, #24]
 8015090:	6979      	ldr	r1, [r7, #20]
 8015092:	68b8      	ldr	r0, [r7, #8]
 8015094:	4798      	blx	r3
 8015096:	4602      	mov	r2, r0
 8015098:	683b      	ldr	r3, [r7, #0]
 801509a:	601a      	str	r2, [r3, #0]
    if (*registration == nullptr) {
 801509c:	683b      	ldr	r3, [r7, #0]
 801509e:	681b      	ldr	r3, [r3, #0]
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	d101      	bne.n	80150a8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
      // Do not report error for unresolved custom op, we do the final check
      // while preparing ops.
      status = kTfLiteError;
 80150a4:	2301      	movs	r3, #1
 80150a6:	77fb      	strb	r3, [r7, #31]
    }
  }
  return status;
 80150a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80150aa:	4618      	mov	r0, r3
 80150ac:	3720      	adds	r7, #32
 80150ae:	46bd      	mov	sp, r7
 80150b0:	bd80      	pop	{r7, pc}
 80150b2:	bf00      	nop
 80150b4:	08022714 	.word	0x08022714
 80150b8:	08022768 	.word	0x08022768
 80150bc:	080227a0 	.word	0x080227a0

080150c0 <_ZNK11flatbuffers6VectorIcE4DataEv>:
  const uint8_t *Data() const {
 80150c0:	b480      	push	{r7}
 80150c2:	b083      	sub	sp, #12
 80150c4:	af00      	add	r7, sp, #0
 80150c6:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	3304      	adds	r3, #4
  }
 80150cc:	4618      	mov	r0, r3
 80150ce:	370c      	adds	r7, #12
 80150d0:	46bd      	mov	sp, r7
 80150d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150d6:	4770      	bx	lr

080150d8 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_>:
inline bool IsOutRange(const T &v, const T &low, const T &high) {
 80150d8:	b480      	push	{r7}
 80150da:	b085      	sub	sp, #20
 80150dc:	af00      	add	r7, sp, #0
 80150de:	60f8      	str	r0, [r7, #12]
 80150e0:	60b9      	str	r1, [r7, #8]
 80150e2:	607a      	str	r2, [r7, #4]
  return (v < low) || (high < v);
 80150e4:	68fb      	ldr	r3, [r7, #12]
 80150e6:	781a      	ldrb	r2, [r3, #0]
 80150e8:	68bb      	ldr	r3, [r7, #8]
 80150ea:	781b      	ldrb	r3, [r3, #0]
 80150ec:	429a      	cmp	r2, r3
 80150ee:	d305      	bcc.n	80150fc <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x24>
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	781a      	ldrb	r2, [r3, #0]
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	781b      	ldrb	r3, [r3, #0]
 80150f8:	429a      	cmp	r2, r3
 80150fa:	d201      	bcs.n	8015100 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x28>
 80150fc:	2301      	movs	r3, #1
 80150fe:	e000      	b.n	8015102 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x2a>
 8015100:	2300      	movs	r3, #0
}
 8015102:	4618      	mov	r0, r3
 8015104:	3714      	adds	r7, #20
 8015106:	46bd      	mov	sp, r7
 8015108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801510c:	4770      	bx	lr

0801510e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 801510e:	b580      	push	{r7, lr}
 8015110:	b082      	sub	sp, #8
 8015112:	af00      	add	r7, sp, #0
 8015114:	6078      	str	r0, [r7, #4]
 8015116:	460b      	mov	r3, r1
 8015118:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 801511a:	887b      	ldrh	r3, [r7, #2]
 801511c:	4619      	mov	r1, r3
 801511e:	6878      	ldr	r0, [r7, #4]
 8015120:	f000 f805 	bl	801512e <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 8015124:	4603      	mov	r3, r0
  }
 8015126:	4618      	mov	r0, r3
 8015128:	3708      	adds	r7, #8
 801512a:	46bd      	mov	sp, r7
 801512c:	bd80      	pop	{r7, pc}

0801512e <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 801512e:	b580      	push	{r7, lr}
 8015130:	b084      	sub	sp, #16
 8015132:	af00      	add	r7, sp, #0
 8015134:	6078      	str	r0, [r7, #4]
 8015136:	460b      	mov	r3, r1
 8015138:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 801513a:	887b      	ldrh	r3, [r7, #2]
 801513c:	4619      	mov	r1, r3
 801513e:	6878      	ldr	r0, [r7, #4]
 8015140:	f7eb ffc0 	bl	80010c4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8015144:	4603      	mov	r3, r0
 8015146:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8015148:	687a      	ldr	r2, [r7, #4]
 801514a:	89fb      	ldrh	r3, [r7, #14]
 801514c:	4413      	add	r3, r2
 801514e:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8015150:	89fb      	ldrh	r3, [r7, #14]
 8015152:	2b00      	cmp	r3, #0
 8015154:	d006      	beq.n	8015164 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t+0x36>
 8015156:	68b8      	ldr	r0, [r7, #8]
 8015158:	f7ec fb72 	bl	8001840 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 801515c:	4602      	mov	r2, r0
 801515e:	68bb      	ldr	r3, [r7, #8]
 8015160:	4413      	add	r3, r2
                        : nullptr;
 8015162:	e000      	b.n	8015166 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8015164:	2300      	movs	r3, #0
  }
 8015166:	4618      	mov	r0, r3
 8015168:	3710      	adds	r7, #16
 801516a:	46bd      	mov	sp, r7
 801516c:	bd80      	pop	{r7, pc}

0801516e <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor>:

#include "tensorflow/lite/c/common.h"

namespace tflite {

TfLiteStatus ResetVariableTensor(TfLiteTensor* tensor) {
 801516e:	b480      	push	{r7}
 8015170:	b087      	sub	sp, #28
 8015172:	af00      	add	r7, sp, #0
 8015174:	6078      	str	r0, [r7, #4]
  if (!tensor->is_variable) {
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801517c:	f083 0301 	eor.w	r3, r3, #1
 8015180:	b2db      	uxtb	r3, r3
 8015182:	2b00      	cmp	r3, #0
 8015184:	d001      	beq.n	801518a <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x1c>
    return kTfLiteOk;
 8015186:	2300      	movs	r3, #0
 8015188:	e01e      	b.n	80151c8 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x5a>
  }
  // TODO(b/115961645): Implement - If a variable tensor has a buffer, reset it
  // to the value of the buffer.
  int value = 0;
 801518a:	2300      	movs	r3, #0
 801518c:	617b      	str	r3, [r7, #20]
  if (tensor->type == kTfLiteInt8) {
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	781b      	ldrb	r3, [r3, #0]
 8015192:	2b09      	cmp	r3, #9
 8015194:	d102      	bne.n	801519c <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x2e>
    value = tensor->params.zero_point;
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	691b      	ldr	r3, [r3, #16]
 801519a:	617b      	str	r3, [r7, #20]
#if __ANDROID__ || defined(__x86_64__) || defined(__i386__) || \
    defined(__i386) || defined(__x86__) || defined(__X86__) || \
    defined(_X86_) || defined(_M_IX86) || defined(_M_X64)
  memset(tensor->data.raw, value, tensor->bytes);
#else
  char* raw_ptr = tensor->data.raw;
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	685b      	ldr	r3, [r3, #4]
 80151a0:	613b      	str	r3, [r7, #16]
  for (size_t i = 0; i < tensor->bytes; ++i) {
 80151a2:	2300      	movs	r3, #0
 80151a4:	60fb      	str	r3, [r7, #12]
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	699b      	ldr	r3, [r3, #24]
 80151aa:	68fa      	ldr	r2, [r7, #12]
 80151ac:	429a      	cmp	r2, r3
 80151ae:	d20a      	bcs.n	80151c6 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x58>
    *raw_ptr = value;
 80151b0:	697b      	ldr	r3, [r7, #20]
 80151b2:	b2da      	uxtb	r2, r3
 80151b4:	693b      	ldr	r3, [r7, #16]
 80151b6:	701a      	strb	r2, [r3, #0]
    raw_ptr++;
 80151b8:	693b      	ldr	r3, [r7, #16]
 80151ba:	3301      	adds	r3, #1
 80151bc:	613b      	str	r3, [r7, #16]
  for (size_t i = 0; i < tensor->bytes; ++i) {
 80151be:	68fb      	ldr	r3, [r7, #12]
 80151c0:	3301      	adds	r3, #1
 80151c2:	60fb      	str	r3, [r7, #12]
 80151c4:	e7ef      	b.n	80151a6 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x38>
  }
#endif
  return kTfLiteOk;
 80151c6:	2300      	movs	r3, #0
}
 80151c8:	4618      	mov	r0, r3
 80151ca:	371c      	adds	r7, #28
 80151cc:	46bd      	mov	sp, r7
 80151ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151d2:	4770      	bx	lr

080151d4 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 80151d4:	b480      	push	{r7}
 80151d6:	b083      	sub	sp, #12
 80151d8:	af00      	add	r7, sp, #0
 80151da:	ed87 0a01 	vstr	s0, [r7, #4]
 80151de:	edd7 7a01 	vldr	s15, [r7, #4]
 80151e2:	fef8 7a67 	vrinta.f32	s15, s15
 80151e6:	eeb0 0a67 	vmov.f32	s0, s15
 80151ea:	370c      	adds	r7, #12
 80151ec:	46bd      	mov	sp, r7
 80151ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151f2:	4770      	bx	lr

080151f4 <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 80151f4:	b480      	push	{r7}
 80151f6:	af00      	add	r7, sp, #0
 80151f8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80151fc:	4618      	mov	r0, r3
 80151fe:	46bd      	mov	sp, r7
 8015200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015204:	4770      	bx	lr
	...

08015208 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 8015208:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 801520c:	b088      	sub	sp, #32
 801520e:	af00      	add	r7, sp, #0
 8015210:	ed87 0b02 	vstr	d0, [r7, #8]
 8015214:	6078      	str	r0, [r7, #4]
 8015216:	6039      	str	r1, [r7, #0]
  if (double_multiplier == 0.) {
 8015218:	f04f 0200 	mov.w	r2, #0
 801521c:	f04f 0300 	mov.w	r3, #0
 8015220:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015224:	f7eb fc3e 	bl	8000aa4 <__aeabi_dcmpeq>
 8015228:	4603      	mov	r3, r0
 801522a:	2b00      	cmp	r3, #0
 801522c:	d006      	beq.n	801523c <_ZN6tflite18QuantizeMultiplierEdPlPi+0x34>
    *quantized_multiplier = 0;
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	2200      	movs	r2, #0
 8015232:	601a      	str	r2, [r3, #0]
    *shift = 0;
 8015234:	683b      	ldr	r3, [r7, #0]
 8015236:	2200      	movs	r2, #0
 8015238:	601a      	str	r2, [r3, #0]
 801523a:	e06a      	b.n	8015312 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x10a>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 801523c:	6838      	ldr	r0, [r7, #0]
 801523e:	ed97 0b02 	vldr	d0, [r7, #8]
 8015242:	f009 fc2d 	bl	801eaa0 <frexp>
 8015246:	ed87 0b06 	vstr	d0, [r7, #24]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 801524a:	f04f 0200 	mov.w	r2, #0
 801524e:	4b33      	ldr	r3, [pc, #204]	; (801531c <_ZN6tflite18QuantizeMultiplierEdPlPi+0x114>)
 8015250:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8015254:	f7eb f9be 	bl	80005d4 <__aeabi_dmul>
 8015258:	4603      	mov	r3, r0
 801525a:	460c      	mov	r4, r1
 801525c:	ec44 3b17 	vmov	d7, r3, r4
 8015260:	eeb0 0a47 	vmov.f32	s0, s14
 8015264:	eef0 0a67 	vmov.f32	s1, s15
 8015268:	f000 f981 	bl	801556e <_ZN6tflite11TfLiteRoundIdEET_S1_>
 801526c:	ec54 3b10 	vmov	r3, r4, d0
 8015270:	4618      	mov	r0, r3
 8015272:	4621      	mov	r1, r4
 8015274:	f7eb fcee 	bl	8000c54 <__aeabi_d2lz>
 8015278:	4603      	mov	r3, r0
 801527a:	460c      	mov	r4, r1
 801527c:	e9c7 3404 	strd	r3, r4, [r7, #16]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 8015280:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8015284:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8015288:	f04f 0200 	mov.w	r2, #0
 801528c:	4299      	cmp	r1, r3
 801528e:	eb72 0304 	sbcs.w	r3, r2, r4
 8015292:	da01      	bge.n	8015298 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x90>
 8015294:	f009 fddc 	bl	801ee50 <abort>
  if (q_fixed == (1ll << 31)) {
 8015298:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801529c:	2c00      	cmp	r4, #0
 801529e:	bf08      	it	eq
 80152a0:	f1b3 4f00 	cmpeq.w	r3, #2147483648	; 0x80000000
 80152a4:	d114      	bne.n	80152d0 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xc8>
    q_fixed /= 2;
 80152a6:	e9d7 bc04 	ldrd	fp, ip, [r7, #16]
 80152aa:	ea4f 72dc 	mov.w	r2, ip, lsr #31
 80152ae:	4611      	mov	r1, r2
 80152b0:	f04f 0200 	mov.w	r2, #0
 80152b4:	eb1b 0301 	adds.w	r3, fp, r1
 80152b8:	eb4c 0402 	adc.w	r4, ip, r2
 80152bc:	1064      	asrs	r4, r4, #1
 80152be:	ea4f 0333 	mov.w	r3, r3, rrx
 80152c2:	e9c7 3404 	strd	r3, r4, [r7, #16]
    ++*shift;
 80152c6:	683b      	ldr	r3, [r7, #0]
 80152c8:	681b      	ldr	r3, [r3, #0]
 80152ca:	1c5a      	adds	r2, r3, #1
 80152cc:	683b      	ldr	r3, [r7, #0]
 80152ce:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 80152d0:	f7ff ff90 	bl	80151f4 <_ZNSt14numeric_limitsIlE3maxEv>
 80152d4:	4603      	mov	r3, r0
 80152d6:	4619      	mov	r1, r3
 80152d8:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80152dc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80152e0:	4299      	cmp	r1, r3
 80152e2:	eb72 0304 	sbcs.w	r3, r2, r4
 80152e6:	da01      	bge.n	80152ec <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe4>
 80152e8:	f009 fdb2 	bl	801ee50 <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 80152ec:	683b      	ldr	r3, [r7, #0]
 80152ee:	681b      	ldr	r3, [r3, #0]
 80152f0:	f113 0f1f 	cmn.w	r3, #31
 80152f4:	da08      	bge.n	8015308 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x100>
    *shift = 0;
 80152f6:	683b      	ldr	r3, [r7, #0]
 80152f8:	2200      	movs	r2, #0
 80152fa:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 80152fc:	f04f 0300 	mov.w	r3, #0
 8015300:	f04f 0400 	mov.w	r4, #0
 8015304:	e9c7 3404 	strd	r3, r4, [r7, #16]
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 8015308:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801530c:	461a      	mov	r2, r3
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	601a      	str	r2, [r3, #0]
}
 8015312:	3720      	adds	r7, #32
 8015314:	46bd      	mov	sp, r7
 8015316:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 801531a:	bf00      	nop
 801531c:	41e00000 	.word	0x41e00000

08015320 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>:

void QuantizeMultiplierGreaterThanOne(double double_multiplier,
                                      int32_t* quantized_multiplier,
                                      int* left_shift) {
 8015320:	b580      	push	{r7, lr}
 8015322:	b084      	sub	sp, #16
 8015324:	af00      	add	r7, sp, #0
 8015326:	ed87 0b02 	vstr	d0, [r7, #8]
 801532a:	6078      	str	r0, [r7, #4]
 801532c:	6039      	str	r1, [r7, #0]
  TFLITE_CHECK_GT(double_multiplier, 1.);
 801532e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015332:	f04f 0200 	mov.w	r2, #0
 8015336:	4b0e      	ldr	r3, [pc, #56]	; (8015370 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x50>)
 8015338:	f7eb fbdc 	bl	8000af4 <__aeabi_dcmpgt>
 801533c:	4603      	mov	r3, r0
 801533e:	2b00      	cmp	r3, #0
 8015340:	d101      	bne.n	8015346 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x26>
 8015342:	f009 fd85 	bl	801ee50 <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
 8015346:	ed97 7b02 	vldr	d7, [r7, #8]
 801534a:	6839      	ldr	r1, [r7, #0]
 801534c:	6878      	ldr	r0, [r7, #4]
 801534e:	eeb0 0a47 	vmov.f32	s0, s14
 8015352:	eef0 0a67 	vmov.f32	s1, s15
 8015356:	f7ff ff57 	bl	8015208 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_GE(*left_shift, 0);
 801535a:	683b      	ldr	r3, [r7, #0]
 801535c:	681b      	ldr	r3, [r3, #0]
 801535e:	2b00      	cmp	r3, #0
 8015360:	da01      	bge.n	8015366 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x46>
 8015362:	f009 fd75 	bl	801ee50 <abort>
}
 8015366:	bf00      	nop
 8015368:	3710      	adds	r7, #16
 801536a:	46bd      	mov	sp, r7
 801536c:	bd80      	pop	{r7, pc}
 801536e:	bf00      	nop
 8015370:	3ff00000 	.word	0x3ff00000

08015374 <_ZSt3minIdERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8015374:	b590      	push	{r4, r7, lr}
 8015376:	b083      	sub	sp, #12
 8015378:	af00      	add	r7, sp, #0
 801537a:	6078      	str	r0, [r7, #4]
 801537c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 801537e:	683b      	ldr	r3, [r7, #0]
 8015380:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	e9d3 3400 	ldrd	r3, r4, [r3]
 801538a:	461a      	mov	r2, r3
 801538c:	4623      	mov	r3, r4
 801538e:	f7eb fb93 	bl	8000ab8 <__aeabi_dcmplt>
 8015392:	4603      	mov	r3, r0
 8015394:	2b00      	cmp	r3, #0
 8015396:	d001      	beq.n	801539c <_ZSt3minIdERKT_S2_S2_+0x28>
	return __b;
 8015398:	683b      	ldr	r3, [r7, #0]
 801539a:	e000      	b.n	801539e <_ZSt3minIdERKT_S2_S2_+0x2a>
      return __a;
 801539c:	687b      	ldr	r3, [r7, #4]
    }
 801539e:	4618      	mov	r0, r3
 80153a0:	370c      	adds	r7, #12
 80153a2:	46bd      	mov	sp, r7
 80153a4:	bd90      	pop	{r4, r7, pc}
	...

080153a8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
 80153a8:	b5b0      	push	{r4, r5, r7, lr}
 80153aa:	b08e      	sub	sp, #56	; 0x38
 80153ac:	af00      	add	r7, sp, #0
 80153ae:	ed87 0b06 	vstr	d0, [r7, #24]
 80153b2:	ed87 1b04 	vstr	d1, [r7, #16]
 80153b6:	60f8      	str	r0, [r7, #12]
 80153b8:	60b9      	str	r1, [r7, #8]
 80153ba:	607a      	str	r2, [r7, #4]
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
 80153bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80153c0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80153c4:	f7eb f906 	bl	80005d4 <__aeabi_dmul>
 80153c8:	4603      	mov	r3, r0
 80153ca:	460c      	mov	r4, r1
 80153cc:	4625      	mov	r5, r4
 80153ce:	461c      	mov	r4, r3
 80153d0:	68fb      	ldr	r3, [r7, #12]
 80153d2:	f1c3 031f 	rsb	r3, r3, #31
 80153d6:	2201      	movs	r2, #1
 80153d8:	fa02 f303 	lsl.w	r3, r2, r3
 80153dc:	4618      	mov	r0, r3
 80153de:	f7eb f88f 	bl	8000500 <__aeabi_i2d>
 80153e2:	4602      	mov	r2, r0
 80153e4:	460b      	mov	r3, r1
 80153e6:	4620      	mov	r0, r4
 80153e8:	4629      	mov	r1, r5
 80153ea:	f7eb f8f3 	bl	80005d4 <__aeabi_dmul>
 80153ee:	4603      	mov	r3, r0
 80153f0:	460c      	mov	r4, r1
 80153f2:	e9c7 3408 	strd	r3, r4, [r7, #32]
 80153f6:	a40e      	add	r4, pc, #56	; (adr r4, 8015430 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x88>)
 80153f8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80153fc:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 8015400:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8015404:	f107 0320 	add.w	r3, r7, #32
 8015408:	4611      	mov	r1, r2
 801540a:	4618      	mov	r0, r3
 801540c:	f7ff ffb2 	bl	8015374 <_ZSt3minIdERKT_S2_S2_>
 8015410:	4603      	mov	r3, r0
 8015412:	e9d3 3400 	ldrd	r3, r4, [r3]
 8015416:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
 801541a:	6879      	ldr	r1, [r7, #4]
 801541c:	68b8      	ldr	r0, [r7, #8]
 801541e:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8015422:	f7ff ff7d 	bl	8015320 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>
                                   quantized_multiplier, left_shift);
}
 8015426:	bf00      	nop
 8015428:	3738      	adds	r7, #56	; 0x38
 801542a:	46bd      	mov	sp, r7
 801542c:	bdb0      	pop	{r4, r5, r7, pc}
 801542e:	bf00      	nop
 8015430:	ffc00000 	.word	0xffc00000
 8015434:	41dfffff 	.word	0x41dfffff

08015438 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
 8015438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801543c:	b087      	sub	sp, #28
 801543e:	af00      	add	r7, sp, #0
 8015440:	60f8      	str	r0, [r7, #12]
 8015442:	60b9      	str	r1, [r7, #8]
 8015444:	607a      	str	r2, [r7, #4]
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
 8015446:	2201      	movs	r2, #1
 8015448:	68fb      	ldr	r3, [r7, #12]
 801544a:	fa02 f303 	lsl.w	r3, r2, r3
 801544e:	3b01      	subs	r3, #1
 8015450:	4618      	mov	r0, r3
 8015452:	f7eb f855 	bl	8000500 <__aeabi_i2d>
 8015456:	4682      	mov	sl, r0
 8015458:	468b      	mov	fp, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 801545a:	687a      	ldr	r2, [r7, #4]
 801545c:	68fb      	ldr	r3, [r7, #12]
 801545e:	1ad1      	subs	r1, r2, r3
 8015460:	f04f 0201 	mov.w	r2, #1
 8015464:	f04f 0300 	mov.w	r3, #0
 8015468:	f1a1 0620 	sub.w	r6, r1, #32
 801546c:	f1c1 0020 	rsb	r0, r1, #32
 8015470:	fa03 f901 	lsl.w	r9, r3, r1
 8015474:	fa02 f606 	lsl.w	r6, r2, r6
 8015478:	ea49 0906 	orr.w	r9, r9, r6
 801547c:	fa22 f000 	lsr.w	r0, r2, r0
 8015480:	ea49 0900 	orr.w	r9, r9, r0
 8015484:	fa02 f801 	lsl.w	r8, r2, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 8015488:	4640      	mov	r0, r8
 801548a:	4649      	mov	r1, r9
 801548c:	f7eb f874 	bl	8000578 <__aeabi_l2d>
 8015490:	4602      	mov	r2, r0
 8015492:	460b      	mov	r3, r1
 8015494:	4650      	mov	r0, sl
 8015496:	4659      	mov	r1, fp
 8015498:	f7eb f89c 	bl	80005d4 <__aeabi_dmul>
 801549c:	4602      	mov	r2, r0
 801549e:	460b      	mov	r3, r1
 80154a0:	4690      	mov	r8, r2
 80154a2:	4699      	mov	r9, r3
      (1ll << input_left_shift);
 80154a4:	f04f 0201 	mov.w	r2, #1
 80154a8:	f04f 0300 	mov.w	r3, #0
 80154ac:	68b9      	ldr	r1, [r7, #8]
 80154ae:	f1a1 0620 	sub.w	r6, r1, #32
 80154b2:	f1c1 0020 	rsb	r0, r1, #32
 80154b6:	fa03 f501 	lsl.w	r5, r3, r1
 80154ba:	fa02 f606 	lsl.w	r6, r2, r6
 80154be:	4335      	orrs	r5, r6
 80154c0:	fa22 f000 	lsr.w	r0, r2, r0
 80154c4:	4305      	orrs	r5, r0
 80154c6:	fa02 f401 	lsl.w	r4, r2, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 80154ca:	4620      	mov	r0, r4
 80154cc:	4629      	mov	r1, r5
 80154ce:	f7eb f853 	bl	8000578 <__aeabi_l2d>
 80154d2:	4603      	mov	r3, r0
 80154d4:	460c      	mov	r4, r1
  const double max_input_rescaled =
 80154d6:	461a      	mov	r2, r3
 80154d8:	4623      	mov	r3, r4
 80154da:	4640      	mov	r0, r8
 80154dc:	4649      	mov	r1, r9
 80154de:	f7eb f9a3 	bl	8000828 <__aeabi_ddiv>
 80154e2:	4603      	mov	r3, r0
 80154e4:	460c      	mov	r4, r1
 80154e6:	e9c7 3404 	strd	r3, r4, [r7, #16]
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
 80154ea:	ed97 0b04 	vldr	d0, [r7, #16]
 80154ee:	f009 fa53 	bl	801e998 <floor>
 80154f2:	ec54 3b10 	vmov	r3, r4, d0
 80154f6:	4618      	mov	r0, r3
 80154f8:	4621      	mov	r1, r4
 80154fa:	f7eb fb1b 	bl	8000b34 <__aeabi_d2iz>
 80154fe:	4603      	mov	r3, r0
#endif  // TFLITE_EMULATE_FLOAT
}
 8015500:	4618      	mov	r0, r3
 8015502:	371c      	adds	r7, #28
 8015504:	46bd      	mov	sp, r7
 8015506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801550a <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 801550a:	b480      	push	{r7}
 801550c:	b083      	sub	sp, #12
 801550e:	af00      	add	r7, sp, #0
 8015510:	6078      	str	r0, [r7, #4]
 8015512:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	ed93 7a00 	vldr	s14, [r3]
 801551a:	683b      	ldr	r3, [r7, #0]
 801551c:	edd3 7a00 	vldr	s15, [r3]
 8015520:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015528:	d501      	bpl.n	801552e <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 801552a:	683b      	ldr	r3, [r7, #0]
 801552c:	e000      	b.n	8015530 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 801552e:	687b      	ldr	r3, [r7, #4]
    }
 8015530:	4618      	mov	r0, r3
 8015532:	370c      	adds	r7, #12
 8015534:	46bd      	mov	sp, r7
 8015536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801553a:	4770      	bx	lr

0801553c <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 801553c:	b480      	push	{r7}
 801553e:	b083      	sub	sp, #12
 8015540:	af00      	add	r7, sp, #0
 8015542:	6078      	str	r0, [r7, #4]
 8015544:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8015546:	683b      	ldr	r3, [r7, #0]
 8015548:	ed93 7a00 	vldr	s14, [r3]
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	edd3 7a00 	vldr	s15, [r3]
 8015552:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801555a:	d501      	bpl.n	8015560 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 801555c:	683b      	ldr	r3, [r7, #0]
 801555e:	e000      	b.n	8015562 <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 8015560:	687b      	ldr	r3, [r7, #4]
    }
 8015562:	4618      	mov	r0, r3
 8015564:	370c      	adds	r7, #12
 8015566:	46bd      	mov	sp, r7
 8015568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801556c:	4770      	bx	lr

0801556e <_ZN6tflite11TfLiteRoundIdEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 801556e:	b580      	push	{r7, lr}
 8015570:	b082      	sub	sp, #8
 8015572:	af00      	add	r7, sp, #0
 8015574:	ed87 0b00 	vstr	d0, [r7]
 8015578:	ed97 0b00 	vldr	d0, [r7]
 801557c:	f009 fac6 	bl	801eb0c <round>
 8015580:	eeb0 7a40 	vmov.f32	s14, s0
 8015584:	eef0 7a60 	vmov.f32	s15, s1
 8015588:	eeb0 0a47 	vmov.f32	s0, s14
 801558c:	eef0 0a67 	vmov.f32	s1, s15
 8015590:	3708      	adds	r7, #8
 8015592:	46bd      	mov	sp, r7
 8015594:	bd80      	pop	{r7, pc}

08015596 <_ZN6tflite11TfLiteRoundIfEET_S1_>:
 8015596:	b580      	push	{r7, lr}
 8015598:	b082      	sub	sp, #8
 801559a:	af00      	add	r7, sp, #0
 801559c:	ed87 0a01 	vstr	s0, [r7, #4]
 80155a0:	ed97 0a01 	vldr	s0, [r7, #4]
 80155a4:	f7ff fe16 	bl	80151d4 <_ZSt5roundf>
 80155a8:	eef0 7a40 	vmov.f32	s15, s0
 80155ac:	eeb0 0a67 	vmov.f32	s0, s15
 80155b0:	3708      	adds	r7, #8
 80155b2:	46bd      	mov	sp, r7
 80155b4:	bd80      	pop	{r7, pc}

080155b6 <_ZSt3absd>:
// 2294. <cstdlib> should declare abs(double)

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 80155b6:	b490      	push	{r4, r7}
 80155b8:	b082      	sub	sp, #8
 80155ba:	af00      	add	r7, sp, #0
 80155bc:	ed87 0b00 	vstr	d0, [r7]
 80155c0:	683b      	ldr	r3, [r7, #0]
 80155c2:	687a      	ldr	r2, [r7, #4]
 80155c4:	f022 4400 	bic.w	r4, r2, #2147483648	; 0x80000000
 80155c8:	ec44 3b17 	vmov	d7, r3, r4
 80155cc:	eeb0 0a47 	vmov.f32	s0, s14
 80155d0:	eef0 0a67 	vmov.f32	s1, s15
 80155d4:	3708      	adds	r7, #8
 80155d6:	46bd      	mov	sp, r7
 80155d8:	bc90      	pop	{r4, r7}
 80155da:	4770      	bx	lr

080155dc <_ZNSt14numeric_limitsIaE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 80155dc:	b480      	push	{r7}
 80155de:	af00      	add	r7, sp, #0
 80155e0:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80155e4:	4618      	mov	r0, r3
 80155e6:	46bd      	mov	sp, r7
 80155e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ec:	4770      	bx	lr

080155ee <_ZNSt14numeric_limitsIaE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 80155ee:	b480      	push	{r7}
 80155f0:	af00      	add	r7, sp, #0
 80155f2:	237f      	movs	r3, #127	; 0x7f
 80155f4:	4618      	mov	r0, r3
 80155f6:	46bd      	mov	sp, r7
 80155f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155fc:	4770      	bx	lr

080155fe <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 80155fe:	b480      	push	{r7}
 8015600:	af00      	add	r7, sp, #0
 8015602:	2300      	movs	r3, #0
 8015604:	4618      	mov	r0, r3
 8015606:	46bd      	mov	sp, r7
 8015608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801560c:	4770      	bx	lr

0801560e <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 801560e:	b480      	push	{r7}
 8015610:	af00      	add	r7, sp, #0
 8015612:	23ff      	movs	r3, #255	; 0xff
 8015614:	4618      	mov	r0, r3
 8015616:	46bd      	mov	sp, r7
 8015618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801561c:	4770      	bx	lr
	...

08015620 <_ZNSt14numeric_limitsIsE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 8015620:	b480      	push	{r7}
 8015622:	af00      	add	r7, sp, #0
 8015624:	4b02      	ldr	r3, [pc, #8]	; (8015630 <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 8015626:	4618      	mov	r0, r3
 8015628:	46bd      	mov	sp, r7
 801562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801562e:	4770      	bx	lr
 8015630:	ffff8000 	.word	0xffff8000

08015634 <_ZNSt14numeric_limitsIsE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 8015634:	b480      	push	{r7}
 8015636:	af00      	add	r7, sp, #0
 8015638:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801563c:	4618      	mov	r0, r3
 801563e:	46bd      	mov	sp, r7
 8015640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015644:	4770      	bx	lr

08015646 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>:
#include "tensorflow/lite/c/builtin_op_data.h"
#include "tensorflow/lite/c/common.h"

namespace tflite {

inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 8015646:	b480      	push	{r7}
 8015648:	b083      	sub	sp, #12
 801564a:	af00      	add	r7, sp, #0
 801564c:	6078      	str	r0, [r7, #4]
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	689b      	ldr	r3, [r3, #8]
 8015652:	681b      	ldr	r3, [r3, #0]
 8015654:	4618      	mov	r0, r3
 8015656:	370c      	adds	r7, #12
 8015658:	46bd      	mov	sp, r7
 801565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801565e:	4770      	bx	lr

08015660 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>:
inline int SizeOfDimension(const TfLiteTensor* t, int dim) {
 8015660:	b480      	push	{r7}
 8015662:	b083      	sub	sp, #12
 8015664:	af00      	add	r7, sp, #0
 8015666:	6078      	str	r0, [r7, #4]
 8015668:	6039      	str	r1, [r7, #0]
  return t->dims->data[dim];
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	689a      	ldr	r2, [r3, #8]
 801566e:	683b      	ldr	r3, [r7, #0]
 8015670:	009b      	lsls	r3, r3, #2
 8015672:	4413      	add	r3, r2
 8015674:	685b      	ldr	r3, [r3, #4]
}
 8015676:	4618      	mov	r0, r3
 8015678:	370c      	adds	r7, #12
 801567a:	46bd      	mov	sp, r7
 801567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015680:	4770      	bx	lr
	...

08015684 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>:
TfLiteStatus PopulateConvolutionQuantizationParams(
    TfLiteContext* context, const TfLiteTensor* input,
    const TfLiteTensor* filter, const TfLiteTensor* bias, TfLiteTensor* output,
    const TfLiteFusedActivation& activation, int32_t* multiplier, int* shift,
    int32_t* output_activation_min, int32_t* output_activation_max,
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
 8015684:	b5b0      	push	{r4, r5, r7, lr}
 8015686:	b09a      	sub	sp, #104	; 0x68
 8015688:	af04      	add	r7, sp, #16
 801568a:	60f8      	str	r0, [r7, #12]
 801568c:	60b9      	str	r1, [r7, #8]
 801568e:	607a      	str	r2, [r7, #4]
 8015690:	603b      	str	r3, [r7, #0]
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
 8015692:	68bb      	ldr	r3, [r7, #8]
 8015694:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015698:	2b01      	cmp	r3, #1
 801569a:	d013      	beq.n	80156c4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x40>
 801569c:	68fb      	ldr	r3, [r7, #12]
 801569e:	695c      	ldr	r4, [r3, #20]
 80156a0:	68f8      	ldr	r0, [r7, #12]
 80156a2:	68bb      	ldr	r3, [r7, #8]
 80156a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80156a8:	461a      	mov	r2, r3
 80156aa:	2301      	movs	r3, #1
 80156ac:	9303      	str	r3, [sp, #12]
 80156ae:	9202      	str	r2, [sp, #8]
 80156b0:	4b97      	ldr	r3, [pc, #604]	; (8015910 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x28c>)
 80156b2:	9301      	str	r3, [sp, #4]
 80156b4:	4b97      	ldr	r3, [pc, #604]	; (8015914 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x290>)
 80156b6:	9300      	str	r3, [sp, #0]
 80156b8:	2331      	movs	r3, #49	; 0x31
 80156ba:	4a97      	ldr	r2, [pc, #604]	; (8015918 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 80156bc:	4997      	ldr	r1, [pc, #604]	; (801591c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 80156be:	47a0      	blx	r4
 80156c0:	2301      	movs	r3, #1
 80156c2:	e171      	b.n	80159a8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x324>
                    kTfLiteAffineQuantization);
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80156ca:	2b01      	cmp	r3, #1
 80156cc:	d013      	beq.n	80156f6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x72>
 80156ce:	68fb      	ldr	r3, [r7, #12]
 80156d0:	695c      	ldr	r4, [r3, #20]
 80156d2:	68f8      	ldr	r0, [r7, #12]
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80156da:	461a      	mov	r2, r3
 80156dc:	2301      	movs	r3, #1
 80156de:	9303      	str	r3, [sp, #12]
 80156e0:	9202      	str	r2, [sp, #8]
 80156e2:	4b8b      	ldr	r3, [pc, #556]	; (8015910 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x28c>)
 80156e4:	9301      	str	r3, [sp, #4]
 80156e6:	4b8e      	ldr	r3, [pc, #568]	; (8015920 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x29c>)
 80156e8:	9300      	str	r3, [sp, #0]
 80156ea:	2333      	movs	r3, #51	; 0x33
 80156ec:	4a8a      	ldr	r2, [pc, #552]	; (8015918 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 80156ee:	498b      	ldr	r1, [pc, #556]	; (801591c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 80156f0:	47a0      	blx	r4
 80156f2:	2301      	movs	r3, #1
 80156f4:	e158      	b.n	80159a8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x324>
  // TF_LITE_ENSURE_EQ(context, bias->quantization.type,
  // kTfLiteAffineQuantization);

  // Check data type.
  const auto* affine_quantization =
      reinterpret_cast<TfLiteAffineQuantization*>(filter->quantization.params);
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  const auto* affine_quantization =
 80156fa:	62bb      	str	r3, [r7, #40]	; 0x28
  TF_LITE_ENSURE(context, affine_quantization);
 80156fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156fe:	2b00      	cmp	r3, #0
 8015700:	d10a      	bne.n	8015718 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x94>
 8015702:	68fb      	ldr	r3, [r7, #12]
 8015704:	695c      	ldr	r4, [r3, #20]
 8015706:	68f8      	ldr	r0, [r7, #12]
 8015708:	4b86      	ldr	r3, [pc, #536]	; (8015924 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a0>)
 801570a:	9300      	str	r3, [sp, #0]
 801570c:	233d      	movs	r3, #61	; 0x3d
 801570e:	4a82      	ldr	r2, [pc, #520]	; (8015918 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 8015710:	4985      	ldr	r1, [pc, #532]	; (8015928 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a4>)
 8015712:	47a0      	blx	r4
 8015714:	2301      	movs	r3, #1
 8015716:	e147      	b.n	80159a8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x324>
  TF_LITE_ENSURE(context, affine_quantization->scale);
 8015718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801571a:	681b      	ldr	r3, [r3, #0]
 801571c:	2b00      	cmp	r3, #0
 801571e:	d10a      	bne.n	8015736 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xb2>
 8015720:	68fb      	ldr	r3, [r7, #12]
 8015722:	695c      	ldr	r4, [r3, #20]
 8015724:	68f8      	ldr	r0, [r7, #12]
 8015726:	4b81      	ldr	r3, [pc, #516]	; (801592c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a8>)
 8015728:	9300      	str	r3, [sp, #0]
 801572a:	233e      	movs	r3, #62	; 0x3e
 801572c:	4a7a      	ldr	r2, [pc, #488]	; (8015918 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 801572e:	497e      	ldr	r1, [pc, #504]	; (8015928 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a4>)
 8015730:	47a0      	blx	r4
 8015732:	2301      	movs	r3, #1
 8015734:	e138      	b.n	80159a8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x324>
  const bool is_per_channel = affine_quantization->scale->size > 1;
 8015736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015738:	681b      	ldr	r3, [r3, #0]
 801573a:	681b      	ldr	r3, [r3, #0]
 801573c:	2b01      	cmp	r3, #1
 801573e:	bfcc      	ite	gt
 8015740:	2301      	movgt	r3, #1
 8015742:	2300      	movle	r3, #0
 8015744:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  if (is_per_channel) {
 8015748:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801574c:	2b00      	cmp	r3, #0
 801574e:	d067      	beq.n	8015820 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x19c>
    //  Currently only Int8/Int16 is supported for per channel quantization.
    TF_LITE_ENSURE(context,
 8015750:	68bb      	ldr	r3, [r7, #8]
 8015752:	781b      	ldrb	r3, [r3, #0]
 8015754:	2b09      	cmp	r3, #9
 8015756:	d00e      	beq.n	8015776 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xf2>
 8015758:	68bb      	ldr	r3, [r7, #8]
 801575a:	781b      	ldrb	r3, [r3, #0]
 801575c:	2b07      	cmp	r3, #7
 801575e:	d00a      	beq.n	8015776 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xf2>
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	695c      	ldr	r4, [r3, #20]
 8015764:	68f8      	ldr	r0, [r7, #12]
 8015766:	4b72      	ldr	r3, [pc, #456]	; (8015930 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2ac>)
 8015768:	9300      	str	r3, [sp, #0]
 801576a:	2343      	movs	r3, #67	; 0x43
 801576c:	4a6a      	ldr	r2, [pc, #424]	; (8015918 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 801576e:	496e      	ldr	r1, [pc, #440]	; (8015928 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a4>)
 8015770:	47a0      	blx	r4
 8015772:	2301      	movs	r3, #1
 8015774:	e118      	b.n	80159a8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x324>
                   input->type == kTfLiteInt8 || input->type == kTfLiteInt16);
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	781b      	ldrb	r3, [r3, #0]
 801577a:	2b09      	cmp	r3, #9
 801577c:	d012      	beq.n	80157a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x120>
 801577e:	68fb      	ldr	r3, [r7, #12]
 8015780:	695c      	ldr	r4, [r3, #20]
 8015782:	68f8      	ldr	r0, [r7, #12]
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	781b      	ldrb	r3, [r3, #0]
 8015788:	461a      	mov	r2, r3
 801578a:	2309      	movs	r3, #9
 801578c:	9303      	str	r3, [sp, #12]
 801578e:	9202      	str	r2, [sp, #8]
 8015790:	4b68      	ldr	r3, [pc, #416]	; (8015934 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b0>)
 8015792:	9301      	str	r3, [sp, #4]
 8015794:	4b68      	ldr	r3, [pc, #416]	; (8015938 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b4>)
 8015796:	9300      	str	r3, [sp, #0]
 8015798:	2344      	movs	r3, #68	; 0x44
 801579a:	4a5f      	ldr	r2, [pc, #380]	; (8015918 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 801579c:	495f      	ldr	r1, [pc, #380]	; (801591c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 801579e:	47a0      	blx	r4
 80157a0:	2301      	movs	r3, #1
 80157a2:	e101      	b.n	80159a8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x324>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
 80157a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157a6:	681b      	ldr	r3, [r3, #0]
 80157a8:	681a      	ldr	r2, [r3, #0]
 80157aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80157ae:	429a      	cmp	r2, r3
 80157b0:	d013      	beq.n	80157da <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x156>
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	695c      	ldr	r4, [r3, #20]
 80157b6:	68f8      	ldr	r0, [r7, #12]
 80157b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157ba:	681b      	ldr	r3, [r3, #0]
 80157bc:	681b      	ldr	r3, [r3, #0]
 80157be:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80157c2:	9203      	str	r2, [sp, #12]
 80157c4:	9302      	str	r3, [sp, #8]
 80157c6:	4b5d      	ldr	r3, [pc, #372]	; (801593c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b8>)
 80157c8:	9301      	str	r3, [sp, #4]
 80157ca:	4b5d      	ldr	r3, [pc, #372]	; (8015940 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2bc>)
 80157cc:	9300      	str	r3, [sp, #0]
 80157ce:	2345      	movs	r3, #69	; 0x45
 80157d0:	4a51      	ldr	r2, [pc, #324]	; (8015918 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 80157d2:	4952      	ldr	r1, [pc, #328]	; (801591c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 80157d4:	47a0      	blx	r4
 80157d6:	2301      	movs	r3, #1
 80157d8:	e0e6      	b.n	80159a8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x324>
    TF_LITE_ENSURE_EQ(
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	689a      	ldr	r2, [r3, #8]
 80157de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157e0:	689b      	ldr	r3, [r3, #8]
 80157e2:	009b      	lsls	r3, r3, #2
 80157e4:	4413      	add	r3, r2
 80157e6:	685a      	ldr	r2, [r3, #4]
 80157e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80157ec:	429a      	cmp	r2, r3
 80157ee:	d017      	beq.n	8015820 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x19c>
 80157f0:	68fb      	ldr	r3, [r7, #12]
 80157f2:	695c      	ldr	r4, [r3, #20]
 80157f4:	68f8      	ldr	r0, [r7, #12]
 80157f6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	6899      	ldr	r1, [r3, #8]
 80157fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015800:	689b      	ldr	r3, [r3, #8]
 8015802:	009b      	lsls	r3, r3, #2
 8015804:	440b      	add	r3, r1
 8015806:	685b      	ldr	r3, [r3, #4]
 8015808:	9303      	str	r3, [sp, #12]
 801580a:	9202      	str	r2, [sp, #8]
 801580c:	4b4d      	ldr	r3, [pc, #308]	; (8015944 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2c0>)
 801580e:	9301      	str	r3, [sp, #4]
 8015810:	4b4a      	ldr	r3, [pc, #296]	; (801593c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b8>)
 8015812:	9300      	str	r3, [sp, #0]
 8015814:	2348      	movs	r3, #72	; 0x48
 8015816:	4a40      	ldr	r2, [pc, #256]	; (8015918 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 8015818:	4940      	ldr	r1, [pc, #256]	; (801591c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 801581a:	47a0      	blx	r4
 801581c:	2301      	movs	r3, #1
 801581e:	e0c3      	b.n	80159a8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x324>
        context, num_channels,
        filter->dims->data[affine_quantization->quantized_dimension]);
  }

  // Populate multiplier and shift using affine quantization.
  const float input_scale = input->params.scale;
 8015820:	68bb      	ldr	r3, [r7, #8]
 8015822:	68db      	ldr	r3, [r3, #12]
 8015824:	64fb      	str	r3, [r7, #76]	; 0x4c
  const float output_scale = output->params.scale;
 8015826:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015828:	68db      	ldr	r3, [r3, #12]
 801582a:	64bb      	str	r3, [r7, #72]	; 0x48
  const float* filter_scales = affine_quantization->scale->data;
 801582c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801582e:	681b      	ldr	r3, [r3, #0]
 8015830:	3304      	adds	r3, #4
 8015832:	647b      	str	r3, [r7, #68]	; 0x44
  for (int i = 0; i < num_channels; ++i) {
 8015834:	2300      	movs	r3, #0
 8015836:	657b      	str	r3, [r7, #84]	; 0x54
 8015838:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801583c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801583e:	429a      	cmp	r2, r3
 8015840:	da47      	bge.n	80158d2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x24e>
    // If per-tensor quantization parameter is specified, broadcast it along the
    // quantization dimension (channels_out).
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
 8015842:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8015846:	2b00      	cmp	r3, #0
 8015848:	d005      	beq.n	8015856 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1d2>
 801584a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801584c:	009b      	lsls	r3, r3, #2
 801584e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015850:	4413      	add	r3, r2
 8015852:	681b      	ldr	r3, [r3, #0]
 8015854:	e001      	b.n	801585a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1d6>
 8015856:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015858:	681b      	ldr	r3, [r3, #0]
 801585a:	643b      	str	r3, [r7, #64]	; 0x40
    const double filter_scale = static_cast<double>(scale);
 801585c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801585e:	f7ea fe61 	bl	8000524 <__aeabi_f2d>
 8015862:	4603      	mov	r3, r0
 8015864:	460c      	mov	r4, r1
 8015866:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    const double effective_output_scale = static_cast<double>(input_scale) *
 801586a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801586c:	f7ea fe5a 	bl	8000524 <__aeabi_f2d>
 8015870:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8015874:	f7ea feae 	bl	80005d4 <__aeabi_dmul>
 8015878:	4603      	mov	r3, r0
 801587a:	460c      	mov	r4, r1
 801587c:	4625      	mov	r5, r4
 801587e:	461c      	mov	r4, r3
                                          filter_scale /
                                          static_cast<double>(output_scale);
 8015880:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8015882:	f7ea fe4f 	bl	8000524 <__aeabi_f2d>
 8015886:	4602      	mov	r2, r0
 8015888:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
 801588a:	4620      	mov	r0, r4
 801588c:	4629      	mov	r1, r5
 801588e:	f7ea ffcb 	bl	8000828 <__aeabi_ddiv>
 8015892:	4603      	mov	r3, r0
 8015894:	460c      	mov	r4, r1
 8015896:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    int32_t significand;
    int channel_shift;
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
 801589a:	f107 0220 	add.w	r2, r7, #32
 801589e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80158a2:	4611      	mov	r1, r2
 80158a4:	4618      	mov	r0, r3
 80158a6:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 80158aa:	f7ff fcad 	bl	8015208 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    per_channel_multiplier[i] = significand;
 80158ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80158b0:	009b      	lsls	r3, r3, #2
 80158b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80158b6:	4413      	add	r3, r2
 80158b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80158ba:	601a      	str	r2, [r3, #0]
    per_channel_shift[i] = channel_shift;
 80158bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80158be:	009b      	lsls	r3, r3, #2
 80158c0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80158c4:	4413      	add	r3, r2
 80158c6:	6a3a      	ldr	r2, [r7, #32]
 80158c8:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < num_channels; ++i) {
 80158ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80158cc:	3301      	adds	r3, #1
 80158ce:	657b      	str	r3, [r7, #84]	; 0x54
 80158d0:	e7b2      	b.n	8015838 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1b4>
  }

  // Populate scalar quantization parameters.
  // This check on legacy quantization parameters is kept only for backward
  // compatibility.
  if (input->type == kTfLiteUInt8) {
 80158d2:	68bb      	ldr	r3, [r7, #8]
 80158d4:	781b      	ldrb	r3, [r3, #0]
 80158d6:	2b03      	cmp	r3, #3
 80158d8:	d146      	bne.n	8015968 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2e4>
    // Check bias scale == input scale * filter scale.
    double real_multiplier = 0.0;
 80158da:	f04f 0300 	mov.w	r3, #0
 80158de:	f04f 0400 	mov.w	r4, #0
 80158e2:	e9c7 3406 	strd	r3, r4, [r7, #24]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 80158e6:	68f8      	ldr	r0, [r7, #12]
 80158e8:	f107 0318 	add.w	r3, r7, #24
 80158ec:	9301      	str	r3, [sp, #4]
 80158ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80158f0:	9300      	str	r3, [sp, #0]
 80158f2:	683b      	ldr	r3, [r7, #0]
 80158f4:	687a      	ldr	r2, [r7, #4]
 80158f6:	68b9      	ldr	r1, [r7, #8]
 80158f8:	f000 f85a 	bl	80159b0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 80158fc:	4603      	mov	r3, r0
 80158fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8015902:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015906:	2b00      	cmp	r3, #0
 8015908:	d01e      	beq.n	8015948 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2c4>
 801590a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801590e:	e04b      	b.n	80159a8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x324>
 8015910:	08022844 	.word	0x08022844
 8015914:	08022860 	.word	0x08022860
 8015918:	080227ec 	.word	0x080227ec
 801591c:	08022828 	.word	0x08022828
 8015920:	0802287c 	.word	0x0802287c
 8015924:	080228b0 	.word	0x080228b0
 8015928:	08022898 	.word	0x08022898
 801592c:	080228c4 	.word	0x080228c4
 8015930:	080228e0 	.word	0x080228e0
 8015934:	0802291c 	.word	0x0802291c
 8015938:	08022928 	.word	0x08022928
 801593c:	08022938 	.word	0x08022938
 8015940:	08022948 	.word	0x08022948
 8015944:	0802296c 	.word	0x0802296c
        context, input, filter, bias, output, &real_multiplier));
    int exponent;

    // Populate quantization parameters with multiplier and shift.
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
 8015948:	ed97 7b06 	vldr	d7, [r7, #24]
 801594c:	f107 0314 	add.w	r3, r7, #20
 8015950:	4619      	mov	r1, r3
 8015952:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8015954:	eeb0 0a47 	vmov.f32	s0, s14
 8015958:	eef0 0a67 	vmov.f32	s1, s15
 801595c:	f7ff fc54 	bl	8015208 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    *shift = -exponent;
 8015960:	697b      	ldr	r3, [r7, #20]
 8015962:	425a      	negs	r2, r3
 8015964:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015966:	601a      	str	r2, [r3, #0]
  }
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 8015968:	68bb      	ldr	r3, [r7, #8]
 801596a:	781b      	ldrb	r3, [r3, #0]
 801596c:	2b09      	cmp	r3, #9
 801596e:	d007      	beq.n	8015980 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2fc>
 8015970:	68bb      	ldr	r3, [r7, #8]
 8015972:	781b      	ldrb	r3, [r3, #0]
 8015974:	2b03      	cmp	r3, #3
 8015976:	d003      	beq.n	8015980 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2fc>
      input->type == kTfLiteInt16) {
 8015978:	68bb      	ldr	r3, [r7, #8]
 801597a:	781b      	ldrb	r3, [r3, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 801597c:	2b07      	cmp	r3, #7
 801597e:	d112      	bne.n	80159a6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x322>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 8015980:	68f8      	ldr	r0, [r7, #12]
 8015982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015984:	7819      	ldrb	r1, [r3, #0]
 8015986:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8015988:	9300      	str	r3, [sp, #0]
 801598a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801598c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801598e:	f000 f997 	bl	8015cc0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 8015992:	4603      	mov	r3, r0
 8015994:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8015998:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801599c:	2b00      	cmp	r3, #0
 801599e:	d002      	beq.n	80159a6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x322>
 80159a0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80159a4:	e000      	b.n	80159a8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x324>
        context, activation, output, output_activation_min,
        output_activation_max));
  }
  return kTfLiteOk;
 80159a6:	2300      	movs	r3, #0
}
 80159a8:	4618      	mov	r0, r3
 80159aa:	3758      	adds	r7, #88	; 0x58
 80159ac:	46bd      	mov	sp, r7
 80159ae:	bdb0      	pop	{r4, r5, r7, pc}

080159b0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 80159b0:	b5b0      	push	{r4, r5, r7, lr}
 80159b2:	b08e      	sub	sp, #56	; 0x38
 80159b4:	af02      	add	r7, sp, #8
 80159b6:	60f8      	str	r0, [r7, #12]
 80159b8:	60b9      	str	r1, [r7, #8]
 80159ba:	607a      	str	r2, [r7, #4]
 80159bc:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 80159be:	68bb      	ldr	r3, [r7, #8]
 80159c0:	68db      	ldr	r3, [r3, #12]
 80159c2:	4618      	mov	r0, r3
 80159c4:	f7ea fdae 	bl	8000524 <__aeabi_f2d>
 80159c8:	4604      	mov	r4, r0
 80159ca:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	68db      	ldr	r3, [r3, #12]
 80159d0:	4618      	mov	r0, r3
 80159d2:	f7ea fda7 	bl	8000524 <__aeabi_f2d>
 80159d6:	4602      	mov	r2, r0
 80159d8:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 80159da:	4620      	mov	r0, r4
 80159dc:	4629      	mov	r1, r5
 80159de:	f7ea fdf9 	bl	80005d4 <__aeabi_dmul>
 80159e2:	4603      	mov	r3, r0
 80159e4:	460c      	mov	r4, r1
 80159e6:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  // TODO(ahentz): The following conditions must be guaranteed by the training
  // pipeline.
  if (bias) {
 80159ea:	683b      	ldr	r3, [r7, #0]
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d04a      	beq.n	8015a86 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd6>
    const double bias_scale = static_cast<double>(bias->params.scale);
 80159f0:	683b      	ldr	r3, [r7, #0]
 80159f2:	68db      	ldr	r3, [r3, #12]
 80159f4:	4618      	mov	r0, r3
 80159f6:	f7ea fd95 	bl	8000524 <__aeabi_f2d>
 80159fa:	4603      	mov	r3, r0
 80159fc:	460c      	mov	r4, r1
 80159fe:	e9c7 3408 	strd	r3, r4, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 8015a02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8015a06:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8015a0a:	f7ea fc2b 	bl	8000264 <__aeabi_dsub>
 8015a0e:	4603      	mov	r3, r0
 8015a10:	460c      	mov	r4, r1
 8015a12:	ec44 3b17 	vmov	d7, r3, r4
 8015a16:	eeb0 0a47 	vmov.f32	s0, s14
 8015a1a:	eef0 0a67 	vmov.f32	s1, s15
 8015a1e:	f7ff fdca 	bl	80155b6 <_ZSt3absd>
 8015a22:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 8015a26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015a28:	68db      	ldr	r3, [r3, #12]
 8015a2a:	4618      	mov	r0, r3
 8015a2c:	f7ea fd7a 	bl	8000524 <__aeabi_f2d>
 8015a30:	4603      	mov	r3, r0
 8015a32:	460c      	mov	r4, r1
 8015a34:	e9c7 3404 	strd	r3, r4, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 8015a38:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8015a3c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8015a40:	f7ea fef2 	bl	8000828 <__aeabi_ddiv>
 8015a44:	4603      	mov	r3, r0
 8015a46:	460c      	mov	r4, r1
 8015a48:	4618      	mov	r0, r3
 8015a4a:	4621      	mov	r1, r4
 8015a4c:	2301      	movs	r3, #1
 8015a4e:	461c      	mov	r4, r3
 8015a50:	a316      	add	r3, pc, #88	; (adr r3, 8015aac <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 8015a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a56:	f7eb f839 	bl	8000acc <__aeabi_dcmple>
 8015a5a:	4603      	mov	r3, r0
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d101      	bne.n	8015a64 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 8015a60:	2300      	movs	r3, #0
 8015a62:	461c      	mov	r4, r3
 8015a64:	b2e3      	uxtb	r3, r4
 8015a66:	f083 0301 	eor.w	r3, r3, #1
 8015a6a:	b2db      	uxtb	r3, r3
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d00a      	beq.n	8015a86 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd6>
 8015a70:	68fb      	ldr	r3, [r7, #12]
 8015a72:	695c      	ldr	r4, [r3, #20]
 8015a74:	68f8      	ldr	r0, [r7, #12]
 8015a76:	4b0a      	ldr	r3, [pc, #40]	; (8015aa0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf0>)
 8015a78:	9300      	str	r3, [sp, #0]
 8015a7a:	2395      	movs	r3, #149	; 0x95
 8015a7c:	4a09      	ldr	r2, [pc, #36]	; (8015aa4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf4>)
 8015a7e:	490a      	ldr	r1, [pc, #40]	; (8015aa8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 8015a80:	47a0      	blx	r4
 8015a82:	2301      	movs	r3, #1
 8015a84:	e008      	b.n	8015a98 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xe8>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 8015a86:	68f8      	ldr	r0, [r7, #12]
                                          multiplier);
 8015a88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015a8a:	9300      	str	r3, [sp, #0]
 8015a8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015a8e:	687a      	ldr	r2, [r7, #4]
 8015a90:	68b9      	ldr	r1, [r7, #8]
 8015a92:	f000 f80f 	bl	8015ab4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 8015a96:	4603      	mov	r3, r0
}
 8015a98:	4618      	mov	r0, r3
 8015a9a:	3730      	adds	r7, #48	; 0x30
 8015a9c:	46bd      	mov	sp, r7
 8015a9e:	bdb0      	pop	{r4, r5, r7, pc}
 8015aa0:	080229ac 	.word	0x080229ac
 8015aa4:	080227ec 	.word	0x080227ec
 8015aa8:	08022898 	.word	0x08022898
 8015aac:	47ae147b 	.word	0x47ae147b
 8015ab0:	3f947ae1 	.word	0x3f947ae1

08015ab4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 8015ab4:	b590      	push	{r4, r7, lr}
 8015ab6:	b089      	sub	sp, #36	; 0x24
 8015ab8:	af02      	add	r7, sp, #8
 8015aba:	60f8      	str	r0, [r7, #12]
 8015abc:	60b9      	str	r1, [r7, #8]
 8015abe:	607a      	str	r2, [r7, #4]
 8015ac0:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 8015ac2:	68bb      	ldr	r3, [r7, #8]
 8015ac4:	ed93 7a03 	vldr	s14, [r3, #12]
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	edd3 7a03 	vldr	s15, [r3, #12]
 8015ace:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 8015ad2:	ee17 0a90 	vmov	r0, s15
 8015ad6:	f7ea fd25 	bl	8000524 <__aeabi_f2d>
 8015ada:	4603      	mov	r3, r0
 8015adc:	460c      	mov	r4, r1
 8015ade:	e9c7 3404 	strd	r3, r4, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 8015ae2:	2301      	movs	r3, #1
 8015ae4:	461c      	mov	r4, r3
 8015ae6:	f04f 0200 	mov.w	r2, #0
 8015aea:	f04f 0300 	mov.w	r3, #0
 8015aee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8015af2:	f7ea fff5 	bl	8000ae0 <__aeabi_dcmpge>
 8015af6:	4603      	mov	r3, r0
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	d101      	bne.n	8015b00 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 8015afc:	2300      	movs	r3, #0
 8015afe:	461c      	mov	r4, r3
 8015b00:	b2e3      	uxtb	r3, r4
 8015b02:	f083 0301 	eor.w	r3, r3, #1
 8015b06:	b2db      	uxtb	r3, r3
 8015b08:	2b00      	cmp	r3, #0
 8015b0a:	d00a      	beq.n	8015b22 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x6e>
 8015b0c:	68fb      	ldr	r3, [r7, #12]
 8015b0e:	695c      	ldr	r4, [r3, #20]
 8015b10:	68f8      	ldr	r0, [r7, #12]
 8015b12:	4b0f      	ldr	r3, [pc, #60]	; (8015b50 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x9c>)
 8015b14:	9300      	str	r3, [sp, #0]
 8015b16:	23a2      	movs	r3, #162	; 0xa2
 8015b18:	4a0e      	ldr	r2, [pc, #56]	; (8015b54 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 8015b1a:	490f      	ldr	r1, [pc, #60]	; (8015b58 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa4>)
 8015b1c:	47a0      	blx	r4
 8015b1e:	2301      	movs	r3, #1
 8015b20:	e012      	b.n	8015b48 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x94>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 8015b22:	683b      	ldr	r3, [r7, #0]
 8015b24:	68db      	ldr	r3, [r3, #12]
 8015b26:	4618      	mov	r0, r3
 8015b28:	f7ea fcfc 	bl	8000524 <__aeabi_f2d>
 8015b2c:	4603      	mov	r3, r0
 8015b2e:	460c      	mov	r4, r1
 8015b30:	461a      	mov	r2, r3
 8015b32:	4623      	mov	r3, r4
 8015b34:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8015b38:	f7ea fe76 	bl	8000828 <__aeabi_ddiv>
 8015b3c:	4603      	mov	r3, r0
 8015b3e:	460c      	mov	r4, r1
 8015b40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015b42:	e9c2 3400 	strd	r3, r4, [r2]

  return kTfLiteOk;
 8015b46:	2300      	movs	r3, #0
}
 8015b48:	4618      	mov	r0, r3
 8015b4a:	371c      	adds	r7, #28
 8015b4c:	46bd      	mov	sp, r7
 8015b4e:	bd90      	pop	{r4, r7, pc}
 8015b50:	080229d0 	.word	0x080229d0
 8015b54:	080227ec 	.word	0x080227ec
 8015b58:	08022898 	.word	0x08022898

08015b5c <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>:
                                           TfLiteTensor* output,
                                           int32_t* act_min, int32_t* act_max) {
  const auto scale = output->params.scale;
  const auto zero_point = output->params.zero_point;

  auto quantize = [scale, zero_point](float f) {
 8015b5c:	b580      	push	{r7, lr}
 8015b5e:	b082      	sub	sp, #8
 8015b60:	af00      	add	r7, sp, #0
 8015b62:	6078      	str	r0, [r7, #4]
 8015b64:	ed87 0a00 	vstr	s0, [r7]
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	edd3 7a00 	vldr	s15, [r3]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 8015b6e:	ed97 7a00 	vldr	s14, [r7]
 8015b72:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8015b76:	eeb0 0a66 	vmov.f32	s0, s13
 8015b7a:	f7ff fd0c 	bl	8015596 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8015b7e:	eef0 7a40 	vmov.f32	s15, s0
 8015b82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015b86:	ee17 2a90 	vmov	r2, s15
  auto quantize = [scale, zero_point](float f) {
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	685b      	ldr	r3, [r3, #4]
  };
 8015b8e:	4413      	add	r3, r2
 8015b90:	4618      	mov	r0, r3
 8015b92:	3708      	adds	r7, #8
 8015b94:	46bd      	mov	sp, r7
 8015b96:	bd80      	pop	{r7, pc}

08015b98 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>:
                                           int32_t* act_min, int32_t* act_max) {
 8015b98:	b580      	push	{r7, lr}
 8015b9a:	b08e      	sub	sp, #56	; 0x38
 8015b9c:	af00      	add	r7, sp, #0
 8015b9e:	60b9      	str	r1, [r7, #8]
 8015ba0:	607a      	str	r2, [r7, #4]
 8015ba2:	603b      	str	r3, [r7, #0]
 8015ba4:	4603      	mov	r3, r0
 8015ba6:	73fb      	strb	r3, [r7, #15]
  const auto scale = output->params.scale;
 8015ba8:	683b      	ldr	r3, [r7, #0]
 8015baa:	68db      	ldr	r3, [r3, #12]
 8015bac:	637b      	str	r3, [r7, #52]	; 0x34
  const auto zero_point = output->params.zero_point;
 8015bae:	683b      	ldr	r3, [r7, #0]
 8015bb0:	691b      	ldr	r3, [r3, #16]
 8015bb2:	633b      	str	r3, [r7, #48]	; 0x30
  };
 8015bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015bb6:	617b      	str	r3, [r7, #20]
 8015bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bba:	61bb      	str	r3, [r7, #24]

  if (activation == kTfLiteActRelu) {
 8015bbc:	7bfb      	ldrb	r3, [r7, #15]
 8015bbe:	2b01      	cmp	r3, #1
 8015bc0:	d118      	bne.n	8015bf4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x5c>
    *act_min = std::max(qmin, quantize(0.0));
 8015bc2:	f107 0314 	add.w	r3, r7, #20
 8015bc6:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8015cbc <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 8015bca:	4618      	mov	r0, r3
 8015bcc:	f7ff ffc6 	bl	8015b5c <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8015bd0:	4603      	mov	r3, r0
 8015bd2:	61fb      	str	r3, [r7, #28]
 8015bd4:	f107 021c 	add.w	r2, r7, #28
 8015bd8:	f107 0308 	add.w	r3, r7, #8
 8015bdc:	4611      	mov	r1, r2
 8015bde:	4618      	mov	r0, r3
 8015be0:	f000 f8d6 	bl	8015d90 <_ZSt3maxIlERKT_S2_S2_>
 8015be4:	4603      	mov	r3, r0
 8015be6:	681a      	ldr	r2, [r3, #0]
 8015be8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015bea:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 8015bec:	687a      	ldr	r2, [r7, #4]
 8015bee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015bf0:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
  } else {
    *act_min = qmin;
    *act_max = qmax;
  }
}
 8015bf2:	e05f      	b.n	8015cb4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActRelu6) {
 8015bf4:	7bfb      	ldrb	r3, [r7, #15]
 8015bf6:	2b03      	cmp	r3, #3
 8015bf8:	d129      	bne.n	8015c4e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0xb6>
    *act_min = std::max(qmin, quantize(0.0));
 8015bfa:	f107 0314 	add.w	r3, r7, #20
 8015bfe:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8015cbc <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 8015c02:	4618      	mov	r0, r3
 8015c04:	f7ff ffaa 	bl	8015b5c <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8015c08:	4603      	mov	r3, r0
 8015c0a:	623b      	str	r3, [r7, #32]
 8015c0c:	f107 0220 	add.w	r2, r7, #32
 8015c10:	f107 0308 	add.w	r3, r7, #8
 8015c14:	4611      	mov	r1, r2
 8015c16:	4618      	mov	r0, r3
 8015c18:	f000 f8ba 	bl	8015d90 <_ZSt3maxIlERKT_S2_S2_>
 8015c1c:	4603      	mov	r3, r0
 8015c1e:	681a      	ldr	r2, [r3, #0]
 8015c20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015c22:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(6.0));
 8015c24:	f107 0314 	add.w	r3, r7, #20
 8015c28:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8015c2c:	4618      	mov	r0, r3
 8015c2e:	f7ff ff95 	bl	8015b5c <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8015c32:	4603      	mov	r3, r0
 8015c34:	627b      	str	r3, [r7, #36]	; 0x24
 8015c36:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015c3a:	1d3b      	adds	r3, r7, #4
 8015c3c:	4611      	mov	r1, r2
 8015c3e:	4618      	mov	r0, r3
 8015c40:	f000 f8ba 	bl	8015db8 <_ZSt3minIlERKT_S2_S2_>
 8015c44:	4603      	mov	r3, r0
 8015c46:	681a      	ldr	r2, [r3, #0]
 8015c48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015c4a:	601a      	str	r2, [r3, #0]
}
 8015c4c:	e032      	b.n	8015cb4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActRelu1) {
 8015c4e:	7bfb      	ldrb	r3, [r7, #15]
 8015c50:	2b02      	cmp	r3, #2
 8015c52:	d129      	bne.n	8015ca8 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x110>
    *act_min = std::max(qmin, quantize(-1.0));
 8015c54:	f107 0314 	add.w	r3, r7, #20
 8015c58:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8015c5c:	4618      	mov	r0, r3
 8015c5e:	f7ff ff7d 	bl	8015b5c <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8015c62:	4603      	mov	r3, r0
 8015c64:	62bb      	str	r3, [r7, #40]	; 0x28
 8015c66:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8015c6a:	f107 0308 	add.w	r3, r7, #8
 8015c6e:	4611      	mov	r1, r2
 8015c70:	4618      	mov	r0, r3
 8015c72:	f000 f88d 	bl	8015d90 <_ZSt3maxIlERKT_S2_S2_>
 8015c76:	4603      	mov	r3, r0
 8015c78:	681a      	ldr	r2, [r3, #0]
 8015c7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015c7c:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
 8015c7e:	f107 0314 	add.w	r3, r7, #20
 8015c82:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015c86:	4618      	mov	r0, r3
 8015c88:	f7ff ff68 	bl	8015b5c <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8015c8c:	4603      	mov	r3, r0
 8015c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015c90:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8015c94:	1d3b      	adds	r3, r7, #4
 8015c96:	4611      	mov	r1, r2
 8015c98:	4618      	mov	r0, r3
 8015c9a:	f000 f88d 	bl	8015db8 <_ZSt3minIlERKT_S2_S2_>
 8015c9e:	4603      	mov	r3, r0
 8015ca0:	681a      	ldr	r2, [r3, #0]
 8015ca2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015ca4:	601a      	str	r2, [r3, #0]
}
 8015ca6:	e005      	b.n	8015cb4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
    *act_min = qmin;
 8015ca8:	68ba      	ldr	r2, [r7, #8]
 8015caa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015cac:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 8015cae:	687a      	ldr	r2, [r7, #4]
 8015cb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015cb2:	601a      	str	r2, [r3, #0]
}
 8015cb4:	bf00      	nop
 8015cb6:	3738      	adds	r7, #56	; 0x38
 8015cb8:	46bd      	mov	sp, r7
 8015cba:	bd80      	pop	{r7, pc}
 8015cbc:	00000000 	.word	0x00000000

08015cc0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 8015cc0:	b590      	push	{r4, r7, lr}
 8015cc2:	b089      	sub	sp, #36	; 0x24
 8015cc4:	af02      	add	r7, sp, #8
 8015cc6:	60f8      	str	r0, [r7, #12]
 8015cc8:	607a      	str	r2, [r7, #4]
 8015cca:	603b      	str	r3, [r7, #0]
 8015ccc:	460b      	mov	r3, r1
 8015cce:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 8015cd0:	2300      	movs	r3, #0
 8015cd2:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 8015cd4:	2300      	movs	r3, #0
 8015cd6:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	781b      	ldrb	r3, [r3, #0]
 8015cdc:	2b03      	cmp	r3, #3
 8015cde:	d108      	bne.n	8015cf2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 8015ce0:	f7ff fc8d 	bl	80155fe <_ZNSt14numeric_limitsIhE3minEv>
 8015ce4:	4603      	mov	r3, r0
 8015ce6:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 8015ce8:	f7ff fc91 	bl	801560e <_ZNSt14numeric_limitsIhE3maxEv>
 8015cec:	4603      	mov	r3, r0
 8015cee:	613b      	str	r3, [r7, #16]
 8015cf0:	e024      	b.n	8015d3c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7c>
  } else if (output->type == kTfLiteInt8) {
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	781b      	ldrb	r3, [r3, #0]
 8015cf6:	2b09      	cmp	r3, #9
 8015cf8:	d108      	bne.n	8015d0c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 8015cfa:	f7ff fc6f 	bl	80155dc <_ZNSt14numeric_limitsIaE3minEv>
 8015cfe:	4603      	mov	r3, r0
 8015d00:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 8015d02:	f7ff fc74 	bl	80155ee <_ZNSt14numeric_limitsIaE3maxEv>
 8015d06:	4603      	mov	r3, r0
 8015d08:	613b      	str	r3, [r7, #16]
 8015d0a:	e017      	b.n	8015d3c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7c>
  } else if (output->type == kTfLiteInt16) {
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	781b      	ldrb	r3, [r3, #0]
 8015d10:	2b07      	cmp	r3, #7
 8015d12:	d108      	bne.n	8015d26 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 8015d14:	f7ff fc84 	bl	8015620 <_ZNSt14numeric_limitsIsE3minEv>
 8015d18:	4603      	mov	r3, r0
 8015d1a:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 8015d1c:	f7ff fc8a 	bl	8015634 <_ZNSt14numeric_limitsIsE3maxEv>
 8015d20:	4603      	mov	r3, r0
 8015d22:	613b      	str	r3, [r7, #16]
 8015d24:	e00a      	b.n	8015d3c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7c>
  } else {
    TF_LITE_ENSURE(context, false);
 8015d26:	68fb      	ldr	r3, [r7, #12]
 8015d28:	695c      	ldr	r4, [r3, #20]
 8015d2a:	68f8      	ldr	r0, [r7, #12]
 8015d2c:	4b0b      	ldr	r3, [pc, #44]	; (8015d5c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9c>)
 8015d2e:	9300      	str	r3, [sp, #0]
 8015d30:	23d5      	movs	r3, #213	; 0xd5
 8015d32:	4a0b      	ldr	r2, [pc, #44]	; (8015d60 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa0>)
 8015d34:	490b      	ldr	r1, [pc, #44]	; (8015d64 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 8015d36:	47a0      	blx	r4
 8015d38:	2301      	movs	r3, #1
 8015d3a:	e00a      	b.n	8015d52 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x92>
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
 8015d3c:	7af8      	ldrb	r0, [r7, #11]
 8015d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d40:	9301      	str	r3, [sp, #4]
 8015d42:	683b      	ldr	r3, [r7, #0]
 8015d44:	9300      	str	r3, [sp, #0]
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	693a      	ldr	r2, [r7, #16]
 8015d4a:	6979      	ldr	r1, [r7, #20]
 8015d4c:	f7ff ff24 	bl	8015b98 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>
                                        act_max);
  return kTfLiteOk;
 8015d50:	2300      	movs	r3, #0
}
 8015d52:	4618      	mov	r0, r3
 8015d54:	371c      	adds	r7, #28
 8015d56:	46bd      	mov	sp, r7
 8015d58:	bd90      	pop	{r4, r7, pc}
 8015d5a:	bf00      	nop
 8015d5c:	080229ec 	.word	0x080229ec
 8015d60:	080227ec 	.word	0x080227ec
 8015d64:	08022898 	.word	0x08022898

08015d68 <_ZSt3maxIiERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8015d68:	b480      	push	{r7}
 8015d6a:	b083      	sub	sp, #12
 8015d6c:	af00      	add	r7, sp, #0
 8015d6e:	6078      	str	r0, [r7, #4]
 8015d70:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	681a      	ldr	r2, [r3, #0]
 8015d76:	683b      	ldr	r3, [r7, #0]
 8015d78:	681b      	ldr	r3, [r3, #0]
 8015d7a:	429a      	cmp	r2, r3
 8015d7c:	da01      	bge.n	8015d82 <_ZSt3maxIiERKT_S2_S2_+0x1a>
	return __b;
 8015d7e:	683b      	ldr	r3, [r7, #0]
 8015d80:	e000      	b.n	8015d84 <_ZSt3maxIiERKT_S2_S2_+0x1c>
      return __a;
 8015d82:	687b      	ldr	r3, [r7, #4]
    }
 8015d84:	4618      	mov	r0, r3
 8015d86:	370c      	adds	r7, #12
 8015d88:	46bd      	mov	sp, r7
 8015d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d8e:	4770      	bx	lr

08015d90 <_ZSt3maxIlERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8015d90:	b480      	push	{r7}
 8015d92:	b083      	sub	sp, #12
 8015d94:	af00      	add	r7, sp, #0
 8015d96:	6078      	str	r0, [r7, #4]
 8015d98:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	681a      	ldr	r2, [r3, #0]
 8015d9e:	683b      	ldr	r3, [r7, #0]
 8015da0:	681b      	ldr	r3, [r3, #0]
 8015da2:	429a      	cmp	r2, r3
 8015da4:	da01      	bge.n	8015daa <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 8015da6:	683b      	ldr	r3, [r7, #0]
 8015da8:	e000      	b.n	8015dac <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 8015daa:	687b      	ldr	r3, [r7, #4]
    }
 8015dac:	4618      	mov	r0, r3
 8015dae:	370c      	adds	r7, #12
 8015db0:	46bd      	mov	sp, r7
 8015db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015db6:	4770      	bx	lr

08015db8 <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8015db8:	b480      	push	{r7}
 8015dba:	b083      	sub	sp, #12
 8015dbc:	af00      	add	r7, sp, #0
 8015dbe:	6078      	str	r0, [r7, #4]
 8015dc0:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8015dc2:	683b      	ldr	r3, [r7, #0]
 8015dc4:	681a      	ldr	r2, [r3, #0]
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	681b      	ldr	r3, [r3, #0]
 8015dca:	429a      	cmp	r2, r3
 8015dcc:	da01      	bge.n	8015dd2 <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 8015dce:	683b      	ldr	r3, [r7, #0]
 8015dd0:	e000      	b.n	8015dd4 <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 8015dd2:	687b      	ldr	r3, [r7, #4]
    }
 8015dd4:	4618      	mov	r0, r3
 8015dd6:	370c      	adds	r7, #12
 8015dd8:	46bd      	mov	sp, r7
 8015dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dde:	4770      	bx	lr

08015de0 <DebugLog>:

#include "tensorflow/lite/micro/debug_log.h"

#include <cstdio>

extern "C" void DebugLog(const char* s) { fprintf(stderr, "%s", s); }
 8015de0:	b580      	push	{r7, lr}
 8015de2:	b082      	sub	sp, #8
 8015de4:	af00      	add	r7, sp, #0
 8015de6:	6078      	str	r0, [r7, #4]
 8015de8:	4b05      	ldr	r3, [pc, #20]	; (8015e00 <DebugLog+0x20>)
 8015dea:	681b      	ldr	r3, [r3, #0]
 8015dec:	68db      	ldr	r3, [r3, #12]
 8015dee:	4619      	mov	r1, r3
 8015df0:	6878      	ldr	r0, [r7, #4]
 8015df2:	f009 f8b9 	bl	801ef68 <fputs>
 8015df6:	bf00      	nop
 8015df8:	3708      	adds	r7, #8
 8015dfa:	46bd      	mov	sp, r7
 8015dfc:	bd80      	pop	{r7, pc}
 8015dfe:	bf00      	nop
 8015e00:	20016d50 	.word	0x20016d50

08015e04 <_ZNK6tflite6Tensor5shapeEv>:
  const flatbuffers::Vector<int32_t> *shape() const {
 8015e04:	b580      	push	{r7, lr}
 8015e06:	b082      	sub	sp, #8
 8015e08:	af00      	add	r7, sp, #0
 8015e0a:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_SHAPE);
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	2104      	movs	r1, #4
 8015e10:	4618      	mov	r0, r3
 8015e12:	f7f3 fd46 	bl	80098a2 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8015e16:	4603      	mov	r3, r0
  }
 8015e18:	4618      	mov	r0, r3
 8015e1a:	3708      	adds	r7, #8
 8015e1c:	46bd      	mov	sp, r7
 8015e1e:	bd80      	pop	{r7, pc}

08015e20 <_ZNK6tflite6Tensor4typeEv>:
  tflite::TensorType type() const {
 8015e20:	b580      	push	{r7, lr}
 8015e22:	b082      	sub	sp, #8
 8015e24:	af00      	add	r7, sp, #0
 8015e26:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_TYPE, 0));
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	2200      	movs	r2, #0
 8015e2c:	2106      	movs	r1, #6
 8015e2e:	4618      	mov	r0, r3
 8015e30:	f7f3 fd47 	bl	80098c2 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8015e34:	4603      	mov	r3, r0
 8015e36:	b2db      	uxtb	r3, r3
  }
 8015e38:	4618      	mov	r0, r3
 8015e3a:	3708      	adds	r7, #8
 8015e3c:	46bd      	mov	sp, r7
 8015e3e:	bd80      	pop	{r7, pc}

08015e40 <_ZN6tflite14AlignPointerUpEPhj>:
#include "tensorflow/lite/core/api/flatbuffer_conversions.h"
#include "tensorflow/lite/schema/schema_generated.h"

namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
 8015e40:	b480      	push	{r7}
 8015e42:	b085      	sub	sp, #20
 8015e44:	af00      	add	r7, sp, #0
 8015e46:	6078      	str	r0, [r7, #4]
 8015e48:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
 8015e4e:	683a      	ldr	r2, [r7, #0]
 8015e50:	68fb      	ldr	r3, [r7, #12]
 8015e52:	4413      	add	r3, r2
 8015e54:	1e5a      	subs	r2, r3, #1
 8015e56:	683b      	ldr	r3, [r7, #0]
 8015e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8015e5c:	683a      	ldr	r2, [r7, #0]
 8015e5e:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
 8015e62:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 8015e64:	68bb      	ldr	r3, [r7, #8]
}
 8015e66:	4618      	mov	r0, r3
 8015e68:	3714      	adds	r7, #20
 8015e6a:	46bd      	mov	sp, r7
 8015e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e70:	4770      	bx	lr

08015e72 <_ZN6tflite16AlignPointerDownEPhj>:

uint8_t* AlignPointerDown(uint8_t* data, size_t alignment) {
 8015e72:	b480      	push	{r7}
 8015e74:	b085      	sub	sp, #20
 8015e76:	af00      	add	r7, sp, #0
 8015e78:	6078      	str	r0, [r7, #4]
 8015e7a:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result =
      reinterpret_cast<uint8_t*>((data_as_uintptr_t / alignment) * alignment);
 8015e80:	68fa      	ldr	r2, [r7, #12]
 8015e82:	683b      	ldr	r3, [r7, #0]
 8015e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8015e88:	683a      	ldr	r2, [r7, #0]
 8015e8a:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result =
 8015e8e:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 8015e90:	68bb      	ldr	r3, [r7, #8]
}
 8015e92:	4618      	mov	r0, r3
 8015e94:	3714      	adds	r7, #20
 8015e96:	46bd      	mov	sp, r7
 8015e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e9c:	4770      	bx	lr

08015e9e <_ZN6tflite11AlignSizeUpEjj>:

size_t AlignSizeUp(size_t size, size_t alignment) {
 8015e9e:	b480      	push	{r7}
 8015ea0:	b085      	sub	sp, #20
 8015ea2:	af00      	add	r7, sp, #0
 8015ea4:	6078      	str	r0, [r7, #4]
 8015ea6:	6039      	str	r1, [r7, #0]
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
 8015ea8:	683a      	ldr	r2, [r7, #0]
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	4413      	add	r3, r2
 8015eae:	1e5a      	subs	r2, r3, #1
 8015eb0:	683b      	ldr	r3, [r7, #0]
 8015eb2:	fbb2 f2f3 	udiv	r2, r2, r3
 8015eb6:	683b      	ldr	r3, [r7, #0]
 8015eb8:	fb02 f303 	mul.w	r3, r2, r3
 8015ebc:	60fb      	str	r3, [r7, #12]
  return aligned_size;
 8015ebe:	68fb      	ldr	r3, [r7, #12]
}
 8015ec0:	4618      	mov	r0, r3
 8015ec2:	3714      	adds	r7, #20
 8015ec4:	46bd      	mov	sp, r7
 8015ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eca:	4770      	bx	lr

08015ecc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE>:

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size,
                              ErrorReporter* reporter) {
 8015ecc:	b580      	push	{r7, lr}
 8015ece:	b084      	sub	sp, #16
 8015ed0:	af00      	add	r7, sp, #0
 8015ed2:	4603      	mov	r3, r0
 8015ed4:	60b9      	str	r1, [r7, #8]
 8015ed6:	607a      	str	r2, [r7, #4]
 8015ed8:	73fb      	strb	r3, [r7, #15]
  switch (type) {
 8015eda:	7bfb      	ldrb	r3, [r7, #15]
 8015edc:	3b01      	subs	r3, #1
 8015ede:	2b08      	cmp	r3, #8
 8015ee0:	d834      	bhi.n	8015f4c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x80>
 8015ee2:	a201      	add	r2, pc, #4	; (adr r2, 8015ee8 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x1c>)
 8015ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ee8:	08015f0d 	.word	0x08015f0d
 8015eec:	08015f1d 	.word	0x08015f1d
 8015ef0:	08015f25 	.word	0x08015f25
 8015ef4:	08015f35 	.word	0x08015f35
 8015ef8:	08015f4d 	.word	0x08015f4d
 8015efc:	08015f3d 	.word	0x08015f3d
 8015f00:	08015f15 	.word	0x08015f15
 8015f04:	08015f45 	.word	0x08015f45
 8015f08:	08015f2d 	.word	0x08015f2d
    case kTfLiteFloat32:
      *size = sizeof(float);
 8015f0c:	68bb      	ldr	r3, [r7, #8]
 8015f0e:	2204      	movs	r2, #4
 8015f10:	601a      	str	r2, [r3, #0]
      break;
 8015f12:	e027      	b.n	8015f64 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x98>
    case kTfLiteInt16:
      *size = sizeof(int16_t);
 8015f14:	68bb      	ldr	r3, [r7, #8]
 8015f16:	2202      	movs	r2, #2
 8015f18:	601a      	str	r2, [r3, #0]
      break;
 8015f1a:	e023      	b.n	8015f64 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x98>
    case kTfLiteInt32:
      *size = sizeof(int32_t);
 8015f1c:	68bb      	ldr	r3, [r7, #8]
 8015f1e:	2204      	movs	r2, #4
 8015f20:	601a      	str	r2, [r3, #0]
      break;
 8015f22:	e01f      	b.n	8015f64 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x98>
    case kTfLiteUInt8:
      *size = sizeof(uint8_t);
 8015f24:	68bb      	ldr	r3, [r7, #8]
 8015f26:	2201      	movs	r2, #1
 8015f28:	601a      	str	r2, [r3, #0]
      break;
 8015f2a:	e01b      	b.n	8015f64 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x98>
    case kTfLiteInt8:
      *size = sizeof(int8_t);
 8015f2c:	68bb      	ldr	r3, [r7, #8]
 8015f2e:	2201      	movs	r2, #1
 8015f30:	601a      	str	r2, [r3, #0]
      break;
 8015f32:	e017      	b.n	8015f64 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x98>
    case kTfLiteInt64:
      *size = sizeof(int64_t);
 8015f34:	68bb      	ldr	r3, [r7, #8]
 8015f36:	2208      	movs	r2, #8
 8015f38:	601a      	str	r2, [r3, #0]
      break;
 8015f3a:	e013      	b.n	8015f64 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x98>
    case kTfLiteBool:
      *size = sizeof(bool);
 8015f3c:	68bb      	ldr	r3, [r7, #8]
 8015f3e:	2201      	movs	r2, #1
 8015f40:	601a      	str	r2, [r3, #0]
      break;
 8015f42:	e00f      	b.n	8015f64 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x98>
    case kTfLiteComplex64:
      *size = sizeof(float) * 2;
 8015f44:	68bb      	ldr	r3, [r7, #8]
 8015f46:	2208      	movs	r2, #8
 8015f48:	601a      	str	r2, [r3, #0]
      break;
 8015f4a:	e00b      	b.n	8015f64 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x98>
    default:
      reporter->Report("Type %s (%d) not is not supported",
 8015f4c:	7bfb      	ldrb	r3, [r7, #15]
 8015f4e:	4618      	mov	r0, r3
 8015f50:	f7ef f9de 	bl	8005310 <TfLiteTypeGetName>
 8015f54:	4602      	mov	r2, r0
 8015f56:	7bfb      	ldrb	r3, [r7, #15]
 8015f58:	4905      	ldr	r1, [pc, #20]	; (8015f70 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0xa4>)
 8015f5a:	6878      	ldr	r0, [r7, #4]
 8015f5c:	f7ef fa36 	bl	80053cc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                       TfLiteTypeGetName(type), type);
      return kTfLiteError;
 8015f60:	2301      	movs	r3, #1
 8015f62:	e000      	b.n	8015f66 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x9a>
  }
  return kTfLiteOk;
 8015f64:	2300      	movs	r3, #0
}
 8015f66:	4618      	mov	r0, r3
 8015f68:	3710      	adds	r7, #16
 8015f6a:	46bd      	mov	sp, r7
 8015f6c:	bd80      	pop	{r7, pc}
 8015f6e:	bf00      	nop
 8015f70:	08022a7c 	.word	0x08022a7c

08015f74 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>:

TfLiteStatus BytesRequiredForTensor(const tflite::Tensor& flatbuffer_tensor,
                                    size_t* bytes, size_t* type_size,
                                    ErrorReporter* error_reporter) {
 8015f74:	b580      	push	{r7, lr}
 8015f76:	b088      	sub	sp, #32
 8015f78:	af00      	add	r7, sp, #0
 8015f7a:	60f8      	str	r0, [r7, #12]
 8015f7c:	60b9      	str	r1, [r7, #8]
 8015f7e:	607a      	str	r2, [r7, #4]
 8015f80:	603b      	str	r3, [r7, #0]
  int element_count = 1;
 8015f82:	2301      	movs	r3, #1
 8015f84:	61fb      	str	r3, [r7, #28]
  // If flatbuffer_tensor.shape == nullptr, then flatbuffer_tensor is a scalar
  // so has 1 element.
  if (flatbuffer_tensor.shape() != nullptr) {
 8015f86:	68f8      	ldr	r0, [r7, #12]
 8015f88:	f7ff ff3c 	bl	8015e04 <_ZNK6tflite6Tensor5shapeEv>
 8015f8c:	4603      	mov	r3, r0
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	bf14      	ite	ne
 8015f92:	2301      	movne	r3, #1
 8015f94:	2300      	moveq	r3, #0
 8015f96:	b2db      	uxtb	r3, r3
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d022      	beq.n	8015fe2 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6e>
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 8015f9c:	2300      	movs	r3, #0
 8015f9e:	61bb      	str	r3, [r7, #24]
 8015fa0:	68f8      	ldr	r0, [r7, #12]
 8015fa2:	f7ff ff2f 	bl	8015e04 <_ZNK6tflite6Tensor5shapeEv>
 8015fa6:	4603      	mov	r3, r0
 8015fa8:	4618      	mov	r0, r3
 8015faa:	f000 f845 	bl	8016038 <_ZNK11flatbuffers6VectorIlE6LengthEv>
 8015fae:	4602      	mov	r2, r0
 8015fb0:	69bb      	ldr	r3, [r7, #24]
 8015fb2:	4293      	cmp	r3, r2
 8015fb4:	bf34      	ite	cc
 8015fb6:	2301      	movcc	r3, #1
 8015fb8:	2300      	movcs	r3, #0
 8015fba:	b2db      	uxtb	r3, r3
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	d010      	beq.n	8015fe2 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6e>
      element_count *= flatbuffer_tensor.shape()->Get(n);
 8015fc0:	68f8      	ldr	r0, [r7, #12]
 8015fc2:	f7ff ff1f 	bl	8015e04 <_ZNK6tflite6Tensor5shapeEv>
 8015fc6:	4603      	mov	r3, r0
 8015fc8:	69b9      	ldr	r1, [r7, #24]
 8015fca:	4618      	mov	r0, r3
 8015fcc:	f7f3 fcca 	bl	8009964 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8015fd0:	4602      	mov	r2, r0
 8015fd2:	69fb      	ldr	r3, [r7, #28]
 8015fd4:	fb02 f303 	mul.w	r3, r2, r3
 8015fd8:	61fb      	str	r3, [r7, #28]
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 8015fda:	69bb      	ldr	r3, [r7, #24]
 8015fdc:	3301      	adds	r3, #1
 8015fde:	61bb      	str	r3, [r7, #24]
 8015fe0:	e7de      	b.n	8015fa0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x2c>
    }
  }

  TfLiteType tf_lite_type;
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 8015fe2:	68f8      	ldr	r0, [r7, #12]
 8015fe4:	f7ff ff1c 	bl	8015e20 <_ZNK6tflite6Tensor4typeEv>
 8015fe8:	4603      	mov	r3, r0
 8015fea:	4618      	mov	r0, r3
 8015fec:	f107 0315 	add.w	r3, r7, #21
 8015ff0:	683a      	ldr	r2, [r7, #0]
 8015ff2:	4619      	mov	r1, r3
 8015ff4:	f7f0 fe28 	bl	8006c48 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 8015ff8:	4603      	mov	r3, r0
 8015ffa:	75fb      	strb	r3, [r7, #23]
 8015ffc:	7dfb      	ldrb	r3, [r7, #23]
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	d001      	beq.n	8016006 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x92>
 8016002:	7dfb      	ldrb	r3, [r7, #23]
 8016004:	e014      	b.n	8016030 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xbc>
                                          &tf_lite_type, error_reporter));
  TF_LITE_ENSURE_STATUS(
 8016006:	7d7b      	ldrb	r3, [r7, #21]
 8016008:	683a      	ldr	r2, [r7, #0]
 801600a:	6879      	ldr	r1, [r7, #4]
 801600c:	4618      	mov	r0, r3
 801600e:	f7ff ff5d 	bl	8015ecc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE>
 8016012:	4603      	mov	r3, r0
 8016014:	75bb      	strb	r3, [r7, #22]
 8016016:	7dbb      	ldrb	r3, [r7, #22]
 8016018:	2b00      	cmp	r3, #0
 801601a:	d001      	beq.n	8016020 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xac>
 801601c:	7dbb      	ldrb	r3, [r7, #22]
 801601e:	e007      	b.n	8016030 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xbc>
      TfLiteTypeSizeOf(tf_lite_type, type_size, error_reporter));
  *bytes = element_count * (*type_size);
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	681b      	ldr	r3, [r3, #0]
 8016024:	69fa      	ldr	r2, [r7, #28]
 8016026:	fb02 f203 	mul.w	r2, r2, r3
 801602a:	68bb      	ldr	r3, [r7, #8]
 801602c:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 801602e:	2300      	movs	r3, #0
}
 8016030:	4618      	mov	r0, r3
 8016032:	3720      	adds	r7, #32
 8016034:	46bd      	mov	sp, r7
 8016036:	bd80      	pop	{r7, pc}

08016038 <_ZNK11flatbuffers6VectorIlE6LengthEv>:
  uoffset_t Length() const { return size(); }
 8016038:	b580      	push	{r7, lr}
 801603a:	b082      	sub	sp, #8
 801603c:	af00      	add	r7, sp, #0
 801603e:	6078      	str	r0, [r7, #4]
 8016040:	6878      	ldr	r0, [r7, #4]
 8016042:	f7f3 fc80 	bl	8009946 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8016046:	4603      	mov	r3, r0
 8016048:	4618      	mov	r0, r3
 801604a:	3708      	adds	r7, #8
 801604c:	46bd      	mov	sp, r7
 801604e:	bd80      	pop	{r7, pc}

08016050 <_ZNK6tflite22QuantizationParameters5scaleEv>:
  const flatbuffers::Vector<float> *scale() const {
 8016050:	b580      	push	{r7, lr}
 8016052:	b082      	sub	sp, #8
 8016054:	af00      	add	r7, sp, #0
 8016056:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<float> *>(VT_SCALE);
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	2108      	movs	r1, #8
 801605c:	4618      	mov	r0, r3
 801605e:	f001 fae7 	bl	8017630 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>
 8016062:	4603      	mov	r3, r0
  }
 8016064:	4618      	mov	r0, r3
 8016066:	3708      	adds	r7, #8
 8016068:	46bd      	mov	sp, r7
 801606a:	bd80      	pop	{r7, pc}

0801606c <_ZNK6tflite22QuantizationParameters10zero_pointEv>:
  const flatbuffers::Vector<int64_t> *zero_point() const {
 801606c:	b580      	push	{r7, lr}
 801606e:	b082      	sub	sp, #8
 8016070:	af00      	add	r7, sp, #0
 8016072:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int64_t> *>(VT_ZERO_POINT);
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	210a      	movs	r1, #10
 8016078:	4618      	mov	r0, r3
 801607a:	f001 fae9 	bl	8017650 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>
 801607e:	4603      	mov	r3, r0
  }
 8016080:	4618      	mov	r0, r3
 8016082:	3708      	adds	r7, #8
 8016084:	46bd      	mov	sp, r7
 8016086:	bd80      	pop	{r7, pc}

08016088 <_ZNK6tflite22QuantizationParameters19quantized_dimensionEv>:
  int32_t quantized_dimension() const {
 8016088:	b580      	push	{r7, lr}
 801608a:	b082      	sub	sp, #8
 801608c:	af00      	add	r7, sp, #0
 801608e:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_QUANTIZED_DIMENSION, 0);
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	2200      	movs	r2, #0
 8016094:	2110      	movs	r1, #16
 8016096:	4618      	mov	r0, r3
 8016098:	f7f3 fbe5 	bl	8009866 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 801609c:	4603      	mov	r3, r0
  }
 801609e:	4618      	mov	r0, r3
 80160a0:	3708      	adds	r7, #8
 80160a2:	46bd      	mov	sp, r7
 80160a4:	bd80      	pop	{r7, pc}

080160a6 <_ZNK6tflite6Tensor6bufferEv>:
  uint32_t buffer() const {
 80160a6:	b580      	push	{r7, lr}
 80160a8:	b082      	sub	sp, #8
 80160aa:	af00      	add	r7, sp, #0
 80160ac:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_BUFFER, 0);
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	2200      	movs	r2, #0
 80160b2:	2108      	movs	r1, #8
 80160b4:	4618      	mov	r0, r3
 80160b6:	f7eb fbdf 	bl	8001878 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 80160ba:	4603      	mov	r3, r0
  }
 80160bc:	4618      	mov	r0, r3
 80160be:	3708      	adds	r7, #8
 80160c0:	46bd      	mov	sp, r7
 80160c2:	bd80      	pop	{r7, pc}

080160c4 <_ZNK6tflite6Tensor4nameEv>:
  const flatbuffers::String *name() const {
 80160c4:	b580      	push	{r7, lr}
 80160c6:	b082      	sub	sp, #8
 80160c8:	af00      	add	r7, sp, #0
 80160ca:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::String *>(VT_NAME);
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	210a      	movs	r1, #10
 80160d0:	4618      	mov	r0, r3
 80160d2:	f7ff f81c 	bl	801510e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 80160d6:	4603      	mov	r3, r0
  }
 80160d8:	4618      	mov	r0, r3
 80160da:	3708      	adds	r7, #8
 80160dc:	46bd      	mov	sp, r7
 80160de:	bd80      	pop	{r7, pc}

080160e0 <_ZNK6tflite6Tensor12quantizationEv>:
  const tflite::QuantizationParameters *quantization() const {
 80160e0:	b580      	push	{r7, lr}
 80160e2:	b082      	sub	sp, #8
 80160e4:	af00      	add	r7, sp, #0
 80160e6:	6078      	str	r0, [r7, #4]
    return GetPointer<const tflite::QuantizationParameters *>(VT_QUANTIZATION);
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	210c      	movs	r1, #12
 80160ec:	4618      	mov	r0, r3
 80160ee:	f001 fabf 	bl	8017670 <_ZNK11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>
 80160f2:	4603      	mov	r3, r0
  }
 80160f4:	4618      	mov	r0, r3
 80160f6:	3708      	adds	r7, #8
 80160f8:	46bd      	mov	sp, r7
 80160fa:	bd80      	pop	{r7, pc}

080160fc <_ZNK6tflite6Tensor11is_variableEv>:
  bool is_variable() const {
 80160fc:	b580      	push	{r7, lr}
 80160fe:	b082      	sub	sp, #8
 8016100:	af00      	add	r7, sp, #0
 8016102:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_IS_VARIABLE, 0) != 0;
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	2200      	movs	r2, #0
 8016108:	210e      	movs	r1, #14
 801610a:	4618      	mov	r0, r3
 801610c:	f7f3 fb7c 	bl	8009808 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8016110:	4603      	mov	r3, r0
 8016112:	2b00      	cmp	r3, #0
 8016114:	bf14      	ite	ne
 8016116:	2301      	movne	r3, #1
 8016118:	2300      	moveq	r3, #0
 801611a:	b2db      	uxtb	r3, r3
  }
 801611c:	4618      	mov	r0, r3
 801611e:	3708      	adds	r7, #8
 8016120:	46bd      	mov	sp, r7
 8016122:	bd80      	pop	{r7, pc}

08016124 <_ZNK6tflite8Operator12opcode_indexEv>:
  uint32_t opcode_index() const {
 8016124:	b580      	push	{r7, lr}
 8016126:	b082      	sub	sp, #8
 8016128:	af00      	add	r7, sp, #0
 801612a:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_OPCODE_INDEX, 0);
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	2200      	movs	r2, #0
 8016130:	2104      	movs	r1, #4
 8016132:	4618      	mov	r0, r3
 8016134:	f7eb fba0 	bl	8001878 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 8016138:	4603      	mov	r3, r0
  }
 801613a:	4618      	mov	r0, r3
 801613c:	3708      	adds	r7, #8
 801613e:	46bd      	mov	sp, r7
 8016140:	bd80      	pop	{r7, pc}

08016142 <_ZNK6tflite8Operator6inputsEv>:
  const flatbuffers::Vector<int32_t> *inputs() const {
 8016142:	b580      	push	{r7, lr}
 8016144:	b082      	sub	sp, #8
 8016146:	af00      	add	r7, sp, #0
 8016148:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	2106      	movs	r1, #6
 801614e:	4618      	mov	r0, r3
 8016150:	f7f3 fba7 	bl	80098a2 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8016154:	4603      	mov	r3, r0
  }
 8016156:	4618      	mov	r0, r3
 8016158:	3708      	adds	r7, #8
 801615a:	46bd      	mov	sp, r7
 801615c:	bd80      	pop	{r7, pc}

0801615e <_ZNK6tflite8Operator7outputsEv>:
  const flatbuffers::Vector<int32_t> *outputs() const {
 801615e:	b580      	push	{r7, lr}
 8016160:	b082      	sub	sp, #8
 8016162:	af00      	add	r7, sp, #0
 8016164:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	2108      	movs	r1, #8
 801616a:	4618      	mov	r0, r3
 801616c:	f7f3 fb99 	bl	80098a2 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8016170:	4603      	mov	r3, r0
  }
 8016172:	4618      	mov	r0, r3
 8016174:	3708      	adds	r7, #8
 8016176:	46bd      	mov	sp, r7
 8016178:	bd80      	pop	{r7, pc}

0801617a <_ZNK6tflite8Operator14custom_optionsEv>:
  const flatbuffers::Vector<uint8_t> *custom_options() const {
 801617a:	b580      	push	{r7, lr}
 801617c:	b082      	sub	sp, #8
 801617e:	af00      	add	r7, sp, #0
 8016180:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_CUSTOM_OPTIONS);
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	210e      	movs	r1, #14
 8016186:	4618      	mov	r0, r3
 8016188:	f001 fa42 	bl	8017610 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 801618c:	4603      	mov	r3, r0
  }
 801618e:	4618      	mov	r0, r3
 8016190:	3708      	adds	r7, #8
 8016192:	46bd      	mov	sp, r7
 8016194:	bd80      	pop	{r7, pc}

08016196 <_ZNK6tflite8SubGraph7tensorsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *tensors() const {
 8016196:	b580      	push	{r7, lr}
 8016198:	b082      	sub	sp, #8
 801619a:	af00      	add	r7, sp, #0
 801619c:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *>(VT_TENSORS);
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	2104      	movs	r1, #4
 80161a2:	4618      	mov	r0, r3
 80161a4:	f001 fa74 	bl	8017690 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
 80161a8:	4603      	mov	r3, r0
  }
 80161aa:	4618      	mov	r0, r3
 80161ac:	3708      	adds	r7, #8
 80161ae:	46bd      	mov	sp, r7
 80161b0:	bd80      	pop	{r7, pc}

080161b2 <_ZNK6tflite8SubGraph6inputsEv>:
  const flatbuffers::Vector<int32_t> *inputs() const {
 80161b2:	b580      	push	{r7, lr}
 80161b4:	b082      	sub	sp, #8
 80161b6:	af00      	add	r7, sp, #0
 80161b8:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	2106      	movs	r1, #6
 80161be:	4618      	mov	r0, r3
 80161c0:	f7f3 fb6f 	bl	80098a2 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 80161c4:	4603      	mov	r3, r0
  }
 80161c6:	4618      	mov	r0, r3
 80161c8:	3708      	adds	r7, #8
 80161ca:	46bd      	mov	sp, r7
 80161cc:	bd80      	pop	{r7, pc}

080161ce <_ZNK6tflite8SubGraph7outputsEv>:
  const flatbuffers::Vector<int32_t> *outputs() const {
 80161ce:	b580      	push	{r7, lr}
 80161d0:	b082      	sub	sp, #8
 80161d2:	af00      	add	r7, sp, #0
 80161d4:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	2108      	movs	r1, #8
 80161da:	4618      	mov	r0, r3
 80161dc:	f7f3 fb61 	bl	80098a2 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 80161e0:	4603      	mov	r3, r0
  }
 80161e2:	4618      	mov	r0, r3
 80161e4:	3708      	adds	r7, #8
 80161e6:	46bd      	mov	sp, r7
 80161e8:	bd80      	pop	{r7, pc}

080161ea <_ZNK6tflite8SubGraph9operatorsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Operator>> *operators() const {
 80161ea:	b580      	push	{r7, lr}
 80161ec:	b082      	sub	sp, #8
 80161ee:	af00      	add	r7, sp, #0
 80161f0:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Operator>> *>(VT_OPERATORS);
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	210a      	movs	r1, #10
 80161f6:	4618      	mov	r0, r3
 80161f8:	f001 fa5a 	bl	80176b0 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
 80161fc:	4603      	mov	r3, r0
  }
 80161fe:	4618      	mov	r0, r3
 8016200:	3708      	adds	r7, #8
 8016202:	46bd      	mov	sp, r7
 8016204:	bd80      	pop	{r7, pc}

08016206 <_ZNK6tflite6Buffer4dataEv>:
  const flatbuffers::Vector<uint8_t> *data() const {
 8016206:	b580      	push	{r7, lr}
 8016208:	b082      	sub	sp, #8
 801620a:	af00      	add	r7, sp, #0
 801620c:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	2104      	movs	r1, #4
 8016212:	4618      	mov	r0, r3
 8016214:	f001 f9fc 	bl	8017610 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 8016218:	4603      	mov	r3, r0
  }
 801621a:	4618      	mov	r0, r3
 801621c:	3708      	adds	r7, #8
 801621e:	46bd      	mov	sp, r7
 8016220:	bd80      	pop	{r7, pc}

08016222 <_ZNK6tflite5Model14operator_codesEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *operator_codes() const {
 8016222:	b580      	push	{r7, lr}
 8016224:	b082      	sub	sp, #8
 8016226:	af00      	add	r7, sp, #0
 8016228:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *>(VT_OPERATOR_CODES);
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	2106      	movs	r1, #6
 801622e:	4618      	mov	r0, r3
 8016230:	f001 fa4e 	bl	80176d0 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>
 8016234:	4603      	mov	r3, r0
  }
 8016236:	4618      	mov	r0, r3
 8016238:	3708      	adds	r7, #8
 801623a:	46bd      	mov	sp, r7
 801623c:	bd80      	pop	{r7, pc}

0801623e <_ZNK6tflite5Model9subgraphsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *subgraphs() const {
 801623e:	b580      	push	{r7, lr}
 8016240:	b082      	sub	sp, #8
 8016242:	af00      	add	r7, sp, #0
 8016244:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *>(VT_SUBGRAPHS);
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	2108      	movs	r1, #8
 801624a:	4618      	mov	r0, r3
 801624c:	f001 fa50 	bl	80176f0 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
 8016250:	4603      	mov	r3, r0
  }
 8016252:	4618      	mov	r0, r3
 8016254:	3708      	adds	r7, #8
 8016256:	46bd      	mov	sp, r7
 8016258:	bd80      	pop	{r7, pc}

0801625a <_ZNK6tflite5Model7buffersEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Buffer>> *buffers() const {
 801625a:	b580      	push	{r7, lr}
 801625c:	b082      	sub	sp, #8
 801625e:	af00      	add	r7, sp, #0
 8016260:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Buffer>> *>(VT_BUFFERS);
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	210c      	movs	r1, #12
 8016266:	4618      	mov	r0, r3
 8016268:	f001 fa52 	bl	8017710 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>
 801626c:	4603      	mov	r3, r0
  }
 801626e:	4618      	mov	r0, r3
 8016270:	3708      	adds	r7, #8
 8016272:	46bd      	mov	sp, r7
 8016274:	bd80      	pop	{r7, pc}
	...

08016278 <_ZN6tflite20BuiltinDataAllocatorD1Ev>:

  virtual ~BuiltinDataAllocator() {}
 8016278:	b480      	push	{r7}
 801627a:	b083      	sub	sp, #12
 801627c:	af00      	add	r7, sp, #0
 801627e:	6078      	str	r0, [r7, #4]
 8016280:	4a04      	ldr	r2, [pc, #16]	; (8016294 <_ZN6tflite20BuiltinDataAllocatorD1Ev+0x1c>)
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	601a      	str	r2, [r3, #0]
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	4618      	mov	r0, r3
 801628a:	370c      	adds	r7, #12
 801628c:	46bd      	mov	sp, r7
 801628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016292:	4770      	bx	lr
 8016294:	080258cc 	.word	0x080258cc

08016298 <_ZN6tflite20BuiltinDataAllocatorD0Ev>:
 8016298:	b580      	push	{r7, lr}
 801629a:	b082      	sub	sp, #8
 801629c:	af00      	add	r7, sp, #0
 801629e:	6078      	str	r0, [r7, #4]
 80162a0:	6878      	ldr	r0, [r7, #4]
 80162a2:	f7ff ffe9 	bl	8016278 <_ZN6tflite20BuiltinDataAllocatorD1Ev>
 80162a6:	2104      	movs	r1, #4
 80162a8:	6878      	ldr	r0, [r7, #4]
 80162aa:	f008 fb48 	bl	801e93e <_ZdlPvj>
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	4618      	mov	r0, r3
 80162b2:	3708      	adds	r7, #8
 80162b4:	46bd      	mov	sp, r7
 80162b6:	bd80      	pop	{r7, pc}

080162b8 <_ZN6tflite20BuiltinDataAllocatorC1Ev>:
class BuiltinDataAllocator {
 80162b8:	b480      	push	{r7}
 80162ba:	b083      	sub	sp, #12
 80162bc:	af00      	add	r7, sp, #0
 80162be:	6078      	str	r0, [r7, #4]
 80162c0:	4a04      	ldr	r2, [pc, #16]	; (80162d4 <_ZN6tflite20BuiltinDataAllocatorC1Ev+0x1c>)
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	601a      	str	r2, [r3, #0]
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	4618      	mov	r0, r3
 80162ca:	370c      	adds	r7, #12
 80162cc:	46bd      	mov	sp, r7
 80162ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162d2:	4770      	bx	lr
 80162d4:	080258cc 	.word	0x080258cc

080162d8 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE>:
// the flexible array element to be initialized.
const TfLiteIntArray kZeroLengthIntArray = {0};

class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
 public:
  explicit MicroBuiltinDataAllocator(SimpleMemoryAllocator* memory_allocator)
 80162d8:	b580      	push	{r7, lr}
 80162da:	b082      	sub	sp, #8
 80162dc:	af00      	add	r7, sp, #0
 80162de:	6078      	str	r0, [r7, #4]
 80162e0:	6039      	str	r1, [r7, #0]
      : memory_allocator_(memory_allocator) {}
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	4618      	mov	r0, r3
 80162e6:	f7ff ffe7 	bl	80162b8 <_ZN6tflite20BuiltinDataAllocatorC1Ev>
 80162ea:	4a05      	ldr	r2, [pc, #20]	; (8016300 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE+0x28>)
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	601a      	str	r2, [r3, #0]
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	683a      	ldr	r2, [r7, #0]
 80162f4:	605a      	str	r2, [r3, #4]
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	4618      	mov	r0, r3
 80162fa:	3708      	adds	r7, #8
 80162fc:	46bd      	mov	sp, r7
 80162fe:	bd80      	pop	{r7, pc}
 8016300:	080258b4 	.word	0x080258b4

08016304 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEjj>:

  void* Allocate(size_t size, size_t alignment_hint) override {
 8016304:	b580      	push	{r7, lr}
 8016306:	b084      	sub	sp, #16
 8016308:	af00      	add	r7, sp, #0
 801630a:	60f8      	str	r0, [r7, #12]
 801630c:	60b9      	str	r1, [r7, #8]
 801630e:	607a      	str	r2, [r7, #4]
    return memory_allocator_->AllocateFromTail(size, alignment_hint);
 8016310:	68fb      	ldr	r3, [r7, #12]
 8016312:	6858      	ldr	r0, [r3, #4]
 8016314:	68fb      	ldr	r3, [r7, #12]
 8016316:	685b      	ldr	r3, [r3, #4]
 8016318:	681b      	ldr	r3, [r3, #0]
 801631a:	330c      	adds	r3, #12
 801631c:	681b      	ldr	r3, [r3, #0]
 801631e:	687a      	ldr	r2, [r7, #4]
 8016320:	68b9      	ldr	r1, [r7, #8]
 8016322:	4798      	blx	r3
 8016324:	4603      	mov	r3, r0
  }
 8016326:	4618      	mov	r0, r3
 8016328:	3710      	adds	r7, #16
 801632a:	46bd      	mov	sp, r7
 801632c:	bd80      	pop	{r7, pc}

0801632e <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv>:
  void Deallocate(void* data) override {
 801632e:	b480      	push	{r7}
 8016330:	b083      	sub	sp, #12
 8016332:	af00      	add	r7, sp, #0
 8016334:	6078      	str	r0, [r7, #4]
 8016336:	6039      	str	r1, [r7, #0]
    // Do not deallocate, builtin data needs to be available for the life time
    // of the model.
  }
 8016338:	bf00      	nop
 801633a:	370c      	adds	r7, #12
 801633c:	46bd      	mov	sp, r7
 801633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016342:	4770      	bx	lr

08016344 <_ZN6tflite12_GLOBAL__N_117AllocateVariablesEPKN11flatbuffers6VectorINS1_6OffsetINS_6TensorEEEEEP12TfLiteTensorPNS_21SimpleMemoryAllocatorE>:
  TF_LITE_REMOVE_VIRTUAL_DELETE
};

TfLiteStatus AllocateVariables(
    const flatbuffers::Vector<flatbuffers::Offset<Tensor>>* flatbuffer_tensors,
    TfLiteTensor* runtime_tensors, SimpleMemoryAllocator* allocator) {
 8016344:	b590      	push	{r4, r7, lr}
 8016346:	b087      	sub	sp, #28
 8016348:	af00      	add	r7, sp, #0
 801634a:	60f8      	str	r0, [r7, #12]
 801634c:	60b9      	str	r1, [r7, #8]
 801634e:	607a      	str	r2, [r7, #4]
  for (size_t i = 0; i < flatbuffer_tensors->size(); ++i) {
 8016350:	2300      	movs	r3, #0
 8016352:	617b      	str	r3, [r7, #20]
 8016354:	68f8      	ldr	r0, [r7, #12]
 8016356:	f001 fa65 	bl	8017824 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 801635a:	4602      	mov	r2, r0
 801635c:	697b      	ldr	r3, [r7, #20]
 801635e:	4293      	cmp	r3, r2
 8016360:	bf34      	ite	cc
 8016362:	2301      	movcc	r3, #1
 8016364:	2300      	movcs	r3, #0
 8016366:	b2db      	uxtb	r3, r3
 8016368:	2b00      	cmp	r3, #0
 801636a:	d031      	beq.n	80163d0 <_ZN6tflite12_GLOBAL__N_117AllocateVariablesEPKN11flatbuffers6VectorINS1_6OffsetINS_6TensorEEEEEP12TfLiteTensorPNS_21SimpleMemoryAllocatorE+0x8c>
    if (flatbuffer_tensors->Get(i)->is_variable()) {
 801636c:	6979      	ldr	r1, [r7, #20]
 801636e:	68f8      	ldr	r0, [r7, #12]
 8016370:	f001 fa66 	bl	8017840 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 8016374:	4603      	mov	r3, r0
 8016376:	4618      	mov	r0, r3
 8016378:	f7ff fec0 	bl	80160fc <_ZNK6tflite6Tensor11is_variableEv>
 801637c:	4603      	mov	r3, r0
 801637e:	2b00      	cmp	r3, #0
 8016380:	d01b      	beq.n	80163ba <_ZN6tflite12_GLOBAL__N_117AllocateVariablesEPKN11flatbuffers6VectorINS1_6OffsetINS_6TensorEEEEEP12TfLiteTensorPNS_21SimpleMemoryAllocatorE+0x76>
      runtime_tensors[i].data.data = allocator->AllocateFromTail(
          runtime_tensors[i].bytes, kBufferAlignment);
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	681b      	ldr	r3, [r3, #0]
 8016386:	330c      	adds	r3, #12
 8016388:	681b      	ldr	r3, [r3, #0]
 801638a:	697a      	ldr	r2, [r7, #20]
 801638c:	0192      	lsls	r2, r2, #6
 801638e:	68b9      	ldr	r1, [r7, #8]
 8016390:	440a      	add	r2, r1
      runtime_tensors[i].data.data = allocator->AllocateFromTail(
 8016392:	6990      	ldr	r0, [r2, #24]
 8016394:	697a      	ldr	r2, [r7, #20]
 8016396:	0192      	lsls	r2, r2, #6
 8016398:	68b9      	ldr	r1, [r7, #8]
 801639a:	188c      	adds	r4, r1, r2
 801639c:	2210      	movs	r2, #16
 801639e:	4601      	mov	r1, r0
 80163a0:	6878      	ldr	r0, [r7, #4]
 80163a2:	4798      	blx	r3
 80163a4:	4603      	mov	r3, r0
 80163a6:	6063      	str	r3, [r4, #4]
      // Allocation failure.
      if (runtime_tensors[i].data.data == nullptr) {
 80163a8:	697b      	ldr	r3, [r7, #20]
 80163aa:	019b      	lsls	r3, r3, #6
 80163ac:	68ba      	ldr	r2, [r7, #8]
 80163ae:	4413      	add	r3, r2
 80163b0:	685b      	ldr	r3, [r3, #4]
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	d101      	bne.n	80163ba <_ZN6tflite12_GLOBAL__N_117AllocateVariablesEPKN11flatbuffers6VectorINS1_6OffsetINS_6TensorEEEEEP12TfLiteTensorPNS_21SimpleMemoryAllocatorE+0x76>
        return kTfLiteError;
 80163b6:	2301      	movs	r3, #1
 80163b8:	e00b      	b.n	80163d2 <_ZN6tflite12_GLOBAL__N_117AllocateVariablesEPKN11flatbuffers6VectorINS1_6OffsetINS_6TensorEEEEEP12TfLiteTensorPNS_21SimpleMemoryAllocatorE+0x8e>
      }
    }
    tflite::ResetVariableTensor(&(runtime_tensors[i]));
 80163ba:	697b      	ldr	r3, [r7, #20]
 80163bc:	019b      	lsls	r3, r3, #6
 80163be:	68ba      	ldr	r2, [r7, #8]
 80163c0:	4413      	add	r3, r2
 80163c2:	4618      	mov	r0, r3
 80163c4:	f7fe fed3 	bl	801516e <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor>
  for (size_t i = 0; i < flatbuffer_tensors->size(); ++i) {
 80163c8:	697b      	ldr	r3, [r7, #20]
 80163ca:	3301      	adds	r3, #1
 80163cc:	617b      	str	r3, [r7, #20]
 80163ce:	e7c1      	b.n	8016354 <_ZN6tflite12_GLOBAL__N_117AllocateVariablesEPKN11flatbuffers6VectorINS1_6OffsetINS_6TensorEEEEEP12TfLiteTensorPNS_21SimpleMemoryAllocatorE+0x10>
  }
  return kTfLiteOk;
 80163d0:	2300      	movs	r3, #0
}
 80163d2:	4618      	mov	r0, r3
 80163d4:	371c      	adds	r7, #28
 80163d6:	46bd      	mov	sp, r7
 80163d8:	bd90      	pop	{r4, r7, pc}

080163da <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilderC1EPNS_13ErrorReporterEPNS_21SimpleMemoryAllocatorE>:
// A helper class to construct AllocationInfo array. This array contains the
// lifetime of tensors / scratch_buffer and will be used to calculate the memory
// plan. Methods need to be called in order from `Init`, `Add*`, to `Finish`.
class AllocationInfoBuilder {
 public:
  AllocationInfoBuilder(ErrorReporter* reporter,
 80163da:	b480      	push	{r7}
 80163dc:	b085      	sub	sp, #20
 80163de:	af00      	add	r7, sp, #0
 80163e0:	60f8      	str	r0, [r7, #12]
 80163e2:	60b9      	str	r1, [r7, #8]
 80163e4:	607a      	str	r2, [r7, #4]
                        SimpleMemoryAllocator* allocator)
      : reporter_(reporter), allocator_(allocator) {}
 80163e6:	68fb      	ldr	r3, [r7, #12]
 80163e8:	68ba      	ldr	r2, [r7, #8]
 80163ea:	601a      	str	r2, [r3, #0]
 80163ec:	68fb      	ldr	r3, [r7, #12]
 80163ee:	687a      	ldr	r2, [r7, #4]
 80163f0:	605a      	str	r2, [r3, #4]
 80163f2:	68fb      	ldr	r3, [r7, #12]
 80163f4:	2200      	movs	r2, #0
 80163f6:	609a      	str	r2, [r3, #8]
 80163f8:	68fb      	ldr	r3, [r7, #12]
 80163fa:	2200      	movs	r2, #0
 80163fc:	60da      	str	r2, [r3, #12]
 80163fe:	68fb      	ldr	r3, [r7, #12]
 8016400:	2200      	movs	r2, #0
 8016402:	611a      	str	r2, [r3, #16]
 8016404:	68fb      	ldr	r3, [r7, #12]
 8016406:	4618      	mov	r0, r3
 8016408:	3714      	adds	r7, #20
 801640a:	46bd      	mov	sp, r7
 801640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016410:	4770      	bx	lr

08016412 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder4InitEjj>:

  // Initializes the builder by allocating AllocationInfo array from the
  // simple memory allocator.
  TfLiteStatus Init(size_t tensor_count, size_t scratch_buffer_count) {
 8016412:	b580      	push	{r7, lr}
 8016414:	b084      	sub	sp, #16
 8016416:	af00      	add	r7, sp, #0
 8016418:	60f8      	str	r0, [r7, #12]
 801641a:	60b9      	str	r1, [r7, #8]
 801641c:	607a      	str	r2, [r7, #4]
    tensor_count_ = tensor_count;
 801641e:	68fb      	ldr	r3, [r7, #12]
 8016420:	68ba      	ldr	r2, [r7, #8]
 8016422:	609a      	str	r2, [r3, #8]
    buffer_count_ = scratch_buffer_count;
 8016424:	68fb      	ldr	r3, [r7, #12]
 8016426:	687a      	ldr	r2, [r7, #4]
 8016428:	60da      	str	r2, [r3, #12]
    return Allocate();
 801642a:	68f8      	ldr	r0, [r7, #12]
 801642c:	f000 f820 	bl	8016470 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder8AllocateEv>
 8016430:	4603      	mov	r3, r0
  }
 8016432:	4618      	mov	r0, r3
 8016434:	3710      	adds	r7, #16
 8016436:	46bd      	mov	sp, r7
 8016438:	bd80      	pop	{r7, pc}

0801643a <_ZNK6tflite12_GLOBAL__N_121AllocationInfoBuilder6FinishEv>:
                          TfLiteTensor* runtime_tensors);
  // Add allocation information for the scratch buffers.
  TfLiteStatus AddScratchBuffers(internal::ScratchBufferHandle* buffer_handles);

  // Returns a pointer to the built AllocationInfo array.
  const AllocationInfo* Finish() const { return info_; }
 801643a:	b480      	push	{r7}
 801643c:	b083      	sub	sp, #12
 801643e:	af00      	add	r7, sp, #0
 8016440:	6078      	str	r0, [r7, #4]
 8016442:	687b      	ldr	r3, [r7, #4]
 8016444:	691b      	ldr	r3, [r3, #16]
 8016446:	4618      	mov	r0, r3
 8016448:	370c      	adds	r7, #12
 801644a:	46bd      	mov	sp, r7
 801644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016450:	4770      	bx	lr

08016452 <_ZNK6tflite12_GLOBAL__N_121AllocationInfoBuilder4SizeEv>:
  size_t Size() const { return tensor_count_ + buffer_count_; }
 8016452:	b480      	push	{r7}
 8016454:	b083      	sub	sp, #12
 8016456:	af00      	add	r7, sp, #0
 8016458:	6078      	str	r0, [r7, #4]
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	689a      	ldr	r2, [r3, #8]
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	68db      	ldr	r3, [r3, #12]
 8016462:	4413      	add	r3, r2
 8016464:	4618      	mov	r0, r3
 8016466:	370c      	adds	r7, #12
 8016468:	46bd      	mov	sp, r7
 801646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801646e:	4770      	bx	lr

08016470 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder8AllocateEv>:
  size_t tensor_count_ = 0;
  size_t buffer_count_ = 0;
  AllocationInfo* info_ = nullptr;
};

TfLiteStatus AllocationInfoBuilder::Allocate() {
 8016470:	b580      	push	{r7, lr}
 8016472:	b084      	sub	sp, #16
 8016474:	af00      	add	r7, sp, #0
 8016476:	6078      	str	r0, [r7, #4]
  size_t bytes = sizeof(AllocationInfo) * Size();
 8016478:	6878      	ldr	r0, [r7, #4]
 801647a:	f7ff ffea 	bl	8016452 <_ZNK6tflite12_GLOBAL__N_121AllocationInfoBuilder4SizeEv>
 801647e:	4602      	mov	r2, r0
 8016480:	4613      	mov	r3, r2
 8016482:	009b      	lsls	r3, r3, #2
 8016484:	4413      	add	r3, r2
 8016486:	009b      	lsls	r3, r3, #2
 8016488:	60fb      	str	r3, [r7, #12]
  info_ = reinterpret_cast<AllocationInfo*>(
      allocator_->AllocateFromTail(bytes, alignof(AllocationInfo)));
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	6858      	ldr	r0, [r3, #4]
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	685b      	ldr	r3, [r3, #4]
 8016492:	681b      	ldr	r3, [r3, #0]
 8016494:	330c      	adds	r3, #12
 8016496:	681b      	ldr	r3, [r3, #0]
 8016498:	2204      	movs	r2, #4
 801649a:	68f9      	ldr	r1, [r7, #12]
 801649c:	4798      	blx	r3
 801649e:	4602      	mov	r2, r0
  info_ = reinterpret_cast<AllocationInfo*>(
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	611a      	str	r2, [r3, #16]
  if (info_ == nullptr) {
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	691b      	ldr	r3, [r3, #16]
 80164a8:	2b00      	cmp	r3, #0
 80164aa:	d108      	bne.n	80164be <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder8AllocateEv+0x4e>
    TF_LITE_REPORT_ERROR(
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	681b      	ldr	r3, [r3, #0]
 80164b0:	68fa      	ldr	r2, [r7, #12]
 80164b2:	4905      	ldr	r1, [pc, #20]	; (80164c8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder8AllocateEv+0x58>)
 80164b4:	4618      	mov	r0, r3
 80164b6:	f7ee ff89 	bl	80053cc <_ZN6tflite13ErrorReporter6ReportEPKcz>
        reporter_,
        "Failed to allocate memory for allocation_info, %d bytes required",
        bytes);
    return kTfLiteError;
 80164ba:	2301      	movs	r3, #1
 80164bc:	e000      	b.n	80164c0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder8AllocateEv+0x50>
  }
  return kTfLiteOk;
 80164be:	2300      	movs	r3, #0
}
 80164c0:	4618      	mov	r0, r3
 80164c2:	3710      	adds	r7, #16
 80164c4:	46bd      	mov	sp, r7
 80164c6:	bd80      	pop	{r7, pc}
 80164c8:	08023110 	.word	0x08023110

080164cc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEP12TfLiteTensor>:

TfLiteStatus AllocationInfoBuilder::AddTensors(const SubGraph* subgraph,
                                               TfLiteTensor* runtime_tensors) {
 80164cc:	b580      	push	{r7, lr}
 80164ce:	b09a      	sub	sp, #104	; 0x68
 80164d0:	af02      	add	r7, sp, #8
 80164d2:	60f8      	str	r0, [r7, #12]
 80164d4:	60b9      	str	r1, [r7, #8]
 80164d6:	607a      	str	r2, [r7, #4]
  // Set up allocation info for all tensors.
  for (size_t i = 0; i < tensor_count_; ++i) {
 80164d8:	2300      	movs	r3, #0
 80164da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80164dc:	68fb      	ldr	r3, [r7, #12]
 80164de:	689b      	ldr	r3, [r3, #8]
 80164e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80164e2:	429a      	cmp	r2, r3
 80164e4:	d240      	bcs.n	8016568 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEP12TfLiteTensor+0x9c>
    AllocationInfo* current = &info_[i];
 80164e6:	68fb      	ldr	r3, [r7, #12]
 80164e8:	6919      	ldr	r1, [r3, #16]
 80164ea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80164ec:	4613      	mov	r3, r2
 80164ee:	009b      	lsls	r3, r3, #2
 80164f0:	4413      	add	r3, r2
 80164f2:	009b      	lsls	r3, r3, #2
 80164f4:	440b      	add	r3, r1
 80164f6:	643b      	str	r3, [r7, #64]	; 0x40
    // TfLiteTensor.uint8 field is deprecated so use .data field instead.
    current->output_ptr = &(runtime_tensors[i].data.data);
 80164f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80164fa:	019b      	lsls	r3, r3, #6
 80164fc:	687a      	ldr	r2, [r7, #4]
 80164fe:	4413      	add	r3, r2
 8016500:	1d1a      	adds	r2, r3, #4
 8016502:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016504:	611a      	str	r2, [r3, #16]
    current->bytes = runtime_tensors[i].bytes;
 8016506:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016508:	019b      	lsls	r3, r3, #6
 801650a:	687a      	ldr	r2, [r7, #4]
 801650c:	4413      	add	r3, r2
 801650e:	699a      	ldr	r2, [r3, #24]
 8016510:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016512:	601a      	str	r2, [r3, #0]
    current->first_created = -1;
 8016514:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016516:	f04f 32ff 	mov.w	r2, #4294967295
 801651a:	605a      	str	r2, [r3, #4]
    current->last_used = -1;
 801651c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801651e:	f04f 32ff 	mov.w	r2, #4294967295
 8016522:	609a      	str	r2, [r3, #8]
    current->needs_allocating = (runtime_tensors[i].data.data == nullptr) &&
 8016524:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016526:	019b      	lsls	r3, r3, #6
 8016528:	687a      	ldr	r2, [r7, #4]
 801652a:	4413      	add	r3, r2
 801652c:	685b      	ldr	r3, [r3, #4]
 801652e:	2b00      	cmp	r3, #0
 8016530:	d113      	bne.n	801655a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEP12TfLiteTensor+0x8e>
                                (!subgraph->tensors()->Get(i)->is_variable());
 8016532:	68b8      	ldr	r0, [r7, #8]
 8016534:	f7ff fe2f 	bl	8016196 <_ZNK6tflite8SubGraph7tensorsEv>
 8016538:	4603      	mov	r3, r0
 801653a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 801653c:	4618      	mov	r0, r3
 801653e:	f001 f97f 	bl	8017840 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 8016542:	4603      	mov	r3, r0
 8016544:	4618      	mov	r0, r3
 8016546:	f7ff fdd9 	bl	80160fc <_ZNK6tflite6Tensor11is_variableEv>
 801654a:	4603      	mov	r3, r0
 801654c:	f083 0301 	eor.w	r3, r3, #1
 8016550:	b2db      	uxtb	r3, r3
    current->needs_allocating = (runtime_tensors[i].data.data == nullptr) &&
 8016552:	2b00      	cmp	r3, #0
 8016554:	d001      	beq.n	801655a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEP12TfLiteTensor+0x8e>
 8016556:	2201      	movs	r2, #1
 8016558:	e000      	b.n	801655c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEP12TfLiteTensor+0x90>
 801655a:	2200      	movs	r2, #0
 801655c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801655e:	731a      	strb	r2, [r3, #12]
  for (size_t i = 0; i < tensor_count_; ++i) {
 8016560:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016562:	3301      	adds	r3, #1
 8016564:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016566:	e7b9      	b.n	80164dc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEP12TfLiteTensor+0x10>
  }

  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
 8016568:	2300      	movs	r3, #0
 801656a:	65bb      	str	r3, [r7, #88]	; 0x58
 801656c:	68b8      	ldr	r0, [r7, #8]
 801656e:	f7ff fe20 	bl	80161b2 <_ZNK6tflite8SubGraph6inputsEv>
 8016572:	4603      	mov	r3, r0
 8016574:	4618      	mov	r0, r3
 8016576:	f7f3 f9e6 	bl	8009946 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 801657a:	4602      	mov	r2, r0
 801657c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801657e:	4293      	cmp	r3, r2
 8016580:	bf34      	ite	cc
 8016582:	2301      	movcc	r3, #1
 8016584:	2300      	movcs	r3, #0
 8016586:	b2db      	uxtb	r3, r3
 8016588:	2b00      	cmp	r3, #0
 801658a:	d018      	beq.n	80165be <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEP12TfLiteTensor+0xf2>
    const int tensor_index = subgraph->inputs()->Get(i);
 801658c:	68b8      	ldr	r0, [r7, #8]
 801658e:	f7ff fe10 	bl	80161b2 <_ZNK6tflite8SubGraph6inputsEv>
 8016592:	4603      	mov	r3, r0
 8016594:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8016596:	4618      	mov	r0, r3
 8016598:	f7f3 f9e4 	bl	8009964 <_ZNK11flatbuffers6VectorIlE3GetEm>
 801659c:	61b8      	str	r0, [r7, #24]
    AllocationInfo* current = &info_[tensor_index];
 801659e:	68fb      	ldr	r3, [r7, #12]
 80165a0:	6919      	ldr	r1, [r3, #16]
 80165a2:	69ba      	ldr	r2, [r7, #24]
 80165a4:	4613      	mov	r3, r2
 80165a6:	009b      	lsls	r3, r3, #2
 80165a8:	4413      	add	r3, r2
 80165aa:	009b      	lsls	r3, r3, #2
 80165ac:	440b      	add	r3, r1
 80165ae:	617b      	str	r3, [r7, #20]
    current->first_created = 0;
 80165b0:	697b      	ldr	r3, [r7, #20]
 80165b2:	2200      	movs	r2, #0
 80165b4:	605a      	str	r2, [r3, #4]
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
 80165b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80165b8:	3301      	adds	r3, #1
 80165ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80165bc:	e7d6      	b.n	801656c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEP12TfLiteTensor+0xa0>
  }

  // Mark all outputs as persistent to the end of the invocation.
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
 80165be:	2300      	movs	r3, #0
 80165c0:	657b      	str	r3, [r7, #84]	; 0x54
 80165c2:	68b8      	ldr	r0, [r7, #8]
 80165c4:	f7ff fe03 	bl	80161ce <_ZNK6tflite8SubGraph7outputsEv>
 80165c8:	4603      	mov	r3, r0
 80165ca:	4618      	mov	r0, r3
 80165cc:	f7f3 f9bb 	bl	8009946 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 80165d0:	4602      	mov	r2, r0
 80165d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80165d4:	4293      	cmp	r3, r2
 80165d6:	bf34      	ite	cc
 80165d8:	2301      	movcc	r3, #1
 80165da:	2300      	movcs	r3, #0
 80165dc:	b2db      	uxtb	r3, r3
 80165de:	2b00      	cmp	r3, #0
 80165e0:	d021      	beq.n	8016626 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEP12TfLiteTensor+0x15a>
    const int tensor_index = subgraph->outputs()->Get(i);
 80165e2:	68b8      	ldr	r0, [r7, #8]
 80165e4:	f7ff fdf3 	bl	80161ce <_ZNK6tflite8SubGraph7outputsEv>
 80165e8:	4603      	mov	r3, r0
 80165ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80165ec:	4618      	mov	r0, r3
 80165ee:	f7f3 f9b9 	bl	8009964 <_ZNK11flatbuffers6VectorIlE3GetEm>
 80165f2:	6238      	str	r0, [r7, #32]
    AllocationInfo* current = &info_[tensor_index];
 80165f4:	68fb      	ldr	r3, [r7, #12]
 80165f6:	6919      	ldr	r1, [r3, #16]
 80165f8:	6a3a      	ldr	r2, [r7, #32]
 80165fa:	4613      	mov	r3, r2
 80165fc:	009b      	lsls	r3, r3, #2
 80165fe:	4413      	add	r3, r2
 8016600:	009b      	lsls	r3, r3, #2
 8016602:	440b      	add	r3, r1
 8016604:	61fb      	str	r3, [r7, #28]
    current->last_used = subgraph->operators()->size() - 1;
 8016606:	68b8      	ldr	r0, [r7, #8]
 8016608:	f7ff fdef 	bl	80161ea <_ZNK6tflite8SubGraph9operatorsEv>
 801660c:	4603      	mov	r3, r0
 801660e:	4618      	mov	r0, r3
 8016610:	f001 f93c 	bl	801788c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 8016614:	4603      	mov	r3, r0
 8016616:	3b01      	subs	r3, #1
 8016618:	461a      	mov	r2, r3
 801661a:	69fb      	ldr	r3, [r7, #28]
 801661c:	609a      	str	r2, [r3, #8]
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
 801661e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016620:	3301      	adds	r3, #1
 8016622:	657b      	str	r3, [r7, #84]	; 0x54
 8016624:	e7cd      	b.n	80165c2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEP12TfLiteTensor+0xf6>
  }

  // Figure out when the first and last use of each tensor is.
  for (int i = (subgraph->operators()->size() - 1); i >= 0; --i) {
 8016626:	68b8      	ldr	r0, [r7, #8]
 8016628:	f7ff fddf 	bl	80161ea <_ZNK6tflite8SubGraph9operatorsEv>
 801662c:	4603      	mov	r3, r0
 801662e:	4618      	mov	r0, r3
 8016630:	f001 f92c 	bl	801788c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 8016634:	4603      	mov	r3, r0
 8016636:	3b01      	subs	r3, #1
 8016638:	653b      	str	r3, [r7, #80]	; 0x50
 801663a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801663c:	2b00      	cmp	r3, #0
 801663e:	db77      	blt.n	8016730 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEP12TfLiteTensor+0x264>
    const auto* op = subgraph->operators()->Get(i);
 8016640:	68b8      	ldr	r0, [r7, #8]
 8016642:	f7ff fdd2 	bl	80161ea <_ZNK6tflite8SubGraph9operatorsEv>
 8016646:	4602      	mov	r2, r0
 8016648:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801664a:	4619      	mov	r1, r3
 801664c:	4610      	mov	r0, r2
 801664e:	f001 f92b 	bl	80178a8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>
 8016652:	63f8      	str	r0, [r7, #60]	; 0x3c
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
 8016654:	2300      	movs	r3, #0
 8016656:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016658:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801665a:	f7ff fd72 	bl	8016142 <_ZNK6tflite8Operator6inputsEv>
 801665e:	4603      	mov	r3, r0
 8016660:	4618      	mov	r0, r3
 8016662:	f7f3 f970 	bl	8009946 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8016666:	4602      	mov	r2, r0
 8016668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801666a:	4293      	cmp	r3, r2
 801666c:	bf34      	ite	cc
 801666e:	2301      	movcc	r3, #1
 8016670:	2300      	movcs	r3, #0
 8016672:	b2db      	uxtb	r3, r3
 8016674:	2b00      	cmp	r3, #0
 8016676:	d022      	beq.n	80166be <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEP12TfLiteTensor+0x1f2>
      const int tensor_index = op->inputs()->Get(n);
 8016678:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801667a:	f7ff fd62 	bl	8016142 <_ZNK6tflite8Operator6inputsEv>
 801667e:	4603      	mov	r3, r0
 8016680:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8016682:	4618      	mov	r0, r3
 8016684:	f7f3 f96e 	bl	8009964 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8016688:	6338      	str	r0, [r7, #48]	; 0x30
      AllocationInfo* current = &info_[tensor_index];
 801668a:	68fb      	ldr	r3, [r7, #12]
 801668c:	6919      	ldr	r1, [r3, #16]
 801668e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016690:	4613      	mov	r3, r2
 8016692:	009b      	lsls	r3, r3, #2
 8016694:	4413      	add	r3, r2
 8016696:	009b      	lsls	r3, r3, #2
 8016698:	440b      	add	r3, r1
 801669a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (((current->last_used == -1) || (current->last_used < i))) {
 801669c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801669e:	689b      	ldr	r3, [r3, #8]
 80166a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80166a4:	d004      	beq.n	80166b0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEP12TfLiteTensor+0x1e4>
 80166a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166a8:	689b      	ldr	r3, [r3, #8]
 80166aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80166ac:	429a      	cmp	r2, r3
 80166ae:	dd02      	ble.n	80166b6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEP12TfLiteTensor+0x1ea>
        current->last_used = i;
 80166b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80166b4:	609a      	str	r2, [r3, #8]
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
 80166b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80166b8:	3301      	adds	r3, #1
 80166ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80166bc:	e7cc      	b.n	8016658 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEP12TfLiteTensor+0x18c>
      }
    }
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
 80166be:	2300      	movs	r3, #0
 80166c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80166c2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80166c4:	f7ff fd4b 	bl	801615e <_ZNK6tflite8Operator7outputsEv>
 80166c8:	4603      	mov	r3, r0
 80166ca:	4618      	mov	r0, r3
 80166cc:	f7f3 f93b 	bl	8009946 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 80166d0:	4602      	mov	r2, r0
 80166d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80166d4:	4293      	cmp	r3, r2
 80166d6:	bf34      	ite	cc
 80166d8:	2301      	movcc	r3, #1
 80166da:	2300      	movcs	r3, #0
 80166dc:	b2db      	uxtb	r3, r3
 80166de:	2b00      	cmp	r3, #0
 80166e0:	d022      	beq.n	8016728 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEP12TfLiteTensor+0x25c>
      const int tensor_index = op->outputs()->Get(n);
 80166e2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80166e4:	f7ff fd3b 	bl	801615e <_ZNK6tflite8Operator7outputsEv>
 80166e8:	4603      	mov	r3, r0
 80166ea:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80166ec:	4618      	mov	r0, r3
 80166ee:	f7f3 f939 	bl	8009964 <_ZNK11flatbuffers6VectorIlE3GetEm>
 80166f2:	63b8      	str	r0, [r7, #56]	; 0x38
      AllocationInfo* current = &info_[tensor_index];
 80166f4:	68fb      	ldr	r3, [r7, #12]
 80166f6:	6919      	ldr	r1, [r3, #16]
 80166f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80166fa:	4613      	mov	r3, r2
 80166fc:	009b      	lsls	r3, r3, #2
 80166fe:	4413      	add	r3, r2
 8016700:	009b      	lsls	r3, r3, #2
 8016702:	440b      	add	r3, r1
 8016704:	637b      	str	r3, [r7, #52]	; 0x34
      if ((current->first_created == -1) || (current->first_created > i)) {
 8016706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016708:	685b      	ldr	r3, [r3, #4]
 801670a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801670e:	d004      	beq.n	801671a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEP12TfLiteTensor+0x24e>
 8016710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016712:	685b      	ldr	r3, [r3, #4]
 8016714:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016716:	429a      	cmp	r2, r3
 8016718:	da02      	bge.n	8016720 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEP12TfLiteTensor+0x254>
        current->first_created = i;
 801671a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801671c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801671e:	605a      	str	r2, [r3, #4]
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
 8016720:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016722:	3301      	adds	r3, #1
 8016724:	64bb      	str	r3, [r7, #72]	; 0x48
 8016726:	e7cc      	b.n	80166c2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEP12TfLiteTensor+0x1f6>
  for (int i = (subgraph->operators()->size() - 1); i >= 0; --i) {
 8016728:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801672a:	3b01      	subs	r3, #1
 801672c:	653b      	str	r3, [r7, #80]	; 0x50
 801672e:	e784      	b.n	801663a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEP12TfLiteTensor+0x16e>
      }
    }
  }

  // Work out which tensors need to be allocated.
  for (size_t i = 0; i < tensor_count_; ++i) {
 8016730:	2300      	movs	r3, #0
 8016732:	647b      	str	r3, [r7, #68]	; 0x44
 8016734:	68fb      	ldr	r3, [r7, #12]
 8016736:	689b      	ldr	r3, [r3, #8]
 8016738:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801673a:	429a      	cmp	r2, r3
 801673c:	d24e      	bcs.n	80167dc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEP12TfLiteTensor+0x310>
    AllocationInfo* current = &info_[i];
 801673e:	68fb      	ldr	r3, [r7, #12]
 8016740:	6919      	ldr	r1, [r3, #16]
 8016742:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016744:	4613      	mov	r3, r2
 8016746:	009b      	lsls	r3, r3, #2
 8016748:	4413      	add	r3, r2
 801674a:	009b      	lsls	r3, r3, #2
 801674c:	440b      	add	r3, r1
 801674e:	62bb      	str	r3, [r7, #40]	; 0x28
    const bool is_read_only =
        (current->first_created == -1) && (current->last_used != -1);
 8016750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016752:	685b      	ldr	r3, [r3, #4]
 8016754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016758:	d106      	bne.n	8016768 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEP12TfLiteTensor+0x29c>
 801675a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801675c:	689b      	ldr	r3, [r3, #8]
 801675e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016762:	d001      	beq.n	8016768 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEP12TfLiteTensor+0x29c>
 8016764:	2301      	movs	r3, #1
 8016766:	e000      	b.n	801676a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEP12TfLiteTensor+0x29e>
 8016768:	2300      	movs	r3, #0
    const bool is_read_only =
 801676a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (is_read_only) {
 801676e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016772:	2b00      	cmp	r3, #0
 8016774:	d002      	beq.n	801677c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEP12TfLiteTensor+0x2b0>
      current->needs_allocating = false;
 8016776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016778:	2200      	movs	r2, #0
 801677a:	731a      	strb	r2, [r3, #12]
    }
    const bool has_partial_lifetime =
        !is_read_only &&
 801677c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016780:	f083 0301 	eor.w	r3, r3, #1
 8016784:	b2db      	uxtb	r3, r3
 8016786:	2b00      	cmp	r3, #0
 8016788:	d00b      	beq.n	80167a2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEP12TfLiteTensor+0x2d6>
        ((current->first_created == -1) || (current->last_used == -1));
 801678a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801678c:	685b      	ldr	r3, [r3, #4]
        !is_read_only &&
 801678e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016792:	d004      	beq.n	801679e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEP12TfLiteTensor+0x2d2>
        ((current->first_created == -1) || (current->last_used == -1));
 8016794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016796:	689b      	ldr	r3, [r3, #8]
 8016798:	f1b3 3fff 	cmp.w	r3, #4294967295
 801679c:	d101      	bne.n	80167a2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEP12TfLiteTensor+0x2d6>
        !is_read_only &&
 801679e:	2301      	movs	r3, #1
 80167a0:	e000      	b.n	80167a4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEP12TfLiteTensor+0x2d8>
 80167a2:	2300      	movs	r3, #0
    const bool has_partial_lifetime =
 80167a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    if (has_partial_lifetime && current->needs_allocating) {
 80167a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80167ac:	2b00      	cmp	r3, #0
 80167ae:	d011      	beq.n	80167d4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEP12TfLiteTensor+0x308>
 80167b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167b2:	7b1b      	ldrb	r3, [r3, #12]
 80167b4:	2b00      	cmp	r3, #0
 80167b6:	d00d      	beq.n	80167d4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEP12TfLiteTensor+0x308>
      TF_LITE_REPORT_ERROR(
 80167b8:	68fb      	ldr	r3, [r7, #12]
 80167ba:	6818      	ldr	r0, [r3, #0]
 80167bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167be:	685a      	ldr	r2, [r3, #4]
 80167c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167c2:	689b      	ldr	r3, [r3, #8]
 80167c4:	9300      	str	r3, [sp, #0]
 80167c6:	4613      	mov	r3, r2
 80167c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80167ca:	4907      	ldr	r1, [pc, #28]	; (80167e8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEP12TfLiteTensor+0x31c>)
 80167cc:	f7ee fdfe 	bl	80053cc <_ZN6tflite13ErrorReporter6ReportEPKcz>
          reporter_,
          "Logic error in memory planner, tensor %d has an invalid lifetime: "
          "first_created: %d, last_used: %d",
          i, current->first_created, current->last_used);
      return kTfLiteError;
 80167d0:	2301      	movs	r3, #1
 80167d2:	e004      	b.n	80167de <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEP12TfLiteTensor+0x312>
  for (size_t i = 0; i < tensor_count_; ++i) {
 80167d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80167d6:	3301      	adds	r3, #1
 80167d8:	647b      	str	r3, [r7, #68]	; 0x44
 80167da:	e7ab      	b.n	8016734 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEP12TfLiteTensor+0x268>
    }
  }
  return kTfLiteOk;
 80167dc:	2300      	movs	r3, #0
}
 80167de:	4618      	mov	r0, r3
 80167e0:	3760      	adds	r7, #96	; 0x60
 80167e2:	46bd      	mov	sp, r7
 80167e4:	bd80      	pop	{r7, pc}
 80167e6:	bf00      	nop
 80167e8:	08023154 	.word	0x08023154

080167ec <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal19ScratchBufferHandleE>:

TfLiteStatus AllocationInfoBuilder::AddScratchBuffers(
    internal::ScratchBufferHandle* buffer_handles) {
 80167ec:	b480      	push	{r7}
 80167ee:	b087      	sub	sp, #28
 80167f0:	af00      	add	r7, sp, #0
 80167f2:	6078      	str	r0, [r7, #4]
 80167f4:	6039      	str	r1, [r7, #0]
  // Set up allocation info for buffers.
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	689b      	ldr	r3, [r3, #8]
 80167fa:	617b      	str	r3, [r7, #20]
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	689a      	ldr	r2, [r3, #8]
 8016800:	687b      	ldr	r3, [r7, #4]
 8016802:	68db      	ldr	r3, [r3, #12]
 8016804:	4413      	add	r3, r2
 8016806:	697a      	ldr	r2, [r7, #20]
 8016808:	429a      	cmp	r2, r3
 801680a:	d22a      	bcs.n	8016862 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal19ScratchBufferHandleE+0x76>
    AllocationInfo* current = &info_[i];
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	6919      	ldr	r1, [r3, #16]
 8016810:	697a      	ldr	r2, [r7, #20]
 8016812:	4613      	mov	r3, r2
 8016814:	009b      	lsls	r3, r3, #2
 8016816:	4413      	add	r3, r2
 8016818:	009b      	lsls	r3, r3, #2
 801681a:	440b      	add	r3, r1
 801681c:	613b      	str	r3, [r7, #16]
    internal::ScratchBufferHandle* handle =
        &(buffer_handles[i - tensor_count_]);
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	689b      	ldr	r3, [r3, #8]
 8016822:	697a      	ldr	r2, [r7, #20]
 8016824:	1ad2      	subs	r2, r2, r3
 8016826:	4613      	mov	r3, r2
 8016828:	005b      	lsls	r3, r3, #1
 801682a:	4413      	add	r3, r2
 801682c:	009b      	lsls	r3, r3, #2
 801682e:	461a      	mov	r2, r3
    internal::ScratchBufferHandle* handle =
 8016830:	683b      	ldr	r3, [r7, #0]
 8016832:	4413      	add	r3, r2
 8016834:	60fb      	str	r3, [r7, #12]
    current->output_ptr = reinterpret_cast<void**>(&handle->data);
 8016836:	68fa      	ldr	r2, [r7, #12]
 8016838:	693b      	ldr	r3, [r7, #16]
 801683a:	611a      	str	r2, [r3, #16]
    current->bytes = handle->bytes;
 801683c:	68fb      	ldr	r3, [r7, #12]
 801683e:	685a      	ldr	r2, [r3, #4]
 8016840:	693b      	ldr	r3, [r7, #16]
 8016842:	601a      	str	r2, [r3, #0]
    current->first_created = handle->node_idx;
 8016844:	68fb      	ldr	r3, [r7, #12]
 8016846:	689a      	ldr	r2, [r3, #8]
 8016848:	693b      	ldr	r3, [r7, #16]
 801684a:	605a      	str	r2, [r3, #4]
    current->last_used = handle->node_idx;
 801684c:	68fb      	ldr	r3, [r7, #12]
 801684e:	689a      	ldr	r2, [r3, #8]
 8016850:	693b      	ldr	r3, [r7, #16]
 8016852:	609a      	str	r2, [r3, #8]
    current->needs_allocating = true;
 8016854:	693b      	ldr	r3, [r7, #16]
 8016856:	2201      	movs	r2, #1
 8016858:	731a      	strb	r2, [r3, #12]
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
 801685a:	697b      	ldr	r3, [r7, #20]
 801685c:	3301      	adds	r3, #1
 801685e:	617b      	str	r3, [r7, #20]
 8016860:	e7cc      	b.n	80167fc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal19ScratchBufferHandleE+0x10>
  }
  return kTfLiteOk;
 8016862:	2300      	movs	r3, #0
}
 8016864:	4618      	mov	r0, r3
 8016866:	371c      	adds	r7, #28
 8016868:	46bd      	mov	sp, r7
 801686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801686e:	4770      	bx	lr

08016870 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPKNS0_14AllocationInfoEj>:

TfLiteStatus CreatePlan(ErrorReporter* error_reporter, MemoryPlanner* planner,
                        const AllocationInfo* allocation_info,
                        size_t allocation_info_size) {
 8016870:	b590      	push	{r4, r7, lr}
 8016872:	b08b      	sub	sp, #44	; 0x2c
 8016874:	af02      	add	r7, sp, #8
 8016876:	60f8      	str	r0, [r7, #12]
 8016878:	60b9      	str	r1, [r7, #8]
 801687a:	607a      	str	r2, [r7, #4]
 801687c:	603b      	str	r3, [r7, #0]
  // Add the tensors to our allocation plan.
  for (size_t i = 0; i < allocation_info_size; ++i) {
 801687e:	2300      	movs	r3, #0
 8016880:	61fb      	str	r3, [r7, #28]
 8016882:	69fa      	ldr	r2, [r7, #28]
 8016884:	683b      	ldr	r3, [r7, #0]
 8016886:	429a      	cmp	r2, r3
 8016888:	d22c      	bcs.n	80168e4 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPKNS0_14AllocationInfoEj+0x74>
    const AllocationInfo* current = &allocation_info[i];
 801688a:	69fa      	ldr	r2, [r7, #28]
 801688c:	4613      	mov	r3, r2
 801688e:	009b      	lsls	r3, r3, #2
 8016890:	4413      	add	r3, r2
 8016892:	009b      	lsls	r3, r3, #2
 8016894:	461a      	mov	r2, r3
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	4413      	add	r3, r2
 801689a:	61bb      	str	r3, [r7, #24]
    if (current->needs_allocating) {
 801689c:	69bb      	ldr	r3, [r7, #24]
 801689e:	7b1b      	ldrb	r3, [r3, #12]
 80168a0:	2b00      	cmp	r3, #0
 80168a2:	d01b      	beq.n	80168dc <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPKNS0_14AllocationInfoEj+0x6c>
      size_t aligned_bytes_required =
          AlignSizeUp(current->bytes, kBufferAlignment);
 80168a4:	69bb      	ldr	r3, [r7, #24]
 80168a6:	681b      	ldr	r3, [r3, #0]
 80168a8:	2110      	movs	r1, #16
 80168aa:	4618      	mov	r0, r3
 80168ac:	f7ff faf7 	bl	8015e9e <_ZN6tflite11AlignSizeUpEjj>
 80168b0:	6178      	str	r0, [r7, #20]
      TF_LITE_ENSURE_STATUS(
 80168b2:	68bb      	ldr	r3, [r7, #8]
 80168b4:	681b      	ldr	r3, [r3, #0]
 80168b6:	3308      	adds	r3, #8
 80168b8:	681c      	ldr	r4, [r3, #0]
 80168ba:	697a      	ldr	r2, [r7, #20]
 80168bc:	69bb      	ldr	r3, [r7, #24]
 80168be:	6859      	ldr	r1, [r3, #4]
 80168c0:	69bb      	ldr	r3, [r7, #24]
 80168c2:	689b      	ldr	r3, [r3, #8]
 80168c4:	9300      	str	r3, [sp, #0]
 80168c6:	460b      	mov	r3, r1
 80168c8:	68f9      	ldr	r1, [r7, #12]
 80168ca:	68b8      	ldr	r0, [r7, #8]
 80168cc:	47a0      	blx	r4
 80168ce:	4603      	mov	r3, r0
 80168d0:	74fb      	strb	r3, [r7, #19]
 80168d2:	7cfb      	ldrb	r3, [r7, #19]
 80168d4:	2b00      	cmp	r3, #0
 80168d6:	d001      	beq.n	80168dc <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPKNS0_14AllocationInfoEj+0x6c>
 80168d8:	7cfb      	ldrb	r3, [r7, #19]
 80168da:	e004      	b.n	80168e6 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPKNS0_14AllocationInfoEj+0x76>
  for (size_t i = 0; i < allocation_info_size; ++i) {
 80168dc:	69fb      	ldr	r3, [r7, #28]
 80168de:	3301      	adds	r3, #1
 80168e0:	61fb      	str	r3, [r7, #28]
 80168e2:	e7ce      	b.n	8016882 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPKNS0_14AllocationInfoEj+0x12>
          planner->AddBuffer(error_reporter, aligned_bytes_required,
                             current->first_created, current->last_used));
    }
  }
  return kTfLiteOk;
 80168e4:	2300      	movs	r3, #0
}
 80168e6:	4618      	mov	r0, r3
 80168e8:	3724      	adds	r7, #36	; 0x24
 80168ea:	46bd      	mov	sp, r7
 80168ec:	bd90      	pop	{r4, r7, pc}

080168ee <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>:

TfLiteStatus CommitPlan(ErrorReporter* error_reporter, MemoryPlanner* planner,
                        uint8_t* starting_point,
                        const AllocationInfo* allocation_info,
                        size_t allocation_info_size) {
 80168ee:	b590      	push	{r4, r7, lr}
 80168f0:	b08b      	sub	sp, #44	; 0x2c
 80168f2:	af00      	add	r7, sp, #0
 80168f4:	60f8      	str	r0, [r7, #12]
 80168f6:	60b9      	str	r1, [r7, #8]
 80168f8:	607a      	str	r2, [r7, #4]
 80168fa:	603b      	str	r3, [r7, #0]
  // Figure out the actual memory addresses for each buffer, based on the plan.
  int planner_index = 0;
 80168fc:	2300      	movs	r3, #0
 80168fe:	627b      	str	r3, [r7, #36]	; 0x24
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8016900:	2300      	movs	r3, #0
 8016902:	623b      	str	r3, [r7, #32]
 8016904:	6a3a      	ldr	r2, [r7, #32]
 8016906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016908:	429a      	cmp	r2, r3
 801690a:	d22e      	bcs.n	801696a <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x7c>
    const AllocationInfo* current = &allocation_info[i];
 801690c:	6a3a      	ldr	r2, [r7, #32]
 801690e:	4613      	mov	r3, r2
 8016910:	009b      	lsls	r3, r3, #2
 8016912:	4413      	add	r3, r2
 8016914:	009b      	lsls	r3, r3, #2
 8016916:	461a      	mov	r2, r3
 8016918:	683b      	ldr	r3, [r7, #0]
 801691a:	4413      	add	r3, r2
 801691c:	61fb      	str	r3, [r7, #28]
    if (current->needs_allocating) {
 801691e:	69fb      	ldr	r3, [r7, #28]
 8016920:	7b1b      	ldrb	r3, [r3, #12]
 8016922:	2b00      	cmp	r3, #0
 8016924:	d01d      	beq.n	8016962 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x74>
      int offset = -1;
 8016926:	f04f 33ff 	mov.w	r3, #4294967295
 801692a:	617b      	str	r3, [r7, #20]
      TF_LITE_ENSURE_STATUS(
 801692c:	68bb      	ldr	r3, [r7, #8]
 801692e:	681b      	ldr	r3, [r3, #0]
 8016930:	3314      	adds	r3, #20
 8016932:	681c      	ldr	r4, [r3, #0]
 8016934:	f107 0314 	add.w	r3, r7, #20
 8016938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801693a:	68f9      	ldr	r1, [r7, #12]
 801693c:	68b8      	ldr	r0, [r7, #8]
 801693e:	47a0      	blx	r4
 8016940:	4603      	mov	r3, r0
 8016942:	76fb      	strb	r3, [r7, #27]
 8016944:	7efb      	ldrb	r3, [r7, #27]
 8016946:	2b00      	cmp	r3, #0
 8016948:	d001      	beq.n	801694e <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x60>
 801694a:	7efb      	ldrb	r3, [r7, #27]
 801694c:	e00e      	b.n	801696c <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x7e>
          planner->GetOffsetForBuffer(error_reporter, planner_index, &offset));
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
 801694e:	697b      	ldr	r3, [r7, #20]
 8016950:	4619      	mov	r1, r3
 8016952:	69fb      	ldr	r3, [r7, #28]
 8016954:	691b      	ldr	r3, [r3, #16]
 8016956:	687a      	ldr	r2, [r7, #4]
 8016958:	440a      	add	r2, r1
 801695a:	601a      	str	r2, [r3, #0]
      ++planner_index;
 801695c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801695e:	3301      	adds	r3, #1
 8016960:	627b      	str	r3, [r7, #36]	; 0x24
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8016962:	6a3b      	ldr	r3, [r7, #32]
 8016964:	3301      	adds	r3, #1
 8016966:	623b      	str	r3, [r7, #32]
 8016968:	e7cc      	b.n	8016904 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x16>
    }
  }
  return kTfLiteOk;
 801696a:	2300      	movs	r3, #0
}
 801696c:	4618      	mov	r0, r3
 801696e:	372c      	adds	r7, #44	; 0x2c
 8016970:	46bd      	mov	sp, r7
 8016972:	bd90      	pop	{r4, r7, pc}

08016974 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>:
namespace internal {

TfLiteStatus InitializeTfLiteTensorFromFlatbuffer(
    SimpleMemoryAllocator* allocator, const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers,
    ErrorReporter* error_reporter, TfLiteTensor* result) {
 8016974:	b590      	push	{r4, r7, lr}
 8016976:	b091      	sub	sp, #68	; 0x44
 8016978:	af00      	add	r7, sp, #0
 801697a:	60f8      	str	r0, [r7, #12]
 801697c:	60b9      	str	r1, [r7, #8]
 801697e:	607a      	str	r2, [r7, #4]
 8016980:	603b      	str	r3, [r7, #0]
  *result = {};
 8016982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016984:	4618      	mov	r0, r3
 8016986:	2340      	movs	r3, #64	; 0x40
 8016988:	461a      	mov	r2, r3
 801698a:	2100      	movs	r1, #0
 801698c:	f008 fb4c 	bl	801f028 <memset>
  // Make sure the serialized type is one we know how to deal with, and convert
  // it from a flatbuffer enum into a constant used by the kernel C API.
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 8016990:	68b8      	ldr	r0, [r7, #8]
 8016992:	f7ff fa45 	bl	8015e20 <_ZNK6tflite6Tensor4typeEv>
 8016996:	4603      	mov	r3, r0
 8016998:	4618      	mov	r0, r3
 801699a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801699c:	683a      	ldr	r2, [r7, #0]
 801699e:	4619      	mov	r1, r3
 80169a0:	f7f0 f952 	bl	8006c48 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 80169a4:	4603      	mov	r3, r0
 80169a6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80169aa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80169ae:	2b00      	cmp	r3, #0
 80169b0:	d002      	beq.n	80169b8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x44>
 80169b2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80169b6:	e14b      	b.n	8016c50 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2dc>
                                          &result->type, error_reporter));
  // Make sure we remember if the serialized tensor is designated as a variable.
  result->is_variable = flatbuffer_tensor.is_variable();
 80169b8:	68b8      	ldr	r0, [r7, #8]
 80169ba:	f7ff fb9f 	bl	80160fc <_ZNK6tflite6Tensor11is_variableEv>
 80169be:	4603      	mov	r3, r0
 80169c0:	461a      	mov	r2, r3
 80169c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80169c4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  // in memory. We'll check to see if there's a serialized buffer (pretty much
  // the same as a constant op in TensorFlow) associated with this tensor first,
  // and if there is update the runtime structure to point to its location in
  // memory.
  // First see if there's any buffer information in the serialized tensor.
  if (auto* buffer = (*buffers)[flatbuffer_tensor.buffer()]) {
 80169c8:	68b8      	ldr	r0, [r7, #8]
 80169ca:	f7ff fb6c 	bl	80160a6 <_ZNK6tflite6Tensor6bufferEv>
 80169ce:	4603      	mov	r3, r0
 80169d0:	4619      	mov	r1, r3
 80169d2:	6878      	ldr	r0, [r7, #4]
 80169d4:	f001 f82a 	bl	8017a2c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>
 80169d8:	6378      	str	r0, [r7, #52]	; 0x34
 80169da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80169dc:	2b00      	cmp	r3, #0
 80169de:	d01a      	beq.n	8016a16 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xa2>
    // If we've found a buffer, does it have any data?
    if (auto* array = buffer->data()) {
 80169e0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80169e2:	f7ff fc10 	bl	8016206 <_ZNK6tflite6Buffer4dataEv>
 80169e6:	6338      	str	r0, [r7, #48]	; 0x30
 80169e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	d013      	beq.n	8016a16 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xa2>
      // If it has any data, is the data size larger than zero?
      if (array->size()) {
 80169ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80169f0:	f000 fe9e 	bl	8017730 <_ZNK11flatbuffers6VectorIhE4sizeEv>
 80169f4:	4603      	mov	r3, r0
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	bf14      	ite	ne
 80169fa:	2301      	movne	r3, #1
 80169fc:	2300      	moveq	r3, #0
 80169fe:	b2db      	uxtb	r3, r3
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	d008      	beq.n	8016a16 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xa2>
        // We've found a buffer with valid data, so update the runtime tensor
        // data structure to point to it.
        result->data.data =
            const_cast<void*>(static_cast<const void*>(array->data()));
 8016a04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016a06:	f001 f81f 	bl	8017a48 <_ZNK11flatbuffers6VectorIhE4dataEv>
 8016a0a:	4602      	mov	r2, r0
        result->data.data =
 8016a0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016a0e:	605a      	str	r2, [r3, #4]
        // We set the data from a serialized buffer, so record tha.
        result->allocation_type = kTfLiteMmapRo;
 8016a10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016a12:	2201      	movs	r2, #1
 8016a14:	751a      	strb	r2, [r3, #20]
    // it less ambiguous.
  }

  // TODO(petewarden): Some of these paths aren't getting enough testing
  // coverage, so we should figure out some tests that exercise them.
  if (result->data.data == nullptr) {
 8016a16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016a18:	685b      	ldr	r3, [r3, #4]
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	d102      	bne.n	8016a24 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xb0>
    // The tensor contents haven't been set from a serialized buffer, so
    // make a note that they will be allocated from memory. The actual
    // allocation won't happen until later.
    result->allocation_type = kTfLiteArenaRw;
 8016a1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016a20:	2202      	movs	r2, #2
 8016a22:	751a      	strb	r2, [r3, #20]
  }

  // Figure out what the size in bytes of the buffer is and store it.
  size_t type_size;
  TF_LITE_ENSURE_STATUS(BytesRequiredForTensor(
 8016a24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016a26:	f103 0118 	add.w	r1, r3, #24
 8016a2a:	f107 0214 	add.w	r2, r7, #20
 8016a2e:	683b      	ldr	r3, [r7, #0]
 8016a30:	68b8      	ldr	r0, [r7, #8]
 8016a32:	f7ff fa9f 	bl	8015f74 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>
 8016a36:	4603      	mov	r3, r0
 8016a38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8016a3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	d002      	beq.n	8016a4a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xd6>
 8016a44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016a48:	e102      	b.n	8016c50 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2dc>

  // TFLM doesn't allow reshaping the tensor which requires dynamic memory
  // allocation so it is safe to drop the const qualifier. In the future, if
  // we really want to update the tensor shape, we can always pass in a new
  // TfLiteIntArray - especially we have to do so if the dimension is changed.
  if (flatbuffer_tensor.shape() == nullptr) {
 8016a4a:	68b8      	ldr	r0, [r7, #8]
 8016a4c:	f7ff f9da 	bl	8015e04 <_ZNK6tflite6Tensor5shapeEv>
 8016a50:	4603      	mov	r3, r0
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	bf0c      	ite	eq
 8016a56:	2301      	moveq	r3, #1
 8016a58:	2300      	movne	r3, #0
 8016a5a:	b2db      	uxtb	r3, r3
 8016a5c:	2b00      	cmp	r3, #0
 8016a5e:	d003      	beq.n	8016a68 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf4>
    // flatbuffer_tensor.shape() can return a nullptr in the case of a scalar
    // tensor.
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 8016a60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016a62:	4a7d      	ldr	r2, [pc, #500]	; (8016c58 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2e4>)
 8016a64:	609a      	str	r2, [r3, #8]
 8016a66:	e005      	b.n	8016a74 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x100>
  } else {
    result->dims = const_cast<TfLiteIntArray*>(
        reinterpret_cast<const TfLiteIntArray*>(flatbuffer_tensor.shape()));
 8016a68:	68b8      	ldr	r0, [r7, #8]
 8016a6a:	f7ff f9cb 	bl	8015e04 <_ZNK6tflite6Tensor5shapeEv>
 8016a6e:	4602      	mov	r2, r0
    result->dims = const_cast<TfLiteIntArray*>(
 8016a70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016a72:	609a      	str	r2, [r3, #8]
  }

  // Copy the quantization information from the serialized data.
  const auto* src_quantization = flatbuffer_tensor.quantization();
 8016a74:	68b8      	ldr	r0, [r7, #8]
 8016a76:	f7ff fb33 	bl	80160e0 <_ZNK6tflite6Tensor12quantizationEv>
 8016a7a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (src_quantization && src_quantization->scale() &&
      (src_quantization->scale()->size() > 0) &&
      src_quantization->zero_point() &&
 8016a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	d021      	beq.n	8016ac6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x152>
  if (src_quantization && src_quantization->scale() &&
 8016a82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016a84:	f7ff fae4 	bl	8016050 <_ZNK6tflite22QuantizationParameters5scaleEv>
 8016a88:	4603      	mov	r3, r0
 8016a8a:	2b00      	cmp	r3, #0
 8016a8c:	d01b      	beq.n	8016ac6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x152>
      (src_quantization->scale()->size() > 0) &&
 8016a8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016a90:	f7ff fade 	bl	8016050 <_ZNK6tflite22QuantizationParameters5scaleEv>
 8016a94:	4603      	mov	r3, r0
 8016a96:	4618      	mov	r0, r3
 8016a98:	f000 fe58 	bl	801774c <_ZNK11flatbuffers6VectorIfE4sizeEv>
 8016a9c:	4603      	mov	r3, r0
  if (src_quantization && src_quantization->scale() &&
 8016a9e:	2b00      	cmp	r3, #0
 8016aa0:	d011      	beq.n	8016ac6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x152>
      src_quantization->zero_point() &&
 8016aa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016aa4:	f7ff fae2 	bl	801606c <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8016aa8:	4603      	mov	r3, r0
      (src_quantization->scale()->size() > 0) &&
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	d00b      	beq.n	8016ac6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x152>
      (src_quantization->zero_point()->size() > 0)) {
 8016aae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016ab0:	f7ff fadc 	bl	801606c <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8016ab4:	4603      	mov	r3, r0
 8016ab6:	4618      	mov	r0, r3
 8016ab8:	f000 fe7e 	bl	80177b8 <_ZNK11flatbuffers6VectorIxE4sizeEv>
 8016abc:	4603      	mov	r3, r0
      src_quantization->zero_point() &&
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	d001      	beq.n	8016ac6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x152>
 8016ac2:	2301      	movs	r3, #1
 8016ac4:	e000      	b.n	8016ac8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x154>
 8016ac6:	2300      	movs	r3, #0
  if (src_quantization && src_quantization->scale() &&
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	f000 80ab 	beq.w	8016c24 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2b0>
    // Always populate the TfLiteTensor.params field, even if there are
    // per-channel quantization parameters.
    result->params.scale = src_quantization->scale()->Get(0);
 8016ace:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016ad0:	f7ff fabe 	bl	8016050 <_ZNK6tflite22QuantizationParameters5scaleEv>
 8016ad4:	4603      	mov	r3, r0
 8016ad6:	2100      	movs	r1, #0
 8016ad8:	4618      	mov	r0, r3
 8016ada:	f000 fe45 	bl	8017768 <_ZNK11flatbuffers6VectorIfE3GetEm>
 8016ade:	eef0 7a40 	vmov.f32	s15, s0
 8016ae2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016ae4:	edc3 7a03 	vstr	s15, [r3, #12]
    // Note that the zero_point field in the FlatBuffers schema is a 64-bit
    // integer, but the zero_point field in the TfLiteQuantizationParams struct
    // is a 32-bit integer.
    result->params.zero_point =
        static_cast<int32_t>(src_quantization->zero_point()->Get(0));
 8016ae8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016aea:	f7ff fabf 	bl	801606c <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8016aee:	4603      	mov	r3, r0
 8016af0:	2100      	movs	r1, #0
 8016af2:	4618      	mov	r0, r3
 8016af4:	f000 fe6e 	bl	80177d4 <_ZNK11flatbuffers6VectorIxE3GetEm>
 8016af8:	4603      	mov	r3, r0
 8016afa:	460c      	mov	r4, r1
    result->params.zero_point =
 8016afc:	461a      	mov	r2, r3
 8016afe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016b00:	611a      	str	r2, [r3, #16]

    // Populate per-channel quantization params.
    int channels = src_quantization->scale()->size();
 8016b02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016b04:	f7ff faa4 	bl	8016050 <_ZNK6tflite22QuantizationParameters5scaleEv>
 8016b08:	4603      	mov	r3, r0
 8016b0a:	4618      	mov	r0, r3
 8016b0c:	f000 fe1e 	bl	801774c <_ZNK11flatbuffers6VectorIfE4sizeEv>
 8016b10:	4603      	mov	r3, r0
 8016b12:	627b      	str	r3, [r7, #36]	; 0x24
    TfLiteAffineQuantization* quantization =
        reinterpret_cast<TfLiteAffineQuantization*>(
            allocator->AllocateFromTail(sizeof(TfLiteAffineQuantization),
                                        alignof(TfLiteAffineQuantization)));
 8016b14:	68fb      	ldr	r3, [r7, #12]
 8016b16:	681b      	ldr	r3, [r3, #0]
 8016b18:	330c      	adds	r3, #12
 8016b1a:	681b      	ldr	r3, [r3, #0]
 8016b1c:	2204      	movs	r2, #4
 8016b1e:	210c      	movs	r1, #12
 8016b20:	68f8      	ldr	r0, [r7, #12]
 8016b22:	4798      	blx	r3
 8016b24:	6238      	str	r0, [r7, #32]
    if (quantization == nullptr) {
 8016b26:	6a3b      	ldr	r3, [r7, #32]
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	d105      	bne.n	8016b38 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1c4>
      TF_LITE_REPORT_ERROR(error_reporter,
 8016b2c:	494b      	ldr	r1, [pc, #300]	; (8016c5c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2e8>)
 8016b2e:	6838      	ldr	r0, [r7, #0]
 8016b30:	f7ee fc4c 	bl	80053cc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unable to allocate TfLiteAffineQuantization.\n");
      return kTfLiteError;
 8016b34:	2301      	movs	r3, #1
 8016b36:	e08b      	b.n	8016c50 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2dc>
    }
    quantization->zero_point =
        reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
            TfLiteIntArrayGetSizeInBytes(channels), alignof(TfLiteIntArray)));
 8016b38:	68fb      	ldr	r3, [r7, #12]
 8016b3a:	681b      	ldr	r3, [r3, #0]
 8016b3c:	330c      	adds	r3, #12
 8016b3e:	681c      	ldr	r4, [r3, #0]
 8016b40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016b42:	f7ee fbcb 	bl	80052dc <TfLiteIntArrayGetSizeInBytes>
 8016b46:	4603      	mov	r3, r0
        reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
 8016b48:	2204      	movs	r2, #4
 8016b4a:	4619      	mov	r1, r3
 8016b4c:	68f8      	ldr	r0, [r7, #12]
 8016b4e:	47a0      	blx	r4
 8016b50:	4602      	mov	r2, r0
    quantization->zero_point =
 8016b52:	6a3b      	ldr	r3, [r7, #32]
 8016b54:	605a      	str	r2, [r3, #4]
    if (quantization->zero_point == nullptr) {
 8016b56:	6a3b      	ldr	r3, [r7, #32]
 8016b58:	685b      	ldr	r3, [r3, #4]
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	d105      	bne.n	8016b6a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1f6>
      TF_LITE_REPORT_ERROR(error_reporter,
 8016b5e:	4940      	ldr	r1, [pc, #256]	; (8016c60 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2ec>)
 8016b60:	6838      	ldr	r0, [r7, #0]
 8016b62:	f7ee fc33 	bl	80053cc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unable to allocate quantization->zero_point.\n");
      return kTfLiteError;
 8016b66:	2301      	movs	r3, #1
 8016b68:	e072      	b.n	8016c50 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2dc>
    }

    quantization->scale = reinterpret_cast<TfLiteFloatArray*>(
        allocator->AllocateFromTail(TfLiteFloatArrayGetSizeInBytes(channels),
                                    alignof(TfLiteFloatArray)));
 8016b6a:	68fb      	ldr	r3, [r7, #12]
 8016b6c:	681b      	ldr	r3, [r3, #0]
 8016b6e:	330c      	adds	r3, #12
 8016b70:	681c      	ldr	r4, [r3, #0]
        allocator->AllocateFromTail(TfLiteFloatArrayGetSizeInBytes(channels),
 8016b72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016b74:	f7ee fbbf 	bl	80052f6 <TfLiteFloatArrayGetSizeInBytes>
 8016b78:	4603      	mov	r3, r0
 8016b7a:	2204      	movs	r2, #4
 8016b7c:	4619      	mov	r1, r3
 8016b7e:	68f8      	ldr	r0, [r7, #12]
 8016b80:	47a0      	blx	r4
 8016b82:	4602      	mov	r2, r0
    quantization->scale = reinterpret_cast<TfLiteFloatArray*>(
 8016b84:	6a3b      	ldr	r3, [r7, #32]
 8016b86:	601a      	str	r2, [r3, #0]
    if (quantization->scale == nullptr) {
 8016b88:	6a3b      	ldr	r3, [r7, #32]
 8016b8a:	681b      	ldr	r3, [r3, #0]
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	d105      	bne.n	8016b9c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x228>
      TF_LITE_REPORT_ERROR(error_reporter,
 8016b90:	4934      	ldr	r1, [pc, #208]	; (8016c64 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2f0>)
 8016b92:	6838      	ldr	r0, [r7, #0]
 8016b94:	f7ee fc1a 	bl	80053cc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unable to allocate quantization->scale.\n");
      return kTfLiteError;
 8016b98:	2301      	movs	r3, #1
 8016b9a:	e059      	b.n	8016c50 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2dc>
    }

    quantization->zero_point->size = channels;
 8016b9c:	6a3b      	ldr	r3, [r7, #32]
 8016b9e:	685b      	ldr	r3, [r3, #4]
 8016ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016ba2:	601a      	str	r2, [r3, #0]
    quantization->scale->size = channels;
 8016ba4:	6a3b      	ldr	r3, [r7, #32]
 8016ba6:	681b      	ldr	r3, [r3, #0]
 8016ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016baa:	601a      	str	r2, [r3, #0]
    int* zero_point_data = quantization->zero_point->data;
 8016bac:	6a3b      	ldr	r3, [r7, #32]
 8016bae:	685b      	ldr	r3, [r3, #4]
 8016bb0:	3304      	adds	r3, #4
 8016bb2:	61fb      	str	r3, [r7, #28]
    float* scale_data = quantization->scale->data;
 8016bb4:	6a3b      	ldr	r3, [r7, #32]
 8016bb6:	681b      	ldr	r3, [r3, #0]
 8016bb8:	3304      	adds	r3, #4
 8016bba:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < channels; i++) {
 8016bbc:	2300      	movs	r3, #0
 8016bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016bc0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bc4:	429a      	cmp	r2, r3
 8016bc6:	da20      	bge.n	8016c0a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x296>
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
 8016bc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016bca:	f7ff fa4f 	bl	801606c <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8016bce:	4602      	mov	r2, r0
 8016bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016bd2:	4619      	mov	r1, r3
 8016bd4:	4610      	mov	r0, r2
 8016bd6:	f000 fdfd 	bl	80177d4 <_ZNK11flatbuffers6VectorIxE3GetEm>
 8016bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016bdc:	009b      	lsls	r3, r3, #2
 8016bde:	69fa      	ldr	r2, [r7, #28]
 8016be0:	4413      	add	r3, r2
 8016be2:	4602      	mov	r2, r0
 8016be4:	601a      	str	r2, [r3, #0]
      scale_data[i] = src_quantization->scale()->Get(i);
 8016be6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016be8:	f7ff fa32 	bl	8016050 <_ZNK6tflite22QuantizationParameters5scaleEv>
 8016bec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016bee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016bf0:	009b      	lsls	r3, r3, #2
 8016bf2:	69ba      	ldr	r2, [r7, #24]
 8016bf4:	18d4      	adds	r4, r2, r3
 8016bf6:	f000 fdb7 	bl	8017768 <_ZNK11flatbuffers6VectorIfE3GetEm>
 8016bfa:	eef0 7a40 	vmov.f32	s15, s0
 8016bfe:	edc4 7a00 	vstr	s15, [r4]
    for (int i = 0; i < channels; i++) {
 8016c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016c04:	3301      	adds	r3, #1
 8016c06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016c08:	e7da      	b.n	8016bc0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x24c>
    }
    // TODO(rocky): Need to add a micro_allocator test case that fails when
    // this is not copied:
    quantization->quantized_dimension = src_quantization->quantized_dimension();
 8016c0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016c0c:	f7ff fa3c 	bl	8016088 <_ZNK6tflite22QuantizationParameters19quantized_dimensionEv>
 8016c10:	4602      	mov	r2, r0
 8016c12:	6a3b      	ldr	r3, [r7, #32]
 8016c14:	609a      	str	r2, [r3, #8]

    result->quantization = {kTfLiteAffineQuantization, quantization};
 8016c16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016c18:	2201      	movs	r2, #1
 8016c1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8016c1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016c20:	6a3a      	ldr	r2, [r7, #32]
 8016c22:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (flatbuffer_tensor.name() != nullptr) {
 8016c24:	68b8      	ldr	r0, [r7, #8]
 8016c26:	f7ff fa4d 	bl	80160c4 <_ZNK6tflite6Tensor4nameEv>
 8016c2a:	4603      	mov	r3, r0
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	bf14      	ite	ne
 8016c30:	2301      	movne	r3, #1
 8016c32:	2300      	moveq	r3, #0
 8016c34:	b2db      	uxtb	r3, r3
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d009      	beq.n	8016c4e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2da>
    result->name = flatbuffer_tensor.name()->c_str();
 8016c3a:	68b8      	ldr	r0, [r7, #8]
 8016c3c:	f7ff fa42 	bl	80160c4 <_ZNK6tflite6Tensor4nameEv>
 8016c40:	4603      	mov	r3, r0
 8016c42:	4618      	mov	r0, r3
 8016c44:	f7fe f95b 	bl	8014efe <_ZNK11flatbuffers6String5c_strEv>
 8016c48:	4602      	mov	r2, r0
 8016c4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016c4c:	621a      	str	r2, [r3, #32]
  }
  return kTfLiteOk;
 8016c4e:	2300      	movs	r3, #0
}
 8016c50:	4618      	mov	r0, r3
 8016c52:	3744      	adds	r7, #68	; 0x44
 8016c54:	46bd      	mov	sp, r7
 8016c56:	bd90      	pop	{r4, r7, pc}
 8016c58:	080258a8 	.word	0x080258a8
 8016c5c:	080231b8 	.word	0x080231b8
 8016c60:	080231e8 	.word	0x080231e8
 8016c64:	08023218 	.word	0x08023218

08016c68 <_ZN6tflite14MicroAllocatorC1EP13TfLiteContextPKNS_5ModelEPhjPNS_13ErrorReporterE>:

}  // namespace internal

MicroAllocator::MicroAllocator(TfLiteContext* context, const Model* model,
 8016c68:	b580      	push	{r7, lr}
 8016c6a:	b088      	sub	sp, #32
 8016c6c:	af00      	add	r7, sp, #0
 8016c6e:	60f8      	str	r0, [r7, #12]
 8016c70:	60b9      	str	r1, [r7, #8]
 8016c72:	607a      	str	r2, [r7, #4]
 8016c74:	603b      	str	r3, [r7, #0]
                               uint8_t* tensor_arena, size_t arena_size,
                               ErrorReporter* error_reporter)
    : model_(model), error_reporter_(error_reporter), context_(context) {
 8016c76:	68fb      	ldr	r3, [r7, #12]
 8016c78:	687a      	ldr	r2, [r7, #4]
 8016c7a:	601a      	str	r2, [r3, #0]
 8016c7c:	68fb      	ldr	r3, [r7, #12]
 8016c7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016c80:	609a      	str	r2, [r3, #8]
 8016c82:	68fb      	ldr	r3, [r7, #12]
 8016c84:	68ba      	ldr	r2, [r7, #8]
 8016c86:	60da      	str	r2, [r3, #12]
 8016c88:	68fb      	ldr	r3, [r7, #12]
 8016c8a:	2200      	movs	r2, #0
 8016c8c:	741a      	strb	r2, [r3, #16]
 8016c8e:	68fb      	ldr	r3, [r7, #12]
 8016c90:	2200      	movs	r2, #0
 8016c92:	615a      	str	r2, [r3, #20]
 8016c94:	68fb      	ldr	r3, [r7, #12]
 8016c96:	2200      	movs	r2, #0
 8016c98:	619a      	str	r2, [r3, #24]
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
 8016c9a:	2110      	movs	r1, #16
 8016c9c:	6838      	ldr	r0, [r7, #0]
 8016c9e:	f7ff f8cf 	bl	8015e40 <_ZN6tflite14AlignPointerUpEPhj>
 8016ca2:	61f8      	str	r0, [r7, #28]
  if (aligned_arena != tensor_arena) {
 8016ca4:	69fa      	ldr	r2, [r7, #28]
 8016ca6:	683b      	ldr	r3, [r7, #0]
 8016ca8:	429a      	cmp	r2, r3
 8016caa:	d008      	beq.n	8016cbe <_ZN6tflite14MicroAllocatorC1EP13TfLiteContextPKNS_5ModelEPhjPNS_13ErrorReporterE+0x56>
    TF_LITE_REPORT_ERROR(
 8016cac:	68fb      	ldr	r3, [r7, #12]
 8016cae:	6898      	ldr	r0, [r3, #8]
 8016cb0:	69fa      	ldr	r2, [r7, #28]
 8016cb2:	683b      	ldr	r3, [r7, #0]
 8016cb4:	1ad3      	subs	r3, r2, r3
 8016cb6:	461a      	mov	r2, r3
 8016cb8:	4915      	ldr	r1, [pc, #84]	; (8016d10 <_ZN6tflite14MicroAllocatorC1EP13TfLiteContextPKNS_5ModelEPhjPNS_13ErrorReporterE+0xa8>)
 8016cba:	f7ee fb87 	bl	80053cc <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "%d bytes lost due to alignment. To avoid this loss, please make sure "
        "the tensor_arena is 16 bytes aligned.",
        aligned_arena - tensor_arena);
  }
  size_t aligned_arena_size = tensor_arena + arena_size - aligned_arena;
 8016cbe:	683a      	ldr	r2, [r7, #0]
 8016cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cc2:	4413      	add	r3, r2
 8016cc4:	461a      	mov	r2, r3
 8016cc6:	69fb      	ldr	r3, [r7, #28]
 8016cc8:	1ad3      	subs	r3, r2, r3
 8016cca:	61bb      	str	r3, [r7, #24]
  // Creates a root memory allocator managing the arena. The allocator itself
  // also locates in the arena buffer. This allocator doesn't need to be
  // destructed as it's the root allocator.
  memory_allocator_ = SimpleMemoryAllocator::Create(
 8016ccc:	69ba      	ldr	r2, [r7, #24]
 8016cce:	69f9      	ldr	r1, [r7, #28]
 8016cd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016cd2:	f001 ffc5 	bl	8018c60 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>
 8016cd6:	4602      	mov	r2, r0
 8016cd8:	68fb      	ldr	r3, [r7, #12]
 8016cda:	605a      	str	r2, [r3, #4]
      error_reporter, aligned_arena, aligned_arena_size);

  TfLiteStatus status = InitGraphAndContextTensorData();
 8016cdc:	68f8      	ldr	r0, [r7, #12]
 8016cde:	f000 fa5b 	bl	8017198 <_ZN6tflite14MicroAllocator29InitGraphAndContextTensorDataEv>
 8016ce2:	4603      	mov	r3, r0
 8016ce4:	75fb      	strb	r3, [r7, #23]
  // TODO(b/147871299): Consider improving this code. A better way of handling
  // failures in the constructor is to have a static function that returns a
  // pointer to the class. If allocation failed, a nullptr will be returned.
  if (status != kTfLiteOk) {
 8016ce6:	7dfb      	ldrb	r3, [r7, #23]
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	d009      	beq.n	8016d00 <_ZN6tflite14MicroAllocatorC1EP13TfLiteContextPKNS_5ModelEPhjPNS_13ErrorReporterE+0x98>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8016cec:	68fb      	ldr	r3, [r7, #12]
 8016cee:	689b      	ldr	r3, [r3, #8]
 8016cf0:	4908      	ldr	r1, [pc, #32]	; (8016d14 <_ZN6tflite14MicroAllocatorC1EP13TfLiteContextPKNS_5ModelEPhjPNS_13ErrorReporterE+0xac>)
 8016cf2:	4618      	mov	r0, r3
 8016cf4:	f7ee fb6a 	bl	80053cc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "MicroAllocator: Failed to initialize.");
    active_ = false;
 8016cf8:	68fb      	ldr	r3, [r7, #12]
 8016cfa:	2200      	movs	r2, #0
 8016cfc:	741a      	strb	r2, [r3, #16]
 8016cfe:	e002      	b.n	8016d06 <_ZN6tflite14MicroAllocatorC1EP13TfLiteContextPKNS_5ModelEPhjPNS_13ErrorReporterE+0x9e>
  } else {
    active_ = true;
 8016d00:	68fb      	ldr	r3, [r7, #12]
 8016d02:	2201      	movs	r2, #1
 8016d04:	741a      	strb	r2, [r3, #16]
  }
}
 8016d06:	68fb      	ldr	r3, [r7, #12]
 8016d08:	4618      	mov	r0, r3
 8016d0a:	3720      	adds	r7, #32
 8016d0c:	46bd      	mov	sp, r7
 8016d0e:	bd80      	pop	{r7, pc}
 8016d10:	08023244 	.word	0x08023244
 8016d14:	080232b0 	.word	0x080232b0

08016d18 <_ZN6tflite14MicroAllocator24InitializeFromFlatbufferERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE>:

TfLiteStatus MicroAllocator::InitializeFromFlatbuffer(
    const MicroOpResolver& op_resolver,
    NodeAndRegistration** node_and_registrations) {
 8016d18:	b580      	push	{r7, lr}
 8016d1a:	b086      	sub	sp, #24
 8016d1c:	af00      	add	r7, sp, #0
 8016d1e:	60f8      	str	r0, [r7, #12]
 8016d20:	60b9      	str	r1, [r7, #8]
 8016d22:	607a      	str	r2, [r7, #4]
  if (!active_) {
 8016d24:	68fb      	ldr	r3, [r7, #12]
 8016d26:	7c1b      	ldrb	r3, [r3, #16]
 8016d28:	f083 0301 	eor.w	r3, r3, #1
 8016d2c:	b2db      	uxtb	r3, r3
 8016d2e:	2b00      	cmp	r3, #0
 8016d30:	d001      	beq.n	8016d36 <_ZN6tflite14MicroAllocator24InitializeFromFlatbufferERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x1e>
    return kTfLiteError;
 8016d32:	2301      	movs	r3, #1
 8016d34:	e019      	b.n	8016d6a <_ZN6tflite14MicroAllocator24InitializeFromFlatbufferERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x52>
  }
  TF_LITE_ENSURE_STATUS(AllocateNodeAndRegistrations(node_and_registrations));
 8016d36:	6879      	ldr	r1, [r7, #4]
 8016d38:	68f8      	ldr	r0, [r7, #12]
 8016d3a:	f000 faf9 	bl	8017330 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPPNS_19NodeAndRegistrationE>
 8016d3e:	4603      	mov	r3, r0
 8016d40:	75fb      	strb	r3, [r7, #23]
 8016d42:	7dfb      	ldrb	r3, [r7, #23]
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	d001      	beq.n	8016d4c <_ZN6tflite14MicroAllocator24InitializeFromFlatbufferERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x34>
 8016d48:	7dfb      	ldrb	r3, [r7, #23]
 8016d4a:	e00e      	b.n	8016d6a <_ZN6tflite14MicroAllocator24InitializeFromFlatbufferERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x52>
  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer(
 8016d4c:	687b      	ldr	r3, [r7, #4]
 8016d4e:	681b      	ldr	r3, [r3, #0]
 8016d50:	461a      	mov	r2, r3
 8016d52:	68b9      	ldr	r1, [r7, #8]
 8016d54:	68f8      	ldr	r0, [r7, #12]
 8016d56:	f000 fb1f 	bl	8017398 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE>
 8016d5a:	4603      	mov	r3, r0
 8016d5c:	75bb      	strb	r3, [r7, #22]
 8016d5e:	7dbb      	ldrb	r3, [r7, #22]
 8016d60:	2b00      	cmp	r3, #0
 8016d62:	d001      	beq.n	8016d68 <_ZN6tflite14MicroAllocator24InitializeFromFlatbufferERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x50>
 8016d64:	7dbb      	ldrb	r3, [r7, #22]
 8016d66:	e000      	b.n	8016d6a <_ZN6tflite14MicroAllocator24InitializeFromFlatbufferERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x52>
      op_resolver, *node_and_registrations));
  return kTfLiteOk;
 8016d68:	2300      	movs	r3, #0
}
 8016d6a:	4618      	mov	r0, r3
 8016d6c:	3718      	adds	r7, #24
 8016d6e:	46bd      	mov	sp, r7
 8016d70:	bd80      	pop	{r7, pc}
	...

08016d74 <_ZN6tflite14MicroAllocator22FinishTensorAllocationEv>:

TfLiteStatus MicroAllocator::FinishTensorAllocation() {
 8016d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016d76:	b0a3      	sub	sp, #140	; 0x8c
 8016d78:	af02      	add	r7, sp, #8
 8016d7a:	6078      	str	r0, [r7, #4]
  if (!active_) {
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	7c1b      	ldrb	r3, [r3, #16]
 8016d80:	f083 0301 	eor.w	r3, r3, #1
 8016d84:	b2db      	uxtb	r3, r3
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	d001      	beq.n	8016d8e <_ZN6tflite14MicroAllocator22FinishTensorAllocationEv+0x1a>
    return kTfLiteError;
 8016d8a:	2401      	movs	r4, #1
 8016d8c:	e146      	b.n	801701c <_ZN6tflite14MicroAllocator22FinishTensorAllocationEv+0x2a8>
  // Note that AllocationInfo is only needed for creating the plan. It will be
  // thrown away when the child allocator (tmp_allocator) goes out of scope.
  {
    SimpleMemoryAllocator tmp_allocator(error_reporter_,
                                        memory_allocator_->GetHead(),
                                        memory_allocator_->GetTail());
 8016d8e:	687b      	ldr	r3, [r7, #4]
 8016d90:	689d      	ldr	r5, [r3, #8]
                                        memory_allocator_->GetHead(),
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	685b      	ldr	r3, [r3, #4]
                                        memory_allocator_->GetTail());
 8016d96:	4618      	mov	r0, r3
 8016d98:	f002 f814 	bl	8018dc4 <_ZNK6tflite21SimpleMemoryAllocator7GetHeadEv>
 8016d9c:	4606      	mov	r6, r0
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	685b      	ldr	r3, [r3, #4]
 8016da2:	4618      	mov	r0, r3
 8016da4:	f002 f81a 	bl	8018ddc <_ZNK6tflite21SimpleMemoryAllocator7GetTailEv>
 8016da8:	4603      	mov	r3, r0
 8016daa:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8016dae:	4632      	mov	r2, r6
 8016db0:	4629      	mov	r1, r5
 8016db2:	f001 ff1f 	bl	8018bf4 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>

    AllocationInfoBuilder builder(error_reporter_, &tmp_allocator);
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	6899      	ldr	r1, [r3, #8]
 8016dba:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8016dbe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8016dc2:	4618      	mov	r0, r3
 8016dc4:	f7ff fb09 	bl	80163da <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilderC1EPNS_13ErrorReporterEPNS_21SimpleMemoryAllocatorE>
    TF_LITE_ENSURE_STATUS(
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	69db      	ldr	r3, [r3, #28]
 8016dcc:	4618      	mov	r0, r3
 8016dce:	f7ff f9e2 	bl	8016196 <_ZNK6tflite8SubGraph7tensorsEv>
 8016dd2:	4603      	mov	r3, r0
 8016dd4:	4618      	mov	r0, r3
 8016dd6:	f000 fd25 	bl	8017824 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 8016dda:	4601      	mov	r1, r0
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	699a      	ldr	r2, [r3, #24]
 8016de0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8016de4:	4618      	mov	r0, r3
 8016de6:	f7ff fb14 	bl	8016412 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder4InitEjj>
 8016dea:	4603      	mov	r3, r0
 8016dec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8016df0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d003      	beq.n	8016e00 <_ZN6tflite14MicroAllocator22FinishTensorAllocationEv+0x8c>
 8016df8:	f897 407f 	ldrb.w	r4, [r7, #127]	; 0x7f
 8016dfc:	2500      	movs	r5, #0
 8016dfe:	e0e4      	b.n	8016fca <_ZN6tflite14MicroAllocator22FinishTensorAllocationEv+0x256>
        builder.Init(subgraph_->tensors()->size(), scratch_buffer_count_));
    TF_LITE_ENSURE_STATUS(builder.AddTensors(subgraph_, context_->tensors));
 8016e00:	687b      	ldr	r3, [r7, #4]
 8016e02:	69d9      	ldr	r1, [r3, #28]
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	68db      	ldr	r3, [r3, #12]
 8016e08:	689a      	ldr	r2, [r3, #8]
 8016e0a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8016e0e:	4618      	mov	r0, r3
 8016e10:	f7ff fb5c 	bl	80164cc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEP12TfLiteTensor>
 8016e14:	4603      	mov	r3, r0
 8016e16:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8016e1a:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8016e1e:	2b00      	cmp	r3, #0
 8016e20:	d003      	beq.n	8016e2a <_ZN6tflite14MicroAllocator22FinishTensorAllocationEv+0xb6>
 8016e22:	f897 407e 	ldrb.w	r4, [r7, #126]	; 0x7e
 8016e26:	2500      	movs	r5, #0
 8016e28:	e0cf      	b.n	8016fca <_ZN6tflite14MicroAllocator22FinishTensorAllocationEv+0x256>
    TF_LITE_ENSURE_STATUS(builder.AddScratchBuffers(scratch_buffer_handles_));
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	695a      	ldr	r2, [r3, #20]
 8016e2e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8016e32:	4611      	mov	r1, r2
 8016e34:	4618      	mov	r0, r3
 8016e36:	f7ff fcd9 	bl	80167ec <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal19ScratchBufferHandleE>
 8016e3a:	4603      	mov	r3, r0
 8016e3c:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 8016e40:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8016e44:	2b00      	cmp	r3, #0
 8016e46:	d003      	beq.n	8016e50 <_ZN6tflite14MicroAllocator22FinishTensorAllocationEv+0xdc>
 8016e48:	f897 407d 	ldrb.w	r4, [r7, #125]	; 0x7d
 8016e4c:	2500      	movs	r5, #0
 8016e4e:	e0bc      	b.n	8016fca <_ZN6tflite14MicroAllocator22FinishTensorAllocationEv+0x256>
    const AllocationInfo* allocation_info = builder.Finish();
 8016e50:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8016e54:	4618      	mov	r0, r3
 8016e56:	f7ff faf0 	bl	801643a <_ZNK6tflite12_GLOBAL__N_121AllocationInfoBuilder6FinishEv>
 8016e5a:	67b8      	str	r0, [r7, #120]	; 0x78

    // Remaining arena size that memory planner can use for calculating offsets.
    size_t remaining_arena_size = tmp_allocator.GetAvailableMemory();
 8016e5c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016e60:	4618      	mov	r0, r3
 8016e62:	f001 ffc7 	bl	8018df4 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEv>
 8016e66:	6778      	str	r0, [r7, #116]	; 0x74
    uint8_t* planner_arena =
        tmp_allocator.AllocateFromHead(remaining_arena_size, /*alignment=*/1);
 8016e68:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016e6c:	2201      	movs	r2, #1
 8016e6e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8016e70:	4618      	mov	r0, r3
 8016e72:	f001 ff43 	bl	8018cfc <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj>
 8016e76:	6738      	str	r0, [r7, #112]	; 0x70
    TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
 8016e78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	d10f      	bne.n	8016e9e <_ZN6tflite14MicroAllocator22FinishTensorAllocationEv+0x12a>
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	6898      	ldr	r0, [r3, #8]
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	6899      	ldr	r1, [r3, #8]
 8016e86:	4b68      	ldr	r3, [pc, #416]	; (8017028 <_ZN6tflite14MicroAllocator22FinishTensorAllocationEv+0x2b4>)
 8016e88:	9301      	str	r3, [sp, #4]
 8016e8a:	f44f 73ee 	mov.w	r3, #476	; 0x1dc
 8016e8e:	9300      	str	r3, [sp, #0]
 8016e90:	4b66      	ldr	r3, [pc, #408]	; (801702c <_ZN6tflite14MicroAllocator22FinishTensorAllocationEv+0x2b8>)
 8016e92:	4a67      	ldr	r2, [pc, #412]	; (8017030 <_ZN6tflite14MicroAllocator22FinishTensorAllocationEv+0x2bc>)
 8016e94:	f7ee fab3 	bl	80053fe <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8016e98:	2401      	movs	r4, #1
 8016e9a:	2500      	movs	r5, #0
 8016e9c:	e095      	b.n	8016fca <_ZN6tflite14MicroAllocator22FinishTensorAllocationEv+0x256>
    GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
 8016e9e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016ea0:	f107 030c 	add.w	r3, r7, #12
 8016ea4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8016ea6:	4618      	mov	r0, r3
 8016ea8:	f007 fa9c 	bl	801e3e4 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>
    TF_LITE_ENSURE_STATUS(
 8016eac:	687b      	ldr	r3, [r7, #4]
 8016eae:	689d      	ldr	r5, [r3, #8]
 8016eb0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8016eb4:	4618      	mov	r0, r3
 8016eb6:	f7ff facc 	bl	8016452 <_ZNK6tflite12_GLOBAL__N_121AllocationInfoBuilder4SizeEv>
 8016eba:	4603      	mov	r3, r0
 8016ebc:	f107 010c 	add.w	r1, r7, #12
 8016ec0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8016ec2:	4628      	mov	r0, r5
 8016ec4:	f7ff fcd4 	bl	8016870 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPKNS0_14AllocationInfoEj>
 8016ec8:	4603      	mov	r3, r0
 8016eca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8016ece:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8016ed2:	2b00      	cmp	r3, #0
 8016ed4:	d003      	beq.n	8016ede <_ZN6tflite14MicroAllocator22FinishTensorAllocationEv+0x16a>
 8016ed6:	f897 406f 	ldrb.w	r4, [r7, #111]	; 0x6f
 8016eda:	2500      	movs	r5, #0
 8016edc:	e06a      	b.n	8016fb4 <_ZN6tflite14MicroAllocator22FinishTensorAllocationEv+0x240>
        CreatePlan(error_reporter_, &planner, allocation_info, builder.Size()));

    size_t actual_available_arena_size =
        memory_allocator_->GetAvailableMemory();
 8016ede:	687b      	ldr	r3, [r7, #4]
 8016ee0:	685b      	ldr	r3, [r3, #4]
 8016ee2:	4618      	mov	r0, r3
 8016ee4:	f001 ff86 	bl	8018df4 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEv>
 8016ee8:	66b8      	str	r0, [r7, #104]	; 0x68
    // Make sure we have enough arena size.
    if (planner.GetMaximumMemorySize() > actual_available_arena_size) {
 8016eea:	f107 030c 	add.w	r3, r7, #12
 8016eee:	4618      	mov	r0, r3
 8016ef0:	f007 fca5 	bl	801e83e <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 8016ef4:	4602      	mov	r2, r0
 8016ef6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016ef8:	4293      	cmp	r3, r2
 8016efa:	bf34      	ite	cc
 8016efc:	2301      	movcc	r3, #1
 8016efe:	2300      	movcs	r3, #0
 8016f00:	b2db      	uxtb	r3, r3
 8016f02:	2b00      	cmp	r3, #0
 8016f04:	d00f      	beq.n	8016f26 <_ZN6tflite14MicroAllocator22FinishTensorAllocationEv+0x1b2>
      TF_LITE_REPORT_ERROR(
 8016f06:	687b      	ldr	r3, [r7, #4]
 8016f08:	689c      	ldr	r4, [r3, #8]
 8016f0a:	f107 030c 	add.w	r3, r7, #12
 8016f0e:	4618      	mov	r0, r3
 8016f10:	f007 fc95 	bl	801e83e <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 8016f14:	4602      	mov	r2, r0
 8016f16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016f18:	4946      	ldr	r1, [pc, #280]	; (8017034 <_ZN6tflite14MicroAllocator22FinishTensorAllocationEv+0x2c0>)
 8016f1a:	4620      	mov	r0, r4
 8016f1c:	f7ee fa56 	bl	80053cc <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter_,
          "Arena size is too small for activation buffers. Needed %d but only "
          "%d was available.",
          planner.GetMaximumMemorySize(), actual_available_arena_size);
      return kTfLiteError;
 8016f20:	2401      	movs	r4, #1
 8016f22:	2500      	movs	r5, #0
 8016f24:	e046      	b.n	8016fb4 <_ZN6tflite14MicroAllocator22FinishTensorAllocationEv+0x240>
    }

    // Commit the plan.
    TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	689d      	ldr	r5, [r3, #8]
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	685b      	ldr	r3, [r3, #4]
 8016f2e:	4618      	mov	r0, r3
 8016f30:	f001 ff48 	bl	8018dc4 <_ZNK6tflite21SimpleMemoryAllocator7GetHeadEv>
 8016f34:	4606      	mov	r6, r0
 8016f36:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8016f3a:	4618      	mov	r0, r3
 8016f3c:	f7ff fa89 	bl	8016452 <_ZNK6tflite12_GLOBAL__N_121AllocationInfoBuilder4SizeEv>
 8016f40:	4603      	mov	r3, r0
 8016f42:	f107 010c 	add.w	r1, r7, #12
 8016f46:	9300      	str	r3, [sp, #0]
 8016f48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016f4a:	4632      	mov	r2, r6
 8016f4c:	4628      	mov	r0, r5
 8016f4e:	f7ff fcce 	bl	80168ee <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>
 8016f52:	4603      	mov	r3, r0
 8016f54:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8016f58:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	d003      	beq.n	8016f68 <_ZN6tflite14MicroAllocator22FinishTensorAllocationEv+0x1f4>
 8016f60:	f897 4067 	ldrb.w	r4, [r7, #103]	; 0x67
 8016f64:	2500      	movs	r5, #0
 8016f66:	e025      	b.n	8016fb4 <_ZN6tflite14MicroAllocator22FinishTensorAllocationEv+0x240>
                                     memory_allocator_->GetHead(),
                                     allocation_info, builder.Size()));
    // Allocate the planned area, so the allocator knows it's used.
    uint8_t* allocated_tensor_memory =
        memory_allocator_->AllocateFromHead(planner.GetMaximumMemorySize(),
 8016f68:	687b      	ldr	r3, [r7, #4]
 8016f6a:	685e      	ldr	r6, [r3, #4]
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	685b      	ldr	r3, [r3, #4]
                                            /*alignment=*/1);
 8016f70:	681b      	ldr	r3, [r3, #0]
 8016f72:	3308      	adds	r3, #8
 8016f74:	681d      	ldr	r5, [r3, #0]
        memory_allocator_->AllocateFromHead(planner.GetMaximumMemorySize(),
 8016f76:	f107 030c 	add.w	r3, r7, #12
 8016f7a:	4618      	mov	r0, r3
 8016f7c:	f007 fc5f 	bl	801e83e <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 8016f80:	4603      	mov	r3, r0
                                            /*alignment=*/1);
 8016f82:	2201      	movs	r2, #1
 8016f84:	4619      	mov	r1, r3
 8016f86:	4630      	mov	r0, r6
 8016f88:	47a8      	blx	r5
 8016f8a:	6638      	str	r0, [r7, #96]	; 0x60
    TF_LITE_ENSURE(error_reporter_, allocated_tensor_memory != nullptr);
 8016f8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016f8e:	2b00      	cmp	r3, #0
 8016f90:	d10f      	bne.n	8016fb2 <_ZN6tflite14MicroAllocator22FinishTensorAllocationEv+0x23e>
 8016f92:	687b      	ldr	r3, [r7, #4]
 8016f94:	6898      	ldr	r0, [r3, #8]
 8016f96:	687b      	ldr	r3, [r7, #4]
 8016f98:	6899      	ldr	r1, [r3, #8]
 8016f9a:	4b27      	ldr	r3, [pc, #156]	; (8017038 <_ZN6tflite14MicroAllocator22FinishTensorAllocationEv+0x2c4>)
 8016f9c:	9301      	str	r3, [sp, #4]
 8016f9e:	f240 13f5 	movw	r3, #501	; 0x1f5
 8016fa2:	9300      	str	r3, [sp, #0]
 8016fa4:	4b21      	ldr	r3, [pc, #132]	; (801702c <_ZN6tflite14MicroAllocator22FinishTensorAllocationEv+0x2b8>)
 8016fa6:	4a22      	ldr	r2, [pc, #136]	; (8017030 <_ZN6tflite14MicroAllocator22FinishTensorAllocationEv+0x2bc>)
 8016fa8:	f7ee fa29 	bl	80053fe <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8016fac:	2401      	movs	r4, #1
 8016fae:	2500      	movs	r5, #0
 8016fb0:	e000      	b.n	8016fb4 <_ZN6tflite14MicroAllocator22FinishTensorAllocationEv+0x240>
 8016fb2:	2501      	movs	r5, #1
 8016fb4:	f107 030c 	add.w	r3, r7, #12
 8016fb8:	4618      	mov	r0, r3
 8016fba:	f007 fa6b 	bl	801e494 <_ZN6tflite19GreedyMemoryPlannerD1Ev>
 8016fbe:	2d01      	cmp	r5, #1
 8016fc0:	d001      	beq.n	8016fc6 <_ZN6tflite14MicroAllocator22FinishTensorAllocationEv+0x252>
 8016fc2:	2500      	movs	r5, #0
 8016fc4:	e001      	b.n	8016fca <_ZN6tflite14MicroAllocator22FinishTensorAllocationEv+0x256>
    GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
 8016fc6:	bf00      	nop
 8016fc8:	2501      	movs	r5, #1
 8016fca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016fce:	4618      	mov	r0, r3
 8016fd0:	f001 fe74 	bl	8018cbc <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
 8016fd4:	2d01      	cmp	r5, #1
 8016fd6:	d121      	bne.n	801701c <_ZN6tflite14MicroAllocator22FinishTensorAllocationEv+0x2a8>
                                        memory_allocator_->GetTail());
 8016fd8:	bf00      	nop
  }

  // Data in variables need to be kept for the next invocation so allocating
  // them from the tail (persistent area).
  if (AllocateVariables(subgraph_->tensors(), context_->tensors,
 8016fda:	687b      	ldr	r3, [r7, #4]
 8016fdc:	69db      	ldr	r3, [r3, #28]
 8016fde:	4618      	mov	r0, r3
 8016fe0:	f7ff f8d9 	bl	8016196 <_ZNK6tflite8SubGraph7tensorsEv>
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	68db      	ldr	r3, [r3, #12]
 8016fe8:	6899      	ldr	r1, [r3, #8]
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	685b      	ldr	r3, [r3, #4]
 8016fee:	461a      	mov	r2, r3
 8016ff0:	f7ff f9a8 	bl	8016344 <_ZN6tflite12_GLOBAL__N_117AllocateVariablesEPKN11flatbuffers6VectorINS1_6OffsetINS_6TensorEEEEEP12TfLiteTensorPNS_21SimpleMemoryAllocatorE>
 8016ff4:	4603      	mov	r3, r0
                        memory_allocator_) != kTfLiteOk) {
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	bf14      	ite	ne
 8016ffa:	2301      	movne	r3, #1
 8016ffc:	2300      	moveq	r3, #0
 8016ffe:	b2db      	uxtb	r3, r3
  if (AllocateVariables(subgraph_->tensors(), context_->tensors,
 8017000:	2b00      	cmp	r3, #0
 8017002:	d007      	beq.n	8017014 <_ZN6tflite14MicroAllocator22FinishTensorAllocationEv+0x2a0>
    TF_LITE_REPORT_ERROR(
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	689b      	ldr	r3, [r3, #8]
 8017008:	490c      	ldr	r1, [pc, #48]	; (801703c <_ZN6tflite14MicroAllocator22FinishTensorAllocationEv+0x2c8>)
 801700a:	4618      	mov	r0, r3
 801700c:	f7ee f9de 	bl	80053cc <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate variables. Please increase arena size.");
    return kTfLiteError;
 8017010:	2401      	movs	r4, #1
 8017012:	e003      	b.n	801701c <_ZN6tflite14MicroAllocator22FinishTensorAllocationEv+0x2a8>
  }

  active_ = false;
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	2200      	movs	r2, #0
 8017018:	741a      	strb	r2, [r3, #16]
  return kTfLiteOk;
 801701a:	2400      	movs	r4, #0
 801701c:	4623      	mov	r3, r4
}
 801701e:	4618      	mov	r0, r3
 8017020:	3784      	adds	r7, #132	; 0x84
 8017022:	46bd      	mov	sp, r7
 8017024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017026:	bf00      	nop
 8017028:	0802332c 	.word	0x0802332c
 801702c:	080232d8 	.word	0x080232d8
 8017030:	08023314 	.word	0x08023314
 8017034:	08023348 	.word	0x08023348
 8017038:	080233a0 	.word	0x080233a0
 801703c:	080233c4 	.word	0x080233c4

08017040 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv>:

TfLiteStatus MicroAllocator::AllocatePersistentBuffer(size_t bytes,
                                                      void** ptr) {
 8017040:	b580      	push	{r7, lr}
 8017042:	b086      	sub	sp, #24
 8017044:	af00      	add	r7, sp, #0
 8017046:	60f8      	str	r0, [r7, #12]
 8017048:	60b9      	str	r1, [r7, #8]
 801704a:	607a      	str	r2, [r7, #4]
  uint8_t* data = memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
 801704c:	68fb      	ldr	r3, [r7, #12]
 801704e:	6858      	ldr	r0, [r3, #4]
 8017050:	68fb      	ldr	r3, [r7, #12]
 8017052:	685b      	ldr	r3, [r3, #4]
 8017054:	681b      	ldr	r3, [r3, #0]
 8017056:	330c      	adds	r3, #12
 8017058:	681b      	ldr	r3, [r3, #0]
 801705a:	2210      	movs	r2, #16
 801705c:	68b9      	ldr	r1, [r7, #8]
 801705e:	4798      	blx	r3
 8017060:	6178      	str	r0, [r7, #20]
  if (data == nullptr) {
 8017062:	697b      	ldr	r3, [r7, #20]
 8017064:	2b00      	cmp	r3, #0
 8017066:	d108      	bne.n	801707a <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv+0x3a>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8017068:	68fb      	ldr	r3, [r7, #12]
 801706a:	689b      	ldr	r3, [r3, #8]
 801706c:	68ba      	ldr	r2, [r7, #8]
 801706e:	4907      	ldr	r1, [pc, #28]	; (801708c <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv+0x4c>)
 8017070:	4618      	mov	r0, r3
 8017072:	f7ee f9ab 	bl	80053cc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to allocate persistent buffer of size %d",
                         bytes);
    return kTfLiteError;
 8017076:	2301      	movs	r3, #1
 8017078:	e003      	b.n	8017082 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv+0x42>
  }
  (*ptr) = data;
 801707a:	687b      	ldr	r3, [r7, #4]
 801707c:	697a      	ldr	r2, [r7, #20]
 801707e:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8017080:	2300      	movs	r3, #0
}
 8017082:	4618      	mov	r0, r3
 8017084:	3718      	adds	r7, #24
 8017086:	46bd      	mov	sp, r7
 8017088:	bd80      	pop	{r7, pc}
 801708a:	bf00      	nop
 801708c:	08023400 	.word	0x08023400

08017090 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi>:

TfLiteStatus MicroAllocator::RequestScratchBufferInArena(int node_id,
                                                         size_t bytes,
                                                         int* buffer_idx) {
 8017090:	b590      	push	{r4, r7, lr}
 8017092:	b087      	sub	sp, #28
 8017094:	af00      	add	r7, sp, #0
 8017096:	60f8      	str	r0, [r7, #12]
 8017098:	60b9      	str	r1, [r7, #8]
 801709a:	607a      	str	r2, [r7, #4]
 801709c:	603b      	str	r3, [r7, #0]
  // A sanity check to make sure scratch_buffer_handles_ is contiguous i.e.
  // scratch_buffer_handles_ is pointing to the last allocation from memory
  // allocator.
  if (scratch_buffer_handles_ != nullptr &&
 801709e:	68fb      	ldr	r3, [r7, #12]
 80170a0:	695b      	ldr	r3, [r3, #20]
 80170a2:	2b00      	cmp	r3, #0
 80170a4:	d00b      	beq.n	80170be <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x2e>
      reinterpret_cast<uint8_t*>(scratch_buffer_handles_) !=
 80170a6:	68fb      	ldr	r3, [r7, #12]
 80170a8:	695c      	ldr	r4, [r3, #20]
          memory_allocator_->GetTail()) {
 80170aa:	68fb      	ldr	r3, [r7, #12]
 80170ac:	685b      	ldr	r3, [r3, #4]
 80170ae:	4618      	mov	r0, r3
 80170b0:	f001 fe94 	bl	8018ddc <_ZNK6tflite21SimpleMemoryAllocator7GetTailEv>
 80170b4:	4603      	mov	r3, r0
  if (scratch_buffer_handles_ != nullptr &&
 80170b6:	429c      	cmp	r4, r3
 80170b8:	d001      	beq.n	80170be <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x2e>
 80170ba:	2301      	movs	r3, #1
 80170bc:	e000      	b.n	80170c0 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x30>
 80170be:	2300      	movs	r3, #0
 80170c0:	2b00      	cmp	r3, #0
 80170c2:	d007      	beq.n	80170d4 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x44>
    TF_LITE_REPORT_ERROR(error_reporter_,
 80170c4:	68fb      	ldr	r3, [r7, #12]
 80170c6:	689b      	ldr	r3, [r3, #8]
 80170c8:	491d      	ldr	r1, [pc, #116]	; (8017140 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0xb0>)
 80170ca:	4618      	mov	r0, r3
 80170cc:	f7ee f97e 	bl	80053cc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Internal error: AllocateFromTail can not be called "
                         "between two RequestScratchBufferInArena calls.");
    return kTfLiteError;
 80170d0:	2301      	movs	r3, #1
 80170d2:	e030      	b.n	8017136 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0xa6>
  }

  internal::ScratchBufferHandle* handle =
      reinterpret_cast<internal::ScratchBufferHandle*>(
          memory_allocator_->AllocateFromTail(
 80170d4:	68fb      	ldr	r3, [r7, #12]
 80170d6:	6858      	ldr	r0, [r3, #4]
 80170d8:	68fb      	ldr	r3, [r7, #12]
 80170da:	685b      	ldr	r3, [r3, #4]
              sizeof(internal::ScratchBufferHandle),
              alignof(internal::ScratchBufferHandle)));
 80170dc:	681b      	ldr	r3, [r3, #0]
 80170de:	330c      	adds	r3, #12
 80170e0:	681b      	ldr	r3, [r3, #0]
 80170e2:	2204      	movs	r2, #4
 80170e4:	210c      	movs	r1, #12
 80170e6:	4798      	blx	r3
 80170e8:	6178      	str	r0, [r7, #20]
  if (handle == nullptr) {
 80170ea:	697b      	ldr	r3, [r7, #20]
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	d108      	bne.n	8017102 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x72>
    TF_LITE_REPORT_ERROR(error_reporter_,
 80170f0:	68fb      	ldr	r3, [r7, #12]
 80170f2:	689b      	ldr	r3, [r3, #8]
 80170f4:	68ba      	ldr	r2, [r7, #8]
 80170f6:	4913      	ldr	r1, [pc, #76]	; (8017144 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0xb4>)
 80170f8:	4618      	mov	r0, r3
 80170fa:	f7ee f967 	bl	80053cc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to register scratch buffer handle for node %s",
                         node_id);
    return kTfLiteError;
 80170fe:	2301      	movs	r3, #1
 8017100:	e019      	b.n	8017136 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0xa6>
  }
  *handle = {};
 8017102:	697b      	ldr	r3, [r7, #20]
 8017104:	461a      	mov	r2, r3
 8017106:	2300      	movs	r3, #0
 8017108:	6013      	str	r3, [r2, #0]
 801710a:	6053      	str	r3, [r2, #4]
 801710c:	6093      	str	r3, [r2, #8]
  handle->bytes = bytes;
 801710e:	697b      	ldr	r3, [r7, #20]
 8017110:	687a      	ldr	r2, [r7, #4]
 8017112:	605a      	str	r2, [r3, #4]
  handle->node_idx = node_id;
 8017114:	697b      	ldr	r3, [r7, #20]
 8017116:	68ba      	ldr	r2, [r7, #8]
 8017118:	609a      	str	r2, [r3, #8]
  *buffer_idx = scratch_buffer_count_;
 801711a:	68fb      	ldr	r3, [r7, #12]
 801711c:	699b      	ldr	r3, [r3, #24]
 801711e:	461a      	mov	r2, r3
 8017120:	683b      	ldr	r3, [r7, #0]
 8017122:	601a      	str	r2, [r3, #0]
  scratch_buffer_count_ += 1;
 8017124:	68fb      	ldr	r3, [r7, #12]
 8017126:	699b      	ldr	r3, [r3, #24]
 8017128:	1c5a      	adds	r2, r3, #1
 801712a:	68fb      	ldr	r3, [r7, #12]
 801712c:	619a      	str	r2, [r3, #24]
  // scratch_buffer_handles_ is in reverse order. The following code ensures
  // that scratch_buffers[0] is pointing to the newly allocated handle.
  scratch_buffer_handles_ = handle;
 801712e:	68fb      	ldr	r3, [r7, #12]
 8017130:	697a      	ldr	r2, [r7, #20]
 8017132:	615a      	str	r2, [r3, #20]
  return kTfLiteOk;
 8017134:	2300      	movs	r3, #0
}
 8017136:	4618      	mov	r0, r3
 8017138:	371c      	adds	r7, #28
 801713a:	46bd      	mov	sp, r7
 801713c:	bd90      	pop	{r4, r7, pc}
 801713e:	bf00      	nop
 8017140:	08023430 	.word	0x08023430
 8017144:	08023494 	.word	0x08023494

08017148 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi>:

void* MicroAllocator::GetScratchBuffer(int buffer_idx) const {
 8017148:	b580      	push	{r7, lr}
 801714a:	b082      	sub	sp, #8
 801714c:	af00      	add	r7, sp, #0
 801714e:	6078      	str	r0, [r7, #4]
 8017150:	6039      	str	r1, [r7, #0]
  if (static_cast<size_t>(buffer_idx) >= scratch_buffer_count_) {
 8017152:	687b      	ldr	r3, [r7, #4]
 8017154:	699a      	ldr	r2, [r3, #24]
 8017156:	683b      	ldr	r3, [r7, #0]
 8017158:	429a      	cmp	r2, r3
 801715a:	d809      	bhi.n	8017170 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi+0x28>
    TF_LITE_REPORT_ERROR(error_reporter_,
 801715c:	687b      	ldr	r3, [r7, #4]
 801715e:	6898      	ldr	r0, [r3, #8]
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	699b      	ldr	r3, [r3, #24]
 8017164:	683a      	ldr	r2, [r7, #0]
 8017166:	490b      	ldr	r1, [pc, #44]	; (8017194 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi+0x4c>)
 8017168:	f7ee f930 	bl	80053cc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Buffer %d not found. %d buffers available.",
                         buffer_idx, scratch_buffer_count_);
    return nullptr;
 801716c:	2300      	movs	r3, #0
 801716e:	e00c      	b.n	801718a <_ZNK6tflite14MicroAllocator16GetScratchBufferEi+0x42>
  }
  // scratch_buffer_handles_ is in reverse order.
  return scratch_buffer_handles_[scratch_buffer_count_ - buffer_idx - 1].data;
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	6959      	ldr	r1, [r3, #20]
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	699a      	ldr	r2, [r3, #24]
 8017178:	683b      	ldr	r3, [r7, #0]
 801717a:	1ad2      	subs	r2, r2, r3
 801717c:	4613      	mov	r3, r2
 801717e:	005b      	lsls	r3, r3, #1
 8017180:	4413      	add	r3, r2
 8017182:	009b      	lsls	r3, r3, #2
 8017184:	3b0c      	subs	r3, #12
 8017186:	440b      	add	r3, r1
 8017188:	681b      	ldr	r3, [r3, #0]
}
 801718a:	4618      	mov	r0, r3
 801718c:	3708      	adds	r7, #8
 801718e:	46bd      	mov	sp, r7
 8017190:	bd80      	pop	{r7, pc}
 8017192:	bf00      	nop
 8017194:	080234cc 	.word	0x080234cc

08017198 <_ZN6tflite14MicroAllocator29InitGraphAndContextTensorDataEv>:
  TF_LITE_REPORT_ERROR(error_reporter_, "Tail usage: %d bytes",
                       memory_allocator_->GetTailUsedBytes());
  return memory_allocator_->GetUsedBytes();
}

TfLiteStatus MicroAllocator::InitGraphAndContextTensorData() {
 8017198:	b580      	push	{r7, lr}
 801719a:	b084      	sub	sp, #16
 801719c:	af00      	add	r7, sp, #0
 801719e:	6078      	str	r0, [r7, #4]
  auto* subgraphs = model_->subgraphs();
 80171a0:	687b      	ldr	r3, [r7, #4]
 80171a2:	681b      	ldr	r3, [r3, #0]
 80171a4:	4618      	mov	r0, r3
 80171a6:	f7ff f84a 	bl	801623e <_ZNK6tflite5Model9subgraphsEv>
 80171aa:	60f8      	str	r0, [r7, #12]
  if (subgraphs->size() != 1) {
 80171ac:	68f8      	ldr	r0, [r7, #12]
 80171ae:	f000 fbd5 	bl	801795c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 80171b2:	4603      	mov	r3, r0
 80171b4:	2b01      	cmp	r3, #1
 80171b6:	bf14      	ite	ne
 80171b8:	2301      	movne	r3, #1
 80171ba:	2300      	moveq	r3, #0
 80171bc:	b2db      	uxtb	r3, r3
 80171be:	2b00      	cmp	r3, #0
 80171c0:	d007      	beq.n	80171d2 <_ZN6tflite14MicroAllocator29InitGraphAndContextTensorDataEv+0x3a>
    TF_LITE_REPORT_ERROR(error_reporter_,
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	689b      	ldr	r3, [r3, #8]
 80171c6:	4913      	ldr	r1, [pc, #76]	; (8017214 <_ZN6tflite14MicroAllocator29InitGraphAndContextTensorDataEv+0x7c>)
 80171c8:	4618      	mov	r0, r3
 80171ca:	f7ee f8ff 	bl	80053cc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Only 1 subgraph is currently supported.\n");
    return kTfLiteError;
 80171ce:	2301      	movs	r3, #1
 80171d0:	e01b      	b.n	801720a <_ZN6tflite14MicroAllocator29InitGraphAndContextTensorDataEv+0x72>
  }
  subgraph_ = (*subgraphs)[0];
 80171d2:	2100      	movs	r1, #0
 80171d4:	68f8      	ldr	r0, [r7, #12]
 80171d6:	f000 fc43 	bl	8017a60 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>
 80171da:	4602      	mov	r2, r0
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	61da      	str	r2, [r3, #28]

  TF_LITE_ENSURE_STATUS(AllocateTfLiteTensorArray());
 80171e0:	6878      	ldr	r0, [r7, #4]
 80171e2:	f000 f819 	bl	8017218 <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEv>
 80171e6:	4603      	mov	r3, r0
 80171e8:	72fb      	strb	r3, [r7, #11]
 80171ea:	7afb      	ldrb	r3, [r7, #11]
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	d001      	beq.n	80171f4 <_ZN6tflite14MicroAllocator29InitGraphAndContextTensorDataEv+0x5c>
 80171f0:	7afb      	ldrb	r3, [r7, #11]
 80171f2:	e00a      	b.n	801720a <_ZN6tflite14MicroAllocator29InitGraphAndContextTensorDataEv+0x72>
  TF_LITE_ENSURE_STATUS(PopulateTfLiteTensorArrayFromFlatbuffer());
 80171f4:	6878      	ldr	r0, [r7, #4]
 80171f6:	f000 f849 	bl	801728c <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEv>
 80171fa:	4603      	mov	r3, r0
 80171fc:	72bb      	strb	r3, [r7, #10]
 80171fe:	7abb      	ldrb	r3, [r7, #10]
 8017200:	2b00      	cmp	r3, #0
 8017202:	d001      	beq.n	8017208 <_ZN6tflite14MicroAllocator29InitGraphAndContextTensorDataEv+0x70>
 8017204:	7abb      	ldrb	r3, [r7, #10]
 8017206:	e000      	b.n	801720a <_ZN6tflite14MicroAllocator29InitGraphAndContextTensorDataEv+0x72>

  return kTfLiteOk;
 8017208:	2300      	movs	r3, #0
}
 801720a:	4618      	mov	r0, r3
 801720c:	3710      	adds	r7, #16
 801720e:	46bd      	mov	sp, r7
 8017210:	bd80      	pop	{r7, pc}
 8017212:	bf00      	nop
 8017214:	08023548 	.word	0x08023548

08017218 <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEv>:

TfLiteStatus MicroAllocator::AllocateTfLiteTensorArray() {
 8017218:	b590      	push	{r4, r7, lr}
 801721a:	b083      	sub	sp, #12
 801721c:	af00      	add	r7, sp, #0
 801721e:	6078      	str	r0, [r7, #4]
  context_->tensors_size = subgraph_->tensors()->size();
 8017220:	687b      	ldr	r3, [r7, #4]
 8017222:	69db      	ldr	r3, [r3, #28]
 8017224:	4618      	mov	r0, r3
 8017226:	f7fe ffb6 	bl	8016196 <_ZNK6tflite8SubGraph7tensorsEv>
 801722a:	4602      	mov	r2, r0
 801722c:	687b      	ldr	r3, [r7, #4]
 801722e:	68dc      	ldr	r4, [r3, #12]
 8017230:	4610      	mov	r0, r2
 8017232:	f000 faf7 	bl	8017824 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 8017236:	4603      	mov	r3, r0
 8017238:	6023      	str	r3, [r4, #0]
  context_->tensors =
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	6858      	ldr	r0, [r3, #4]
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	685b      	ldr	r3, [r3, #4]
          sizeof(TfLiteTensor) * context_->tensors_size,
          alignof(TfLiteTensor)));
 8017242:	681b      	ldr	r3, [r3, #0]
 8017244:	330c      	adds	r3, #12
 8017246:	681b      	ldr	r3, [r3, #0]
          sizeof(TfLiteTensor) * context_->tensors_size,
 8017248:	687a      	ldr	r2, [r7, #4]
 801724a:	68d2      	ldr	r2, [r2, #12]
 801724c:	6812      	ldr	r2, [r2, #0]
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
 801724e:	0191      	lsls	r1, r2, #6
  context_->tensors =
 8017250:	687a      	ldr	r2, [r7, #4]
 8017252:	68d4      	ldr	r4, [r2, #12]
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
 8017254:	2204      	movs	r2, #4
 8017256:	4798      	blx	r3
 8017258:	4603      	mov	r3, r0
  context_->tensors =
 801725a:	60a3      	str	r3, [r4, #8]
  if (context_->tensors == nullptr) {
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	68db      	ldr	r3, [r3, #12]
 8017260:	689b      	ldr	r3, [r3, #8]
 8017262:	2b00      	cmp	r3, #0
 8017264:	d10b      	bne.n	801727e <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEv+0x66>
    TF_LITE_REPORT_ERROR(
 8017266:	687b      	ldr	r3, [r7, #4]
 8017268:	6898      	ldr	r0, [r3, #8]
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	68db      	ldr	r3, [r3, #12]
 801726e:	681b      	ldr	r3, [r3, #0]
 8017270:	019b      	lsls	r3, r3, #6
 8017272:	461a      	mov	r2, r3
 8017274:	4904      	ldr	r1, [pc, #16]	; (8017288 <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEv+0x70>)
 8017276:	f7ee f8a9 	bl	80053cc <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for context->tensors, %d bytes required",
        sizeof(TfLiteTensor) * context_->tensors_size);
    return kTfLiteError;
 801727a:	2301      	movs	r3, #1
 801727c:	e000      	b.n	8017280 <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEv+0x68>
  }
  return kTfLiteOk;
 801727e:	2300      	movs	r3, #0
}
 8017280:	4618      	mov	r0, r3
 8017282:	370c      	adds	r7, #12
 8017284:	46bd      	mov	sp, r7
 8017286:	bd90      	pop	{r4, r7, pc}
 8017288:	08023574 	.word	0x08023574

0801728c <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEv>:

TfLiteStatus MicroAllocator::PopulateTfLiteTensorArrayFromFlatbuffer() {
 801728c:	b5b0      	push	{r4, r5, r7, lr}
 801728e:	b086      	sub	sp, #24
 8017290:	af02      	add	r7, sp, #8
 8017292:	6078      	str	r0, [r7, #4]
  // Initialize tensors in context_ using the flatbuffer for quantization data.
  for (size_t i = 0; i < subgraph_->tensors()->size(); ++i) {
 8017294:	2300      	movs	r3, #0
 8017296:	60fb      	str	r3, [r7, #12]
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	69db      	ldr	r3, [r3, #28]
 801729c:	4618      	mov	r0, r3
 801729e:	f7fe ff7a 	bl	8016196 <_ZNK6tflite8SubGraph7tensorsEv>
 80172a2:	4603      	mov	r3, r0
 80172a4:	4618      	mov	r0, r3
 80172a6:	f000 fabd 	bl	8017824 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 80172aa:	4602      	mov	r2, r0
 80172ac:	68fb      	ldr	r3, [r7, #12]
 80172ae:	4293      	cmp	r3, r2
 80172b0:	bf34      	ite	cc
 80172b2:	2301      	movcc	r3, #1
 80172b4:	2300      	movcs	r3, #0
 80172b6:	b2db      	uxtb	r3, r3
 80172b8:	2b00      	cmp	r3, #0
 80172ba:	d032      	beq.n	8017322 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEv+0x96>
    TfLiteStatus status = internal::InitializeTfLiteTensorFromFlatbuffer(
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	685c      	ldr	r4, [r3, #4]
        memory_allocator_, *subgraph_->tensors()->Get(i), model_->buffers(),
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	69db      	ldr	r3, [r3, #28]
 80172c4:	4618      	mov	r0, r3
 80172c6:	f7fe ff66 	bl	8016196 <_ZNK6tflite8SubGraph7tensorsEv>
 80172ca:	4603      	mov	r3, r0
 80172cc:	68f9      	ldr	r1, [r7, #12]
 80172ce:	4618      	mov	r0, r3
 80172d0:	f000 fab6 	bl	8017840 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 80172d4:	4605      	mov	r5, r0
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	681b      	ldr	r3, [r3, #0]
    TfLiteStatus status = internal::InitializeTfLiteTensorFromFlatbuffer(
 80172da:	4618      	mov	r0, r3
 80172dc:	f7fe ffbd 	bl	801625a <_ZNK6tflite5Model7buffersEv>
 80172e0:	687b      	ldr	r3, [r7, #4]
 80172e2:	6899      	ldr	r1, [r3, #8]
        error_reporter_, &context_->tensors[i]);
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	68db      	ldr	r3, [r3, #12]
 80172e8:	689a      	ldr	r2, [r3, #8]
 80172ea:	68fb      	ldr	r3, [r7, #12]
 80172ec:	019b      	lsls	r3, r3, #6
    TfLiteStatus status = internal::InitializeTfLiteTensorFromFlatbuffer(
 80172ee:	4413      	add	r3, r2
        error_reporter_, &context_->tensors[i]);
 80172f0:	9300      	str	r3, [sp, #0]
 80172f2:	460b      	mov	r3, r1
 80172f4:	4602      	mov	r2, r0
 80172f6:	4629      	mov	r1, r5
 80172f8:	4620      	mov	r0, r4
 80172fa:	f7ff fb3b 	bl	8016974 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>
 80172fe:	4603      	mov	r3, r0
 8017300:	72fb      	strb	r3, [r7, #11]
    if (status != kTfLiteOk) {
 8017302:	7afb      	ldrb	r3, [r7, #11]
 8017304:	2b00      	cmp	r3, #0
 8017306:	d008      	beq.n	801731a <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEv+0x8e>
      TF_LITE_REPORT_ERROR(error_reporter_, "Failed to initialize tensor %d",
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	689b      	ldr	r3, [r3, #8]
 801730c:	68fa      	ldr	r2, [r7, #12]
 801730e:	4907      	ldr	r1, [pc, #28]	; (801732c <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEv+0xa0>)
 8017310:	4618      	mov	r0, r3
 8017312:	f7ee f85b 	bl	80053cc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           i);
      return kTfLiteError;
 8017316:	2301      	movs	r3, #1
 8017318:	e004      	b.n	8017324 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEv+0x98>
  for (size_t i = 0; i < subgraph_->tensors()->size(); ++i) {
 801731a:	68fb      	ldr	r3, [r7, #12]
 801731c:	3301      	adds	r3, #1
 801731e:	60fb      	str	r3, [r7, #12]
 8017320:	e7ba      	b.n	8017298 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEv+0xc>
    }
  }
  return kTfLiteOk;
 8017322:	2300      	movs	r3, #0
}
 8017324:	4618      	mov	r0, r3
 8017326:	3710      	adds	r7, #16
 8017328:	46bd      	mov	sp, r7
 801732a:	bdb0      	pop	{r4, r5, r7, pc}
 801732c:	080235b8 	.word	0x080235b8

08017330 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPPNS_19NodeAndRegistrationE>:

TfLiteStatus MicroAllocator::AllocateNodeAndRegistrations(
    NodeAndRegistration** node_and_registrations) {
 8017330:	b5b0      	push	{r4, r5, r7, lr}
 8017332:	b084      	sub	sp, #16
 8017334:	af00      	add	r7, sp, #0
 8017336:	6078      	str	r0, [r7, #4]
 8017338:	6039      	str	r1, [r7, #0]
  NodeAndRegistration* output = reinterpret_cast<NodeAndRegistration*>(
      memory_allocator_->AllocateFromTail(
 801733a:	687b      	ldr	r3, [r7, #4]
 801733c:	685d      	ldr	r5, [r3, #4]
 801733e:	687b      	ldr	r3, [r7, #4]
 8017340:	685b      	ldr	r3, [r3, #4]
          sizeof(NodeAndRegistration) * subgraph_->operators()->size(),
          alignof(NodeAndRegistration)));
 8017342:	681b      	ldr	r3, [r3, #0]
 8017344:	330c      	adds	r3, #12
 8017346:	681c      	ldr	r4, [r3, #0]
          sizeof(NodeAndRegistration) * subgraph_->operators()->size(),
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	69db      	ldr	r3, [r3, #28]
 801734c:	4618      	mov	r0, r3
 801734e:	f7fe ff4c 	bl	80161ea <_ZNK6tflite8SubGraph9operatorsEv>
 8017352:	4603      	mov	r3, r0
 8017354:	4618      	mov	r0, r3
 8017356:	f000 fa99 	bl	801788c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 801735a:	4602      	mov	r2, r0
 801735c:	4613      	mov	r3, r2
 801735e:	009b      	lsls	r3, r3, #2
 8017360:	4413      	add	r3, r2
 8017362:	00db      	lsls	r3, r3, #3
          alignof(NodeAndRegistration)));
 8017364:	2204      	movs	r2, #4
 8017366:	4619      	mov	r1, r3
 8017368:	4628      	mov	r0, r5
 801736a:	47a0      	blx	r4
 801736c:	60f8      	str	r0, [r7, #12]
  if (output == nullptr) {
 801736e:	68fb      	ldr	r3, [r7, #12]
 8017370:	2b00      	cmp	r3, #0
 8017372:	d107      	bne.n	8017384 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPPNS_19NodeAndRegistrationE+0x54>
    TF_LITE_REPORT_ERROR(
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	689b      	ldr	r3, [r3, #8]
 8017378:	4906      	ldr	r1, [pc, #24]	; (8017394 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPPNS_19NodeAndRegistrationE+0x64>)
 801737a:	4618      	mov	r0, r3
 801737c:	f7ee f826 	bl	80053cc <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for node_and_registrations.");
    return kTfLiteError;
 8017380:	2301      	movs	r3, #1
 8017382:	e003      	b.n	801738c <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPPNS_19NodeAndRegistrationE+0x5c>
  }
  *node_and_registrations = output;
 8017384:	683b      	ldr	r3, [r7, #0]
 8017386:	68fa      	ldr	r2, [r7, #12]
 8017388:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 801738a:	2300      	movs	r3, #0
}
 801738c:	4618      	mov	r0, r3
 801738e:	3710      	adds	r7, #16
 8017390:	46bd      	mov	sp, r7
 8017392:	bdb0      	pop	{r4, r5, r7, pc}
 8017394:	080235d8 	.word	0x080235d8

08017398 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE>:

TfLiteStatus MicroAllocator::PrepareNodeAndRegistrationDataFromFlatbuffer(
    const MicroOpResolver& op_resolver,
    NodeAndRegistration* node_and_registrations) {
 8017398:	b590      	push	{r4, r7, lr}
 801739a:	b099      	sub	sp, #100	; 0x64
 801739c:	af02      	add	r7, sp, #8
 801739e:	60f8      	str	r0, [r7, #12]
 80173a0:	60b9      	str	r1, [r7, #8]
 80173a2:	607a      	str	r2, [r7, #4]
  TfLiteStatus status = kTfLiteOk;
 80173a4:	2300      	movs	r3, #0
 80173a6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  auto* opcodes = model_->operator_codes();
 80173aa:	68fb      	ldr	r3, [r7, #12]
 80173ac:	681b      	ldr	r3, [r3, #0]
 80173ae:	4618      	mov	r0, r3
 80173b0:	f7fe ff37 	bl	8016222 <_ZNK6tflite5Model14operator_codesEv>
 80173b4:	6478      	str	r0, [r7, #68]	; 0x44
  MicroBuiltinDataAllocator builtin_data_allocator(memory_allocator_);
 80173b6:	68fb      	ldr	r3, [r7, #12]
 80173b8:	685a      	ldr	r2, [r3, #4]
 80173ba:	f107 0314 	add.w	r3, r7, #20
 80173be:	4611      	mov	r1, r2
 80173c0:	4618      	mov	r0, r3
 80173c2:	f7fe ff89 	bl	80162d8 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE>
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 80173c6:	2300      	movs	r3, #0
 80173c8:	657b      	str	r3, [r7, #84]	; 0x54
 80173ca:	68fb      	ldr	r3, [r7, #12]
 80173cc:	69db      	ldr	r3, [r3, #28]
 80173ce:	4618      	mov	r0, r3
 80173d0:	f7fe ff0b 	bl	80161ea <_ZNK6tflite8SubGraph9operatorsEv>
 80173d4:	4603      	mov	r3, r0
 80173d6:	4618      	mov	r0, r3
 80173d8:	f000 fa58 	bl	801788c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 80173dc:	4602      	mov	r2, r0
 80173de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80173e0:	4293      	cmp	r3, r2
 80173e2:	bf34      	ite	cc
 80173e4:	2301      	movcc	r3, #1
 80173e6:	2300      	movcs	r3, #0
 80173e8:	b2db      	uxtb	r3, r3
 80173ea:	2b00      	cmp	r3, #0
 80173ec:	f000 80fd 	beq.w	80175ea <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x252>
    const auto* op = subgraph_->operators()->Get(i);
 80173f0:	68fb      	ldr	r3, [r7, #12]
 80173f2:	69db      	ldr	r3, [r3, #28]
 80173f4:	4618      	mov	r0, r3
 80173f6:	f7fe fef8 	bl	80161ea <_ZNK6tflite8SubGraph9operatorsEv>
 80173fa:	4603      	mov	r3, r0
 80173fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80173fe:	4618      	mov	r0, r3
 8017400:	f000 fa52 	bl	80178a8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>
 8017404:	6438      	str	r0, [r7, #64]	; 0x40
    const size_t index = op->opcode_index();
 8017406:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8017408:	f7fe fe8c 	bl	8016124 <_ZNK6tflite8Operator12opcode_indexEv>
 801740c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (index >= opcodes->size()) {
 801740e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8017410:	f000 fa70 	bl	80178f4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>
 8017414:	4602      	mov	r2, r0
 8017416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017418:	4293      	cmp	r3, r2
 801741a:	bf2c      	ite	cs
 801741c:	2301      	movcs	r3, #1
 801741e:	2300      	movcc	r3, #0
 8017420:	b2db      	uxtb	r3, r3
 8017422:	2b00      	cmp	r3, #0
 8017424:	d008      	beq.n	8017438 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xa0>
      TF_LITE_REPORT_ERROR(error_reporter_,
 8017426:	68fb      	ldr	r3, [r7, #12]
 8017428:	689b      	ldr	r3, [r3, #8]
 801742a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801742c:	4974      	ldr	r1, [pc, #464]	; (8017600 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x268>)
 801742e:	4618      	mov	r0, r3
 8017430:	f7ed ffcc 	bl	80053cc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Missing registration for opcode_index %d\n", index);
      return kTfLiteError;
 8017434:	2401      	movs	r4, #1
 8017436:	e0d9      	b.n	80175ec <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x254>
    }
    auto* opcode = (*opcodes)[index];
 8017438:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801743a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801743c:	f000 fb1e 	bl	8017a7c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEixEm>
 8017440:	63b8      	str	r0, [r7, #56]	; 0x38
    status =
        GetRegistrationFromOpCode(opcode, op_resolver, error_reporter_,
 8017442:	68b9      	ldr	r1, [r7, #8]
 8017444:	68fb      	ldr	r3, [r7, #12]
 8017446:	6898      	ldr	r0, [r3, #8]
                                  &(node_and_registrations[i].registration));
 8017448:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801744a:	4613      	mov	r3, r2
 801744c:	009b      	lsls	r3, r3, #2
 801744e:	4413      	add	r3, r2
 8017450:	00db      	lsls	r3, r3, #3
 8017452:	461a      	mov	r2, r3
 8017454:	687b      	ldr	r3, [r7, #4]
 8017456:	4413      	add	r3, r2
        GetRegistrationFromOpCode(opcode, op_resolver, error_reporter_,
 8017458:	3324      	adds	r3, #36	; 0x24
    status =
 801745a:	4602      	mov	r2, r0
 801745c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801745e:	f7fd fdb9 	bl	8014fd4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>
 8017462:	4603      	mov	r3, r0
 8017464:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    if (status != kTfLiteOk) {
 8017468:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801746c:	2b00      	cmp	r3, #0
 801746e:	d011      	beq.n	8017494 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xfc>
      TF_LITE_REPORT_ERROR(error_reporter_,
 8017470:	68fb      	ldr	r3, [r7, #12]
 8017472:	689c      	ldr	r4, [r3, #8]
 8017474:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017476:	f7fd fd7f 	bl	8014f78 <_ZNK6tflite12OperatorCode12builtin_codeEv>
 801747a:	4603      	mov	r3, r0
 801747c:	4618      	mov	r0, r3
 801747e:	f7fd fd55 	bl	8014f2c <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 8017482:	4603      	mov	r3, r0
 8017484:	461a      	mov	r2, r3
 8017486:	495f      	ldr	r1, [pc, #380]	; (8017604 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x26c>)
 8017488:	4620      	mov	r0, r4
 801748a:	f7ed ff9f 	bl	80053cc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Failed to get registration from op code %s\n ",
                           EnumNameBuiltinOperator(opcode->builtin_code()));
      return status;
 801748e:	f897 404b 	ldrb.w	r4, [r7, #75]	; 0x4b
 8017492:	e0ab      	b.n	80175ec <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x254>
    }
    const auto* registration = node_and_registrations[i].registration;
 8017494:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017496:	4613      	mov	r3, r2
 8017498:	009b      	lsls	r3, r3, #2
 801749a:	4413      	add	r3, r2
 801749c:	00db      	lsls	r3, r3, #3
 801749e:	461a      	mov	r2, r3
 80174a0:	687b      	ldr	r3, [r7, #4]
 80174a2:	4413      	add	r3, r2
 80174a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80174a6:	637b      	str	r3, [r7, #52]	; 0x34
    if (registration == nullptr) {
 80174a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80174aa:	2b00      	cmp	r3, #0
 80174ac:	d108      	bne.n	80174c0 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x128>
      TF_LITE_REPORT_ERROR(error_reporter_, "Skipping op for opcode_index %d\n",
 80174ae:	68fb      	ldr	r3, [r7, #12]
 80174b0:	689b      	ldr	r3, [r3, #8]
 80174b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80174b4:	4954      	ldr	r1, [pc, #336]	; (8017608 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x270>)
 80174b6:	4618      	mov	r0, r3
 80174b8:	f7ed ff88 	bl	80053cc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           index);
      return kTfLiteError;
 80174bc:	2401      	movs	r4, #1
 80174be:	e095      	b.n	80175ec <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x254>
    }
    BuiltinOperator op_type =
        static_cast<BuiltinOperator>(registration->builtin_code);
 80174c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80174c2:	695b      	ldr	r3, [r3, #20]
    BuiltinOperator op_type =
 80174c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    if (op_type != BuiltinOperator_CUSTOM && op->custom_options()) {
 80174c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80174cc:	2b20      	cmp	r3, #32
 80174ce:	d007      	beq.n	80174e0 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x148>
 80174d0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80174d2:	f7fe fe52 	bl	801617a <_ZNK6tflite8Operator14custom_optionsEv>
 80174d6:	4603      	mov	r3, r0
 80174d8:	2b00      	cmp	r3, #0
 80174da:	d001      	beq.n	80174e0 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x148>
 80174dc:	2301      	movs	r3, #1
 80174de:	e000      	b.n	80174e2 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x14a>
 80174e0:	2300      	movs	r3, #0
 80174e2:	2b00      	cmp	r3, #0
 80174e4:	d00e      	beq.n	8017504 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x16c>
      TF_LITE_REPORT_ERROR(
 80174e6:	68fb      	ldr	r3, [r7, #12]
 80174e8:	689c      	ldr	r4, [r3, #8]
 80174ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80174ee:	4618      	mov	r0, r3
 80174f0:	f7fd fd1c 	bl	8014f2c <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 80174f4:	4603      	mov	r3, r0
 80174f6:	461a      	mov	r2, r3
 80174f8:	4944      	ldr	r1, [pc, #272]	; (801760c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x274>)
 80174fa:	4620      	mov	r0, r4
 80174fc:	f7ed ff66 	bl	80053cc <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter_,
          "Unsupported behavior: found builtin operator %s with custom "
          "options.\n",
          EnumNameBuiltinOperator(op_type));
      return kTfLiteError;
 8017500:	2401      	movs	r4, #1
 8017502:	e073      	b.n	80175ec <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x254>
    }

    const char* custom_data = nullptr;
 8017504:	2300      	movs	r3, #0
 8017506:	653b      	str	r3, [r7, #80]	; 0x50
    size_t custom_data_size = 0;
 8017508:	2300      	movs	r3, #0
 801750a:	64fb      	str	r3, [r7, #76]	; 0x4c
    unsigned char* builtin_data = nullptr;
 801750c:	2300      	movs	r3, #0
 801750e:	613b      	str	r3, [r7, #16]
    if (op->custom_options()) {
 8017510:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8017512:	f7fe fe32 	bl	801617a <_ZNK6tflite8Operator14custom_optionsEv>
 8017516:	4603      	mov	r3, r0
 8017518:	2b00      	cmp	r3, #0
 801751a:	bf14      	ite	ne
 801751c:	2301      	movne	r3, #1
 801751e:	2300      	moveq	r3, #0
 8017520:	b2db      	uxtb	r3, r3
 8017522:	2b00      	cmp	r3, #0
 8017524:	d010      	beq.n	8017548 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1b0>
      custom_data = reinterpret_cast<const char*>(op->custom_options()->data());
 8017526:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8017528:	f7fe fe27 	bl	801617a <_ZNK6tflite8Operator14custom_optionsEv>
 801752c:	4603      	mov	r3, r0
 801752e:	4618      	mov	r0, r3
 8017530:	f000 fa8a 	bl	8017a48 <_ZNK11flatbuffers6VectorIhE4dataEv>
 8017534:	6538      	str	r0, [r7, #80]	; 0x50
      custom_data_size = op->custom_options()->size();
 8017536:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8017538:	f7fe fe1f 	bl	801617a <_ZNK6tflite8Operator14custom_optionsEv>
 801753c:	4603      	mov	r3, r0
 801753e:	4618      	mov	r0, r3
 8017540:	f000 f8f6 	bl	8017730 <_ZNK11flatbuffers6VectorIhE4sizeEv>
 8017544:	64f8      	str	r0, [r7, #76]	; 0x4c
 8017546:	e025      	b.n	8017594 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1fc>
    } else {
      MicroOpResolver::BuiltinParseFunction parser =
          op_resolver.GetOpDataParser(op_type);
 8017548:	68bb      	ldr	r3, [r7, #8]
 801754a:	681b      	ldr	r3, [r3, #0]
 801754c:	3320      	adds	r3, #32
 801754e:	681b      	ldr	r3, [r3, #0]
 8017550:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8017554:	4611      	mov	r1, r2
 8017556:	68b8      	ldr	r0, [r7, #8]
 8017558:	4798      	blx	r3
 801755a:	62f8      	str	r0, [r7, #44]	; 0x2c
      TFLITE_DCHECK(parser != nullptr);
 801755c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801755e:	2b00      	cmp	r3, #0
 8017560:	d101      	bne.n	8017566 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1ce>
 8017562:	f007 fc75 	bl	801ee50 <abort>
      TF_LITE_ENSURE_STATUS(parser(op, op_type, error_reporter_,
 8017566:	68fb      	ldr	r3, [r7, #12]
 8017568:	689a      	ldr	r2, [r3, #8]
 801756a:	f107 0014 	add.w	r0, r7, #20
 801756e:	f897 1033 	ldrb.w	r1, [r7, #51]	; 0x33
 8017572:	f107 0310 	add.w	r3, r7, #16
 8017576:	9300      	str	r3, [sp, #0]
 8017578:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 801757a:	4603      	mov	r3, r0
 801757c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801757e:	47a0      	blx	r4
 8017580:	4603      	mov	r3, r0
 8017582:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8017586:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801758a:	2b00      	cmp	r3, #0
 801758c:	d002      	beq.n	8017594 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1fc>
 801758e:	f897 402b 	ldrb.w	r4, [r7, #43]	; 0x2b
 8017592:	e02b      	b.n	80175ec <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x254>
                                   (void**)(&builtin_data)));
    }

    // Disregard const qualifier to workaround with existing API.
    TfLiteIntArray* inputs_array = const_cast<TfLiteIntArray*>(
        reinterpret_cast<const TfLiteIntArray*>(op->inputs()));
 8017594:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8017596:	f7fe fdd4 	bl	8016142 <_ZNK6tflite8Operator6inputsEv>
 801759a:	6278      	str	r0, [r7, #36]	; 0x24
    TfLiteIntArray* outputs_array = const_cast<TfLiteIntArray*>(
        reinterpret_cast<const TfLiteIntArray*>(op->outputs()));
 801759c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801759e:	f7fe fdde 	bl	801615e <_ZNK6tflite8Operator7outputsEv>
 80175a2:	6238      	str	r0, [r7, #32]

    TfLiteNode* node = &(node_and_registrations[i].node);
 80175a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80175a6:	4613      	mov	r3, r2
 80175a8:	009b      	lsls	r3, r3, #2
 80175aa:	4413      	add	r3, r2
 80175ac:	00db      	lsls	r3, r3, #3
 80175ae:	461a      	mov	r2, r3
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	4413      	add	r3, r2
 80175b4:	61fb      	str	r3, [r7, #28]
    *node = {};
 80175b6:	69fb      	ldr	r3, [r7, #28]
 80175b8:	4618      	mov	r0, r3
 80175ba:	2324      	movs	r3, #36	; 0x24
 80175bc:	461a      	mov	r2, r3
 80175be:	2100      	movs	r1, #0
 80175c0:	f007 fd32 	bl	801f028 <memset>
    node->inputs = inputs_array;
 80175c4:	69fb      	ldr	r3, [r7, #28]
 80175c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80175c8:	601a      	str	r2, [r3, #0]
    node->outputs = outputs_array;
 80175ca:	69fb      	ldr	r3, [r7, #28]
 80175cc:	6a3a      	ldr	r2, [r7, #32]
 80175ce:	605a      	str	r2, [r3, #4]
    node->builtin_data = reinterpret_cast<void*>(builtin_data);
 80175d0:	693a      	ldr	r2, [r7, #16]
 80175d2:	69fb      	ldr	r3, [r7, #28]
 80175d4:	615a      	str	r2, [r3, #20]
    node->custom_initial_data = custom_data;
 80175d6:	69fb      	ldr	r3, [r7, #28]
 80175d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80175da:	619a      	str	r2, [r3, #24]
    node->custom_initial_data_size = custom_data_size;
 80175dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80175de:	69fb      	ldr	r3, [r7, #28]
 80175e0:	61da      	str	r2, [r3, #28]
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 80175e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80175e4:	3301      	adds	r3, #1
 80175e6:	657b      	str	r3, [r7, #84]	; 0x54
 80175e8:	e6ef      	b.n	80173ca <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x32>
  }

  return kTfLiteOk;
 80175ea:	2400      	movs	r4, #0
  MicroBuiltinDataAllocator builtin_data_allocator(memory_allocator_);
 80175ec:	f107 0314 	add.w	r3, r7, #20
 80175f0:	4618      	mov	r0, r3
 80175f2:	f000 fc6f 	bl	8017ed4 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>
 80175f6:	4623      	mov	r3, r4
}
 80175f8:	4618      	mov	r0, r3
 80175fa:	375c      	adds	r7, #92	; 0x5c
 80175fc:	46bd      	mov	sp, r7
 80175fe:	bd90      	pop	{r4, r7, pc}
 8017600:	08023610 	.word	0x08023610
 8017604:	0802363c 	.word	0x0802363c
 8017608:	0802366c 	.word	0x0802366c
 801760c:	08023690 	.word	0x08023690

08017610 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8017610:	b580      	push	{r7, lr}
 8017612:	b082      	sub	sp, #8
 8017614:	af00      	add	r7, sp, #0
 8017616:	6078      	str	r0, [r7, #4]
 8017618:	460b      	mov	r3, r1
 801761a:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 801761c:	887b      	ldrh	r3, [r7, #2]
 801761e:	4619      	mov	r1, r3
 8017620:	6878      	ldr	r0, [r7, #4]
 8017622:	f000 fa39 	bl	8017a98 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 8017626:	4603      	mov	r3, r0
  }
 8017628:	4618      	mov	r0, r3
 801762a:	3708      	adds	r7, #8
 801762c:	46bd      	mov	sp, r7
 801762e:	bd80      	pop	{r7, pc}

08017630 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8017630:	b580      	push	{r7, lr}
 8017632:	b082      	sub	sp, #8
 8017634:	af00      	add	r7, sp, #0
 8017636:	6078      	str	r0, [r7, #4]
 8017638:	460b      	mov	r3, r1
 801763a:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 801763c:	887b      	ldrh	r3, [r7, #2]
 801763e:	4619      	mov	r1, r3
 8017640:	6878      	ldr	r0, [r7, #4]
 8017642:	f000 fa49 	bl	8017ad8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>
 8017646:	4603      	mov	r3, r0
  }
 8017648:	4618      	mov	r0, r3
 801764a:	3708      	adds	r7, #8
 801764c:	46bd      	mov	sp, r7
 801764e:	bd80      	pop	{r7, pc}

08017650 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8017650:	b580      	push	{r7, lr}
 8017652:	b082      	sub	sp, #8
 8017654:	af00      	add	r7, sp, #0
 8017656:	6078      	str	r0, [r7, #4]
 8017658:	460b      	mov	r3, r1
 801765a:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 801765c:	887b      	ldrh	r3, [r7, #2]
 801765e:	4619      	mov	r1, r3
 8017660:	6878      	ldr	r0, [r7, #4]
 8017662:	f000 fa59 	bl	8017b18 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>
 8017666:	4603      	mov	r3, r0
  }
 8017668:	4618      	mov	r0, r3
 801766a:	3708      	adds	r7, #8
 801766c:	46bd      	mov	sp, r7
 801766e:	bd80      	pop	{r7, pc}

08017670 <_ZNK11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8017670:	b580      	push	{r7, lr}
 8017672:	b082      	sub	sp, #8
 8017674:	af00      	add	r7, sp, #0
 8017676:	6078      	str	r0, [r7, #4]
 8017678:	460b      	mov	r3, r1
 801767a:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 801767c:	887b      	ldrh	r3, [r7, #2]
 801767e:	4619      	mov	r1, r3
 8017680:	6878      	ldr	r0, [r7, #4]
 8017682:	f000 fa69 	bl	8017b58 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>
 8017686:	4603      	mov	r3, r0
  }
 8017688:	4618      	mov	r0, r3
 801768a:	3708      	adds	r7, #8
 801768c:	46bd      	mov	sp, r7
 801768e:	bd80      	pop	{r7, pc}

08017690 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8017690:	b580      	push	{r7, lr}
 8017692:	b082      	sub	sp, #8
 8017694:	af00      	add	r7, sp, #0
 8017696:	6078      	str	r0, [r7, #4]
 8017698:	460b      	mov	r3, r1
 801769a:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 801769c:	887b      	ldrh	r3, [r7, #2]
 801769e:	4619      	mov	r1, r3
 80176a0:	6878      	ldr	r0, [r7, #4]
 80176a2:	f000 fa79 	bl	8017b98 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
 80176a6:	4603      	mov	r3, r0
  }
 80176a8:	4618      	mov	r0, r3
 80176aa:	3708      	adds	r7, #8
 80176ac:	46bd      	mov	sp, r7
 80176ae:	bd80      	pop	{r7, pc}

080176b0 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 80176b0:	b580      	push	{r7, lr}
 80176b2:	b082      	sub	sp, #8
 80176b4:	af00      	add	r7, sp, #0
 80176b6:	6078      	str	r0, [r7, #4]
 80176b8:	460b      	mov	r3, r1
 80176ba:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 80176bc:	887b      	ldrh	r3, [r7, #2]
 80176be:	4619      	mov	r1, r3
 80176c0:	6878      	ldr	r0, [r7, #4]
 80176c2:	f000 fa89 	bl	8017bd8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
 80176c6:	4603      	mov	r3, r0
  }
 80176c8:	4618      	mov	r0, r3
 80176ca:	3708      	adds	r7, #8
 80176cc:	46bd      	mov	sp, r7
 80176ce:	bd80      	pop	{r7, pc}

080176d0 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 80176d0:	b580      	push	{r7, lr}
 80176d2:	b082      	sub	sp, #8
 80176d4:	af00      	add	r7, sp, #0
 80176d6:	6078      	str	r0, [r7, #4]
 80176d8:	460b      	mov	r3, r1
 80176da:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 80176dc:	887b      	ldrh	r3, [r7, #2]
 80176de:	4619      	mov	r1, r3
 80176e0:	6878      	ldr	r0, [r7, #4]
 80176e2:	f000 fa99 	bl	8017c18 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>
 80176e6:	4603      	mov	r3, r0
  }
 80176e8:	4618      	mov	r0, r3
 80176ea:	3708      	adds	r7, #8
 80176ec:	46bd      	mov	sp, r7
 80176ee:	bd80      	pop	{r7, pc}

080176f0 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 80176f0:	b580      	push	{r7, lr}
 80176f2:	b082      	sub	sp, #8
 80176f4:	af00      	add	r7, sp, #0
 80176f6:	6078      	str	r0, [r7, #4]
 80176f8:	460b      	mov	r3, r1
 80176fa:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 80176fc:	887b      	ldrh	r3, [r7, #2]
 80176fe:	4619      	mov	r1, r3
 8017700:	6878      	ldr	r0, [r7, #4]
 8017702:	f000 faa9 	bl	8017c58 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
 8017706:	4603      	mov	r3, r0
  }
 8017708:	4618      	mov	r0, r3
 801770a:	3708      	adds	r7, #8
 801770c:	46bd      	mov	sp, r7
 801770e:	bd80      	pop	{r7, pc}

08017710 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8017710:	b580      	push	{r7, lr}
 8017712:	b082      	sub	sp, #8
 8017714:	af00      	add	r7, sp, #0
 8017716:	6078      	str	r0, [r7, #4]
 8017718:	460b      	mov	r3, r1
 801771a:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 801771c:	887b      	ldrh	r3, [r7, #2]
 801771e:	4619      	mov	r1, r3
 8017720:	6878      	ldr	r0, [r7, #4]
 8017722:	f000 fab9 	bl	8017c98 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>
 8017726:	4603      	mov	r3, r0
  }
 8017728:	4618      	mov	r0, r3
 801772a:	3708      	adds	r7, #8
 801772c:	46bd      	mov	sp, r7
 801772e:	bd80      	pop	{r7, pc}

08017730 <_ZNK11flatbuffers6VectorIhE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8017730:	b580      	push	{r7, lr}
 8017732:	b082      	sub	sp, #8
 8017734:	af00      	add	r7, sp, #0
 8017736:	6078      	str	r0, [r7, #4]
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	681b      	ldr	r3, [r3, #0]
 801773c:	4618      	mov	r0, r3
 801773e:	f7ea f866 	bl	800180e <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8017742:	4603      	mov	r3, r0
 8017744:	4618      	mov	r0, r3
 8017746:	3708      	adds	r7, #8
 8017748:	46bd      	mov	sp, r7
 801774a:	bd80      	pop	{r7, pc}

0801774c <_ZNK11flatbuffers6VectorIfE4sizeEv>:
 801774c:	b580      	push	{r7, lr}
 801774e:	b082      	sub	sp, #8
 8017750:	af00      	add	r7, sp, #0
 8017752:	6078      	str	r0, [r7, #4]
 8017754:	687b      	ldr	r3, [r7, #4]
 8017756:	681b      	ldr	r3, [r3, #0]
 8017758:	4618      	mov	r0, r3
 801775a:	f7ea f858 	bl	800180e <_ZN11flatbuffers12EndianScalarImEET_S1_>
 801775e:	4603      	mov	r3, r0
 8017760:	4618      	mov	r0, r3
 8017762:	3708      	adds	r7, #8
 8017764:	46bd      	mov	sp, r7
 8017766:	bd80      	pop	{r7, pc}

08017768 <_ZNK11flatbuffers6VectorIfE3GetEm>:
  return_type Get(uoffset_t i) const {
 8017768:	b580      	push	{r7, lr}
 801776a:	b082      	sub	sp, #8
 801776c:	af00      	add	r7, sp, #0
 801776e:	6078      	str	r0, [r7, #4]
 8017770:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8017772:	6878      	ldr	r0, [r7, #4]
 8017774:	f7ff ffea 	bl	801774c <_ZNK11flatbuffers6VectorIfE4sizeEv>
 8017778:	4602      	mov	r2, r0
 801777a:	683b      	ldr	r3, [r7, #0]
 801777c:	4293      	cmp	r3, r2
 801777e:	d306      	bcc.n	801778e <_ZNK11flatbuffers6VectorIfE3GetEm+0x26>
 8017780:	4b0a      	ldr	r3, [pc, #40]	; (80177ac <_ZNK11flatbuffers6VectorIfE3GetEm+0x44>)
 8017782:	4a0b      	ldr	r2, [pc, #44]	; (80177b0 <_ZNK11flatbuffers6VectorIfE3GetEm+0x48>)
 8017784:	f240 1101 	movw	r1, #257	; 0x101
 8017788:	480a      	ldr	r0, [pc, #40]	; (80177b4 <_ZNK11flatbuffers6VectorIfE3GetEm+0x4c>)
 801778a:	f007 fb69 	bl	801ee60 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 801778e:	6878      	ldr	r0, [r7, #4]
 8017790:	f000 fac4 	bl	8017d1c <_ZNK11flatbuffers6VectorIfE4DataEv>
 8017794:	4603      	mov	r3, r0
 8017796:	6839      	ldr	r1, [r7, #0]
 8017798:	4618      	mov	r0, r3
 801779a:	f000 faa9 	bl	8017cf0 <_ZN11flatbuffers14IndirectHelperIfE4ReadEPKhm>
 801779e:	eef0 7a40 	vmov.f32	s15, s0
  }
 80177a2:	eeb0 0a67 	vmov.f32	s0, s15
 80177a6:	3708      	adds	r7, #8
 80177a8:	46bd      	mov	sp, r7
 80177aa:	bd80      	pop	{r7, pc}
 80177ac:	080236d8 	.word	0x080236d8
 80177b0:	08025ca0 	.word	0x08025ca0
 80177b4:	080236e4 	.word	0x080236e4

080177b8 <_ZNK11flatbuffers6VectorIxE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 80177b8:	b580      	push	{r7, lr}
 80177ba:	b082      	sub	sp, #8
 80177bc:	af00      	add	r7, sp, #0
 80177be:	6078      	str	r0, [r7, #4]
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	681b      	ldr	r3, [r3, #0]
 80177c4:	4618      	mov	r0, r3
 80177c6:	f7ea f822 	bl	800180e <_ZN11flatbuffers12EndianScalarImEET_S1_>
 80177ca:	4603      	mov	r3, r0
 80177cc:	4618      	mov	r0, r3
 80177ce:	3708      	adds	r7, #8
 80177d0:	46bd      	mov	sp, r7
 80177d2:	bd80      	pop	{r7, pc}

080177d4 <_ZNK11flatbuffers6VectorIxE3GetEm>:
  return_type Get(uoffset_t i) const {
 80177d4:	b590      	push	{r4, r7, lr}
 80177d6:	b083      	sub	sp, #12
 80177d8:	af00      	add	r7, sp, #0
 80177da:	6078      	str	r0, [r7, #4]
 80177dc:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 80177de:	6878      	ldr	r0, [r7, #4]
 80177e0:	f7ff ffea 	bl	80177b8 <_ZNK11flatbuffers6VectorIxE4sizeEv>
 80177e4:	4602      	mov	r2, r0
 80177e6:	683b      	ldr	r3, [r7, #0]
 80177e8:	4293      	cmp	r3, r2
 80177ea:	d306      	bcc.n	80177fa <_ZNK11flatbuffers6VectorIxE3GetEm+0x26>
 80177ec:	4b0a      	ldr	r3, [pc, #40]	; (8017818 <_ZNK11flatbuffers6VectorIxE3GetEm+0x44>)
 80177ee:	4a0b      	ldr	r2, [pc, #44]	; (801781c <_ZNK11flatbuffers6VectorIxE3GetEm+0x48>)
 80177f0:	f240 1101 	movw	r1, #257	; 0x101
 80177f4:	480a      	ldr	r0, [pc, #40]	; (8017820 <_ZNK11flatbuffers6VectorIxE3GetEm+0x4c>)
 80177f6:	f007 fb33 	bl	801ee60 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 80177fa:	6878      	ldr	r0, [r7, #4]
 80177fc:	f000 fab0 	bl	8017d60 <_ZNK11flatbuffers6VectorIxE4DataEv>
 8017800:	4603      	mov	r3, r0
 8017802:	6839      	ldr	r1, [r7, #0]
 8017804:	4618      	mov	r0, r3
 8017806:	f000 fa95 	bl	8017d34 <_ZN11flatbuffers14IndirectHelperIxE4ReadEPKhm>
 801780a:	4603      	mov	r3, r0
 801780c:	460c      	mov	r4, r1
  }
 801780e:	4618      	mov	r0, r3
 8017810:	4621      	mov	r1, r4
 8017812:	370c      	adds	r7, #12
 8017814:	46bd      	mov	sp, r7
 8017816:	bd90      	pop	{r4, r7, pc}
 8017818:	080236d8 	.word	0x080236d8
 801781c:	08025bc8 	.word	0x08025bc8
 8017820:	080236e4 	.word	0x080236e4

08017824 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8017824:	b580      	push	{r7, lr}
 8017826:	b082      	sub	sp, #8
 8017828:	af00      	add	r7, sp, #0
 801782a:	6078      	str	r0, [r7, #4]
 801782c:	687b      	ldr	r3, [r7, #4]
 801782e:	681b      	ldr	r3, [r3, #0]
 8017830:	4618      	mov	r0, r3
 8017832:	f7e9 ffec 	bl	800180e <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8017836:	4603      	mov	r3, r0
 8017838:	4618      	mov	r0, r3
 801783a:	3708      	adds	r7, #8
 801783c:	46bd      	mov	sp, r7
 801783e:	bd80      	pop	{r7, pc}

08017840 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8017840:	b580      	push	{r7, lr}
 8017842:	b082      	sub	sp, #8
 8017844:	af00      	add	r7, sp, #0
 8017846:	6078      	str	r0, [r7, #4]
 8017848:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 801784a:	6878      	ldr	r0, [r7, #4]
 801784c:	f7ff ffea 	bl	8017824 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 8017850:	4602      	mov	r2, r0
 8017852:	683b      	ldr	r3, [r7, #0]
 8017854:	4293      	cmp	r3, r2
 8017856:	d306      	bcc.n	8017866 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x26>
 8017858:	4b09      	ldr	r3, [pc, #36]	; (8017880 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x40>)
 801785a:	4a0a      	ldr	r2, [pc, #40]	; (8017884 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x44>)
 801785c:	f240 1101 	movw	r1, #257	; 0x101
 8017860:	4809      	ldr	r0, [pc, #36]	; (8017888 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x48>)
 8017862:	f007 fafd 	bl	801ee60 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8017866:	6878      	ldr	r0, [r7, #4]
 8017868:	f000 fa9a 	bl	8017da0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4DataEv>
 801786c:	4603      	mov	r3, r0
 801786e:	6839      	ldr	r1, [r7, #0]
 8017870:	4618      	mov	r0, r3
 8017872:	f000 fa81 	bl	8017d78 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6TensorEEEE4ReadEPKhm>
 8017876:	4603      	mov	r3, r0
  }
 8017878:	4618      	mov	r0, r3
 801787a:	3708      	adds	r7, #8
 801787c:	46bd      	mov	sp, r7
 801787e:	bd80      	pop	{r7, pc}
 8017880:	080236d8 	.word	0x080236d8
 8017884:	080258dc 	.word	0x080258dc
 8017888:	080236e4 	.word	0x080236e4

0801788c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 801788c:	b580      	push	{r7, lr}
 801788e:	b082      	sub	sp, #8
 8017890:	af00      	add	r7, sp, #0
 8017892:	6078      	str	r0, [r7, #4]
 8017894:	687b      	ldr	r3, [r7, #4]
 8017896:	681b      	ldr	r3, [r3, #0]
 8017898:	4618      	mov	r0, r3
 801789a:	f7e9 ffb8 	bl	800180e <_ZN11flatbuffers12EndianScalarImEET_S1_>
 801789e:	4603      	mov	r3, r0
 80178a0:	4618      	mov	r0, r3
 80178a2:	3708      	adds	r7, #8
 80178a4:	46bd      	mov	sp, r7
 80178a6:	bd80      	pop	{r7, pc}

080178a8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 80178a8:	b580      	push	{r7, lr}
 80178aa:	b082      	sub	sp, #8
 80178ac:	af00      	add	r7, sp, #0
 80178ae:	6078      	str	r0, [r7, #4]
 80178b0:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 80178b2:	6878      	ldr	r0, [r7, #4]
 80178b4:	f7ff ffea 	bl	801788c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 80178b8:	4602      	mov	r2, r0
 80178ba:	683b      	ldr	r3, [r7, #0]
 80178bc:	4293      	cmp	r3, r2
 80178be:	d306      	bcc.n	80178ce <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x26>
 80178c0:	4b09      	ldr	r3, [pc, #36]	; (80178e8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x40>)
 80178c2:	4a0a      	ldr	r2, [pc, #40]	; (80178ec <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x44>)
 80178c4:	f240 1101 	movw	r1, #257	; 0x101
 80178c8:	4809      	ldr	r0, [pc, #36]	; (80178f0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x48>)
 80178ca:	f007 fac9 	bl	801ee60 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 80178ce:	6878      	ldr	r0, [r7, #4]
 80178d0:	f000 fa86 	bl	8017de0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4DataEv>
 80178d4:	4603      	mov	r3, r0
 80178d6:	6839      	ldr	r1, [r7, #0]
 80178d8:	4618      	mov	r0, r3
 80178da:	f000 fa6d 	bl	8017db8 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8OperatorEEEE4ReadEPKhm>
 80178de:	4603      	mov	r3, r0
  }
 80178e0:	4618      	mov	r0, r3
 80178e2:	3708      	adds	r7, #8
 80178e4:	46bd      	mov	sp, r7
 80178e6:	bd80      	pop	{r7, pc}
 80178e8:	080236d8 	.word	0x080236d8
 80178ec:	080259d4 	.word	0x080259d4
 80178f0:	080236e4 	.word	0x080236e4

080178f4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 80178f4:	b580      	push	{r7, lr}
 80178f6:	b082      	sub	sp, #8
 80178f8:	af00      	add	r7, sp, #0
 80178fa:	6078      	str	r0, [r7, #4]
 80178fc:	687b      	ldr	r3, [r7, #4]
 80178fe:	681b      	ldr	r3, [r3, #0]
 8017900:	4618      	mov	r0, r3
 8017902:	f7e9 ff84 	bl	800180e <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8017906:	4603      	mov	r3, r0
 8017908:	4618      	mov	r0, r3
 801790a:	3708      	adds	r7, #8
 801790c:	46bd      	mov	sp, r7
 801790e:	bd80      	pop	{r7, pc}

08017910 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8017910:	b580      	push	{r7, lr}
 8017912:	b082      	sub	sp, #8
 8017914:	af00      	add	r7, sp, #0
 8017916:	6078      	str	r0, [r7, #4]
 8017918:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 801791a:	6878      	ldr	r0, [r7, #4]
 801791c:	f7ff ffea 	bl	80178f4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>
 8017920:	4602      	mov	r2, r0
 8017922:	683b      	ldr	r3, [r7, #0]
 8017924:	4293      	cmp	r3, r2
 8017926:	d306      	bcc.n	8017936 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x26>
 8017928:	4b09      	ldr	r3, [pc, #36]	; (8017950 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x40>)
 801792a:	4a0a      	ldr	r2, [pc, #40]	; (8017954 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x44>)
 801792c:	f240 1101 	movw	r1, #257	; 0x101
 8017930:	4809      	ldr	r0, [pc, #36]	; (8017958 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x48>)
 8017932:	f007 fa95 	bl	801ee60 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8017936:	6878      	ldr	r0, [r7, #4]
 8017938:	f000 fa72 	bl	8017e20 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4DataEv>
 801793c:	4603      	mov	r3, r0
 801793e:	6839      	ldr	r1, [r7, #0]
 8017940:	4618      	mov	r0, r3
 8017942:	f000 fa59 	bl	8017df8 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite12OperatorCodeEEEE4ReadEPKhm>
 8017946:	4603      	mov	r3, r0
  }
 8017948:	4618      	mov	r0, r3
 801794a:	3708      	adds	r7, #8
 801794c:	46bd      	mov	sp, r7
 801794e:	bd80      	pop	{r7, pc}
 8017950:	080236d8 	.word	0x080236d8
 8017954:	08025e64 	.word	0x08025e64
 8017958:	080236e4 	.word	0x080236e4

0801795c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 801795c:	b580      	push	{r7, lr}
 801795e:	b082      	sub	sp, #8
 8017960:	af00      	add	r7, sp, #0
 8017962:	6078      	str	r0, [r7, #4]
 8017964:	687b      	ldr	r3, [r7, #4]
 8017966:	681b      	ldr	r3, [r3, #0]
 8017968:	4618      	mov	r0, r3
 801796a:	f7e9 ff50 	bl	800180e <_ZN11flatbuffers12EndianScalarImEET_S1_>
 801796e:	4603      	mov	r3, r0
 8017970:	4618      	mov	r0, r3
 8017972:	3708      	adds	r7, #8
 8017974:	46bd      	mov	sp, r7
 8017976:	bd80      	pop	{r7, pc}

08017978 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8017978:	b580      	push	{r7, lr}
 801797a:	b082      	sub	sp, #8
 801797c:	af00      	add	r7, sp, #0
 801797e:	6078      	str	r0, [r7, #4]
 8017980:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8017982:	6878      	ldr	r0, [r7, #4]
 8017984:	f7ff ffea 	bl	801795c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8017988:	4602      	mov	r2, r0
 801798a:	683b      	ldr	r3, [r7, #0]
 801798c:	4293      	cmp	r3, r2
 801798e:	d306      	bcc.n	801799e <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x26>
 8017990:	4b09      	ldr	r3, [pc, #36]	; (80179b8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x40>)
 8017992:	4a0a      	ldr	r2, [pc, #40]	; (80179bc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x44>)
 8017994:	f240 1101 	movw	r1, #257	; 0x101
 8017998:	4809      	ldr	r0, [pc, #36]	; (80179c0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x48>)
 801799a:	f007 fa61 	bl	801ee60 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 801799e:	6878      	ldr	r0, [r7, #4]
 80179a0:	f000 fa5e 	bl	8017e60 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4DataEv>
 80179a4:	4603      	mov	r3, r0
 80179a6:	6839      	ldr	r1, [r7, #0]
 80179a8:	4618      	mov	r0, r3
 80179aa:	f000 fa45 	bl	8017e38 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8SubGraphEEEE4ReadEPKhm>
 80179ae:	4603      	mov	r3, r0
  }
 80179b0:	4618      	mov	r0, r3
 80179b2:	3708      	adds	r7, #8
 80179b4:	46bd      	mov	sp, r7
 80179b6:	bd80      	pop	{r7, pc}
 80179b8:	080236d8 	.word	0x080236d8
 80179bc:	08025d68 	.word	0x08025d68
 80179c0:	080236e4 	.word	0x080236e4

080179c4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 80179c4:	b580      	push	{r7, lr}
 80179c6:	b082      	sub	sp, #8
 80179c8:	af00      	add	r7, sp, #0
 80179ca:	6078      	str	r0, [r7, #4]
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	681b      	ldr	r3, [r3, #0]
 80179d0:	4618      	mov	r0, r3
 80179d2:	f7e9 ff1c 	bl	800180e <_ZN11flatbuffers12EndianScalarImEET_S1_>
 80179d6:	4603      	mov	r3, r0
 80179d8:	4618      	mov	r0, r3
 80179da:	3708      	adds	r7, #8
 80179dc:	46bd      	mov	sp, r7
 80179de:	bd80      	pop	{r7, pc}

080179e0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 80179e0:	b580      	push	{r7, lr}
 80179e2:	b082      	sub	sp, #8
 80179e4:	af00      	add	r7, sp, #0
 80179e6:	6078      	str	r0, [r7, #4]
 80179e8:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 80179ea:	6878      	ldr	r0, [r7, #4]
 80179ec:	f7ff ffea 	bl	80179c4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4sizeEv>
 80179f0:	4602      	mov	r2, r0
 80179f2:	683b      	ldr	r3, [r7, #0]
 80179f4:	4293      	cmp	r3, r2
 80179f6:	d306      	bcc.n	8017a06 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x26>
 80179f8:	4b09      	ldr	r3, [pc, #36]	; (8017a20 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x40>)
 80179fa:	4a0a      	ldr	r2, [pc, #40]	; (8017a24 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x44>)
 80179fc:	f240 1101 	movw	r1, #257	; 0x101
 8017a00:	4809      	ldr	r0, [pc, #36]	; (8017a28 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x48>)
 8017a02:	f007 fa2d 	bl	801ee60 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8017a06:	6878      	ldr	r0, [r7, #4]
 8017a08:	f000 fa4a 	bl	8017ea0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4DataEv>
 8017a0c:	4603      	mov	r3, r0
 8017a0e:	6839      	ldr	r1, [r7, #0]
 8017a10:	4618      	mov	r0, r3
 8017a12:	f000 fa31 	bl	8017e78 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6BufferEEEE4ReadEPKhm>
 8017a16:	4603      	mov	r3, r0
  }
 8017a18:	4618      	mov	r0, r3
 8017a1a:	3708      	adds	r7, #8
 8017a1c:	46bd      	mov	sp, r7
 8017a1e:	bd80      	pop	{r7, pc}
 8017a20:	080236d8 	.word	0x080236d8
 8017a24:	08025ad0 	.word	0x08025ad0
 8017a28:	080236e4 	.word	0x080236e4

08017a2c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>:
  return_type operator[](uoffset_t i) const { return Get(i); }
 8017a2c:	b580      	push	{r7, lr}
 8017a2e:	b082      	sub	sp, #8
 8017a30:	af00      	add	r7, sp, #0
 8017a32:	6078      	str	r0, [r7, #4]
 8017a34:	6039      	str	r1, [r7, #0]
 8017a36:	6839      	ldr	r1, [r7, #0]
 8017a38:	6878      	ldr	r0, [r7, #4]
 8017a3a:	f7ff ffd1 	bl	80179e0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm>
 8017a3e:	4603      	mov	r3, r0
 8017a40:	4618      	mov	r0, r3
 8017a42:	3708      	adds	r7, #8
 8017a44:	46bd      	mov	sp, r7
 8017a46:	bd80      	pop	{r7, pc}

08017a48 <_ZNK11flatbuffers6VectorIhE4dataEv>:
  const T *data() const { return reinterpret_cast<const T *>(Data()); }
 8017a48:	b580      	push	{r7, lr}
 8017a4a:	b082      	sub	sp, #8
 8017a4c:	af00      	add	r7, sp, #0
 8017a4e:	6078      	str	r0, [r7, #4]
 8017a50:	6878      	ldr	r0, [r7, #4]
 8017a52:	f000 f941 	bl	8017cd8 <_ZNK11flatbuffers6VectorIhE4DataEv>
 8017a56:	4603      	mov	r3, r0
 8017a58:	4618      	mov	r0, r3
 8017a5a:	3708      	adds	r7, #8
 8017a5c:	46bd      	mov	sp, r7
 8017a5e:	bd80      	pop	{r7, pc}

08017a60 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>:
  return_type operator[](uoffset_t i) const { return Get(i); }
 8017a60:	b580      	push	{r7, lr}
 8017a62:	b082      	sub	sp, #8
 8017a64:	af00      	add	r7, sp, #0
 8017a66:	6078      	str	r0, [r7, #4]
 8017a68:	6039      	str	r1, [r7, #0]
 8017a6a:	6839      	ldr	r1, [r7, #0]
 8017a6c:	6878      	ldr	r0, [r7, #4]
 8017a6e:	f7ff ff83 	bl	8017978 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8017a72:	4603      	mov	r3, r0
 8017a74:	4618      	mov	r0, r3
 8017a76:	3708      	adds	r7, #8
 8017a78:	46bd      	mov	sp, r7
 8017a7a:	bd80      	pop	{r7, pc}

08017a7c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEixEm>:
 8017a7c:	b580      	push	{r7, lr}
 8017a7e:	b082      	sub	sp, #8
 8017a80:	af00      	add	r7, sp, #0
 8017a82:	6078      	str	r0, [r7, #4]
 8017a84:	6039      	str	r1, [r7, #0]
 8017a86:	6839      	ldr	r1, [r7, #0]
 8017a88:	6878      	ldr	r0, [r7, #4]
 8017a8a:	f7ff ff41 	bl	8017910 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm>
 8017a8e:	4603      	mov	r3, r0
 8017a90:	4618      	mov	r0, r3
 8017a92:	3708      	adds	r7, #8
 8017a94:	46bd      	mov	sp, r7
 8017a96:	bd80      	pop	{r7, pc}

08017a98 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8017a98:	b580      	push	{r7, lr}
 8017a9a:	b084      	sub	sp, #16
 8017a9c:	af00      	add	r7, sp, #0
 8017a9e:	6078      	str	r0, [r7, #4]
 8017aa0:	460b      	mov	r3, r1
 8017aa2:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8017aa4:	887b      	ldrh	r3, [r7, #2]
 8017aa6:	4619      	mov	r1, r3
 8017aa8:	6878      	ldr	r0, [r7, #4]
 8017aaa:	f7e9 fb0b 	bl	80010c4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8017aae:	4603      	mov	r3, r0
 8017ab0:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8017ab2:	687a      	ldr	r2, [r7, #4]
 8017ab4:	89fb      	ldrh	r3, [r7, #14]
 8017ab6:	4413      	add	r3, r2
 8017ab8:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8017aba:	89fb      	ldrh	r3, [r7, #14]
 8017abc:	2b00      	cmp	r3, #0
 8017abe:	d006      	beq.n	8017ace <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t+0x36>
 8017ac0:	68b8      	ldr	r0, [r7, #8]
 8017ac2:	f7e9 febd 	bl	8001840 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8017ac6:	4602      	mov	r2, r0
 8017ac8:	68bb      	ldr	r3, [r7, #8]
 8017aca:	4413      	add	r3, r2
                        : nullptr;
 8017acc:	e000      	b.n	8017ad0 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8017ace:	2300      	movs	r3, #0
  }
 8017ad0:	4618      	mov	r0, r3
 8017ad2:	3710      	adds	r7, #16
 8017ad4:	46bd      	mov	sp, r7
 8017ad6:	bd80      	pop	{r7, pc}

08017ad8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8017ad8:	b580      	push	{r7, lr}
 8017ada:	b084      	sub	sp, #16
 8017adc:	af00      	add	r7, sp, #0
 8017ade:	6078      	str	r0, [r7, #4]
 8017ae0:	460b      	mov	r3, r1
 8017ae2:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8017ae4:	887b      	ldrh	r3, [r7, #2]
 8017ae6:	4619      	mov	r1, r3
 8017ae8:	6878      	ldr	r0, [r7, #4]
 8017aea:	f7e9 faeb 	bl	80010c4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8017aee:	4603      	mov	r3, r0
 8017af0:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8017af2:	687a      	ldr	r2, [r7, #4]
 8017af4:	89fb      	ldrh	r3, [r7, #14]
 8017af6:	4413      	add	r3, r2
 8017af8:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8017afa:	89fb      	ldrh	r3, [r7, #14]
 8017afc:	2b00      	cmp	r3, #0
 8017afe:	d006      	beq.n	8017b0e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t+0x36>
 8017b00:	68b8      	ldr	r0, [r7, #8]
 8017b02:	f7e9 fe9d 	bl	8001840 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8017b06:	4602      	mov	r2, r0
 8017b08:	68bb      	ldr	r3, [r7, #8]
 8017b0a:	4413      	add	r3, r2
                        : nullptr;
 8017b0c:	e000      	b.n	8017b10 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8017b0e:	2300      	movs	r3, #0
  }
 8017b10:	4618      	mov	r0, r3
 8017b12:	3710      	adds	r7, #16
 8017b14:	46bd      	mov	sp, r7
 8017b16:	bd80      	pop	{r7, pc}

08017b18 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8017b18:	b580      	push	{r7, lr}
 8017b1a:	b084      	sub	sp, #16
 8017b1c:	af00      	add	r7, sp, #0
 8017b1e:	6078      	str	r0, [r7, #4]
 8017b20:	460b      	mov	r3, r1
 8017b22:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8017b24:	887b      	ldrh	r3, [r7, #2]
 8017b26:	4619      	mov	r1, r3
 8017b28:	6878      	ldr	r0, [r7, #4]
 8017b2a:	f7e9 facb 	bl	80010c4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8017b2e:	4603      	mov	r3, r0
 8017b30:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8017b32:	687a      	ldr	r2, [r7, #4]
 8017b34:	89fb      	ldrh	r3, [r7, #14]
 8017b36:	4413      	add	r3, r2
 8017b38:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8017b3a:	89fb      	ldrh	r3, [r7, #14]
 8017b3c:	2b00      	cmp	r3, #0
 8017b3e:	d006      	beq.n	8017b4e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t+0x36>
 8017b40:	68b8      	ldr	r0, [r7, #8]
 8017b42:	f7e9 fe7d 	bl	8001840 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8017b46:	4602      	mov	r2, r0
 8017b48:	68bb      	ldr	r3, [r7, #8]
 8017b4a:	4413      	add	r3, r2
                        : nullptr;
 8017b4c:	e000      	b.n	8017b50 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8017b4e:	2300      	movs	r3, #0
  }
 8017b50:	4618      	mov	r0, r3
 8017b52:	3710      	adds	r7, #16
 8017b54:	46bd      	mov	sp, r7
 8017b56:	bd80      	pop	{r7, pc}

08017b58 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8017b58:	b580      	push	{r7, lr}
 8017b5a:	b084      	sub	sp, #16
 8017b5c:	af00      	add	r7, sp, #0
 8017b5e:	6078      	str	r0, [r7, #4]
 8017b60:	460b      	mov	r3, r1
 8017b62:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8017b64:	887b      	ldrh	r3, [r7, #2]
 8017b66:	4619      	mov	r1, r3
 8017b68:	6878      	ldr	r0, [r7, #4]
 8017b6a:	f7e9 faab 	bl	80010c4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8017b6e:	4603      	mov	r3, r0
 8017b70:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8017b72:	687a      	ldr	r2, [r7, #4]
 8017b74:	89fb      	ldrh	r3, [r7, #14]
 8017b76:	4413      	add	r3, r2
 8017b78:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8017b7a:	89fb      	ldrh	r3, [r7, #14]
 8017b7c:	2b00      	cmp	r3, #0
 8017b7e:	d006      	beq.n	8017b8e <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t+0x36>
 8017b80:	68b8      	ldr	r0, [r7, #8]
 8017b82:	f7e9 fe5d 	bl	8001840 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8017b86:	4602      	mov	r2, r0
 8017b88:	68bb      	ldr	r3, [r7, #8]
 8017b8a:	4413      	add	r3, r2
                        : nullptr;
 8017b8c:	e000      	b.n	8017b90 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8017b8e:	2300      	movs	r3, #0
  }
 8017b90:	4618      	mov	r0, r3
 8017b92:	3710      	adds	r7, #16
 8017b94:	46bd      	mov	sp, r7
 8017b96:	bd80      	pop	{r7, pc}

08017b98 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8017b98:	b580      	push	{r7, lr}
 8017b9a:	b084      	sub	sp, #16
 8017b9c:	af00      	add	r7, sp, #0
 8017b9e:	6078      	str	r0, [r7, #4]
 8017ba0:	460b      	mov	r3, r1
 8017ba2:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8017ba4:	887b      	ldrh	r3, [r7, #2]
 8017ba6:	4619      	mov	r1, r3
 8017ba8:	6878      	ldr	r0, [r7, #4]
 8017baa:	f7e9 fa8b 	bl	80010c4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8017bae:	4603      	mov	r3, r0
 8017bb0:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8017bb2:	687a      	ldr	r2, [r7, #4]
 8017bb4:	89fb      	ldrh	r3, [r7, #14]
 8017bb6:	4413      	add	r3, r2
 8017bb8:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8017bba:	89fb      	ldrh	r3, [r7, #14]
 8017bbc:	2b00      	cmp	r3, #0
 8017bbe:	d006      	beq.n	8017bce <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t+0x36>
 8017bc0:	68b8      	ldr	r0, [r7, #8]
 8017bc2:	f7e9 fe3d 	bl	8001840 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8017bc6:	4602      	mov	r2, r0
 8017bc8:	68bb      	ldr	r3, [r7, #8]
 8017bca:	4413      	add	r3, r2
                        : nullptr;
 8017bcc:	e000      	b.n	8017bd0 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8017bce:	2300      	movs	r3, #0
  }
 8017bd0:	4618      	mov	r0, r3
 8017bd2:	3710      	adds	r7, #16
 8017bd4:	46bd      	mov	sp, r7
 8017bd6:	bd80      	pop	{r7, pc}

08017bd8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8017bd8:	b580      	push	{r7, lr}
 8017bda:	b084      	sub	sp, #16
 8017bdc:	af00      	add	r7, sp, #0
 8017bde:	6078      	str	r0, [r7, #4]
 8017be0:	460b      	mov	r3, r1
 8017be2:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8017be4:	887b      	ldrh	r3, [r7, #2]
 8017be6:	4619      	mov	r1, r3
 8017be8:	6878      	ldr	r0, [r7, #4]
 8017bea:	f7e9 fa6b 	bl	80010c4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8017bee:	4603      	mov	r3, r0
 8017bf0:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8017bf2:	687a      	ldr	r2, [r7, #4]
 8017bf4:	89fb      	ldrh	r3, [r7, #14]
 8017bf6:	4413      	add	r3, r2
 8017bf8:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8017bfa:	89fb      	ldrh	r3, [r7, #14]
 8017bfc:	2b00      	cmp	r3, #0
 8017bfe:	d006      	beq.n	8017c0e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t+0x36>
 8017c00:	68b8      	ldr	r0, [r7, #8]
 8017c02:	f7e9 fe1d 	bl	8001840 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8017c06:	4602      	mov	r2, r0
 8017c08:	68bb      	ldr	r3, [r7, #8]
 8017c0a:	4413      	add	r3, r2
                        : nullptr;
 8017c0c:	e000      	b.n	8017c10 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8017c0e:	2300      	movs	r3, #0
  }
 8017c10:	4618      	mov	r0, r3
 8017c12:	3710      	adds	r7, #16
 8017c14:	46bd      	mov	sp, r7
 8017c16:	bd80      	pop	{r7, pc}

08017c18 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8017c18:	b580      	push	{r7, lr}
 8017c1a:	b084      	sub	sp, #16
 8017c1c:	af00      	add	r7, sp, #0
 8017c1e:	6078      	str	r0, [r7, #4]
 8017c20:	460b      	mov	r3, r1
 8017c22:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8017c24:	887b      	ldrh	r3, [r7, #2]
 8017c26:	4619      	mov	r1, r3
 8017c28:	6878      	ldr	r0, [r7, #4]
 8017c2a:	f7e9 fa4b 	bl	80010c4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8017c2e:	4603      	mov	r3, r0
 8017c30:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8017c32:	687a      	ldr	r2, [r7, #4]
 8017c34:	89fb      	ldrh	r3, [r7, #14]
 8017c36:	4413      	add	r3, r2
 8017c38:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8017c3a:	89fb      	ldrh	r3, [r7, #14]
 8017c3c:	2b00      	cmp	r3, #0
 8017c3e:	d006      	beq.n	8017c4e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t+0x36>
 8017c40:	68b8      	ldr	r0, [r7, #8]
 8017c42:	f7e9 fdfd 	bl	8001840 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8017c46:	4602      	mov	r2, r0
 8017c48:	68bb      	ldr	r3, [r7, #8]
 8017c4a:	4413      	add	r3, r2
                        : nullptr;
 8017c4c:	e000      	b.n	8017c50 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8017c4e:	2300      	movs	r3, #0
  }
 8017c50:	4618      	mov	r0, r3
 8017c52:	3710      	adds	r7, #16
 8017c54:	46bd      	mov	sp, r7
 8017c56:	bd80      	pop	{r7, pc}

08017c58 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8017c58:	b580      	push	{r7, lr}
 8017c5a:	b084      	sub	sp, #16
 8017c5c:	af00      	add	r7, sp, #0
 8017c5e:	6078      	str	r0, [r7, #4]
 8017c60:	460b      	mov	r3, r1
 8017c62:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8017c64:	887b      	ldrh	r3, [r7, #2]
 8017c66:	4619      	mov	r1, r3
 8017c68:	6878      	ldr	r0, [r7, #4]
 8017c6a:	f7e9 fa2b 	bl	80010c4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8017c6e:	4603      	mov	r3, r0
 8017c70:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8017c72:	687a      	ldr	r2, [r7, #4]
 8017c74:	89fb      	ldrh	r3, [r7, #14]
 8017c76:	4413      	add	r3, r2
 8017c78:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8017c7a:	89fb      	ldrh	r3, [r7, #14]
 8017c7c:	2b00      	cmp	r3, #0
 8017c7e:	d006      	beq.n	8017c8e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t+0x36>
 8017c80:	68b8      	ldr	r0, [r7, #8]
 8017c82:	f7e9 fddd 	bl	8001840 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8017c86:	4602      	mov	r2, r0
 8017c88:	68bb      	ldr	r3, [r7, #8]
 8017c8a:	4413      	add	r3, r2
                        : nullptr;
 8017c8c:	e000      	b.n	8017c90 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8017c8e:	2300      	movs	r3, #0
  }
 8017c90:	4618      	mov	r0, r3
 8017c92:	3710      	adds	r7, #16
 8017c94:	46bd      	mov	sp, r7
 8017c96:	bd80      	pop	{r7, pc}

08017c98 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8017c98:	b580      	push	{r7, lr}
 8017c9a:	b084      	sub	sp, #16
 8017c9c:	af00      	add	r7, sp, #0
 8017c9e:	6078      	str	r0, [r7, #4]
 8017ca0:	460b      	mov	r3, r1
 8017ca2:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8017ca4:	887b      	ldrh	r3, [r7, #2]
 8017ca6:	4619      	mov	r1, r3
 8017ca8:	6878      	ldr	r0, [r7, #4]
 8017caa:	f7e9 fa0b 	bl	80010c4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8017cae:	4603      	mov	r3, r0
 8017cb0:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8017cb2:	687a      	ldr	r2, [r7, #4]
 8017cb4:	89fb      	ldrh	r3, [r7, #14]
 8017cb6:	4413      	add	r3, r2
 8017cb8:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8017cba:	89fb      	ldrh	r3, [r7, #14]
 8017cbc:	2b00      	cmp	r3, #0
 8017cbe:	d006      	beq.n	8017cce <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t+0x36>
 8017cc0:	68b8      	ldr	r0, [r7, #8]
 8017cc2:	f7e9 fdbd 	bl	8001840 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8017cc6:	4602      	mov	r2, r0
 8017cc8:	68bb      	ldr	r3, [r7, #8]
 8017cca:	4413      	add	r3, r2
                        : nullptr;
 8017ccc:	e000      	b.n	8017cd0 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8017cce:	2300      	movs	r3, #0
  }
 8017cd0:	4618      	mov	r0, r3
 8017cd2:	3710      	adds	r7, #16
 8017cd4:	46bd      	mov	sp, r7
 8017cd6:	bd80      	pop	{r7, pc}

08017cd8 <_ZNK11flatbuffers6VectorIhE4DataEv>:
  const uint8_t *Data() const {
 8017cd8:	b480      	push	{r7}
 8017cda:	b083      	sub	sp, #12
 8017cdc:	af00      	add	r7, sp, #0
 8017cde:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8017ce0:	687b      	ldr	r3, [r7, #4]
 8017ce2:	3304      	adds	r3, #4
  }
 8017ce4:	4618      	mov	r0, r3
 8017ce6:	370c      	adds	r7, #12
 8017ce8:	46bd      	mov	sp, r7
 8017cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cee:	4770      	bx	lr

08017cf0 <_ZN11flatbuffers14IndirectHelperIfE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8017cf0:	b580      	push	{r7, lr}
 8017cf2:	b082      	sub	sp, #8
 8017cf4:	af00      	add	r7, sp, #0
 8017cf6:	6078      	str	r0, [r7, #4]
 8017cf8:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 8017cfa:	683b      	ldr	r3, [r7, #0]
 8017cfc:	009b      	lsls	r3, r3, #2
 8017cfe:	687a      	ldr	r2, [r7, #4]
 8017d00:	4413      	add	r3, r2
 8017d02:	edd3 7a00 	vldr	s15, [r3]
 8017d06:	eeb0 0a67 	vmov.f32	s0, s15
 8017d0a:	f7f7 fdf2 	bl	800f8f2 <_ZN11flatbuffers12EndianScalarIfEET_S1_>
 8017d0e:	eef0 7a40 	vmov.f32	s15, s0
  }
 8017d12:	eeb0 0a67 	vmov.f32	s0, s15
 8017d16:	3708      	adds	r7, #8
 8017d18:	46bd      	mov	sp, r7
 8017d1a:	bd80      	pop	{r7, pc}

08017d1c <_ZNK11flatbuffers6VectorIfE4DataEv>:
  const uint8_t *Data() const {
 8017d1c:	b480      	push	{r7}
 8017d1e:	b083      	sub	sp, #12
 8017d20:	af00      	add	r7, sp, #0
 8017d22:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	3304      	adds	r3, #4
  }
 8017d28:	4618      	mov	r0, r3
 8017d2a:	370c      	adds	r7, #12
 8017d2c:	46bd      	mov	sp, r7
 8017d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d32:	4770      	bx	lr

08017d34 <_ZN11flatbuffers14IndirectHelperIxE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8017d34:	b590      	push	{r4, r7, lr}
 8017d36:	b083      	sub	sp, #12
 8017d38:	af00      	add	r7, sp, #0
 8017d3a:	6078      	str	r0, [r7, #4]
 8017d3c:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 8017d3e:	683b      	ldr	r3, [r7, #0]
 8017d40:	00db      	lsls	r3, r3, #3
 8017d42:	687a      	ldr	r2, [r7, #4]
 8017d44:	4413      	add	r3, r2
 8017d46:	e9d3 3400 	ldrd	r3, r4, [r3]
 8017d4a:	4618      	mov	r0, r3
 8017d4c:	4621      	mov	r1, r4
 8017d4e:	f000 f8b3 	bl	8017eb8 <_ZN11flatbuffers12EndianScalarIxEET_S1_>
 8017d52:	4603      	mov	r3, r0
 8017d54:	460c      	mov	r4, r1
  }
 8017d56:	4618      	mov	r0, r3
 8017d58:	4621      	mov	r1, r4
 8017d5a:	370c      	adds	r7, #12
 8017d5c:	46bd      	mov	sp, r7
 8017d5e:	bd90      	pop	{r4, r7, pc}

08017d60 <_ZNK11flatbuffers6VectorIxE4DataEv>:
  const uint8_t *Data() const {
 8017d60:	b480      	push	{r7}
 8017d62:	b083      	sub	sp, #12
 8017d64:	af00      	add	r7, sp, #0
 8017d66:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8017d68:	687b      	ldr	r3, [r7, #4]
 8017d6a:	3304      	adds	r3, #4
  }
 8017d6c:	4618      	mov	r0, r3
 8017d6e:	370c      	adds	r7, #12
 8017d70:	46bd      	mov	sp, r7
 8017d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d76:	4770      	bx	lr

08017d78 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6TensorEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8017d78:	b580      	push	{r7, lr}
 8017d7a:	b082      	sub	sp, #8
 8017d7c:	af00      	add	r7, sp, #0
 8017d7e:	6078      	str	r0, [r7, #4]
 8017d80:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 8017d82:	683b      	ldr	r3, [r7, #0]
 8017d84:	009b      	lsls	r3, r3, #2
 8017d86:	687a      	ldr	r2, [r7, #4]
 8017d88:	4413      	add	r3, r2
 8017d8a:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8017d8c:	6878      	ldr	r0, [r7, #4]
 8017d8e:	f7e9 fd57 	bl	8001840 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8017d92:	4602      	mov	r2, r0
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	4413      	add	r3, r2
  }
 8017d98:	4618      	mov	r0, r3
 8017d9a:	3708      	adds	r7, #8
 8017d9c:	46bd      	mov	sp, r7
 8017d9e:	bd80      	pop	{r7, pc}

08017da0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4DataEv>:
  const uint8_t *Data() const {
 8017da0:	b480      	push	{r7}
 8017da2:	b083      	sub	sp, #12
 8017da4:	af00      	add	r7, sp, #0
 8017da6:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8017da8:	687b      	ldr	r3, [r7, #4]
 8017daa:	3304      	adds	r3, #4
  }
 8017dac:	4618      	mov	r0, r3
 8017dae:	370c      	adds	r7, #12
 8017db0:	46bd      	mov	sp, r7
 8017db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017db6:	4770      	bx	lr

08017db8 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8OperatorEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8017db8:	b580      	push	{r7, lr}
 8017dba:	b082      	sub	sp, #8
 8017dbc:	af00      	add	r7, sp, #0
 8017dbe:	6078      	str	r0, [r7, #4]
 8017dc0:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 8017dc2:	683b      	ldr	r3, [r7, #0]
 8017dc4:	009b      	lsls	r3, r3, #2
 8017dc6:	687a      	ldr	r2, [r7, #4]
 8017dc8:	4413      	add	r3, r2
 8017dca:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8017dcc:	6878      	ldr	r0, [r7, #4]
 8017dce:	f7e9 fd37 	bl	8001840 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8017dd2:	4602      	mov	r2, r0
 8017dd4:	687b      	ldr	r3, [r7, #4]
 8017dd6:	4413      	add	r3, r2
  }
 8017dd8:	4618      	mov	r0, r3
 8017dda:	3708      	adds	r7, #8
 8017ddc:	46bd      	mov	sp, r7
 8017dde:	bd80      	pop	{r7, pc}

08017de0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4DataEv>:
  const uint8_t *Data() const {
 8017de0:	b480      	push	{r7}
 8017de2:	b083      	sub	sp, #12
 8017de4:	af00      	add	r7, sp, #0
 8017de6:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8017de8:	687b      	ldr	r3, [r7, #4]
 8017dea:	3304      	adds	r3, #4
  }
 8017dec:	4618      	mov	r0, r3
 8017dee:	370c      	adds	r7, #12
 8017df0:	46bd      	mov	sp, r7
 8017df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017df6:	4770      	bx	lr

08017df8 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite12OperatorCodeEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8017df8:	b580      	push	{r7, lr}
 8017dfa:	b082      	sub	sp, #8
 8017dfc:	af00      	add	r7, sp, #0
 8017dfe:	6078      	str	r0, [r7, #4]
 8017e00:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 8017e02:	683b      	ldr	r3, [r7, #0]
 8017e04:	009b      	lsls	r3, r3, #2
 8017e06:	687a      	ldr	r2, [r7, #4]
 8017e08:	4413      	add	r3, r2
 8017e0a:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8017e0c:	6878      	ldr	r0, [r7, #4]
 8017e0e:	f7e9 fd17 	bl	8001840 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8017e12:	4602      	mov	r2, r0
 8017e14:	687b      	ldr	r3, [r7, #4]
 8017e16:	4413      	add	r3, r2
  }
 8017e18:	4618      	mov	r0, r3
 8017e1a:	3708      	adds	r7, #8
 8017e1c:	46bd      	mov	sp, r7
 8017e1e:	bd80      	pop	{r7, pc}

08017e20 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4DataEv>:
  const uint8_t *Data() const {
 8017e20:	b480      	push	{r7}
 8017e22:	b083      	sub	sp, #12
 8017e24:	af00      	add	r7, sp, #0
 8017e26:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	3304      	adds	r3, #4
  }
 8017e2c:	4618      	mov	r0, r3
 8017e2e:	370c      	adds	r7, #12
 8017e30:	46bd      	mov	sp, r7
 8017e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e36:	4770      	bx	lr

08017e38 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8SubGraphEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8017e38:	b580      	push	{r7, lr}
 8017e3a:	b082      	sub	sp, #8
 8017e3c:	af00      	add	r7, sp, #0
 8017e3e:	6078      	str	r0, [r7, #4]
 8017e40:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 8017e42:	683b      	ldr	r3, [r7, #0]
 8017e44:	009b      	lsls	r3, r3, #2
 8017e46:	687a      	ldr	r2, [r7, #4]
 8017e48:	4413      	add	r3, r2
 8017e4a:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8017e4c:	6878      	ldr	r0, [r7, #4]
 8017e4e:	f7e9 fcf7 	bl	8001840 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8017e52:	4602      	mov	r2, r0
 8017e54:	687b      	ldr	r3, [r7, #4]
 8017e56:	4413      	add	r3, r2
  }
 8017e58:	4618      	mov	r0, r3
 8017e5a:	3708      	adds	r7, #8
 8017e5c:	46bd      	mov	sp, r7
 8017e5e:	bd80      	pop	{r7, pc}

08017e60 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4DataEv>:
  const uint8_t *Data() const {
 8017e60:	b480      	push	{r7}
 8017e62:	b083      	sub	sp, #12
 8017e64:	af00      	add	r7, sp, #0
 8017e66:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8017e68:	687b      	ldr	r3, [r7, #4]
 8017e6a:	3304      	adds	r3, #4
  }
 8017e6c:	4618      	mov	r0, r3
 8017e6e:	370c      	adds	r7, #12
 8017e70:	46bd      	mov	sp, r7
 8017e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e76:	4770      	bx	lr

08017e78 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6BufferEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8017e78:	b580      	push	{r7, lr}
 8017e7a:	b082      	sub	sp, #8
 8017e7c:	af00      	add	r7, sp, #0
 8017e7e:	6078      	str	r0, [r7, #4]
 8017e80:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 8017e82:	683b      	ldr	r3, [r7, #0]
 8017e84:	009b      	lsls	r3, r3, #2
 8017e86:	687a      	ldr	r2, [r7, #4]
 8017e88:	4413      	add	r3, r2
 8017e8a:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8017e8c:	6878      	ldr	r0, [r7, #4]
 8017e8e:	f7e9 fcd7 	bl	8001840 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8017e92:	4602      	mov	r2, r0
 8017e94:	687b      	ldr	r3, [r7, #4]
 8017e96:	4413      	add	r3, r2
  }
 8017e98:	4618      	mov	r0, r3
 8017e9a:	3708      	adds	r7, #8
 8017e9c:	46bd      	mov	sp, r7
 8017e9e:	bd80      	pop	{r7, pc}

08017ea0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4DataEv>:
  const uint8_t *Data() const {
 8017ea0:	b480      	push	{r7}
 8017ea2:	b083      	sub	sp, #12
 8017ea4:	af00      	add	r7, sp, #0
 8017ea6:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8017ea8:	687b      	ldr	r3, [r7, #4]
 8017eaa:	3304      	adds	r3, #4
  }
 8017eac:	4618      	mov	r0, r3
 8017eae:	370c      	adds	r7, #12
 8017eb0:	46bd      	mov	sp, r7
 8017eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eb6:	4770      	bx	lr

08017eb8 <_ZN11flatbuffers12EndianScalarIxEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8017eb8:	b490      	push	{r4, r7}
 8017eba:	b082      	sub	sp, #8
 8017ebc:	af00      	add	r7, sp, #0
 8017ebe:	e9c7 0100 	strd	r0, r1, [r7]
    return t;
 8017ec2:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8017ec6:	4618      	mov	r0, r3
 8017ec8:	4621      	mov	r1, r4
 8017eca:	3708      	adds	r7, #8
 8017ecc:	46bd      	mov	sp, r7
 8017ece:	bc90      	pop	{r4, r7}
 8017ed0:	4770      	bx	lr
	...

08017ed4 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
 8017ed4:	b580      	push	{r7, lr}
 8017ed6:	b082      	sub	sp, #8
 8017ed8:	af00      	add	r7, sp, #0
 8017eda:	6078      	str	r0, [r7, #4]
 8017edc:	4a05      	ldr	r2, [pc, #20]	; (8017ef4 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev+0x20>)
 8017ede:	687b      	ldr	r3, [r7, #4]
 8017ee0:	601a      	str	r2, [r3, #0]
 8017ee2:	687b      	ldr	r3, [r7, #4]
 8017ee4:	4618      	mov	r0, r3
 8017ee6:	f7fe f9c7 	bl	8016278 <_ZN6tflite20BuiltinDataAllocatorD1Ev>
 8017eea:	687b      	ldr	r3, [r7, #4]
 8017eec:	4618      	mov	r0, r3
 8017eee:	3708      	adds	r7, #8
 8017ef0:	46bd      	mov	sp, r7
 8017ef2:	bd80      	pop	{r7, pc}
 8017ef4:	080258b4 	.word	0x080258b4

08017ef8 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev>:
 8017ef8:	b580      	push	{r7, lr}
 8017efa:	b082      	sub	sp, #8
 8017efc:	af00      	add	r7, sp, #0
 8017efe:	6078      	str	r0, [r7, #4]
 8017f00:	6878      	ldr	r0, [r7, #4]
 8017f02:	f7ff ffe7 	bl	8017ed4 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>
 8017f06:	2108      	movs	r1, #8
 8017f08:	6878      	ldr	r0, [r7, #4]
 8017f0a:	f006 fd18 	bl	801e93e <_ZdlPvj>
 8017f0e:	687b      	ldr	r3, [r7, #4]
 8017f10:	4618      	mov	r0, r3
 8017f12:	3708      	adds	r7, #8
 8017f14:	46bd      	mov	sp, r7
 8017f16:	bd80      	pop	{r7, pc}

08017f18 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list>:
#include "tensorflow/lite/micro/micro_string.h"
#endif

namespace tflite {

int MicroErrorReporter::Report(const char* format, va_list args) {
 8017f18:	b580      	push	{r7, lr}
 8017f1a:	b0c4      	sub	sp, #272	; 0x110
 8017f1c:	af00      	add	r7, sp, #0
 8017f1e:	f107 030c 	add.w	r3, r7, #12
 8017f22:	6018      	str	r0, [r3, #0]
 8017f24:	f107 0308 	add.w	r3, r7, #8
 8017f28:	6019      	str	r1, [r3, #0]
 8017f2a:	1d3b      	adds	r3, r7, #4
 8017f2c:	601a      	str	r2, [r3, #0]
  // Only pulling in the implementation of this function for builds where we
  // expect to make use of it to be extra cautious about not increasing the code
  // size.
  static constexpr int kMaxLogLen = 256;
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
 8017f2e:	1d3b      	adds	r3, r7, #4
 8017f30:	f107 0208 	add.w	r2, r7, #8
 8017f34:	f107 0010 	add.w	r0, r7, #16
 8017f38:	681b      	ldr	r3, [r3, #0]
 8017f3a:	6812      	ldr	r2, [r2, #0]
 8017f3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8017f40:	f000 fd2e 	bl	80189a0 <MicroVsnprintf>
  DebugLog(log_buffer);
 8017f44:	f107 0310 	add.w	r3, r7, #16
 8017f48:	4618      	mov	r0, r3
 8017f4a:	f7fd ff49 	bl	8015de0 <DebugLog>
  DebugLog("\r\n");
 8017f4e:	4804      	ldr	r0, [pc, #16]	; (8017f60 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x48>)
 8017f50:	f7fd ff46 	bl	8015de0 <DebugLog>
#endif
  return 0;
 8017f54:	2300      	movs	r3, #0
}
 8017f56:	4618      	mov	r0, r3
 8017f58:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8017f5c:	46bd      	mov	sp, r7
 8017f5e:	bd80      	pop	{r7, pc}
 8017f60:	08023770 	.word	0x08023770

08017f64 <_ZN6tflite8internal13ContextHelperC1EPNS_13ErrorReporterEPNS_14MicroAllocatorE>:
// A helper class to encapsulate the implementation of APIs in Context.
// context->impl_ points to an instance of this class.
// Check tensorflow/lite/c/common.h for detailed descriptions.
class ContextHelper {
 public:
  explicit ContextHelper(ErrorReporter* error_reporter,
 8017f64:	b480      	push	{r7}
 8017f66:	b085      	sub	sp, #20
 8017f68:	af00      	add	r7, sp, #0
 8017f6a:	60f8      	str	r0, [r7, #12]
 8017f6c:	60b9      	str	r1, [r7, #8]
 8017f6e:	607a      	str	r2, [r7, #4]
                         MicroAllocator* allocator)
      : allocator_(allocator), error_reporter_(error_reporter) {}
 8017f70:	68fb      	ldr	r3, [r7, #12]
 8017f72:	687a      	ldr	r2, [r7, #4]
 8017f74:	601a      	str	r2, [r3, #0]
 8017f76:	68fb      	ldr	r3, [r7, #12]
 8017f78:	68ba      	ldr	r2, [r7, #8]
 8017f7a:	605a      	str	r2, [r3, #4]
 8017f7c:	68fb      	ldr	r3, [r7, #12]
 8017f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8017f82:	609a      	str	r2, [r3, #8]
 8017f84:	68fb      	ldr	r3, [r7, #12]
 8017f86:	4618      	mov	r0, r3
 8017f88:	3714      	adds	r7, #20
 8017f8a:	46bd      	mov	sp, r7
 8017f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f90:	4770      	bx	lr

08017f92 <_ZN6tflite8internal13ContextHelper12SetNodeIndexEi>:
  static void* GetScratchBuffer(TfLiteContext* ctx, int buffer_idx);

  static void ReportOpError(struct TfLiteContext* context, const char* format,
                            ...);

  void SetNodeIndex(int idx) { current_node_idx_ = idx; }
 8017f92:	b480      	push	{r7}
 8017f94:	b083      	sub	sp, #12
 8017f96:	af00      	add	r7, sp, #0
 8017f98:	6078      	str	r0, [r7, #4]
 8017f9a:	6039      	str	r1, [r7, #0]
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	683a      	ldr	r2, [r7, #0]
 8017fa0:	609a      	str	r2, [r3, #8]
 8017fa2:	bf00      	nop
 8017fa4:	370c      	adds	r7, #12
 8017fa6:	46bd      	mov	sp, r7
 8017fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fac:	4770      	bx	lr

08017fae <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>:
    }
    return nullptr;
  }

  TfLiteTensor* input(size_t index);
  size_t inputs_size() const { return subgraph_->inputs()->Length(); }
 8017fae:	b580      	push	{r7, lr}
 8017fb0:	b082      	sub	sp, #8
 8017fb2:	af00      	add	r7, sp, #0
 8017fb4:	6078      	str	r0, [r7, #4]
 8017fb6:	687b      	ldr	r3, [r7, #4]
 8017fb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017fbc:	4618      	mov	r0, r3
 8017fbe:	f7fe f8f8 	bl	80161b2 <_ZNK6tflite8SubGraph6inputsEv>
 8017fc2:	4603      	mov	r3, r0
 8017fc4:	4618      	mov	r0, r3
 8017fc6:	f7fe f837 	bl	8016038 <_ZNK11flatbuffers6VectorIlE6LengthEv>
 8017fca:	4603      	mov	r3, r0
 8017fcc:	4618      	mov	r0, r3
 8017fce:	3708      	adds	r7, #8
 8017fd0:	46bd      	mov	sp, r7
 8017fd2:	bd80      	pop	{r7, pc}

08017fd4 <_ZNK6tflite16MicroInterpreter6inputsEv>:
  const flatbuffers::Vector<int32_t>& inputs() const {
 8017fd4:	b580      	push	{r7, lr}
 8017fd6:	b082      	sub	sp, #8
 8017fd8:	af00      	add	r7, sp, #0
 8017fda:	6078      	str	r0, [r7, #4]
    return *subgraph_->inputs();
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017fe2:	4618      	mov	r0, r3
 8017fe4:	f7fe f8e5 	bl	80161b2 <_ZNK6tflite8SubGraph6inputsEv>
 8017fe8:	4603      	mov	r3, r0
  }
 8017fea:	4618      	mov	r0, r3
 8017fec:	3708      	adds	r7, #8
 8017fee:	46bd      	mov	sp, r7
 8017ff0:	bd80      	pop	{r7, pc}

08017ff2 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>:
    }
    return nullptr;
  }

  TfLiteTensor* output(size_t index);
  size_t outputs_size() const { return subgraph_->outputs()->Length(); }
 8017ff2:	b580      	push	{r7, lr}
 8017ff4:	b082      	sub	sp, #8
 8017ff6:	af00      	add	r7, sp, #0
 8017ff8:	6078      	str	r0, [r7, #4]
 8017ffa:	687b      	ldr	r3, [r7, #4]
 8017ffc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018000:	4618      	mov	r0, r3
 8018002:	f7fe f8e4 	bl	80161ce <_ZNK6tflite8SubGraph7outputsEv>
 8018006:	4603      	mov	r3, r0
 8018008:	4618      	mov	r0, r3
 801800a:	f7fe f815 	bl	8016038 <_ZNK11flatbuffers6VectorIlE6LengthEv>
 801800e:	4603      	mov	r3, r0
 8018010:	4618      	mov	r0, r3
 8018012:	3708      	adds	r7, #8
 8018014:	46bd      	mov	sp, r7
 8018016:	bd80      	pop	{r7, pc}

08018018 <_ZNK6tflite16MicroInterpreter7outputsEv>:
  const flatbuffers::Vector<int32_t>& outputs() const {
 8018018:	b580      	push	{r7, lr}
 801801a:	b082      	sub	sp, #8
 801801c:	af00      	add	r7, sp, #0
 801801e:	6078      	str	r0, [r7, #4]
    return *subgraph_->outputs();
 8018020:	687b      	ldr	r3, [r7, #4]
 8018022:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018026:	4618      	mov	r0, r3
 8018028:	f7fe f8d1 	bl	80161ce <_ZNK6tflite8SubGraph7outputsEv>
 801802c:	4603      	mov	r3, r0
  }
 801802e:	4618      	mov	r0, r3
 8018030:	3708      	adds	r7, #8
 8018032:	46bd      	mov	sp, r7
 8018034:	bd80      	pop	{r7, pc}

08018036 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>:
#include "tensorflow/lite/schema/schema_generated.h"

namespace tflite {
namespace {

const char* OpNameFromRegistration(const TfLiteRegistration* registration) {
 8018036:	b580      	push	{r7, lr}
 8018038:	b082      	sub	sp, #8
 801803a:	af00      	add	r7, sp, #0
 801803c:	6078      	str	r0, [r7, #4]
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 801803e:	687b      	ldr	r3, [r7, #4]
 8018040:	695b      	ldr	r3, [r3, #20]
 8018042:	2b20      	cmp	r3, #32
 8018044:	d102      	bne.n	801804c <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x16>
    return registration->custom_name;
 8018046:	687b      	ldr	r3, [r7, #4]
 8018048:	699b      	ldr	r3, [r3, #24]
 801804a:	e006      	b.n	801805a <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x24>
  } else {
    return EnumNameBuiltinOperator(BuiltinOperator(registration->builtin_code));
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	695b      	ldr	r3, [r3, #20]
 8018050:	b2db      	uxtb	r3, r3
 8018052:	4618      	mov	r0, r3
 8018054:	f7fc ff6a 	bl	8014f2c <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 8018058:	4603      	mov	r3, r0
  }
}
 801805a:	4618      	mov	r0, r3
 801805c:	3708      	adds	r7, #8
 801805e:	46bd      	mov	sp, r7
 8018060:	bd80      	pop	{r7, pc}

08018062 <_ZN6tflite8internal13ContextHelper24AllocatePersistentBufferEP13TfLiteContextjPPv>:
}  // namespace

namespace internal {

TfLiteStatus ContextHelper::AllocatePersistentBuffer(TfLiteContext* ctx,
                                                     size_t bytes, void** ptr) {
 8018062:	b580      	push	{r7, lr}
 8018064:	b084      	sub	sp, #16
 8018066:	af00      	add	r7, sp, #0
 8018068:	60f8      	str	r0, [r7, #12]
 801806a:	60b9      	str	r1, [r7, #8]
 801806c:	607a      	str	r2, [r7, #4]
  return reinterpret_cast<ContextHelper*>(ctx->impl_)
 801806e:	68fb      	ldr	r3, [r7, #12]
 8018070:	68db      	ldr	r3, [r3, #12]
      ->allocator_->AllocatePersistentBuffer(bytes, ptr);
 8018072:	681b      	ldr	r3, [r3, #0]
 8018074:	687a      	ldr	r2, [r7, #4]
 8018076:	68b9      	ldr	r1, [r7, #8]
 8018078:	4618      	mov	r0, r3
 801807a:	f7fe ffe1 	bl	8017040 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv>
 801807e:	4603      	mov	r3, r0
}
 8018080:	4618      	mov	r0, r3
 8018082:	3710      	adds	r7, #16
 8018084:	46bd      	mov	sp, r7
 8018086:	bd80      	pop	{r7, pc}

08018088 <_ZN6tflite8internal13ContextHelper27RequestScratchBufferInArenaEP13TfLiteContextjPi>:

TfLiteStatus ContextHelper::RequestScratchBufferInArena(TfLiteContext* ctx,
                                                        size_t bytes,
                                                        int* buffer_idx) {
 8018088:	b580      	push	{r7, lr}
 801808a:	b086      	sub	sp, #24
 801808c:	af00      	add	r7, sp, #0
 801808e:	60f8      	str	r0, [r7, #12]
 8018090:	60b9      	str	r1, [r7, #8]
 8018092:	607a      	str	r2, [r7, #4]
  ContextHelper* helper = reinterpret_cast<ContextHelper*>(ctx->impl_);
 8018094:	68fb      	ldr	r3, [r7, #12]
 8018096:	68db      	ldr	r3, [r3, #12]
 8018098:	617b      	str	r3, [r7, #20]
  return helper->allocator_->RequestScratchBufferInArena(
 801809a:	697b      	ldr	r3, [r7, #20]
 801809c:	6818      	ldr	r0, [r3, #0]
 801809e:	697b      	ldr	r3, [r7, #20]
 80180a0:	6899      	ldr	r1, [r3, #8]
      helper->current_node_idx_, bytes, buffer_idx);
 80180a2:	687b      	ldr	r3, [r7, #4]
 80180a4:	68ba      	ldr	r2, [r7, #8]
 80180a6:	f7fe fff3 	bl	8017090 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi>
 80180aa:	4603      	mov	r3, r0
}
 80180ac:	4618      	mov	r0, r3
 80180ae:	3718      	adds	r7, #24
 80180b0:	46bd      	mov	sp, r7
 80180b2:	bd80      	pop	{r7, pc}

080180b4 <_ZN6tflite8internal13ContextHelper16GetScratchBufferEP13TfLiteContexti>:

void* ContextHelper::GetScratchBuffer(TfLiteContext* ctx, int buffer_idx) {
 80180b4:	b580      	push	{r7, lr}
 80180b6:	b082      	sub	sp, #8
 80180b8:	af00      	add	r7, sp, #0
 80180ba:	6078      	str	r0, [r7, #4]
 80180bc:	6039      	str	r1, [r7, #0]
  return reinterpret_cast<ContextHelper*>(ctx->impl_)
 80180be:	687b      	ldr	r3, [r7, #4]
 80180c0:	68db      	ldr	r3, [r3, #12]
      ->allocator_->GetScratchBuffer(buffer_idx);
 80180c2:	681b      	ldr	r3, [r3, #0]
 80180c4:	6839      	ldr	r1, [r7, #0]
 80180c6:	4618      	mov	r0, r3
 80180c8:	f7ff f83e 	bl	8017148 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi>
 80180cc:	4603      	mov	r3, r0
}
 80180ce:	4618      	mov	r0, r3
 80180d0:	3708      	adds	r7, #8
 80180d2:	46bd      	mov	sp, r7
 80180d4:	bd80      	pop	{r7, pc}

080180d6 <_ZN6tflite8internal13ContextHelper13ReportOpErrorEP13TfLiteContextPKcz>:

void ContextHelper::ReportOpError(struct TfLiteContext* context,
                                  const char* format, ...) {
 80180d6:	b40e      	push	{r1, r2, r3}
 80180d8:	b580      	push	{r7, lr}
 80180da:	b085      	sub	sp, #20
 80180dc:	af00      	add	r7, sp, #0
 80180de:	6078      	str	r0, [r7, #4]
  ContextHelper* helper = static_cast<ContextHelper*>(context->impl_);
 80180e0:	687b      	ldr	r3, [r7, #4]
 80180e2:	68db      	ldr	r3, [r3, #12]
 80180e4:	60fb      	str	r3, [r7, #12]
  va_list args;
  va_start(args, format);
 80180e6:	f107 0320 	add.w	r3, r7, #32
 80180ea:	60bb      	str	r3, [r7, #8]
  TF_LITE_REPORT_ERROR(helper->error_reporter_, format, args);
 80180ec:	68fb      	ldr	r3, [r7, #12]
 80180ee:	6858      	ldr	r0, [r3, #4]
 80180f0:	68fb      	ldr	r3, [r7, #12]
 80180f2:	685b      	ldr	r3, [r3, #4]
 80180f4:	681b      	ldr	r3, [r3, #0]
 80180f6:	3308      	adds	r3, #8
 80180f8:	681b      	ldr	r3, [r3, #0]
 80180fa:	68ba      	ldr	r2, [r7, #8]
 80180fc:	69f9      	ldr	r1, [r7, #28]
 80180fe:	4798      	blx	r3
  va_end(args);
}
 8018100:	bf00      	nop
 8018102:	3714      	adds	r7, #20
 8018104:	46bd      	mov	sp, r7
 8018106:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801810a:	b003      	add	sp, #12
 801810c:	4770      	bx	lr
	...

08018110 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterE>:

}  // namespace internal

MicroInterpreter::MicroInterpreter(const Model* model,
 8018110:	b580      	push	{r7, lr}
 8018112:	b088      	sub	sp, #32
 8018114:	af02      	add	r7, sp, #8
 8018116:	60f8      	str	r0, [r7, #12]
 8018118:	60b9      	str	r1, [r7, #8]
 801811a:	607a      	str	r2, [r7, #4]
 801811c:	603b      	str	r3, [r7, #0]
      op_resolver_(op_resolver),
      error_reporter_(error_reporter),
      allocator_(&context_, model_, tensor_arena, tensor_arena_size,
                 error_reporter_),
      tensors_allocated_(false),
      context_helper_(error_reporter_, &allocator_) {
 801811e:	68fb      	ldr	r3, [r7, #12]
 8018120:	2200      	movs	r2, #0
 8018122:	601a      	str	r2, [r3, #0]
 8018124:	68fb      	ldr	r3, [r7, #12]
 8018126:	68ba      	ldr	r2, [r7, #8]
 8018128:	605a      	str	r2, [r3, #4]
 801812a:	68fb      	ldr	r3, [r7, #12]
 801812c:	687a      	ldr	r2, [r7, #4]
 801812e:	609a      	str	r2, [r3, #8]
 8018130:	68fb      	ldr	r3, [r7, #12]
 8018132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018134:	60da      	str	r2, [r3, #12]
 8018136:	68fb      	ldr	r3, [r7, #12]
 8018138:	3310      	adds	r3, #16
 801813a:	2250      	movs	r2, #80	; 0x50
 801813c:	2100      	movs	r1, #0
 801813e:	4618      	mov	r0, r3
 8018140:	f006 ff72 	bl	801f028 <memset>
 8018144:	68fb      	ldr	r3, [r7, #12]
 8018146:	f103 0060 	add.w	r0, r3, #96	; 0x60
 801814a:	68fb      	ldr	r3, [r7, #12]
 801814c:	f103 0110 	add.w	r1, r3, #16
 8018150:	68fb      	ldr	r3, [r7, #12]
 8018152:	685a      	ldr	r2, [r3, #4]
 8018154:	68fb      	ldr	r3, [r7, #12]
 8018156:	68db      	ldr	r3, [r3, #12]
 8018158:	9301      	str	r3, [sp, #4]
 801815a:	6a3b      	ldr	r3, [r7, #32]
 801815c:	9300      	str	r3, [sp, #0]
 801815e:	683b      	ldr	r3, [r7, #0]
 8018160:	f7fe fd82 	bl	8016c68 <_ZN6tflite14MicroAllocatorC1EP13TfLiteContextPKNS_5ModelEPhjPNS_13ErrorReporterE>
 8018164:	68fb      	ldr	r3, [r7, #12]
 8018166:	2200      	movs	r2, #0
 8018168:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 801816c:	68fb      	ldr	r3, [r7, #12]
 801816e:	f103 0088 	add.w	r0, r3, #136	; 0x88
 8018172:	68fb      	ldr	r3, [r7, #12]
 8018174:	68d9      	ldr	r1, [r3, #12]
 8018176:	68fb      	ldr	r3, [r7, #12]
 8018178:	3360      	adds	r3, #96	; 0x60
 801817a:	461a      	mov	r2, r3
 801817c:	f7ff fef2 	bl	8017f64 <_ZN6tflite8internal13ContextHelperC1EPNS_13ErrorReporterEPNS_14MicroAllocatorE>
  const flatbuffers::Vector<flatbuffers::Offset<SubGraph>>* subgraphs =
      model->subgraphs();
 8018180:	68b8      	ldr	r0, [r7, #8]
 8018182:	f7fe f85c 	bl	801623e <_ZNK6tflite5Model9subgraphsEv>
 8018186:	6178      	str	r0, [r7, #20]
  if (subgraphs->size() != 1) {
 8018188:	6978      	ldr	r0, [r7, #20]
 801818a:	f7ff fbe7 	bl	801795c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 801818e:	4603      	mov	r3, r0
 8018190:	2b01      	cmp	r3, #1
 8018192:	bf14      	ite	ne
 8018194:	2301      	movne	r3, #1
 8018196:	2300      	moveq	r3, #0
 8018198:	b2db      	uxtb	r3, r3
 801819a:	2b00      	cmp	r3, #0
 801819c:	d008      	beq.n	80181b0 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterE+0xa0>
    TF_LITE_REPORT_ERROR(error_reporter,
 801819e:	4912      	ldr	r1, [pc, #72]	; (80181e8 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterE+0xd8>)
 80181a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80181a2:	f7ed f913 	bl	80053cc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Only 1 subgraph is currently supported.\n");
    initialization_status_ = kTfLiteError;
 80181a6:	68fb      	ldr	r3, [r7, #12]
 80181a8:	2201      	movs	r2, #1
 80181aa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    return;
 80181ae:	e016      	b.n	80181de <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterE+0xce>
  }
  subgraph_ = (*subgraphs)[0];
 80181b0:	2100      	movs	r1, #0
 80181b2:	6978      	ldr	r0, [r7, #20]
 80181b4:	f7ff fc54 	bl	8017a60 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>
 80181b8:	4602      	mov	r2, r0
 80181ba:	68fb      	ldr	r3, [r7, #12]
 80181bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  context_.impl_ = static_cast<void*>(&context_helper_);
 80181c0:	68fb      	ldr	r3, [r7, #12]
 80181c2:	f103 0288 	add.w	r2, r3, #136	; 0x88
 80181c6:	68fb      	ldr	r3, [r7, #12]
 80181c8:	61da      	str	r2, [r3, #28]
  context_.ReportError = context_helper_.ReportOpError;
 80181ca:	68fb      	ldr	r3, [r7, #12]
 80181cc:	4a07      	ldr	r2, [pc, #28]	; (80181ec <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterE+0xdc>)
 80181ce:	625a      	str	r2, [r3, #36]	; 0x24
  context_.recommended_num_threads = 1;
 80181d0:	68fb      	ldr	r3, [r7, #12]
 80181d2:	2201      	movs	r2, #1
 80181d4:	635a      	str	r2, [r3, #52]	; 0x34
      if (thisTensor->allocation_type == kTfLiteMmapRo)
        CorrectTensorEndianness(thisTensor);
    }
  }

  initialization_status_ = kTfLiteOk;
 80181d6:	68fb      	ldr	r3, [r7, #12]
 80181d8:	2200      	movs	r2, #0
 80181da:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
}
 80181de:	68fb      	ldr	r3, [r7, #12]
 80181e0:	4618      	mov	r0, r3
 80181e2:	3718      	adds	r7, #24
 80181e4:	46bd      	mov	sp, r7
 80181e6:	bd80      	pop	{r7, pc}
 80181e8:	08023d4c 	.word	0x08023d4c
 80181ec:	080180d7 	.word	0x080180d7

080181f0 <_ZN6tflite16MicroInterpreterD1Ev>:

MicroInterpreter::~MicroInterpreter() {
 80181f0:	b580      	push	{r7, lr}
 80181f2:	b086      	sub	sp, #24
 80181f4:	af00      	add	r7, sp, #0
 80181f6:	6078      	str	r0, [r7, #4]
  if (node_and_registrations_ != nullptr) {
 80181f8:	687b      	ldr	r3, [r7, #4]
 80181fa:	681b      	ldr	r3, [r3, #0]
 80181fc:	2b00      	cmp	r3, #0
 80181fe:	d03b      	beq.n	8018278 <_ZN6tflite16MicroInterpreterD1Ev+0x88>
    for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8018200:	2300      	movs	r3, #0
 8018202:	617b      	str	r3, [r7, #20]
 8018204:	687b      	ldr	r3, [r7, #4]
 8018206:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801820a:	4618      	mov	r0, r3
 801820c:	f7fd ffed 	bl	80161ea <_ZNK6tflite8SubGraph9operatorsEv>
 8018210:	4603      	mov	r3, r0
 8018212:	4618      	mov	r0, r3
 8018214:	f7ff fb3a 	bl	801788c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 8018218:	4602      	mov	r2, r0
 801821a:	697b      	ldr	r3, [r7, #20]
 801821c:	4293      	cmp	r3, r2
 801821e:	bf34      	ite	cc
 8018220:	2301      	movcc	r3, #1
 8018222:	2300      	movcs	r3, #0
 8018224:	b2db      	uxtb	r3, r3
 8018226:	2b00      	cmp	r3, #0
 8018228:	d026      	beq.n	8018278 <_ZN6tflite16MicroInterpreterD1Ev+0x88>
      TfLiteNode* node = &(node_and_registrations_[i].node);
 801822a:	687b      	ldr	r3, [r7, #4]
 801822c:	6819      	ldr	r1, [r3, #0]
 801822e:	697a      	ldr	r2, [r7, #20]
 8018230:	4613      	mov	r3, r2
 8018232:	009b      	lsls	r3, r3, #2
 8018234:	4413      	add	r3, r2
 8018236:	00db      	lsls	r3, r3, #3
 8018238:	440b      	add	r3, r1
 801823a:	613b      	str	r3, [r7, #16]
      const TfLiteRegistration* registration =
          node_and_registrations_[i].registration;
 801823c:	687b      	ldr	r3, [r7, #4]
 801823e:	6819      	ldr	r1, [r3, #0]
 8018240:	697a      	ldr	r2, [r7, #20]
 8018242:	4613      	mov	r3, r2
 8018244:	009b      	lsls	r3, r3, #2
 8018246:	4413      	add	r3, r2
 8018248:	00db      	lsls	r3, r3, #3
 801824a:	440b      	add	r3, r1
      const TfLiteRegistration* registration =
 801824c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801824e:	60fb      	str	r3, [r7, #12]
      // registration is allocated outside the interpreter, so double check to
      // make sure it's not nullptr;
      if (registration != nullptr && registration->free != nullptr) {
 8018250:	68fb      	ldr	r3, [r7, #12]
 8018252:	2b00      	cmp	r3, #0
 8018254:	d00c      	beq.n	8018270 <_ZN6tflite16MicroInterpreterD1Ev+0x80>
 8018256:	68fb      	ldr	r3, [r7, #12]
 8018258:	685b      	ldr	r3, [r3, #4]
 801825a:	2b00      	cmp	r3, #0
 801825c:	d008      	beq.n	8018270 <_ZN6tflite16MicroInterpreterD1Ev+0x80>
        registration->free(&context_, node->user_data);
 801825e:	68fb      	ldr	r3, [r7, #12]
 8018260:	685b      	ldr	r3, [r3, #4]
 8018262:	687a      	ldr	r2, [r7, #4]
 8018264:	f102 0010 	add.w	r0, r2, #16
 8018268:	693a      	ldr	r2, [r7, #16]
 801826a:	6912      	ldr	r2, [r2, #16]
 801826c:	4611      	mov	r1, r2
 801826e:	4798      	blx	r3
    for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8018270:	697b      	ldr	r3, [r7, #20]
 8018272:	3301      	adds	r3, #1
 8018274:	617b      	str	r3, [r7, #20]
 8018276:	e7c5      	b.n	8018204 <_ZN6tflite16MicroInterpreterD1Ev+0x14>
      }
    }
  }
}
 8018278:	687b      	ldr	r3, [r7, #4]
 801827a:	4618      	mov	r0, r3
 801827c:	3718      	adds	r7, #24
 801827e:	46bd      	mov	sp, r7
 8018280:	bd80      	pop	{r7, pc}
	...

08018284 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>:
  for (int32_t i = 0; i < size; ++i) {
    data[i] = flatbuffers::EndianScalar(data[i]);
  }
}

TfLiteStatus MicroInterpreter::AllocateTensors() {
 8018284:	b590      	push	{r4, r7, lr}
 8018286:	b08f      	sub	sp, #60	; 0x3c
 8018288:	af02      	add	r7, sp, #8
 801828a:	6078      	str	r0, [r7, #4]
  TF_LITE_ENSURE_OK(&context_, allocator_.InitializeFromFlatbuffer(
 801828c:	687b      	ldr	r3, [r7, #4]
 801828e:	f103 0060 	add.w	r0, r3, #96	; 0x60
 8018292:	687b      	ldr	r3, [r7, #4]
 8018294:	689b      	ldr	r3, [r3, #8]
 8018296:	687a      	ldr	r2, [r7, #4]
 8018298:	4619      	mov	r1, r3
 801829a:	f7fe fd3d 	bl	8016d18 <_ZN6tflite14MicroAllocator24InitializeFromFlatbufferERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE>
 801829e:	4603      	mov	r3, r0
 80182a0:	72fb      	strb	r3, [r7, #11]
 80182a2:	7afb      	ldrb	r3, [r7, #11]
 80182a4:	2b00      	cmp	r3, #0
 80182a6:	d001      	beq.n	80182ac <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
 80182a8:	7afb      	ldrb	r3, [r7, #11]
 80182aa:	e0d7      	b.n	801845c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1d8>
                                   op_resolver_, &node_and_registrations_));

  // Only allow AllocatePersistentBuffer in Init stage.
  context_.AllocatePersistentBuffer = context_helper_.AllocatePersistentBuffer;
 80182ac:	687b      	ldr	r3, [r7, #4]
 80182ae:	4a6d      	ldr	r2, [pc, #436]	; (8018464 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1e0>)
 80182b0:	649a      	str	r2, [r3, #72]	; 0x48
  context_.RequestScratchBufferInArena = nullptr;
 80182b2:	687b      	ldr	r3, [r7, #4]
 80182b4:	2200      	movs	r2, #0
 80182b6:	651a      	str	r2, [r3, #80]	; 0x50
  context_.GetScratchBuffer = nullptr;
 80182b8:	687b      	ldr	r3, [r7, #4]
 80182ba:	2200      	movs	r2, #0
 80182bc:	655a      	str	r2, [r3, #84]	; 0x54

  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 80182be:	2300      	movs	r3, #0
 80182c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80182c2:	687b      	ldr	r3, [r7, #4]
 80182c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80182c8:	4618      	mov	r0, r3
 80182ca:	f7fd ff8e 	bl	80161ea <_ZNK6tflite8SubGraph9operatorsEv>
 80182ce:	4603      	mov	r3, r0
 80182d0:	4618      	mov	r0, r3
 80182d2:	f7ff fadb 	bl	801788c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 80182d6:	4602      	mov	r2, r0
 80182d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182da:	4293      	cmp	r3, r2
 80182dc:	bf34      	ite	cc
 80182de:	2301      	movcc	r3, #1
 80182e0:	2300      	movcs	r3, #0
 80182e2:	b2db      	uxtb	r3, r3
 80182e4:	2b00      	cmp	r3, #0
 80182e6:	d03c      	beq.n	8018362 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xde>
    context_helper_.SetNodeIndex(i);
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	3388      	adds	r3, #136	; 0x88
 80182ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80182ee:	4611      	mov	r1, r2
 80182f0:	4618      	mov	r0, r3
 80182f2:	f7ff fe4e 	bl	8017f92 <_ZN6tflite8internal13ContextHelper12SetNodeIndexEi>
    auto* node = &(node_and_registrations_[i].node);
 80182f6:	687b      	ldr	r3, [r7, #4]
 80182f8:	6819      	ldr	r1, [r3, #0]
 80182fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80182fc:	4613      	mov	r3, r2
 80182fe:	009b      	lsls	r3, r3, #2
 8018300:	4413      	add	r3, r2
 8018302:	00db      	lsls	r3, r3, #3
 8018304:	440b      	add	r3, r1
 8018306:	613b      	str	r3, [r7, #16]
    auto* registration = node_and_registrations_[i].registration;
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	6819      	ldr	r1, [r3, #0]
 801830c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801830e:	4613      	mov	r3, r2
 8018310:	009b      	lsls	r3, r3, #2
 8018312:	4413      	add	r3, r2
 8018314:	00db      	lsls	r3, r3, #3
 8018316:	440b      	add	r3, r1
 8018318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801831a:	60fb      	str	r3, [r7, #12]
    size_t init_data_size;
    const char* init_data;
    if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 801831c:	68fb      	ldr	r3, [r7, #12]
 801831e:	695b      	ldr	r3, [r3, #20]
 8018320:	2b20      	cmp	r3, #32
 8018322:	d106      	bne.n	8018332 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xae>
      init_data = reinterpret_cast<const char*>(node->custom_initial_data);
 8018324:	693b      	ldr	r3, [r7, #16]
 8018326:	699b      	ldr	r3, [r3, #24]
 8018328:	627b      	str	r3, [r7, #36]	; 0x24
      init_data_size = node->custom_initial_data_size;
 801832a:	693b      	ldr	r3, [r7, #16]
 801832c:	69db      	ldr	r3, [r3, #28]
 801832e:	62bb      	str	r3, [r7, #40]	; 0x28
 8018330:	e004      	b.n	801833c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xb8>
    } else {
      init_data = reinterpret_cast<const char*>(node->builtin_data);
 8018332:	693b      	ldr	r3, [r7, #16]
 8018334:	695b      	ldr	r3, [r3, #20]
 8018336:	627b      	str	r3, [r7, #36]	; 0x24
      init_data_size = 0;
 8018338:	2300      	movs	r3, #0
 801833a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    if (registration->init) {
 801833c:	68fb      	ldr	r3, [r7, #12]
 801833e:	681b      	ldr	r3, [r3, #0]
 8018340:	2b00      	cmp	r3, #0
 8018342:	d00a      	beq.n	801835a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xd6>
      node->user_data =
          registration->init(&context_, init_data, init_data_size);
 8018344:	68fb      	ldr	r3, [r7, #12]
 8018346:	681b      	ldr	r3, [r3, #0]
 8018348:	687a      	ldr	r2, [r7, #4]
 801834a:	f102 0010 	add.w	r0, r2, #16
 801834e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018350:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018352:	4798      	blx	r3
 8018354:	4602      	mov	r2, r0
      node->user_data =
 8018356:	693b      	ldr	r3, [r7, #16]
 8018358:	611a      	str	r2, [r3, #16]
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 801835a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801835c:	3301      	adds	r3, #1
 801835e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018360:	e7af      	b.n	80182c2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3e>
    }
  }
  context_helper_.SetNodeIndex(-1);
 8018362:	687b      	ldr	r3, [r7, #4]
 8018364:	3388      	adds	r3, #136	; 0x88
 8018366:	f04f 31ff 	mov.w	r1, #4294967295
 801836a:	4618      	mov	r0, r3
 801836c:	f7ff fe11 	bl	8017f92 <_ZN6tflite8internal13ContextHelper12SetNodeIndexEi>

  // Both AllocatePersistentBuffer and RequestScratchBufferInArena is available
  // in Prepare stage.
  context_.RequestScratchBufferInArena =
 8018370:	687b      	ldr	r3, [r7, #4]
 8018372:	4a3d      	ldr	r2, [pc, #244]	; (8018468 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1e4>)
 8018374:	651a      	str	r2, [r3, #80]	; 0x50
      context_helper_.RequestScratchBufferInArena;
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8018376:	2300      	movs	r3, #0
 8018378:	623b      	str	r3, [r7, #32]
 801837a:	687b      	ldr	r3, [r7, #4]
 801837c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018380:	4618      	mov	r0, r3
 8018382:	f7fd ff32 	bl	80161ea <_ZNK6tflite8SubGraph9operatorsEv>
 8018386:	4603      	mov	r3, r0
 8018388:	4618      	mov	r0, r3
 801838a:	f7ff fa7f 	bl	801788c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 801838e:	4602      	mov	r2, r0
 8018390:	6a3b      	ldr	r3, [r7, #32]
 8018392:	4293      	cmp	r3, r2
 8018394:	bf34      	ite	cc
 8018396:	2301      	movcc	r3, #1
 8018398:	2300      	movcs	r3, #0
 801839a:	b2db      	uxtb	r3, r3
 801839c:	2b00      	cmp	r3, #0
 801839e:	d03c      	beq.n	801841a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x196>
    // Set node idx to annotate the lifetime for scratch buffers.
    context_helper_.SetNodeIndex(i);
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	3388      	adds	r3, #136	; 0x88
 80183a4:	6a3a      	ldr	r2, [r7, #32]
 80183a6:	4611      	mov	r1, r2
 80183a8:	4618      	mov	r0, r3
 80183aa:	f7ff fdf2 	bl	8017f92 <_ZN6tflite8internal13ContextHelper12SetNodeIndexEi>
    auto* node = &(node_and_registrations_[i].node);
 80183ae:	687b      	ldr	r3, [r7, #4]
 80183b0:	6819      	ldr	r1, [r3, #0]
 80183b2:	6a3a      	ldr	r2, [r7, #32]
 80183b4:	4613      	mov	r3, r2
 80183b6:	009b      	lsls	r3, r3, #2
 80183b8:	4413      	add	r3, r2
 80183ba:	00db      	lsls	r3, r3, #3
 80183bc:	440b      	add	r3, r1
 80183be:	61fb      	str	r3, [r7, #28]
    auto* registration = node_and_registrations_[i].registration;
 80183c0:	687b      	ldr	r3, [r7, #4]
 80183c2:	6819      	ldr	r1, [r3, #0]
 80183c4:	6a3a      	ldr	r2, [r7, #32]
 80183c6:	4613      	mov	r3, r2
 80183c8:	009b      	lsls	r3, r3, #2
 80183ca:	4413      	add	r3, r2
 80183cc:	00db      	lsls	r3, r3, #3
 80183ce:	440b      	add	r3, r1
 80183d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80183d2:	61bb      	str	r3, [r7, #24]
    if (registration->prepare) {
 80183d4:	69bb      	ldr	r3, [r7, #24]
 80183d6:	689b      	ldr	r3, [r3, #8]
 80183d8:	2b00      	cmp	r3, #0
 80183da:	d01a      	beq.n	8018412 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x18e>
      TfLiteStatus prepare_status = registration->prepare(&context_, node);
 80183dc:	69bb      	ldr	r3, [r7, #24]
 80183de:	689b      	ldr	r3, [r3, #8]
 80183e0:	687a      	ldr	r2, [r7, #4]
 80183e2:	3210      	adds	r2, #16
 80183e4:	69f9      	ldr	r1, [r7, #28]
 80183e6:	4610      	mov	r0, r2
 80183e8:	4798      	blx	r3
 80183ea:	4603      	mov	r3, r0
 80183ec:	75fb      	strb	r3, [r7, #23]
      if (prepare_status != kTfLiteOk) {
 80183ee:	7dfb      	ldrb	r3, [r7, #23]
 80183f0:	2b00      	cmp	r3, #0
 80183f2:	d00e      	beq.n	8018412 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x18e>
        TF_LITE_REPORT_ERROR(
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	68dc      	ldr	r4, [r3, #12]
 80183f8:	69b8      	ldr	r0, [r7, #24]
 80183fa:	f7ff fe1c 	bl	8018036 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 80183fe:	4602      	mov	r2, r0
 8018400:	7dfb      	ldrb	r3, [r7, #23]
 8018402:	9300      	str	r3, [sp, #0]
 8018404:	6a3b      	ldr	r3, [r7, #32]
 8018406:	4919      	ldr	r1, [pc, #100]	; (801846c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1e8>)
 8018408:	4620      	mov	r0, r4
 801840a:	f7ec ffdf 	bl	80053cc <_ZN6tflite13ErrorReporter6ReportEPKcz>
            error_reporter_,
            "Node %s (number %df) failed to prepare with status %d",
            OpNameFromRegistration(registration), i, prepare_status);
        return kTfLiteError;
 801840e:	2301      	movs	r3, #1
 8018410:	e024      	b.n	801845c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1d8>
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8018412:	6a3b      	ldr	r3, [r7, #32]
 8018414:	3301      	adds	r3, #1
 8018416:	623b      	str	r3, [r7, #32]
 8018418:	e7af      	b.n	801837a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xf6>
      }
    }
  }
  context_helper_.SetNodeIndex(-1);
 801841a:	687b      	ldr	r3, [r7, #4]
 801841c:	3388      	adds	r3, #136	; 0x88
 801841e:	f04f 31ff 	mov.w	r1, #4294967295
 8018422:	4618      	mov	r0, r3
 8018424:	f7ff fdb5 	bl	8017f92 <_ZN6tflite8internal13ContextHelper12SetNodeIndexEi>

  // Prepare is done, we're ready for Invoke. Memory allocation is no longer
  // allowed. Kernels can only fetch scratch buffers via GetScratchBuffer.
  context_.AllocatePersistentBuffer = nullptr;
 8018428:	687b      	ldr	r3, [r7, #4]
 801842a:	2200      	movs	r2, #0
 801842c:	649a      	str	r2, [r3, #72]	; 0x48
  context_.RequestScratchBufferInArena = nullptr;
 801842e:	687b      	ldr	r3, [r7, #4]
 8018430:	2200      	movs	r2, #0
 8018432:	651a      	str	r2, [r3, #80]	; 0x50
  context_.GetScratchBuffer = context_helper_.GetScratchBuffer;
 8018434:	687b      	ldr	r3, [r7, #4]
 8018436:	4a0e      	ldr	r2, [pc, #56]	; (8018470 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1ec>)
 8018438:	655a      	str	r2, [r3, #84]	; 0x54

  TF_LITE_ENSURE_OK(&context_, allocator_.FinishTensorAllocation());
 801843a:	687b      	ldr	r3, [r7, #4]
 801843c:	3360      	adds	r3, #96	; 0x60
 801843e:	4618      	mov	r0, r3
 8018440:	f7fe fc98 	bl	8016d74 <_ZN6tflite14MicroAllocator22FinishTensorAllocationEv>
 8018444:	4603      	mov	r3, r0
 8018446:	72bb      	strb	r3, [r7, #10]
 8018448:	7abb      	ldrb	r3, [r7, #10]
 801844a:	2b00      	cmp	r3, #0
 801844c:	d001      	beq.n	8018452 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1ce>
 801844e:	7abb      	ldrb	r3, [r7, #10]
 8018450:	e004      	b.n	801845c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1d8>
  tensors_allocated_ = true;
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	2201      	movs	r2, #1
 8018456:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return kTfLiteOk;
 801845a:	2300      	movs	r3, #0
}
 801845c:	4618      	mov	r0, r3
 801845e:	3734      	adds	r7, #52	; 0x34
 8018460:	46bd      	mov	sp, r7
 8018462:	bd90      	pop	{r4, r7, pc}
 8018464:	08018063 	.word	0x08018063
 8018468:	08018089 	.word	0x08018089
 801846c:	08023d78 	.word	0x08023d78
 8018470:	080180b5 	.word	0x080180b5

08018474 <_ZN6tflite16MicroInterpreter6InvokeEv>:

TfLiteStatus MicroInterpreter::Invoke() {
 8018474:	b590      	push	{r4, r7, lr}
 8018476:	b089      	sub	sp, #36	; 0x24
 8018478:	af02      	add	r7, sp, #8
 801847a:	6078      	str	r0, [r7, #4]
  if (initialization_status_ != kTfLiteOk) {
 801847c:	687b      	ldr	r3, [r7, #4]
 801847e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8018482:	2b00      	cmp	r3, #0
 8018484:	d007      	beq.n	8018496 <_ZN6tflite16MicroInterpreter6InvokeEv+0x22>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8018486:	687b      	ldr	r3, [r7, #4]
 8018488:	68db      	ldr	r3, [r3, #12]
 801848a:	4936      	ldr	r1, [pc, #216]	; (8018564 <_ZN6tflite16MicroInterpreter6InvokeEv+0xf0>)
 801848c:	4618      	mov	r0, r3
 801848e:	f7ec ff9d 	bl	80053cc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Invoke() called after initialization failed\n");
    return kTfLiteError;
 8018492:	2301      	movs	r3, #1
 8018494:	e062      	b.n	801855c <_ZN6tflite16MicroInterpreter6InvokeEv+0xe8>
  }

  // Ensure tensors are allocated before the interpreter is invoked to avoid
  // difficult to debug segfaults.
  if (!tensors_allocated_) {
 8018496:	687b      	ldr	r3, [r7, #4]
 8018498:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801849c:	f083 0301 	eor.w	r3, r3, #1
 80184a0:	b2db      	uxtb	r3, r3
 80184a2:	2b00      	cmp	r3, #0
 80184a4:	d009      	beq.n	80184ba <_ZN6tflite16MicroInterpreter6InvokeEv+0x46>
    TF_LITE_ENSURE_OK(&context_, AllocateTensors());
 80184a6:	6878      	ldr	r0, [r7, #4]
 80184a8:	f7ff feec 	bl	8018284 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
 80184ac:	4603      	mov	r3, r0
 80184ae:	72bb      	strb	r3, [r7, #10]
 80184b0:	7abb      	ldrb	r3, [r7, #10]
 80184b2:	2b00      	cmp	r3, #0
 80184b4:	d001      	beq.n	80184ba <_ZN6tflite16MicroInterpreter6InvokeEv+0x46>
 80184b6:	7abb      	ldrb	r3, [r7, #10]
 80184b8:	e050      	b.n	801855c <_ZN6tflite16MicroInterpreter6InvokeEv+0xe8>
  }

  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 80184ba:	2300      	movs	r3, #0
 80184bc:	617b      	str	r3, [r7, #20]
 80184be:	687b      	ldr	r3, [r7, #4]
 80184c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80184c4:	4618      	mov	r0, r3
 80184c6:	f7fd fe90 	bl	80161ea <_ZNK6tflite8SubGraph9operatorsEv>
 80184ca:	4603      	mov	r3, r0
 80184cc:	4618      	mov	r0, r3
 80184ce:	f7ff f9dd 	bl	801788c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 80184d2:	4602      	mov	r2, r0
 80184d4:	697b      	ldr	r3, [r7, #20]
 80184d6:	4293      	cmp	r3, r2
 80184d8:	bf34      	ite	cc
 80184da:	2301      	movcc	r3, #1
 80184dc:	2300      	movcs	r3, #0
 80184de:	b2db      	uxtb	r3, r3
 80184e0:	2b00      	cmp	r3, #0
 80184e2:	d03a      	beq.n	801855a <_ZN6tflite16MicroInterpreter6InvokeEv+0xe6>
    auto* node = &(node_and_registrations_[i].node);
 80184e4:	687b      	ldr	r3, [r7, #4]
 80184e6:	6819      	ldr	r1, [r3, #0]
 80184e8:	697a      	ldr	r2, [r7, #20]
 80184ea:	4613      	mov	r3, r2
 80184ec:	009b      	lsls	r3, r3, #2
 80184ee:	4413      	add	r3, r2
 80184f0:	00db      	lsls	r3, r3, #3
 80184f2:	440b      	add	r3, r1
 80184f4:	613b      	str	r3, [r7, #16]
    auto* registration = node_and_registrations_[i].registration;
 80184f6:	687b      	ldr	r3, [r7, #4]
 80184f8:	6819      	ldr	r1, [r3, #0]
 80184fa:	697a      	ldr	r2, [r7, #20]
 80184fc:	4613      	mov	r3, r2
 80184fe:	009b      	lsls	r3, r3, #2
 8018500:	4413      	add	r3, r2
 8018502:	00db      	lsls	r3, r3, #3
 8018504:	440b      	add	r3, r1
 8018506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018508:	60fb      	str	r3, [r7, #12]

    if (registration->invoke) {
 801850a:	68fb      	ldr	r3, [r7, #12]
 801850c:	68db      	ldr	r3, [r3, #12]
 801850e:	2b00      	cmp	r3, #0
 8018510:	d01f      	beq.n	8018552 <_ZN6tflite16MicroInterpreter6InvokeEv+0xde>
      TfLiteStatus invoke_status = registration->invoke(&context_, node);
 8018512:	68fb      	ldr	r3, [r7, #12]
 8018514:	68db      	ldr	r3, [r3, #12]
 8018516:	687a      	ldr	r2, [r7, #4]
 8018518:	3210      	adds	r2, #16
 801851a:	6939      	ldr	r1, [r7, #16]
 801851c:	4610      	mov	r0, r2
 801851e:	4798      	blx	r3
 8018520:	4603      	mov	r3, r0
 8018522:	72fb      	strb	r3, [r7, #11]
      if (invoke_status == kTfLiteError) {
 8018524:	7afb      	ldrb	r3, [r7, #11]
 8018526:	2b01      	cmp	r3, #1
 8018528:	d10e      	bne.n	8018548 <_ZN6tflite16MicroInterpreter6InvokeEv+0xd4>
        TF_LITE_REPORT_ERROR(
 801852a:	687b      	ldr	r3, [r7, #4]
 801852c:	68dc      	ldr	r4, [r3, #12]
 801852e:	68f8      	ldr	r0, [r7, #12]
 8018530:	f7ff fd81 	bl	8018036 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 8018534:	4602      	mov	r2, r0
 8018536:	7afb      	ldrb	r3, [r7, #11]
 8018538:	9300      	str	r3, [sp, #0]
 801853a:	697b      	ldr	r3, [r7, #20]
 801853c:	490a      	ldr	r1, [pc, #40]	; (8018568 <_ZN6tflite16MicroInterpreter6InvokeEv+0xf4>)
 801853e:	4620      	mov	r0, r4
 8018540:	f7ec ff44 	bl	80053cc <_ZN6tflite13ErrorReporter6ReportEPKcz>
            error_reporter_,
            "Node %s (number %d) failed to invoke with status %d",
            OpNameFromRegistration(registration), i, invoke_status);
        return kTfLiteError;
 8018544:	2301      	movs	r3, #1
 8018546:	e009      	b.n	801855c <_ZN6tflite16MicroInterpreter6InvokeEv+0xe8>
      } else if (invoke_status != kTfLiteOk) {
 8018548:	7afb      	ldrb	r3, [r7, #11]
 801854a:	2b00      	cmp	r3, #0
 801854c:	d001      	beq.n	8018552 <_ZN6tflite16MicroInterpreter6InvokeEv+0xde>
        return invoke_status;
 801854e:	7afb      	ldrb	r3, [r7, #11]
 8018550:	e004      	b.n	801855c <_ZN6tflite16MicroInterpreter6InvokeEv+0xe8>
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8018552:	697b      	ldr	r3, [r7, #20]
 8018554:	3301      	adds	r3, #1
 8018556:	617b      	str	r3, [r7, #20]
 8018558:	e7b1      	b.n	80184be <_ZN6tflite16MicroInterpreter6InvokeEv+0x4a>
      }
    }
  }
  return kTfLiteOk;
 801855a:	2300      	movs	r3, #0
}
 801855c:	4618      	mov	r0, r3
 801855e:	371c      	adds	r7, #28
 8018560:	46bd      	mov	sp, r7
 8018562:	bd90      	pop	{r4, r7, pc}
 8018564:	08023db0 	.word	0x08023db0
 8018568:	08023de0 	.word	0x08023de0

0801856c <_ZN6tflite16MicroInterpreter5inputEj>:

TfLiteTensor* MicroInterpreter::input(size_t index) {
 801856c:	b590      	push	{r4, r7, lr}
 801856e:	b085      	sub	sp, #20
 8018570:	af00      	add	r7, sp, #0
 8018572:	6078      	str	r0, [r7, #4]
 8018574:	6039      	str	r1, [r7, #0]
  const size_t length = inputs_size();
 8018576:	6878      	ldr	r0, [r7, #4]
 8018578:	f7ff fd19 	bl	8017fae <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 801857c:	60f8      	str	r0, [r7, #12]
  if ((index < 0) || (index >= length)) {
 801857e:	683a      	ldr	r2, [r7, #0]
 8018580:	68fb      	ldr	r3, [r7, #12]
 8018582:	429a      	cmp	r2, r3
 8018584:	d308      	bcc.n	8018598 <_ZN6tflite16MicroInterpreter5inputEj+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8018586:	687b      	ldr	r3, [r7, #4]
 8018588:	68d8      	ldr	r0, [r3, #12]
 801858a:	68fb      	ldr	r3, [r7, #12]
 801858c:	683a      	ldr	r2, [r7, #0]
 801858e:	490b      	ldr	r1, [pc, #44]	; (80185bc <_ZN6tflite16MicroInterpreter5inputEj+0x50>)
 8018590:	f7ec ff1c 	bl	80053cc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Input index %d out of range (length is %d)", index,
                         length);
    return nullptr;
 8018594:	2300      	movs	r3, #0
 8018596:	e00c      	b.n	80185b2 <_ZN6tflite16MicroInterpreter5inputEj+0x46>
  }
  return &(context_.tensors[inputs().Get(index)]);
 8018598:	687b      	ldr	r3, [r7, #4]
 801859a:	699c      	ldr	r4, [r3, #24]
 801859c:	6878      	ldr	r0, [r7, #4]
 801859e:	f7ff fd19 	bl	8017fd4 <_ZNK6tflite16MicroInterpreter6inputsEv>
 80185a2:	4603      	mov	r3, r0
 80185a4:	6839      	ldr	r1, [r7, #0]
 80185a6:	4618      	mov	r0, r3
 80185a8:	f7f1 f9dc 	bl	8009964 <_ZNK11flatbuffers6VectorIlE3GetEm>
 80185ac:	4603      	mov	r3, r0
 80185ae:	019b      	lsls	r3, r3, #6
 80185b0:	4423      	add	r3, r4
}
 80185b2:	4618      	mov	r0, r3
 80185b4:	3714      	adds	r7, #20
 80185b6:	46bd      	mov	sp, r7
 80185b8:	bd90      	pop	{r4, r7, pc}
 80185ba:	bf00      	nop
 80185bc:	08023e14 	.word	0x08023e14

080185c0 <_ZN6tflite16MicroInterpreter6outputEj>:

TfLiteTensor* MicroInterpreter::output(size_t index) {
 80185c0:	b590      	push	{r4, r7, lr}
 80185c2:	b085      	sub	sp, #20
 80185c4:	af00      	add	r7, sp, #0
 80185c6:	6078      	str	r0, [r7, #4]
 80185c8:	6039      	str	r1, [r7, #0]
  const size_t length = outputs_size();
 80185ca:	6878      	ldr	r0, [r7, #4]
 80185cc:	f7ff fd11 	bl	8017ff2 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 80185d0:	60f8      	str	r0, [r7, #12]
  if ((index < 0) || (index >= length)) {
 80185d2:	683a      	ldr	r2, [r7, #0]
 80185d4:	68fb      	ldr	r3, [r7, #12]
 80185d6:	429a      	cmp	r2, r3
 80185d8:	d308      	bcc.n	80185ec <_ZN6tflite16MicroInterpreter6outputEj+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 80185da:	687b      	ldr	r3, [r7, #4]
 80185dc:	68d8      	ldr	r0, [r3, #12]
 80185de:	68fb      	ldr	r3, [r7, #12]
 80185e0:	683a      	ldr	r2, [r7, #0]
 80185e2:	490b      	ldr	r1, [pc, #44]	; (8018610 <_ZN6tflite16MicroInterpreter6outputEj+0x50>)
 80185e4:	f7ec fef2 	bl	80053cc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Output index %d out of range (length is %d)", index,
                         length);
    return nullptr;
 80185e8:	2300      	movs	r3, #0
 80185ea:	e00c      	b.n	8018606 <_ZN6tflite16MicroInterpreter6outputEj+0x46>
  }
  return &(context_.tensors[outputs().Get(index)]);
 80185ec:	687b      	ldr	r3, [r7, #4]
 80185ee:	699c      	ldr	r4, [r3, #24]
 80185f0:	6878      	ldr	r0, [r7, #4]
 80185f2:	f7ff fd11 	bl	8018018 <_ZNK6tflite16MicroInterpreter7outputsEv>
 80185f6:	4603      	mov	r3, r0
 80185f8:	6839      	ldr	r1, [r7, #0]
 80185fa:	4618      	mov	r0, r3
 80185fc:	f7f1 f9b2 	bl	8009964 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8018600:	4603      	mov	r3, r0
 8018602:	019b      	lsls	r3, r3, #6
 8018604:	4423      	add	r3, r4
}
 8018606:	4618      	mov	r0, r3
 8018608:	3714      	adds	r7, #20
 801860a:	46bd      	mov	sp, r7
 801860c:	bd90      	pop	{r4, r7, pc}
 801860e:	bf00      	nop
 8018610:	08023e40 	.word	0x08023e40

08018614 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>:

// All input buffers to the number conversion functions must be this long.
const int kFastToBufferSize = 48;

// Reverses a zero-terminated string in-place.
char* ReverseStringInPlace(char* start, char* end) {
 8018614:	b480      	push	{r7}
 8018616:	b087      	sub	sp, #28
 8018618:	af00      	add	r7, sp, #0
 801861a:	6078      	str	r0, [r7, #4]
 801861c:	6039      	str	r1, [r7, #0]
  char* p1 = start;
 801861e:	687b      	ldr	r3, [r7, #4]
 8018620:	617b      	str	r3, [r7, #20]
  char* p2 = end - 1;
 8018622:	683b      	ldr	r3, [r7, #0]
 8018624:	3b01      	subs	r3, #1
 8018626:	613b      	str	r3, [r7, #16]
  while (p1 < p2) {
 8018628:	697a      	ldr	r2, [r7, #20]
 801862a:	693b      	ldr	r3, [r7, #16]
 801862c:	429a      	cmp	r2, r3
 801862e:	d20e      	bcs.n	801864e <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x3a>
    char tmp = *p1;
 8018630:	697b      	ldr	r3, [r7, #20]
 8018632:	781b      	ldrb	r3, [r3, #0]
 8018634:	73fb      	strb	r3, [r7, #15]
    *p1++ = *p2;
 8018636:	697b      	ldr	r3, [r7, #20]
 8018638:	1c5a      	adds	r2, r3, #1
 801863a:	617a      	str	r2, [r7, #20]
 801863c:	693a      	ldr	r2, [r7, #16]
 801863e:	7812      	ldrb	r2, [r2, #0]
 8018640:	701a      	strb	r2, [r3, #0]
    *p2-- = tmp;
 8018642:	693b      	ldr	r3, [r7, #16]
 8018644:	1e5a      	subs	r2, r3, #1
 8018646:	613a      	str	r2, [r7, #16]
 8018648:	7bfa      	ldrb	r2, [r7, #15]
 801864a:	701a      	strb	r2, [r3, #0]
  while (p1 < p2) {
 801864c:	e7ec      	b.n	8018628 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x14>
  }
  return start;
 801864e:	687b      	ldr	r3, [r7, #4]
}
 8018650:	4618      	mov	r0, r3
 8018652:	371c      	adds	r7, #28
 8018654:	46bd      	mov	sp, r7
 8018656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801865a:	4770      	bx	lr

0801865c <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>:

// Appends a string to a string, in-place. You need to pass in the maximum
// string length as the second argument.
char* StrCatStr(char* main, int main_max_length, const char* to_append) {
 801865c:	b480      	push	{r7}
 801865e:	b087      	sub	sp, #28
 8018660:	af00      	add	r7, sp, #0
 8018662:	60f8      	str	r0, [r7, #12]
 8018664:	60b9      	str	r1, [r7, #8]
 8018666:	607a      	str	r2, [r7, #4]
  char* current = main;
 8018668:	68fb      	ldr	r3, [r7, #12]
 801866a:	617b      	str	r3, [r7, #20]
  while (*current != 0) {
 801866c:	697b      	ldr	r3, [r7, #20]
 801866e:	781b      	ldrb	r3, [r3, #0]
 8018670:	2b00      	cmp	r3, #0
 8018672:	d003      	beq.n	801867c <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x20>
    ++current;
 8018674:	697b      	ldr	r3, [r7, #20]
 8018676:	3301      	adds	r3, #1
 8018678:	617b      	str	r3, [r7, #20]
  while (*current != 0) {
 801867a:	e7f7      	b.n	801866c <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x10>
  }
  char* current_end = main + (main_max_length - 1);
 801867c:	68bb      	ldr	r3, [r7, #8]
 801867e:	3b01      	subs	r3, #1
 8018680:	68fa      	ldr	r2, [r7, #12]
 8018682:	4413      	add	r3, r2
 8018684:	613b      	str	r3, [r7, #16]
  while ((*to_append != 0) && (current < current_end)) {
 8018686:	687b      	ldr	r3, [r7, #4]
 8018688:	781b      	ldrb	r3, [r3, #0]
 801868a:	2b00      	cmp	r3, #0
 801868c:	d00e      	beq.n	80186ac <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x50>
 801868e:	697a      	ldr	r2, [r7, #20]
 8018690:	693b      	ldr	r3, [r7, #16]
 8018692:	429a      	cmp	r2, r3
 8018694:	d20a      	bcs.n	80186ac <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x50>
    *current = *to_append;
 8018696:	687b      	ldr	r3, [r7, #4]
 8018698:	781a      	ldrb	r2, [r3, #0]
 801869a:	697b      	ldr	r3, [r7, #20]
 801869c:	701a      	strb	r2, [r3, #0]
    ++current;
 801869e:	697b      	ldr	r3, [r7, #20]
 80186a0:	3301      	adds	r3, #1
 80186a2:	617b      	str	r3, [r7, #20]
    ++to_append;
 80186a4:	687b      	ldr	r3, [r7, #4]
 80186a6:	3301      	adds	r3, #1
 80186a8:	607b      	str	r3, [r7, #4]
  while ((*to_append != 0) && (current < current_end)) {
 80186aa:	e7ec      	b.n	8018686 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x2a>
  }
  *current = 0;
 80186ac:	697b      	ldr	r3, [r7, #20]
 80186ae:	2200      	movs	r2, #0
 80186b0:	701a      	strb	r2, [r3, #0]
  return current;
 80186b2:	697b      	ldr	r3, [r7, #20]
}
 80186b4:	4618      	mov	r0, r3
 80186b6:	371c      	adds	r7, #28
 80186b8:	46bd      	mov	sp, r7
 80186ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186be:	4770      	bx	lr

080186c0 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastUInt32ToBufferLeft(uint32_t i, char* buffer, int base) {
 80186c0:	b580      	push	{r7, lr}
 80186c2:	b088      	sub	sp, #32
 80186c4:	af00      	add	r7, sp, #0
 80186c6:	60f8      	str	r0, [r7, #12]
 80186c8:	60b9      	str	r1, [r7, #8]
 80186ca:	607a      	str	r2, [r7, #4]
  char* start = buffer;
 80186cc:	68bb      	ldr	r3, [r7, #8]
 80186ce:	61bb      	str	r3, [r7, #24]
  do {
    int32_t digit = i % base;
 80186d0:	687a      	ldr	r2, [r7, #4]
 80186d2:	68fb      	ldr	r3, [r7, #12]
 80186d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80186d8:	fb02 f201 	mul.w	r2, r2, r1
 80186dc:	1a9b      	subs	r3, r3, r2
 80186de:	617b      	str	r3, [r7, #20]
    char character;
    if (digit < 10) {
 80186e0:	697b      	ldr	r3, [r7, #20]
 80186e2:	2b09      	cmp	r3, #9
 80186e4:	dc04      	bgt.n	80186f0 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x30>
      character = '0' + digit;
 80186e6:	697b      	ldr	r3, [r7, #20]
 80186e8:	b2db      	uxtb	r3, r3
 80186ea:	3330      	adds	r3, #48	; 0x30
 80186ec:	77fb      	strb	r3, [r7, #31]
 80186ee:	e003      	b.n	80186f8 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x38>
    } else {
      character = 'a' + (digit - 10);
 80186f0:	697b      	ldr	r3, [r7, #20]
 80186f2:	b2db      	uxtb	r3, r3
 80186f4:	3357      	adds	r3, #87	; 0x57
 80186f6:	77fb      	strb	r3, [r7, #31]
    }
    *buffer++ = character;
 80186f8:	68bb      	ldr	r3, [r7, #8]
 80186fa:	1c5a      	adds	r2, r3, #1
 80186fc:	60ba      	str	r2, [r7, #8]
 80186fe:	7ffa      	ldrb	r2, [r7, #31]
 8018700:	701a      	strb	r2, [r3, #0]
    i /= base;
 8018702:	687b      	ldr	r3, [r7, #4]
 8018704:	68fa      	ldr	r2, [r7, #12]
 8018706:	fbb2 f3f3 	udiv	r3, r2, r3
 801870a:	60fb      	str	r3, [r7, #12]
  } while (i > 0);
 801870c:	68fb      	ldr	r3, [r7, #12]
 801870e:	2b00      	cmp	r3, #0
 8018710:	d000      	beq.n	8018714 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x54>
  do {
 8018712:	e7dd      	b.n	80186d0 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x10>
  *buffer = 0;
 8018714:	68bb      	ldr	r3, [r7, #8]
 8018716:	2200      	movs	r2, #0
 8018718:	701a      	strb	r2, [r3, #0]
  ReverseStringInPlace(start, buffer);
 801871a:	68b9      	ldr	r1, [r7, #8]
 801871c:	69b8      	ldr	r0, [r7, #24]
 801871e:	f7ff ff79 	bl	8018614 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>
  return buffer;
 8018722:	68bb      	ldr	r3, [r7, #8]
}
 8018724:	4618      	mov	r0, r3
 8018726:	3720      	adds	r7, #32
 8018728:	46bd      	mov	sp, r7
 801872a:	bd80      	pop	{r7, pc}

0801872c <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastInt32ToBufferLeft(int32_t i, char* buffer) {
 801872c:	b580      	push	{r7, lr}
 801872e:	b084      	sub	sp, #16
 8018730:	af00      	add	r7, sp, #0
 8018732:	6078      	str	r0, [r7, #4]
 8018734:	6039      	str	r1, [r7, #0]
  uint32_t u = i;
 8018736:	687b      	ldr	r3, [r7, #4]
 8018738:	60fb      	str	r3, [r7, #12]
  if (i < 0) {
 801873a:	687b      	ldr	r3, [r7, #4]
 801873c:	2b00      	cmp	r3, #0
 801873e:	da07      	bge.n	8018750 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc+0x24>
    *buffer++ = '-';
 8018740:	683b      	ldr	r3, [r7, #0]
 8018742:	1c5a      	adds	r2, r3, #1
 8018744:	603a      	str	r2, [r7, #0]
 8018746:	222d      	movs	r2, #45	; 0x2d
 8018748:	701a      	strb	r2, [r3, #0]
    u = -u;
 801874a:	68fb      	ldr	r3, [r7, #12]
 801874c:	425b      	negs	r3, r3
 801874e:	60fb      	str	r3, [r7, #12]
  }
  return FastUInt32ToBufferLeft(u, buffer, 10);
 8018750:	220a      	movs	r2, #10
 8018752:	6839      	ldr	r1, [r7, #0]
 8018754:	68f8      	ldr	r0, [r7, #12]
 8018756:	f7ff ffb3 	bl	80186c0 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 801875a:	4603      	mov	r3, r0
}
 801875c:	4618      	mov	r0, r3
 801875e:	3710      	adds	r7, #16
 8018760:	46bd      	mov	sp, r7
 8018762:	bd80      	pop	{r7, pc}

08018764 <_ZN12_GLOBAL__N_111StrCatInt32EPcil>:

// Converts a number to a string and appends it to another.
char* StrCatInt32(char* main, int main_max_length, int32_t number) {
 8018764:	b580      	push	{r7, lr}
 8018766:	b090      	sub	sp, #64	; 0x40
 8018768:	af00      	add	r7, sp, #0
 801876a:	60f8      	str	r0, [r7, #12]
 801876c:	60b9      	str	r1, [r7, #8]
 801876e:	607a      	str	r2, [r7, #4]
  char number_string[kFastToBufferSize];
  FastInt32ToBufferLeft(number, number_string);
 8018770:	f107 0310 	add.w	r3, r7, #16
 8018774:	4619      	mov	r1, r3
 8018776:	6878      	ldr	r0, [r7, #4]
 8018778:	f7ff ffd8 	bl	801872c <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>
  return StrCatStr(main, main_max_length, number_string);
 801877c:	f107 0310 	add.w	r3, r7, #16
 8018780:	461a      	mov	r2, r3
 8018782:	68b9      	ldr	r1, [r7, #8]
 8018784:	68f8      	ldr	r0, [r7, #12]
 8018786:	f7ff ff69 	bl	801865c <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 801878a:	4603      	mov	r3, r0
}
 801878c:	4618      	mov	r0, r3
 801878e:	3740      	adds	r7, #64	; 0x40
 8018790:	46bd      	mov	sp, r7
 8018792:	bd80      	pop	{r7, pc}

08018794 <_ZN12_GLOBAL__N_112StrCatUInt32EPcimi>:

// Converts a number to a string and appends it to another.
char* StrCatUInt32(char* main, int main_max_length, uint32_t number, int base) {
 8018794:	b580      	push	{r7, lr}
 8018796:	b090      	sub	sp, #64	; 0x40
 8018798:	af00      	add	r7, sp, #0
 801879a:	60f8      	str	r0, [r7, #12]
 801879c:	60b9      	str	r1, [r7, #8]
 801879e:	607a      	str	r2, [r7, #4]
 80187a0:	603b      	str	r3, [r7, #0]
  char number_string[kFastToBufferSize];
  FastUInt32ToBufferLeft(number, number_string, base);
 80187a2:	f107 0310 	add.w	r3, r7, #16
 80187a6:	683a      	ldr	r2, [r7, #0]
 80187a8:	4619      	mov	r1, r3
 80187aa:	6878      	ldr	r0, [r7, #4]
 80187ac:	f7ff ff88 	bl	80186c0 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
  return StrCatStr(main, main_max_length, number_string);
 80187b0:	f107 0310 	add.w	r3, r7, #16
 80187b4:	461a      	mov	r2, r3
 80187b6:	68b9      	ldr	r1, [r7, #8]
 80187b8:	68f8      	ldr	r0, [r7, #12]
 80187ba:	f7ff ff4f 	bl	801865c <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 80187be:	4603      	mov	r3, r0
}
 80187c0:	4618      	mov	r0, r3
 80187c2:	3740      	adds	r7, #64	; 0x40
 80187c4:	46bd      	mov	sp, r7
 80187c6:	bd80      	pop	{r7, pc}

080187c8 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>:

// Populates the provided buffer with ASCII representation of the float number.
// Avoids the use of any floating point instructions (since these aren't
// supported on many microcontrollers) and as a consequence prints values with
// power-of-two exponents.
char* FastFloatToBufferLeft(float f, char* buffer) {
 80187c8:	b590      	push	{r4, r7, lr}
 80187ca:	b095      	sub	sp, #84	; 0x54
 80187cc:	af00      	add	r7, sp, #0
 80187ce:	ed87 0a01 	vstr	s0, [r7, #4]
 80187d2:	6038      	str	r0, [r7, #0]
  char* current = buffer;
 80187d4:	683b      	ldr	r3, [r7, #0]
 80187d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  char* current_end = buffer + (kFastToBufferSize - 1);
 80187d8:	683b      	ldr	r3, [r7, #0]
 80187da:	332f      	adds	r3, #47	; 0x2f
 80187dc:	643b      	str	r3, [r7, #64]	; 0x40
  // Access the bit fields of the floating point value to avoid requiring any
  // float instructions. These constants are derived from IEEE 754.
  const uint32_t sign_mask = 0x80000000;
 80187de:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80187e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  const uint32_t exponent_mask = 0x7f800000;
 80187e4:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 80187e8:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32_t exponent_shift = 23;
 80187ea:	2317      	movs	r3, #23
 80187ec:	637b      	str	r3, [r7, #52]	; 0x34
  const int32_t exponent_bias = 127;
 80187ee:	237f      	movs	r3, #127	; 0x7f
 80187f0:	633b      	str	r3, [r7, #48]	; 0x30
  const uint32_t fraction_mask = 0x007fffff;
 80187f2:	4b42      	ldr	r3, [pc, #264]	; (80188fc <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x134>)
 80187f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  const uint32_t u = *reinterpret_cast<uint32_t*>(&f);
 80187f6:	1d3b      	adds	r3, r7, #4
 80187f8:	681b      	ldr	r3, [r3, #0]
 80187fa:	62bb      	str	r3, [r7, #40]	; 0x28
  const int32_t exponent =
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
 80187fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187fe:	0ddb      	lsrs	r3, r3, #23
 8018800:	b2db      	uxtb	r3, r3
 8018802:	3b7f      	subs	r3, #127	; 0x7f
  const int32_t exponent =
 8018804:	627b      	str	r3, [r7, #36]	; 0x24
  const uint32_t fraction = (u & fraction_mask);
 8018806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018808:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801880c:	623b      	str	r3, [r7, #32]
  // Expect ~0x2B1B9D3 for fraction.
  if (u & sign_mask) {
 801880e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018810:	2b00      	cmp	r3, #0
 8018812:	da05      	bge.n	8018820 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x58>
    *current = '-';
 8018814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018816:	222d      	movs	r2, #45	; 0x2d
 8018818:	701a      	strb	r2, [r3, #0]
    current += 1;
 801881a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801881c:	3301      	adds	r3, #1
 801881e:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  *current = 0;
 8018820:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018822:	2200      	movs	r2, #0
 8018824:	701a      	strb	r2, [r3, #0]
  // These are special cases for infinities and not-a-numbers.
  if (exponent == 128) {
 8018826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018828:	2b80      	cmp	r3, #128	; 0x80
 801882a:	d118      	bne.n	801885e <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x96>
    if (fraction == 0) {
 801882c:	6a3b      	ldr	r3, [r7, #32]
 801882e:	2b00      	cmp	r3, #0
 8018830:	d10a      	bne.n	8018848 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x80>
      current = StrCatStr(current, (current_end - current), "Inf");
 8018832:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8018834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018836:	1ad3      	subs	r3, r2, r3
 8018838:	4a31      	ldr	r2, [pc, #196]	; (8018900 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x138>)
 801883a:	4619      	mov	r1, r3
 801883c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801883e:	f7ff ff0d 	bl	801865c <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 8018842:	64f8      	str	r0, [r7, #76]	; 0x4c
      return current;
 8018844:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018846:	e054      	b.n	80188f2 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x12a>
    } else {
      current = StrCatStr(current, (current_end - current), "NaN");
 8018848:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801884a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801884c:	1ad3      	subs	r3, r2, r3
 801884e:	4a2d      	ldr	r2, [pc, #180]	; (8018904 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x13c>)
 8018850:	4619      	mov	r1, r3
 8018852:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8018854:	f7ff ff02 	bl	801865c <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 8018858:	64f8      	str	r0, [r7, #76]	; 0x4c
      return current;
 801885a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801885c:	e049      	b.n	80188f2 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x12a>
  // correct decimal digits we need to scale our value before passing it to the
  // conversion function. This scale should be 10000000/8388608 = 1.1920928955.
  // We can approximate this using multiply-adds and right-shifts using the
  // values in this array. The 1. portion of the number string is printed out
  // in a fixed way before the fraction, below.
  const int32_t scale_shifts_size = 13;
 801885e:	230d      	movs	r3, #13
 8018860:	61fb      	str	r3, [r7, #28]
  const int8_t scale_shifts[13] = {3,  4,  8,  11, 13, 14, 17,
 8018862:	4b29      	ldr	r3, [pc, #164]	; (8018908 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x140>)
 8018864:	f107 040c 	add.w	r4, r7, #12
 8018868:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801886a:	c407      	stmia	r4!, {r0, r1, r2}
 801886c:	7023      	strb	r3, [r4, #0]
                                   18, 19, 20, 21, 22, 23};
  uint32_t scaled_fraction = fraction;
 801886e:	6a3b      	ldr	r3, [r7, #32]
 8018870:	64bb      	str	r3, [r7, #72]	; 0x48
  for (int i = 0; i < scale_shifts_size; ++i) {
 8018872:	2300      	movs	r3, #0
 8018874:	647b      	str	r3, [r7, #68]	; 0x44
 8018876:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018878:	2b0c      	cmp	r3, #12
 801887a:	dc0f      	bgt.n	801889c <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xd4>
    scaled_fraction += (fraction >> scale_shifts[i]);
 801887c:	f107 020c 	add.w	r2, r7, #12
 8018880:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018882:	4413      	add	r3, r2
 8018884:	f993 3000 	ldrsb.w	r3, [r3]
 8018888:	461a      	mov	r2, r3
 801888a:	6a3b      	ldr	r3, [r7, #32]
 801888c:	40d3      	lsrs	r3, r2
 801888e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018890:	4413      	add	r3, r2
 8018892:	64bb      	str	r3, [r7, #72]	; 0x48
  for (int i = 0; i < scale_shifts_size; ++i) {
 8018894:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018896:	3301      	adds	r3, #1
 8018898:	647b      	str	r3, [r7, #68]	; 0x44
 801889a:	e7ec      	b.n	8018876 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xae>
  }
  *current = '1';
 801889c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801889e:	2231      	movs	r2, #49	; 0x31
 80188a0:	701a      	strb	r2, [r3, #0]
  current += 1;
 80188a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80188a4:	3301      	adds	r3, #1
 80188a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  *current = '.';
 80188a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80188aa:	222e      	movs	r2, #46	; 0x2e
 80188ac:	701a      	strb	r2, [r3, #0]
  current += 1;
 80188ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80188b0:	3301      	adds	r3, #1
 80188b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  *current = 0;
 80188b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80188b6:	2200      	movs	r2, #0
 80188b8:	701a      	strb	r2, [r3, #0]
  current = StrCatUInt32(current, (current_end - current), scaled_fraction, 10);
 80188ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80188bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80188be:	1ad1      	subs	r1, r2, r3
 80188c0:	230a      	movs	r3, #10
 80188c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80188c4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80188c6:	f7ff ff65 	bl	8018794 <_ZN12_GLOBAL__N_112StrCatUInt32EPcimi>
 80188ca:	64f8      	str	r0, [r7, #76]	; 0x4c
  current = StrCatStr(current, (current_end - current), "*2^");
 80188cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80188ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80188d0:	1ad3      	subs	r3, r2, r3
 80188d2:	4a0e      	ldr	r2, [pc, #56]	; (801890c <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x144>)
 80188d4:	4619      	mov	r1, r3
 80188d6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80188d8:	f7ff fec0 	bl	801865c <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 80188dc:	64f8      	str	r0, [r7, #76]	; 0x4c
  current = StrCatInt32(current, (current_end - current), exponent);
 80188de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80188e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80188e2:	1ad3      	subs	r3, r2, r3
 80188e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80188e6:	4619      	mov	r1, r3
 80188e8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80188ea:	f7ff ff3b 	bl	8018764 <_ZN12_GLOBAL__N_111StrCatInt32EPcil>
 80188ee:	64f8      	str	r0, [r7, #76]	; 0x4c
  return current;
 80188f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80188f2:	4618      	mov	r0, r3
 80188f4:	3754      	adds	r7, #84	; 0x54
 80188f6:	46bd      	mov	sp, r7
 80188f8:	bd90      	pop	{r4, r7, pc}
 80188fa:	bf00      	nop
 80188fc:	007fffff 	.word	0x007fffff
 8018900:	08023f60 	.word	0x08023f60
 8018904:	08023f64 	.word	0x08023f64
 8018908:	08023f6c 	.word	0x08023f6c
 801890c:	08023f68 	.word	0x08023f68

08018910 <_ZN12_GLOBAL__N_111FormatInt32EPcl>:

int FormatInt32(char* output, int32_t i) {
 8018910:	b580      	push	{r7, lr}
 8018912:	b082      	sub	sp, #8
 8018914:	af00      	add	r7, sp, #0
 8018916:	6078      	str	r0, [r7, #4]
 8018918:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastInt32ToBufferLeft(i, output) - output);
 801891a:	6879      	ldr	r1, [r7, #4]
 801891c:	6838      	ldr	r0, [r7, #0]
 801891e:	f7ff ff05 	bl	801872c <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>
 8018922:	4603      	mov	r3, r0
 8018924:	461a      	mov	r2, r3
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	1ad3      	subs	r3, r2, r3
}
 801892a:	4618      	mov	r0, r3
 801892c:	3708      	adds	r7, #8
 801892e:	46bd      	mov	sp, r7
 8018930:	bd80      	pop	{r7, pc}

08018932 <_ZN12_GLOBAL__N_112FormatUInt32EPcm>:

int FormatUInt32(char* output, uint32_t i) {
 8018932:	b580      	push	{r7, lr}
 8018934:	b082      	sub	sp, #8
 8018936:	af00      	add	r7, sp, #0
 8018938:	6078      	str	r0, [r7, #4]
 801893a:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 10) - output);
 801893c:	220a      	movs	r2, #10
 801893e:	6879      	ldr	r1, [r7, #4]
 8018940:	6838      	ldr	r0, [r7, #0]
 8018942:	f7ff febd 	bl	80186c0 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 8018946:	4603      	mov	r3, r0
 8018948:	461a      	mov	r2, r3
 801894a:	687b      	ldr	r3, [r7, #4]
 801894c:	1ad3      	subs	r3, r2, r3
}
 801894e:	4618      	mov	r0, r3
 8018950:	3708      	adds	r7, #8
 8018952:	46bd      	mov	sp, r7
 8018954:	bd80      	pop	{r7, pc}

08018956 <_ZN12_GLOBAL__N_19FormatHexEPcm>:

int FormatHex(char* output, uint32_t i) {
 8018956:	b580      	push	{r7, lr}
 8018958:	b082      	sub	sp, #8
 801895a:	af00      	add	r7, sp, #0
 801895c:	6078      	str	r0, [r7, #4]
 801895e:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 16) - output);
 8018960:	2210      	movs	r2, #16
 8018962:	6879      	ldr	r1, [r7, #4]
 8018964:	6838      	ldr	r0, [r7, #0]
 8018966:	f7ff feab 	bl	80186c0 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 801896a:	4603      	mov	r3, r0
 801896c:	461a      	mov	r2, r3
 801896e:	687b      	ldr	r3, [r7, #4]
 8018970:	1ad3      	subs	r3, r2, r3
}
 8018972:	4618      	mov	r0, r3
 8018974:	3708      	adds	r7, #8
 8018976:	46bd      	mov	sp, r7
 8018978:	bd80      	pop	{r7, pc}

0801897a <_ZN12_GLOBAL__N_111FormatFloatEPcf>:

int FormatFloat(char* output, float i) {
 801897a:	b580      	push	{r7, lr}
 801897c:	b082      	sub	sp, #8
 801897e:	af00      	add	r7, sp, #0
 8018980:	6078      	str	r0, [r7, #4]
 8018982:	ed87 0a00 	vstr	s0, [r7]
  return static_cast<int>(FastFloatToBufferLeft(i, output) - output);
 8018986:	6878      	ldr	r0, [r7, #4]
 8018988:	ed97 0a00 	vldr	s0, [r7]
 801898c:	f7ff ff1c 	bl	80187c8 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>
 8018990:	4603      	mov	r3, r0
 8018992:	461a      	mov	r2, r3
 8018994:	687b      	ldr	r3, [r7, #4]
 8018996:	1ad3      	subs	r3, r2, r3
}
 8018998:	4618      	mov	r0, r3
 801899a:	3708      	adds	r7, #8
 801899c:	46bd      	mov	sp, r7
 801899e:	bd80      	pop	{r7, pc}

080189a0 <MicroVsnprintf>:

}  // namespace

extern "C" int MicroVsnprintf(char* output, int len, const char* format,
                              va_list args) {
 80189a0:	b5b0      	push	{r4, r5, r7, lr}
 80189a2:	b08a      	sub	sp, #40	; 0x28
 80189a4:	af00      	add	r7, sp, #0
 80189a6:	60f8      	str	r0, [r7, #12]
 80189a8:	60b9      	str	r1, [r7, #8]
 80189aa:	607a      	str	r2, [r7, #4]
 80189ac:	603b      	str	r3, [r7, #0]
  int output_index = 0;
 80189ae:	2300      	movs	r3, #0
 80189b0:	627b      	str	r3, [r7, #36]	; 0x24
  const char* current = format;
 80189b2:	687b      	ldr	r3, [r7, #4]
 80189b4:	623b      	str	r3, [r7, #32]
  // One extra character must be left for the null terminator.
  const int usable_length = len - 1;
 80189b6:	68bb      	ldr	r3, [r7, #8]
 80189b8:	3b01      	subs	r3, #1
 80189ba:	61bb      	str	r3, [r7, #24]
  while (*current != '\0' && output_index < usable_length) {
 80189bc:	6a3b      	ldr	r3, [r7, #32]
 80189be:	781b      	ldrb	r3, [r3, #0]
 80189c0:	2b00      	cmp	r3, #0
 80189c2:	f000 8109 	beq.w	8018bd8 <MicroVsnprintf+0x238>
 80189c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80189c8:	69bb      	ldr	r3, [r7, #24]
 80189ca:	429a      	cmp	r2, r3
 80189cc:	f280 8104 	bge.w	8018bd8 <MicroVsnprintf+0x238>
    if (*current == '%') {
 80189d0:	6a3b      	ldr	r3, [r7, #32]
 80189d2:	781b      	ldrb	r3, [r3, #0]
 80189d4:	2b25      	cmp	r3, #37	; 0x25
 80189d6:	f040 80f3 	bne.w	8018bc0 <MicroVsnprintf+0x220>
      current++;
 80189da:	6a3b      	ldr	r3, [r7, #32]
 80189dc:	3301      	adds	r3, #1
 80189de:	623b      	str	r3, [r7, #32]
      switch (*current) {
 80189e0:	6a3b      	ldr	r3, [r7, #32]
 80189e2:	781b      	ldrb	r3, [r3, #0]
 80189e4:	2b66      	cmp	r3, #102	; 0x66
 80189e6:	f000 8083 	beq.w	8018af0 <MicroVsnprintf+0x150>
 80189ea:	2b66      	cmp	r3, #102	; 0x66
 80189ec:	dc05      	bgt.n	80189fa <MicroVsnprintf+0x5a>
 80189ee:	2b25      	cmp	r3, #37	; 0x25
 80189f0:	f000 80b4 	beq.w	8018b5c <MicroVsnprintf+0x1bc>
 80189f4:	2b64      	cmp	r3, #100	; 0x64
 80189f6:	d008      	beq.n	8018a0a <MicroVsnprintf+0x6a>
 80189f8:	e0ed      	b.n	8018bd6 <MicroVsnprintf+0x236>
 80189fa:	2b75      	cmp	r3, #117	; 0x75
 80189fc:	d026      	beq.n	8018a4c <MicroVsnprintf+0xac>
 80189fe:	2b78      	cmp	r3, #120	; 0x78
 8018a00:	d045      	beq.n	8018a8e <MicroVsnprintf+0xee>
 8018a02:	2b73      	cmp	r3, #115	; 0x73
 8018a04:	f000 80b6 	beq.w	8018b74 <MicroVsnprintf+0x1d4>
 8018a08:	e0e5      	b.n	8018bd6 <MicroVsnprintf+0x236>
        case 'd':
          // Cut off log message if format could exceed log buffer length.
          if (usable_length - output_index < kMaxIntCharsNeeded) {
 8018a0a:	69ba      	ldr	r2, [r7, #24]
 8018a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a0e:	1ad3      	subs	r3, r2, r3
 8018a10:	2b0a      	cmp	r3, #10
 8018a12:	dc09      	bgt.n	8018a28 <MicroVsnprintf+0x88>
            output[output_index++] = '\0';
 8018a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a16:	1c5a      	adds	r2, r3, #1
 8018a18:	627a      	str	r2, [r7, #36]	; 0x24
 8018a1a:	461a      	mov	r2, r3
 8018a1c:	68fb      	ldr	r3, [r7, #12]
 8018a1e:	4413      	add	r3, r2
 8018a20:	2200      	movs	r2, #0
 8018a22:	701a      	strb	r2, [r3, #0]
            return output_index;
 8018a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a26:	e0e0      	b.n	8018bea <MicroVsnprintf+0x24a>
          }
          output_index +=
              FormatInt32(&output[output_index], va_arg(args, int32_t));
 8018a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a2a:	68fa      	ldr	r2, [r7, #12]
 8018a2c:	18d0      	adds	r0, r2, r3
 8018a2e:	683b      	ldr	r3, [r7, #0]
 8018a30:	1d1a      	adds	r2, r3, #4
 8018a32:	603a      	str	r2, [r7, #0]
 8018a34:	681b      	ldr	r3, [r3, #0]
 8018a36:	4619      	mov	r1, r3
 8018a38:	f7ff ff6a 	bl	8018910 <_ZN12_GLOBAL__N_111FormatInt32EPcl>
 8018a3c:	4602      	mov	r2, r0
          output_index +=
 8018a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a40:	4413      	add	r3, r2
 8018a42:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 8018a44:	6a3b      	ldr	r3, [r7, #32]
 8018a46:	3301      	adds	r3, #1
 8018a48:	623b      	str	r3, [r7, #32]
          break;
 8018a4a:	e0c4      	b.n	8018bd6 <MicroVsnprintf+0x236>
        case 'u':
          if (usable_length - output_index < kMaxIntCharsNeeded) {
 8018a4c:	69ba      	ldr	r2, [r7, #24]
 8018a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a50:	1ad3      	subs	r3, r2, r3
 8018a52:	2b0a      	cmp	r3, #10
 8018a54:	dc09      	bgt.n	8018a6a <MicroVsnprintf+0xca>
            output[output_index++] = '\0';
 8018a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a58:	1c5a      	adds	r2, r3, #1
 8018a5a:	627a      	str	r2, [r7, #36]	; 0x24
 8018a5c:	461a      	mov	r2, r3
 8018a5e:	68fb      	ldr	r3, [r7, #12]
 8018a60:	4413      	add	r3, r2
 8018a62:	2200      	movs	r2, #0
 8018a64:	701a      	strb	r2, [r3, #0]
            return output_index;
 8018a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a68:	e0bf      	b.n	8018bea <MicroVsnprintf+0x24a>
          }
          output_index +=
              FormatUInt32(&output[output_index], va_arg(args, uint32_t));
 8018a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a6c:	68fa      	ldr	r2, [r7, #12]
 8018a6e:	18d0      	adds	r0, r2, r3
 8018a70:	683b      	ldr	r3, [r7, #0]
 8018a72:	1d1a      	adds	r2, r3, #4
 8018a74:	603a      	str	r2, [r7, #0]
 8018a76:	681b      	ldr	r3, [r3, #0]
 8018a78:	4619      	mov	r1, r3
 8018a7a:	f7ff ff5a 	bl	8018932 <_ZN12_GLOBAL__N_112FormatUInt32EPcm>
 8018a7e:	4602      	mov	r2, r0
          output_index +=
 8018a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a82:	4413      	add	r3, r2
 8018a84:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 8018a86:	6a3b      	ldr	r3, [r7, #32]
 8018a88:	3301      	adds	r3, #1
 8018a8a:	623b      	str	r3, [r7, #32]
          break;
 8018a8c:	e0a3      	b.n	8018bd6 <MicroVsnprintf+0x236>
        case 'x':
          if (usable_length - output_index < kMaxHexCharsNeeded) {
 8018a8e:	69ba      	ldr	r2, [r7, #24]
 8018a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a92:	1ad3      	subs	r3, r2, r3
 8018a94:	2b09      	cmp	r3, #9
 8018a96:	dc09      	bgt.n	8018aac <MicroVsnprintf+0x10c>
            output[output_index++] = '\0';
 8018a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a9a:	1c5a      	adds	r2, r3, #1
 8018a9c:	627a      	str	r2, [r7, #36]	; 0x24
 8018a9e:	461a      	mov	r2, r3
 8018aa0:	68fb      	ldr	r3, [r7, #12]
 8018aa2:	4413      	add	r3, r2
 8018aa4:	2200      	movs	r2, #0
 8018aa6:	701a      	strb	r2, [r3, #0]
            return output_index;
 8018aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018aaa:	e09e      	b.n	8018bea <MicroVsnprintf+0x24a>
          }
          output[output_index++] = '0';
 8018aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018aae:	1c5a      	adds	r2, r3, #1
 8018ab0:	627a      	str	r2, [r7, #36]	; 0x24
 8018ab2:	461a      	mov	r2, r3
 8018ab4:	68fb      	ldr	r3, [r7, #12]
 8018ab6:	4413      	add	r3, r2
 8018ab8:	2230      	movs	r2, #48	; 0x30
 8018aba:	701a      	strb	r2, [r3, #0]
          output[output_index++] = 'x';
 8018abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018abe:	1c5a      	adds	r2, r3, #1
 8018ac0:	627a      	str	r2, [r7, #36]	; 0x24
 8018ac2:	461a      	mov	r2, r3
 8018ac4:	68fb      	ldr	r3, [r7, #12]
 8018ac6:	4413      	add	r3, r2
 8018ac8:	2278      	movs	r2, #120	; 0x78
 8018aca:	701a      	strb	r2, [r3, #0]
          output_index +=
              FormatHex(&output[output_index], va_arg(args, uint32_t));
 8018acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ace:	68fa      	ldr	r2, [r7, #12]
 8018ad0:	18d0      	adds	r0, r2, r3
 8018ad2:	683b      	ldr	r3, [r7, #0]
 8018ad4:	1d1a      	adds	r2, r3, #4
 8018ad6:	603a      	str	r2, [r7, #0]
 8018ad8:	681b      	ldr	r3, [r3, #0]
 8018ada:	4619      	mov	r1, r3
 8018adc:	f7ff ff3b 	bl	8018956 <_ZN12_GLOBAL__N_19FormatHexEPcm>
 8018ae0:	4602      	mov	r2, r0
          output_index +=
 8018ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ae4:	4413      	add	r3, r2
 8018ae6:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 8018ae8:	6a3b      	ldr	r3, [r7, #32]
 8018aea:	3301      	adds	r3, #1
 8018aec:	623b      	str	r3, [r7, #32]
          break;
 8018aee:	e072      	b.n	8018bd6 <MicroVsnprintf+0x236>
        case 'f':
          if (usable_length - output_index < kMaxFloatCharsNeeded) {
 8018af0:	69ba      	ldr	r2, [r7, #24]
 8018af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018af4:	1ad3      	subs	r3, r2, r3
 8018af6:	ee07 3a90 	vmov	s15, r3
 8018afa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018afe:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8018b02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8018b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b0a:	d509      	bpl.n	8018b20 <MicroVsnprintf+0x180>
            output[output_index++] = '\0';
 8018b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b0e:	1c5a      	adds	r2, r3, #1
 8018b10:	627a      	str	r2, [r7, #36]	; 0x24
 8018b12:	461a      	mov	r2, r3
 8018b14:	68fb      	ldr	r3, [r7, #12]
 8018b16:	4413      	add	r3, r2
 8018b18:	2200      	movs	r2, #0
 8018b1a:	701a      	strb	r2, [r3, #0]
            return output_index;
 8018b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b1e:	e064      	b.n	8018bea <MicroVsnprintf+0x24a>
          }
          output_index +=
              FormatFloat(&output[output_index], va_arg(args, double));
 8018b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b22:	68fa      	ldr	r2, [r7, #12]
 8018b24:	18d5      	adds	r5, r2, r3
 8018b26:	683b      	ldr	r3, [r7, #0]
 8018b28:	3307      	adds	r3, #7
 8018b2a:	f023 0307 	bic.w	r3, r3, #7
 8018b2e:	f103 0208 	add.w	r2, r3, #8
 8018b32:	603a      	str	r2, [r7, #0]
 8018b34:	e9d3 3400 	ldrd	r3, r4, [r3]
 8018b38:	4618      	mov	r0, r3
 8018b3a:	4621      	mov	r1, r4
 8018b3c:	f7e8 f822 	bl	8000b84 <__aeabi_d2f>
 8018b40:	4603      	mov	r3, r0
 8018b42:	ee00 3a10 	vmov	s0, r3
 8018b46:	4628      	mov	r0, r5
 8018b48:	f7ff ff17 	bl	801897a <_ZN12_GLOBAL__N_111FormatFloatEPcf>
 8018b4c:	4602      	mov	r2, r0
          output_index +=
 8018b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b50:	4413      	add	r3, r2
 8018b52:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 8018b54:	6a3b      	ldr	r3, [r7, #32]
 8018b56:	3301      	adds	r3, #1
 8018b58:	623b      	str	r3, [r7, #32]
          break;
 8018b5a:	e03c      	b.n	8018bd6 <MicroVsnprintf+0x236>
        case '%':
          output[output_index++] = *current++;
 8018b5c:	6a3b      	ldr	r3, [r7, #32]
 8018b5e:	1c5a      	adds	r2, r3, #1
 8018b60:	623a      	str	r2, [r7, #32]
 8018b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018b64:	1c51      	adds	r1, r2, #1
 8018b66:	6279      	str	r1, [r7, #36]	; 0x24
 8018b68:	4611      	mov	r1, r2
 8018b6a:	68fa      	ldr	r2, [r7, #12]
 8018b6c:	440a      	add	r2, r1
 8018b6e:	781b      	ldrb	r3, [r3, #0]
 8018b70:	7013      	strb	r3, [r2, #0]
          break;
 8018b72:	e030      	b.n	8018bd6 <MicroVsnprintf+0x236>
        case 's':
          char* string = va_arg(args, char*);
 8018b74:	683b      	ldr	r3, [r7, #0]
 8018b76:	1d1a      	adds	r2, r3, #4
 8018b78:	603a      	str	r2, [r7, #0]
 8018b7a:	681b      	ldr	r3, [r3, #0]
 8018b7c:	617b      	str	r3, [r7, #20]
          int string_idx = 0;
 8018b7e:	2300      	movs	r3, #0
 8018b80:	61fb      	str	r3, [r7, #28]
          while (string_idx + output_index < usable_length &&
 8018b82:	69fa      	ldr	r2, [r7, #28]
 8018b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b86:	4413      	add	r3, r2
 8018b88:	69ba      	ldr	r2, [r7, #24]
 8018b8a:	429a      	cmp	r2, r3
 8018b8c:	dd14      	ble.n	8018bb8 <MicroVsnprintf+0x218>
                 string[string_idx] != '\0') {
 8018b8e:	69fb      	ldr	r3, [r7, #28]
 8018b90:	697a      	ldr	r2, [r7, #20]
 8018b92:	4413      	add	r3, r2
 8018b94:	781b      	ldrb	r3, [r3, #0]
          while (string_idx + output_index < usable_length &&
 8018b96:	2b00      	cmp	r3, #0
 8018b98:	d00e      	beq.n	8018bb8 <MicroVsnprintf+0x218>
            output[output_index++] = string[string_idx++];
 8018b9a:	69fb      	ldr	r3, [r7, #28]
 8018b9c:	1c5a      	adds	r2, r3, #1
 8018b9e:	61fa      	str	r2, [r7, #28]
 8018ba0:	461a      	mov	r2, r3
 8018ba2:	697b      	ldr	r3, [r7, #20]
 8018ba4:	441a      	add	r2, r3
 8018ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ba8:	1c59      	adds	r1, r3, #1
 8018baa:	6279      	str	r1, [r7, #36]	; 0x24
 8018bac:	4619      	mov	r1, r3
 8018bae:	68fb      	ldr	r3, [r7, #12]
 8018bb0:	440b      	add	r3, r1
 8018bb2:	7812      	ldrb	r2, [r2, #0]
 8018bb4:	701a      	strb	r2, [r3, #0]
          while (string_idx + output_index < usable_length &&
 8018bb6:	e7e4      	b.n	8018b82 <MicroVsnprintf+0x1e2>
          }
          current++;
 8018bb8:	6a3b      	ldr	r3, [r7, #32]
 8018bba:	3301      	adds	r3, #1
 8018bbc:	623b      	str	r3, [r7, #32]
 8018bbe:	e6fd      	b.n	80189bc <MicroVsnprintf+0x1c>
      }
    } else {
      output[output_index++] = *current++;
 8018bc0:	6a3b      	ldr	r3, [r7, #32]
 8018bc2:	1c5a      	adds	r2, r3, #1
 8018bc4:	623a      	str	r2, [r7, #32]
 8018bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018bc8:	1c51      	adds	r1, r2, #1
 8018bca:	6279      	str	r1, [r7, #36]	; 0x24
 8018bcc:	4611      	mov	r1, r2
 8018bce:	68fa      	ldr	r2, [r7, #12]
 8018bd0:	440a      	add	r2, r1
 8018bd2:	781b      	ldrb	r3, [r3, #0]
 8018bd4:	7013      	strb	r3, [r2, #0]
  while (*current != '\0' && output_index < usable_length) {
 8018bd6:	e6f1      	b.n	80189bc <MicroVsnprintf+0x1c>
    }
  }
  output[output_index++] = '\0';
 8018bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bda:	1c5a      	adds	r2, r3, #1
 8018bdc:	627a      	str	r2, [r7, #36]	; 0x24
 8018bde:	461a      	mov	r2, r3
 8018be0:	68fb      	ldr	r3, [r7, #12]
 8018be2:	4413      	add	r3, r2
 8018be4:	2200      	movs	r2, #0
 8018be6:	701a      	strb	r2, [r3, #0]
  return output_index;
 8018be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018bea:	4618      	mov	r0, r3
 8018bec:	3728      	adds	r7, #40	; 0x28
 8018bee:	46bd      	mov	sp, r7
 8018bf0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08018bf4 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>:
#include "tensorflow/lite/core/api/error_reporter.h"
#include "tensorflow/lite/micro/memory_helpers.h"

namespace tflite {

SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
 8018bf4:	b480      	push	{r7}
 8018bf6:	b085      	sub	sp, #20
 8018bf8:	af00      	add	r7, sp, #0
 8018bfa:	60f8      	str	r0, [r7, #12]
 8018bfc:	60b9      	str	r1, [r7, #8]
 8018bfe:	607a      	str	r2, [r7, #4]
 8018c00:	603b      	str	r3, [r7, #0]
                                             uint8_t* buffer_tail)
    : error_reporter_(error_reporter),
      buffer_head_(buffer_head),
      buffer_tail_(buffer_tail),
      head_(buffer_head),
      tail_(buffer_tail) {}
 8018c02:	4a0c      	ldr	r2, [pc, #48]	; (8018c34 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_+0x40>)
 8018c04:	68fb      	ldr	r3, [r7, #12]
 8018c06:	601a      	str	r2, [r3, #0]
 8018c08:	68fb      	ldr	r3, [r7, #12]
 8018c0a:	68ba      	ldr	r2, [r7, #8]
 8018c0c:	605a      	str	r2, [r3, #4]
 8018c0e:	68fb      	ldr	r3, [r7, #12]
 8018c10:	687a      	ldr	r2, [r7, #4]
 8018c12:	609a      	str	r2, [r3, #8]
 8018c14:	68fb      	ldr	r3, [r7, #12]
 8018c16:	683a      	ldr	r2, [r7, #0]
 8018c18:	60da      	str	r2, [r3, #12]
 8018c1a:	68fb      	ldr	r3, [r7, #12]
 8018c1c:	687a      	ldr	r2, [r7, #4]
 8018c1e:	611a      	str	r2, [r3, #16]
 8018c20:	68fb      	ldr	r3, [r7, #12]
 8018c22:	683a      	ldr	r2, [r7, #0]
 8018c24:	615a      	str	r2, [r3, #20]
 8018c26:	68fb      	ldr	r3, [r7, #12]
 8018c28:	4618      	mov	r0, r3
 8018c2a:	3714      	adds	r7, #20
 8018c2c:	46bd      	mov	sp, r7
 8018c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c32:	4770      	bx	lr
 8018c34:	08025f84 	.word	0x08025f84

08018c38 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>:

SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
 8018c38:	b580      	push	{r7, lr}
 8018c3a:	b084      	sub	sp, #16
 8018c3c:	af00      	add	r7, sp, #0
 8018c3e:	60f8      	str	r0, [r7, #12]
 8018c40:	60b9      	str	r1, [r7, #8]
 8018c42:	607a      	str	r2, [r7, #4]
 8018c44:	603b      	str	r3, [r7, #0]
                                             uint8_t* buffer,
                                             size_t buffer_size)
    : SimpleMemoryAllocator(error_reporter, buffer, buffer + buffer_size) {}
 8018c46:	687a      	ldr	r2, [r7, #4]
 8018c48:	683b      	ldr	r3, [r7, #0]
 8018c4a:	4413      	add	r3, r2
 8018c4c:	687a      	ldr	r2, [r7, #4]
 8018c4e:	68b9      	ldr	r1, [r7, #8]
 8018c50:	68f8      	ldr	r0, [r7, #12]
 8018c52:	f7ff ffcf 	bl	8018bf4 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>
 8018c56:	68fb      	ldr	r3, [r7, #12]
 8018c58:	4618      	mov	r0, r3
 8018c5a:	3710      	adds	r7, #16
 8018c5c:	46bd      	mov	sp, r7
 8018c5e:	bd80      	pop	{r7, pc}

08018c60 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>:

/* static */
SimpleMemoryAllocator* SimpleMemoryAllocator::Create(
    ErrorReporter* error_reporter, uint8_t* buffer_head, size_t buffer_size) {
 8018c60:	b590      	push	{r4, r7, lr}
 8018c62:	b08d      	sub	sp, #52	; 0x34
 8018c64:	af00      	add	r7, sp, #0
 8018c66:	60f8      	str	r0, [r7, #12]
 8018c68:	60b9      	str	r1, [r7, #8]
 8018c6a:	607a      	str	r2, [r7, #4]
  SimpleMemoryAllocator tmp =
      SimpleMemoryAllocator(error_reporter, buffer_head, buffer_size);
 8018c6c:	f107 0014 	add.w	r0, r7, #20
 8018c70:	687b      	ldr	r3, [r7, #4]
 8018c72:	68ba      	ldr	r2, [r7, #8]
 8018c74:	68f9      	ldr	r1, [r7, #12]
 8018c76:	f7ff ffdf 	bl	8018c38 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>

  // Allocate enough bytes from the buffer to create a SimpleMemoryAllocator.
  // The new instance will use the current adjusted tail buffer from the tmp
  // allocator instance.
  uint8_t* allocator_buffer = tmp.AllocateFromTail(
      sizeof(SimpleMemoryAllocator), alignof(SimpleMemoryAllocator));
 8018c7a:	f107 0314 	add.w	r3, r7, #20
 8018c7e:	2204      	movs	r2, #4
 8018c80:	2118      	movs	r1, #24
 8018c82:	4618      	mov	r0, r3
 8018c84:	f000 f86a 	bl	8018d5c <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>
 8018c88:	62f8      	str	r0, [r7, #44]	; 0x2c
  return new (allocator_buffer)
      SimpleMemoryAllocator(error_reporter, tmp.head_, tmp.tail_);
 8018c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c8c:	4619      	mov	r1, r3
 8018c8e:	2018      	movs	r0, #24
 8018c90:	f7ec fbcf 	bl	8005432 <_ZnwjPv>
 8018c94:	4604      	mov	r4, r0
 8018c96:	2c00      	cmp	r4, #0
 8018c98:	d005      	beq.n	8018ca6 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x46>
 8018c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c9e:	68f9      	ldr	r1, [r7, #12]
 8018ca0:	4620      	mov	r0, r4
 8018ca2:	f7ff ffa7 	bl	8018bf4 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>
      SimpleMemoryAllocator(error_reporter, buffer_head, buffer_size);
 8018ca6:	f107 0314 	add.w	r3, r7, #20
 8018caa:	4618      	mov	r0, r3
 8018cac:	f000 f806 	bl	8018cbc <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
      SimpleMemoryAllocator(error_reporter, tmp.head_, tmp.tail_);
 8018cb0:	4623      	mov	r3, r4
}
 8018cb2:	4618      	mov	r0, r3
 8018cb4:	3734      	adds	r7, #52	; 0x34
 8018cb6:	46bd      	mov	sp, r7
 8018cb8:	bd90      	pop	{r4, r7, pc}
	...

08018cbc <_ZN6tflite21SimpleMemoryAllocatorD1Ev>:

SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
 8018cbc:	b480      	push	{r7}
 8018cbe:	b083      	sub	sp, #12
 8018cc0:	af00      	add	r7, sp, #0
 8018cc2:	6078      	str	r0, [r7, #4]
 8018cc4:	4a04      	ldr	r2, [pc, #16]	; (8018cd8 <_ZN6tflite21SimpleMemoryAllocatorD1Ev+0x1c>)
 8018cc6:	687b      	ldr	r3, [r7, #4]
 8018cc8:	601a      	str	r2, [r3, #0]
 8018cca:	687b      	ldr	r3, [r7, #4]
 8018ccc:	4618      	mov	r0, r3
 8018cce:	370c      	adds	r7, #12
 8018cd0:	46bd      	mov	sp, r7
 8018cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cd6:	4770      	bx	lr
 8018cd8:	08025f84 	.word	0x08025f84

08018cdc <_ZN6tflite21SimpleMemoryAllocatorD0Ev>:
 8018cdc:	b580      	push	{r7, lr}
 8018cde:	b082      	sub	sp, #8
 8018ce0:	af00      	add	r7, sp, #0
 8018ce2:	6078      	str	r0, [r7, #4]
 8018ce4:	6878      	ldr	r0, [r7, #4]
 8018ce6:	f7ff ffe9 	bl	8018cbc <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
 8018cea:	2118      	movs	r1, #24
 8018cec:	6878      	ldr	r0, [r7, #4]
 8018cee:	f005 fe26 	bl	801e93e <_ZdlPvj>
 8018cf2:	687b      	ldr	r3, [r7, #4]
 8018cf4:	4618      	mov	r0, r3
 8018cf6:	3708      	adds	r7, #8
 8018cf8:	46bd      	mov	sp, r7
 8018cfa:	bd80      	pop	{r7, pc}

08018cfc <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj>:

uint8_t* SimpleMemoryAllocator::AllocateFromHead(size_t size,
                                                 size_t alignment) {
 8018cfc:	b580      	push	{r7, lr}
 8018cfe:	b088      	sub	sp, #32
 8018d00:	af02      	add	r7, sp, #8
 8018d02:	60f8      	str	r0, [r7, #12]
 8018d04:	60b9      	str	r1, [r7, #8]
 8018d06:	607a      	str	r2, [r7, #4]
  uint8_t* const aligned_result = AlignPointerUp(head_, alignment);
 8018d08:	68fb      	ldr	r3, [r7, #12]
 8018d0a:	691b      	ldr	r3, [r3, #16]
 8018d0c:	6879      	ldr	r1, [r7, #4]
 8018d0e:	4618      	mov	r0, r3
 8018d10:	f7fd f896 	bl	8015e40 <_ZN6tflite14AlignPointerUpEPhj>
 8018d14:	6178      	str	r0, [r7, #20]
  const size_t available_memory = tail_ - aligned_result;
 8018d16:	68fb      	ldr	r3, [r7, #12]
 8018d18:	695b      	ldr	r3, [r3, #20]
 8018d1a:	461a      	mov	r2, r3
 8018d1c:	697b      	ldr	r3, [r7, #20]
 8018d1e:	1ad3      	subs	r3, r2, r3
 8018d20:	613b      	str	r3, [r7, #16]
  if (available_memory < size) {
 8018d22:	693a      	ldr	r2, [r7, #16]
 8018d24:	68bb      	ldr	r3, [r7, #8]
 8018d26:	429a      	cmp	r2, r3
 8018d28:	d20c      	bcs.n	8018d44 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj+0x48>
    TF_LITE_REPORT_ERROR(
 8018d2a:	68fb      	ldr	r3, [r7, #12]
 8018d2c:	6858      	ldr	r0, [r3, #4]
 8018d2e:	68ba      	ldr	r2, [r7, #8]
 8018d30:	693b      	ldr	r3, [r7, #16]
 8018d32:	1ad3      	subs	r3, r2, r3
 8018d34:	9300      	str	r3, [sp, #0]
 8018d36:	693b      	ldr	r3, [r7, #16]
 8018d38:	68ba      	ldr	r2, [r7, #8]
 8018d3a:	4907      	ldr	r1, [pc, #28]	; (8018d58 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj+0x5c>)
 8018d3c:	f7ec fb46 	bl	80053cc <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory. Requested: %u, available %u, missing: %u",
        size, available_memory, size - available_memory);
    return nullptr;
 8018d40:	2300      	movs	r3, #0
 8018d42:	e005      	b.n	8018d50 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj+0x54>
  }
  head_ = aligned_result + size;
 8018d44:	697a      	ldr	r2, [r7, #20]
 8018d46:	68bb      	ldr	r3, [r7, #8]
 8018d48:	441a      	add	r2, r3
 8018d4a:	68fb      	ldr	r3, [r7, #12]
 8018d4c:	611a      	str	r2, [r3, #16]
  return aligned_result;
 8018d4e:	697b      	ldr	r3, [r7, #20]
}
 8018d50:	4618      	mov	r0, r3
 8018d52:	3718      	adds	r7, #24
 8018d54:	46bd      	mov	sp, r7
 8018d56:	bd80      	pop	{r7, pc}
 8018d58:	08023f90 	.word	0x08023f90

08018d5c <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>:

uint8_t* SimpleMemoryAllocator::AllocateFromTail(size_t size,
                                                 size_t alignment) {
 8018d5c:	b580      	push	{r7, lr}
 8018d5e:	b088      	sub	sp, #32
 8018d60:	af02      	add	r7, sp, #8
 8018d62:	60f8      	str	r0, [r7, #12]
 8018d64:	60b9      	str	r1, [r7, #8]
 8018d66:	607a      	str	r2, [r7, #4]
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
 8018d68:	68fb      	ldr	r3, [r7, #12]
 8018d6a:	695a      	ldr	r2, [r3, #20]
 8018d6c:	68bb      	ldr	r3, [r7, #8]
 8018d6e:	425b      	negs	r3, r3
 8018d70:	4413      	add	r3, r2
 8018d72:	6879      	ldr	r1, [r7, #4]
 8018d74:	4618      	mov	r0, r3
 8018d76:	f7fd f87c 	bl	8015e72 <_ZN6tflite16AlignPointerDownEPhj>
 8018d7a:	6178      	str	r0, [r7, #20]
  if (aligned_result < head_) {
 8018d7c:	68fb      	ldr	r3, [r7, #12]
 8018d7e:	691b      	ldr	r3, [r3, #16]
 8018d80:	697a      	ldr	r2, [r7, #20]
 8018d82:	429a      	cmp	r2, r3
 8018d84:	d213      	bcs.n	8018dae <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x52>
    const size_t missing_memory = head_ - aligned_result;
 8018d86:	68fb      	ldr	r3, [r7, #12]
 8018d88:	691b      	ldr	r3, [r3, #16]
 8018d8a:	461a      	mov	r2, r3
 8018d8c:	697b      	ldr	r3, [r7, #20]
 8018d8e:	1ad3      	subs	r3, r2, r3
 8018d90:	613b      	str	r3, [r7, #16]
    TF_LITE_REPORT_ERROR(
 8018d92:	68fb      	ldr	r3, [r7, #12]
 8018d94:	6858      	ldr	r0, [r3, #4]
 8018d96:	68ba      	ldr	r2, [r7, #8]
 8018d98:	693b      	ldr	r3, [r7, #16]
 8018d9a:	1ad2      	subs	r2, r2, r3
 8018d9c:	693b      	ldr	r3, [r7, #16]
 8018d9e:	9300      	str	r3, [sp, #0]
 8018da0:	4613      	mov	r3, r2
 8018da2:	68ba      	ldr	r2, [r7, #8]
 8018da4:	4906      	ldr	r1, [pc, #24]	; (8018dc0 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x64>)
 8018da6:	f7ec fb11 	bl	80053cc <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory. Requested: %u, available %u, missing: %u",
        size, size - missing_memory, missing_memory);
    return nullptr;
 8018daa:	2300      	movs	r3, #0
 8018dac:	e003      	b.n	8018db6 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x5a>
  }
  tail_ = aligned_result;
 8018dae:	68fb      	ldr	r3, [r7, #12]
 8018db0:	697a      	ldr	r2, [r7, #20]
 8018db2:	615a      	str	r2, [r3, #20]
  return aligned_result;
 8018db4:	697b      	ldr	r3, [r7, #20]
}
 8018db6:	4618      	mov	r0, r3
 8018db8:	3718      	adds	r7, #24
 8018dba:	46bd      	mov	sp, r7
 8018dbc:	bd80      	pop	{r7, pc}
 8018dbe:	bf00      	nop
 8018dc0:	08023f90 	.word	0x08023f90

08018dc4 <_ZNK6tflite21SimpleMemoryAllocator7GetHeadEv>:

uint8_t* SimpleMemoryAllocator::GetHead() const { return head_; }
 8018dc4:	b480      	push	{r7}
 8018dc6:	b083      	sub	sp, #12
 8018dc8:	af00      	add	r7, sp, #0
 8018dca:	6078      	str	r0, [r7, #4]
 8018dcc:	687b      	ldr	r3, [r7, #4]
 8018dce:	691b      	ldr	r3, [r3, #16]
 8018dd0:	4618      	mov	r0, r3
 8018dd2:	370c      	adds	r7, #12
 8018dd4:	46bd      	mov	sp, r7
 8018dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dda:	4770      	bx	lr

08018ddc <_ZNK6tflite21SimpleMemoryAllocator7GetTailEv>:

uint8_t* SimpleMemoryAllocator::GetTail() const { return tail_; }
 8018ddc:	b480      	push	{r7}
 8018dde:	b083      	sub	sp, #12
 8018de0:	af00      	add	r7, sp, #0
 8018de2:	6078      	str	r0, [r7, #4]
 8018de4:	687b      	ldr	r3, [r7, #4]
 8018de6:	695b      	ldr	r3, [r3, #20]
 8018de8:	4618      	mov	r0, r3
 8018dea:	370c      	adds	r7, #12
 8018dec:	46bd      	mov	sp, r7
 8018dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018df2:	4770      	bx	lr

08018df4 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEv>:

size_t SimpleMemoryAllocator::GetTailUsedBytes() const {
  return buffer_tail_ - tail_;
}

size_t SimpleMemoryAllocator::GetAvailableMemory() const {
 8018df4:	b480      	push	{r7}
 8018df6:	b083      	sub	sp, #12
 8018df8:	af00      	add	r7, sp, #0
 8018dfa:	6078      	str	r0, [r7, #4]
  return tail_ - head_;
 8018dfc:	687b      	ldr	r3, [r7, #4]
 8018dfe:	695b      	ldr	r3, [r3, #20]
 8018e00:	461a      	mov	r2, r3
 8018e02:	687b      	ldr	r3, [r7, #4]
 8018e04:	691b      	ldr	r3, [r3, #16]
 8018e06:	1ad3      	subs	r3, r2, r3
}
 8018e08:	4618      	mov	r0, r3
 8018e0a:	370c      	adds	r7, #12
 8018e0c:	46bd      	mov	sp, r7
 8018e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e12:	4770      	bx	lr

08018e14 <_ZN6tflite12RuntimeShapeC1Ev>:
  // larger shapes are separately allocated.
  static constexpr int kMaxSmallSize = 5;

  RuntimeShape& operator=(RuntimeShape const&) = delete;

  RuntimeShape() : size_(0) {}
 8018e14:	b480      	push	{r7}
 8018e16:	b083      	sub	sp, #12
 8018e18:	af00      	add	r7, sp, #0
 8018e1a:	6078      	str	r0, [r7, #4]
 8018e1c:	687b      	ldr	r3, [r7, #4]
 8018e1e:	2200      	movs	r2, #0
 8018e20:	601a      	str	r2, [r3, #0]
 8018e22:	687b      	ldr	r3, [r7, #4]
 8018e24:	4618      	mov	r0, r3
 8018e26:	370c      	adds	r7, #12
 8018e28:	46bd      	mov	sp, r7
 8018e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e2e:	4770      	bx	lr

08018e30 <_ZN6tflite12RuntimeShapeC1EiPKl>:
    for (int i = 0; i < shape_size; ++i) {
      SetDim(i, value);
    }
  }

  RuntimeShape(int dimensions_count, const int32* dims_data) : size_(0) {
 8018e30:	b580      	push	{r7, lr}
 8018e32:	b084      	sub	sp, #16
 8018e34:	af00      	add	r7, sp, #0
 8018e36:	60f8      	str	r0, [r7, #12]
 8018e38:	60b9      	str	r1, [r7, #8]
 8018e3a:	607a      	str	r2, [r7, #4]
 8018e3c:	68fb      	ldr	r3, [r7, #12]
 8018e3e:	2200      	movs	r2, #0
 8018e40:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 8018e42:	687a      	ldr	r2, [r7, #4]
 8018e44:	68b9      	ldr	r1, [r7, #8]
 8018e46:	68f8      	ldr	r0, [r7, #12]
 8018e48:	f000 f8a0 	bl	8018f8c <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 8018e4c:	68fb      	ldr	r3, [r7, #12]
 8018e4e:	4618      	mov	r0, r3
 8018e50:	3710      	adds	r7, #16
 8018e52:	46bd      	mov	sp, r7
 8018e54:	bd80      	pop	{r7, pc}

08018e56 <_ZN6tflite12RuntimeShapeD1Ev>:
  bool operator==(const RuntimeShape& comp) const {
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32)) == 0;
  }

  ~RuntimeShape() {
 8018e56:	b580      	push	{r7, lr}
 8018e58:	b082      	sub	sp, #8
 8018e5a:	af00      	add	r7, sp, #0
 8018e5c:	6078      	str	r0, [r7, #4]
    if (size_ > kMaxSmallSize) {
 8018e5e:	687b      	ldr	r3, [r7, #4]
 8018e60:	681b      	ldr	r3, [r3, #0]
 8018e62:	2b05      	cmp	r3, #5
 8018e64:	dd08      	ble.n	8018e78 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else   // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 8018e66:	687b      	ldr	r3, [r7, #4]
 8018e68:	685b      	ldr	r3, [r3, #4]
 8018e6a:	2b00      	cmp	r3, #0
 8018e6c:	d004      	beq.n	8018e78 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
 8018e6e:	687b      	ldr	r3, [r7, #4]
 8018e70:	685b      	ldr	r3, [r3, #4]
 8018e72:	4618      	mov	r0, r3
 8018e74:	f005 fd5c 	bl	801e930 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 8018e78:	687b      	ldr	r3, [r7, #4]
 8018e7a:	4618      	mov	r0, r3
 8018e7c:	3708      	adds	r7, #8
 8018e7e:	46bd      	mov	sp, r7
 8018e80:	bd80      	pop	{r7, pc}

08018e82 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:

  inline int32 DimensionsCount() const { return size_; }
 8018e82:	b480      	push	{r7}
 8018e84:	b083      	sub	sp, #12
 8018e86:	af00      	add	r7, sp, #0
 8018e88:	6078      	str	r0, [r7, #4]
 8018e8a:	687b      	ldr	r3, [r7, #4]
 8018e8c:	681b      	ldr	r3, [r3, #0]
 8018e8e:	4618      	mov	r0, r3
 8018e90:	370c      	adds	r7, #12
 8018e92:	46bd      	mov	sp, r7
 8018e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e98:	4770      	bx	lr

08018e9a <_ZNK6tflite12RuntimeShape4DimsEi>:
  inline int32 Dims(int i) const {
 8018e9a:	b580      	push	{r7, lr}
 8018e9c:	b082      	sub	sp, #8
 8018e9e:	af00      	add	r7, sp, #0
 8018ea0:	6078      	str	r0, [r7, #4]
 8018ea2:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 8018ea4:	683b      	ldr	r3, [r7, #0]
 8018ea6:	2b00      	cmp	r3, #0
 8018ea8:	da01      	bge.n	8018eae <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 8018eaa:	f005 ffd1 	bl	801ee50 <abort>
    TFLITE_DCHECK_LT(i, size_);
 8018eae:	687b      	ldr	r3, [r7, #4]
 8018eb0:	681a      	ldr	r2, [r3, #0]
 8018eb2:	683b      	ldr	r3, [r7, #0]
 8018eb4:	429a      	cmp	r2, r3
 8018eb6:	dc01      	bgt.n	8018ebc <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 8018eb8:	f005 ffca 	bl	801ee50 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8018ebc:	687b      	ldr	r3, [r7, #4]
 8018ebe:	681b      	ldr	r3, [r3, #0]
 8018ec0:	2b05      	cmp	r3, #5
 8018ec2:	dd06      	ble.n	8018ed2 <_ZNK6tflite12RuntimeShape4DimsEi+0x38>
 8018ec4:	687b      	ldr	r3, [r7, #4]
 8018ec6:	685a      	ldr	r2, [r3, #4]
 8018ec8:	683b      	ldr	r3, [r7, #0]
 8018eca:	009b      	lsls	r3, r3, #2
 8018ecc:	4413      	add	r3, r2
 8018ece:	681b      	ldr	r3, [r3, #0]
 8018ed0:	e004      	b.n	8018edc <_ZNK6tflite12RuntimeShape4DimsEi+0x42>
 8018ed2:	683b      	ldr	r3, [r7, #0]
 8018ed4:	687a      	ldr	r2, [r7, #4]
 8018ed6:	009b      	lsls	r3, r3, #2
 8018ed8:	4413      	add	r3, r2
 8018eda:	685b      	ldr	r3, [r3, #4]
  }
 8018edc:	4618      	mov	r0, r3
 8018ede:	3708      	adds	r7, #8
 8018ee0:	46bd      	mov	sp, r7
 8018ee2:	bd80      	pop	{r7, pc}

08018ee4 <_ZN6tflite12RuntimeShape8DimsDataEv>:
    } else {
      dims_[i] = val;
    }
  }

  inline int32* DimsData() {
 8018ee4:	b480      	push	{r7}
 8018ee6:	b083      	sub	sp, #12
 8018ee8:	af00      	add	r7, sp, #0
 8018eea:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 8018eec:	687b      	ldr	r3, [r7, #4]
 8018eee:	681b      	ldr	r3, [r3, #0]
 8018ef0:	2b05      	cmp	r3, #5
 8018ef2:	dd02      	ble.n	8018efa <_ZN6tflite12RuntimeShape8DimsDataEv+0x16>
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	685b      	ldr	r3, [r3, #4]
 8018ef8:	e001      	b.n	8018efe <_ZN6tflite12RuntimeShape8DimsDataEv+0x1a>
 8018efa:	687b      	ldr	r3, [r7, #4]
 8018efc:	3304      	adds	r3, #4
  }
 8018efe:	4618      	mov	r0, r3
 8018f00:	370c      	adds	r7, #12
 8018f02:	46bd      	mov	sp, r7
 8018f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f08:	4770      	bx	lr

08018f0a <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  inline const int32* DimsData() const {
 8018f0a:	b480      	push	{r7}
 8018f0c:	b083      	sub	sp, #12
 8018f0e:	af00      	add	r7, sp, #0
 8018f10:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 8018f12:	687b      	ldr	r3, [r7, #4]
 8018f14:	681b      	ldr	r3, [r3, #0]
 8018f16:	2b05      	cmp	r3, #5
 8018f18:	dd02      	ble.n	8018f20 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x16>
 8018f1a:	687b      	ldr	r3, [r7, #4]
 8018f1c:	685b      	ldr	r3, [r3, #4]
 8018f1e:	e001      	b.n	8018f24 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x1a>
 8018f20:	687b      	ldr	r3, [r7, #4]
 8018f22:	3304      	adds	r3, #4
  }
 8018f24:	4618      	mov	r0, r3
 8018f26:	370c      	adds	r7, #12
 8018f28:	46bd      	mov	sp, r7
 8018f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f2e:	4770      	bx	lr

08018f30 <_ZN6tflite12RuntimeShape6ResizeEi>:
  // The caller must ensure that the shape is no bigger than 5-D.
  inline const int32* DimsDataUpTo5D() const { return dims_; }

  inline void Resize(int dimensions_count) {
 8018f30:	b580      	push	{r7, lr}
 8018f32:	b082      	sub	sp, #8
 8018f34:	af00      	add	r7, sp, #0
 8018f36:	6078      	str	r0, [r7, #4]
 8018f38:	6039      	str	r1, [r7, #0]
    if (size_ > kMaxSmallSize) {
 8018f3a:	687b      	ldr	r3, [r7, #4]
 8018f3c:	681b      	ldr	r3, [r3, #0]
 8018f3e:	2b05      	cmp	r3, #5
 8018f40:	dd08      	ble.n	8018f54 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else   // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 8018f42:	687b      	ldr	r3, [r7, #4]
 8018f44:	685b      	ldr	r3, [r3, #4]
 8018f46:	2b00      	cmp	r3, #0
 8018f48:	d004      	beq.n	8018f54 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
 8018f4a:	687b      	ldr	r3, [r7, #4]
 8018f4c:	685b      	ldr	r3, [r3, #4]
 8018f4e:	4618      	mov	r0, r3
 8018f50:	f005 fcee 	bl	801e930 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
    size_ = dimensions_count;
 8018f54:	687b      	ldr	r3, [r7, #4]
 8018f56:	683a      	ldr	r2, [r7, #0]
 8018f58:	601a      	str	r2, [r3, #0]
    if (dimensions_count > kMaxSmallSize) {
 8018f5a:	683b      	ldr	r3, [r7, #0]
 8018f5c:	2b05      	cmp	r3, #5
 8018f5e:	dd0e      	ble.n	8018f7e <_ZN6tflite12RuntimeShape6ResizeEi+0x4e>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else   // TF_LITE_STATIC_MEMORY
      dims_pointer_ = new int32[dimensions_count];
 8018f60:	683b      	ldr	r3, [r7, #0]
 8018f62:	4a09      	ldr	r2, [pc, #36]	; (8018f88 <_ZN6tflite12RuntimeShape6ResizeEi+0x58>)
 8018f64:	4293      	cmp	r3, r2
 8018f66:	d801      	bhi.n	8018f6c <_ZN6tflite12RuntimeShape6ResizeEi+0x3c>
 8018f68:	009b      	lsls	r3, r3, #2
 8018f6a:	e001      	b.n	8018f70 <_ZN6tflite12RuntimeShape6ResizeEi+0x40>
 8018f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8018f70:	4618      	mov	r0, r3
 8018f72:	f005 fce2 	bl	801e93a <_Znaj>
 8018f76:	4603      	mov	r3, r0
 8018f78:	461a      	mov	r2, r3
 8018f7a:	687b      	ldr	r3, [r7, #4]
 8018f7c:	605a      	str	r2, [r3, #4]
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 8018f7e:	bf00      	nop
 8018f80:	3708      	adds	r7, #8
 8018f82:	46bd      	mov	sp, r7
 8018f84:	bd80      	pop	{r7, pc}
 8018f86:	bf00      	nop
 8018f88:	1ffffffe 	.word	0x1ffffffe

08018f8c <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:

  inline void ReplaceWith(int dimensions_count, const int32* dims_data) {
 8018f8c:	b580      	push	{r7, lr}
 8018f8e:	b086      	sub	sp, #24
 8018f90:	af00      	add	r7, sp, #0
 8018f92:	60f8      	str	r0, [r7, #12]
 8018f94:	60b9      	str	r1, [r7, #8]
 8018f96:	607a      	str	r2, [r7, #4]
    Resize(dimensions_count);
 8018f98:	68b9      	ldr	r1, [r7, #8]
 8018f9a:	68f8      	ldr	r0, [r7, #12]
 8018f9c:	f7ff ffc8 	bl	8018f30 <_ZN6tflite12RuntimeShape6ResizeEi>
    int32* dst_dims = DimsData();
 8018fa0:	68f8      	ldr	r0, [r7, #12]
 8018fa2:	f7ff ff9f 	bl	8018ee4 <_ZN6tflite12RuntimeShape8DimsDataEv>
 8018fa6:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
 8018fa8:	68bb      	ldr	r3, [r7, #8]
 8018faa:	009b      	lsls	r3, r3, #2
 8018fac:	461a      	mov	r2, r3
 8018fae:	6879      	ldr	r1, [r7, #4]
 8018fb0:	6978      	ldr	r0, [r7, #20]
 8018fb2:	f006 f815 	bl	801efe0 <memcpy>
  }
 8018fb6:	bf00      	nop
 8018fb8:	3718      	adds	r7, #24
 8018fba:	46bd      	mov	sp, r7
 8018fbc:	bd80      	pop	{r7, pc}

08018fbe <_ZNK6tflite12RuntimeShape8FlatSizeEv>:
    BuildFrom<const std::initializer_list<int>>(init_list);
  }

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  inline int FlatSize() const {
 8018fbe:	b580      	push	{r7, lr}
 8018fc0:	b086      	sub	sp, #24
 8018fc2:	af00      	add	r7, sp, #0
 8018fc4:	6078      	str	r0, [r7, #4]
    int buffer_size = 1;
 8018fc6:	2301      	movs	r3, #1
 8018fc8:	617b      	str	r3, [r7, #20]
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
 8018fca:	6878      	ldr	r0, [r7, #4]
 8018fcc:	f7ff ff9d 	bl	8018f0a <_ZNK6tflite12RuntimeShape8DimsDataEv>
 8018fd0:	60f8      	str	r0, [r7, #12]
    for (int i = 0; i < size_; i++) {
 8018fd2:	2300      	movs	r3, #0
 8018fd4:	613b      	str	r3, [r7, #16]
 8018fd6:	687b      	ldr	r3, [r7, #4]
 8018fd8:	681b      	ldr	r3, [r3, #0]
 8018fda:	693a      	ldr	r2, [r7, #16]
 8018fdc:	429a      	cmp	r2, r3
 8018fde:	da0c      	bge.n	8018ffa <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x3c>
      buffer_size *= dims_data[i];
 8018fe0:	693b      	ldr	r3, [r7, #16]
 8018fe2:	009b      	lsls	r3, r3, #2
 8018fe4:	68fa      	ldr	r2, [r7, #12]
 8018fe6:	4413      	add	r3, r2
 8018fe8:	681a      	ldr	r2, [r3, #0]
 8018fea:	697b      	ldr	r3, [r7, #20]
 8018fec:	fb02 f303 	mul.w	r3, r2, r3
 8018ff0:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size_; i++) {
 8018ff2:	693b      	ldr	r3, [r7, #16]
 8018ff4:	3301      	adds	r3, #1
 8018ff6:	613b      	str	r3, [r7, #16]
 8018ff8:	e7ed      	b.n	8018fd6 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x18>
    }
    return buffer_size;
 8018ffa:	697b      	ldr	r3, [r7, #20]
  }
 8018ffc:	4618      	mov	r0, r3
 8018ffe:	3718      	adds	r7, #24
 8019000:	46bd      	mov	sp, r7
 8019002:	bd80      	pop	{r7, pc}

08019004 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
 8019004:	b580      	push	{r7, lr}
 8019006:	b086      	sub	sp, #24
 8019008:	af00      	add	r7, sp, #0
 801900a:	6078      	str	r0, [r7, #4]
 801900c:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr) {
 801900e:	683b      	ldr	r3, [r7, #0]
 8019010:	2b00      	cmp	r3, #0
 8019012:	d103      	bne.n	801901c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x18>
    return RuntimeShape();
 8019014:	6878      	ldr	r0, [r7, #4]
 8019016:	f7ff fefd 	bl	8018e14 <_ZN6tflite12RuntimeShapeC1Ev>
 801901a:	e00d      	b.n	8019038 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x34>
  }

  TfLiteIntArray* dims = tensor->dims;
 801901c:	683b      	ldr	r3, [r7, #0]
 801901e:	689b      	ldr	r3, [r3, #8]
 8019020:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 8019022:	697b      	ldr	r3, [r7, #20]
 8019024:	681b      	ldr	r3, [r3, #0]
 8019026:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 8019028:	697b      	ldr	r3, [r7, #20]
 801902a:	3304      	adds	r3, #4
 801902c:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 801902e:	68fa      	ldr	r2, [r7, #12]
 8019030:	6939      	ldr	r1, [r7, #16]
 8019032:	6878      	ldr	r0, [r7, #4]
 8019034:	f7ff fefc 	bl	8018e30 <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 8019038:	6878      	ldr	r0, [r7, #4]
 801903a:	3718      	adds	r7, #24
 801903c:	46bd      	mov	sp, r7
 801903e:	bd80      	pop	{r7, pc}

08019040 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
inline const TfLiteTensor* GetInput(const TfLiteContext* context,
                                    const TfLiteNode* node, int index) {
 8019040:	b590      	push	{r4, r7, lr}
 8019042:	b085      	sub	sp, #20
 8019044:	af00      	add	r7, sp, #0
 8019046:	60f8      	str	r0, [r7, #12]
 8019048:	60b9      	str	r1, [r7, #8]
 801904a:	607a      	str	r2, [r7, #4]
  return &context
              ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
 801904c:	68fb      	ldr	r3, [r7, #12]
 801904e:	689c      	ldr	r4, [r3, #8]
 8019050:	68bb      	ldr	r3, [r7, #8]
 8019052:	681a      	ldr	r2, [r3, #0]
 8019054:	687b      	ldr	r3, [r7, #4]
 8019056:	009b      	lsls	r3, r3, #2
 8019058:	4413      	add	r3, r2
 801905a:	685b      	ldr	r3, [r3, #4]
 801905c:	4618      	mov	r0, r3
 801905e:	f000 f81f 	bl	80190a0 <_ZN11flatbuffers12EndianScalarIiEET_S1_>
 8019062:	4603      	mov	r3, r0
 8019064:	019b      	lsls	r3, r3, #6
 8019066:	4423      	add	r3, r4
}
 8019068:	4618      	mov	r0, r3
 801906a:	3714      	adds	r7, #20
 801906c:	46bd      	mov	sp, r7
 801906e:	bd90      	pop	{r4, r7, pc}

08019070 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
  TfLiteTensor* tensor =
      &context->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
  return (tensor->is_variable) ? tensor : nullptr;
}
inline TfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,
                               int index) {
 8019070:	b590      	push	{r4, r7, lr}
 8019072:	b085      	sub	sp, #20
 8019074:	af00      	add	r7, sp, #0
 8019076:	60f8      	str	r0, [r7, #12]
 8019078:	60b9      	str	r1, [r7, #8]
 801907a:	607a      	str	r2, [r7, #4]
  return &context
              ->tensors[flatbuffers::EndianScalar(node->outputs->data[index])];
 801907c:	68fb      	ldr	r3, [r7, #12]
 801907e:	689c      	ldr	r4, [r3, #8]
 8019080:	68bb      	ldr	r3, [r7, #8]
 8019082:	685a      	ldr	r2, [r3, #4]
 8019084:	687b      	ldr	r3, [r7, #4]
 8019086:	009b      	lsls	r3, r3, #2
 8019088:	4413      	add	r3, r2
 801908a:	685b      	ldr	r3, [r3, #4]
 801908c:	4618      	mov	r0, r3
 801908e:	f000 f807 	bl	80190a0 <_ZN11flatbuffers12EndianScalarIiEET_S1_>
 8019092:	4603      	mov	r3, r0
 8019094:	019b      	lsls	r3, r3, #6
 8019096:	4423      	add	r3, r4
}
 8019098:	4618      	mov	r0, r3
 801909a:	3714      	adds	r7, #20
 801909c:	46bd      	mov	sp, r7
 801909e:	bd90      	pop	{r4, r7, pc}

080190a0 <_ZN11flatbuffers12EndianScalarIiEET_S1_>:
template<typename T> T EndianScalar(T t) {
 80190a0:	b480      	push	{r7}
 80190a2:	b083      	sub	sp, #12
 80190a4:	af00      	add	r7, sp, #0
 80190a6:	6078      	str	r0, [r7, #4]
    return t;
 80190a8:	687b      	ldr	r3, [r7, #4]
}
 80190aa:	4618      	mov	r0, r3
 80190ac:	370c      	adds	r7, #12
 80190ae:	46bd      	mov	sp, r7
 80190b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190b4:	4770      	bx	lr

080190b6 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 80190b6:	b480      	push	{r7}
 80190b8:	b083      	sub	sp, #12
 80190ba:	af00      	add	r7, sp, #0
 80190bc:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 80190be:	687b      	ldr	r3, [r7, #4]
 80190c0:	2b00      	cmp	r3, #0
 80190c2:	d002      	beq.n	80190ca <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor+0x14>
 80190c4:	687b      	ldr	r3, [r7, #4]
 80190c6:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 80190c8:	e000      	b.n	80190cc <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 80190ca:	2300      	movs	r3, #0
}
 80190cc:	4618      	mov	r0, r3
 80190ce:	370c      	adds	r7, #12
 80190d0:	46bd      	mov	sp, r7
 80190d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190d6:	4770      	bx	lr

080190d8 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
 80190d8:	b480      	push	{r7}
 80190da:	b083      	sub	sp, #12
 80190dc:	af00      	add	r7, sp, #0
 80190de:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 80190e0:	687b      	ldr	r3, [r7, #4]
 80190e2:	2b00      	cmp	r3, #0
 80190e4:	d002      	beq.n	80190ec <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor+0x14>
 80190e6:	687b      	ldr	r3, [r7, #4]
 80190e8:	685b      	ldr	r3, [r3, #4]
 80190ea:	e000      	b.n	80190ee <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor+0x16>
 80190ec:	2300      	movs	r3, #0
}
 80190ee:	4618      	mov	r0, r3
 80190f0:	370c      	adds	r7, #12
 80190f2:	46bd      	mov	sp, r7
 80190f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190f8:	4770      	bx	lr

080190fa <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 80190fa:	b480      	push	{r7}
 80190fc:	b083      	sub	sp, #12
 80190fe:	af00      	add	r7, sp, #0
 8019100:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 8019102:	687b      	ldr	r3, [r7, #4]
 8019104:	2b00      	cmp	r3, #0
 8019106:	d002      	beq.n	801910e <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor+0x14>
 8019108:	687b      	ldr	r3, [r7, #4]
 801910a:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 801910c:	e000      	b.n	8019110 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 801910e:	2300      	movs	r3, #0
}
 8019110:	4618      	mov	r0, r3
 8019112:	370c      	adds	r7, #12
 8019114:	46bd      	mov	sp, r7
 8019116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801911a:	4770      	bx	lr

0801911c <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
 801911c:	b480      	push	{r7}
 801911e:	b083      	sub	sp, #12
 8019120:	af00      	add	r7, sp, #0
 8019122:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8019124:	687b      	ldr	r3, [r7, #4]
 8019126:	2b00      	cmp	r3, #0
 8019128:	d002      	beq.n	8019130 <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor+0x14>
 801912a:	687b      	ldr	r3, [r7, #4]
 801912c:	685b      	ldr	r3, [r3, #4]
 801912e:	e000      	b.n	8019132 <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor+0x16>
 8019130:	2300      	movs	r3, #0
}
 8019132:	4618      	mov	r0, r3
 8019134:	370c      	adds	r7, #12
 8019136:	46bd      	mov	sp, r7
 8019138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801913c:	4770      	bx	lr

0801913e <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 801913e:	b480      	push	{r7}
 8019140:	b083      	sub	sp, #12
 8019142:	af00      	add	r7, sp, #0
 8019144:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 8019146:	687b      	ldr	r3, [r7, #4]
 8019148:	2b00      	cmp	r3, #0
 801914a:	d002      	beq.n	8019152 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor+0x14>
 801914c:	687b      	ldr	r3, [r7, #4]
 801914e:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 8019150:	e000      	b.n	8019154 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 8019152:	2300      	movs	r3, #0
}
 8019154:	4618      	mov	r0, r3
 8019156:	370c      	adds	r7, #12
 8019158:	46bd      	mov	sp, r7
 801915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801915e:	4770      	bx	lr

08019160 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
 8019160:	b480      	push	{r7}
 8019162:	b083      	sub	sp, #12
 8019164:	af00      	add	r7, sp, #0
 8019166:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8019168:	687b      	ldr	r3, [r7, #4]
 801916a:	2b00      	cmp	r3, #0
 801916c:	d002      	beq.n	8019174 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor+0x14>
 801916e:	687b      	ldr	r3, [r7, #4]
 8019170:	685b      	ldr	r3, [r3, #4]
 8019172:	e000      	b.n	8019176 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor+0x16>
 8019174:	2300      	movs	r3, #0
}
 8019176:	4618      	mov	r0, r3
 8019178:	370c      	adds	r7, #12
 801917a:	46bd      	mov	sp, r7
 801917c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019180:	4770      	bx	lr

08019182 <_ZNSt14numeric_limitsIlE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 8019182:	b480      	push	{r7}
 8019184:	af00      	add	r7, sp, #0
 8019186:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801918a:	4618      	mov	r0, r3
 801918c:	46bd      	mov	sp, r7
 801918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019192:	4770      	bx	lr

08019194 <_ZNSt14numeric_limitsIfE3maxEv>:

      static _GLIBCXX_CONSTEXPR float
      min() _GLIBCXX_USE_NOEXCEPT { return __FLT_MIN__; }

      static _GLIBCXX_CONSTEXPR float
      max() _GLIBCXX_USE_NOEXCEPT { return __FLT_MAX__; }
 8019194:	b480      	push	{r7}
 8019196:	af00      	add	r7, sp, #0
 8019198:	4b04      	ldr	r3, [pc, #16]	; (80191ac <_ZNSt14numeric_limitsIfE3maxEv+0x18>)
 801919a:	ee07 3a90 	vmov	s15, r3
 801919e:	eeb0 0a67 	vmov.f32	s0, s15
 80191a2:	46bd      	mov	sp, r7
 80191a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191a8:	4770      	bx	lr
 80191aa:	bf00      	nop
 80191ac:	7f7fffff 	.word	0x7f7fffff

080191b0 <_ZNSt14numeric_limitsIfE6lowestEv>:

#if __cplusplus >= 201103L
      static constexpr float
      lowest() noexcept { return -__FLT_MAX__; }
 80191b0:	b480      	push	{r7}
 80191b2:	af00      	add	r7, sp, #0
 80191b4:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 80191b8:	ee07 3a90 	vmov	s15, r3
 80191bc:	eeb0 0a67 	vmov.f32	s0, s15
 80191c0:	46bd      	mov	sp, r7
 80191c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191c6:	4770      	bx	lr

080191c8 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>:

// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
 80191c8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80191cc:	b08c      	sub	sp, #48	; 0x30
 80191ce:	af00      	add	r7, sp, #0
 80191d0:	6078      	str	r0, [r7, #4]
 80191d2:	6039      	str	r1, [r7, #0]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 80191d4:	687a      	ldr	r2, [r7, #4]
 80191d6:	683b      	ldr	r3, [r7, #0]
 80191d8:	429a      	cmp	r2, r3
 80191da:	d107      	bne.n	80191ec <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 80191dc:	f7ff ffd1 	bl	8019182 <_ZNSt14numeric_limitsIlE3minEv>
 80191e0:	4602      	mov	r2, r0
 80191e2:	687b      	ldr	r3, [r7, #4]
 80191e4:	4293      	cmp	r3, r2
 80191e6:	d101      	bne.n	80191ec <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 80191e8:	2301      	movs	r3, #1
 80191ea:	e000      	b.n	80191ee <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x26>
 80191ec:	2300      	movs	r3, #0
 80191ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  std::int64_t a_64(a);
 80191f2:	687b      	ldr	r3, [r7, #4]
 80191f4:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80191f8:	e9c7 3408 	strd	r3, r4, [r7, #32]
  std::int64_t b_64(b);
 80191fc:	683b      	ldr	r3, [r7, #0]
 80191fe:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8019202:	e9c7 3406 	strd	r3, r4, [r7, #24]
  std::int64_t ab_64 = a_64 * b_64;
 8019206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019208:	69ba      	ldr	r2, [r7, #24]
 801920a:	fb02 f203 	mul.w	r2, r2, r3
 801920e:	69fb      	ldr	r3, [r7, #28]
 8019210:	6a39      	ldr	r1, [r7, #32]
 8019212:	fb01 f303 	mul.w	r3, r1, r3
 8019216:	441a      	add	r2, r3
 8019218:	6a39      	ldr	r1, [r7, #32]
 801921a:	69bb      	ldr	r3, [r7, #24]
 801921c:	fba1 3403 	umull	r3, r4, r1, r3
 8019220:	4422      	add	r2, r4
 8019222:	4614      	mov	r4, r2
 8019224:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8019228:	e9c7 3404 	strd	r3, r4, [r7, #16]
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 801922c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8019230:	2b00      	cmp	r3, #0
 8019232:	f174 0300 	sbcs.w	r3, r4, #0
 8019236:	db02      	blt.n	801923e <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x76>
 8019238:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801923c:	e000      	b.n	8019240 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x78>
 801923e:	4b19      	ldr	r3, [pc, #100]	; (80192a4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xdc>)
 8019240:	60fb      	str	r3, [r7, #12]
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8019242:	68fb      	ldr	r3, [r7, #12]
 8019244:	4619      	mov	r1, r3
 8019246:	ea4f 72e1 	mov.w	r2, r1, asr #31
 801924a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801924e:	eb13 0b01 	adds.w	fp, r3, r1
 8019252:	eb44 0c02 	adc.w	ip, r4, r2
 8019256:	465b      	mov	r3, fp
 8019258:	4664      	mov	r4, ip
 801925a:	2b00      	cmp	r3, #0
 801925c:	f174 0200 	sbcs.w	r2, r4, #0
 8019260:	da06      	bge.n	8019270 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xa8>
 8019262:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019266:	f04f 0200 	mov.w	r2, #0
 801926a:	185b      	adds	r3, r3, r1
 801926c:	eb44 0402 	adc.w	r4, r4, r2
 8019270:	f04f 0100 	mov.w	r1, #0
 8019274:	f04f 0200 	mov.w	r2, #0
 8019278:	0fd9      	lsrs	r1, r3, #31
 801927a:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
 801927e:	17e2      	asrs	r2, r4, #31
 8019280:	460b      	mov	r3, r1
 8019282:	4614      	mov	r4, r2
  std::int32_t ab_x2_high32 =
 8019284:	60bb      	str	r3, [r7, #8]
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 8019286:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801928a:	2b00      	cmp	r3, #0
 801928c:	d003      	beq.n	8019296 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xce>
 801928e:	f7fb ffb1 	bl	80151f4 <_ZNSt14numeric_limitsIlE3maxEv>
 8019292:	4603      	mov	r3, r0
 8019294:	e000      	b.n	8019298 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xd0>
 8019296:	68bb      	ldr	r3, [r7, #8]
}
 8019298:	4618      	mov	r0, r3
 801929a:	3730      	adds	r7, #48	; 0x30
 801929c:	46bd      	mov	sp, r7
 801929e:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80192a2:	bf00      	nop
 80192a4:	c0000001 	.word	0xc0000001

080192a8 <_ZNK6tflite12RuntimeShape14DimsDataUpTo5DEv>:
  inline const int32* DimsDataUpTo5D() const { return dims_; }
 80192a8:	b480      	push	{r7}
 80192aa:	b083      	sub	sp, #12
 80192ac:	af00      	add	r7, sp, #0
 80192ae:	6078      	str	r0, [r7, #4]
 80192b0:	687b      	ldr	r3, [r7, #4]
 80192b2:	3304      	adds	r3, #4
 80192b4:	4618      	mov	r0, r3
 80192b6:	370c      	adds	r7, #12
 80192b8:	46bd      	mov	sp, r7
 80192ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192be:	4770      	bx	lr

080192c0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>:
    }
  }
  return offset;
}

inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
 80192c0:	b580      	push	{r7, lr}
 80192c2:	b086      	sub	sp, #24
 80192c4:	af00      	add	r7, sp, #0
 80192c6:	60f8      	str	r0, [r7, #12]
 80192c8:	60b9      	str	r1, [r7, #8]
 80192ca:	607a      	str	r2, [r7, #4]
 80192cc:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
 80192ce:	68f8      	ldr	r0, [r7, #12]
 80192d0:	f7ff fdd7 	bl	8018e82 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80192d4:	4603      	mov	r3, r0
 80192d6:	2b04      	cmp	r3, #4
 80192d8:	d001      	beq.n	80192de <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x1e>
 80192da:	f005 fdb9 	bl	801ee50 <abort>
  const int* dims_data = reinterpret_cast<const int*>(shape.DimsDataUpTo5D());
 80192de:	68f8      	ldr	r0, [r7, #12]
 80192e0:	f7ff ffe2 	bl	80192a8 <_ZNK6tflite12RuntimeShape14DimsDataUpTo5DEv>
 80192e4:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 80192e6:	68bb      	ldr	r3, [r7, #8]
 80192e8:	2b00      	cmp	r3, #0
 80192ea:	db04      	blt.n	80192f6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x36>
 80192ec:	697b      	ldr	r3, [r7, #20]
 80192ee:	681b      	ldr	r3, [r3, #0]
 80192f0:	68ba      	ldr	r2, [r7, #8]
 80192f2:	429a      	cmp	r2, r3
 80192f4:	db01      	blt.n	80192fa <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x3a>
 80192f6:	f005 fdab 	bl	801ee50 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 80192fa:	687b      	ldr	r3, [r7, #4]
 80192fc:	2b00      	cmp	r3, #0
 80192fe:	db05      	blt.n	801930c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x4c>
 8019300:	697b      	ldr	r3, [r7, #20]
 8019302:	3304      	adds	r3, #4
 8019304:	681b      	ldr	r3, [r3, #0]
 8019306:	687a      	ldr	r2, [r7, #4]
 8019308:	429a      	cmp	r2, r3
 801930a:	db01      	blt.n	8019310 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x50>
 801930c:	f005 fda0 	bl	801ee50 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 8019310:	683b      	ldr	r3, [r7, #0]
 8019312:	2b00      	cmp	r3, #0
 8019314:	db05      	blt.n	8019322 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x62>
 8019316:	697b      	ldr	r3, [r7, #20]
 8019318:	3308      	adds	r3, #8
 801931a:	681b      	ldr	r3, [r3, #0]
 801931c:	683a      	ldr	r2, [r7, #0]
 801931e:	429a      	cmp	r2, r3
 8019320:	db01      	blt.n	8019326 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x66>
 8019322:	f005 fd95 	bl	801ee50 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 8019326:	6a3b      	ldr	r3, [r7, #32]
 8019328:	2b00      	cmp	r3, #0
 801932a:	db05      	blt.n	8019338 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x78>
 801932c:	697b      	ldr	r3, [r7, #20]
 801932e:	330c      	adds	r3, #12
 8019330:	681b      	ldr	r3, [r3, #0]
 8019332:	6a3a      	ldr	r2, [r7, #32]
 8019334:	429a      	cmp	r2, r3
 8019336:	db01      	blt.n	801933c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x7c>
 8019338:	f005 fd8a 	bl	801ee50 <abort>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
 801933c:	697b      	ldr	r3, [r7, #20]
 801933e:	3304      	adds	r3, #4
 8019340:	681b      	ldr	r3, [r3, #0]
 8019342:	68ba      	ldr	r2, [r7, #8]
 8019344:	fb02 f203 	mul.w	r2, r2, r3
 8019348:	687b      	ldr	r3, [r7, #4]
 801934a:	4413      	add	r3, r2
 801934c:	697a      	ldr	r2, [r7, #20]
 801934e:	3208      	adds	r2, #8
 8019350:	6812      	ldr	r2, [r2, #0]
 8019352:	fb02 f203 	mul.w	r2, r2, r3
 8019356:	683b      	ldr	r3, [r7, #0]
 8019358:	4413      	add	r3, r2
 801935a:	697a      	ldr	r2, [r7, #20]
 801935c:	320c      	adds	r2, #12
 801935e:	6812      	ldr	r2, [r2, #0]
 8019360:	fb02 f203 	mul.w	r2, r2, r3
 8019364:	6a3b      	ldr	r3, [r7, #32]
 8019366:	4413      	add	r3, r2
}
 8019368:	4618      	mov	r0, r3
 801936a:	3718      	adds	r7, #24
 801936c:	46bd      	mov	sp, r7
 801936e:	bd80      	pop	{r7, pc}

08019370 <_ZN6tflite28ActivationFunctionWithMinMaxEfff>:
      break;
  }
}

inline float ActivationFunctionWithMinMax(float x, float output_activation_min,
                                          float output_activation_max) {
 8019370:	b580      	push	{r7, lr}
 8019372:	b084      	sub	sp, #16
 8019374:	af00      	add	r7, sp, #0
 8019376:	ed87 0a03 	vstr	s0, [r7, #12]
 801937a:	edc7 0a02 	vstr	s1, [r7, #8]
 801937e:	ed87 1a01 	vstr	s2, [r7, #4]
  return std::min(std::max(x, output_activation_min), output_activation_max);
 8019382:	f107 0208 	add.w	r2, r7, #8
 8019386:	f107 030c 	add.w	r3, r7, #12
 801938a:	4611      	mov	r1, r2
 801938c:	4618      	mov	r0, r3
 801938e:	f7fc f8bc 	bl	801550a <_ZSt3maxIfERKT_S2_S2_>
 8019392:	4602      	mov	r2, r0
 8019394:	1d3b      	adds	r3, r7, #4
 8019396:	4619      	mov	r1, r3
 8019398:	4610      	mov	r0, r2
 801939a:	f7fc f8cf 	bl	801553c <_ZSt3minIfERKT_S2_S2_>
 801939e:	4603      	mov	r3, r0
 80193a0:	681b      	ldr	r3, [r3, #0]
 80193a2:	ee07 3a90 	vmov	s15, r3
}
 80193a6:	eeb0 0a67 	vmov.f32	s0, s15
 80193aa:	3710      	adds	r7, #16
 80193ac:	46bd      	mov	sp, r7
 80193ae:	bd80      	pop	{r7, pc}

080193b0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>:
}

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
 80193b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80193b2:	b089      	sub	sp, #36	; 0x24
 80193b4:	af00      	add	r7, sp, #0
 80193b6:	6078      	str	r0, [r7, #4]
 80193b8:	6039      	str	r1, [r7, #0]
  assert(exponent >= 0);
 80193ba:	683a      	ldr	r2, [r7, #0]
 80193bc:	2a00      	cmp	r2, #0
 80193be:	da06      	bge.n	80193ce <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x1e>
 80193c0:	4b30      	ldr	r3, [pc, #192]	; (8019484 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd4>)
 80193c2:	4a31      	ldr	r2, [pc, #196]	; (8019488 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd8>)
 80193c4:	f44f 71b3 	mov.w	r1, #358	; 0x166
 80193c8:	4830      	ldr	r0, [pc, #192]	; (801948c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 80193ca:	f005 fd49 	bl	801ee60 <__assert_func>
  assert(exponent <= 31);
 80193ce:	683a      	ldr	r2, [r7, #0]
 80193d0:	2a1f      	cmp	r2, #31
 80193d2:	dd06      	ble.n	80193e2 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x32>
 80193d4:	4b2e      	ldr	r3, [pc, #184]	; (8019490 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 80193d6:	4a2c      	ldr	r2, [pc, #176]	; (8019488 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd8>)
 80193d8:	f240 1167 	movw	r1, #359	; 0x167
 80193dc:	482b      	ldr	r0, [pc, #172]	; (801948c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 80193de:	f005 fd3f 	bl	801ee60 <__assert_func>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 80193e2:	f04f 0101 	mov.w	r1, #1
 80193e6:	f04f 0200 	mov.w	r2, #0
 80193ea:	6838      	ldr	r0, [r7, #0]
 80193ec:	f1a0 0620 	sub.w	r6, r0, #32
 80193f0:	f1c0 0520 	rsb	r5, r0, #32
 80193f4:	fa02 f400 	lsl.w	r4, r2, r0
 80193f8:	fa01 f606 	lsl.w	r6, r1, r6
 80193fc:	4334      	orrs	r4, r6
 80193fe:	fa21 f505 	lsr.w	r5, r1, r5
 8019402:	432c      	orrs	r4, r5
 8019404:	fa01 f300 	lsl.w	r3, r1, r0
 8019408:	3b01      	subs	r3, #1
 801940a:	4618      	mov	r0, r3
 801940c:	f000 f884 	bl	8019518 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8019410:	61f8      	str	r0, [r7, #28]
  const IntegerType zero = Dup<IntegerType>(0);
 8019412:	2000      	movs	r0, #0
 8019414:	f000 f880 	bl	8019518 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8019418:	61b8      	str	r0, [r7, #24]
  const IntegerType one = Dup<IntegerType>(1);
 801941a:	2001      	movs	r0, #1
 801941c:	f000 f87c 	bl	8019518 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8019420:	6178      	str	r0, [r7, #20]
  const IntegerType remainder = BitAnd(x, mask);
 8019422:	69f9      	ldr	r1, [r7, #28]
 8019424:	6878      	ldr	r0, [r7, #4]
 8019426:	f000 f882 	bl	801952e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801942a:	6138      	str	r0, [r7, #16]
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
 801942c:	2101      	movs	r1, #1
 801942e:	69f8      	ldr	r0, [r7, #28]
 8019430:	f000 f88b 	bl	801954a <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 8019434:	4604      	mov	r4, r0
 8019436:	69b9      	ldr	r1, [r7, #24]
 8019438:	6878      	ldr	r0, [r7, #4]
 801943a:	f000 f895 	bl	8019568 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 801943e:	4603      	mov	r3, r0
 8019440:	6979      	ldr	r1, [r7, #20]
 8019442:	4618      	mov	r0, r3
 8019444:	f000 f873 	bl	801952e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8019448:	4603      	mov	r3, r0
  const IntegerType threshold =
 801944a:	4619      	mov	r1, r3
 801944c:	4620      	mov	r0, r4
 801944e:	f000 f89f 	bl	8019590 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8019452:	60f8      	str	r0, [r7, #12]
  return Add(ShiftRight(x, exponent),
 8019454:	6839      	ldr	r1, [r7, #0]
 8019456:	6878      	ldr	r0, [r7, #4]
 8019458:	f000 f877 	bl	801954a <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 801945c:	4604      	mov	r4, r0
 801945e:	68f9      	ldr	r1, [r7, #12]
 8019460:	6938      	ldr	r0, [r7, #16]
 8019462:	f000 f8a3 	bl	80195ac <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 8019466:	4603      	mov	r3, r0
 8019468:	6979      	ldr	r1, [r7, #20]
 801946a:	4618      	mov	r0, r3
 801946c:	f000 f85f 	bl	801952e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8019470:	4603      	mov	r3, r0
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
 8019472:	4619      	mov	r1, r3
 8019474:	4620      	mov	r0, r4
 8019476:	f000 f88b 	bl	8019590 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 801947a:	4603      	mov	r3, r0
}
 801947c:	4618      	mov	r0, r3
 801947e:	3724      	adds	r7, #36	; 0x24
 8019480:	46bd      	mov	sp, r7
 8019482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019484:	08024004 	.word	0x08024004
 8019488:	08025f94 	.word	0x08025f94
 801948c:	08024014 	.word	0x08024014
 8019490:	08024094 	.word	0x08024094

08019494 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
                                               int32_t* act_max);

// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
 8019494:	b580      	push	{r7, lr}
 8019496:	b084      	sub	sp, #16
 8019498:	af00      	add	r7, sp, #0
 801949a:	4603      	mov	r3, r0
 801949c:	60b9      	str	r1, [r7, #8]
 801949e:	607a      	str	r2, [r7, #4]
 80194a0:	73fb      	strb	r3, [r7, #15]
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 80194a2:	7bfb      	ldrb	r3, [r7, #15]
 80194a4:	2b01      	cmp	r3, #1
 80194a6:	d10b      	bne.n	80194c0 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = 0;
 80194a8:	68bb      	ldr	r3, [r7, #8]
 80194aa:	f04f 0200 	mov.w	r2, #0
 80194ae:	601a      	str	r2, [r3, #0]
    *activation_max = std::numeric_limits<T>::max();
 80194b0:	f7ff fe70 	bl	8019194 <_ZNSt14numeric_limitsIfE3maxEv>
 80194b4:	eef0 7a40 	vmov.f32	s15, s0
 80194b8:	687b      	ldr	r3, [r7, #4]
 80194ba:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
  }
}
 80194be:	e023      	b.n	8019508 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActRelu6) {
 80194c0:	7bfb      	ldrb	r3, [r7, #15]
 80194c2:	2b03      	cmp	r3, #3
 80194c4:	d107      	bne.n	80194d6 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x42>
    *activation_min = 0;
 80194c6:	68bb      	ldr	r3, [r7, #8]
 80194c8:	f04f 0200 	mov.w	r2, #0
 80194cc:	601a      	str	r2, [r3, #0]
    *activation_max = 6;
 80194ce:	687b      	ldr	r3, [r7, #4]
 80194d0:	4a0f      	ldr	r2, [pc, #60]	; (8019510 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x7c>)
 80194d2:	601a      	str	r2, [r3, #0]
}
 80194d4:	e018      	b.n	8019508 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActRelu1) {
 80194d6:	7bfb      	ldrb	r3, [r7, #15]
 80194d8:	2b02      	cmp	r3, #2
 80194da:	d107      	bne.n	80194ec <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x58>
    *activation_min = -1;
 80194dc:	68bb      	ldr	r3, [r7, #8]
 80194de:	4a0d      	ldr	r2, [pc, #52]	; (8019514 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x80>)
 80194e0:	601a      	str	r2, [r3, #0]
    *activation_max = 1;
 80194e2:	687b      	ldr	r3, [r7, #4]
 80194e4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80194e8:	601a      	str	r2, [r3, #0]
}
 80194ea:	e00d      	b.n	8019508 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
    *activation_min = std::numeric_limits<T>::lowest();
 80194ec:	f7ff fe60 	bl	80191b0 <_ZNSt14numeric_limitsIfE6lowestEv>
 80194f0:	eef0 7a40 	vmov.f32	s15, s0
 80194f4:	68bb      	ldr	r3, [r7, #8]
 80194f6:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = std::numeric_limits<T>::max();
 80194fa:	f7ff fe4b 	bl	8019194 <_ZNSt14numeric_limitsIfE3maxEv>
 80194fe:	eef0 7a40 	vmov.f32	s15, s0
 8019502:	687b      	ldr	r3, [r7, #4]
 8019504:	edc3 7a00 	vstr	s15, [r3]
}
 8019508:	bf00      	nop
 801950a:	3710      	adds	r7, #16
 801950c:	46bd      	mov	sp, r7
 801950e:	bd80      	pop	{r7, pc}
 8019510:	40c00000 	.word	0x40c00000
 8019514:	bf800000 	.word	0xbf800000

08019518 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
tRawType Dup(typename FixedPointRawTypeTraits<tRawType>::ScalarRawType x) {
 8019518:	b480      	push	{r7}
 801951a:	b083      	sub	sp, #12
 801951c:	af00      	add	r7, sp, #0
 801951e:	6078      	str	r0, [r7, #4]
  return x;
 8019520:	687b      	ldr	r3, [r7, #4]
}
 8019522:	4618      	mov	r0, r3
 8019524:	370c      	adds	r7, #12
 8019526:	46bd      	mov	sp, r7
 8019528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801952c:	4770      	bx	lr

0801952e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>:
tIntegerType BitAnd(tIntegerType a, tIntegerType b) {
 801952e:	b480      	push	{r7}
 8019530:	b083      	sub	sp, #12
 8019532:	af00      	add	r7, sp, #0
 8019534:	6078      	str	r0, [r7, #4]
 8019536:	6039      	str	r1, [r7, #0]
  return a & b;
 8019538:	687a      	ldr	r2, [r7, #4]
 801953a:	683b      	ldr	r3, [r7, #0]
 801953c:	4013      	ands	r3, r2
}
 801953e:	4618      	mov	r0, r3
 8019540:	370c      	adds	r7, #12
 8019542:	46bd      	mov	sp, r7
 8019544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019548:	4770      	bx	lr

0801954a <_ZN8gemmlowp10ShiftRightIlEET_S1_i>:
tIntegerType ShiftRight(tIntegerType a, int offset) {
 801954a:	b480      	push	{r7}
 801954c:	b083      	sub	sp, #12
 801954e:	af00      	add	r7, sp, #0
 8019550:	6078      	str	r0, [r7, #4]
 8019552:	6039      	str	r1, [r7, #0]
  return a >> offset;
 8019554:	687a      	ldr	r2, [r7, #4]
 8019556:	683b      	ldr	r3, [r7, #0]
 8019558:	fa42 f303 	asr.w	r3, r2, r3
}
 801955c:	4618      	mov	r0, r3
 801955e:	370c      	adds	r7, #12
 8019560:	46bd      	mov	sp, r7
 8019562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019566:	4770      	bx	lr

08019568 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
 8019568:	b580      	push	{r7, lr}
 801956a:	b082      	sub	sp, #8
 801956c:	af00      	add	r7, sp, #0
 801956e:	6078      	str	r0, [r7, #4]
 8019570:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a < b);
 8019572:	687a      	ldr	r2, [r7, #4]
 8019574:	683b      	ldr	r3, [r7, #0]
 8019576:	429a      	cmp	r2, r3
 8019578:	bfb4      	ite	lt
 801957a:	2301      	movlt	r3, #1
 801957c:	2300      	movge	r3, #0
 801957e:	b2db      	uxtb	r3, r3
 8019580:	4618      	mov	r0, r3
 8019582:	f000 f827 	bl	80195d4 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8019586:	4603      	mov	r3, r0
}
 8019588:	4618      	mov	r0, r3
 801958a:	3708      	adds	r7, #8
 801958c:	46bd      	mov	sp, r7
 801958e:	bd80      	pop	{r7, pc}

08019590 <_ZN8gemmlowp3AddIlEET_S1_S1_>:
tIntegerType Add(tIntegerType a, tIntegerType b) {
 8019590:	b480      	push	{r7}
 8019592:	b083      	sub	sp, #12
 8019594:	af00      	add	r7, sp, #0
 8019596:	6078      	str	r0, [r7, #4]
 8019598:	6039      	str	r1, [r7, #0]
  return a + b;
 801959a:	687a      	ldr	r2, [r7, #4]
 801959c:	683b      	ldr	r3, [r7, #0]
 801959e:	4413      	add	r3, r2
}
 80195a0:	4618      	mov	r0, r3
 80195a2:	370c      	adds	r7, #12
 80195a4:	46bd      	mov	sp, r7
 80195a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195aa:	4770      	bx	lr

080195ac <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
 80195ac:	b580      	push	{r7, lr}
 80195ae:	b082      	sub	sp, #8
 80195b0:	af00      	add	r7, sp, #0
 80195b2:	6078      	str	r0, [r7, #4]
 80195b4:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a > b);
 80195b6:	687a      	ldr	r2, [r7, #4]
 80195b8:	683b      	ldr	r3, [r7, #0]
 80195ba:	429a      	cmp	r2, r3
 80195bc:	bfcc      	ite	gt
 80195be:	2301      	movgt	r3, #1
 80195c0:	2300      	movle	r3, #0
 80195c2:	b2db      	uxtb	r3, r3
 80195c4:	4618      	mov	r0, r3
 80195c6:	f000 f805 	bl	80195d4 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 80195ca:	4603      	mov	r3, r0
}
 80195cc:	4618      	mov	r0, r3
 80195ce:	3708      	adds	r7, #8
 80195d0:	46bd      	mov	sp, r7
 80195d2:	bd80      	pop	{r7, pc}

080195d4 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
 80195d4:	b580      	push	{r7, lr}
 80195d6:	b082      	sub	sp, #8
 80195d8:	af00      	add	r7, sp, #0
 80195da:	6078      	str	r0, [r7, #4]
  return a ? BitNot(zero) : zero;
 80195dc:	687b      	ldr	r3, [r7, #4]
 80195de:	2b00      	cmp	r3, #0
 80195e0:	d004      	beq.n	80195ec <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x18>
 80195e2:	2000      	movs	r0, #0
 80195e4:	f000 f807 	bl	80195f6 <_ZN8gemmlowp6BitNotIlEET_S1_>
 80195e8:	4603      	mov	r3, r0
 80195ea:	e000      	b.n	80195ee <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x1a>
 80195ec:	2300      	movs	r3, #0
}
 80195ee:	4618      	mov	r0, r3
 80195f0:	3708      	adds	r7, #8
 80195f2:	46bd      	mov	sp, r7
 80195f4:	bd80      	pop	{r7, pc}

080195f6 <_ZN8gemmlowp6BitNotIlEET_S1_>:
tIntegerType BitNot(tIntegerType a) {
 80195f6:	b480      	push	{r7}
 80195f8:	b083      	sub	sp, #12
 80195fa:	af00      	add	r7, sp, #0
 80195fc:	6078      	str	r0, [r7, #4]
  return ~a;
 80195fe:	687b      	ldr	r3, [r7, #4]
 8019600:	43db      	mvns	r3, r3
}
 8019602:	4618      	mov	r0, r3
 8019604:	370c      	adds	r7, #12
 8019606:	46bd      	mov	sp, r7
 8019608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801960c:	4770      	bx	lr

0801960e <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 801960e:	b480      	push	{r7}
 8019610:	b083      	sub	sp, #12
 8019612:	af00      	add	r7, sp, #0
 8019614:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 8019616:	687b      	ldr	r3, [r7, #4]
 8019618:	2b00      	cmp	r3, #0
 801961a:	d002      	beq.n	8019622 <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor+0x14>
 801961c:	687b      	ldr	r3, [r7, #4]
 801961e:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 8019620:	e000      	b.n	8019624 <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 8019622:	2300      	movs	r3, #0
}
 8019624:	4618      	mov	r0, r3
 8019626:	370c      	adds	r7, #12
 8019628:	46bd      	mov	sp, r7
 801962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801962e:	4770      	bx	lr

08019630 <_ZN6tflite9NumInputsEPK10TfLiteNode>:
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 8019630:	b480      	push	{r7}
 8019632:	b083      	sub	sp, #12
 8019634:	af00      	add	r7, sp, #0
 8019636:	6078      	str	r0, [r7, #4]
 8019638:	687b      	ldr	r3, [r7, #4]
 801963a:	681b      	ldr	r3, [r3, #0]
 801963c:	681b      	ldr	r3, [r3, #0]
 801963e:	4618      	mov	r0, r3
 8019640:	370c      	adds	r7, #12
 8019642:	46bd      	mov	sp, r7
 8019644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019648:	4770      	bx	lr

0801964a <_ZN6tflite10NumOutputsEPK10TfLiteNode>:
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
 801964a:	b480      	push	{r7}
 801964c:	b083      	sub	sp, #12
 801964e:	af00      	add	r7, sp, #0
 8019650:	6078      	str	r0, [r7, #4]
 8019652:	687b      	ldr	r3, [r7, #4]
 8019654:	685b      	ldr	r3, [r3, #4]
 8019656:	681b      	ldr	r3, [r3, #0]
 8019658:	4618      	mov	r0, r3
 801965a:	370c      	adds	r7, #12
 801965c:	46bd      	mov	sp, r7
 801965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019662:	4770      	bx	lr

08019664 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
  return MatchingArraySize(array1, index1, args...);
}

// Get common shape dim, DCHECKing that they all agree.
inline int MatchingDim(const RuntimeShape& shape1, int index1,
                       const RuntimeShape& shape2, int index2) {
 8019664:	b590      	push	{r4, r7, lr}
 8019666:	b085      	sub	sp, #20
 8019668:	af00      	add	r7, sp, #0
 801966a:	60f8      	str	r0, [r7, #12]
 801966c:	60b9      	str	r1, [r7, #8]
 801966e:	607a      	str	r2, [r7, #4]
 8019670:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 8019672:	68b9      	ldr	r1, [r7, #8]
 8019674:	68f8      	ldr	r0, [r7, #12]
 8019676:	f7ff fc10 	bl	8018e9a <_ZNK6tflite12RuntimeShape4DimsEi>
 801967a:	4604      	mov	r4, r0
 801967c:	6839      	ldr	r1, [r7, #0]
 801967e:	6878      	ldr	r0, [r7, #4]
 8019680:	f7ff fc0b 	bl	8018e9a <_ZNK6tflite12RuntimeShape4DimsEi>
 8019684:	4603      	mov	r3, r0
 8019686:	429c      	cmp	r4, r3
 8019688:	d001      	beq.n	801968e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 801968a:	f005 fbe1 	bl	801ee50 <abort>
  return shape1.Dims(index1);
 801968e:	68b9      	ldr	r1, [r7, #8]
 8019690:	68f8      	ldr	r0, [r7, #12]
 8019692:	f7ff fc02 	bl	8018e9a <_ZNK6tflite12RuntimeShape4DimsEi>
 8019696:	4603      	mov	r3, r0
}
 8019698:	4618      	mov	r0, r3
 801969a:	3714      	adds	r7, #20
 801969c:	46bd      	mov	sp, r7
 801969e:	bd90      	pop	{r4, r7, pc}

080196a0 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>:
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
                                           quantized_multiplier);
}

inline int32 MultiplyByQuantizedMultiplier(int32 x, int32 quantized_multiplier,
                                           int shift) {
 80196a0:	b580      	push	{r7, lr}
 80196a2:	b086      	sub	sp, #24
 80196a4:	af00      	add	r7, sp, #0
 80196a6:	60f8      	str	r0, [r7, #12]
 80196a8:	60b9      	str	r1, [r7, #8]
 80196aa:	607a      	str	r2, [r7, #4]
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
 80196ac:	687b      	ldr	r3, [r7, #4]
 80196ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80196b2:	617b      	str	r3, [r7, #20]
  int right_shift = shift > 0 ? 0 : -shift;
 80196b4:	687b      	ldr	r3, [r7, #4]
 80196b6:	2b00      	cmp	r3, #0
 80196b8:	dc02      	bgt.n	80196c0 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x20>
 80196ba:	687b      	ldr	r3, [r7, #4]
 80196bc:	425b      	negs	r3, r3
 80196be:	e000      	b.n	80196c2 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x22>
 80196c0:	2300      	movs	r3, #0
 80196c2:	613b      	str	r3, [r7, #16]
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 80196c4:	68fa      	ldr	r2, [r7, #12]
 80196c6:	697b      	ldr	r3, [r7, #20]
 80196c8:	fa02 f303 	lsl.w	r3, r2, r3
 80196cc:	68b9      	ldr	r1, [r7, #8]
 80196ce:	4618      	mov	r0, r3
 80196d0:	f7ff fd7a 	bl	80191c8 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 80196d4:	4603      	mov	r3, r0
                                 x * (1 << left_shift), quantized_multiplier),
                             right_shift);
 80196d6:	6939      	ldr	r1, [r7, #16]
 80196d8:	4618      	mov	r0, r3
 80196da:	f7ff fe69 	bl	80193b0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 80196de:	4603      	mov	r3, r0
}
 80196e0:	4618      	mov	r0, r3
 80196e2:	3718      	adds	r7, #24
 80196e4:	46bd      	mov	sp, r7
 80196e6:	bd80      	pop	{r7, pc}

080196e8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>:
inline void Conv(const ConvParams& params, const RuntimeShape& input_shape,
                 const float* input_data, const RuntimeShape& filter_shape,
                 const float* filter_data, const RuntimeShape& bias_shape,
                 const float* bias_data, const RuntimeShape& output_shape,
                 float* output_data, const RuntimeShape& im2col_shape,
                 float* im2col_data) {
 80196e8:	b590      	push	{r4, r7, lr}
 80196ea:	ed2d 8b02 	vpush	{d8}
 80196ee:	b0a7      	sub	sp, #156	; 0x9c
 80196f0:	af02      	add	r7, sp, #8
 80196f2:	60f8      	str	r0, [r7, #12]
 80196f4:	60b9      	str	r1, [r7, #8]
 80196f6:	607a      	str	r2, [r7, #4]
 80196f8:	603b      	str	r3, [r7, #0]
  const int stride_width = params.stride_width;
 80196fa:	68fb      	ldr	r3, [r7, #12]
 80196fc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8019700:	66bb      	str	r3, [r7, #104]	; 0x68
  const int stride_height = params.stride_height;
 8019702:	68fb      	ldr	r3, [r7, #12]
 8019704:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8019708:	667b      	str	r3, [r7, #100]	; 0x64
  const int dilation_width_factor = params.dilation_width_factor;
 801970a:	68fb      	ldr	r3, [r7, #12]
 801970c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8019710:	663b      	str	r3, [r7, #96]	; 0x60
  const int dilation_height_factor = params.dilation_height_factor;
 8019712:	68fb      	ldr	r3, [r7, #12]
 8019714:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8019718:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int pad_width = params.padding_values.width;
 801971a:	68fb      	ldr	r3, [r7, #12]
 801971c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019720:	65bb      	str	r3, [r7, #88]	; 0x58
  const int pad_height = params.padding_values.height;
 8019722:	68fb      	ldr	r3, [r7, #12]
 8019724:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8019728:	657b      	str	r3, [r7, #84]	; 0x54
  const float output_activation_min = params.float_activation_min;
 801972a:	68fb      	ldr	r3, [r7, #12]
 801972c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801972e:	653b      	str	r3, [r7, #80]	; 0x50
  const float output_activation_max = params.float_activation_max;
 8019730:	68fb      	ldr	r3, [r7, #12]
 8019732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019734:	64fb      	str	r3, [r7, #76]	; 0x4c
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8019736:	68b8      	ldr	r0, [r7, #8]
 8019738:	f7ff fba3 	bl	8018e82 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801973c:	4603      	mov	r3, r0
 801973e:	2b04      	cmp	r3, #4
 8019740:	d001      	beq.n	8019746 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x5e>
 8019742:	f005 fb85 	bl	801ee50 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 8019746:	6838      	ldr	r0, [r7, #0]
 8019748:	f7ff fb9b 	bl	8018e82 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801974c:	4603      	mov	r3, r0
 801974e:	2b04      	cmp	r3, #4
 8019750:	d001      	beq.n	8019756 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x6e>
 8019752:	f005 fb7d 	bl	801ee50 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8019756:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 801975a:	f7ff fb92 	bl	8018e82 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801975e:	4603      	mov	r3, r0
 8019760:	2b04      	cmp	r3, #4
 8019762:	d001      	beq.n	8019768 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x80>
 8019764:	f005 fb74 	bl	801ee50 <abort>

  (void)im2col_data;   // only used in optimized code.
  (void)im2col_shape;  // only used in optimized code.
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8019768:	2300      	movs	r3, #0
 801976a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801976e:	2100      	movs	r1, #0
 8019770:	68b8      	ldr	r0, [r7, #8]
 8019772:	f7ff ff77 	bl	8019664 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8019776:	64b8      	str	r0, [r7, #72]	; 0x48
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 8019778:	2303      	movs	r3, #3
 801977a:	683a      	ldr	r2, [r7, #0]
 801977c:	2103      	movs	r1, #3
 801977e:	68b8      	ldr	r0, [r7, #8]
 8019780:	f7ff ff70 	bl	8019664 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8019784:	6478      	str	r0, [r7, #68]	; 0x44
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 8019786:	2303      	movs	r3, #3
 8019788:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801978c:	2100      	movs	r1, #0
 801978e:	6838      	ldr	r0, [r7, #0]
 8019790:	f7ff ff68 	bl	8019664 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8019794:	4603      	mov	r3, r0
 8019796:	613b      	str	r3, [r7, #16]
  if (bias_data) {
 8019798:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801979c:	2b00      	cmp	r3, #0
 801979e:	d009      	beq.n	80197b4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xcc>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 80197a0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80197a4:	f7ff fc0b 	bl	8018fbe <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 80197a8:	4602      	mov	r2, r0
 80197aa:	693b      	ldr	r3, [r7, #16]
 80197ac:	429a      	cmp	r2, r3
 80197ae:	d001      	beq.n	80197b4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xcc>
 80197b0:	f005 fb4e 	bl	801ee50 <abort>
  }
  const int input_height = input_shape.Dims(1);
 80197b4:	2101      	movs	r1, #1
 80197b6:	68b8      	ldr	r0, [r7, #8]
 80197b8:	f7ff fb6f 	bl	8018e9a <_ZNK6tflite12RuntimeShape4DimsEi>
 80197bc:	6438      	str	r0, [r7, #64]	; 0x40
  const int input_width = input_shape.Dims(2);
 80197be:	2102      	movs	r1, #2
 80197c0:	68b8      	ldr	r0, [r7, #8]
 80197c2:	f7ff fb6a 	bl	8018e9a <_ZNK6tflite12RuntimeShape4DimsEi>
 80197c6:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int filter_height = filter_shape.Dims(1);
 80197c8:	2101      	movs	r1, #1
 80197ca:	6838      	ldr	r0, [r7, #0]
 80197cc:	f7ff fb65 	bl	8018e9a <_ZNK6tflite12RuntimeShape4DimsEi>
 80197d0:	63b8      	str	r0, [r7, #56]	; 0x38
  const int filter_width = filter_shape.Dims(2);
 80197d2:	2102      	movs	r1, #2
 80197d4:	6838      	ldr	r0, [r7, #0]
 80197d6:	f7ff fb60 	bl	8018e9a <_ZNK6tflite12RuntimeShape4DimsEi>
 80197da:	6378      	str	r0, [r7, #52]	; 0x34
  const int output_height = output_shape.Dims(1);
 80197dc:	2101      	movs	r1, #1
 80197de:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80197e2:	f7ff fb5a 	bl	8018e9a <_ZNK6tflite12RuntimeShape4DimsEi>
 80197e6:	6338      	str	r0, [r7, #48]	; 0x30
  const int output_width = output_shape.Dims(2);
 80197e8:	2102      	movs	r1, #2
 80197ea:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80197ee:	f7ff fb54 	bl	8018e9a <_ZNK6tflite12RuntimeShape4DimsEi>
 80197f2:	62f8      	str	r0, [r7, #44]	; 0x2c
  for (int batch = 0; batch < batches; ++batch) {
 80197f4:	2300      	movs	r3, #0
 80197f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80197fa:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80197fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019800:	429a      	cmp	r2, r3
 8019802:	f280 80de 	bge.w	80199c2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2da>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8019806:	2300      	movs	r3, #0
 8019808:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801980c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8019810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019812:	429a      	cmp	r2, r3
 8019814:	f280 80cf 	bge.w	80199b6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2ce>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8019818:	2300      	movs	r3, #0
 801981a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801981e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8019822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019824:	429a      	cmp	r2, r3
 8019826:	f280 80c0 	bge.w	80199aa <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2c2>
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 801982a:	2300      	movs	r3, #0
 801982c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8019830:	693b      	ldr	r3, [r7, #16]
 8019832:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8019836:	429a      	cmp	r2, r3
 8019838:	f280 80b1 	bge.w	801999e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2b6>
          const int in_x_origin = (out_x * stride_width) - pad_width;
 801983c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8019840:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8019842:	fb02 f203 	mul.w	r2, r2, r3
 8019846:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019848:	1ad3      	subs	r3, r2, r3
 801984a:	62bb      	str	r3, [r7, #40]	; 0x28
          const int in_y_origin = (out_y * stride_height) - pad_height;
 801984c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8019850:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8019852:	fb02 f203 	mul.w	r2, r2, r3
 8019856:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019858:	1ad3      	subs	r3, r2, r3
 801985a:	627b      	str	r3, [r7, #36]	; 0x24
          float total = 0.f;
 801985c:	f04f 0300 	mov.w	r3, #0
 8019860:	67fb      	str	r3, [r7, #124]	; 0x7c
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8019862:	2300      	movs	r3, #0
 8019864:	67bb      	str	r3, [r7, #120]	; 0x78
 8019866:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8019868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801986a:	429a      	cmp	r2, r3
 801986c:	da5e      	bge.n	801992c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x244>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 801986e:	2300      	movs	r3, #0
 8019870:	677b      	str	r3, [r7, #116]	; 0x74
 8019872:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8019874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019876:	429a      	cmp	r2, r3
 8019878:	da54      	bge.n	8019924 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x23c>
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 801987a:	2300      	movs	r3, #0
 801987c:	673b      	str	r3, [r7, #112]	; 0x70
 801987e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8019880:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019882:	429a      	cmp	r2, r3
 8019884:	da4a      	bge.n	801991c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x234>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
 8019886:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019888:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801988a:	fb02 f303 	mul.w	r3, r2, r3
 801988e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019890:	4413      	add	r3, r2
 8019892:	623b      	str	r3, [r7, #32]
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
 8019894:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019896:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8019898:	fb02 f303 	mul.w	r3, r2, r3
                const int in_y =
 801989c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801989e:	4413      	add	r3, r2
 80198a0:	61fb      	str	r3, [r7, #28]
                // If the location is outside the bounds of the input image,
                // use zero as a default value.
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 80198a2:	6a3b      	ldr	r3, [r7, #32]
 80198a4:	2b00      	cmp	r3, #0
 80198a6:	db35      	blt.n	8019914 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x22c>
 80198a8:	6a3a      	ldr	r2, [r7, #32]
 80198aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80198ac:	429a      	cmp	r2, r3
 80198ae:	da31      	bge.n	8019914 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x22c>
 80198b0:	69fb      	ldr	r3, [r7, #28]
 80198b2:	2b00      	cmp	r3, #0
 80198b4:	db2e      	blt.n	8019914 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x22c>
 80198b6:	69fa      	ldr	r2, [r7, #28]
 80198b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80198ba:	429a      	cmp	r2, r3
 80198bc:	da2a      	bge.n	8019914 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x22c>
                    (in_y < input_height)) {
                  float input_value = input_data[Offset(
 80198be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80198c0:	9300      	str	r3, [sp, #0]
 80198c2:	6a3b      	ldr	r3, [r7, #32]
 80198c4:	69fa      	ldr	r2, [r7, #28]
 80198c6:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80198ca:	68b8      	ldr	r0, [r7, #8]
 80198cc:	f7ff fcf8 	bl	80192c0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 80198d0:	4603      	mov	r3, r0
                      input_shape, batch, in_y, in_x, in_channel)];
 80198d2:	009b      	lsls	r3, r3, #2
 80198d4:	687a      	ldr	r2, [r7, #4]
 80198d6:	4413      	add	r3, r2
 80198d8:	681b      	ldr	r3, [r3, #0]
 80198da:	61bb      	str	r3, [r7, #24]
                  float filter_value =
                      filter_data[Offset(filter_shape, out_channel, filter_y,
 80198dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80198de:	9300      	str	r3, [sp, #0]
 80198e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80198e2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80198e4:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80198e8:	6838      	ldr	r0, [r7, #0]
 80198ea:	f7ff fce9 	bl	80192c0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 80198ee:	4603      	mov	r3, r0
                                         filter_x, in_channel)];
 80198f0:	009b      	lsls	r3, r3, #2
 80198f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80198f6:	4413      	add	r3, r2
 80198f8:	681b      	ldr	r3, [r3, #0]
 80198fa:	617b      	str	r3, [r7, #20]
                  total += (input_value * filter_value);
 80198fc:	ed97 7a06 	vldr	s14, [r7, #24]
 8019900:	edd7 7a05 	vldr	s15, [r7, #20]
 8019904:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019908:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 801990c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019910:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8019914:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019916:	3301      	adds	r3, #1
 8019918:	673b      	str	r3, [r7, #112]	; 0x70
 801991a:	e7b0      	b.n	801987e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x196>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 801991c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801991e:	3301      	adds	r3, #1
 8019920:	677b      	str	r3, [r7, #116]	; 0x74
 8019922:	e7a6      	b.n	8019872 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x18a>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8019924:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019926:	3301      	adds	r3, #1
 8019928:	67bb      	str	r3, [r7, #120]	; 0x78
 801992a:	e79c      	b.n	8019866 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x17e>
                }
              }
            }
          }
          float bias_value = 0.0f;
 801992c:	f04f 0300 	mov.w	r3, #0
 8019930:	66fb      	str	r3, [r7, #108]	; 0x6c
          if (bias_data) {
 8019932:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8019936:	2b00      	cmp	r3, #0
 8019938:	d007      	beq.n	801994a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x262>
            bias_value = bias_data[out_channel];
 801993a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801993e:	009b      	lsls	r3, r3, #2
 8019940:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8019944:	4413      	add	r3, r2
 8019946:	681b      	ldr	r3, [r3, #0]
 8019948:	66fb      	str	r3, [r7, #108]	; 0x6c
          }
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
              ActivationFunctionWithMinMax(total + bias_value,
 801994a:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 801994e:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8019952:	ee37 8a27 	vadd.f32	s16, s14, s15
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 8019956:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801995a:	9300      	str	r3, [sp, #0]
 801995c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8019960:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8019964:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8019968:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 801996c:	f7ff fca8 	bl	80192c0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8019970:	4603      	mov	r3, r0
 8019972:	009b      	lsls	r3, r3, #2
 8019974:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8019978:	18d4      	adds	r4, r2, r3
              ActivationFunctionWithMinMax(total + bias_value,
 801997a:	ed97 1a13 	vldr	s2, [r7, #76]	; 0x4c
 801997e:	edd7 0a14 	vldr	s1, [r7, #80]	; 0x50
 8019982:	eeb0 0a48 	vmov.f32	s0, s16
 8019986:	f7ff fcf3 	bl	8019370 <_ZN6tflite28ActivationFunctionWithMinMaxEfff>
 801998a:	eef0 7a40 	vmov.f32	s15, s0
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 801998e:	edc4 7a00 	vstr	s15, [r4]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 8019992:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8019996:	3301      	adds	r3, #1
 8019998:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801999c:	e748      	b.n	8019830 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x148>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 801999e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80199a2:	3301      	adds	r3, #1
 80199a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80199a8:	e739      	b.n	801981e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x136>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 80199aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80199ae:	3301      	adds	r3, #1
 80199b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80199b4:	e72a      	b.n	801980c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x124>
  for (int batch = 0; batch < batches; ++batch) {
 80199b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80199ba:	3301      	adds	r3, #1
 80199bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80199c0:	e71b      	b.n	80197fa <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x112>
                                           output_activation_max);
        }
      }
    }
  }
}
 80199c2:	bf00      	nop
 80199c4:	3794      	adds	r7, #148	; 0x94
 80199c6:	46bd      	mov	sp, r7
 80199c8:	ecbd 8b02 	vpop	{d8}
 80199cc:	bd90      	pop	{r4, r7, pc}

080199ce <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv>:
inline void Conv(const ConvParams& params, const RuntimeShape& input_shape,
                 const uint8* input_data, const RuntimeShape& filter_shape,
                 const uint8* filter_data, const RuntimeShape& bias_shape,
                 const int32* bias_data, const RuntimeShape& output_shape,
                 uint8* output_data, const RuntimeShape& im2col_shape,
                 uint8* im2col_data, void* cpu_backend_context) {
 80199ce:	b590      	push	{r4, r7, lr}
 80199d0:	b0ab      	sub	sp, #172	; 0xac
 80199d2:	af02      	add	r7, sp, #8
 80199d4:	60f8      	str	r0, [r7, #12]
 80199d6:	60b9      	str	r1, [r7, #8]
 80199d8:	607a      	str	r2, [r7, #4]
 80199da:	603b      	str	r3, [r7, #0]
  (void)cpu_backend_context;  // only used in optimized code.
  (void)im2col_data;   // only used in optimized code.
  (void)im2col_shape;  // only used in optimized code.
  const int stride_width = params.stride_width;
 80199dc:	68fb      	ldr	r3, [r7, #12]
 80199de:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80199e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  const int stride_height = params.stride_height;
 80199e6:	68fb      	ldr	r3, [r7, #12]
 80199e8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80199ec:	67fb      	str	r3, [r7, #124]	; 0x7c
  const int dilation_width_factor = params.dilation_width_factor;
 80199ee:	68fb      	ldr	r3, [r7, #12]
 80199f0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80199f4:	67bb      	str	r3, [r7, #120]	; 0x78
  const int dilation_height_factor = params.dilation_height_factor;
 80199f6:	68fb      	ldr	r3, [r7, #12]
 80199f8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80199fc:	677b      	str	r3, [r7, #116]	; 0x74
  const int pad_width = params.padding_values.width;
 80199fe:	68fb      	ldr	r3, [r7, #12]
 8019a00:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019a04:	673b      	str	r3, [r7, #112]	; 0x70
  const int pad_height = params.padding_values.height;
 8019a06:	68fb      	ldr	r3, [r7, #12]
 8019a08:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8019a0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int32 input_offset = params.input_offset;
 8019a0e:	68fb      	ldr	r3, [r7, #12]
 8019a10:	695b      	ldr	r3, [r3, #20]
 8019a12:	66bb      	str	r3, [r7, #104]	; 0x68
  const int32 filter_offset = params.weights_offset;
 8019a14:	68fb      	ldr	r3, [r7, #12]
 8019a16:	699b      	ldr	r3, [r3, #24]
 8019a18:	667b      	str	r3, [r7, #100]	; 0x64
  const int32 output_offset = params.output_offset;
 8019a1a:	68fb      	ldr	r3, [r7, #12]
 8019a1c:	69db      	ldr	r3, [r3, #28]
 8019a1e:	663b      	str	r3, [r7, #96]	; 0x60
  const int32 output_multiplier = params.output_multiplier;
 8019a20:	68fb      	ldr	r3, [r7, #12]
 8019a22:	6a1b      	ldr	r3, [r3, #32]
 8019a24:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int output_shift = params.output_shift;
 8019a26:	68fb      	ldr	r3, [r7, #12]
 8019a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a2a:	65bb      	str	r3, [r7, #88]	; 0x58
  const int32 output_activation_min = params.quantized_activation_min;
 8019a2c:	68fb      	ldr	r3, [r7, #12]
 8019a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019a30:	61fb      	str	r3, [r7, #28]
  const int32 output_activation_max = params.quantized_activation_max;
 8019a32:	68fb      	ldr	r3, [r7, #12]
 8019a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019a36:	61bb      	str	r3, [r7, #24]
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 8019a38:	69fa      	ldr	r2, [r7, #28]
 8019a3a:	69bb      	ldr	r3, [r7, #24]
 8019a3c:	429a      	cmp	r2, r3
 8019a3e:	dd01      	ble.n	8019a44 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x76>
 8019a40:	f005 fa06 	bl	801ee50 <abort>

  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8019a44:	68b8      	ldr	r0, [r7, #8]
 8019a46:	f7ff fa1c 	bl	8018e82 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8019a4a:	4603      	mov	r3, r0
 8019a4c:	2b04      	cmp	r3, #4
 8019a4e:	d001      	beq.n	8019a54 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x86>
 8019a50:	f005 f9fe 	bl	801ee50 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 8019a54:	6838      	ldr	r0, [r7, #0]
 8019a56:	f7ff fa14 	bl	8018e82 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8019a5a:	4603      	mov	r3, r0
 8019a5c:	2b04      	cmp	r3, #4
 8019a5e:	d001      	beq.n	8019a64 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x96>
 8019a60:	f005 f9f6 	bl	801ee50 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8019a64:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8019a68:	f7ff fa0b 	bl	8018e82 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8019a6c:	4603      	mov	r3, r0
 8019a6e:	2b04      	cmp	r3, #4
 8019a70:	d001      	beq.n	8019a76 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0xa8>
 8019a72:	f005 f9ed 	bl	801ee50 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8019a76:	2300      	movs	r3, #0
 8019a78:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8019a7c:	2100      	movs	r1, #0
 8019a7e:	68b8      	ldr	r0, [r7, #8]
 8019a80:	f7ff fdf0 	bl	8019664 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8019a84:	6578      	str	r0, [r7, #84]	; 0x54
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 8019a86:	2303      	movs	r3, #3
 8019a88:	683a      	ldr	r2, [r7, #0]
 8019a8a:	2103      	movs	r1, #3
 8019a8c:	68b8      	ldr	r0, [r7, #8]
 8019a8e:	f7ff fde9 	bl	8019664 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8019a92:	6538      	str	r0, [r7, #80]	; 0x50
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 8019a94:	2303      	movs	r3, #3
 8019a96:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8019a9a:	2100      	movs	r1, #0
 8019a9c:	6838      	ldr	r0, [r7, #0]
 8019a9e:	f7ff fde1 	bl	8019664 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8019aa2:	4603      	mov	r3, r0
 8019aa4:	617b      	str	r3, [r7, #20]
  if (bias_data) {
 8019aa6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8019aaa:	2b00      	cmp	r3, #0
 8019aac:	d009      	beq.n	8019ac2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0xf4>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 8019aae:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8019ab2:	f7ff fa84 	bl	8018fbe <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8019ab6:	4602      	mov	r2, r0
 8019ab8:	697b      	ldr	r3, [r7, #20]
 8019aba:	429a      	cmp	r2, r3
 8019abc:	d001      	beq.n	8019ac2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0xf4>
 8019abe:	f005 f9c7 	bl	801ee50 <abort>
  }
  const int input_height = input_shape.Dims(1);
 8019ac2:	2101      	movs	r1, #1
 8019ac4:	68b8      	ldr	r0, [r7, #8]
 8019ac6:	f7ff f9e8 	bl	8018e9a <_ZNK6tflite12RuntimeShape4DimsEi>
 8019aca:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int input_width = input_shape.Dims(2);
 8019acc:	2102      	movs	r1, #2
 8019ace:	68b8      	ldr	r0, [r7, #8]
 8019ad0:	f7ff f9e3 	bl	8018e9a <_ZNK6tflite12RuntimeShape4DimsEi>
 8019ad4:	64b8      	str	r0, [r7, #72]	; 0x48
  const int filter_height = filter_shape.Dims(1);
 8019ad6:	2101      	movs	r1, #1
 8019ad8:	6838      	ldr	r0, [r7, #0]
 8019ada:	f7ff f9de 	bl	8018e9a <_ZNK6tflite12RuntimeShape4DimsEi>
 8019ade:	6478      	str	r0, [r7, #68]	; 0x44
  const int filter_width = filter_shape.Dims(2);
 8019ae0:	2102      	movs	r1, #2
 8019ae2:	6838      	ldr	r0, [r7, #0]
 8019ae4:	f7ff f9d9 	bl	8018e9a <_ZNK6tflite12RuntimeShape4DimsEi>
 8019ae8:	6438      	str	r0, [r7, #64]	; 0x40
  const int output_height = output_shape.Dims(1);
 8019aea:	2101      	movs	r1, #1
 8019aec:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8019af0:	f7ff f9d3 	bl	8018e9a <_ZNK6tflite12RuntimeShape4DimsEi>
 8019af4:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int output_width = output_shape.Dims(2);
 8019af6:	2102      	movs	r1, #2
 8019af8:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8019afc:	f7ff f9cd 	bl	8018e9a <_ZNK6tflite12RuntimeShape4DimsEi>
 8019b00:	63b8      	str	r0, [r7, #56]	; 0x38
  for (int batch = 0; batch < batches; ++batch) {
 8019b02:	2300      	movs	r3, #0
 8019b04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8019b08:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8019b0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019b0e:	429a      	cmp	r2, r3
 8019b10:	f280 8101 	bge.w	8019d16 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x348>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8019b14:	2300      	movs	r3, #0
 8019b16:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8019b1a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8019b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019b20:	429a      	cmp	r2, r3
 8019b22:	f280 80f2 	bge.w	8019d0a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x33c>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8019b26:	2300      	movs	r3, #0
 8019b28:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8019b2c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8019b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019b32:	429a      	cmp	r2, r3
 8019b34:	f280 80e3 	bge.w	8019cfe <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x330>
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 8019b38:	2300      	movs	r3, #0
 8019b3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8019b3e:	697b      	ldr	r3, [r7, #20]
 8019b40:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8019b44:	429a      	cmp	r2, r3
 8019b46:	f280 80d4 	bge.w	8019cf2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x324>
          const int in_x_origin = (out_x * stride_width) - pad_width;
 8019b4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019b4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8019b52:	fb02 f203 	mul.w	r2, r2, r3
 8019b56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019b58:	1ad3      	subs	r3, r2, r3
 8019b5a:	637b      	str	r3, [r7, #52]	; 0x34
          const int in_y_origin = (out_y * stride_height) - pad_height;
 8019b5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019b60:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8019b62:	fb02 f203 	mul.w	r2, r2, r3
 8019b66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019b68:	1ad3      	subs	r3, r2, r3
 8019b6a:	633b      	str	r3, [r7, #48]	; 0x30
          int32 acc = 0;
 8019b6c:	2300      	movs	r3, #0
 8019b6e:	613b      	str	r3, [r7, #16]
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8019b70:	2300      	movs	r3, #0
 8019b72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8019b76:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8019b7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019b7c:	429a      	cmp	r2, r3
 8019b7e:	da6d      	bge.n	8019c5c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x28e>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8019b80:	2300      	movs	r3, #0
 8019b82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8019b86:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8019b8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019b8c:	429a      	cmp	r2, r3
 8019b8e:	da5f      	bge.n	8019c50 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x282>
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8019b90:	2300      	movs	r3, #0
 8019b92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8019b96:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8019b9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019b9c:	429a      	cmp	r2, r3
 8019b9e:	da51      	bge.n	8019c44 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x276>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
 8019ba0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019ba2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8019ba6:	fb02 f303 	mul.w	r3, r2, r3
 8019baa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019bac:	4413      	add	r3, r2
 8019bae:	62fb      	str	r3, [r7, #44]	; 0x2c
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
 8019bb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019bb2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8019bb6:	fb02 f303 	mul.w	r3, r2, r3
                const int in_y =
 8019bba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019bbc:	4413      	add	r3, r2
 8019bbe:	62bb      	str	r3, [r7, #40]	; 0x28
                // If the location is outside the bounds of the input image,
                // use zero as a default value.
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 8019bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019bc2:	2b00      	cmp	r3, #0
 8019bc4:	db38      	blt.n	8019c38 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x26a>
 8019bc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019bc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019bca:	429a      	cmp	r2, r3
 8019bcc:	da34      	bge.n	8019c38 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x26a>
 8019bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019bd0:	2b00      	cmp	r3, #0
 8019bd2:	db31      	blt.n	8019c38 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x26a>
 8019bd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019bd8:	429a      	cmp	r2, r3
 8019bda:	da2d      	bge.n	8019c38 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x26a>
                    (in_y < input_height)) {
                  int32 input_val = input_data[Offset(input_shape, batch, in_y,
 8019bdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8019be0:	9300      	str	r3, [sp, #0]
 8019be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019be4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019be6:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8019bea:	68b8      	ldr	r0, [r7, #8]
 8019bec:	f7ff fb68 	bl	80192c0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8019bf0:	4603      	mov	r3, r0
 8019bf2:	461a      	mov	r2, r3
                                                      in_x, in_channel)];
 8019bf4:	687b      	ldr	r3, [r7, #4]
 8019bf6:	4413      	add	r3, r2
 8019bf8:	781b      	ldrb	r3, [r3, #0]
 8019bfa:	627b      	str	r3, [r7, #36]	; 0x24
                  int32 filter_val =
                      filter_data[Offset(filter_shape, out_channel, filter_y,
 8019bfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8019c00:	9300      	str	r3, [sp, #0]
 8019c02:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8019c06:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8019c0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8019c0e:	6838      	ldr	r0, [r7, #0]
 8019c10:	f7ff fb56 	bl	80192c0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8019c14:	4603      	mov	r3, r0
 8019c16:	461a      	mov	r2, r3
                                         filter_x, in_channel)];
 8019c18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8019c1c:	4413      	add	r3, r2
 8019c1e:	781b      	ldrb	r3, [r3, #0]
 8019c20:	623b      	str	r3, [r7, #32]
                  acc +=
                      (filter_val + filter_offset) * (input_val + input_offset);
 8019c22:	6a3a      	ldr	r2, [r7, #32]
 8019c24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019c26:	4413      	add	r3, r2
 8019c28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019c2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8019c2c:	440a      	add	r2, r1
 8019c2e:	fb02 f203 	mul.w	r2, r2, r3
                  acc +=
 8019c32:	693b      	ldr	r3, [r7, #16]
 8019c34:	4413      	add	r3, r2
 8019c36:	613b      	str	r3, [r7, #16]
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8019c38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8019c3c:	3301      	adds	r3, #1
 8019c3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8019c42:	e7a8      	b.n	8019b96 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x1c8>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8019c44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8019c48:	3301      	adds	r3, #1
 8019c4a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8019c4e:	e79a      	b.n	8019b86 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x1b8>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8019c50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8019c54:	3301      	adds	r3, #1
 8019c56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8019c5a:	e78c      	b.n	8019b76 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x1a8>
                }
              }
            }
          }
          if (bias_data) {
 8019c5c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8019c60:	2b00      	cmp	r3, #0
 8019c62:	d009      	beq.n	8019c78 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x2aa>
            acc += bias_data[out_channel];
 8019c64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019c68:	009b      	lsls	r3, r3, #2
 8019c6a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8019c6e:	4413      	add	r3, r2
 8019c70:	681a      	ldr	r2, [r3, #0]
 8019c72:	693b      	ldr	r3, [r7, #16]
 8019c74:	4413      	add	r3, r2
 8019c76:	613b      	str	r3, [r7, #16]
          }
          acc = MultiplyByQuantizedMultiplier(acc, output_multiplier,
 8019c78:	693b      	ldr	r3, [r7, #16]
 8019c7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8019c7c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8019c7e:	4618      	mov	r0, r3
 8019c80:	f7ff fd0e 	bl	80196a0 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8019c84:	4603      	mov	r3, r0
 8019c86:	613b      	str	r3, [r7, #16]
                                              output_shift);
          acc += output_offset;
 8019c88:	693a      	ldr	r2, [r7, #16]
 8019c8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019c8c:	4413      	add	r3, r2
 8019c8e:	613b      	str	r3, [r7, #16]
          acc = std::max(acc, output_activation_min);
 8019c90:	f107 021c 	add.w	r2, r7, #28
 8019c94:	f107 0310 	add.w	r3, r7, #16
 8019c98:	4611      	mov	r1, r2
 8019c9a:	4618      	mov	r0, r3
 8019c9c:	f7fc f878 	bl	8015d90 <_ZSt3maxIlERKT_S2_S2_>
 8019ca0:	4603      	mov	r3, r0
 8019ca2:	681b      	ldr	r3, [r3, #0]
 8019ca4:	613b      	str	r3, [r7, #16]
          acc = std::min(acc, output_activation_max);
 8019ca6:	f107 0218 	add.w	r2, r7, #24
 8019caa:	f107 0310 	add.w	r3, r7, #16
 8019cae:	4611      	mov	r1, r2
 8019cb0:	4618      	mov	r0, r3
 8019cb2:	f7fc f881 	bl	8015db8 <_ZSt3minIlERKT_S2_S2_>
 8019cb6:	4603      	mov	r3, r0
 8019cb8:	681b      	ldr	r3, [r3, #0]
 8019cba:	613b      	str	r3, [r7, #16]
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 8019cbc:	693c      	ldr	r4, [r7, #16]
 8019cbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019cc2:	9300      	str	r3, [sp, #0]
 8019cc4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019cc8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8019ccc:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8019cd0:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8019cd4:	f7ff faf4 	bl	80192c0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8019cd8:	4603      	mov	r3, r0
 8019cda:	461a      	mov	r2, r3
 8019cdc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8019ce0:	4413      	add	r3, r2
 8019ce2:	b2e2      	uxtb	r2, r4
 8019ce4:	701a      	strb	r2, [r3, #0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 8019ce6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019cea:	3301      	adds	r3, #1
 8019cec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8019cf0:	e725      	b.n	8019b3e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x170>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8019cf2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019cf6:	3301      	adds	r3, #1
 8019cf8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8019cfc:	e716      	b.n	8019b2c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x15e>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8019cfe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019d02:	3301      	adds	r3, #1
 8019d04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8019d08:	e707      	b.n	8019b1a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x14c>
  for (int batch = 0; batch < batches; ++batch) {
 8019d0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019d0e:	3301      	adds	r3, #1
 8019d10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8019d14:	e6f8      	b.n	8019b08 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x13a>
              static_cast<uint8>(acc);
        }
      }
    }
  }
}
 8019d16:	bf00      	nop
 8019d18:	37a4      	adds	r7, #164	; 0xa4
 8019d1a:	46bd      	mov	sp, r7
 8019d1c:	bd90      	pop	{r4, r7, pc}

08019d1e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const ConvParams& params, const int32* output_multiplier,
    const int32* output_shift, const RuntimeShape& input_shape,
    const int8* input_data, const RuntimeShape& filter_shape,
    const int8* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    int8* output_data) {
 8019d1e:	b590      	push	{r4, r7, lr}
 8019d20:	b0a9      	sub	sp, #164	; 0xa4
 8019d22:	af02      	add	r7, sp, #8
 8019d24:	60f8      	str	r0, [r7, #12]
 8019d26:	60b9      	str	r1, [r7, #8]
 8019d28:	607a      	str	r2, [r7, #4]
 8019d2a:	603b      	str	r3, [r7, #0]
  // Get parameters.
  const int32 input_offset = params.input_offset;  // r = s(q - Z)
 8019d2c:	68fb      	ldr	r3, [r7, #12]
 8019d2e:	695b      	ldr	r3, [r3, #20]
 8019d30:	67bb      	str	r3, [r7, #120]	; 0x78
  const int stride_width = params.stride_width;
 8019d32:	68fb      	ldr	r3, [r7, #12]
 8019d34:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8019d38:	677b      	str	r3, [r7, #116]	; 0x74
  const int stride_height = params.stride_height;
 8019d3a:	68fb      	ldr	r3, [r7, #12]
 8019d3c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8019d40:	673b      	str	r3, [r7, #112]	; 0x70
  const int dilation_width_factor = params.dilation_width_factor;
 8019d42:	68fb      	ldr	r3, [r7, #12]
 8019d44:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8019d48:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int dilation_height_factor = params.dilation_height_factor;
 8019d4a:	68fb      	ldr	r3, [r7, #12]
 8019d4c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8019d50:	66bb      	str	r3, [r7, #104]	; 0x68
  const int pad_width = params.padding_values.width;
 8019d52:	68fb      	ldr	r3, [r7, #12]
 8019d54:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019d58:	667b      	str	r3, [r7, #100]	; 0x64
  const int pad_height = params.padding_values.height;
 8019d5a:	68fb      	ldr	r3, [r7, #12]
 8019d5c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8019d60:	663b      	str	r3, [r7, #96]	; 0x60
  const int32 output_offset = params.output_offset;
 8019d62:	68fb      	ldr	r3, [r7, #12]
 8019d64:	69db      	ldr	r3, [r3, #28]
 8019d66:	65fb      	str	r3, [r7, #92]	; 0x5c

  // Set min and max value of the output.
  const int32 output_activation_min = params.quantized_activation_min;
 8019d68:	68fb      	ldr	r3, [r7, #12]
 8019d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019d6c:	61fb      	str	r3, [r7, #28]
  const int32 output_activation_max = params.quantized_activation_max;
 8019d6e:	68fb      	ldr	r3, [r7, #12]
 8019d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019d72:	61bb      	str	r3, [r7, #24]

  // Sanity check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 8019d74:	69fa      	ldr	r2, [r7, #28]
 8019d76:	69bb      	ldr	r3, [r7, #24]
 8019d78:	429a      	cmp	r2, r3
 8019d7a:	dd01      	ble.n	8019d80 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x62>
 8019d7c:	f005 f868 	bl	801ee50 <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8019d80:	6838      	ldr	r0, [r7, #0]
 8019d82:	f7ff f87e 	bl	8018e82 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8019d86:	4603      	mov	r3, r0
 8019d88:	2b04      	cmp	r3, #4
 8019d8a:	d001      	beq.n	8019d90 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x72>
 8019d8c:	f005 f860 	bl	801ee50 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 8019d90:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8019d94:	f7ff f875 	bl	8018e82 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8019d98:	4603      	mov	r3, r0
 8019d9a:	2b04      	cmp	r3, #4
 8019d9c:	d001      	beq.n	8019da2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x84>
 8019d9e:	f005 f857 	bl	801ee50 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8019da2:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8019da6:	f7ff f86c 	bl	8018e82 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8019daa:	4603      	mov	r3, r0
 8019dac:	2b04      	cmp	r3, #4
 8019dae:	d001      	beq.n	8019db4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x96>
 8019db0:	f005 f84e 	bl	801ee50 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8019db4:	2300      	movs	r3, #0
 8019db6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8019dba:	2100      	movs	r1, #0
 8019dbc:	6838      	ldr	r0, [r7, #0]
 8019dbe:	f7ff fc51 	bl	8019664 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8019dc2:	65b8      	str	r0, [r7, #88]	; 0x58
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 8019dc4:	2303      	movs	r3, #3
 8019dc6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8019dca:	2103      	movs	r1, #3
 8019dcc:	6838      	ldr	r0, [r7, #0]
 8019dce:	f7ff fc49 	bl	8019664 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8019dd2:	6578      	str	r0, [r7, #84]	; 0x54
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 8019dd4:	2303      	movs	r3, #3
 8019dd6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8019dda:	2100      	movs	r1, #0
 8019ddc:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8019de0:	f7ff fc40 	bl	8019664 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8019de4:	4603      	mov	r3, r0
 8019de6:	617b      	str	r3, [r7, #20]
  if (bias_data) {
 8019de8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8019dec:	2b00      	cmp	r3, #0
 8019dee:	d009      	beq.n	8019e04 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe6>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 8019df0:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8019df4:	f7ff f8e3 	bl	8018fbe <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8019df8:	4602      	mov	r2, r0
 8019dfa:	697b      	ldr	r3, [r7, #20]
 8019dfc:	429a      	cmp	r2, r3
 8019dfe:	d001      	beq.n	8019e04 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe6>
 8019e00:	f005 f826 	bl	801ee50 <abort>
  }

  // Check dimensions of the tensors.
  const int input_height = input_shape.Dims(1);
 8019e04:	2101      	movs	r1, #1
 8019e06:	6838      	ldr	r0, [r7, #0]
 8019e08:	f7ff f847 	bl	8018e9a <_ZNK6tflite12RuntimeShape4DimsEi>
 8019e0c:	6538      	str	r0, [r7, #80]	; 0x50
  const int input_width = input_shape.Dims(2);
 8019e0e:	2102      	movs	r1, #2
 8019e10:	6838      	ldr	r0, [r7, #0]
 8019e12:	f7ff f842 	bl	8018e9a <_ZNK6tflite12RuntimeShape4DimsEi>
 8019e16:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int filter_height = filter_shape.Dims(1);
 8019e18:	2101      	movs	r1, #1
 8019e1a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8019e1e:	f7ff f83c 	bl	8018e9a <_ZNK6tflite12RuntimeShape4DimsEi>
 8019e22:	64b8      	str	r0, [r7, #72]	; 0x48
  const int filter_width = filter_shape.Dims(2);
 8019e24:	2102      	movs	r1, #2
 8019e26:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8019e2a:	f7ff f836 	bl	8018e9a <_ZNK6tflite12RuntimeShape4DimsEi>
 8019e2e:	6478      	str	r0, [r7, #68]	; 0x44
  const int output_height = output_shape.Dims(1);
 8019e30:	2101      	movs	r1, #1
 8019e32:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8019e36:	f7ff f830 	bl	8018e9a <_ZNK6tflite12RuntimeShape4DimsEi>
 8019e3a:	6438      	str	r0, [r7, #64]	; 0x40
  const int output_width = output_shape.Dims(2);
 8019e3c:	2102      	movs	r1, #2
 8019e3e:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8019e42:	f7ff f82a 	bl	8018e9a <_ZNK6tflite12RuntimeShape4DimsEi>
 8019e46:	63f8      	str	r0, [r7, #60]	; 0x3c
  for (int batch = 0; batch < batches; ++batch) {
 8019e48:	2300      	movs	r3, #0
 8019e4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8019e4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8019e52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019e54:	429a      	cmp	r2, r3
 8019e56:	f280 810f 	bge.w	801a078 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x35a>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8019e5a:	2300      	movs	r3, #0
 8019e5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8019e60:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8019e64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019e66:	429a      	cmp	r2, r3
 8019e68:	f280 8100 	bge.w	801a06c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x34e>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8019e6c:	2300      	movs	r3, #0
 8019e6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8019e72:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8019e76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019e78:	429a      	cmp	r2, r3
 8019e7a:	f280 80f1 	bge.w	801a060 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x342>
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 8019e7e:	2300      	movs	r3, #0
 8019e80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8019e84:	697b      	ldr	r3, [r7, #20]
 8019e86:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8019e8a:	429a      	cmp	r2, r3
 8019e8c:	f280 80e2 	bge.w	801a054 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x336>
          const int in_x_origin = (out_x * stride_width) - pad_width;
 8019e90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8019e94:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8019e96:	fb02 f203 	mul.w	r2, r2, r3
 8019e9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019e9c:	1ad3      	subs	r3, r2, r3
 8019e9e:	63bb      	str	r3, [r7, #56]	; 0x38
          const int in_y_origin = (out_y * stride_height) - pad_height;
 8019ea0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019ea4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8019ea6:	fb02 f203 	mul.w	r2, r2, r3
 8019eaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019eac:	1ad3      	subs	r3, r2, r3
 8019eae:	637b      	str	r3, [r7, #52]	; 0x34
          int32 acc = 0;
 8019eb0:	2300      	movs	r3, #0
 8019eb2:	613b      	str	r3, [r7, #16]
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8019eb4:	2300      	movs	r3, #0
 8019eb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8019eba:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8019ebe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019ec0:	429a      	cmp	r2, r3
 8019ec2:	da72      	bge.n	8019faa <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x28c>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8019ec4:	2300      	movs	r3, #0
 8019ec6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8019eca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8019ece:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019ed0:	429a      	cmp	r2, r3
 8019ed2:	da64      	bge.n	8019f9e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x280>
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8019ed4:	2300      	movs	r3, #0
 8019ed6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8019ed8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8019eda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019edc:	429a      	cmp	r2, r3
 8019ede:	da58      	bge.n	8019f92 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x274>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
 8019ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019ee2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8019ee6:	fb02 f303 	mul.w	r3, r2, r3
 8019eea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019eec:	4413      	add	r3, r2
 8019eee:	633b      	str	r3, [r7, #48]	; 0x30
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
 8019ef0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019ef2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8019ef6:	fb02 f303 	mul.w	r3, r2, r3
                const int in_y =
 8019efa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019efc:	4413      	add	r3, r2
 8019efe:	62fb      	str	r3, [r7, #44]	; 0x2c
                // Zero padding by omitting the areas outside the image.
                const bool is_point_inside_image =
                    (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 8019f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f02:	2b00      	cmp	r3, #0
 8019f04:	db0c      	blt.n	8019f20 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x202>
 8019f06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019f08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019f0a:	429a      	cmp	r2, r3
 8019f0c:	da08      	bge.n	8019f20 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x202>
 8019f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f10:	2b00      	cmp	r3, #0
 8019f12:	db05      	blt.n	8019f20 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x202>
 8019f14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019f16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019f18:	429a      	cmp	r2, r3
 8019f1a:	da01      	bge.n	8019f20 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x202>
 8019f1c:	2301      	movs	r3, #1
 8019f1e:	e000      	b.n	8019f22 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x204>
 8019f20:	2300      	movs	r3, #0
                const bool is_point_inside_image =
 8019f22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    (in_y < input_height);
                if (is_point_inside_image) {
 8019f26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8019f2a:	2b00      	cmp	r3, #0
 8019f2c:	d02d      	beq.n	8019f8a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x26c>
                  int32 input_val = input_data[Offset(input_shape, batch, in_y,
 8019f2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8019f30:	9300      	str	r3, [sp, #0]
 8019f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019f36:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8019f3a:	6838      	ldr	r0, [r7, #0]
 8019f3c:	f7ff f9c0 	bl	80192c0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8019f40:	4603      	mov	r3, r0
 8019f42:	461a      	mov	r2, r3
                                                      in_x, in_channel)];
 8019f44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8019f48:	4413      	add	r3, r2
 8019f4a:	f993 3000 	ldrsb.w	r3, [r3]
 8019f4e:	627b      	str	r3, [r7, #36]	; 0x24
                  int32 filter_val =
                      filter_data[Offset(filter_shape, out_channel, filter_y,
 8019f50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8019f52:	9300      	str	r3, [sp, #0]
 8019f54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8019f58:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8019f5c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8019f60:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8019f64:	f7ff f9ac 	bl	80192c0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8019f68:	4603      	mov	r3, r0
 8019f6a:	461a      	mov	r2, r3
                                         filter_x, in_channel)];
 8019f6c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8019f70:	4413      	add	r3, r2
 8019f72:	f993 3000 	ldrsb.w	r3, [r3]
 8019f76:	623b      	str	r3, [r7, #32]
                  // long as the filter size (filter_y * filter_x * in_channel)
                  // does not exceed 2^16, which is the case in all the models
                  // we have seen so far.
                  // TODO(jianlijianli): Add a check to make sure the
                  // accumulator depth is smaller than 2^16.
                  acc += filter_val * (input_val + input_offset);
 8019f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019f7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019f7c:	4413      	add	r3, r2
 8019f7e:	6a3a      	ldr	r2, [r7, #32]
 8019f80:	fb02 f203 	mul.w	r2, r2, r3
 8019f84:	693b      	ldr	r3, [r7, #16]
 8019f86:	4413      	add	r3, r2
 8019f88:	613b      	str	r3, [r7, #16]
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8019f8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8019f8c:	3301      	adds	r3, #1
 8019f8e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8019f90:	e7a2      	b.n	8019ed8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ba>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8019f92:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8019f96:	3301      	adds	r3, #1
 8019f98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8019f9c:	e795      	b.n	8019eca <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ac>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8019f9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8019fa2:	3301      	adds	r3, #1
 8019fa4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8019fa8:	e787      	b.n	8019eba <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19c>
                }
              }
            }
          }

          if (bias_data) {
 8019faa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8019fae:	2b00      	cmp	r3, #0
 8019fb0:	d009      	beq.n	8019fc6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2a8>
            acc += bias_data[out_channel];
 8019fb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8019fb6:	009b      	lsls	r3, r3, #2
 8019fb8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8019fbc:	4413      	add	r3, r2
 8019fbe:	681a      	ldr	r2, [r3, #0]
 8019fc0:	693b      	ldr	r3, [r7, #16]
 8019fc2:	4413      	add	r3, r2
 8019fc4:	613b      	str	r3, [r7, #16]
          }
          acc = MultiplyByQuantizedMultiplier(
 8019fc6:	6938      	ldr	r0, [r7, #16]
              acc, output_multiplier[out_channel], output_shift[out_channel]);
 8019fc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8019fcc:	009b      	lsls	r3, r3, #2
 8019fce:	68ba      	ldr	r2, [r7, #8]
 8019fd0:	4413      	add	r3, r2
          acc = MultiplyByQuantizedMultiplier(
 8019fd2:	6819      	ldr	r1, [r3, #0]
              acc, output_multiplier[out_channel], output_shift[out_channel]);
 8019fd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8019fd8:	009b      	lsls	r3, r3, #2
 8019fda:	687a      	ldr	r2, [r7, #4]
 8019fdc:	4413      	add	r3, r2
          acc = MultiplyByQuantizedMultiplier(
 8019fde:	681b      	ldr	r3, [r3, #0]
 8019fe0:	461a      	mov	r2, r3
 8019fe2:	f7ff fb5d 	bl	80196a0 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8019fe6:	4603      	mov	r3, r0
 8019fe8:	613b      	str	r3, [r7, #16]
          acc += output_offset;
 8019fea:	693a      	ldr	r2, [r7, #16]
 8019fec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019fee:	4413      	add	r3, r2
 8019ff0:	613b      	str	r3, [r7, #16]
          acc = std::max(acc, output_activation_min);
 8019ff2:	f107 021c 	add.w	r2, r7, #28
 8019ff6:	f107 0310 	add.w	r3, r7, #16
 8019ffa:	4611      	mov	r1, r2
 8019ffc:	4618      	mov	r0, r3
 8019ffe:	f7fb fec7 	bl	8015d90 <_ZSt3maxIlERKT_S2_S2_>
 801a002:	4603      	mov	r3, r0
 801a004:	681b      	ldr	r3, [r3, #0]
 801a006:	613b      	str	r3, [r7, #16]
          acc = std::min(acc, output_activation_max);
 801a008:	f107 0218 	add.w	r2, r7, #24
 801a00c:	f107 0310 	add.w	r3, r7, #16
 801a010:	4611      	mov	r1, r2
 801a012:	4618      	mov	r0, r3
 801a014:	f7fb fed0 	bl	8015db8 <_ZSt3minIlERKT_S2_S2_>
 801a018:	4603      	mov	r3, r0
 801a01a:	681b      	ldr	r3, [r3, #0]
 801a01c:	613b      	str	r3, [r7, #16]
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 801a01e:	693c      	ldr	r4, [r7, #16]
 801a020:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801a024:	9300      	str	r3, [sp, #0]
 801a026:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a02a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801a02e:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 801a032:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 801a036:	f7ff f943 	bl	80192c0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 801a03a:	4603      	mov	r3, r0
 801a03c:	461a      	mov	r2, r3
 801a03e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801a042:	4413      	add	r3, r2
 801a044:	b262      	sxtb	r2, r4
 801a046:	701a      	strb	r2, [r3, #0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 801a048:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801a04c:	3301      	adds	r3, #1
 801a04e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801a052:	e717      	b.n	8019e84 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x166>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 801a054:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a058:	3301      	adds	r3, #1
 801a05a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801a05e:	e708      	b.n	8019e72 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x154>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 801a060:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801a064:	3301      	adds	r3, #1
 801a066:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801a06a:	e6f9      	b.n	8019e60 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x142>
  for (int batch = 0; batch < batches; ++batch) {
 801a06c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801a070:	3301      	adds	r3, #1
 801a072:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801a076:	e6ea      	b.n	8019e4e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x130>
              static_cast<int8_t>(acc);
        }
      }
    }
  }
}
 801a078:	bf00      	nop
 801a07a:	379c      	adds	r7, #156	; 0x9c
 801a07c:	46bd      	mov	sp, r7
 801a07e:	bd90      	pop	{r4, r7, pc}

0801a080 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei>:
                                                  int index) {
 801a080:	b590      	push	{r4, r7, lr}
 801a082:	b087      	sub	sp, #28
 801a084:	af00      	add	r7, sp, #0
 801a086:	60f8      	str	r0, [r7, #12]
 801a088:	60b9      	str	r1, [r7, #8]
 801a08a:	607a      	str	r2, [r7, #4]
  const bool use_tensor = index < node->inputs->size &&
 801a08c:	68bb      	ldr	r3, [r7, #8]
 801a08e:	681b      	ldr	r3, [r3, #0]
 801a090:	681b      	ldr	r3, [r3, #0]
 801a092:	687a      	ldr	r2, [r7, #4]
 801a094:	429a      	cmp	r2, r3
 801a096:	da0a      	bge.n	801a0ae <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei+0x2e>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
 801a098:	68bb      	ldr	r3, [r7, #8]
 801a09a:	681a      	ldr	r2, [r3, #0]
 801a09c:	687b      	ldr	r3, [r7, #4]
 801a09e:	009b      	lsls	r3, r3, #2
 801a0a0:	4413      	add	r3, r2
 801a0a2:	685b      	ldr	r3, [r3, #4]
  const bool use_tensor = index < node->inputs->size &&
 801a0a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a0a8:	d001      	beq.n	801a0ae <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei+0x2e>
 801a0aa:	2301      	movs	r3, #1
 801a0ac:	e000      	b.n	801a0b0 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei+0x30>
 801a0ae:	2300      	movs	r3, #0
 801a0b0:	75fb      	strb	r3, [r7, #23]
  if (use_tensor) {
 801a0b2:	7dfb      	ldrb	r3, [r7, #23]
 801a0b4:	2b00      	cmp	r3, #0
 801a0b6:	d00e      	beq.n	801a0d6 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei+0x56>
                ->tensors[flatbuffers::EndianScalar(node->inputs->data[index])];
 801a0b8:	68fb      	ldr	r3, [r7, #12]
 801a0ba:	689c      	ldr	r4, [r3, #8]
 801a0bc:	68bb      	ldr	r3, [r7, #8]
 801a0be:	681a      	ldr	r2, [r3, #0]
 801a0c0:	687b      	ldr	r3, [r7, #4]
 801a0c2:	009b      	lsls	r3, r3, #2
 801a0c4:	4413      	add	r3, r2
 801a0c6:	685b      	ldr	r3, [r3, #4]
 801a0c8:	4618      	mov	r0, r3
 801a0ca:	f7fe ffe9 	bl	80190a0 <_ZN11flatbuffers12EndianScalarIiEET_S1_>
 801a0ce:	4603      	mov	r3, r0
 801a0d0:	019b      	lsls	r3, r3, #6
 801a0d2:	4423      	add	r3, r4
 801a0d4:	e000      	b.n	801a0d8 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei+0x58>
  return nullptr;
 801a0d6:	2300      	movs	r3, #0
}
 801a0d8:	4618      	mov	r0, r3
 801a0da:	371c      	adds	r7, #28
 801a0dc:	46bd      	mov	sp, r7
 801a0de:	bd90      	pop	{r4, r7, pc}

0801a0e0 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>:

// It's not guaranteed that padding is symmetric. It's important to keep
// offset for algorithms need all paddings.
inline int ComputePaddingWithOffset(int stride, int dilation_rate, int in_size,
                                    int filter_size, int out_size,
                                    int* offset) {
 801a0e0:	b480      	push	{r7}
 801a0e2:	b087      	sub	sp, #28
 801a0e4:	af00      	add	r7, sp, #0
 801a0e6:	60f8      	str	r0, [r7, #12]
 801a0e8:	60b9      	str	r1, [r7, #8]
 801a0ea:	607a      	str	r2, [r7, #4]
 801a0ec:	603b      	str	r3, [r7, #0]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 801a0ee:	683b      	ldr	r3, [r7, #0]
 801a0f0:	3b01      	subs	r3, #1
 801a0f2:	68ba      	ldr	r2, [r7, #8]
 801a0f4:	fb02 f303 	mul.w	r3, r2, r3
 801a0f8:	3301      	adds	r3, #1
 801a0fa:	617b      	str	r3, [r7, #20]
  int total_padding =
      ((out_size - 1) * stride + effective_filter_size - in_size);
 801a0fc:	6a3b      	ldr	r3, [r7, #32]
 801a0fe:	3b01      	subs	r3, #1
 801a100:	68fa      	ldr	r2, [r7, #12]
 801a102:	fb02 f203 	mul.w	r2, r2, r3
 801a106:	697b      	ldr	r3, [r7, #20]
 801a108:	441a      	add	r2, r3
  int total_padding =
 801a10a:	687b      	ldr	r3, [r7, #4]
 801a10c:	1ad3      	subs	r3, r2, r3
 801a10e:	613b      	str	r3, [r7, #16]
  total_padding = total_padding > 0 ? total_padding : 0;
 801a110:	693b      	ldr	r3, [r7, #16]
 801a112:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a116:	613b      	str	r3, [r7, #16]
  *offset = total_padding % 2;
 801a118:	693b      	ldr	r3, [r7, #16]
 801a11a:	2b00      	cmp	r3, #0
 801a11c:	f003 0301 	and.w	r3, r3, #1
 801a120:	bfb8      	it	lt
 801a122:	425b      	neglt	r3, r3
 801a124:	461a      	mov	r2, r3
 801a126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a128:	601a      	str	r2, [r3, #0]
  return total_padding / 2;
 801a12a:	693b      	ldr	r3, [r7, #16]
 801a12c:	0fda      	lsrs	r2, r3, #31
 801a12e:	4413      	add	r3, r2
 801a130:	105b      	asrs	r3, r3, #1
}
 801a132:	4618      	mov	r0, r3
 801a134:	371c      	adds	r7, #28
 801a136:	46bd      	mov	sp, r7
 801a138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a13c:	4770      	bx	lr

0801a13e <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>:

// Matching GetWindowedOutputSize in TensorFlow.
inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
 801a13e:	b480      	push	{r7}
 801a140:	b087      	sub	sp, #28
 801a142:	af00      	add	r7, sp, #0
 801a144:	60b9      	str	r1, [r7, #8]
 801a146:	607a      	str	r2, [r7, #4]
 801a148:	603b      	str	r3, [r7, #0]
 801a14a:	4603      	mov	r3, r0
 801a14c:	73fb      	strb	r3, [r7, #15]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 801a14e:	687b      	ldr	r3, [r7, #4]
 801a150:	3b01      	subs	r3, #1
 801a152:	6a3a      	ldr	r2, [r7, #32]
 801a154:	fb02 f303 	mul.w	r3, r2, r3
 801a158:	3301      	adds	r3, #1
 801a15a:	617b      	str	r3, [r7, #20]
  switch (padding) {
 801a15c:	7bfb      	ldrb	r3, [r7, #15]
 801a15e:	2b01      	cmp	r3, #1
 801a160:	d002      	beq.n	801a168 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x2a>
 801a162:	2b02      	cmp	r3, #2
 801a164:	d008      	beq.n	801a178 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x3a>
 801a166:	e010      	b.n	801a18a <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x4c>
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
 801a168:	68ba      	ldr	r2, [r7, #8]
 801a16a:	683b      	ldr	r3, [r7, #0]
 801a16c:	4413      	add	r3, r2
 801a16e:	1e5a      	subs	r2, r3, #1
 801a170:	683b      	ldr	r3, [r7, #0]
 801a172:	fb92 f3f3 	sdiv	r3, r2, r3
 801a176:	e009      	b.n	801a18c <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x4e>
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
 801a178:	68ba      	ldr	r2, [r7, #8]
 801a17a:	683b      	ldr	r3, [r7, #0]
 801a17c:	441a      	add	r2, r3
 801a17e:	697b      	ldr	r3, [r7, #20]
 801a180:	1ad2      	subs	r2, r2, r3
 801a182:	683b      	ldr	r3, [r7, #0]
 801a184:	fb92 f3f3 	sdiv	r3, r2, r3
 801a188:	e000      	b.n	801a18c <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x4e>
    default:
      return 0;
 801a18a:	2300      	movs	r3, #0
  }
}
 801a18c:	4618      	mov	r0, r3
 801a18e:	371c      	adds	r7, #28
 801a190:	46bd      	mov	sp, r7
 801a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a196:	4770      	bx	lr

0801a198 <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>:

inline TfLitePaddingValues ComputePaddingHeightWidth(
    int stride_height, int stride_width, int dilation_rate_height,
    int dilation_rate_width, int in_height, int in_width, int filter_height,
    int filter_width, TfLitePadding padding, int* out_height, int* out_width) {
 801a198:	b580      	push	{r7, lr}
 801a19a:	b088      	sub	sp, #32
 801a19c:	af02      	add	r7, sp, #8
 801a19e:	60f8      	str	r0, [r7, #12]
 801a1a0:	60b9      	str	r1, [r7, #8]
 801a1a2:	607a      	str	r2, [r7, #4]
 801a1a4:	603b      	str	r3, [r7, #0]
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
 801a1a6:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 801a1aa:	6a3b      	ldr	r3, [r7, #32]
 801a1ac:	9300      	str	r3, [sp, #0]
 801a1ae:	687b      	ldr	r3, [r7, #4]
 801a1b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a1b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a1b4:	f7ff ffc3 	bl	801a13e <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
 801a1b8:	4602      	mov	r2, r0
 801a1ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a1bc:	601a      	str	r2, [r3, #0]
                              dilation_rate_width);
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
 801a1be:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 801a1c2:	683b      	ldr	r3, [r7, #0]
 801a1c4:	9300      	str	r3, [sp, #0]
 801a1c6:	68bb      	ldr	r3, [r7, #8]
 801a1c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a1ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a1cc:	f7ff ffb7 	bl	801a13e <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
 801a1d0:	4602      	mov	r2, r0
 801a1d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a1d4:	601a      	str	r2, [r3, #0]
                               dilation_rate_height);

  TfLitePaddingValues padding_values;
  int offset = 0;
 801a1d6:	2300      	movs	r3, #0
 801a1d8:	617b      	str	r3, [r7, #20]
  padding_values.height =
      ComputePaddingWithOffset(stride_height, dilation_rate_height, in_height,
 801a1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a1dc:	681b      	ldr	r3, [r3, #0]
 801a1de:	f107 0214 	add.w	r2, r7, #20
 801a1e2:	9201      	str	r2, [sp, #4]
 801a1e4:	9300      	str	r3, [sp, #0]
 801a1e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a1ea:	6839      	ldr	r1, [r7, #0]
 801a1ec:	68b8      	ldr	r0, [r7, #8]
 801a1ee:	f7ff ff77 	bl	801a0e0 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>
 801a1f2:	4602      	mov	r2, r0
  padding_values.height =
 801a1f4:	68fb      	ldr	r3, [r7, #12]
 801a1f6:	605a      	str	r2, [r3, #4]
                               filter_height, *out_height, &offset);
  padding_values.height_offset = offset;
 801a1f8:	697a      	ldr	r2, [r7, #20]
 801a1fa:	68fb      	ldr	r3, [r7, #12]
 801a1fc:	60da      	str	r2, [r3, #12]
  padding_values.width =
      ComputePaddingWithOffset(stride_width, dilation_rate_width, in_width,
 801a1fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a200:	681b      	ldr	r3, [r3, #0]
 801a202:	f107 0214 	add.w	r2, r7, #20
 801a206:	9201      	str	r2, [sp, #4]
 801a208:	9300      	str	r3, [sp, #0]
 801a20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a20c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a20e:	6a39      	ldr	r1, [r7, #32]
 801a210:	6878      	ldr	r0, [r7, #4]
 801a212:	f7ff ff65 	bl	801a0e0 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>
 801a216:	4602      	mov	r2, r0
  padding_values.width =
 801a218:	68fb      	ldr	r3, [r7, #12]
 801a21a:	601a      	str	r2, [r3, #0]
                               filter_width, *out_width, &offset);
  padding_values.width_offset = offset;
 801a21c:	697a      	ldr	r2, [r7, #20]
 801a21e:	68fb      	ldr	r3, [r7, #12]
 801a220:	609a      	str	r2, [r3, #8]
  return padding_values;
 801a222:	bf00      	nop
}
 801a224:	68f8      	ldr	r0, [r7, #12]
 801a226:	3718      	adds	r7, #24
 801a228:	46bd      	mov	sp, r7
 801a22a:	bd80      	pop	{r7, pc}

0801a22c <_ZN6tflite3ops5micro4conv18RuntimePaddingTypeE13TfLitePadding>:
  // uint8_t these would be 0 and 255.
  int32_t output_activation_min;
  int32_t output_activation_max;
};

inline PaddingType RuntimePaddingType(TfLitePadding padding) {
 801a22c:	b480      	push	{r7}
 801a22e:	b083      	sub	sp, #12
 801a230:	af00      	add	r7, sp, #0
 801a232:	4603      	mov	r3, r0
 801a234:	71fb      	strb	r3, [r7, #7]
  switch (padding) {
 801a236:	79fb      	ldrb	r3, [r7, #7]
 801a238:	2b01      	cmp	r3, #1
 801a23a:	d002      	beq.n	801a242 <_ZN6tflite3ops5micro4conv18RuntimePaddingTypeE13TfLitePadding+0x16>
 801a23c:	2b02      	cmp	r3, #2
 801a23e:	d002      	beq.n	801a246 <_ZN6tflite3ops5micro4conv18RuntimePaddingTypeE13TfLitePadding+0x1a>
 801a240:	e003      	b.n	801a24a <_ZN6tflite3ops5micro4conv18RuntimePaddingTypeE13TfLitePadding+0x1e>
    case TfLitePadding::kTfLitePaddingSame:
      return PaddingType::kSame;
 801a242:	2301      	movs	r3, #1
 801a244:	e002      	b.n	801a24c <_ZN6tflite3ops5micro4conv18RuntimePaddingTypeE13TfLitePadding+0x20>
    case TfLitePadding::kTfLitePaddingValid:
      return PaddingType::kValid;
 801a246:	2302      	movs	r3, #2
 801a248:	e000      	b.n	801a24c <_ZN6tflite3ops5micro4conv18RuntimePaddingTypeE13TfLitePadding+0x20>
    case TfLitePadding::kTfLitePaddingUnknown:
    default:
      return PaddingType::kNone;
 801a24a:	2300      	movs	r3, #0
  }
}
 801a24c:	4618      	mov	r0, r3
 801a24e:	370c      	adds	r7, #12
 801a250:	46bd      	mov	sp, r7
 801a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a256:	4770      	bx	lr

0801a258 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE>:

TfLiteStatus CalculateOpData(TfLiteContext* context, TfLiteNode* node,
                             const TfLiteConvParams* params, int width,
                             int height, int filter_width, int filter_height,
                             int out_width, int out_height,
                             const TfLiteType data_type, OpData* data) {
 801a258:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a25a:	b09d      	sub	sp, #116	; 0x74
 801a25c:	af0a      	add	r7, sp, #40	; 0x28
 801a25e:	6278      	str	r0, [r7, #36]	; 0x24
 801a260:	6239      	str	r1, [r7, #32]
 801a262:	61fa      	str	r2, [r7, #28]
 801a264:	61bb      	str	r3, [r7, #24]
  bool has_bias = node->inputs->size == 3;
 801a266:	6a3b      	ldr	r3, [r7, #32]
 801a268:	681b      	ldr	r3, [r3, #0]
 801a26a:	681b      	ldr	r3, [r3, #0]
 801a26c:	2b03      	cmp	r3, #3
 801a26e:	bf0c      	ite	eq
 801a270:	2301      	moveq	r3, #1
 801a272:	2300      	movne	r3, #0
 801a274:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
 801a278:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801a27c:	f083 0301 	eor.w	r3, r3, #1
 801a280:	b2db      	uxtb	r3, r3
 801a282:	2b00      	cmp	r3, #0
 801a284:	d00f      	beq.n	801a2a6 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x4e>
 801a286:	6a3b      	ldr	r3, [r7, #32]
 801a288:	681b      	ldr	r3, [r3, #0]
 801a28a:	681b      	ldr	r3, [r3, #0]
 801a28c:	2b02      	cmp	r3, #2
 801a28e:	d00a      	beq.n	801a2a6 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x4e>
 801a290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a292:	695c      	ldr	r4, [r3, #20]
 801a294:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a296:	4b50      	ldr	r3, [pc, #320]	; (801a3d8 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x180>)
 801a298:	9300      	str	r3, [sp, #0]
 801a29a:	234f      	movs	r3, #79	; 0x4f
 801a29c:	4a4f      	ldr	r2, [pc, #316]	; (801a3dc <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x184>)
 801a29e:	4950      	ldr	r1, [pc, #320]	; (801a3e0 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x188>)
 801a2a0:	47a0      	blx	r4
 801a2a2:	2301      	movs	r3, #1
 801a2a4:	e093      	b.n	801a3ce <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x176>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
 801a2a6:	6a3b      	ldr	r3, [r7, #32]
 801a2a8:	685b      	ldr	r3, [r3, #4]
 801a2aa:	681b      	ldr	r3, [r3, #0]
 801a2ac:	2b01      	cmp	r3, #1
 801a2ae:	d012      	beq.n	801a2d6 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x7e>
 801a2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2b2:	695c      	ldr	r4, [r3, #20]
 801a2b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a2b6:	6a3b      	ldr	r3, [r7, #32]
 801a2b8:	685b      	ldr	r3, [r3, #4]
 801a2ba:	681b      	ldr	r3, [r3, #0]
 801a2bc:	2201      	movs	r2, #1
 801a2be:	9203      	str	r2, [sp, #12]
 801a2c0:	9302      	str	r3, [sp, #8]
 801a2c2:	4b48      	ldr	r3, [pc, #288]	; (801a3e4 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x18c>)
 801a2c4:	9301      	str	r3, [sp, #4]
 801a2c6:	4b48      	ldr	r3, [pc, #288]	; (801a3e8 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x190>)
 801a2c8:	9300      	str	r3, [sp, #0]
 801a2ca:	2350      	movs	r3, #80	; 0x50
 801a2cc:	4a43      	ldr	r2, [pc, #268]	; (801a3dc <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x184>)
 801a2ce:	4947      	ldr	r1, [pc, #284]	; (801a3ec <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x194>)
 801a2d0:	47a0      	blx	r4
 801a2d2:	2301      	movs	r3, #1
 801a2d4:	e07b      	b.n	801a3ce <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x176>

  // Matching GetWindowedOutputSize in TensorFlow.
  auto padding = params->padding;
 801a2d6:	69fb      	ldr	r3, [r7, #28]
 801a2d8:	781b      	ldrb	r3, [r3, #0]
 801a2da:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  data->padding = ComputePaddingHeightWidth(
      params->stride_height, params->stride_width,
 801a2de:	69fb      	ldr	r3, [r7, #28]
 801a2e0:	6899      	ldr	r1, [r3, #8]
 801a2e2:	69fb      	ldr	r3, [r7, #28]
 801a2e4:	685d      	ldr	r5, [r3, #4]
      params->dilation_height_factor, params->dilation_width_factor, height,
 801a2e6:	69fb      	ldr	r3, [r7, #28]
 801a2e8:	695e      	ldr	r6, [r3, #20]
 801a2ea:	69fb      	ldr	r3, [r7, #28]
 801a2ec:	691b      	ldr	r3, [r3, #16]
  data->padding = ComputePaddingHeightWidth(
 801a2ee:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 801a2f0:	f107 0008 	add.w	r0, r7, #8
 801a2f4:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 801a2f8:	9207      	str	r2, [sp, #28]
 801a2fa:	f107 0270 	add.w	r2, r7, #112	; 0x70
 801a2fe:	9206      	str	r2, [sp, #24]
 801a300:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 801a304:	9205      	str	r2, [sp, #20]
 801a306:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801a308:	9204      	str	r2, [sp, #16]
 801a30a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801a30c:	9203      	str	r2, [sp, #12]
 801a30e:	69ba      	ldr	r2, [r7, #24]
 801a310:	9202      	str	r2, [sp, #8]
 801a312:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801a314:	9201      	str	r2, [sp, #4]
 801a316:	9300      	str	r3, [sp, #0]
 801a318:	4633      	mov	r3, r6
 801a31a:	462a      	mov	r2, r5
 801a31c:	f7ff ff3c 	bl	801a198 <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>
 801a320:	f107 0308 	add.w	r3, r7, #8
 801a324:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a326:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      width, filter_height, filter_width, padding, &out_height, &out_width);

  // Note that quantized inference requires that all tensors have their
  // parameters set. This is usually done during quantized training.
  if (data_type != kTfLiteFloat32) {
 801a32a:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 801a32e:	2b01      	cmp	r3, #1
 801a330:	d04c      	beq.n	801a3cc <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x174>
    const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 801a332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a334:	2200      	movs	r2, #0
 801a336:	6a39      	ldr	r1, [r7, #32]
 801a338:	4618      	mov	r0, r3
 801a33a:	f7fe fe81 	bl	8019040 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801a33e:	6438      	str	r0, [r7, #64]	; 0x40
    const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);
 801a340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a342:	2201      	movs	r2, #1
 801a344:	6a39      	ldr	r1, [r7, #32]
 801a346:	4618      	mov	r0, r3
 801a348:	f7fe fe7a 	bl	8019040 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801a34c:	63f8      	str	r0, [r7, #60]	; 0x3c
    const TfLiteTensor* bias =
        GetOptionalInputTensor(context, node, kBiasTensor);
 801a34e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a350:	2202      	movs	r2, #2
 801a352:	6a39      	ldr	r1, [r7, #32]
 801a354:	4618      	mov	r0, r3
 801a356:	f7ff fe93 	bl	801a080 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei>
 801a35a:	63b8      	str	r0, [r7, #56]	; 0x38
    TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 801a35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a35e:	2200      	movs	r2, #0
 801a360:	6a39      	ldr	r1, [r7, #32]
 801a362:	4618      	mov	r0, r3
 801a364:	f7fe fe84 	bl	8019070 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 801a368:	6378      	str	r0, [r7, #52]	; 0x34
    int output_channels = filter->dims->data[kConvQuantizedDimension];
 801a36a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a36c:	689b      	ldr	r3, [r3, #8]
 801a36e:	685b      	ldr	r3, [r3, #4]
 801a370:	633b      	str	r3, [r7, #48]	; 0x30

    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
 801a372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a374:	607b      	str	r3, [r7, #4]
 801a376:	69fb      	ldr	r3, [r7, #28]
 801a378:	330c      	adds	r3, #12
 801a37a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801a37c:	3210      	adds	r2, #16
 801a37e:	603a      	str	r2, [r7, #0]
 801a380:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801a382:	3114      	adds	r1, #20
 801a384:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 801a386:	3020      	adds	r0, #32
 801a388:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 801a38a:	3424      	adds	r4, #36	; 0x24
 801a38c:	6fbd      	ldr	r5, [r7, #120]	; 0x78
 801a38e:	69ad      	ldr	r5, [r5, #24]
 801a390:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 801a392:	69f6      	ldr	r6, [r6, #28]
 801a394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a396:	9208      	str	r2, [sp, #32]
 801a398:	9607      	str	r6, [sp, #28]
 801a39a:	9506      	str	r5, [sp, #24]
 801a39c:	9405      	str	r4, [sp, #20]
 801a39e:	9004      	str	r0, [sp, #16]
 801a3a0:	9103      	str	r1, [sp, #12]
 801a3a2:	683a      	ldr	r2, [r7, #0]
 801a3a4:	9202      	str	r2, [sp, #8]
 801a3a6:	9301      	str	r3, [sp, #4]
 801a3a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a3aa:	9300      	str	r3, [sp, #0]
 801a3ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a3ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801a3b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801a3b2:	6878      	ldr	r0, [r7, #4]
 801a3b4:	f7fb f966 	bl	8015684 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>
 801a3b8:	4603      	mov	r3, r0
 801a3ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801a3be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801a3c2:	2b00      	cmp	r3, #0
 801a3c4:	d002      	beq.n	801a3cc <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x174>
 801a3c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801a3ca:	e000      	b.n	801a3ce <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x176>
        &data->output_activation_min, &data->output_activation_max,
        data->per_channel_output_multiplier,
        reinterpret_cast<int*>(data->per_channel_output_shift),
        output_channels));
  }
  return kTfLiteOk;
 801a3cc:	2300      	movs	r3, #0
}
 801a3ce:	4618      	mov	r0, r3
 801a3d0:	374c      	adds	r7, #76	; 0x4c
 801a3d2:	46bd      	mov	sp, r7
 801a3d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a3d6:	bf00      	nop
 801a3d8:	0802410c 	.word	0x0802410c
 801a3dc:	080240b8 	.word	0x080240b8
 801a3e0:	080240f4 	.word	0x080240f4
 801a3e4:	0802414c 	.word	0x0802414c
 801a3e8:	08024150 	.word	0x08024150
 801a3ec:	08024130 	.word	0x08024130

0801a3f0 <_ZN6tflite3ops5micro4conv4InitEP13TfLiteContextPKcj>:

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 801a3f0:	b580      	push	{r7, lr}
 801a3f2:	b086      	sub	sp, #24
 801a3f4:	af00      	add	r7, sp, #0
 801a3f6:	60f8      	str	r0, [r7, #12]
 801a3f8:	60b9      	str	r1, [r7, #8]
 801a3fa:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 801a3fc:	68fb      	ldr	r3, [r7, #12]
 801a3fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a400:	2b00      	cmp	r3, #0
 801a402:	d101      	bne.n	801a408 <_ZN6tflite3ops5micro4conv4InitEP13TfLiteContextPKcj+0x18>
 801a404:	f004 fd24 	bl	801ee50 <abort>
  void* data = nullptr;
 801a408:	2300      	movs	r3, #0
 801a40a:	617b      	str	r3, [r7, #20]
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
 801a40c:	68fb      	ldr	r3, [r7, #12]
 801a40e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a410:	f107 0214 	add.w	r2, r7, #20
 801a414:	2128      	movs	r1, #40	; 0x28
 801a416:	68f8      	ldr	r0, [r7, #12]
 801a418:	4798      	blx	r3
 801a41a:	4603      	mov	r3, r0
 801a41c:	2b01      	cmp	r3, #1
 801a41e:	bf0c      	ite	eq
 801a420:	2301      	moveq	r3, #1
 801a422:	2300      	movne	r3, #0
 801a424:	b2db      	uxtb	r3, r3
 801a426:	2b00      	cmp	r3, #0
 801a428:	d001      	beq.n	801a42e <_ZN6tflite3ops5micro4conv4InitEP13TfLiteContextPKcj+0x3e>
      kTfLiteError) {
    return nullptr;
 801a42a:	2300      	movs	r3, #0
 801a42c:	e000      	b.n	801a430 <_ZN6tflite3ops5micro4conv4InitEP13TfLiteContextPKcj+0x40>
  }
  return data;
 801a42e:	697b      	ldr	r3, [r7, #20]
}
 801a430:	4618      	mov	r0, r3
 801a432:	3718      	adds	r7, #24
 801a434:	46bd      	mov	sp, r7
 801a436:	bd80      	pop	{r7, pc}

0801a438 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 801a438:	b590      	push	{r4, r7, lr}
 801a43a:	b099      	sub	sp, #100	; 0x64
 801a43c:	af08      	add	r7, sp, #32
 801a43e:	6078      	str	r0, [r7, #4]
 801a440:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 801a442:	683b      	ldr	r3, [r7, #0]
 801a444:	691b      	ldr	r3, [r3, #16]
 801a446:	2b00      	cmp	r3, #0
 801a448:	d101      	bne.n	801a44e <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 801a44a:	f004 fd01 	bl	801ee50 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 801a44e:	683b      	ldr	r3, [r7, #0]
 801a450:	695b      	ldr	r3, [r3, #20]
 801a452:	2b00      	cmp	r3, #0
 801a454:	d101      	bne.n	801a45a <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 801a456:	f004 fcfb 	bl	801ee50 <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 801a45a:	683b      	ldr	r3, [r7, #0]
 801a45c:	691b      	ldr	r3, [r3, #16]
 801a45e:	63fb      	str	r3, [r7, #60]	; 0x3c
  const auto params = static_cast<const TfLiteConvParams*>(node->builtin_data);
 801a460:	683b      	ldr	r3, [r7, #0]
 801a462:	695b      	ldr	r3, [r3, #20]
 801a464:	63bb      	str	r3, [r7, #56]	; 0x38

  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 801a466:	687b      	ldr	r3, [r7, #4]
 801a468:	2200      	movs	r2, #0
 801a46a:	6839      	ldr	r1, [r7, #0]
 801a46c:	4618      	mov	r0, r3
 801a46e:	f7fe fdff 	bl	8019070 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 801a472:	6378      	str	r0, [r7, #52]	; 0x34
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 801a474:	687b      	ldr	r3, [r7, #4]
 801a476:	2200      	movs	r2, #0
 801a478:	6839      	ldr	r1, [r7, #0]
 801a47a:	4618      	mov	r0, r3
 801a47c:	f7fe fde0 	bl	8019040 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801a480:	6338      	str	r0, [r7, #48]	; 0x30
  const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);
 801a482:	687b      	ldr	r3, [r7, #4]
 801a484:	2201      	movs	r2, #1
 801a486:	6839      	ldr	r1, [r7, #0]
 801a488:	4618      	mov	r0, r3
 801a48a:	f7fe fdd9 	bl	8019040 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801a48e:	62f8      	str	r0, [r7, #44]	; 0x2c

  int input_width = input->dims->data[2];
 801a490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a492:	689b      	ldr	r3, [r3, #8]
 801a494:	68db      	ldr	r3, [r3, #12]
 801a496:	62bb      	str	r3, [r7, #40]	; 0x28
  int input_height = input->dims->data[1];
 801a498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a49a:	689b      	ldr	r3, [r3, #8]
 801a49c:	689b      	ldr	r3, [r3, #8]
 801a49e:	627b      	str	r3, [r7, #36]	; 0x24
  int filter_width = filter->dims->data[2];
 801a4a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4a2:	689b      	ldr	r3, [r3, #8]
 801a4a4:	68db      	ldr	r3, [r3, #12]
 801a4a6:	623b      	str	r3, [r7, #32]
  int filter_height = filter->dims->data[1];
 801a4a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4aa:	689b      	ldr	r3, [r3, #8]
 801a4ac:	689b      	ldr	r3, [r3, #8]
 801a4ae:	61fb      	str	r3, [r7, #28]
  int output_width = output->dims->data[2];
 801a4b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a4b2:	689b      	ldr	r3, [r3, #8]
 801a4b4:	68db      	ldr	r3, [r3, #12]
 801a4b6:	61bb      	str	r3, [r7, #24]
  int output_height = output->dims->data[1];
 801a4b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a4ba:	689b      	ldr	r3, [r3, #8]
 801a4bc:	689b      	ldr	r3, [r3, #8]
 801a4be:	617b      	str	r3, [r7, #20]

  // Dynimically allocate per-channel quantization parameters.
  const int num_channels = filter->dims->data[kConvQuantizedDimension];
 801a4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4c2:	689b      	ldr	r3, [r3, #8]
 801a4c4:	685b      	ldr	r3, [r3, #4]
 801a4c6:	613b      	str	r3, [r7, #16]
  TF_LITE_ENSURE_STATUS(context->AllocatePersistentBuffer(
 801a4c8:	687b      	ldr	r3, [r7, #4]
 801a4ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a4cc:	6878      	ldr	r0, [r7, #4]
 801a4ce:	693a      	ldr	r2, [r7, #16]
 801a4d0:	0091      	lsls	r1, r2, #2
 801a4d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801a4d4:	3218      	adds	r2, #24
 801a4d6:	4798      	blx	r3
 801a4d8:	4603      	mov	r3, r0
 801a4da:	73fb      	strb	r3, [r7, #15]
 801a4dc:	7bfb      	ldrb	r3, [r7, #15]
 801a4de:	2b00      	cmp	r3, #0
 801a4e0:	d001      	beq.n	801a4e6 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xae>
 801a4e2:	7bfb      	ldrb	r3, [r7, #15]
 801a4e4:	e0a5      	b.n	801a632 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x1fa>
      context, num_channels * sizeof(int32_t),
      reinterpret_cast<void**>(&data->per_channel_output_multiplier)));
  TF_LITE_ENSURE_STATUS(context->AllocatePersistentBuffer(
 801a4e6:	687b      	ldr	r3, [r7, #4]
 801a4e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a4ea:	6878      	ldr	r0, [r7, #4]
 801a4ec:	693a      	ldr	r2, [r7, #16]
 801a4ee:	0091      	lsls	r1, r2, #2
 801a4f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801a4f2:	321c      	adds	r2, #28
 801a4f4:	4798      	blx	r3
 801a4f6:	4603      	mov	r3, r0
 801a4f8:	73bb      	strb	r3, [r7, #14]
 801a4fa:	7bbb      	ldrb	r3, [r7, #14]
 801a4fc:	2b00      	cmp	r3, #0
 801a4fe:	d001      	beq.n	801a504 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xcc>
 801a500:	7bbb      	ldrb	r3, [r7, #14]
 801a502:	e096      	b.n	801a632 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x1fa>
      context, num_channels * sizeof(int32_t),
      reinterpret_cast<void**>(&data->per_channel_output_shift)));

  // All per-channel quantized tensors need valid zero point and scale arrays.
  if (input->type == kTfLiteInt8) {
 801a504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a506:	781b      	ldrb	r3, [r3, #0]
 801a508:	2b09      	cmp	r3, #9
 801a50a:	d17c      	bne.n	801a606 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x1ce>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
 801a50c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a50e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801a512:	2b01      	cmp	r3, #1
 801a514:	d013      	beq.n	801a53e <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x106>
 801a516:	687b      	ldr	r3, [r7, #4]
 801a518:	695c      	ldr	r4, [r3, #20]
 801a51a:	6878      	ldr	r0, [r7, #4]
 801a51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a51e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801a522:	461a      	mov	r2, r3
 801a524:	2301      	movs	r3, #1
 801a526:	9303      	str	r3, [sp, #12]
 801a528:	9202      	str	r2, [sp, #8]
 801a52a:	4b44      	ldr	r3, [pc, #272]	; (801a63c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x204>)
 801a52c:	9301      	str	r3, [sp, #4]
 801a52e:	4b44      	ldr	r3, [pc, #272]	; (801a640 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x208>)
 801a530:	9300      	str	r3, [sp, #0]
 801a532:	2396      	movs	r3, #150	; 0x96
 801a534:	4a43      	ldr	r2, [pc, #268]	; (801a644 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x20c>)
 801a536:	4944      	ldr	r1, [pc, #272]	; (801a648 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x210>)
 801a538:	47a0      	blx	r4
 801a53a:	2301      	movs	r3, #1
 801a53c:	e079      	b.n	801a632 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x1fa>
                      kTfLiteAffineQuantization);

    const auto* affine_quantization =
        static_cast<TfLiteAffineQuantization*>(filter->quantization.params);
 801a53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    const auto* affine_quantization =
 801a542:	60bb      	str	r3, [r7, #8]
    TF_LITE_ENSURE(context, affine_quantization);
 801a544:	68bb      	ldr	r3, [r7, #8]
 801a546:	2b00      	cmp	r3, #0
 801a548:	d10a      	bne.n	801a560 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x128>
 801a54a:	687b      	ldr	r3, [r7, #4]
 801a54c:	695c      	ldr	r4, [r3, #20]
 801a54e:	6878      	ldr	r0, [r7, #4]
 801a550:	4b3e      	ldr	r3, [pc, #248]	; (801a64c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x214>)
 801a552:	9300      	str	r3, [sp, #0]
 801a554:	239a      	movs	r3, #154	; 0x9a
 801a556:	4a3b      	ldr	r2, [pc, #236]	; (801a644 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x20c>)
 801a558:	493d      	ldr	r1, [pc, #244]	; (801a650 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x218>)
 801a55a:	47a0      	blx	r4
 801a55c:	2301      	movs	r3, #1
 801a55e:	e068      	b.n	801a632 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x1fa>
    TF_LITE_ENSURE(context, affine_quantization->scale);
 801a560:	68bb      	ldr	r3, [r7, #8]
 801a562:	681b      	ldr	r3, [r3, #0]
 801a564:	2b00      	cmp	r3, #0
 801a566:	d10a      	bne.n	801a57e <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x146>
 801a568:	687b      	ldr	r3, [r7, #4]
 801a56a:	695c      	ldr	r4, [r3, #20]
 801a56c:	6878      	ldr	r0, [r7, #4]
 801a56e:	4b39      	ldr	r3, [pc, #228]	; (801a654 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x21c>)
 801a570:	9300      	str	r3, [sp, #0]
 801a572:	239b      	movs	r3, #155	; 0x9b
 801a574:	4a33      	ldr	r2, [pc, #204]	; (801a644 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x20c>)
 801a576:	4936      	ldr	r1, [pc, #216]	; (801a650 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x218>)
 801a578:	47a0      	blx	r4
 801a57a:	2301      	movs	r3, #1
 801a57c:	e059      	b.n	801a632 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x1fa>
    TF_LITE_ENSURE(context, affine_quantization->zero_point);
 801a57e:	68bb      	ldr	r3, [r7, #8]
 801a580:	685b      	ldr	r3, [r3, #4]
 801a582:	2b00      	cmp	r3, #0
 801a584:	d10a      	bne.n	801a59c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x164>
 801a586:	687b      	ldr	r3, [r7, #4]
 801a588:	695c      	ldr	r4, [r3, #20]
 801a58a:	6878      	ldr	r0, [r7, #4]
 801a58c:	4b32      	ldr	r3, [pc, #200]	; (801a658 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x220>)
 801a58e:	9300      	str	r3, [sp, #0]
 801a590:	239c      	movs	r3, #156	; 0x9c
 801a592:	4a2c      	ldr	r2, [pc, #176]	; (801a644 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x20c>)
 801a594:	492e      	ldr	r1, [pc, #184]	; (801a650 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x218>)
 801a596:	47a0      	blx	r4
 801a598:	2301      	movs	r3, #1
 801a59a:	e04a      	b.n	801a632 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x1fa>

    TF_LITE_ENSURE(context,
 801a59c:	68bb      	ldr	r3, [r7, #8]
 801a59e:	681b      	ldr	r3, [r3, #0]
 801a5a0:	681b      	ldr	r3, [r3, #0]
 801a5a2:	2b01      	cmp	r3, #1
 801a5a4:	d012      	beq.n	801a5cc <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x194>
 801a5a6:	68bb      	ldr	r3, [r7, #8]
 801a5a8:	681b      	ldr	r3, [r3, #0]
 801a5aa:	681a      	ldr	r2, [r3, #0]
 801a5ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5ae:	689b      	ldr	r3, [r3, #8]
 801a5b0:	685b      	ldr	r3, [r3, #4]
 801a5b2:	429a      	cmp	r2, r3
 801a5b4:	d00a      	beq.n	801a5cc <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x194>
 801a5b6:	687b      	ldr	r3, [r7, #4]
 801a5b8:	695c      	ldr	r4, [r3, #20]
 801a5ba:	6878      	ldr	r0, [r7, #4]
 801a5bc:	4b27      	ldr	r3, [pc, #156]	; (801a65c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 801a5be:	9300      	str	r3, [sp, #0]
 801a5c0:	23a1      	movs	r3, #161	; 0xa1
 801a5c2:	4a20      	ldr	r2, [pc, #128]	; (801a644 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x20c>)
 801a5c4:	4922      	ldr	r1, [pc, #136]	; (801a650 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x218>)
 801a5c6:	47a0      	blx	r4
 801a5c8:	2301      	movs	r3, #1
 801a5ca:	e032      	b.n	801a632 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x1fa>
                   affine_quantization->scale->size == 1 ||
                       affine_quantization->scale->size ==
                           filter->dims->data[kConvQuantizedDimension]);
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
 801a5cc:	68bb      	ldr	r3, [r7, #8]
 801a5ce:	681b      	ldr	r3, [r3, #0]
 801a5d0:	681a      	ldr	r2, [r3, #0]
 801a5d2:	68bb      	ldr	r3, [r7, #8]
 801a5d4:	685b      	ldr	r3, [r3, #4]
 801a5d6:	681b      	ldr	r3, [r3, #0]
 801a5d8:	429a      	cmp	r2, r3
 801a5da:	d014      	beq.n	801a606 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x1ce>
 801a5dc:	687b      	ldr	r3, [r7, #4]
 801a5de:	695c      	ldr	r4, [r3, #20]
 801a5e0:	6878      	ldr	r0, [r7, #4]
 801a5e2:	68bb      	ldr	r3, [r7, #8]
 801a5e4:	681b      	ldr	r3, [r3, #0]
 801a5e6:	681b      	ldr	r3, [r3, #0]
 801a5e8:	68ba      	ldr	r2, [r7, #8]
 801a5ea:	6852      	ldr	r2, [r2, #4]
 801a5ec:	6812      	ldr	r2, [r2, #0]
 801a5ee:	9203      	str	r2, [sp, #12]
 801a5f0:	9302      	str	r3, [sp, #8]
 801a5f2:	4b1b      	ldr	r3, [pc, #108]	; (801a660 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x228>)
 801a5f4:	9301      	str	r3, [sp, #4]
 801a5f6:	4b1b      	ldr	r3, [pc, #108]	; (801a664 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801a5f8:	9300      	str	r3, [sp, #0]
 801a5fa:	23a3      	movs	r3, #163	; 0xa3
 801a5fc:	4a11      	ldr	r2, [pc, #68]	; (801a644 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x20c>)
 801a5fe:	4912      	ldr	r1, [pc, #72]	; (801a648 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x210>)
 801a600:	47a0      	blx	r4
 801a602:	2301      	movs	r3, #1
 801a604:	e015      	b.n	801a632 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x1fa>
                      affine_quantization->zero_point->size);
  }

  return CalculateOpData(context, node, params, input_width, input_height,
 801a606:	6878      	ldr	r0, [r7, #4]
                         filter_width, filter_height, output_width,
                         output_height, input->type, data);
 801a608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a60a:	781b      	ldrb	r3, [r3, #0]
 801a60c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801a60e:	9206      	str	r2, [sp, #24]
 801a610:	9305      	str	r3, [sp, #20]
 801a612:	697b      	ldr	r3, [r7, #20]
 801a614:	9304      	str	r3, [sp, #16]
 801a616:	69bb      	ldr	r3, [r7, #24]
 801a618:	9303      	str	r3, [sp, #12]
 801a61a:	69fb      	ldr	r3, [r7, #28]
 801a61c:	9302      	str	r3, [sp, #8]
 801a61e:	6a3b      	ldr	r3, [r7, #32]
 801a620:	9301      	str	r3, [sp, #4]
 801a622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a624:	9300      	str	r3, [sp, #0]
 801a626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a628:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a62a:	6839      	ldr	r1, [r7, #0]
 801a62c:	f7ff fe14 	bl	801a258 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE>
 801a630:	4603      	mov	r3, r0
}  // namespace conv
 801a632:	4618      	mov	r0, r3
 801a634:	3744      	adds	r7, #68	; 0x44
 801a636:	46bd      	mov	sp, r7
 801a638:	bd90      	pop	{r4, r7, pc}
 801a63a:	bf00      	nop
 801a63c:	08024164 	.word	0x08024164
 801a640:	08024180 	.word	0x08024180
 801a644:	080240b8 	.word	0x080240b8
 801a648:	08024130 	.word	0x08024130
 801a64c:	0802419c 	.word	0x0802419c
 801a650:	080240f4 	.word	0x080240f4
 801a654:	080241b0 	.word	0x080241b0
 801a658:	080241cc 	.word	0x080241cc
 801a65c:	080241ec 	.word	0x080241ec
 801a660:	08024268 	.word	0x08024268
 801a664:	08024290 	.word	0x08024290

0801a668 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_>:

void EvalQuantized(TfLiteContext* context, TfLiteNode* node,
                   TfLiteConvParams* params, const OpData& data,
                   const TfLiteTensor* input, const TfLiteTensor* filter,
                   const TfLiteTensor* bias, TfLiteTensor* im2col,
                   TfLiteTensor* hwcn_weights, TfLiteTensor* output) {
 801a668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a66c:	b0be      	sub	sp, #248	; 0xf8
 801a66e:	af08      	add	r7, sp, #32
 801a670:	6178      	str	r0, [r7, #20]
 801a672:	6139      	str	r1, [r7, #16]
 801a674:	60fa      	str	r2, [r7, #12]
 801a676:	60bb      	str	r3, [r7, #8]
  const int32_t input_offset = -input->params.zero_point;
 801a678:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801a67c:	691b      	ldr	r3, [r3, #16]
 801a67e:	425b      	negs	r3, r3
 801a680:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  const int32_t filter_offset = -filter->params.zero_point;
 801a684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801a688:	691b      	ldr	r3, [r3, #16]
 801a68a:	425b      	negs	r3, r3
 801a68c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  const int32_t output_offset = output->params.zero_point;
 801a690:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801a694:	691b      	ldr	r3, [r3, #16]
 801a696:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

  // TODO(b/154032858): Investigate removing extra copies.
  ConvParams op_params;
  op_params.padding_type = RuntimePaddingType(params->padding);
 801a69a:	68fb      	ldr	r3, [r7, #12]
 801a69c:	781b      	ldrb	r3, [r3, #0]
 801a69e:	4618      	mov	r0, r3
 801a6a0:	f7ff fdc4 	bl	801a22c <_ZN6tflite3ops5micro4conv18RuntimePaddingTypeE13TfLitePadding>
 801a6a4:	4603      	mov	r3, r0
 801a6a6:	773b      	strb	r3, [r7, #28]
  op_params.padding_values.width = data.padding.width;
 801a6a8:	68bb      	ldr	r3, [r7, #8]
 801a6aa:	681b      	ldr	r3, [r3, #0]
 801a6ac:	b21b      	sxth	r3, r3
 801a6ae:	83fb      	strh	r3, [r7, #30]
  op_params.padding_values.height = data.padding.height;
 801a6b0:	68bb      	ldr	r3, [r7, #8]
 801a6b2:	685b      	ldr	r3, [r3, #4]
 801a6b4:	b21b      	sxth	r3, r3
 801a6b6:	843b      	strh	r3, [r7, #32]
  op_params.stride_width = params->stride_width;
 801a6b8:	68fb      	ldr	r3, [r7, #12]
 801a6ba:	685b      	ldr	r3, [r3, #4]
 801a6bc:	b21b      	sxth	r3, r3
 801a6be:	84fb      	strh	r3, [r7, #38]	; 0x26
  op_params.stride_height = params->stride_height;
 801a6c0:	68fb      	ldr	r3, [r7, #12]
 801a6c2:	689b      	ldr	r3, [r3, #8]
 801a6c4:	b21b      	sxth	r3, r3
 801a6c6:	853b      	strh	r3, [r7, #40]	; 0x28
  op_params.dilation_width_factor = params->dilation_width_factor;
 801a6c8:	68fb      	ldr	r3, [r7, #12]
 801a6ca:	691b      	ldr	r3, [r3, #16]
 801a6cc:	b21b      	sxth	r3, r3
 801a6ce:	857b      	strh	r3, [r7, #42]	; 0x2a
  op_params.dilation_height_factor = params->dilation_height_factor;
 801a6d0:	68fb      	ldr	r3, [r7, #12]
 801a6d2:	695b      	ldr	r3, [r3, #20]
 801a6d4:	b21b      	sxth	r3, r3
 801a6d6:	85bb      	strh	r3, [r7, #44]	; 0x2c
  op_params.input_offset = input_offset;
 801a6d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801a6dc:	633b      	str	r3, [r7, #48]	; 0x30
  op_params.weights_offset = filter_offset;
 801a6de:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801a6e2:	637b      	str	r3, [r7, #52]	; 0x34
  op_params.output_offset = output_offset;
 801a6e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801a6e8:	63bb      	str	r3, [r7, #56]	; 0x38
  op_params.output_multiplier = data.output_multiplier;
 801a6ea:	68bb      	ldr	r3, [r7, #8]
 801a6ec:	691b      	ldr	r3, [r3, #16]
 801a6ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  op_params.output_shift = -data.output_shift;
 801a6f0:	68bb      	ldr	r3, [r7, #8]
 801a6f2:	695b      	ldr	r3, [r3, #20]
 801a6f4:	425b      	negs	r3, r3
 801a6f6:	643b      	str	r3, [r7, #64]	; 0x40
  op_params.quantized_activation_min = data.output_activation_min;
 801a6f8:	68bb      	ldr	r3, [r7, #8]
 801a6fa:	6a1b      	ldr	r3, [r3, #32]
 801a6fc:	647b      	str	r3, [r7, #68]	; 0x44
  op_params.quantized_activation_max = data.output_activation_max;
 801a6fe:	68bb      	ldr	r3, [r7, #8]
 801a700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a702:	64bb      	str	r3, [r7, #72]	; 0x48
  reference_ops::Conv(op_params, GetTensorShape(input),
 801a704:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801a708:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 801a70c:	4618      	mov	r0, r3
 801a70e:	f7fe fc79 	bl	8019004 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 801a712:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 801a716:	f7fe fd12 	bl	801913e <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 801a71a:	4680      	mov	r8, r0
                      GetTensorData<uint8_t>(input), GetTensorShape(filter),
 801a71c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801a720:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 801a724:	4618      	mov	r0, r3
 801a726:	f7fe fc6d 	bl	8019004 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::Conv(op_params, GetTensorShape(input),
 801a72a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 801a72e:	f7fe fd06 	bl	801913e <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 801a732:	4604      	mov	r4, r0
                      GetTensorData<uint8_t>(filter), GetTensorShape(bias),
 801a734:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801a738:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 801a73c:	4618      	mov	r0, r3
 801a73e:	f7fe fc61 	bl	8019004 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::Conv(op_params, GetTensorShape(input),
 801a742:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 801a746:	f7fe ff62 	bl	801960e <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 801a74a:	4605      	mov	r5, r0
                      GetTensorData<int32_t>(bias), GetTensorShape(output),
 801a74c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801a750:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 801a754:	4618      	mov	r0, r3
 801a756:	f7fe fc55 	bl	8019004 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::Conv(op_params, GetTensorShape(input),
 801a75a:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 801a75e:	f7fe fcff 	bl	8019160 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 801a762:	4606      	mov	r6, r0
                      GetTensorData<uint8_t>(output), GetTensorShape(im2col),
 801a764:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 801a768:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 801a76c:	4618      	mov	r0, r3
 801a76e:	f7fe fc49 	bl	8019004 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::Conv(op_params, GetTensorShape(input),
 801a772:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 801a776:	f7fe fcf3 	bl	8019160 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 801a77a:	6078      	str	r0, [r7, #4]
 801a77c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 801a780:	f107 0154 	add.w	r1, r7, #84	; 0x54
 801a784:	f107 001c 	add.w	r0, r7, #28
 801a788:	2300      	movs	r3, #0
 801a78a:	9307      	str	r3, [sp, #28]
 801a78c:	687b      	ldr	r3, [r7, #4]
 801a78e:	9306      	str	r3, [sp, #24]
 801a790:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 801a794:	9305      	str	r3, [sp, #20]
 801a796:	9604      	str	r6, [sp, #16]
 801a798:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801a79c:	9303      	str	r3, [sp, #12]
 801a79e:	9502      	str	r5, [sp, #8]
 801a7a0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801a7a4:	9301      	str	r3, [sp, #4]
 801a7a6:	9400      	str	r4, [sp, #0]
 801a7a8:	4613      	mov	r3, r2
 801a7aa:	4642      	mov	r2, r8
 801a7ac:	f7ff f90f 	bl	80199ce <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv>
                      GetTensorData<uint8_t>(output), GetTensorShape(im2col),
 801a7b0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 801a7b4:	4618      	mov	r0, r3
 801a7b6:	f7fe fb4e 	bl	8018e56 <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<int32_t>(bias), GetTensorShape(output),
 801a7ba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801a7be:	4618      	mov	r0, r3
 801a7c0:	f7fe fb49 	bl	8018e56 <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<uint8_t>(filter), GetTensorShape(bias),
 801a7c4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801a7c8:	4618      	mov	r0, r3
 801a7ca:	f7fe fb44 	bl	8018e56 <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<uint8_t>(input), GetTensorShape(filter),
 801a7ce:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801a7d2:	4618      	mov	r0, r3
 801a7d4:	f7fe fb3f 	bl	8018e56 <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Conv(op_params, GetTensorShape(input),
 801a7d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801a7dc:	4618      	mov	r0, r3
 801a7de:	f7fe fb3a 	bl	8018e56 <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<uint8_t>(im2col), nullptr);
}
 801a7e2:	bf00      	nop
 801a7e4:	37d8      	adds	r7, #216	; 0xd8
 801a7e6:	46bd      	mov	sp, r7
 801a7e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a7ec <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_>:
void EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
                             TfLiteConvParams* params, const OpData& data,
                             const TfLiteTensor* input,
                             const TfLiteTensor* filter,
                             const TfLiteTensor* bias, TfLiteTensor* output,
                             TfLiteTensor* im2col) {
 801a7ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a7ee:	b0b5      	sub	sp, #212	; 0xd4
 801a7f0:	af08      	add	r7, sp, #32
 801a7f2:	6178      	str	r0, [r7, #20]
 801a7f4:	6139      	str	r1, [r7, #16]
 801a7f6:	60fa      	str	r2, [r7, #12]
 801a7f8:	60bb      	str	r3, [r7, #8]
  // TODO(b/154032858): Investigate removing extra copies.
  ConvParams op_params;
  op_params.input_offset = -input->params.zero_point;
 801a7fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801a7fe:	691b      	ldr	r3, [r3, #16]
 801a800:	425b      	negs	r3, r3
 801a802:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.output_offset = output->params.zero_point;
 801a804:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801a808:	691b      	ldr	r3, [r3, #16]
 801a80a:	637b      	str	r3, [r7, #52]	; 0x34
  op_params.stride_height = params->stride_height;
 801a80c:	68fb      	ldr	r3, [r7, #12]
 801a80e:	689b      	ldr	r3, [r3, #8]
 801a810:	b21b      	sxth	r3, r3
 801a812:	84bb      	strh	r3, [r7, #36]	; 0x24
  op_params.stride_width = params->stride_width;
 801a814:	68fb      	ldr	r3, [r7, #12]
 801a816:	685b      	ldr	r3, [r3, #4]
 801a818:	b21b      	sxth	r3, r3
 801a81a:	847b      	strh	r3, [r7, #34]	; 0x22
  op_params.dilation_height_factor = params->dilation_height_factor;
 801a81c:	68fb      	ldr	r3, [r7, #12]
 801a81e:	695b      	ldr	r3, [r3, #20]
 801a820:	b21b      	sxth	r3, r3
 801a822:	853b      	strh	r3, [r7, #40]	; 0x28
  op_params.dilation_width_factor = params->dilation_width_factor;
 801a824:	68fb      	ldr	r3, [r7, #12]
 801a826:	691b      	ldr	r3, [r3, #16]
 801a828:	b21b      	sxth	r3, r3
 801a82a:	84fb      	strh	r3, [r7, #38]	; 0x26
  op_params.padding_values.height = data.padding.height;
 801a82c:	68bb      	ldr	r3, [r7, #8]
 801a82e:	685b      	ldr	r3, [r3, #4]
 801a830:	b21b      	sxth	r3, r3
 801a832:	83bb      	strh	r3, [r7, #28]
  op_params.padding_values.width = data.padding.width;
 801a834:	68bb      	ldr	r3, [r7, #8]
 801a836:	681b      	ldr	r3, [r3, #0]
 801a838:	b21b      	sxth	r3, r3
 801a83a:	837b      	strh	r3, [r7, #26]
  op_params.quantized_activation_min = data.output_activation_min;
 801a83c:	68bb      	ldr	r3, [r7, #8]
 801a83e:	6a1b      	ldr	r3, [r3, #32]
 801a840:	643b      	str	r3, [r7, #64]	; 0x40
  op_params.quantized_activation_max = data.output_activation_max;
 801a842:	68bb      	ldr	r3, [r7, #8]
 801a844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a846:	647b      	str	r3, [r7, #68]	; 0x44

  reference_integer_ops::ConvPerChannel(
      op_params, data.per_channel_output_multiplier,
 801a848:	68bb      	ldr	r3, [r7, #8]
 801a84a:	699c      	ldr	r4, [r3, #24]
      data.per_channel_output_shift, GetTensorShape(input),
 801a84c:	68bb      	ldr	r3, [r7, #8]
 801a84e:	69dd      	ldr	r5, [r3, #28]
 801a850:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801a854:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 801a858:	4618      	mov	r0, r3
 801a85a:	f7fe fbd3 	bl	8019004 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::ConvPerChannel(
 801a85e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 801a862:	f7fe fc4a 	bl	80190fa <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 801a866:	4606      	mov	r6, r0
      GetTensorData<int8>(input), GetTensorShape(filter),
 801a868:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801a86c:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 801a870:	4618      	mov	r0, r3
 801a872:	f7fe fbc7 	bl	8019004 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::ConvPerChannel(
 801a876:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 801a87a:	f7fe fc3e 	bl	80190fa <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 801a87e:	6078      	str	r0, [r7, #4]
      GetTensorData<int8>(filter), GetTensorShape(bias),
 801a880:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801a884:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 801a888:	4618      	mov	r0, r3
 801a88a:	f7fe fbbb 	bl	8019004 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::ConvPerChannel(
 801a88e:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 801a892:	f7fe febc 	bl	801960e <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 801a896:	6038      	str	r0, [r7, #0]
      GetTensorData<int32>(bias), GetTensorShape(output),
 801a898:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801a89c:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 801a8a0:	4618      	mov	r0, r3
 801a8a2:	f7fe fbaf 	bl	8019004 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::ConvPerChannel(
 801a8a6:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 801a8aa:	f7fe fc37 	bl	801911c <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 801a8ae:	4603      	mov	r3, r0
 801a8b0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801a8b4:	f107 0018 	add.w	r0, r7, #24
 801a8b8:	9306      	str	r3, [sp, #24]
 801a8ba:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801a8be:	9305      	str	r3, [sp, #20]
 801a8c0:	683b      	ldr	r3, [r7, #0]
 801a8c2:	9304      	str	r3, [sp, #16]
 801a8c4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801a8c8:	9303      	str	r3, [sp, #12]
 801a8ca:	687b      	ldr	r3, [r7, #4]
 801a8cc:	9302      	str	r3, [sp, #8]
 801a8ce:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801a8d2:	9301      	str	r3, [sp, #4]
 801a8d4:	9600      	str	r6, [sp, #0]
 801a8d6:	4613      	mov	r3, r2
 801a8d8:	462a      	mov	r2, r5
 801a8da:	4621      	mov	r1, r4
 801a8dc:	f7ff fa1f 	bl	8019d1e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
      GetTensorData<int32>(bias), GetTensorShape(output),
 801a8e0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801a8e4:	4618      	mov	r0, r3
 801a8e6:	f7fe fab6 	bl	8018e56 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<int8>(filter), GetTensorShape(bias),
 801a8ea:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801a8ee:	4618      	mov	r0, r3
 801a8f0:	f7fe fab1 	bl	8018e56 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<int8>(input), GetTensorShape(filter),
 801a8f4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801a8f8:	4618      	mov	r0, r3
 801a8fa:	f7fe faac 	bl	8018e56 <_ZN6tflite12RuntimeShapeD1Ev>
      data.per_channel_output_shift, GetTensorShape(input),
 801a8fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801a902:	4618      	mov	r0, r3
 801a904:	f7fe faa7 	bl	8018e56 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<int8>(output));
}
 801a908:	bf00      	nop
 801a90a:	37b4      	adds	r7, #180	; 0xb4
 801a90c:	46bd      	mov	sp, r7
 801a90e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a910 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_>:

void EvalFloat(TfLiteContext* context, TfLiteNode* node,
               TfLiteConvParams* params, const OpData& data,
               const TfLiteTensor* input, const TfLiteTensor* filter,
               const TfLiteTensor* bias, TfLiteTensor* im2col,
               TfLiteTensor* hwcn_weights, TfLiteTensor* output) {
 801a910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a914:	b0ba      	sub	sp, #232	; 0xe8
 801a916:	af08      	add	r7, sp, #32
 801a918:	60f8      	str	r0, [r7, #12]
 801a91a:	60b9      	str	r1, [r7, #8]
 801a91c:	607a      	str	r2, [r7, #4]
 801a91e:	603b      	str	r3, [r7, #0]
  float output_activation_min, output_activation_max;
  CalculateActivationRange(params->activation, &output_activation_min,
 801a920:	687b      	ldr	r3, [r7, #4]
 801a922:	7b1b      	ldrb	r3, [r3, #12]
 801a924:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801a928:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 801a92c:	4618      	mov	r0, r3
 801a92e:	f7fe fdb1 	bl	8019494 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &output_activation_max);
  // TODO(b/154032858): Investigate removing extra copies.
  ConvParams op_params;
  op_params.padding_type = RuntimePaddingType(params->padding);
 801a932:	687b      	ldr	r3, [r7, #4]
 801a934:	781b      	ldrb	r3, [r3, #0]
 801a936:	4618      	mov	r0, r3
 801a938:	f7ff fc78 	bl	801a22c <_ZN6tflite3ops5micro4conv18RuntimePaddingTypeE13TfLitePadding>
 801a93c:	4603      	mov	r3, r0
 801a93e:	743b      	strb	r3, [r7, #16]
  op_params.padding_values.width = data.padding.width;
 801a940:	683b      	ldr	r3, [r7, #0]
 801a942:	681b      	ldr	r3, [r3, #0]
 801a944:	b21b      	sxth	r3, r3
 801a946:	827b      	strh	r3, [r7, #18]
  op_params.padding_values.height = data.padding.height;
 801a948:	683b      	ldr	r3, [r7, #0]
 801a94a:	685b      	ldr	r3, [r3, #4]
 801a94c:	b21b      	sxth	r3, r3
 801a94e:	82bb      	strh	r3, [r7, #20]
  op_params.stride_width = params->stride_width;
 801a950:	687b      	ldr	r3, [r7, #4]
 801a952:	685b      	ldr	r3, [r3, #4]
 801a954:	b21b      	sxth	r3, r3
 801a956:	837b      	strh	r3, [r7, #26]
  op_params.stride_height = params->stride_height;
 801a958:	687b      	ldr	r3, [r7, #4]
 801a95a:	689b      	ldr	r3, [r3, #8]
 801a95c:	b21b      	sxth	r3, r3
 801a95e:	83bb      	strh	r3, [r7, #28]
  op_params.dilation_width_factor = params->dilation_width_factor;
 801a960:	687b      	ldr	r3, [r7, #4]
 801a962:	691b      	ldr	r3, [r3, #16]
 801a964:	b21b      	sxth	r3, r3
 801a966:	83fb      	strh	r3, [r7, #30]
  op_params.dilation_height_factor = params->dilation_height_factor;
 801a968:	687b      	ldr	r3, [r7, #4]
 801a96a:	695b      	ldr	r3, [r3, #20]
 801a96c:	b21b      	sxth	r3, r3
 801a96e:	843b      	strh	r3, [r7, #32]
  op_params.float_activation_min = output_activation_min;
 801a970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a972:	643b      	str	r3, [r7, #64]	; 0x40
  op_params.float_activation_max = output_activation_max;
 801a974:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a976:	647b      	str	r3, [r7, #68]	; 0x44

  reference_ops::Conv(op_params, GetTensorShape(input),
 801a978:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801a97c:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 801a980:	4618      	mov	r0, r3
 801a982:	f7fe fb3f 	bl	8019004 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 801a986:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 801a98a:	f7fe fb94 	bl	80190b6 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 801a98e:	4680      	mov	r8, r0
                      GetTensorData<float>(input), GetTensorShape(filter),
 801a990:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801a994:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 801a998:	4618      	mov	r0, r3
 801a99a:	f7fe fb33 	bl	8019004 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::Conv(op_params, GetTensorShape(input),
 801a99e:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 801a9a2:	f7fe fb88 	bl	80190b6 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 801a9a6:	4604      	mov	r4, r0
                      GetTensorData<float>(filter), GetTensorShape(bias),
 801a9a8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801a9ac:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 801a9b0:	4618      	mov	r0, r3
 801a9b2:	f7fe fb27 	bl	8019004 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::Conv(op_params, GetTensorShape(input),
 801a9b6:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 801a9ba:	f7fe fb7c 	bl	80190b6 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 801a9be:	4605      	mov	r5, r0
                      GetTensorData<float>(bias), GetTensorShape(output),
 801a9c0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801a9c4:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 801a9c8:	4618      	mov	r0, r3
 801a9ca:	f7fe fb1b 	bl	8019004 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::Conv(op_params, GetTensorShape(input),
 801a9ce:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 801a9d2:	f7fe fb81 	bl	80190d8 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 801a9d6:	4606      	mov	r6, r0
                      GetTensorData<float>(output), GetTensorShape(im2col),
 801a9d8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801a9dc:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 801a9e0:	4618      	mov	r0, r3
 801a9e2:	f7fe fb0f 	bl	8019004 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::Conv(op_params, GetTensorShape(input),
 801a9e6:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 801a9ea:	f7fe fb75 	bl	80190d8 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 801a9ee:	4603      	mov	r3, r0
 801a9f0:	f107 0268 	add.w	r2, r7, #104	; 0x68
 801a9f4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 801a9f8:	f107 0010 	add.w	r0, r7, #16
 801a9fc:	9306      	str	r3, [sp, #24]
 801a9fe:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801aa02:	9305      	str	r3, [sp, #20]
 801aa04:	9604      	str	r6, [sp, #16]
 801aa06:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801aa0a:	9303      	str	r3, [sp, #12]
 801aa0c:	9502      	str	r5, [sp, #8]
 801aa0e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801aa12:	9301      	str	r3, [sp, #4]
 801aa14:	9400      	str	r4, [sp, #0]
 801aa16:	4613      	mov	r3, r2
 801aa18:	4642      	mov	r2, r8
 801aa1a:	f7fe fe65 	bl	80196e8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>
                      GetTensorData<float>(output), GetTensorShape(im2col),
 801aa1e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801aa22:	4618      	mov	r0, r3
 801aa24:	f7fe fa17 	bl	8018e56 <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<float>(bias), GetTensorShape(output),
 801aa28:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801aa2c:	4618      	mov	r0, r3
 801aa2e:	f7fe fa12 	bl	8018e56 <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<float>(filter), GetTensorShape(bias),
 801aa32:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801aa36:	4618      	mov	r0, r3
 801aa38:	f7fe fa0d 	bl	8018e56 <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<float>(input), GetTensorShape(filter),
 801aa3c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801aa40:	4618      	mov	r0, r3
 801aa42:	f7fe fa08 	bl	8018e56 <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Conv(op_params, GetTensorShape(input),
 801aa46:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801aa4a:	4618      	mov	r0, r3
 801aa4c:	f7fe fa03 	bl	8018e56 <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<float>(im2col));
}
 801aa50:	bf00      	nop
 801aa52:	37c8      	adds	r7, #200	; 0xc8
 801aa54:	46bd      	mov	sp, r7
 801aa56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801aa5c <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 801aa5c:	b5b0      	push	{r4, r5, r7, lr}
 801aa5e:	b08e      	sub	sp, #56	; 0x38
 801aa60:	af06      	add	r7, sp, #24
 801aa62:	6078      	str	r0, [r7, #4]
 801aa64:	6039      	str	r1, [r7, #0]
  auto* params = reinterpret_cast<TfLiteConvParams*>(node->builtin_data);
 801aa66:	683b      	ldr	r3, [r7, #0]
 801aa68:	695b      	ldr	r3, [r3, #20]
 801aa6a:	61fb      	str	r3, [r7, #28]

  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 801aa6c:	687b      	ldr	r3, [r7, #4]
 801aa6e:	2200      	movs	r2, #0
 801aa70:	6839      	ldr	r1, [r7, #0]
 801aa72:	4618      	mov	r0, r3
 801aa74:	f7fe fafc 	bl	8019070 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 801aa78:	61b8      	str	r0, [r7, #24]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 801aa7a:	687b      	ldr	r3, [r7, #4]
 801aa7c:	2200      	movs	r2, #0
 801aa7e:	6839      	ldr	r1, [r7, #0]
 801aa80:	4618      	mov	r0, r3
 801aa82:	f7fe fadd 	bl	8019040 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801aa86:	6178      	str	r0, [r7, #20]
  const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);
 801aa88:	687b      	ldr	r3, [r7, #4]
 801aa8a:	2201      	movs	r2, #1
 801aa8c:	6839      	ldr	r1, [r7, #0]
 801aa8e:	4618      	mov	r0, r3
 801aa90:	f7fe fad6 	bl	8019040 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801aa94:	6138      	str	r0, [r7, #16]
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
 801aa96:	687b      	ldr	r3, [r7, #4]
 801aa98:	2202      	movs	r2, #2
 801aa9a:	6839      	ldr	r1, [r7, #0]
 801aa9c:	4618      	mov	r0, r3
 801aa9e:	f7ff faef 	bl	801a080 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei>
 801aaa2:	60f8      	str	r0, [r7, #12]

  TFLITE_DCHECK(node->user_data != nullptr);
 801aaa4:	683b      	ldr	r3, [r7, #0]
 801aaa6:	691b      	ldr	r3, [r3, #16]
 801aaa8:	2b00      	cmp	r3, #0
 801aaaa:	d101      	bne.n	801aab0 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x54>
 801aaac:	f004 f9d0 	bl	801ee50 <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 801aab0:	683b      	ldr	r3, [r7, #0]
 801aab2:	691b      	ldr	r3, [r3, #16]
 801aab4:	60bb      	str	r3, [r7, #8]

  switch (input->type) {  // Already know in/out types are same.
 801aab6:	697b      	ldr	r3, [r7, #20]
 801aab8:	781b      	ldrb	r3, [r3, #0]
 801aaba:	2b03      	cmp	r3, #3
 801aabc:	d027      	beq.n	801ab0e <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xb2>
 801aabe:	2b09      	cmp	r3, #9
 801aac0:	d014      	beq.n	801aaec <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x90>
 801aac2:	2b01      	cmp	r3, #1
 801aac4:	d136      	bne.n	801ab34 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xd8>
    case kTfLiteFloat32:
      EvalFloat(context, node, params, data, input, filter, bias, nullptr,
 801aac6:	6878      	ldr	r0, [r7, #4]
 801aac8:	69bb      	ldr	r3, [r7, #24]
 801aaca:	9305      	str	r3, [sp, #20]
 801aacc:	2300      	movs	r3, #0
 801aace:	9304      	str	r3, [sp, #16]
 801aad0:	2300      	movs	r3, #0
 801aad2:	9303      	str	r3, [sp, #12]
 801aad4:	68fb      	ldr	r3, [r7, #12]
 801aad6:	9302      	str	r3, [sp, #8]
 801aad8:	693b      	ldr	r3, [r7, #16]
 801aada:	9301      	str	r3, [sp, #4]
 801aadc:	697b      	ldr	r3, [r7, #20]
 801aade:	9300      	str	r3, [sp, #0]
 801aae0:	68bb      	ldr	r3, [r7, #8]
 801aae2:	69fa      	ldr	r2, [r7, #28]
 801aae4:	6839      	ldr	r1, [r7, #0]
 801aae6:	f7ff ff13 	bl	801a910 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_>
                nullptr, output);
      break;
 801aaea:	e033      	b.n	801ab54 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xf8>
    case kTfLiteInt8:
      EvalQuantizedPerChannel(context, node, params, data, input, filter, bias,
 801aaec:	6878      	ldr	r0, [r7, #4]
 801aaee:	2300      	movs	r3, #0
 801aaf0:	9304      	str	r3, [sp, #16]
 801aaf2:	69bb      	ldr	r3, [r7, #24]
 801aaf4:	9303      	str	r3, [sp, #12]
 801aaf6:	68fb      	ldr	r3, [r7, #12]
 801aaf8:	9302      	str	r3, [sp, #8]
 801aafa:	693b      	ldr	r3, [r7, #16]
 801aafc:	9301      	str	r3, [sp, #4]
 801aafe:	697b      	ldr	r3, [r7, #20]
 801ab00:	9300      	str	r3, [sp, #0]
 801ab02:	68bb      	ldr	r3, [r7, #8]
 801ab04:	69fa      	ldr	r2, [r7, #28]
 801ab06:	6839      	ldr	r1, [r7, #0]
 801ab08:	f7ff fe70 	bl	801a7ec <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_>
                              output, nullptr);
      break;
 801ab0c:	e022      	b.n	801ab54 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xf8>
    case kTfLiteUInt8:
      EvalQuantized(context, node, params, data, input, filter, bias, nullptr,
 801ab0e:	6878      	ldr	r0, [r7, #4]
 801ab10:	69bb      	ldr	r3, [r7, #24]
 801ab12:	9305      	str	r3, [sp, #20]
 801ab14:	2300      	movs	r3, #0
 801ab16:	9304      	str	r3, [sp, #16]
 801ab18:	2300      	movs	r3, #0
 801ab1a:	9303      	str	r3, [sp, #12]
 801ab1c:	68fb      	ldr	r3, [r7, #12]
 801ab1e:	9302      	str	r3, [sp, #8]
 801ab20:	693b      	ldr	r3, [r7, #16]
 801ab22:	9301      	str	r3, [sp, #4]
 801ab24:	697b      	ldr	r3, [r7, #20]
 801ab26:	9300      	str	r3, [sp, #0]
 801ab28:	68bb      	ldr	r3, [r7, #8]
 801ab2a:	69fa      	ldr	r2, [r7, #28]
 801ab2c:	6839      	ldr	r1, [r7, #0]
 801ab2e:	f7ff fd9b 	bl	801a668 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_>
                    nullptr, output);
      break;
 801ab32:	e00f      	b.n	801ab54 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xf8>
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801ab34:	687b      	ldr	r3, [r7, #4]
 801ab36:	695c      	ldr	r4, [r3, #20]
 801ab38:	687d      	ldr	r5, [r7, #4]
 801ab3a:	697b      	ldr	r3, [r7, #20]
 801ab3c:	781b      	ldrb	r3, [r3, #0]
 801ab3e:	4618      	mov	r0, r3
 801ab40:	f7ea fbe6 	bl	8005310 <TfLiteTypeGetName>
 801ab44:	4602      	mov	r2, r0
 801ab46:	697b      	ldr	r3, [r7, #20]
 801ab48:	781b      	ldrb	r3, [r3, #0]
 801ab4a:	4905      	ldr	r1, [pc, #20]	; (801ab60 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x104>)
 801ab4c:	4628      	mov	r0, r5
 801ab4e:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801ab50:	2301      	movs	r3, #1
 801ab52:	e000      	b.n	801ab56 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xfa>
  }
  return kTfLiteOk;
 801ab54:	2300      	movs	r3, #0
}
 801ab56:	4618      	mov	r0, r3
 801ab58:	3720      	adds	r7, #32
 801ab5a:	46bd      	mov	sp, r7
 801ab5c:	bdb0      	pop	{r4, r5, r7, pc}
 801ab5e:	bf00      	nop
 801ab60:	080242b4 	.word	0x080242b4

0801ab64 <_ZN6tflite3ops5micro16Register_CONV_2DEv>:

}  // namespace conv

TfLiteRegistration* Register_CONV_2D() {
 801ab64:	b480      	push	{r7}
 801ab66:	af00      	add	r7, sp, #0
                                 /*invoke=*/conv::Eval,
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
 801ab68:	4b02      	ldr	r3, [pc, #8]	; (801ab74 <_ZN6tflite3ops5micro16Register_CONV_2DEv+0x10>)
}
 801ab6a:	4618      	mov	r0, r3
 801ab6c:	46bd      	mov	sp, r7
 801ab6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab72:	4770      	bx	lr
 801ab74:	20016cc8 	.word	0x20016cc8

0801ab78 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 801ab78:	b580      	push	{r7, lr}
 801ab7a:	b086      	sub	sp, #24
 801ab7c:	af00      	add	r7, sp, #0
 801ab7e:	6078      	str	r0, [r7, #4]
 801ab80:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 801ab82:	6878      	ldr	r0, [r7, #4]
 801ab84:	f7fe f97d 	bl	8018e82 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801ab88:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 801ab8a:	683b      	ldr	r3, [r7, #0]
 801ab8c:	2b00      	cmp	r3, #0
 801ab8e:	db03      	blt.n	801ab98 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 801ab90:	683a      	ldr	r2, [r7, #0]
 801ab92:	68fb      	ldr	r3, [r7, #12]
 801ab94:	429a      	cmp	r2, r3
 801ab96:	db01      	blt.n	801ab9c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 801ab98:	f004 f95a 	bl	801ee50 <abort>
  const auto* dims_data = shape.DimsData();
 801ab9c:	6878      	ldr	r0, [r7, #4]
 801ab9e:	f7fe f9b4 	bl	8018f0a <_ZNK6tflite12RuntimeShape8DimsDataEv>
 801aba2:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 801aba4:	2301      	movs	r3, #1
 801aba6:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 801aba8:	2300      	movs	r3, #0
 801abaa:	613b      	str	r3, [r7, #16]
 801abac:	693a      	ldr	r2, [r7, #16]
 801abae:	68fb      	ldr	r3, [r7, #12]
 801abb0:	429a      	cmp	r2, r3
 801abb2:	da12      	bge.n	801abda <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x62>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 801abb4:	693a      	ldr	r2, [r7, #16]
 801abb6:	683b      	ldr	r3, [r7, #0]
 801abb8:	429a      	cmp	r2, r3
 801abba:	d005      	beq.n	801abc8 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x50>
 801abbc:	693b      	ldr	r3, [r7, #16]
 801abbe:	009b      	lsls	r3, r3, #2
 801abc0:	68ba      	ldr	r2, [r7, #8]
 801abc2:	4413      	add	r3, r2
 801abc4:	681b      	ldr	r3, [r3, #0]
 801abc6:	e000      	b.n	801abca <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x52>
 801abc8:	2301      	movs	r3, #1
 801abca:	697a      	ldr	r2, [r7, #20]
 801abcc:	fb03 f302 	mul.w	r3, r3, r2
 801abd0:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 801abd2:	693b      	ldr	r3, [r7, #16]
 801abd4:	3301      	adds	r3, #1
 801abd6:	613b      	str	r3, [r7, #16]
 801abd8:	e7e8      	b.n	801abac <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x34>
  }
  return flat_size;
 801abda:	697b      	ldr	r3, [r7, #20]
}
 801abdc:	4618      	mov	r0, r3
 801abde:	3718      	adds	r7, #24
 801abe0:	46bd      	mov	sp, r7
 801abe2:	bd80      	pop	{r7, pc}

0801abe4 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& weights_shape,
    const float* weights_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
 801abe4:	b590      	push	{r4, r7, lr}
 801abe6:	b091      	sub	sp, #68	; 0x44
 801abe8:	af00      	add	r7, sp, #0
 801abea:	60f8      	str	r0, [r7, #12]
 801abec:	60b9      	str	r1, [r7, #8]
 801abee:	607a      	str	r2, [r7, #4]
 801abf0:	603b      	str	r3, [r7, #0]
  const float output_activation_min = params.float_activation_min;
 801abf2:	68fb      	ldr	r3, [r7, #12]
 801abf4:	69db      	ldr	r3, [r3, #28]
 801abf6:	62bb      	str	r3, [r7, #40]	; 0x28
  const float output_activation_max = params.float_activation_max;
 801abf8:	68fb      	ldr	r3, [r7, #12]
 801abfa:	6a1b      	ldr	r3, [r3, #32]
 801abfc:	627b      	str	r3, [r7, #36]	; 0x24
  // TODO(benoitjacob): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dims_count = output_shape.DimensionsCount();
 801abfe:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801ac00:	f7fe f93f 	bl	8018e82 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801ac04:	6238      	str	r0, [r7, #32]
  const int weights_dims_count = weights_shape.DimensionsCount();
 801ac06:	6838      	ldr	r0, [r7, #0]
 801ac08:	f7fe f93b 	bl	8018e82 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801ac0c:	61f8      	str	r0, [r7, #28]
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
 801ac0e:	6a3b      	ldr	r3, [r7, #32]
 801ac10:	3b01      	subs	r3, #1
 801ac12:	4619      	mov	r1, r3
 801ac14:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801ac16:	f7ff ffaf 	bl	801ab78 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 801ac1a:	61b8      	str	r0, [r7, #24]
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
 801ac1c:	69fb      	ldr	r3, [r7, #28]
 801ac1e:	1e99      	subs	r1, r3, #2
 801ac20:	6a3b      	ldr	r3, [r7, #32]
 801ac22:	3b01      	subs	r3, #1
                                       output_shape, output_dims_count - 1);
 801ac24:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801ac26:	6838      	ldr	r0, [r7, #0]
 801ac28:	f7fe fd1c 	bl	8019664 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801ac2c:	6178      	str	r0, [r7, #20]
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
 801ac2e:	69fb      	ldr	r3, [r7, #28]
 801ac30:	3b01      	subs	r3, #1
 801ac32:	4619      	mov	r1, r3
 801ac34:	6838      	ldr	r0, [r7, #0]
 801ac36:	f7fe f930 	bl	8018e9a <_ZNK6tflite12RuntimeShape4DimsEi>
 801ac3a:	6138      	str	r0, [r7, #16]
  for (int b = 0; b < batches; ++b) {
 801ac3c:	2300      	movs	r3, #0
 801ac3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 801ac40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801ac42:	69bb      	ldr	r3, [r7, #24]
 801ac44:	429a      	cmp	r2, r3
 801ac46:	da5f      	bge.n	801ad08 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x124>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 801ac48:	2300      	movs	r3, #0
 801ac4a:	63bb      	str	r3, [r7, #56]	; 0x38
 801ac4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ac4e:	697b      	ldr	r3, [r7, #20]
 801ac50:	429a      	cmp	r2, r3
 801ac52:	da55      	bge.n	801ad00 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x11c>
      float total = 0.f;
 801ac54:	f04f 0300 	mov.w	r3, #0
 801ac58:	637b      	str	r3, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 801ac5a:	2300      	movs	r3, #0
 801ac5c:	633b      	str	r3, [r7, #48]	; 0x30
 801ac5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ac60:	693b      	ldr	r3, [r7, #16]
 801ac62:	429a      	cmp	r2, r3
 801ac64:	da21      	bge.n	801acaa <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xc6>
        total += input_data[b * accum_depth + d] *
 801ac66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ac68:	693a      	ldr	r2, [r7, #16]
 801ac6a:	fb02 f203 	mul.w	r2, r2, r3
 801ac6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac70:	4413      	add	r3, r2
 801ac72:	009b      	lsls	r3, r3, #2
 801ac74:	687a      	ldr	r2, [r7, #4]
 801ac76:	4413      	add	r3, r2
 801ac78:	ed93 7a00 	vldr	s14, [r3]
                 weights_data[out_c * accum_depth + d];
 801ac7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ac7e:	693a      	ldr	r2, [r7, #16]
 801ac80:	fb02 f203 	mul.w	r2, r2, r3
 801ac84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac86:	4413      	add	r3, r2
 801ac88:	009b      	lsls	r3, r3, #2
 801ac8a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801ac8c:	4413      	add	r3, r2
 801ac8e:	edd3 7a00 	vldr	s15, [r3]
        total += input_data[b * accum_depth + d] *
 801ac92:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ac96:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801ac9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ac9e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 801aca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aca4:	3301      	adds	r3, #1
 801aca6:	633b      	str	r3, [r7, #48]	; 0x30
 801aca8:	e7d9      	b.n	801ac5e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x7a>
      }
      float bias_value = 0.0f;
 801acaa:	f04f 0300 	mov.w	r3, #0
 801acae:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (bias_data) {
 801acb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801acb2:	2b00      	cmp	r3, #0
 801acb4:	d005      	beq.n	801acc2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xde>
        bias_value = bias_data[out_c];
 801acb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801acb8:	009b      	lsls	r3, r3, #2
 801acba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801acbc:	4413      	add	r3, r2
 801acbe:	681b      	ldr	r3, [r3, #0]
 801acc0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
 801acc2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801acc6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801acca:	ee77 7a27 	vadd.f32	s15, s14, s15
 801acce:	697b      	ldr	r3, [r7, #20]
 801acd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801acd2:	fb02 f203 	mul.w	r2, r2, r3
 801acd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801acd8:	4413      	add	r3, r2
 801acda:	009b      	lsls	r3, r3, #2
 801acdc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801acde:	18d4      	adds	r4, r2, r3
 801ace0:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 801ace4:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 801ace8:	eeb0 0a67 	vmov.f32	s0, s15
 801acec:	f7fe fb40 	bl	8019370 <_ZN6tflite28ActivationFunctionWithMinMaxEfff>
 801acf0:	eef0 7a40 	vmov.f32	s15, s0
 801acf4:	edc4 7a00 	vstr	s15, [r4]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 801acf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801acfa:	3301      	adds	r3, #1
 801acfc:	63bb      	str	r3, [r7, #56]	; 0x38
 801acfe:	e7a5      	b.n	801ac4c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x68>
  for (int b = 0; b < batches; ++b) {
 801ad00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ad02:	3301      	adds	r3, #1
 801ad04:	63fb      	str	r3, [r7, #60]	; 0x3c
 801ad06:	e79b      	b.n	801ac40 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x5c>
          total + bias_value, output_activation_min, output_activation_max);
    }
  }
}
 801ad08:	bf00      	nop
 801ad0a:	3744      	adds	r7, #68	; 0x44
 801ad0c:	46bd      	mov	sp, r7
 801ad0e:	bd90      	pop	{r4, r7, pc}

0801ad10 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const uint8* input_data, const RuntimeShape& filter_shape,
    const uint8* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    uint8* output_data) {
 801ad10:	b580      	push	{r7, lr}
 801ad12:	b096      	sub	sp, #88	; 0x58
 801ad14:	af00      	add	r7, sp, #0
 801ad16:	60f8      	str	r0, [r7, #12]
 801ad18:	60b9      	str	r1, [r7, #8]
 801ad1a:	607a      	str	r2, [r7, #4]
 801ad1c:	603b      	str	r3, [r7, #0]
  const int32 input_offset = params.input_offset;
 801ad1e:	68fb      	ldr	r3, [r7, #12]
 801ad20:	681b      	ldr	r3, [r3, #0]
 801ad22:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32 filter_offset = params.weights_offset;
 801ad24:	68fb      	ldr	r3, [r7, #12]
 801ad26:	685b      	ldr	r3, [r3, #4]
 801ad28:	647b      	str	r3, [r7, #68]	; 0x44
  const int32 output_offset = params.output_offset;
 801ad2a:	68fb      	ldr	r3, [r7, #12]
 801ad2c:	689b      	ldr	r3, [r3, #8]
 801ad2e:	643b      	str	r3, [r7, #64]	; 0x40
  const int32 output_multiplier = params.output_multiplier;
 801ad30:	68fb      	ldr	r3, [r7, #12]
 801ad32:	68db      	ldr	r3, [r3, #12]
 801ad34:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int output_shift = params.output_shift;
 801ad36:	68fb      	ldr	r3, [r7, #12]
 801ad38:	691b      	ldr	r3, [r3, #16]
 801ad3a:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32 output_activation_min = params.quantized_activation_min;
 801ad3c:	68fb      	ldr	r3, [r7, #12]
 801ad3e:	695b      	ldr	r3, [r3, #20]
 801ad40:	61bb      	str	r3, [r7, #24]
  const int32 output_activation_max = params.quantized_activation_max;
 801ad42:	68fb      	ldr	r3, [r7, #12]
 801ad44:	699b      	ldr	r3, [r3, #24]
 801ad46:	617b      	str	r3, [r7, #20]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 801ad48:	6838      	ldr	r0, [r7, #0]
 801ad4a:	f7fe f89a 	bl	8018e82 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801ad4e:	4603      	mov	r3, r0
 801ad50:	2b01      	cmp	r3, #1
 801ad52:	dc01      	bgt.n	801ad58 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x48>
 801ad54:	f004 f87c 	bl	801ee50 <abort>
  TFLITE_DCHECK_GE(output_shape.DimensionsCount(), 1);
 801ad58:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801ad5a:	f7fe f892 	bl	8018e82 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801ad5e:	4603      	mov	r3, r0
 801ad60:	2b00      	cmp	r3, #0
 801ad62:	dc01      	bgt.n	801ad68 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x58>
 801ad64:	f004 f874 	bl	801ee50 <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 801ad68:	69ba      	ldr	r2, [r7, #24]
 801ad6a:	697b      	ldr	r3, [r7, #20]
 801ad6c:	429a      	cmp	r2, r3
 801ad6e:	dd01      	ble.n	801ad74 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x64>
 801ad70:	f004 f86e 	bl	801ee50 <abort>
  // TODO(benoitjacob): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dim_count = output_shape.DimensionsCount();
 801ad74:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801ad76:	f7fe f884 	bl	8018e82 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801ad7a:	6378      	str	r0, [r7, #52]	; 0x34
  const int filter_dim_count = filter_shape.DimensionsCount();
 801ad7c:	6838      	ldr	r0, [r7, #0]
 801ad7e:	f7fe f880 	bl	8018e82 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801ad82:	6338      	str	r0, [r7, #48]	; 0x30
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 801ad84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ad86:	3b01      	subs	r3, #1
 801ad88:	4619      	mov	r1, r3
 801ad8a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801ad8c:	f7ff fef4 	bl	801ab78 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 801ad90:	62f8      	str	r0, [r7, #44]	; 0x2c
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
 801ad92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad94:	1e99      	subs	r1, r3, #2
 801ad96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ad98:	3b01      	subs	r3, #1
                                       output_shape, output_dim_count - 1);
 801ad9a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801ad9c:	6838      	ldr	r0, [r7, #0]
 801ad9e:	f7fe fc61 	bl	8019664 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801ada2:	62b8      	str	r0, [r7, #40]	; 0x28
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 801ada4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ada6:	3b01      	subs	r3, #1
 801ada8:	4619      	mov	r1, r3
 801adaa:	6838      	ldr	r0, [r7, #0]
 801adac:	f7fe f875 	bl	8018e9a <_ZNK6tflite12RuntimeShape4DimsEi>
 801adb0:	6278      	str	r0, [r7, #36]	; 0x24
  for (int b = 0; b < batches; ++b) {
 801adb2:	2300      	movs	r3, #0
 801adb4:	657b      	str	r3, [r7, #84]	; 0x54
 801adb6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801adb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801adba:	429a      	cmp	r2, r3
 801adbc:	da73      	bge.n	801aea6 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x196>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 801adbe:	2300      	movs	r3, #0
 801adc0:	653b      	str	r3, [r7, #80]	; 0x50
 801adc2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801adc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801adc6:	429a      	cmp	r2, r3
 801adc8:	da69      	bge.n	801ae9e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x18e>
      int32 acc = 0;
 801adca:	2300      	movs	r3, #0
 801adcc:	613b      	str	r3, [r7, #16]
      for (int d = 0; d < accum_depth; ++d) {
 801adce:	2300      	movs	r3, #0
 801add0:	64fb      	str	r3, [r7, #76]	; 0x4c
 801add2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801add4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801add6:	429a      	cmp	r2, r3
 801add8:	da24      	bge.n	801ae24 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x114>
        int32 input_val = input_data[b * accum_depth + d];
 801adda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801addc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801adde:	fb02 f203 	mul.w	r2, r2, r3
 801ade2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ade4:	4413      	add	r3, r2
 801ade6:	461a      	mov	r2, r3
 801ade8:	687b      	ldr	r3, [r7, #4]
 801adea:	4413      	add	r3, r2
 801adec:	781b      	ldrb	r3, [r3, #0]
 801adee:	623b      	str	r3, [r7, #32]
        int32 filter_val = filter_data[out_c * accum_depth + d];
 801adf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801adf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801adf4:	fb02 f203 	mul.w	r2, r2, r3
 801adf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801adfa:	4413      	add	r3, r2
 801adfc:	461a      	mov	r2, r3
 801adfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801ae00:	4413      	add	r3, r2
 801ae02:	781b      	ldrb	r3, [r3, #0]
 801ae04:	61fb      	str	r3, [r7, #28]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 801ae06:	69fa      	ldr	r2, [r7, #28]
 801ae08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ae0a:	4413      	add	r3, r2
 801ae0c:	6a39      	ldr	r1, [r7, #32]
 801ae0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801ae10:	440a      	add	r2, r1
 801ae12:	fb02 f203 	mul.w	r2, r2, r3
 801ae16:	693b      	ldr	r3, [r7, #16]
 801ae18:	4413      	add	r3, r2
 801ae1a:	613b      	str	r3, [r7, #16]
      for (int d = 0; d < accum_depth; ++d) {
 801ae1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ae1e:	3301      	adds	r3, #1
 801ae20:	64fb      	str	r3, [r7, #76]	; 0x4c
 801ae22:	e7d6      	b.n	801add2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xc2>
      }
      if (bias_data) {
 801ae24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801ae26:	2b00      	cmp	r3, #0
 801ae28:	d007      	beq.n	801ae3a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x12a>
        acc += bias_data[out_c];
 801ae2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ae2c:	009b      	lsls	r3, r3, #2
 801ae2e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801ae30:	4413      	add	r3, r2
 801ae32:	681a      	ldr	r2, [r3, #0]
 801ae34:	693b      	ldr	r3, [r7, #16]
 801ae36:	4413      	add	r3, r2
 801ae38:	613b      	str	r3, [r7, #16]
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
 801ae3a:	693b      	ldr	r3, [r7, #16]
 801ae3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ae3e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801ae40:	4618      	mov	r0, r3
 801ae42:	f7fe fc2d 	bl	80196a0 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 801ae46:	4603      	mov	r3, r0
 801ae48:	613b      	str	r3, [r7, #16]
      acc += output_offset;
 801ae4a:	693a      	ldr	r2, [r7, #16]
 801ae4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ae4e:	4413      	add	r3, r2
 801ae50:	613b      	str	r3, [r7, #16]
      acc = std::max(acc, output_activation_min);
 801ae52:	f107 0218 	add.w	r2, r7, #24
 801ae56:	f107 0310 	add.w	r3, r7, #16
 801ae5a:	4611      	mov	r1, r2
 801ae5c:	4618      	mov	r0, r3
 801ae5e:	f7fa ff97 	bl	8015d90 <_ZSt3maxIlERKT_S2_S2_>
 801ae62:	4603      	mov	r3, r0
 801ae64:	681b      	ldr	r3, [r3, #0]
 801ae66:	613b      	str	r3, [r7, #16]
      acc = std::min(acc, output_activation_max);
 801ae68:	f107 0214 	add.w	r2, r7, #20
 801ae6c:	f107 0310 	add.w	r3, r7, #16
 801ae70:	4611      	mov	r1, r2
 801ae72:	4618      	mov	r0, r3
 801ae74:	f7fa ffa0 	bl	8015db8 <_ZSt3minIlERKT_S2_S2_>
 801ae78:	4603      	mov	r3, r0
 801ae7a:	681b      	ldr	r3, [r3, #0]
 801ae7c:	613b      	str	r3, [r7, #16]
      output_data[out_c + output_depth * b] = static_cast<uint8>(acc);
 801ae7e:	6939      	ldr	r1, [r7, #16]
 801ae80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ae82:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801ae84:	fb02 f203 	mul.w	r2, r2, r3
 801ae88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ae8a:	4413      	add	r3, r2
 801ae8c:	461a      	mov	r2, r3
 801ae8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ae90:	4413      	add	r3, r2
 801ae92:	b2ca      	uxtb	r2, r1
 801ae94:	701a      	strb	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 801ae96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ae98:	3301      	adds	r3, #1
 801ae9a:	653b      	str	r3, [r7, #80]	; 0x50
 801ae9c:	e791      	b.n	801adc2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xb2>
  for (int b = 0; b < batches; ++b) {
 801ae9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801aea0:	3301      	adds	r3, #1
 801aea2:	657b      	str	r3, [r7, #84]	; 0x54
 801aea4:	e787      	b.n	801adb6 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xa6>
    }
  }
}
 801aea6:	bf00      	nop
 801aea8:	3758      	adds	r7, #88	; 0x58
 801aeaa:	46bd      	mov	sp, r7
 801aeac:	bd80      	pop	{r7, pc}

0801aeae <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const uint8* input_data, const RuntimeShape& filter_shape,
    const uint8* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    int16* output_data) {
 801aeae:	b580      	push	{r7, lr}
 801aeb0:	b098      	sub	sp, #96	; 0x60
 801aeb2:	af00      	add	r7, sp, #0
 801aeb4:	60f8      	str	r0, [r7, #12]
 801aeb6:	60b9      	str	r1, [r7, #8]
 801aeb8:	607a      	str	r2, [r7, #4]
 801aeba:	603b      	str	r3, [r7, #0]
  const int32 input_offset = params.input_offset;
 801aebc:	68fb      	ldr	r3, [r7, #12]
 801aebe:	681b      	ldr	r3, [r3, #0]
 801aec0:	653b      	str	r3, [r7, #80]	; 0x50
  const int32 filter_offset = params.weights_offset;
 801aec2:	68fb      	ldr	r3, [r7, #12]
 801aec4:	685b      	ldr	r3, [r3, #4]
 801aec6:	64fb      	str	r3, [r7, #76]	; 0x4c
  const int32 output_offset = params.output_offset;
 801aec8:	68fb      	ldr	r3, [r7, #12]
 801aeca:	689b      	ldr	r3, [r3, #8]
 801aecc:	623b      	str	r3, [r7, #32]
  const int32 output_multiplier = params.output_multiplier;
 801aece:	68fb      	ldr	r3, [r7, #12]
 801aed0:	68db      	ldr	r3, [r3, #12]
 801aed2:	64bb      	str	r3, [r7, #72]	; 0x48
  const int output_shift = params.output_shift;
 801aed4:	68fb      	ldr	r3, [r7, #12]
 801aed6:	691b      	ldr	r3, [r3, #16]
 801aed8:	647b      	str	r3, [r7, #68]	; 0x44
  const int32 output_activation_min = params.quantized_activation_min;
 801aeda:	68fb      	ldr	r3, [r7, #12]
 801aedc:	695b      	ldr	r3, [r3, #20]
 801aede:	61fb      	str	r3, [r7, #28]
  const int32 output_activation_max = params.quantized_activation_max;
 801aee0:	68fb      	ldr	r3, [r7, #12]
 801aee2:	699b      	ldr	r3, [r3, #24]
 801aee4:	61bb      	str	r3, [r7, #24]

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 801aee6:	69fa      	ldr	r2, [r7, #28]
 801aee8:	69bb      	ldr	r3, [r7, #24]
 801aeea:	429a      	cmp	r2, r3
 801aeec:	dd01      	ble.n	801aef2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x44>
 801aeee:	f003 ffaf 	bl	801ee50 <abort>
  TFLITE_DCHECK_EQ(output_offset, 0);
 801aef2:	6a3b      	ldr	r3, [r7, #32]
 801aef4:	2b00      	cmp	r3, #0
 801aef6:	d001      	beq.n	801aefc <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x4e>
 801aef8:	f003 ffaa 	bl	801ee50 <abort>
  // TODO(benoitjacob): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dim_count = output_shape.DimensionsCount();
 801aefc:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801aefe:	f7fd ffc0 	bl	8018e82 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801af02:	6438      	str	r0, [r7, #64]	; 0x40
  const int filter_dim_count = filter_shape.DimensionsCount();
 801af04:	6838      	ldr	r0, [r7, #0]
 801af06:	f7fd ffbc 	bl	8018e82 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801af0a:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 801af0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801af0e:	3b01      	subs	r3, #1
 801af10:	4619      	mov	r1, r3
 801af12:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801af14:	f7ff fe30 	bl	801ab78 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 801af18:	63b8      	str	r0, [r7, #56]	; 0x38
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
 801af1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801af1c:	1e99      	subs	r1, r3, #2
 801af1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801af20:	3b01      	subs	r3, #1
                                       output_shape, output_dim_count - 1);
 801af22:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801af24:	6838      	ldr	r0, [r7, #0]
 801af26:	f7fe fb9d 	bl	8019664 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801af2a:	6378      	str	r0, [r7, #52]	; 0x34
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 801af2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801af2e:	3b01      	subs	r3, #1
 801af30:	4619      	mov	r1, r3
 801af32:	6838      	ldr	r0, [r7, #0]
 801af34:	f7fd ffb1 	bl	8018e9a <_ZNK6tflite12RuntimeShape4DimsEi>
 801af38:	6338      	str	r0, [r7, #48]	; 0x30
  for (int b = 0; b < batches; ++b) {
 801af3a:	2300      	movs	r3, #0
 801af3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801af3e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801af40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801af42:	429a      	cmp	r2, r3
 801af44:	da7c      	bge.n	801b040 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x192>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 801af46:	2300      	movs	r3, #0
 801af48:	65bb      	str	r3, [r7, #88]	; 0x58
 801af4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801af4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801af4e:	429a      	cmp	r2, r3
 801af50:	da72      	bge.n	801b038 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x18a>
      // Internal accumulation.
      // Initialize accumulator with the bias-value.
      int32 accum = bias_data[out_c];
 801af52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801af54:	009b      	lsls	r3, r3, #2
 801af56:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801af58:	4413      	add	r3, r2
 801af5a:	681b      	ldr	r3, [r3, #0]
 801af5c:	617b      	str	r3, [r7, #20]
      // Accumulation loop.
      for (int d = 0; d < accum_depth; ++d) {
 801af5e:	2300      	movs	r3, #0
 801af60:	657b      	str	r3, [r7, #84]	; 0x54
 801af62:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801af64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af66:	429a      	cmp	r2, r3
 801af68:	da2c      	bge.n	801afc4 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x116>
        int16 input_val = input_data[b * accum_depth + d] + input_offset;
 801af6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801af6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801af6e:	fb02 f203 	mul.w	r2, r2, r3
 801af72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801af74:	4413      	add	r3, r2
 801af76:	461a      	mov	r2, r3
 801af78:	687b      	ldr	r3, [r7, #4]
 801af7a:	4413      	add	r3, r2
 801af7c:	781b      	ldrb	r3, [r3, #0]
 801af7e:	b29a      	uxth	r2, r3
 801af80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801af82:	b29b      	uxth	r3, r3
 801af84:	4413      	add	r3, r2
 801af86:	b29b      	uxth	r3, r3
 801af88:	85fb      	strh	r3, [r7, #46]	; 0x2e
        int16 filter_val = filter_data[out_c * accum_depth + d] + filter_offset;
 801af8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801af8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801af8e:	fb02 f203 	mul.w	r2, r2, r3
 801af92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801af94:	4413      	add	r3, r2
 801af96:	461a      	mov	r2, r3
 801af98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801af9a:	4413      	add	r3, r2
 801af9c:	781b      	ldrb	r3, [r3, #0]
 801af9e:	b29a      	uxth	r2, r3
 801afa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801afa2:	b29b      	uxth	r3, r3
 801afa4:	4413      	add	r3, r2
 801afa6:	b29b      	uxth	r3, r3
 801afa8:	85bb      	strh	r3, [r7, #44]	; 0x2c
        accum += filter_val * input_val;
 801afaa:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 801afae:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 801afb2:	fb02 f203 	mul.w	r2, r2, r3
 801afb6:	697b      	ldr	r3, [r7, #20]
 801afb8:	4413      	add	r3, r2
 801afba:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 801afbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801afbe:	3301      	adds	r3, #1
 801afc0:	657b      	str	r3, [r7, #84]	; 0x54
 801afc2:	e7ce      	b.n	801af62 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0xb4>
      // Down-scale the final int32 accumulator to the scale used by our
      // (16-bit, typically 3 integer bits) fixed-point format. The quantized
      // multiplier and shift here have been pre-computed offline
      // (e.g. by toco).
      accum =
          MultiplyByQuantizedMultiplier(accum, output_multiplier, output_shift);
 801afc4:	697b      	ldr	r3, [r7, #20]
 801afc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801afc8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801afca:	4618      	mov	r0, r3
 801afcc:	f7fe fb68 	bl	80196a0 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 801afd0:	4603      	mov	r3, r0
      accum =
 801afd2:	617b      	str	r3, [r7, #20]
      // Saturate, cast to int16, and store to output array.
      accum = std::max(accum, output_activation_min - output_offset);
 801afd4:	69fa      	ldr	r2, [r7, #28]
 801afd6:	6a3b      	ldr	r3, [r7, #32]
 801afd8:	1ad3      	subs	r3, r2, r3
 801afda:	627b      	str	r3, [r7, #36]	; 0x24
 801afdc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801afe0:	f107 0314 	add.w	r3, r7, #20
 801afe4:	4611      	mov	r1, r2
 801afe6:	4618      	mov	r0, r3
 801afe8:	f7fa fed2 	bl	8015d90 <_ZSt3maxIlERKT_S2_S2_>
 801afec:	4603      	mov	r3, r0
 801afee:	681b      	ldr	r3, [r3, #0]
 801aff0:	617b      	str	r3, [r7, #20]
      accum = std::min(accum, output_activation_max - output_offset);
 801aff2:	69ba      	ldr	r2, [r7, #24]
 801aff4:	6a3b      	ldr	r3, [r7, #32]
 801aff6:	1ad3      	subs	r3, r2, r3
 801aff8:	62bb      	str	r3, [r7, #40]	; 0x28
 801affa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801affe:	f107 0314 	add.w	r3, r7, #20
 801b002:	4611      	mov	r1, r2
 801b004:	4618      	mov	r0, r3
 801b006:	f7fa fed7 	bl	8015db8 <_ZSt3minIlERKT_S2_S2_>
 801b00a:	4603      	mov	r3, r0
 801b00c:	681b      	ldr	r3, [r3, #0]
 801b00e:	617b      	str	r3, [r7, #20]
      accum += output_offset;
 801b010:	697a      	ldr	r2, [r7, #20]
 801b012:	6a3b      	ldr	r3, [r7, #32]
 801b014:	4413      	add	r3, r2
 801b016:	617b      	str	r3, [r7, #20]
      output_data[out_c + output_depth * b] = accum;
 801b018:	6979      	ldr	r1, [r7, #20]
 801b01a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b01c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801b01e:	fb02 f203 	mul.w	r2, r2, r3
 801b022:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801b024:	4413      	add	r3, r2
 801b026:	005b      	lsls	r3, r3, #1
 801b028:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801b02a:	4413      	add	r3, r2
 801b02c:	b20a      	sxth	r2, r1
 801b02e:	801a      	strh	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 801b030:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801b032:	3301      	adds	r3, #1
 801b034:	65bb      	str	r3, [r7, #88]	; 0x58
 801b036:	e788      	b.n	801af4a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x9c>
  for (int b = 0; b < batches; ++b) {
 801b038:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801b03a:	3301      	adds	r3, #1
 801b03c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801b03e:	e77e      	b.n	801af3e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x90>
    }
  }
}
 801b040:	bf00      	nop
 801b042:	3760      	adds	r7, #96	; 0x60
 801b044:	46bd      	mov	sp, r7
 801b046:	bd80      	pop	{r7, pc}

0801b048 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
 801b048:	b580      	push	{r7, lr}
 801b04a:	b096      	sub	sp, #88	; 0x58
 801b04c:	af00      	add	r7, sp, #0
 801b04e:	60f8      	str	r0, [r7, #12]
 801b050:	60b9      	str	r1, [r7, #8]
 801b052:	607a      	str	r2, [r7, #4]
 801b054:	603b      	str	r3, [r7, #0]
  const int32 input_offset = params.input_offset;
 801b056:	68fb      	ldr	r3, [r7, #12]
 801b058:	681b      	ldr	r3, [r3, #0]
 801b05a:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32 filter_offset = params.weights_offset;
 801b05c:	68fb      	ldr	r3, [r7, #12]
 801b05e:	685b      	ldr	r3, [r3, #4]
 801b060:	647b      	str	r3, [r7, #68]	; 0x44
  const int32 output_offset = params.output_offset;
 801b062:	68fb      	ldr	r3, [r7, #12]
 801b064:	689b      	ldr	r3, [r3, #8]
 801b066:	643b      	str	r3, [r7, #64]	; 0x40
  const int32 output_multiplier = params.output_multiplier;
 801b068:	68fb      	ldr	r3, [r7, #12]
 801b06a:	68db      	ldr	r3, [r3, #12]
 801b06c:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int output_shift = params.output_shift;
 801b06e:	68fb      	ldr	r3, [r7, #12]
 801b070:	691b      	ldr	r3, [r3, #16]
 801b072:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32 output_activation_min = params.quantized_activation_min;
 801b074:	68fb      	ldr	r3, [r7, #12]
 801b076:	695b      	ldr	r3, [r3, #20]
 801b078:	623b      	str	r3, [r7, #32]
  const int32 output_activation_max = params.quantized_activation_max;
 801b07a:	68fb      	ldr	r3, [r7, #12]
 801b07c:	699b      	ldr	r3, [r3, #24]
 801b07e:	61fb      	str	r3, [r7, #28]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 801b080:	6838      	ldr	r0, [r7, #0]
 801b082:	f7fd fefe 	bl	8018e82 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801b086:	4603      	mov	r3, r0
 801b088:	2b01      	cmp	r3, #1
 801b08a:	dc01      	bgt.n	801b090 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x48>
 801b08c:	f003 fee0 	bl	801ee50 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 801b090:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801b092:	f7fd fef6 	bl	8018e82 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801b096:	4603      	mov	r3, r0
 801b098:	2b02      	cmp	r3, #2
 801b09a:	d001      	beq.n	801b0a0 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x58>
 801b09c:	f003 fed8 	bl	801ee50 <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 801b0a0:	6a3a      	ldr	r2, [r7, #32]
 801b0a2:	69fb      	ldr	r3, [r7, #28]
 801b0a4:	429a      	cmp	r2, r3
 801b0a6:	dd01      	ble.n	801b0ac <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x64>
 801b0a8:	f003 fed2 	bl	801ee50 <abort>
  const int filter_dim_count = filter_shape.DimensionsCount();
 801b0ac:	6838      	ldr	r0, [r7, #0]
 801b0ae:	f7fd fee8 	bl	8018e82 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801b0b2:	6378      	str	r0, [r7, #52]	; 0x34
  const int batches = output_shape.Dims(0);
 801b0b4:	2100      	movs	r1, #0
 801b0b6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801b0b8:	f7fd feef 	bl	8018e9a <_ZNK6tflite12RuntimeShape4DimsEi>
 801b0bc:	6338      	str	r0, [r7, #48]	; 0x30
  const int output_depth = output_shape.Dims(1);
 801b0be:	2101      	movs	r1, #1
 801b0c0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801b0c2:	f7fd feea 	bl	8018e9a <_ZNK6tflite12RuntimeShape4DimsEi>
 801b0c6:	4603      	mov	r3, r0
 801b0c8:	61bb      	str	r3, [r7, #24]
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
 801b0ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b0cc:	3b02      	subs	r3, #2
 801b0ce:	4619      	mov	r1, r3
 801b0d0:	6838      	ldr	r0, [r7, #0]
 801b0d2:	f7fd fee2 	bl	8018e9a <_ZNK6tflite12RuntimeShape4DimsEi>
 801b0d6:	4602      	mov	r2, r0
 801b0d8:	69bb      	ldr	r3, [r7, #24]
 801b0da:	429a      	cmp	r2, r3
 801b0dc:	da01      	bge.n	801b0e2 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x9a>
 801b0de:	f003 feb7 	bl	801ee50 <abort>
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 801b0e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b0e4:	3b01      	subs	r3, #1
 801b0e6:	4619      	mov	r1, r3
 801b0e8:	6838      	ldr	r0, [r7, #0]
 801b0ea:	f7fd fed6 	bl	8018e9a <_ZNK6tflite12RuntimeShape4DimsEi>
 801b0ee:	62f8      	str	r0, [r7, #44]	; 0x2c
  for (int b = 0; b < batches; ++b) {
 801b0f0:	2300      	movs	r3, #0
 801b0f2:	657b      	str	r3, [r7, #84]	; 0x54
 801b0f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801b0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b0f8:	429a      	cmp	r2, r3
 801b0fa:	da75      	bge.n	801b1e8 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x1a0>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 801b0fc:	2300      	movs	r3, #0
 801b0fe:	653b      	str	r3, [r7, #80]	; 0x50
 801b100:	69bb      	ldr	r3, [r7, #24]
 801b102:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801b104:	429a      	cmp	r2, r3
 801b106:	da6b      	bge.n	801b1e0 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x198>
      int32 acc = 0;
 801b108:	2300      	movs	r3, #0
 801b10a:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 801b10c:	2300      	movs	r3, #0
 801b10e:	64fb      	str	r3, [r7, #76]	; 0x4c
 801b110:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801b112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b114:	429a      	cmp	r2, r3
 801b116:	da26      	bge.n	801b166 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x11e>
        int32 input_val = input_data[b * accum_depth + d];
 801b118:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b11a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b11c:	fb02 f203 	mul.w	r2, r2, r3
 801b120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b122:	4413      	add	r3, r2
 801b124:	461a      	mov	r2, r3
 801b126:	687b      	ldr	r3, [r7, #4]
 801b128:	4413      	add	r3, r2
 801b12a:	f993 3000 	ldrsb.w	r3, [r3]
 801b12e:	62bb      	str	r3, [r7, #40]	; 0x28
        int32 filter_val = filter_data[out_c * accum_depth + d];
 801b130:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b132:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b134:	fb02 f203 	mul.w	r2, r2, r3
 801b138:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b13a:	4413      	add	r3, r2
 801b13c:	461a      	mov	r2, r3
 801b13e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801b140:	4413      	add	r3, r2
 801b142:	f993 3000 	ldrsb.w	r3, [r3]
 801b146:	627b      	str	r3, [r7, #36]	; 0x24
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 801b148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b14a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b14c:	4413      	add	r3, r2
 801b14e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801b150:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801b152:	440a      	add	r2, r1
 801b154:	fb02 f203 	mul.w	r2, r2, r3
 801b158:	697b      	ldr	r3, [r7, #20]
 801b15a:	4413      	add	r3, r2
 801b15c:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 801b15e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b160:	3301      	adds	r3, #1
 801b162:	64fb      	str	r3, [r7, #76]	; 0x4c
 801b164:	e7d4      	b.n	801b110 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xc8>
      }
      if (bias_data) {
 801b166:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b168:	2b00      	cmp	r3, #0
 801b16a:	d007      	beq.n	801b17c <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x134>
        acc += bias_data[out_c];
 801b16c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b16e:	009b      	lsls	r3, r3, #2
 801b170:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801b172:	4413      	add	r3, r2
 801b174:	681a      	ldr	r2, [r3, #0]
 801b176:	697b      	ldr	r3, [r7, #20]
 801b178:	4413      	add	r3, r2
 801b17a:	617b      	str	r3, [r7, #20]
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
 801b17c:	697b      	ldr	r3, [r7, #20]
 801b17e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b180:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801b182:	4618      	mov	r0, r3
 801b184:	f7fe fa8c 	bl	80196a0 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 801b188:	4603      	mov	r3, r0
 801b18a:	617b      	str	r3, [r7, #20]
      acc += output_offset;
 801b18c:	697a      	ldr	r2, [r7, #20]
 801b18e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b190:	4413      	add	r3, r2
 801b192:	617b      	str	r3, [r7, #20]
      acc = std::max(acc, output_activation_min);
 801b194:	f107 0220 	add.w	r2, r7, #32
 801b198:	f107 0314 	add.w	r3, r7, #20
 801b19c:	4611      	mov	r1, r2
 801b19e:	4618      	mov	r0, r3
 801b1a0:	f7fa fdf6 	bl	8015d90 <_ZSt3maxIlERKT_S2_S2_>
 801b1a4:	4603      	mov	r3, r0
 801b1a6:	681b      	ldr	r3, [r3, #0]
 801b1a8:	617b      	str	r3, [r7, #20]
      acc = std::min(acc, output_activation_max);
 801b1aa:	f107 021c 	add.w	r2, r7, #28
 801b1ae:	f107 0314 	add.w	r3, r7, #20
 801b1b2:	4611      	mov	r1, r2
 801b1b4:	4618      	mov	r0, r3
 801b1b6:	f7fa fdff 	bl	8015db8 <_ZSt3minIlERKT_S2_S2_>
 801b1ba:	4603      	mov	r3, r0
 801b1bc:	681b      	ldr	r3, [r3, #0]
 801b1be:	617b      	str	r3, [r7, #20]
      output_data[out_c + output_depth * b] = static_cast<int8_t>(acc);
 801b1c0:	6979      	ldr	r1, [r7, #20]
 801b1c2:	69bb      	ldr	r3, [r7, #24]
 801b1c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801b1c6:	fb02 f203 	mul.w	r2, r2, r3
 801b1ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b1cc:	4413      	add	r3, r2
 801b1ce:	461a      	mov	r2, r3
 801b1d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801b1d2:	4413      	add	r3, r2
 801b1d4:	b24a      	sxtb	r2, r1
 801b1d6:	701a      	strb	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 801b1d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b1da:	3301      	adds	r3, #1
 801b1dc:	653b      	str	r3, [r7, #80]	; 0x50
 801b1de:	e78f      	b.n	801b100 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xb8>
  for (int b = 0; b < batches; ++b) {
 801b1e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b1e2:	3301      	adds	r3, #1
 801b1e4:	657b      	str	r3, [r7, #84]	; 0x54
 801b1e6:	e785      	b.n	801b0f4 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xac>
    }
  }
}
 801b1e8:	bf00      	nop
 801b1ea:	3758      	adds	r7, #88	; 0x58
 801b1ec:	46bd      	mov	sp, r7
 801b1ee:	bd80      	pop	{r7, pc}

0801b1f0 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE>:
TfLiteStatus CalculateOpData(TfLiteContext* context,
                             TfLiteFusedActivation activation,
                             TfLiteType data_type, const TfLiteTensor* input,
                             const TfLiteTensor* filter,
                             const TfLiteTensor* bias, TfLiteTensor* output,
                             OpData* data) {
 801b1f0:	b590      	push	{r4, r7, lr}
 801b1f2:	b08d      	sub	sp, #52	; 0x34
 801b1f4:	af02      	add	r7, sp, #8
 801b1f6:	60f8      	str	r0, [r7, #12]
 801b1f8:	607b      	str	r3, [r7, #4]
 801b1fa:	460b      	mov	r3, r1
 801b1fc:	72fb      	strb	r3, [r7, #11]
 801b1fe:	4613      	mov	r3, r2
 801b200:	72bb      	strb	r3, [r7, #10]
  TfLiteStatus status = kTfLiteOk;
 801b202:	2300      	movs	r3, #0
 801b204:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (data_type != kTfLiteFloat32) {
 801b208:	7abb      	ldrb	r3, [r7, #10]
 801b20a:	2b01      	cmp	r3, #1
 801b20c:	d041      	beq.n	801b292 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0xa2>
    double real_multiplier = 0.0;
 801b20e:	f04f 0300 	mov.w	r3, #0
 801b212:	f04f 0400 	mov.w	r4, #0
 801b216:	e9c7 3406 	strd	r3, r4, [r7, #24]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 801b21a:	f107 0318 	add.w	r3, r7, #24
 801b21e:	9301      	str	r3, [sp, #4]
 801b220:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b222:	9300      	str	r3, [sp, #0]
 801b224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b226:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b228:	6879      	ldr	r1, [r7, #4]
 801b22a:	68f8      	ldr	r0, [r7, #12]
 801b22c:	f7fa fbc0 	bl	80159b0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 801b230:	4603      	mov	r3, r0
 801b232:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801b236:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b23a:	2b00      	cmp	r3, #0
 801b23c:	d002      	beq.n	801b244 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0x54>
 801b23e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b242:	e028      	b.n	801b296 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0xa6>
        context, input, filter, bias, output, &real_multiplier));
    int exponent;
    QuantizeMultiplier(real_multiplier, &data->output_multiplier, &exponent);
 801b244:	ed97 7b06 	vldr	d7, [r7, #24]
 801b248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b24a:	f107 0214 	add.w	r2, r7, #20
 801b24e:	4611      	mov	r1, r2
 801b250:	4618      	mov	r0, r3
 801b252:	eeb0 0a47 	vmov.f32	s0, s14
 801b256:	eef0 0a67 	vmov.f32	s1, s15
 801b25a:	f7f9 ffd5 	bl	8015208 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    data->output_shift = -exponent;
 801b25e:	697b      	ldr	r3, [r7, #20]
 801b260:	425a      	negs	r2, r3
 801b262:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b264:	605a      	str	r2, [r3, #4]
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 801b266:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b268:	f103 0208 	add.w	r2, r3, #8
 801b26c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b26e:	330c      	adds	r3, #12
 801b270:	7af9      	ldrb	r1, [r7, #11]
 801b272:	9300      	str	r3, [sp, #0]
 801b274:	4613      	mov	r3, r2
 801b276:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801b278:	68f8      	ldr	r0, [r7, #12]
 801b27a:	f7fa fd21 	bl	8015cc0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 801b27e:	4603      	mov	r3, r0
 801b280:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801b284:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801b288:	2b00      	cmp	r3, #0
 801b28a:	d002      	beq.n	801b292 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0xa2>
 801b28c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801b290:	e001      	b.n	801b296 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0xa6>
        context, activation, output, &data->output_activation_min,
        &data->output_activation_max));
  }
  return status;
 801b292:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801b296:	4618      	mov	r0, r3
 801b298:	372c      	adds	r7, #44	; 0x2c
 801b29a:	46bd      	mov	sp, r7
 801b29c:	bd90      	pop	{r4, r7, pc}

0801b29e <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj>:

}  // namespace

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 801b29e:	b580      	push	{r7, lr}
 801b2a0:	b086      	sub	sp, #24
 801b2a2:	af00      	add	r7, sp, #0
 801b2a4:	60f8      	str	r0, [r7, #12]
 801b2a6:	60b9      	str	r1, [r7, #8]
 801b2a8:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 801b2aa:	68fb      	ldr	r3, [r7, #12]
 801b2ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b2ae:	2b00      	cmp	r3, #0
 801b2b0:	d101      	bne.n	801b2b6 <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj+0x18>
 801b2b2:	f003 fdcd 	bl	801ee50 <abort>
  void* data = nullptr;
 801b2b6:	2300      	movs	r3, #0
 801b2b8:	617b      	str	r3, [r7, #20]
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
 801b2ba:	68fb      	ldr	r3, [r7, #12]
 801b2bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b2be:	f107 0214 	add.w	r2, r7, #20
 801b2c2:	2114      	movs	r1, #20
 801b2c4:	68f8      	ldr	r0, [r7, #12]
 801b2c6:	4798      	blx	r3
 801b2c8:	4603      	mov	r3, r0
 801b2ca:	2b01      	cmp	r3, #1
 801b2cc:	bf0c      	ite	eq
 801b2ce:	2301      	moveq	r3, #1
 801b2d0:	2300      	movne	r3, #0
 801b2d2:	b2db      	uxtb	r3, r3
 801b2d4:	2b00      	cmp	r3, #0
 801b2d6:	d001      	beq.n	801b2dc <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj+0x3e>
      kTfLiteError) {
    return nullptr;
 801b2d8:	2300      	movs	r3, #0
 801b2da:	e000      	b.n	801b2de <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj+0x40>
  }
  return data;
 801b2dc:	697b      	ldr	r3, [r7, #20]
}
 801b2de:	4618      	mov	r0, r3
 801b2e0:	3718      	adds	r7, #24
 801b2e2:	46bd      	mov	sp, r7
 801b2e4:	bd80      	pop	{r7, pc}
	...

0801b2e8 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 801b2e8:	b590      	push	{r4, r7, lr}
 801b2ea:	b08d      	sub	sp, #52	; 0x34
 801b2ec:	af04      	add	r7, sp, #16
 801b2ee:	6078      	str	r0, [r7, #4]
 801b2f0:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 801b2f2:	683b      	ldr	r3, [r7, #0]
 801b2f4:	691b      	ldr	r3, [r3, #16]
 801b2f6:	2b00      	cmp	r3, #0
 801b2f8:	d101      	bne.n	801b2fe <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 801b2fa:	f003 fda9 	bl	801ee50 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 801b2fe:	683b      	ldr	r3, [r7, #0]
 801b300:	695b      	ldr	r3, [r3, #20]
 801b302:	2b00      	cmp	r3, #0
 801b304:	d101      	bne.n	801b30a <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 801b306:	f003 fda3 	bl	801ee50 <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 801b30a:	683b      	ldr	r3, [r7, #0]
 801b30c:	691b      	ldr	r3, [r3, #16]
 801b30e:	61fb      	str	r3, [r7, #28]
  const auto params =
 801b310:	683b      	ldr	r3, [r7, #0]
 801b312:	695b      	ldr	r3, [r3, #20]
 801b314:	61bb      	str	r3, [r7, #24]
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 801b316:	687b      	ldr	r3, [r7, #4]
 801b318:	2200      	movs	r2, #0
 801b31a:	6839      	ldr	r1, [r7, #0]
 801b31c:	4618      	mov	r0, r3
 801b31e:	f7fd fe8f 	bl	8019040 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801b322:	6178      	str	r0, [r7, #20]
  const TfLiteTensor* filter = GetInput(context, node, kWeightsTensor);
 801b324:	687b      	ldr	r3, [r7, #4]
 801b326:	2201      	movs	r2, #1
 801b328:	6839      	ldr	r1, [r7, #0]
 801b32a:	4618      	mov	r0, r3
 801b32c:	f7fd fe88 	bl	8019040 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801b330:	6138      	str	r0, [r7, #16]
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
 801b332:	687b      	ldr	r3, [r7, #4]
 801b334:	2202      	movs	r2, #2
 801b336:	6839      	ldr	r1, [r7, #0]
 801b338:	4618      	mov	r0, r3
 801b33a:	f7fe fea1 	bl	801a080 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei>
 801b33e:	60f8      	str	r0, [r7, #12]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 801b340:	687b      	ldr	r3, [r7, #4]
 801b342:	2200      	movs	r2, #0
 801b344:	6839      	ldr	r1, [r7, #0]
 801b346:	4618      	mov	r0, r3
 801b348:	f7fd fe92 	bl	8019070 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 801b34c:	60b8      	str	r0, [r7, #8]

  TF_LITE_ENSURE_EQ(context, input->type, output->type);
 801b34e:	697b      	ldr	r3, [r7, #20]
 801b350:	781a      	ldrb	r2, [r3, #0]
 801b352:	68bb      	ldr	r3, [r7, #8]
 801b354:	781b      	ldrb	r3, [r3, #0]
 801b356:	429a      	cmp	r2, r3
 801b358:	d013      	beq.n	801b382 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x9a>
 801b35a:	687b      	ldr	r3, [r7, #4]
 801b35c:	695c      	ldr	r4, [r3, #20]
 801b35e:	6878      	ldr	r0, [r7, #4]
 801b360:	697b      	ldr	r3, [r7, #20]
 801b362:	781b      	ldrb	r3, [r3, #0]
 801b364:	461a      	mov	r2, r3
 801b366:	68bb      	ldr	r3, [r7, #8]
 801b368:	781b      	ldrb	r3, [r3, #0]
 801b36a:	9303      	str	r3, [sp, #12]
 801b36c:	9202      	str	r2, [sp, #8]
 801b36e:	4b16      	ldr	r3, [pc, #88]	; (801b3c8 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xe0>)
 801b370:	9301      	str	r3, [sp, #4]
 801b372:	4b16      	ldr	r3, [pc, #88]	; (801b3cc <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
 801b374:	9300      	str	r3, [sp, #0]
 801b376:	2360      	movs	r3, #96	; 0x60
 801b378:	4a15      	ldr	r2, [pc, #84]	; (801b3d0 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xe8>)
 801b37a:	4916      	ldr	r1, [pc, #88]	; (801b3d4 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xec>)
 801b37c:	47a0      	blx	r4
 801b37e:	2301      	movs	r3, #1
 801b380:	e01e      	b.n	801b3c0 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xd8>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 801b382:	697b      	ldr	r3, [r7, #20]
 801b384:	781a      	ldrb	r2, [r3, #0]
 801b386:	693b      	ldr	r3, [r7, #16]
 801b388:	781b      	ldrb	r3, [r3, #0]
 801b38a:	429a      	cmp	r2, r3
 801b38c:	d007      	beq.n	801b39e <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xb6>
 801b38e:	687b      	ldr	r3, [r7, #4]
 801b390:	695b      	ldr	r3, [r3, #20]
 801b392:	687a      	ldr	r2, [r7, #4]
 801b394:	4910      	ldr	r1, [pc, #64]	; (801b3d8 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xf0>)
 801b396:	4610      	mov	r0, r2
 801b398:	4798      	blx	r3
 801b39a:	2301      	movs	r3, #1
 801b39c:	e010      	b.n	801b3c0 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xd8>
                     "Hybrid models are not supported on TFLite Micro.");

  return CalculateOpData(context, params->activation, input->type, input,
 801b39e:	6878      	ldr	r0, [r7, #4]
 801b3a0:	69bb      	ldr	r3, [r7, #24]
 801b3a2:	7819      	ldrb	r1, [r3, #0]
 801b3a4:	697b      	ldr	r3, [r7, #20]
 801b3a6:	781a      	ldrb	r2, [r3, #0]
                         filter, bias, output, data);
 801b3a8:	69fb      	ldr	r3, [r7, #28]
 801b3aa:	9303      	str	r3, [sp, #12]
 801b3ac:	68bb      	ldr	r3, [r7, #8]
 801b3ae:	9302      	str	r3, [sp, #8]
 801b3b0:	68fb      	ldr	r3, [r7, #12]
 801b3b2:	9301      	str	r3, [sp, #4]
 801b3b4:	693b      	ldr	r3, [r7, #16]
 801b3b6:	9300      	str	r3, [sp, #0]
 801b3b8:	697b      	ldr	r3, [r7, #20]
 801b3ba:	f7ff ff19 	bl	801b1f0 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE>
 801b3be:	4603      	mov	r3, r0
}
 801b3c0:	4618      	mov	r0, r3
 801b3c2:	3724      	adds	r7, #36	; 0x24
 801b3c4:	46bd      	mov	sp, r7
 801b3c6:	bd90      	pop	{r4, r7, pc}
 801b3c8:	080243e4 	.word	0x080243e4
 801b3cc:	080243f4 	.word	0x080243f4
 801b3d0:	08024384 	.word	0x08024384
 801b3d4:	080243c8 	.word	0x080243c8
 801b3d8:	08024400 	.word	0x08024400

0801b3dc <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_>:

TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
                               const OpData& data, const TfLiteTensor* input,
                               const TfLiteTensor* filter,
                               const TfLiteTensor* bias, TfLiteTensor* output) {
 801b3dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b3de:	b0ad      	sub	sp, #180	; 0xb4
 801b3e0:	af06      	add	r7, sp, #24
 801b3e2:	60f8      	str	r0, [r7, #12]
 801b3e4:	60b9      	str	r1, [r7, #8]
 801b3e6:	607a      	str	r2, [r7, #4]
 801b3e8:	603b      	str	r3, [r7, #0]
  tflite::FullyConnectedParams op_params;
  op_params.input_offset = -input->params.zero_point;
 801b3ea:	683b      	ldr	r3, [r7, #0]
 801b3ec:	691b      	ldr	r3, [r3, #16]
 801b3ee:	425b      	negs	r3, r3
 801b3f0:	613b      	str	r3, [r7, #16]
  op_params.weights_offset = -filter->params.zero_point;
 801b3f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801b3f6:	691b      	ldr	r3, [r3, #16]
 801b3f8:	425b      	negs	r3, r3
 801b3fa:	617b      	str	r3, [r7, #20]
  op_params.output_offset = output->params.zero_point;
 801b3fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801b400:	691b      	ldr	r3, [r3, #16]
 801b402:	61bb      	str	r3, [r7, #24]
  op_params.output_multiplier = data.output_multiplier;
 801b404:	687b      	ldr	r3, [r7, #4]
 801b406:	681b      	ldr	r3, [r3, #0]
 801b408:	61fb      	str	r3, [r7, #28]
  // TODO(b/138810107): Figure out whether output shift should be inverted
  op_params.output_shift = -data.output_shift;
 801b40a:	687b      	ldr	r3, [r7, #4]
 801b40c:	685b      	ldr	r3, [r3, #4]
 801b40e:	425b      	negs	r3, r3
 801b410:	623b      	str	r3, [r7, #32]
  op_params.quantized_activation_min = data.output_activation_min;
 801b412:	687b      	ldr	r3, [r7, #4]
 801b414:	689b      	ldr	r3, [r3, #8]
 801b416:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.quantized_activation_max = data.output_activation_max;
 801b418:	687b      	ldr	r3, [r7, #4]
 801b41a:	68db      	ldr	r3, [r3, #12]
 801b41c:	62bb      	str	r3, [r7, #40]	; 0x28

  reference_integer_ops::FullyConnected(
      op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
 801b41e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b422:	6839      	ldr	r1, [r7, #0]
 801b424:	4618      	mov	r0, r3
 801b426:	f7fd fded 	bl	8019004 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::FullyConnected(
 801b42a:	6838      	ldr	r0, [r7, #0]
 801b42c:	f7fd fe65 	bl	80190fa <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 801b430:	4606      	mov	r6, r0
      GetTensorShape(filter), GetTensorData<int8_t>(filter),
 801b432:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801b436:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 801b43a:	4618      	mov	r0, r3
 801b43c:	f7fd fde2 	bl	8019004 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::FullyConnected(
 801b440:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 801b444:	f7fd fe59 	bl	80190fa <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 801b448:	4604      	mov	r4, r0
      GetTensorShape(bias), GetTensorData<int32_t>(bias),
 801b44a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801b44e:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 801b452:	4618      	mov	r0, r3
 801b454:	f7fd fdd6 	bl	8019004 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::FullyConnected(
 801b458:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 801b45c:	f7fe f8d7 	bl	801960e <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 801b460:	4605      	mov	r5, r0
      GetTensorShape(output), GetTensorData<int8_t>(output));
 801b462:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801b466:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 801b46a:	4618      	mov	r0, r3
 801b46c:	f7fd fdca 	bl	8019004 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::FullyConnected(
 801b470:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 801b474:	f7fd fe52 	bl	801911c <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 801b478:	4603      	mov	r3, r0
 801b47a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801b47e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801b482:	f107 0010 	add.w	r0, r7, #16
 801b486:	9304      	str	r3, [sp, #16]
 801b488:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801b48c:	9303      	str	r3, [sp, #12]
 801b48e:	9502      	str	r5, [sp, #8]
 801b490:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801b494:	9301      	str	r3, [sp, #4]
 801b496:	9400      	str	r4, [sp, #0]
 801b498:	4613      	mov	r3, r2
 801b49a:	4632      	mov	r2, r6
 801b49c:	f7ff fdd4 	bl	801b048 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa>
      GetTensorShape(output), GetTensorData<int8_t>(output));
 801b4a0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801b4a4:	4618      	mov	r0, r3
 801b4a6:	f7fd fcd6 	bl	8018e56 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(bias), GetTensorData<int32_t>(bias),
 801b4aa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801b4ae:	4618      	mov	r0, r3
 801b4b0:	f7fd fcd1 	bl	8018e56 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(filter), GetTensorData<int8_t>(filter),
 801b4b4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801b4b8:	4618      	mov	r0, r3
 801b4ba:	f7fd fccc 	bl	8018e56 <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
 801b4be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b4c2:	4618      	mov	r0, r3
 801b4c4:	f7fd fcc7 	bl	8018e56 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
 801b4c8:	2300      	movs	r3, #0
}
 801b4ca:	4618      	mov	r0, r3
 801b4cc:	379c      	adds	r7, #156	; 0x9c
 801b4ce:	46bd      	mov	sp, r7
 801b4d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801b4d4 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_>:

TfLiteStatus EvalQuantized(TfLiteContext* context, TfLiteNode* node,
                           const OpData& data, const TfLiteTensor* input,
                           const TfLiteTensor* filter, const TfLiteTensor* bias,
                           TfLiteTensor* output) {
 801b4d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b4d6:	b0c9      	sub	sp, #292	; 0x124
 801b4d8:	af06      	add	r7, sp, #24
 801b4da:	60f8      	str	r0, [r7, #12]
 801b4dc:	f107 0008 	add.w	r0, r7, #8
 801b4e0:	6001      	str	r1, [r0, #0]
 801b4e2:	1d39      	adds	r1, r7, #4
 801b4e4:	600a      	str	r2, [r1, #0]
 801b4e6:	463a      	mov	r2, r7
 801b4e8:	6013      	str	r3, [r2, #0]
  const int32_t input_offset = -input->params.zero_point;
 801b4ea:	463b      	mov	r3, r7
 801b4ec:	681b      	ldr	r3, [r3, #0]
 801b4ee:	691b      	ldr	r3, [r3, #16]
 801b4f0:	425b      	negs	r3, r3
 801b4f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  const int32_t filter_offset = -filter->params.zero_point;
 801b4f6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801b4fa:	691b      	ldr	r3, [r3, #16]
 801b4fc:	425b      	negs	r3, r3
 801b4fe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  const int32_t output_offset = output->params.zero_point;
 801b502:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801b506:	691b      	ldr	r3, [r3, #16]
 801b508:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

  tflite::FullyConnectedParams op_params;
  op_params.input_offset = input_offset;
 801b50c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801b510:	617b      	str	r3, [r7, #20]
  op_params.weights_offset = filter_offset;
 801b512:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801b516:	61bb      	str	r3, [r7, #24]
  op_params.output_offset = output_offset;
 801b518:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801b51c:	61fb      	str	r3, [r7, #28]
  op_params.output_multiplier = data.output_multiplier;
 801b51e:	1d3b      	adds	r3, r7, #4
 801b520:	681b      	ldr	r3, [r3, #0]
 801b522:	681b      	ldr	r3, [r3, #0]
 801b524:	623b      	str	r3, [r7, #32]
  // Legacy ops used mixed left and right shifts. Now all are +ve-means-left.
  op_params.output_shift = -data.output_shift;
 801b526:	1d3b      	adds	r3, r7, #4
 801b528:	681b      	ldr	r3, [r3, #0]
 801b52a:	685b      	ldr	r3, [r3, #4]
 801b52c:	425b      	negs	r3, r3
 801b52e:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.quantized_activation_min = data.output_activation_min;
 801b530:	1d3b      	adds	r3, r7, #4
 801b532:	681b      	ldr	r3, [r3, #0]
 801b534:	689b      	ldr	r3, [r3, #8]
 801b536:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
 801b538:	1d3b      	adds	r3, r7, #4
 801b53a:	681b      	ldr	r3, [r3, #0]
 801b53c:	68db      	ldr	r3, [r3, #12]
 801b53e:	62fb      	str	r3, [r7, #44]	; 0x2c
  reference_ops::FullyConnected(                                       \
      op_params, GetTensorShape(input), GetTensorData<uint8_t>(input), \
      GetTensorShape(filter), GetTensorData<uint8_t>(filter),          \
      GetTensorShape(bias), GetTensorData<int32_t>(bias),              \
      GetTensorShape(output), GetTensorData<output_data_type>(output))
  switch (output->type) {
 801b540:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801b544:	781b      	ldrb	r3, [r3, #0]
 801b546:	2b03      	cmp	r3, #3
 801b548:	d002      	beq.n	801b550 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x7c>
 801b54a:	2b07      	cmp	r3, #7
 801b54c:	d058      	beq.n	801b600 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x12c>
 801b54e:	e0af      	b.n	801b6b0 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x1dc>
    case kTfLiteUInt8:
      TF_LITE_FULLY_CONNECTED(uint8_t);
 801b550:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801b554:	463b      	mov	r3, r7
 801b556:	6819      	ldr	r1, [r3, #0]
 801b558:	4610      	mov	r0, r2
 801b55a:	f7fd fd53 	bl	8019004 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 801b55e:	463b      	mov	r3, r7
 801b560:	6818      	ldr	r0, [r3, #0]
 801b562:	f7fd fdec 	bl	801913e <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 801b566:	4606      	mov	r6, r0
 801b568:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801b56c:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 801b570:	4618      	mov	r0, r3
 801b572:	f7fd fd47 	bl	8019004 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 801b576:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 801b57a:	f7fd fde0 	bl	801913e <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 801b57e:	4604      	mov	r4, r0
 801b580:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801b584:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 801b588:	4618      	mov	r0, r3
 801b58a:	f7fd fd3b 	bl	8019004 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 801b58e:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 801b592:	f7fe f83c 	bl	801960e <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 801b596:	4605      	mov	r5, r0
 801b598:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801b59c:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 801b5a0:	4618      	mov	r0, r3
 801b5a2:	f7fd fd2f 	bl	8019004 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 801b5a6:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 801b5aa:	f7fd fdd9 	bl	8019160 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 801b5ae:	4603      	mov	r3, r0
 801b5b0:	f107 0254 	add.w	r2, r7, #84	; 0x54
 801b5b4:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 801b5b8:	f107 0014 	add.w	r0, r7, #20
 801b5bc:	9304      	str	r3, [sp, #16]
 801b5be:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801b5c2:	9303      	str	r3, [sp, #12]
 801b5c4:	9502      	str	r5, [sp, #8]
 801b5c6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801b5ca:	9301      	str	r3, [sp, #4]
 801b5cc:	9400      	str	r4, [sp, #0]
 801b5ce:	4613      	mov	r3, r2
 801b5d0:	4632      	mov	r2, r6
 801b5d2:	f7ff fb9d 	bl	801ad10 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph>
 801b5d6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801b5da:	4618      	mov	r0, r3
 801b5dc:	f7fd fc3b 	bl	8018e56 <_ZN6tflite12RuntimeShapeD1Ev>
 801b5e0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801b5e4:	4618      	mov	r0, r3
 801b5e6:	f7fd fc36 	bl	8018e56 <_ZN6tflite12RuntimeShapeD1Ev>
 801b5ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801b5ee:	4618      	mov	r0, r3
 801b5f0:	f7fd fc31 	bl	8018e56 <_ZN6tflite12RuntimeShapeD1Ev>
 801b5f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b5f8:	4618      	mov	r0, r3
 801b5fa:	f7fd fc2c 	bl	8018e56 <_ZN6tflite12RuntimeShapeD1Ev>
      break;
 801b5fe:	e069      	b.n	801b6d4 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x200>
    case kTfLiteInt16:
      TF_LITE_FULLY_CONNECTED(int16_t);
 801b600:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 801b604:	463b      	mov	r3, r7
 801b606:	6819      	ldr	r1, [r3, #0]
 801b608:	4610      	mov	r0, r2
 801b60a:	f7fd fcfb 	bl	8019004 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 801b60e:	463b      	mov	r3, r7
 801b610:	6818      	ldr	r0, [r3, #0]
 801b612:	f7fd fd94 	bl	801913e <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 801b616:	4606      	mov	r6, r0
 801b618:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 801b61c:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 801b620:	4618      	mov	r0, r3
 801b622:	f7fd fcef 	bl	8019004 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 801b626:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 801b62a:	f7fd fd88 	bl	801913e <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 801b62e:	4604      	mov	r4, r0
 801b630:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801b634:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 801b638:	4618      	mov	r0, r3
 801b63a:	f7fd fce3 	bl	8019004 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 801b63e:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 801b642:	f7fd ffe4 	bl	801960e <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 801b646:	4605      	mov	r5, r0
 801b648:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 801b64c:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 801b650:	4618      	mov	r0, r3
 801b652:	f7fd fcd7 	bl	8019004 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 801b656:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 801b65a:	f000 f937 	bl	801b8cc <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor>
 801b65e:	4603      	mov	r3, r0
 801b660:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 801b664:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 801b668:	f107 0014 	add.w	r0, r7, #20
 801b66c:	9304      	str	r3, [sp, #16]
 801b66e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 801b672:	9303      	str	r3, [sp, #12]
 801b674:	9502      	str	r5, [sp, #8]
 801b676:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801b67a:	9301      	str	r3, [sp, #4]
 801b67c:	9400      	str	r4, [sp, #0]
 801b67e:	4613      	mov	r3, r2
 801b680:	4632      	mov	r2, r6
 801b682:	f7ff fc14 	bl	801aeae <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps>
 801b686:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 801b68a:	4618      	mov	r0, r3
 801b68c:	f7fd fbe3 	bl	8018e56 <_ZN6tflite12RuntimeShapeD1Ev>
 801b690:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801b694:	4618      	mov	r0, r3
 801b696:	f7fd fbde 	bl	8018e56 <_ZN6tflite12RuntimeShapeD1Ev>
 801b69a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 801b69e:	4618      	mov	r0, r3
 801b6a0:	f7fd fbd9 	bl	8018e56 <_ZN6tflite12RuntimeShapeD1Ev>
 801b6a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801b6a8:	4618      	mov	r0, r3
 801b6aa:	f7fd fbd4 	bl	8018e56 <_ZN6tflite12RuntimeShapeD1Ev>
      break;
 801b6ae:	e011      	b.n	801b6d4 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x200>
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801b6b0:	68fb      	ldr	r3, [r7, #12]
 801b6b2:	695c      	ldr	r4, [r3, #20]
 801b6b4:	68fd      	ldr	r5, [r7, #12]
 801b6b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801b6ba:	781b      	ldrb	r3, [r3, #0]
 801b6bc:	4618      	mov	r0, r3
 801b6be:	f7e9 fe27 	bl	8005310 <TfLiteTypeGetName>
 801b6c2:	4602      	mov	r2, r0
 801b6c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801b6c8:	781b      	ldrb	r3, [r3, #0]
 801b6ca:	4905      	ldr	r1, [pc, #20]	; (801b6e0 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x20c>)
 801b6cc:	4628      	mov	r0, r5
 801b6ce:	47a0      	blx	r4
                         TfLiteTypeGetName(output->type), output->type);
      return kTfLiteError;
 801b6d0:	2301      	movs	r3, #1
 801b6d2:	e000      	b.n	801b6d6 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x202>
  }

  return kTfLiteOk;
 801b6d4:	2300      	movs	r3, #0
}
 801b6d6:	4618      	mov	r0, r3
 801b6d8:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 801b6dc:	46bd      	mov	sp, r7
 801b6de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b6e0:	08024478 	.word	0x08024478

0801b6e4 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_>:

TfLiteStatus EvalFloat(TfLiteContext* context, TfLiteNode* node,
                       TfLiteFusedActivation activation,
                       const TfLiteTensor* input, const TfLiteTensor* filter,
                       const TfLiteTensor* bias, TfLiteTensor* output) {
 801b6e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b6e6:	b0af      	sub	sp, #188	; 0xbc
 801b6e8:	af06      	add	r7, sp, #24
 801b6ea:	60f8      	str	r0, [r7, #12]
 801b6ec:	60b9      	str	r1, [r7, #8]
 801b6ee:	603b      	str	r3, [r7, #0]
 801b6f0:	4613      	mov	r3, r2
 801b6f2:	71fb      	strb	r3, [r7, #7]
  float output_activation_min, output_activation_max;
  CalculateActivationRange(activation, &output_activation_min,
 801b6f4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801b6f8:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 801b6fc:	79fb      	ldrb	r3, [r7, #7]
 801b6fe:	4618      	mov	r0, r3
 801b700:	f7fd fec8 	bl	8019494 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &output_activation_max);
  tflite::FullyConnectedParams op_params;
  op_params.float_activation_min = output_activation_min;
 801b704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b706:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.float_activation_max = output_activation_max;
 801b708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b70a:	633b      	str	r3, [r7, #48]	; 0x30
  tflite::reference_ops::FullyConnected(
      op_params, GetTensorShape(input), GetTensorData<float>(input),
 801b70c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b710:	6839      	ldr	r1, [r7, #0]
 801b712:	4618      	mov	r0, r3
 801b714:	f7fd fc76 	bl	8019004 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::FullyConnected(
 801b718:	6838      	ldr	r0, [r7, #0]
 801b71a:	f7fd fccc 	bl	80190b6 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 801b71e:	4606      	mov	r6, r0
      GetTensorShape(filter), GetTensorData<float>(filter),
 801b720:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801b724:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 801b728:	4618      	mov	r0, r3
 801b72a:	f7fd fc6b 	bl	8019004 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::FullyConnected(
 801b72e:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 801b732:	f7fd fcc0 	bl	80190b6 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 801b736:	4604      	mov	r4, r0
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
 801b738:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801b73c:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 801b740:	4618      	mov	r0, r3
 801b742:	f7fd fc5f 	bl	8019004 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::FullyConnected(
 801b746:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 801b74a:	f7fd fcb4 	bl	80190b6 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 801b74e:	4605      	mov	r5, r0
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
 801b750:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801b754:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 801b758:	4618      	mov	r0, r3
 801b75a:	f7fd fc53 	bl	8019004 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::FullyConnected(
 801b75e:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 801b762:	f7fd fcb9 	bl	80190d8 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 801b766:	4603      	mov	r3, r0
 801b768:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801b76c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801b770:	f107 0010 	add.w	r0, r7, #16
 801b774:	9304      	str	r3, [sp, #16]
 801b776:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801b77a:	9303      	str	r3, [sp, #12]
 801b77c:	9502      	str	r5, [sp, #8]
 801b77e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801b782:	9301      	str	r3, [sp, #4]
 801b784:	9400      	str	r4, [sp, #0]
 801b786:	4613      	mov	r3, r2
 801b788:	4632      	mov	r2, r6
 801b78a:	f7ff fa2b 	bl	801abe4 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
 801b78e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801b792:	4618      	mov	r0, r3
 801b794:	f7fd fb5f 	bl	8018e56 <_ZN6tflite12RuntimeShapeD1Ev>
 801b798:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801b79c:	4618      	mov	r0, r3
 801b79e:	f7fd fb5a 	bl	8018e56 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(filter), GetTensorData<float>(filter),
 801b7a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801b7a6:	4618      	mov	r0, r3
 801b7a8:	f7fd fb55 	bl	8018e56 <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, GetTensorShape(input), GetTensorData<float>(input),
 801b7ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b7b0:	4618      	mov	r0, r3
 801b7b2:	f7fd fb50 	bl	8018e56 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<float>(output));
  return kTfLiteOk;
 801b7b6:	2300      	movs	r3, #0
}
 801b7b8:	4618      	mov	r0, r3
 801b7ba:	37a4      	adds	r7, #164	; 0xa4
 801b7bc:	46bd      	mov	sp, r7
 801b7be:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b7c0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 801b7c0:	b5b0      	push	{r4, r5, r7, lr}
 801b7c2:	b08c      	sub	sp, #48	; 0x30
 801b7c4:	af04      	add	r7, sp, #16
 801b7c6:	6078      	str	r0, [r7, #4]
 801b7c8:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 801b7ca:	683b      	ldr	r3, [r7, #0]
 801b7cc:	695b      	ldr	r3, [r3, #20]
 801b7ce:	2b00      	cmp	r3, #0
 801b7d0:	d101      	bne.n	801b7d6 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x16>
 801b7d2:	f003 fb3d 	bl	801ee50 <abort>
  const auto* params =
 801b7d6:	683b      	ldr	r3, [r7, #0]
 801b7d8:	695b      	ldr	r3, [r3, #20]
 801b7da:	61fb      	str	r3, [r7, #28]
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 801b7dc:	687b      	ldr	r3, [r7, #4]
 801b7de:	2200      	movs	r2, #0
 801b7e0:	6839      	ldr	r1, [r7, #0]
 801b7e2:	4618      	mov	r0, r3
 801b7e4:	f7fd fc2c 	bl	8019040 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801b7e8:	61b8      	str	r0, [r7, #24]
  const TfLiteTensor* filter = GetInput(context, node, kWeightsTensor);
 801b7ea:	687b      	ldr	r3, [r7, #4]
 801b7ec:	2201      	movs	r2, #1
 801b7ee:	6839      	ldr	r1, [r7, #0]
 801b7f0:	4618      	mov	r0, r3
 801b7f2:	f7fd fc25 	bl	8019040 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801b7f6:	6178      	str	r0, [r7, #20]
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
 801b7f8:	687b      	ldr	r3, [r7, #4]
 801b7fa:	2202      	movs	r2, #2
 801b7fc:	6839      	ldr	r1, [r7, #0]
 801b7fe:	4618      	mov	r0, r3
 801b800:	f7fe fc3e 	bl	801a080 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei>
 801b804:	6138      	str	r0, [r7, #16]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 801b806:	687b      	ldr	r3, [r7, #4]
 801b808:	2200      	movs	r2, #0
 801b80a:	6839      	ldr	r1, [r7, #0]
 801b80c:	4618      	mov	r0, r3
 801b80e:	f7fd fc2f 	bl	8019070 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 801b812:	60f8      	str	r0, [r7, #12]

  TFLITE_DCHECK(node->user_data != nullptr);
 801b814:	683b      	ldr	r3, [r7, #0]
 801b816:	691b      	ldr	r3, [r3, #16]
 801b818:	2b00      	cmp	r3, #0
 801b81a:	d101      	bne.n	801b820 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x60>
 801b81c:	f003 fb18 	bl	801ee50 <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 801b820:	683b      	ldr	r3, [r7, #0]
 801b822:	691b      	ldr	r3, [r3, #16]
 801b824:	60bb      	str	r3, [r7, #8]

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 801b826:	69bb      	ldr	r3, [r7, #24]
 801b828:	781b      	ldrb	r3, [r3, #0]
 801b82a:	2b03      	cmp	r3, #3
 801b82c:	d020      	beq.n	801b870 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xb0>
 801b82e:	2b09      	cmp	r3, #9
 801b830:	d010      	beq.n	801b854 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x94>
 801b832:	2b01      	cmp	r3, #1
 801b834:	d12a      	bne.n	801b88c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xcc>
    case kTfLiteFloat32:
      return EvalFloat(context, node, params->activation, input, filter, bias,
 801b836:	6878      	ldr	r0, [r7, #4]
 801b838:	69fb      	ldr	r3, [r7, #28]
 801b83a:	781a      	ldrb	r2, [r3, #0]
                       output);
 801b83c:	68fb      	ldr	r3, [r7, #12]
 801b83e:	9302      	str	r3, [sp, #8]
 801b840:	693b      	ldr	r3, [r7, #16]
 801b842:	9301      	str	r3, [sp, #4]
 801b844:	697b      	ldr	r3, [r7, #20]
 801b846:	9300      	str	r3, [sp, #0]
 801b848:	69bb      	ldr	r3, [r7, #24]
 801b84a:	6839      	ldr	r1, [r7, #0]
 801b84c:	f7ff ff4a 	bl	801b6e4 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_>
 801b850:	4603      	mov	r3, r0
 801b852:	e02a      	b.n	801b8aa <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xea>
    case kTfLiteInt8:
      return EvalQuantizedInt8(context, node, data, input, filter, bias,
 801b854:	6878      	ldr	r0, [r7, #4]
                               output);
 801b856:	68fb      	ldr	r3, [r7, #12]
 801b858:	9302      	str	r3, [sp, #8]
 801b85a:	693b      	ldr	r3, [r7, #16]
 801b85c:	9301      	str	r3, [sp, #4]
 801b85e:	697b      	ldr	r3, [r7, #20]
 801b860:	9300      	str	r3, [sp, #0]
 801b862:	69bb      	ldr	r3, [r7, #24]
 801b864:	68ba      	ldr	r2, [r7, #8]
 801b866:	6839      	ldr	r1, [r7, #0]
 801b868:	f7ff fdb8 	bl	801b3dc <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_>
 801b86c:	4603      	mov	r3, r0
 801b86e:	e01c      	b.n	801b8aa <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xea>

    case kTfLiteUInt8:
      return EvalQuantized(context, node, data, input, filter, bias, output);
 801b870:	6878      	ldr	r0, [r7, #4]
 801b872:	68fb      	ldr	r3, [r7, #12]
 801b874:	9302      	str	r3, [sp, #8]
 801b876:	693b      	ldr	r3, [r7, #16]
 801b878:	9301      	str	r3, [sp, #4]
 801b87a:	697b      	ldr	r3, [r7, #20]
 801b87c:	9300      	str	r3, [sp, #0]
 801b87e:	69bb      	ldr	r3, [r7, #24]
 801b880:	68ba      	ldr	r2, [r7, #8]
 801b882:	6839      	ldr	r1, [r7, #0]
 801b884:	f7ff fe26 	bl	801b4d4 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_>
 801b888:	4603      	mov	r3, r0
 801b88a:	e00e      	b.n	801b8aa <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xea>

    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801b88c:	687b      	ldr	r3, [r7, #4]
 801b88e:	695c      	ldr	r4, [r3, #20]
 801b890:	687d      	ldr	r5, [r7, #4]
 801b892:	69bb      	ldr	r3, [r7, #24]
 801b894:	781b      	ldrb	r3, [r3, #0]
 801b896:	4618      	mov	r0, r3
 801b898:	f7e9 fd3a 	bl	8005310 <TfLiteTypeGetName>
 801b89c:	4602      	mov	r2, r0
 801b89e:	69bb      	ldr	r3, [r7, #24]
 801b8a0:	781b      	ldrb	r3, [r3, #0]
 801b8a2:	4904      	ldr	r1, [pc, #16]	; (801b8b4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xf4>)
 801b8a4:	4628      	mov	r0, r5
 801b8a6:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801b8a8:	2301      	movs	r3, #1
  }
  return kTfLiteOk;
}
 801b8aa:	4618      	mov	r0, r3
 801b8ac:	3720      	adds	r7, #32
 801b8ae:	46bd      	mov	sp, r7
 801b8b0:	bdb0      	pop	{r4, r5, r7, pc}
 801b8b2:	bf00      	nop
 801b8b4:	08024478 	.word	0x08024478

0801b8b8 <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv>:

}  // namespace fully_connected

TfLiteRegistration* Register_FULLY_CONNECTED() {
 801b8b8:	b480      	push	{r7}
 801b8ba:	af00      	add	r7, sp, #0
                                 /*invoke=*/fully_connected::Eval,
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
 801b8bc:	4b02      	ldr	r3, [pc, #8]	; (801b8c8 <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv+0x10>)
}
 801b8be:	4618      	mov	r0, r3
 801b8c0:	46bd      	mov	sp, r7
 801b8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8c6:	4770      	bx	lr
 801b8c8:	20016ce8 	.word	0x20016ce8

0801b8cc <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
 801b8cc:	b480      	push	{r7}
 801b8ce:	b083      	sub	sp, #12
 801b8d0:	af00      	add	r7, sp, #0
 801b8d2:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 801b8d4:	687b      	ldr	r3, [r7, #4]
 801b8d6:	2b00      	cmp	r3, #0
 801b8d8:	d002      	beq.n	801b8e0 <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor+0x14>
 801b8da:	687b      	ldr	r3, [r7, #4]
 801b8dc:	685b      	ldr	r3, [r3, #4]
 801b8de:	e000      	b.n	801b8e2 <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor+0x16>
 801b8e0:	2300      	movs	r3, #0
}
 801b8e2:	4618      	mov	r0, r3
 801b8e4:	370c      	adds	r7, #12
 801b8e6:	46bd      	mov	sp, r7
 801b8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8ec:	4770      	bx	lr

0801b8ee <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
 801b8ee:	b590      	push	{r4, r7, lr}
 801b8f0:	b087      	sub	sp, #28
 801b8f2:	af00      	add	r7, sp, #0
 801b8f4:	60f8      	str	r0, [r7, #12]
 801b8f6:	60b9      	str	r1, [r7, #8]
 801b8f8:	607a      	str	r2, [r7, #4]
  const int dims_count = shape.DimensionsCount();
 801b8fa:	68f8      	ldr	r0, [r7, #12]
 801b8fc:	f7fd fac1 	bl	8018e82 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801b900:	6138      	str	r0, [r7, #16]
  for (int i = 0; i < dims_count; ++i) {
 801b902:	2300      	movs	r3, #0
 801b904:	617b      	str	r3, [r7, #20]
 801b906:	697a      	ldr	r2, [r7, #20]
 801b908:	693b      	ldr	r3, [r7, #16]
 801b90a:	429a      	cmp	r2, r3
 801b90c:	da15      	bge.n	801b93a <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x4c>
    if (i != skip_dim) {
 801b90e:	697a      	ldr	r2, [r7, #20]
 801b910:	68bb      	ldr	r3, [r7, #8]
 801b912:	429a      	cmp	r2, r3
 801b914:	d00d      	beq.n	801b932 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 801b916:	6979      	ldr	r1, [r7, #20]
 801b918:	68f8      	ldr	r0, [r7, #12]
 801b91a:	f7fd fabe 	bl	8018e9a <_ZNK6tflite12RuntimeShape4DimsEi>
 801b91e:	4604      	mov	r4, r0
 801b920:	6979      	ldr	r1, [r7, #20]
 801b922:	6878      	ldr	r0, [r7, #4]
 801b924:	f7fd fab9 	bl	8018e9a <_ZNK6tflite12RuntimeShape4DimsEi>
 801b928:	4603      	mov	r3, r0
 801b92a:	429c      	cmp	r4, r3
 801b92c:	d001      	beq.n	801b932 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
 801b92e:	f003 fa8f 	bl	801ee50 <abort>
  for (int i = 0; i < dims_count; ++i) {
 801b932:	697b      	ldr	r3, [r7, #20]
 801b934:	3301      	adds	r3, #1
 801b936:	617b      	str	r3, [r7, #20]
 801b938:	e7e5      	b.n	801b906 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x18>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
 801b93a:	68b9      	ldr	r1, [r7, #8]
 801b93c:	68f8      	ldr	r0, [r7, #12]
 801b93e:	f7ff f91b 	bl	801ab78 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 801b942:	4603      	mov	r3, r0
}
 801b944:	4618      	mov	r0, r3
 801b946:	371c      	adds	r7, #28
 801b948:	46bd      	mov	sp, r7
 801b94a:	bd90      	pop	{r4, r7, pc}

0801b94c <_ZN6tflite17CountLeadingZerosImEEiT_>:
  int32_t result = x >> total_shift;
  return result;
}

template <typename T>
int CountLeadingZeros(T integer_input) {
 801b94c:	b480      	push	{r7}
 801b94e:	b083      	sub	sp, #12
 801b950:	af00      	add	r7, sp, #0
 801b952:	6078      	str	r0, [r7, #4]
  static_assert(std::is_unsigned<T>::value,
                "Only unsigned integer types handled.");
#if defined(__GNUC__)
  return integer_input ? __builtin_clz(integer_input)
 801b954:	687b      	ldr	r3, [r7, #4]
 801b956:	2b00      	cmp	r3, #0
 801b958:	d003      	beq.n	801b962 <_ZN6tflite17CountLeadingZerosImEEiT_+0x16>
 801b95a:	687b      	ldr	r3, [r7, #4]
 801b95c:	fab3 f383 	clz	r3, r3
                       : std::numeric_limits<T>::digits;
 801b960:	e000      	b.n	801b964 <_ZN6tflite17CountLeadingZerosImEEiT_+0x18>
  return integer_input ? __builtin_clz(integer_input)
 801b962:	2320      	movs	r3, #32
    integer_input <<= 1;
    ++leading_zeros;
  }
  return leading_zeros;
#endif
}
 801b964:	4618      	mov	r0, r3
 801b966:	370c      	adds	r7, #12
 801b968:	46bd      	mov	sp, r7
 801b96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b96e:	4770      	bx	lr

0801b970 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>:
                 min_bound),
        max_bound)));
  }

  RawType raw() const { return i_; }
  RawType& raw() { return i_; }
 801b970:	b480      	push	{r7}
 801b972:	b083      	sub	sp, #12
 801b974:	af00      	add	r7, sp, #0
 801b976:	6078      	str	r0, [r7, #4]
 801b978:	687b      	ldr	r3, [r7, #4]
 801b97a:	4618      	mov	r0, r3
 801b97c:	370c      	adds	r7, #12
 801b97e:	46bd      	mov	sp, r7
 801b980:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b984:	4770      	bx	lr

0801b986 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 801b986:	b590      	push	{r4, r7, lr}
 801b988:	b085      	sub	sp, #20
 801b98a:	af00      	add	r7, sp, #0
 801b98c:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 801b98e:	f107 030c 	add.w	r3, r7, #12
 801b992:	4618      	mov	r0, r3
 801b994:	f7ff ffec 	bl	801b970 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801b998:	4604      	mov	r4, r0
 801b99a:	6878      	ldr	r0, [r7, #4]
 801b99c:	f7fd fdbc 	bl	8019518 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801b9a0:	4603      	mov	r3, r0
 801b9a2:	6023      	str	r3, [r4, #0]
    return retval;
 801b9a4:	68fb      	ldr	r3, [r7, #12]
  }
 801b9a6:	4618      	mov	r0, r3
 801b9a8:	3714      	adds	r7, #20
 801b9aa:	46bd      	mov	sp, r7
 801b9ac:	bd90      	pop	{r4, r7, pc}

0801b9ae <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>:
// fixed-point value, regardless of the actual Scalar type. This allows
// writing generic code that applies just as well to the 32-bit and 16-bit
// cases. In the 16-bit case, the raw integer value is internally
// rounding-shifted by 16 bits to the right.
template <typename FixedPointType>
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 801b9ae:	b580      	push	{r7, lr}
 801b9b0:	b082      	sub	sp, #8
 801b9b2:	af00      	add	r7, sp, #0
 801b9b4:	6078      	str	r0, [r7, #4]
    std::int32_t int32_value) {
  typedef typename FixedPointType::ScalarRawType ScalarRawType;
  static constexpr int ScalarTypeBits = 8 * sizeof(ScalarRawType);
  return static_cast<ScalarRawType>(
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 801b9b6:	2100      	movs	r1, #0
 801b9b8:	6878      	ldr	r0, [r7, #4]
 801b9ba:	f7fd fcf9 	bl	80193b0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801b9be:	4603      	mov	r3, r0
}
 801b9c0:	4618      	mov	r0, r3
 801b9c2:	3708      	adds	r7, #8
 801b9c4:	46bd      	mov	sp, r7
 801b9c6:	bd80      	pop	{r7, pc}

0801b9c8 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 801b9c8:	b580      	push	{r7, lr}
 801b9ca:	b082      	sub	sp, #8
 801b9cc:	af00      	add	r7, sp, #0
 801b9ce:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801b9d0:	6878      	ldr	r0, [r7, #4]
 801b9d2:	f000 f813 	bl	801b9fc <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>
 801b9d6:	4603      	mov	r3, r0
}
 801b9d8:	4618      	mov	r0, r3
 801b9da:	3708      	adds	r7, #8
 801b9dc:	46bd      	mov	sp, r7
 801b9de:	bd80      	pop	{r7, pc}

0801b9e0 <_ZN8gemmlowp3SubIlEET_S1_S1_>:
tIntegerType Sub(tIntegerType a, tIntegerType b) {
 801b9e0:	b480      	push	{r7}
 801b9e2:	b083      	sub	sp, #12
 801b9e4:	af00      	add	r7, sp, #0
 801b9e6:	6078      	str	r0, [r7, #4]
 801b9e8:	6039      	str	r1, [r7, #0]
  return a - b;
 801b9ea:	687a      	ldr	r2, [r7, #4]
 801b9ec:	683b      	ldr	r3, [r7, #0]
 801b9ee:	1ad3      	subs	r3, r2, r3
}
 801b9f0:	4618      	mov	r0, r3
 801b9f2:	370c      	adds	r7, #12
 801b9f4:	46bd      	mov	sp, r7
 801b9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9fa:	4770      	bx	lr

0801b9fc <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801b9fc:	b580      	push	{r7, lr}
 801b9fe:	b082      	sub	sp, #8
 801ba00:	af00      	add	r7, sp, #0
 801ba02:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 801ba04:	2101      	movs	r1, #1
 801ba06:	6878      	ldr	r0, [r7, #4]
 801ba08:	f7fd fcd2 	bl	80193b0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801ba0c:	4603      	mov	r3, r0
  }
 801ba0e:	4618      	mov	r0, r3
 801ba10:	3708      	adds	r7, #8
 801ba12:	46bd      	mov	sp, r7
 801ba14:	bd80      	pop	{r7, pc}

0801ba16 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>:
tIntegerType ShiftLeft(tIntegerType a, int offset) {
 801ba16:	b490      	push	{r4, r7}
 801ba18:	b088      	sub	sp, #32
 801ba1a:	af00      	add	r7, sp, #0
 801ba1c:	6078      	str	r0, [r7, #4]
 801ba1e:	6039      	str	r1, [r7, #0]
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
 801ba20:	687b      	ldr	r3, [r7, #4]
 801ba22:	ea4f 74e3 	mov.w	r4, r3, asr #31
 801ba26:	e9c7 3406 	strd	r3, r4, [r7, #24]
  const std::int64_t wide_shifted = wide_a * (1 << offset);
 801ba2a:	2201      	movs	r2, #1
 801ba2c:	683b      	ldr	r3, [r7, #0]
 801ba2e:	fa02 f303 	lsl.w	r3, r2, r3
 801ba32:	ea4f 74e3 	mov.w	r4, r3, asr #31
 801ba36:	69fa      	ldr	r2, [r7, #28]
 801ba38:	fb03 f102 	mul.w	r1, r3, r2
 801ba3c:	69ba      	ldr	r2, [r7, #24]
 801ba3e:	fb04 f202 	mul.w	r2, r4, r2
 801ba42:	440a      	add	r2, r1
 801ba44:	69b9      	ldr	r1, [r7, #24]
 801ba46:	fba1 3403 	umull	r3, r4, r1, r3
 801ba4a:	4422      	add	r2, r4
 801ba4c:	4614      	mov	r4, r2
 801ba4e:	e9c7 3404 	strd	r3, r4, [r7, #16]
 801ba52:	e9c7 3404 	strd	r3, r4, [r7, #16]
  const auto min = std::numeric_limits<tIntegerType>::min();
 801ba56:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801ba5a:	60fb      	str	r3, [r7, #12]
  const auto max = std::numeric_limits<tIntegerType>::max();
 801ba5c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801ba60:	60bb      	str	r3, [r7, #8]
             ? min
 801ba62:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801ba66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801ba6a:	f174 33ff 	sbcs.w	r3, r4, #4294967295
 801ba6e:	db0e      	blt.n	801ba8e <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x78>
             : wide_shifted > max ? max
 801ba70:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801ba74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801ba78:	f04f 0200 	mov.w	r2, #0
 801ba7c:	4299      	cmp	r1, r3
 801ba7e:	eb72 0304 	sbcs.w	r3, r2, r4
 801ba82:	db01      	blt.n	801ba88 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x72>
 801ba84:	693b      	ldr	r3, [r7, #16]
                                  : static_cast<tIntegerType>(wide_shifted);
 801ba86:	e004      	b.n	801ba92 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             : wide_shifted > max ? max
 801ba88:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
                                  : static_cast<tIntegerType>(wide_shifted);
 801ba8c:	e001      	b.n	801ba92 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             ? min
 801ba8e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 801ba92:	4618      	mov	r0, r3
 801ba94:	3720      	adds	r7, #32
 801ba96:	46bd      	mov	sp, r7
 801ba98:	bc90      	pop	{r4, r7}
 801ba9a:	4770      	bx	lr

0801ba9c <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>:
tIntegerType SelectUsingMask(tIntegerType if_mask, tIntegerType then_val,
 801ba9c:	b590      	push	{r4, r7, lr}
 801ba9e:	b085      	sub	sp, #20
 801baa0:	af00      	add	r7, sp, #0
 801baa2:	60f8      	str	r0, [r7, #12]
 801baa4:	60b9      	str	r1, [r7, #8]
 801baa6:	607a      	str	r2, [r7, #4]
  return BitXor(BitAnd(if_mask, then_val), BitAnd(BitNot(if_mask), else_val));
 801baa8:	68b9      	ldr	r1, [r7, #8]
 801baaa:	68f8      	ldr	r0, [r7, #12]
 801baac:	f7fd fd3f 	bl	801952e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801bab0:	4604      	mov	r4, r0
 801bab2:	68f8      	ldr	r0, [r7, #12]
 801bab4:	f7fd fd9f 	bl	80195f6 <_ZN8gemmlowp6BitNotIlEET_S1_>
 801bab8:	4603      	mov	r3, r0
 801baba:	6879      	ldr	r1, [r7, #4]
 801babc:	4618      	mov	r0, r3
 801babe:	f7fd fd36 	bl	801952e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801bac2:	4603      	mov	r3, r0
 801bac4:	4619      	mov	r1, r3
 801bac6:	4620      	mov	r0, r4
 801bac8:	f000 f805 	bl	801bad6 <_ZN8gemmlowp6BitXorIlEET_S1_S1_>
 801bacc:	4603      	mov	r3, r0
}
 801bace:	4618      	mov	r0, r3
 801bad0:	3714      	adds	r7, #20
 801bad2:	46bd      	mov	sp, r7
 801bad4:	bd90      	pop	{r4, r7, pc}

0801bad6 <_ZN8gemmlowp6BitXorIlEET_S1_S1_>:
tIntegerType BitXor(tIntegerType a, tIntegerType b) {
 801bad6:	b480      	push	{r7}
 801bad8:	b083      	sub	sp, #12
 801bada:	af00      	add	r7, sp, #0
 801badc:	6078      	str	r0, [r7, #4]
 801bade:	6039      	str	r1, [r7, #0]
  return a ^ b;
 801bae0:	687a      	ldr	r2, [r7, #4]
 801bae2:	683b      	ldr	r3, [r7, #0]
 801bae4:	4053      	eors	r3, r2
}
 801bae6:	4618      	mov	r0, r3
 801bae8:	370c      	adds	r7, #12
 801baea:	46bd      	mov	sp, r7
 801baec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801baf0:	4770      	bx	lr

0801baf2 <_ZSt3expf>:
  { return __builtin_expf(__x); }
 801baf2:	b580      	push	{r7, lr}
 801baf4:	b082      	sub	sp, #8
 801baf6:	af00      	add	r7, sp, #0
 801baf8:	ed87 0a01 	vstr	s0, [r7, #4]
 801bafc:	ed97 0a01 	vldr	s0, [r7, #4]
 801bb00:	f003 f84e 	bl	801eba0 <expf>
 801bb04:	eef0 7a40 	vmov.f32	s15, s0
 801bb08:	eeb0 0a67 	vmov.f32	s0, s15
 801bb0c:	3708      	adds	r7, #8
 801bb0e:	46bd      	mov	sp, r7
 801bb10:	bd80      	pop	{r7, pc}

0801bb12 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>:
inline std::int32_t RoundingHalfSum(std::int32_t a, std::int32_t b) {
 801bb12:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 801bb16:	b08b      	sub	sp, #44	; 0x2c
 801bb18:	af00      	add	r7, sp, #0
 801bb1a:	6078      	str	r0, [r7, #4]
 801bb1c:	6039      	str	r1, [r7, #0]
  std::int64_t a64 = a;
 801bb1e:	687b      	ldr	r3, [r7, #4]
 801bb20:	ea4f 74e3 	mov.w	r4, r3, asr #31
 801bb24:	e9c7 3408 	strd	r3, r4, [r7, #32]
  std::int64_t b64 = b;
 801bb28:	683b      	ldr	r3, [r7, #0]
 801bb2a:	ea4f 74e3 	mov.w	r4, r3, asr #31
 801bb2e:	e9c7 3406 	strd	r3, r4, [r7, #24]
  std::int64_t sum = a64 + b64;
 801bb32:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801bb36:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801bb3a:	eb13 0b01 	adds.w	fp, r3, r1
 801bb3e:	eb44 0c02 	adc.w	ip, r4, r2
 801bb42:	e9c7 bc04 	strd	fp, ip, [r7, #16]
  std::int64_t sign = sum >= 0 ? 1 : -1;
 801bb46:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801bb4a:	2b00      	cmp	r3, #0
 801bb4c:	f174 0300 	sbcs.w	r3, r4, #0
 801bb50:	db04      	blt.n	801bb5c <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x4a>
 801bb52:	f04f 0301 	mov.w	r3, #1
 801bb56:	f04f 0400 	mov.w	r4, #0
 801bb5a:	e003      	b.n	801bb64 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x52>
 801bb5c:	f04f 33ff 	mov.w	r3, #4294967295
 801bb60:	f04f 34ff 	mov.w	r4, #4294967295
 801bb64:	e9c7 3402 	strd	r3, r4, [r7, #8]
  return static_cast<std::int32_t>((sum + sign) / 2);
 801bb68:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801bb6c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801bb70:	eb13 0b01 	adds.w	fp, r3, r1
 801bb74:	eb44 0c02 	adc.w	ip, r4, r2
 801bb78:	ea4f 72dc 	mov.w	r2, ip, lsr #31
 801bb7c:	4611      	mov	r1, r2
 801bb7e:	f04f 0200 	mov.w	r2, #0
 801bb82:	eb1b 0301 	adds.w	r3, fp, r1
 801bb86:	eb4c 0402 	adc.w	r4, ip, r2
 801bb8a:	1064      	asrs	r4, r4, #1
 801bb8c:	ea4f 0333 	mov.w	r3, r3, rrx
}
 801bb90:	4618      	mov	r0, r3
 801bb92:	372c      	adds	r7, #44	; 0x2c
 801bb94:	46bd      	mov	sp, r7
 801bb96:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 801bb9a:	4770      	bx	lr

0801bb9c <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 801bb9c:	b580      	push	{r7, lr}
 801bb9e:	b084      	sub	sp, #16
 801bba0:	af00      	add	r7, sp, #0
 801bba2:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 801bba4:	f107 030c 	add.w	r3, r7, #12
 801bba8:	4618      	mov	r0, r3
 801bbaa:	f7ff fee1 	bl	801b970 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801bbae:	4602      	mov	r2, r0
 801bbb0:	687b      	ldr	r3, [r7, #4]
 801bbb2:	6013      	str	r3, [r2, #0]
    return retval;
 801bbb4:	68fb      	ldr	r3, [r7, #12]
  }
 801bbb6:	4618      	mov	r0, r3
 801bbb8:	3710      	adds	r7, #16
 801bbba:	46bd      	mov	sp, r7
 801bbbc:	bd80      	pop	{r7, pc}
	...

0801bbc0 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
 801bbc0:	b580      	push	{r7, lr}
 801bbc2:	b08a      	sub	sp, #40	; 0x28
 801bbc4:	af00      	add	r7, sp, #0
 801bbc6:	6078      	str	r0, [r7, #4]
    FixedPoint<tRawType, 0> a) {
  typedef FixedPoint<tRawType, 0> F0;
  typedef FixedPoint<tRawType, 2> F2;
  F0 half_denominator = RoundingHalfSum(a, F0::One());
 801bbc8:	f000 f85a 	bl	801bc80 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 801bbcc:	4603      	mov	r3, r0
 801bbce:	4619      	mov	r1, r3
 801bbd0:	6878      	ldr	r0, [r7, #4]
 801bbd2:	f000 f860 	bl	801bc96 <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801bbd6:	4603      	mov	r3, r0
 801bbd8:	623b      	str	r3, [r7, #32]
  // Newton-Raphson division
  // https://en.wikipedia.org/wiki/Division_algorithm#Newton.E2.80.93Raphson_division
  // Refer to that page for the logic behind the 48/17 and 32/17 constants.
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
 801bbda:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
 801bbde:	f000 f88c 	bl	801bcfa <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 801bbe2:	4603      	mov	r3, r0
  const F2 constant_48_over_17 =
 801bbe4:	4618      	mov	r0, r3
 801bbe6:	f000 f874 	bl	801bcd2 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 801bbea:	4603      	mov	r3, r0
 801bbec:	61fb      	str	r3, [r7, #28]
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
 801bbee:	4823      	ldr	r0, [pc, #140]	; (801bc7c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 801bbf0:	f000 f883 	bl	801bcfa <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 801bbf4:	4603      	mov	r3, r0
  const F2 constant_neg_32_over_17 =
 801bbf6:	4618      	mov	r0, r3
 801bbf8:	f000 f86b 	bl	801bcd2 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 801bbfc:	4603      	mov	r3, r0
 801bbfe:	61bb      	str	r3, [r7, #24]
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
 801bc00:	69b9      	ldr	r1, [r7, #24]
 801bc02:	6a38      	ldr	r0, [r7, #32]
 801bc04:	f000 f886 	bl	801bd14 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801bc08:	4603      	mov	r3, r0
 801bc0a:	4619      	mov	r1, r3
 801bc0c:	69f8      	ldr	r0, [r7, #28]
 801bc0e:	f000 f8a3 	bl	801bd58 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801bc12:	4603      	mov	r3, r0
 801bc14:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 801bc16:	2300      	movs	r3, #0
 801bc18:	627b      	str	r3, [r7, #36]	; 0x24
 801bc1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc1c:	2b02      	cmp	r3, #2
 801bc1e:	dc21      	bgt.n	801bc64 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xa4>
    F2 half_denominator_times_x = half_denominator * x;
 801bc20:	6979      	ldr	r1, [r7, #20]
 801bc22:	6a38      	ldr	r0, [r7, #32]
 801bc24:	f000 f876 	bl	801bd14 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801bc28:	4603      	mov	r3, r0
 801bc2a:	613b      	str	r3, [r7, #16]
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
 801bc2c:	f000 f8b2 	bl	801bd94 <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>
 801bc30:	4603      	mov	r3, r0
    F2 one_minus_half_denominator_times_x =
 801bc32:	6939      	ldr	r1, [r7, #16]
 801bc34:	4618      	mov	r0, r3
 801bc36:	f000 f8b6 	bl	801bda6 <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801bc3a:	4603      	mov	r3, r0
 801bc3c:	60fb      	str	r3, [r7, #12]
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
 801bc3e:	68f9      	ldr	r1, [r7, #12]
 801bc40:	6978      	ldr	r0, [r7, #20]
 801bc42:	f000 f8ce 	bl	801bde2 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801bc46:	4603      	mov	r3, r0
 801bc48:	4618      	mov	r0, r3
 801bc4a:	f000 f8ec 	bl	801be26 <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 801bc4e:	4603      	mov	r3, r0
 801bc50:	4619      	mov	r1, r3
 801bc52:	6978      	ldr	r0, [r7, #20]
 801bc54:	f000 f880 	bl	801bd58 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801bc58:	4603      	mov	r3, r0
 801bc5a:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 801bc5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc5e:	3301      	adds	r3, #1
 801bc60:	627b      	str	r3, [r7, #36]	; 0x24
 801bc62:	e7da      	b.n	801bc1a <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x5a>
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
 801bc64:	6978      	ldr	r0, [r7, #20]
 801bc66:	f000 f8f8 	bl	801be5a <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>
 801bc6a:	4603      	mov	r3, r0
 801bc6c:	4618      	mov	r0, r3
 801bc6e:	f000 f90a 	bl	801be86 <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 801bc72:	4603      	mov	r3, r0
}
 801bc74:	4618      	mov	r0, r3
 801bc76:	3728      	adds	r7, #40	; 0x28
 801bc78:	46bd      	mov	sp, r7
 801bc7a:	bd80      	pop	{r7, pc}
 801bc7c:	c3c3c3c4 	.word	0xc3c3c3c4

0801bc80 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>:
  static FixedPoint One() {
 801bc80:	b580      	push	{r7, lr}
 801bc82:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 801bc84:	f000 f945 	bl	801bf12 <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>
 801bc88:	4603      	mov	r3, r0
            : (ScalarRawType(1) << (kIntegerBits == 0 ? 0 : kFractionalBits)));
 801bc8a:	4618      	mov	r0, r3
 801bc8c:	f7ff fe7b 	bl	801b986 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801bc90:	4603      	mov	r3, r0
  }
 801bc92:	4618      	mov	r0, r3
 801bc94:	bd80      	pop	{r7, pc}

0801bc96 <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(RoundingHalfSum, RoundingHalfSum)
 801bc96:	b590      	push	{r4, r7, lr}
 801bc98:	b083      	sub	sp, #12
 801bc9a:	af00      	add	r7, sp, #0
 801bc9c:	6078      	str	r0, [r7, #4]
 801bc9e:	6039      	str	r1, [r7, #0]
 801bca0:	1d3b      	adds	r3, r7, #4
 801bca2:	4618      	mov	r0, r3
 801bca4:	f7ff fe64 	bl	801b970 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801bca8:	4603      	mov	r3, r0
 801bcaa:	681c      	ldr	r4, [r3, #0]
 801bcac:	463b      	mov	r3, r7
 801bcae:	4618      	mov	r0, r3
 801bcb0:	f7ff fe5e 	bl	801b970 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801bcb4:	4603      	mov	r3, r0
 801bcb6:	681b      	ldr	r3, [r3, #0]
 801bcb8:	4619      	mov	r1, r3
 801bcba:	4620      	mov	r0, r4
 801bcbc:	f7ff ff29 	bl	801bb12 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>
 801bcc0:	4603      	mov	r3, r0
 801bcc2:	4618      	mov	r0, r3
 801bcc4:	f7ff ff6a 	bl	801bb9c <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801bcc8:	4603      	mov	r3, r0
 801bcca:	4618      	mov	r0, r3
 801bccc:	370c      	adds	r7, #12
 801bcce:	46bd      	mov	sp, r7
 801bcd0:	bd90      	pop	{r4, r7, pc}

0801bcd2 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 801bcd2:	b590      	push	{r4, r7, lr}
 801bcd4:	b085      	sub	sp, #20
 801bcd6:	af00      	add	r7, sp, #0
 801bcd8:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 801bcda:	f107 030c 	add.w	r3, r7, #12
 801bcde:	4618      	mov	r0, r3
 801bce0:	f000 f91e 	bl	801bf20 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801bce4:	4604      	mov	r4, r0
 801bce6:	6878      	ldr	r0, [r7, #4]
 801bce8:	f7fd fc16 	bl	8019518 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801bcec:	4603      	mov	r3, r0
 801bcee:	6023      	str	r3, [r4, #0]
    return retval;
 801bcf0:	68fb      	ldr	r3, [r7, #12]
  }
 801bcf2:	4618      	mov	r0, r3
 801bcf4:	3714      	adds	r7, #20
 801bcf6:	46bd      	mov	sp, r7
 801bcf8:	bd90      	pop	{r4, r7, pc}

0801bcfa <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 801bcfa:	b580      	push	{r7, lr}
 801bcfc:	b082      	sub	sp, #8
 801bcfe:	af00      	add	r7, sp, #0
 801bd00:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 801bd02:	2100      	movs	r1, #0
 801bd04:	6878      	ldr	r0, [r7, #4]
 801bd06:	f7fd fb53 	bl	80193b0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801bd0a:	4603      	mov	r3, r0
}
 801bd0c:	4618      	mov	r0, r3
 801bd0e:	3708      	adds	r7, #8
 801bd10:	46bd      	mov	sp, r7
 801bd12:	bd80      	pop	{r7, pc}

0801bd14 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 801bd14:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bd16:	b085      	sub	sp, #20
 801bd18:	af00      	add	r7, sp, #0
 801bd1a:	6078      	str	r0, [r7, #4]
 801bd1c:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 801bd1e:	1d3b      	adds	r3, r7, #4
 801bd20:	4618      	mov	r0, r3
 801bd22:	f7ff fe25 	bl	801b970 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801bd26:	4603      	mov	r3, r0
 801bd28:	681d      	ldr	r5, [r3, #0]
 801bd2a:	463b      	mov	r3, r7
 801bd2c:	4618      	mov	r0, r3
 801bd2e:	f000 f8f7 	bl	801bf20 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801bd32:	4603      	mov	r3, r0
 801bd34:	681e      	ldr	r6, [r3, #0]
 801bd36:	f107 030c 	add.w	r3, r7, #12
 801bd3a:	4618      	mov	r0, r3
 801bd3c:	f000 f8f0 	bl	801bf20 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801bd40:	4604      	mov	r4, r0
 801bd42:	4631      	mov	r1, r6
 801bd44:	4628      	mov	r0, r5
 801bd46:	f7fd fa3f 	bl	80191c8 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 801bd4a:	4603      	mov	r3, r0
 801bd4c:	6023      	str	r3, [r4, #0]
  return c;
 801bd4e:	68fb      	ldr	r3, [r7, #12]
}
 801bd50:	4618      	mov	r0, r3
 801bd52:	3714      	adds	r7, #20
 801bd54:	46bd      	mov	sp, r7
 801bd56:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801bd58 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 801bd58:	b590      	push	{r4, r7, lr}
 801bd5a:	b083      	sub	sp, #12
 801bd5c:	af00      	add	r7, sp, #0
 801bd5e:	6078      	str	r0, [r7, #4]
 801bd60:	6039      	str	r1, [r7, #0]
 801bd62:	1d3b      	adds	r3, r7, #4
 801bd64:	4618      	mov	r0, r3
 801bd66:	f000 f8db 	bl	801bf20 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801bd6a:	4603      	mov	r3, r0
 801bd6c:	681c      	ldr	r4, [r3, #0]
 801bd6e:	463b      	mov	r3, r7
 801bd70:	4618      	mov	r0, r3
 801bd72:	f000 f8d5 	bl	801bf20 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801bd76:	4603      	mov	r3, r0
 801bd78:	681b      	ldr	r3, [r3, #0]
 801bd7a:	4619      	mov	r1, r3
 801bd7c:	4620      	mov	r0, r4
 801bd7e:	f7fd fc07 	bl	8019590 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 801bd82:	4603      	mov	r3, r0
 801bd84:	4618      	mov	r0, r3
 801bd86:	f000 f8d6 	bl	801bf36 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 801bd8a:	4603      	mov	r3, r0
 801bd8c:	4618      	mov	r0, r3
 801bd8e:	370c      	adds	r7, #12
 801bd90:	46bd      	mov	sp, r7
 801bd92:	bd90      	pop	{r4, r7, pc}

0801bd94 <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>:
  static FixedPoint One() {
 801bd94:	b580      	push	{r7, lr}
 801bd96:	af00      	add	r7, sp, #0
            : (ScalarRawType(1) << (kIntegerBits == 0 ? 0 : kFractionalBits)));
 801bd98:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 801bd9c:	f7ff ff99 	bl	801bcd2 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 801bda0:	4603      	mov	r3, r0
  }
 801bda2:	4618      	mov	r0, r3
 801bda4:	bd80      	pop	{r7, pc}

0801bda6 <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 801bda6:	b590      	push	{r4, r7, lr}
 801bda8:	b083      	sub	sp, #12
 801bdaa:	af00      	add	r7, sp, #0
 801bdac:	6078      	str	r0, [r7, #4]
 801bdae:	6039      	str	r1, [r7, #0]
 801bdb0:	1d3b      	adds	r3, r7, #4
 801bdb2:	4618      	mov	r0, r3
 801bdb4:	f000 f8b4 	bl	801bf20 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801bdb8:	4603      	mov	r3, r0
 801bdba:	681c      	ldr	r4, [r3, #0]
 801bdbc:	463b      	mov	r3, r7
 801bdbe:	4618      	mov	r0, r3
 801bdc0:	f000 f8ae 	bl	801bf20 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801bdc4:	4603      	mov	r3, r0
 801bdc6:	681b      	ldr	r3, [r3, #0]
 801bdc8:	4619      	mov	r1, r3
 801bdca:	4620      	mov	r0, r4
 801bdcc:	f7ff fe08 	bl	801b9e0 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 801bdd0:	4603      	mov	r3, r0
 801bdd2:	4618      	mov	r0, r3
 801bdd4:	f000 f8af 	bl	801bf36 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 801bdd8:	4603      	mov	r3, r0
 801bdda:	4618      	mov	r0, r3
 801bddc:	370c      	adds	r7, #12
 801bdde:	46bd      	mov	sp, r7
 801bde0:	bd90      	pop	{r4, r7, pc}

0801bde2 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 801bde2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bde4:	b085      	sub	sp, #20
 801bde6:	af00      	add	r7, sp, #0
 801bde8:	6078      	str	r0, [r7, #4]
 801bdea:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 801bdec:	1d3b      	adds	r3, r7, #4
 801bdee:	4618      	mov	r0, r3
 801bdf0:	f000 f896 	bl	801bf20 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801bdf4:	4603      	mov	r3, r0
 801bdf6:	681d      	ldr	r5, [r3, #0]
 801bdf8:	463b      	mov	r3, r7
 801bdfa:	4618      	mov	r0, r3
 801bdfc:	f000 f890 	bl	801bf20 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801be00:	4603      	mov	r3, r0
 801be02:	681e      	ldr	r6, [r3, #0]
 801be04:	f107 030c 	add.w	r3, r7, #12
 801be08:	4618      	mov	r0, r3
 801be0a:	f000 f856 	bl	801beba <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 801be0e:	4604      	mov	r4, r0
 801be10:	4631      	mov	r1, r6
 801be12:	4628      	mov	r0, r5
 801be14:	f7fd f9d8 	bl	80191c8 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 801be18:	4603      	mov	r3, r0
 801be1a:	6023      	str	r3, [r4, #0]
  return c;
 801be1c:	68fb      	ldr	r3, [r7, #12]
}
 801be1e:	4618      	mov	r0, r3
 801be20:	3714      	adds	r7, #20
 801be22:	46bd      	mov	sp, r7
 801be24:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801be26 <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 801be26:	b5b0      	push	{r4, r5, r7, lr}
 801be28:	b084      	sub	sp, #16
 801be2a:	af00      	add	r7, sp, #0
 801be2c:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 801be2e:	1d3b      	adds	r3, r7, #4
 801be30:	4618      	mov	r0, r3
 801be32:	f000 f842 	bl	801beba <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 801be36:	4603      	mov	r3, r0
 801be38:	681d      	ldr	r5, [r3, #0]
 801be3a:	f107 030c 	add.w	r3, r7, #12
 801be3e:	4618      	mov	r0, r3
 801be40:	f000 f86e 	bl	801bf20 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801be44:	4604      	mov	r4, r0
 801be46:	4628      	mov	r0, r5
 801be48:	f000 f886 	bl	801bf58 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>
 801be4c:	4603      	mov	r3, r0
 801be4e:	6023      	str	r3, [r4, #0]
  return result;
 801be50:	68fb      	ldr	r3, [r7, #12]
}
 801be52:	4618      	mov	r0, r3
 801be54:	3710      	adds	r7, #16
 801be56:	46bd      	mov	sp, r7
 801be58:	bdb0      	pop	{r4, r5, r7, pc}

0801be5a <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tExponent + tIntegerBits> ExactMulByPot(
 801be5a:	b590      	push	{r4, r7, lr}
 801be5c:	b085      	sub	sp, #20
 801be5e:	af00      	add	r7, sp, #0
 801be60:	6078      	str	r0, [r7, #4]
  c.raw() = a.raw();
 801be62:	1d3b      	adds	r3, r7, #4
 801be64:	4618      	mov	r0, r3
 801be66:	f000 f85b 	bl	801bf20 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801be6a:	4604      	mov	r4, r0
 801be6c:	f107 030c 	add.w	r3, r7, #12
 801be70:	4618      	mov	r0, r3
 801be72:	f000 f87d 	bl	801bf70 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 801be76:	4602      	mov	r2, r0
 801be78:	6823      	ldr	r3, [r4, #0]
 801be7a:	6013      	str	r3, [r2, #0]
  return c;
 801be7c:	68fb      	ldr	r3, [r7, #12]
}
 801be7e:	4618      	mov	r0, r3
 801be80:	3714      	adds	r7, #20
 801be82:	46bd      	mov	sp, r7
 801be84:	bd90      	pop	{r4, r7, pc}

0801be86 <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 801be86:	b5b0      	push	{r4, r5, r7, lr}
 801be88:	b084      	sub	sp, #16
 801be8a:	af00      	add	r7, sp, #0
 801be8c:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 801be8e:	1d3b      	adds	r3, r7, #4
 801be90:	4618      	mov	r0, r3
 801be92:	f000 f86d 	bl	801bf70 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 801be96:	4603      	mov	r3, r0
 801be98:	681d      	ldr	r5, [r3, #0]
 801be9a:	f107 030c 	add.w	r3, r7, #12
 801be9e:	4618      	mov	r0, r3
 801bea0:	f7ff fd66 	bl	801b970 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801bea4:	4604      	mov	r4, r0
 801bea6:	4628      	mov	r0, r5
 801bea8:	f000 f86d 	bl	801bf86 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>
 801beac:	4603      	mov	r3, r0
 801beae:	6023      	str	r3, [r4, #0]
  return result;
 801beb0:	68fb      	ldr	r3, [r7, #12]
}
 801beb2:	4618      	mov	r0, r3
 801beb4:	3710      	adds	r7, #16
 801beb6:	46bd      	mov	sp, r7
 801beb8:	bdb0      	pop	{r4, r5, r7, pc}

0801beba <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>:
  RawType& raw() { return i_; }
 801beba:	b480      	push	{r7}
 801bebc:	b083      	sub	sp, #12
 801bebe:	af00      	add	r7, sp, #0
 801bec0:	6078      	str	r0, [r7, #4]
 801bec2:	687b      	ldr	r3, [r7, #4]
 801bec4:	4618      	mov	r0, r3
 801bec6:	370c      	adds	r7, #12
 801bec8:	46bd      	mov	sp, r7
 801beca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bece:	4770      	bx	lr

0801bed0 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>:
FixedPoint<tRawType, tIntegerBits> SelectUsingMask(
 801bed0:	b590      	push	{r4, r7, lr}
 801bed2:	b085      	sub	sp, #20
 801bed4:	af00      	add	r7, sp, #0
 801bed6:	60f8      	str	r0, [r7, #12]
 801bed8:	60b9      	str	r1, [r7, #8]
 801beda:	607a      	str	r2, [r7, #4]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 801bedc:	f107 0308 	add.w	r3, r7, #8
 801bee0:	4618      	mov	r0, r3
 801bee2:	f7ff fd45 	bl	801b970 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801bee6:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801bee8:	681c      	ldr	r4, [r3, #0]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 801beea:	1d3b      	adds	r3, r7, #4
 801beec:	4618      	mov	r0, r3
 801beee:	f7ff fd3f 	bl	801b970 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801bef2:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801bef4:	681b      	ldr	r3, [r3, #0]
 801bef6:	461a      	mov	r2, r3
 801bef8:	4621      	mov	r1, r4
 801befa:	68f8      	ldr	r0, [r7, #12]
 801befc:	f7ff fdce 	bl	801ba9c <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801bf00:	4603      	mov	r3, r0
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 801bf02:	4618      	mov	r0, r3
 801bf04:	f7ff fe4a 	bl	801bb9c <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801bf08:	4603      	mov	r3, r0
}
 801bf0a:	4618      	mov	r0, r3
 801bf0c:	3714      	adds	r7, #20
 801bf0e:	46bd      	mov	sp, r7
 801bf10:	bd90      	pop	{r4, r7, pc}

0801bf12 <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>:
  static const ScalarRawType ScalarRawMax() {
 801bf12:	b580      	push	{r7, lr}
 801bf14:	af00      	add	r7, sp, #0
    return std::numeric_limits<ScalarRawType>::max();
 801bf16:	f7f9 f96d 	bl	80151f4 <_ZNSt14numeric_limitsIlE3maxEv>
 801bf1a:	4603      	mov	r3, r0
  }
 801bf1c:	4618      	mov	r0, r3
 801bf1e:	bd80      	pop	{r7, pc}

0801bf20 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>:
  RawType& raw() { return i_; }
 801bf20:	b480      	push	{r7}
 801bf22:	b083      	sub	sp, #12
 801bf24:	af00      	add	r7, sp, #0
 801bf26:	6078      	str	r0, [r7, #4]
 801bf28:	687b      	ldr	r3, [r7, #4]
 801bf2a:	4618      	mov	r0, r3
 801bf2c:	370c      	adds	r7, #12
 801bf2e:	46bd      	mov	sp, r7
 801bf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf34:	4770      	bx	lr

0801bf36 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 801bf36:	b580      	push	{r7, lr}
 801bf38:	b084      	sub	sp, #16
 801bf3a:	af00      	add	r7, sp, #0
 801bf3c:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 801bf3e:	f107 030c 	add.w	r3, r7, #12
 801bf42:	4618      	mov	r0, r3
 801bf44:	f7ff ffec 	bl	801bf20 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801bf48:	4602      	mov	r2, r0
 801bf4a:	687b      	ldr	r3, [r7, #4]
 801bf4c:	6013      	str	r3, [r2, #0]
    return retval;
 801bf4e:	68fb      	ldr	r3, [r7, #12]
  }
 801bf50:	4618      	mov	r0, r3
 801bf52:	3710      	adds	r7, #16
 801bf54:	46bd      	mov	sp, r7
 801bf56:	bd80      	pop	{r7, pc}

0801bf58 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 801bf58:	b580      	push	{r7, lr}
 801bf5a:	b082      	sub	sp, #8
 801bf5c:	af00      	add	r7, sp, #0
 801bf5e:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801bf60:	6878      	ldr	r0, [r7, #4]
 801bf62:	f000 f82f 	bl	801bfc4 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>
 801bf66:	4603      	mov	r3, r0
}
 801bf68:	4618      	mov	r0, r3
 801bf6a:	3708      	adds	r7, #8
 801bf6c:	46bd      	mov	sp, r7
 801bf6e:	bd80      	pop	{r7, pc}

0801bf70 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>:
  RawType& raw() { return i_; }
 801bf70:	b480      	push	{r7}
 801bf72:	b083      	sub	sp, #12
 801bf74:	af00      	add	r7, sp, #0
 801bf76:	6078      	str	r0, [r7, #4]
 801bf78:	687b      	ldr	r3, [r7, #4]
 801bf7a:	4618      	mov	r0, r3
 801bf7c:	370c      	adds	r7, #12
 801bf7e:	46bd      	mov	sp, r7
 801bf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf84:	4770      	bx	lr

0801bf86 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 801bf86:	b580      	push	{r7, lr}
 801bf88:	b082      	sub	sp, #8
 801bf8a:	af00      	add	r7, sp, #0
 801bf8c:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801bf8e:	6878      	ldr	r0, [r7, #4]
 801bf90:	f000 f85a 	bl	801c048 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>
 801bf94:	4603      	mov	r3, r0
}
 801bf96:	4618      	mov	r0, r3
 801bf98:	3708      	adds	r7, #8
 801bf9a:	46bd      	mov	sp, r7
 801bf9c:	bd80      	pop	{r7, pc}

0801bf9e <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>:
tIntegerType MaskIfZero(tIntegerType a) {
 801bf9e:	b580      	push	{r7, lr}
 801bfa0:	b082      	sub	sp, #8
 801bfa2:	af00      	add	r7, sp, #0
 801bfa4:	6078      	str	r0, [r7, #4]
  return MaskIfNonZero<tIntegerType>(!a);
 801bfa6:	687b      	ldr	r3, [r7, #4]
 801bfa8:	2b00      	cmp	r3, #0
 801bfaa:	bf0c      	ite	eq
 801bfac:	2301      	moveq	r3, #1
 801bfae:	2300      	movne	r3, #0
 801bfb0:	b2db      	uxtb	r3, r3
 801bfb2:	4618      	mov	r0, r3
 801bfb4:	f7fd fb0e 	bl	80195d4 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801bfb8:	4603      	mov	r3, r0
}
 801bfba:	4618      	mov	r0, r3
 801bfbc:	3708      	adds	r7, #8
 801bfbe:	46bd      	mov	sp, r7
 801bfc0:	bd80      	pop	{r7, pc}
	...

0801bfc4 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801bfc4:	b580      	push	{r7, lr}
 801bfc6:	b08a      	sub	sp, #40	; 0x28
 801bfc8:	af00      	add	r7, sp, #0
 801bfca:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 801bfcc:	f7fd f8d9 	bl	8019182 <_ZNSt14numeric_limitsIlE3minEv>
 801bfd0:	4603      	mov	r3, r0
    const IntegerType min =
 801bfd2:	4618      	mov	r0, r3
 801bfd4:	f7fd faa0 	bl	8019518 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801bfd8:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 801bfda:	f7f9 f90b 	bl	80151f4 <_ZNSt14numeric_limitsIlE3maxEv>
 801bfde:	4603      	mov	r3, r0
    const IntegerType max =
 801bfe0:	4618      	mov	r0, r3
 801bfe2:	f7fd fa99 	bl	8019518 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801bfe6:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 801bfe8:	2320      	movs	r3, #32
 801bfea:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 801bfec:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 801bff0:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 801bff2:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
 801bff6:	f7fd fa8f 	bl	8019518 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801bffa:	4603      	mov	r3, r0
    const IntegerType positive_mask =
 801bffc:	4619      	mov	r1, r3
 801bffe:	6878      	ldr	r0, [r7, #4]
 801c000:	f7fd fad4 	bl	80195ac <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 801c004:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 801c006:	480f      	ldr	r0, [pc, #60]	; (801c044 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl+0x80>)
 801c008:	f7fd fa86 	bl	8019518 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801c00c:	4603      	mov	r3, r0
    const IntegerType negative_mask =
 801c00e:	4619      	mov	r1, r3
 801c010:	6878      	ldr	r0, [r7, #4]
 801c012:	f7fd faa9 	bl	8019568 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 801c016:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 801c018:	2102      	movs	r1, #2
 801c01a:	6878      	ldr	r0, [r7, #4]
 801c01c:	f7ff fcfb 	bl	801ba16 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 801c020:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 801c022:	68fa      	ldr	r2, [r7, #12]
 801c024:	6a39      	ldr	r1, [r7, #32]
 801c026:	6978      	ldr	r0, [r7, #20]
 801c028:	f7ff fd38 	bl	801ba9c <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801c02c:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 801c02e:	68fa      	ldr	r2, [r7, #12]
 801c030:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801c032:	6938      	ldr	r0, [r7, #16]
 801c034:	f7ff fd32 	bl	801ba9c <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801c038:	60f8      	str	r0, [r7, #12]
    return result;
 801c03a:	68fb      	ldr	r3, [r7, #12]
  }
 801c03c:	4618      	mov	r0, r3
 801c03e:	3728      	adds	r7, #40	; 0x28
 801c040:	46bd      	mov	sp, r7
 801c042:	bd80      	pop	{r7, pc}
 801c044:	e0000001 	.word	0xe0000001

0801c048 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801c048:	b580      	push	{r7, lr}
 801c04a:	b08a      	sub	sp, #40	; 0x28
 801c04c:	af00      	add	r7, sp, #0
 801c04e:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 801c050:	f7fd f897 	bl	8019182 <_ZNSt14numeric_limitsIlE3minEv>
 801c054:	4603      	mov	r3, r0
    const IntegerType min =
 801c056:	4618      	mov	r0, r3
 801c058:	f7fd fa5e 	bl	8019518 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801c05c:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 801c05e:	f7f9 f8c9 	bl	80151f4 <_ZNSt14numeric_limitsIlE3maxEv>
 801c062:	4603      	mov	r3, r0
    const IntegerType max =
 801c064:	4618      	mov	r0, r3
 801c066:	f7fd fa57 	bl	8019518 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801c06a:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 801c06c:	2320      	movs	r3, #32
 801c06e:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 801c070:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801c074:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 801c076:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 801c07a:	f7fd fa4d 	bl	8019518 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801c07e:	4603      	mov	r3, r0
    const IntegerType positive_mask =
 801c080:	4619      	mov	r1, r3
 801c082:	6878      	ldr	r0, [r7, #4]
 801c084:	f7fd fa92 	bl	80195ac <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 801c088:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 801c08a:	480f      	ldr	r0, [pc, #60]	; (801c0c8 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl+0x80>)
 801c08c:	f7fd fa44 	bl	8019518 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801c090:	4603      	mov	r3, r0
    const IntegerType negative_mask =
 801c092:	4619      	mov	r1, r3
 801c094:	6878      	ldr	r0, [r7, #4]
 801c096:	f7fd fa67 	bl	8019568 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 801c09a:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 801c09c:	2101      	movs	r1, #1
 801c09e:	6878      	ldr	r0, [r7, #4]
 801c0a0:	f7ff fcb9 	bl	801ba16 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 801c0a4:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 801c0a6:	68fa      	ldr	r2, [r7, #12]
 801c0a8:	6a39      	ldr	r1, [r7, #32]
 801c0aa:	6978      	ldr	r0, [r7, #20]
 801c0ac:	f7ff fcf6 	bl	801ba9c <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801c0b0:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 801c0b2:	68fa      	ldr	r2, [r7, #12]
 801c0b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801c0b6:	6938      	ldr	r0, [r7, #16]
 801c0b8:	f7ff fcf0 	bl	801ba9c <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801c0bc:	60f8      	str	r0, [r7, #12]
    return result;
 801c0be:	68fb      	ldr	r3, [r7, #12]
  }
 801c0c0:	4618      	mov	r0, r3
 801c0c2:	3728      	adds	r7, #40	; 0x28
 801c0c4:	46bd      	mov	sp, r7
 801c0c6:	bd80      	pop	{r7, pc}
 801c0c8:	c0000001 	.word	0xc0000001

0801c0cc <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
 801c0cc:	b580      	push	{r7, lr}
 801c0ce:	b08a      	sub	sp, #40	; 0x28
 801c0d0:	af00      	add	r7, sp, #0
 801c0d2:	6078      	str	r0, [r7, #4]
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
 801c0d4:	482c      	ldr	r0, [pc, #176]	; (801c188 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 801c0d6:	f7ff fc6a 	bl	801b9ae <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801c0da:	4603      	mov	r3, r0
  const F constant_term =
 801c0dc:	4618      	mov	r0, r3
 801c0de:	f7ff fc52 	bl	801b986 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801c0e2:	4603      	mov	r3, r0
 801c0e4:	627b      	str	r3, [r7, #36]	; 0x24
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
 801c0e6:	4829      	ldr	r0, [pc, #164]	; (801c18c <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xc0>)
 801c0e8:	f7ff fc61 	bl	801b9ae <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801c0ec:	4603      	mov	r3, r0
  const F constant_1_over_3 =
 801c0ee:	4618      	mov	r0, r3
 801c0f0:	f7ff fc49 	bl	801b986 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801c0f4:	4603      	mov	r3, r0
 801c0f6:	623b      	str	r3, [r7, #32]
  F x = a + F::template ConstantPOT<-3>();
 801c0f8:	f000 f86c 	bl	801c1d4 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>
 801c0fc:	4603      	mov	r3, r0
 801c0fe:	4619      	mov	r1, r3
 801c100:	6878      	ldr	r0, [r7, #4]
 801c102:	f000 f870 	bl	801c1e6 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801c106:	4603      	mov	r3, r0
 801c108:	61fb      	str	r3, [r7, #28]
  F x2 = x * x;
 801c10a:	69f9      	ldr	r1, [r7, #28]
 801c10c:	69f8      	ldr	r0, [r7, #28]
 801c10e:	f000 f83f 	bl	801c190 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801c112:	4603      	mov	r3, r0
 801c114:	61bb      	str	r3, [r7, #24]
  F x3 = x2 * x;
 801c116:	69f9      	ldr	r1, [r7, #28]
 801c118:	69b8      	ldr	r0, [r7, #24]
 801c11a:	f000 f839 	bl	801c190 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801c11e:	4603      	mov	r3, r0
 801c120:	617b      	str	r3, [r7, #20]
  F x4 = x2 * x2;
 801c122:	69b9      	ldr	r1, [r7, #24]
 801c124:	69b8      	ldr	r0, [r7, #24]
 801c126:	f000 f833 	bl	801c190 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801c12a:	4603      	mov	r3, r0
 801c12c:	613b      	str	r3, [r7, #16]
  F x4_over_4 = SaturatingRoundingMultiplyByPOT<-2>(x4);
 801c12e:	6938      	ldr	r0, [r7, #16]
 801c130:	f000 f877 	bl	801c222 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 801c134:	4603      	mov	r3, r0
 801c136:	60fb      	str	r3, [r7, #12]
      SaturatingRoundingMultiplyByPOT<-1>(
 801c138:	6979      	ldr	r1, [r7, #20]
 801c13a:	68f8      	ldr	r0, [r7, #12]
 801c13c:	f000 f853 	bl	801c1e6 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801c140:	4603      	mov	r3, r0
 801c142:	6a39      	ldr	r1, [r7, #32]
 801c144:	4618      	mov	r0, r3
 801c146:	f000 f823 	bl	801c190 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801c14a:	4603      	mov	r3, r0
 801c14c:	69b9      	ldr	r1, [r7, #24]
 801c14e:	4618      	mov	r0, r3
 801c150:	f000 f849 	bl	801c1e6 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801c154:	4603      	mov	r3, r0
  F x4_over_24_plus_x3_over_6_plus_x2_over_2 =
 801c156:	4618      	mov	r0, r3
 801c158:	f000 f879 	bl	801c24e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 801c15c:	4603      	mov	r3, r0
 801c15e:	60bb      	str	r3, [r7, #8]
  return AddSaturatingIf16Bit(
 801c160:	68b9      	ldr	r1, [r7, #8]
 801c162:	69f8      	ldr	r0, [r7, #28]
 801c164:	f000 f83f 	bl	801c1e6 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801c168:	4603      	mov	r3, r0
 801c16a:	4619      	mov	r1, r3
 801c16c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c16e:	f000 f80f 	bl	801c190 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801c172:	4603      	mov	r3, r0
      constant_term * (x + x4_over_24_plus_x3_over_6_plus_x2_over_2));
 801c174:	4619      	mov	r1, r3
 801c176:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c178:	f000 f87f 	bl	801c27a <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801c17c:	4603      	mov	r3, r0
}
 801c17e:	4618      	mov	r0, r3
 801c180:	3728      	adds	r7, #40	; 0x28
 801c182:	46bd      	mov	sp, r7
 801c184:	bd80      	pop	{r7, pc}
 801c186:	bf00      	nop
 801c188:	70f5a894 	.word	0x70f5a894
 801c18c:	2aaaaaab 	.word	0x2aaaaaab

0801c190 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 801c190:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c192:	b085      	sub	sp, #20
 801c194:	af00      	add	r7, sp, #0
 801c196:	6078      	str	r0, [r7, #4]
 801c198:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 801c19a:	1d3b      	adds	r3, r7, #4
 801c19c:	4618      	mov	r0, r3
 801c19e:	f7ff fbe7 	bl	801b970 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801c1a2:	4603      	mov	r3, r0
 801c1a4:	681d      	ldr	r5, [r3, #0]
 801c1a6:	463b      	mov	r3, r7
 801c1a8:	4618      	mov	r0, r3
 801c1aa:	f7ff fbe1 	bl	801b970 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801c1ae:	4603      	mov	r3, r0
 801c1b0:	681e      	ldr	r6, [r3, #0]
 801c1b2:	f107 030c 	add.w	r3, r7, #12
 801c1b6:	4618      	mov	r0, r3
 801c1b8:	f7ff fbda 	bl	801b970 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801c1bc:	4604      	mov	r4, r0
 801c1be:	4631      	mov	r1, r6
 801c1c0:	4628      	mov	r0, r5
 801c1c2:	f7fd f801 	bl	80191c8 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 801c1c6:	4603      	mov	r3, r0
 801c1c8:	6023      	str	r3, [r4, #0]
  return c;
 801c1ca:	68fb      	ldr	r3, [r7, #12]
}
 801c1cc:	4618      	mov	r0, r3
 801c1ce:	3714      	adds	r7, #20
 801c1d0:	46bd      	mov	sp, r7
 801c1d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c1d4 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>:
  static FixedPoint ConstantPOT() {
 801c1d4:	b580      	push	{r7, lr}
 801c1d6:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 801c1d8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 801c1dc:	f7ff fbd3 	bl	801b986 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801c1e0:	4603      	mov	r3, r0
  }
 801c1e2:	4618      	mov	r0, r3
 801c1e4:	bd80      	pop	{r7, pc}

0801c1e6 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 801c1e6:	b590      	push	{r4, r7, lr}
 801c1e8:	b083      	sub	sp, #12
 801c1ea:	af00      	add	r7, sp, #0
 801c1ec:	6078      	str	r0, [r7, #4]
 801c1ee:	6039      	str	r1, [r7, #0]
 801c1f0:	1d3b      	adds	r3, r7, #4
 801c1f2:	4618      	mov	r0, r3
 801c1f4:	f7ff fbbc 	bl	801b970 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801c1f8:	4603      	mov	r3, r0
 801c1fa:	681c      	ldr	r4, [r3, #0]
 801c1fc:	463b      	mov	r3, r7
 801c1fe:	4618      	mov	r0, r3
 801c200:	f7ff fbb6 	bl	801b970 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801c204:	4603      	mov	r3, r0
 801c206:	681b      	ldr	r3, [r3, #0]
 801c208:	4619      	mov	r1, r3
 801c20a:	4620      	mov	r0, r4
 801c20c:	f7fd f9c0 	bl	8019590 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 801c210:	4603      	mov	r3, r0
 801c212:	4618      	mov	r0, r3
 801c214:	f7ff fcc2 	bl	801bb9c <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801c218:	4603      	mov	r3, r0
 801c21a:	4618      	mov	r0, r3
 801c21c:	370c      	adds	r7, #12
 801c21e:	46bd      	mov	sp, r7
 801c220:	bd90      	pop	{r4, r7, pc}

0801c222 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 801c222:	b580      	push	{r7, lr}
 801c224:	b082      	sub	sp, #8
 801c226:	af00      	add	r7, sp, #0
 801c228:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 801c22a:	1d3b      	adds	r3, r7, #4
 801c22c:	4618      	mov	r0, r3
 801c22e:	f7ff fb9f 	bl	801b970 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801c232:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801c234:	681b      	ldr	r3, [r3, #0]
 801c236:	4618      	mov	r0, r3
 801c238:	f000 f83d 	bl	801c2b6 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>
 801c23c:	4603      	mov	r3, r0
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 801c23e:	4618      	mov	r0, r3
 801c240:	f7ff fcac 	bl	801bb9c <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801c244:	4603      	mov	r3, r0
}
 801c246:	4618      	mov	r0, r3
 801c248:	3708      	adds	r7, #8
 801c24a:	46bd      	mov	sp, r7
 801c24c:	bd80      	pop	{r7, pc}

0801c24e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 801c24e:	b580      	push	{r7, lr}
 801c250:	b082      	sub	sp, #8
 801c252:	af00      	add	r7, sp, #0
 801c254:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 801c256:	1d3b      	adds	r3, r7, #4
 801c258:	4618      	mov	r0, r3
 801c25a:	f7ff fb89 	bl	801b970 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801c25e:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801c260:	681b      	ldr	r3, [r3, #0]
 801c262:	4618      	mov	r0, r3
 801c264:	f7ff fbb0 	bl	801b9c8 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>
 801c268:	4603      	mov	r3, r0
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 801c26a:	4618      	mov	r0, r3
 801c26c:	f7ff fc96 	bl	801bb9c <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801c270:	4603      	mov	r3, r0
}
 801c272:	4618      	mov	r0, r3
 801c274:	3708      	adds	r7, #8
 801c276:	46bd      	mov	sp, r7
 801c278:	bd80      	pop	{r7, pc}

0801c27a <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
FixedPoint<tRawType, tIntegerBits> AddSaturatingIf16Bit(
 801c27a:	b590      	push	{r4, r7, lr}
 801c27c:	b083      	sub	sp, #12
 801c27e:	af00      	add	r7, sp, #0
 801c280:	6078      	str	r0, [r7, #4]
 801c282:	6039      	str	r1, [r7, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 801c284:	1d3b      	adds	r3, r7, #4
 801c286:	4618      	mov	r0, r3
 801c288:	f7ff fb72 	bl	801b970 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801c28c:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801c28e:	681c      	ldr	r4, [r3, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 801c290:	463b      	mov	r3, r7
 801c292:	4618      	mov	r0, r3
 801c294:	f7ff fb6c 	bl	801b970 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801c298:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801c29a:	681b      	ldr	r3, [r3, #0]
 801c29c:	4619      	mov	r1, r3
 801c29e:	4620      	mov	r0, r4
 801c2a0:	f000 f815 	bl	801c2ce <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>
 801c2a4:	4603      	mov	r3, r0
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 801c2a6:	4618      	mov	r0, r3
 801c2a8:	f7ff fc78 	bl	801bb9c <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801c2ac:	4603      	mov	r3, r0
}
 801c2ae:	4618      	mov	r0, r3
 801c2b0:	370c      	adds	r7, #12
 801c2b2:	46bd      	mov	sp, r7
 801c2b4:	bd90      	pop	{r4, r7, pc}

0801c2b6 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 801c2b6:	b580      	push	{r7, lr}
 801c2b8:	b082      	sub	sp, #8
 801c2ba:	af00      	add	r7, sp, #0
 801c2bc:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801c2be:	6878      	ldr	r0, [r7, #4]
 801c2c0:	f000 f813 	bl	801c2ea <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>
 801c2c4:	4603      	mov	r3, r0
}
 801c2c6:	4618      	mov	r0, r3
 801c2c8:	3708      	adds	r7, #8
 801c2ca:	46bd      	mov	sp, r7
 801c2cc:	bd80      	pop	{r7, pc}

0801c2ce <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>:
IntegerType AddSaturatingIf16Bit(IntegerType a, IntegerType b) {
 801c2ce:	b580      	push	{r7, lr}
 801c2d0:	b082      	sub	sp, #8
 801c2d2:	af00      	add	r7, sp, #0
 801c2d4:	6078      	str	r0, [r7, #4]
 801c2d6:	6039      	str	r1, [r7, #0]
                                                                             b);
 801c2d8:	6839      	ldr	r1, [r7, #0]
 801c2da:	6878      	ldr	r0, [r7, #4]
 801c2dc:	f000 f812 	bl	801c304 <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>
 801c2e0:	4603      	mov	r3, r0
}
 801c2e2:	4618      	mov	r0, r3
 801c2e4:	3708      	adds	r7, #8
 801c2e6:	46bd      	mov	sp, r7
 801c2e8:	bd80      	pop	{r7, pc}

0801c2ea <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801c2ea:	b580      	push	{r7, lr}
 801c2ec:	b082      	sub	sp, #8
 801c2ee:	af00      	add	r7, sp, #0
 801c2f0:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 801c2f2:	2102      	movs	r1, #2
 801c2f4:	6878      	ldr	r0, [r7, #4]
 801c2f6:	f7fd f85b 	bl	80193b0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801c2fa:	4603      	mov	r3, r0
  }
 801c2fc:	4618      	mov	r0, r3
 801c2fe:	3708      	adds	r7, #8
 801c300:	46bd      	mov	sp, r7
 801c302:	bd80      	pop	{r7, pc}

0801c304 <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>:
  static IntegerType Run(IntegerType a, IntegerType b) { return Add(a, b); }
 801c304:	b580      	push	{r7, lr}
 801c306:	b082      	sub	sp, #8
 801c308:	af00      	add	r7, sp, #0
 801c30a:	6078      	str	r0, [r7, #4]
 801c30c:	6039      	str	r1, [r7, #0]
 801c30e:	6839      	ldr	r1, [r7, #0]
 801c310:	6878      	ldr	r0, [r7, #4]
 801c312:	f7fd f93d 	bl	8019590 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 801c316:	4603      	mov	r3, r0
 801c318:	4618      	mov	r0, r3
 801c31a:	3708      	adds	r7, #8
 801c31c:	46bd      	mov	sp, r7
 801c31e:	bd80      	pop	{r7, pc}

0801c320 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
  }
}

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const float* input_data, const RuntimeShape& output_shape,
                    float* output_data) {
 801c320:	b590      	push	{r4, r7, lr}
 801c322:	ed2d 8b04 	vpush	{d8-d9}
 801c326:	b0a5      	sub	sp, #148	; 0x94
 801c328:	af02      	add	r7, sp, #8
 801c32a:	60f8      	str	r0, [r7, #12]
 801c32c:	60b9      	str	r1, [r7, #8]
 801c32e:	607a      	str	r2, [r7, #4]
 801c330:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 801c332:	68b8      	ldr	r0, [r7, #8]
 801c334:	f7fc fda5 	bl	8018e82 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801c338:	4603      	mov	r3, r0
 801c33a:	2b04      	cmp	r3, #4
 801c33c:	d001      	beq.n	801c342 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x22>
 801c33e:	f002 fd87 	bl	801ee50 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 801c342:	6838      	ldr	r0, [r7, #0]
 801c344:	f7fc fd9d 	bl	8018e82 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801c348:	4603      	mov	r3, r0
 801c34a:	2b04      	cmp	r3, #4
 801c34c:	d001      	beq.n	801c352 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x32>
 801c34e:	f002 fd7f 	bl	801ee50 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 801c352:	2300      	movs	r3, #0
 801c354:	683a      	ldr	r2, [r7, #0]
 801c356:	2100      	movs	r1, #0
 801c358:	68b8      	ldr	r0, [r7, #8]
 801c35a:	f7fd f983 	bl	8019664 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801c35e:	66f8      	str	r0, [r7, #108]	; 0x6c
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 801c360:	2303      	movs	r3, #3
 801c362:	683a      	ldr	r2, [r7, #0]
 801c364:	2103      	movs	r1, #3
 801c366:	68b8      	ldr	r0, [r7, #8]
 801c368:	f7fd f97c 	bl	8019664 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801c36c:	66b8      	str	r0, [r7, #104]	; 0x68
  const int input_height = input_shape.Dims(1);
 801c36e:	2101      	movs	r1, #1
 801c370:	68b8      	ldr	r0, [r7, #8]
 801c372:	f7fc fd92 	bl	8018e9a <_ZNK6tflite12RuntimeShape4DimsEi>
 801c376:	6678      	str	r0, [r7, #100]	; 0x64
  const int input_width = input_shape.Dims(2);
 801c378:	2102      	movs	r1, #2
 801c37a:	68b8      	ldr	r0, [r7, #8]
 801c37c:	f7fc fd8d 	bl	8018e9a <_ZNK6tflite12RuntimeShape4DimsEi>
 801c380:	6638      	str	r0, [r7, #96]	; 0x60
  const int output_height = output_shape.Dims(1);
 801c382:	2101      	movs	r1, #1
 801c384:	6838      	ldr	r0, [r7, #0]
 801c386:	f7fc fd88 	bl	8018e9a <_ZNK6tflite12RuntimeShape4DimsEi>
 801c38a:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_width = output_shape.Dims(2);
 801c38c:	2102      	movs	r1, #2
 801c38e:	6838      	ldr	r0, [r7, #0]
 801c390:	f7fc fd83 	bl	8018e9a <_ZNK6tflite12RuntimeShape4DimsEi>
 801c394:	65b8      	str	r0, [r7, #88]	; 0x58
  const int stride_height = params.stride_height;
 801c396:	68fb      	ldr	r3, [r7, #12]
 801c398:	68db      	ldr	r3, [r3, #12]
 801c39a:	657b      	str	r3, [r7, #84]	; 0x54
  const int stride_width = params.stride_width;
 801c39c:	68fb      	ldr	r3, [r7, #12]
 801c39e:	691b      	ldr	r3, [r3, #16]
 801c3a0:	653b      	str	r3, [r7, #80]	; 0x50
  for (int batch = 0; batch < batches; ++batch) {
 801c3a2:	2300      	movs	r3, #0
 801c3a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801c3a8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801c3ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c3ae:	429a      	cmp	r2, r3
 801c3b0:	f280 80d4 	bge.w	801c55c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x23c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 801c3b4:	2300      	movs	r3, #0
 801c3b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801c3ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801c3be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c3c0:	429a      	cmp	r2, r3
 801c3c2:	f280 80c5 	bge.w	801c550 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x230>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 801c3c6:	2300      	movs	r3, #0
 801c3c8:	67fb      	str	r3, [r7, #124]	; 0x7c
 801c3ca:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801c3cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801c3ce:	429a      	cmp	r2, r3
 801c3d0:	f280 80b8 	bge.w	801c544 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x224>
        for (int channel = 0; channel < depth; ++channel) {
 801c3d4:	2300      	movs	r3, #0
 801c3d6:	67bb      	str	r3, [r7, #120]	; 0x78
 801c3d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801c3da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c3dc:	429a      	cmp	r2, r3
 801c3de:	f280 80ad 	bge.w	801c53c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x21c>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
 801c3e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801c3e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801c3e6:	fb02 f303 	mul.w	r3, r2, r3
 801c3ea:	68fa      	ldr	r2, [r7, #12]
 801c3ec:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
          const int in_x_origin =
 801c3f0:	1a9b      	subs	r3, r3, r2
 801c3f2:	64fb      	str	r3, [r7, #76]	; 0x4c
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
 801c3f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801c3f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c3fa:	fb02 f303 	mul.w	r3, r2, r3
 801c3fe:	68fa      	ldr	r2, [r7, #12]
 801c400:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
          const int in_y_origin =
 801c404:	1a9b      	subs	r3, r3, r2
 801c406:	64bb      	str	r3, [r7, #72]	; 0x48
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
 801c408:	2300      	movs	r3, #0
 801c40a:	61bb      	str	r3, [r7, #24]
 801c40c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c40e:	425b      	negs	r3, r3
 801c410:	61fb      	str	r3, [r7, #28]
 801c412:	f107 021c 	add.w	r2, r7, #28
 801c416:	f107 0318 	add.w	r3, r7, #24
 801c41a:	4611      	mov	r1, r2
 801c41c:	4618      	mov	r0, r3
 801c41e:	f7f9 fca3 	bl	8015d68 <_ZSt3maxIiERKT_S2_S2_>
 801c422:	4603      	mov	r3, r0
 801c424:	681b      	ldr	r3, [r3, #0]
 801c426:	647b      	str	r3, [r7, #68]	; 0x44
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
 801c428:	68fb      	ldr	r3, [r7, #12]
 801c42a:	f103 0018 	add.w	r0, r3, #24
 801c42e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801c430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c432:	1ad3      	subs	r3, r2, r3
 801c434:	623b      	str	r3, [r7, #32]
 801c436:	f107 0320 	add.w	r3, r7, #32
 801c43a:	4619      	mov	r1, r3
 801c43c:	f000 fcb8 	bl	801cdb0 <_ZSt3minIiERKT_S2_S2_>
 801c440:	4603      	mov	r3, r0
 801c442:	681b      	ldr	r3, [r3, #0]
 801c444:	643b      	str	r3, [r7, #64]	; 0x40
          const int filter_y_start = std::max(0, -in_y_origin);
 801c446:	2300      	movs	r3, #0
 801c448:	627b      	str	r3, [r7, #36]	; 0x24
 801c44a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c44c:	425b      	negs	r3, r3
 801c44e:	62bb      	str	r3, [r7, #40]	; 0x28
 801c450:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801c454:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c458:	4611      	mov	r1, r2
 801c45a:	4618      	mov	r0, r3
 801c45c:	f7f9 fc84 	bl	8015d68 <_ZSt3maxIiERKT_S2_S2_>
 801c460:	4603      	mov	r3, r0
 801c462:	681b      	ldr	r3, [r3, #0]
 801c464:	63fb      	str	r3, [r7, #60]	; 0x3c
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
 801c466:	68fb      	ldr	r3, [r7, #12]
 801c468:	f103 0014 	add.w	r0, r3, #20
 801c46c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801c46e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c470:	1ad3      	subs	r3, r2, r3
 801c472:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c474:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801c478:	4619      	mov	r1, r3
 801c47a:	f000 fc99 	bl	801cdb0 <_ZSt3minIiERKT_S2_S2_>
 801c47e:	4603      	mov	r3, r0
 801c480:	681b      	ldr	r3, [r3, #0]
 801c482:	63bb      	str	r3, [r7, #56]	; 0x38
          float max = std::numeric_limits<float>::lowest();
 801c484:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 801c488:	617b      	str	r3, [r7, #20]
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 801c48a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c48c:	677b      	str	r3, [r7, #116]	; 0x74
 801c48e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801c490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c492:	429a      	cmp	r2, r3
 801c494:	da2b      	bge.n	801c4ee <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1ce>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 801c496:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c498:	673b      	str	r3, [r7, #112]	; 0x70
 801c49a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801c49c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c49e:	429a      	cmp	r2, r3
 801c4a0:	da21      	bge.n	801c4e6 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1c6>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
 801c4a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c4a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c4a6:	4413      	add	r3, r2
 801c4a8:	637b      	str	r3, [r7, #52]	; 0x34
              const int in_y = in_y_origin + filter_y;
 801c4aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c4ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801c4ae:	4413      	add	r3, r2
 801c4b0:	633b      	str	r3, [r7, #48]	; 0x30
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
 801c4b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801c4b4:	9300      	str	r3, [sp, #0]
 801c4b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c4b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c4ba:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 801c4be:	68b8      	ldr	r0, [r7, #8]
 801c4c0:	f7fc fefe 	bl	80192c0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 801c4c4:	4603      	mov	r3, r0
 801c4c6:	009b      	lsls	r3, r3, #2
 801c4c8:	687a      	ldr	r2, [r7, #4]
 801c4ca:	441a      	add	r2, r3
 801c4cc:	f107 0314 	add.w	r3, r7, #20
 801c4d0:	4611      	mov	r1, r2
 801c4d2:	4618      	mov	r0, r3
 801c4d4:	f7f9 f819 	bl	801550a <_ZSt3maxIfERKT_S2_S2_>
 801c4d8:	4603      	mov	r3, r0
              max = std::max(
 801c4da:	681b      	ldr	r3, [r3, #0]
 801c4dc:	617b      	str	r3, [r7, #20]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 801c4de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c4e0:	3301      	adds	r3, #1
 801c4e2:	673b      	str	r3, [r7, #112]	; 0x70
 801c4e4:	e7d9      	b.n	801c49a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x17a>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 801c4e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801c4e8:	3301      	adds	r3, #1
 801c4ea:	677b      	str	r3, [r7, #116]	; 0x74
 801c4ec:	e7cf      	b.n	801c48e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x16e>
            }
          }
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
              ActivationFunctionWithMinMax(max, params.float_activation_min,
 801c4ee:	ed97 8a05 	vldr	s16, [r7, #20]
 801c4f2:	68fb      	ldr	r3, [r7, #12]
 801c4f4:	edd3 8a09 	vldr	s17, [r3, #36]	; 0x24
                                           params.float_activation_max);
 801c4f8:	68fb      	ldr	r3, [r7, #12]
 801c4fa:	ed93 9a0a 	vldr	s18, [r3, #40]	; 0x28
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 801c4fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801c500:	9300      	str	r3, [sp, #0]
 801c502:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801c504:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801c508:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 801c50c:	6838      	ldr	r0, [r7, #0]
 801c50e:	f7fc fed7 	bl	80192c0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 801c512:	4603      	mov	r3, r0
 801c514:	009b      	lsls	r3, r3, #2
 801c516:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801c51a:	18d4      	adds	r4, r2, r3
              ActivationFunctionWithMinMax(max, params.float_activation_min,
 801c51c:	eeb0 1a49 	vmov.f32	s2, s18
 801c520:	eef0 0a68 	vmov.f32	s1, s17
 801c524:	eeb0 0a48 	vmov.f32	s0, s16
 801c528:	f7fc ff22 	bl	8019370 <_ZN6tflite28ActivationFunctionWithMinMaxEfff>
 801c52c:	eef0 7a40 	vmov.f32	s15, s0
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 801c530:	edc4 7a00 	vstr	s15, [r4]
        for (int channel = 0; channel < depth; ++channel) {
 801c534:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801c536:	3301      	adds	r3, #1
 801c538:	67bb      	str	r3, [r7, #120]	; 0x78
 801c53a:	e74d      	b.n	801c3d8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xb8>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 801c53c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801c53e:	3301      	adds	r3, #1
 801c540:	67fb      	str	r3, [r7, #124]	; 0x7c
 801c542:	e742      	b.n	801c3ca <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xaa>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 801c544:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801c548:	3301      	adds	r3, #1
 801c54a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801c54e:	e734      	b.n	801c3ba <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x9a>
  for (int batch = 0; batch < batches; ++batch) {
 801c550:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801c554:	3301      	adds	r3, #1
 801c556:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801c55a:	e725      	b.n	801c3a8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x88>
        }
      }
    }
  }
}
 801c55c:	bf00      	nop
 801c55e:	378c      	adds	r7, #140	; 0x8c
 801c560:	46bd      	mov	sp, r7
 801c562:	ecbd 8b04 	vpop	{d8-d9}
 801c566:	bd90      	pop	{r4, r7, pc}

0801c568 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>:

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const uint8* input_data, const RuntimeShape& output_shape,
                    uint8* output_data) {
 801c568:	b580      	push	{r7, lr}
 801c56a:	b0a4      	sub	sp, #144	; 0x90
 801c56c:	af02      	add	r7, sp, #8
 801c56e:	60f8      	str	r0, [r7, #12]
 801c570:	60b9      	str	r1, [r7, #8]
 801c572:	607a      	str	r2, [r7, #4]
 801c574:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_LE(params.quantized_activation_min,
 801c576:	68fb      	ldr	r3, [r7, #12]
 801c578:	69da      	ldr	r2, [r3, #28]
 801c57a:	68fb      	ldr	r3, [r7, #12]
 801c57c:	6a1b      	ldr	r3, [r3, #32]
 801c57e:	429a      	cmp	r2, r3
 801c580:	dd01      	ble.n	801c586 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1e>
 801c582:	f002 fc65 	bl	801ee50 <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_GE(params.quantized_activation_min, 0);
 801c586:	68fb      	ldr	r3, [r7, #12]
 801c588:	69db      	ldr	r3, [r3, #28]
 801c58a:	2b00      	cmp	r3, #0
 801c58c:	da01      	bge.n	801c592 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x2a>
 801c58e:	f002 fc5f 	bl	801ee50 <abort>
  TFLITE_DCHECK_LE(params.quantized_activation_max, 255);
 801c592:	68fb      	ldr	r3, [r7, #12]
 801c594:	6a1b      	ldr	r3, [r3, #32]
 801c596:	2bff      	cmp	r3, #255	; 0xff
 801c598:	dd01      	ble.n	801c59e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x36>
 801c59a:	f002 fc59 	bl	801ee50 <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 801c59e:	68b8      	ldr	r0, [r7, #8]
 801c5a0:	f7fc fc6f 	bl	8018e82 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801c5a4:	4603      	mov	r3, r0
 801c5a6:	2b04      	cmp	r3, #4
 801c5a8:	d001      	beq.n	801c5ae <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x46>
 801c5aa:	f002 fc51 	bl	801ee50 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 801c5ae:	6838      	ldr	r0, [r7, #0]
 801c5b0:	f7fc fc67 	bl	8018e82 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801c5b4:	4603      	mov	r3, r0
 801c5b6:	2b04      	cmp	r3, #4
 801c5b8:	d001      	beq.n	801c5be <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x56>
 801c5ba:	f002 fc49 	bl	801ee50 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 801c5be:	2300      	movs	r3, #0
 801c5c0:	683a      	ldr	r2, [r7, #0]
 801c5c2:	2100      	movs	r1, #0
 801c5c4:	68b8      	ldr	r0, [r7, #8]
 801c5c6:	f7fd f84d 	bl	8019664 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801c5ca:	66f8      	str	r0, [r7, #108]	; 0x6c
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 801c5cc:	2303      	movs	r3, #3
 801c5ce:	683a      	ldr	r2, [r7, #0]
 801c5d0:	2103      	movs	r1, #3
 801c5d2:	68b8      	ldr	r0, [r7, #8]
 801c5d4:	f7fd f846 	bl	8019664 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801c5d8:	66b8      	str	r0, [r7, #104]	; 0x68
  const int input_height = input_shape.Dims(1);
 801c5da:	2101      	movs	r1, #1
 801c5dc:	68b8      	ldr	r0, [r7, #8]
 801c5de:	f7fc fc5c 	bl	8018e9a <_ZNK6tflite12RuntimeShape4DimsEi>
 801c5e2:	6678      	str	r0, [r7, #100]	; 0x64
  const int input_width = input_shape.Dims(2);
 801c5e4:	2102      	movs	r1, #2
 801c5e6:	68b8      	ldr	r0, [r7, #8]
 801c5e8:	f7fc fc57 	bl	8018e9a <_ZNK6tflite12RuntimeShape4DimsEi>
 801c5ec:	6638      	str	r0, [r7, #96]	; 0x60
  const int output_height = output_shape.Dims(1);
 801c5ee:	2101      	movs	r1, #1
 801c5f0:	6838      	ldr	r0, [r7, #0]
 801c5f2:	f7fc fc52 	bl	8018e9a <_ZNK6tflite12RuntimeShape4DimsEi>
 801c5f6:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_width = output_shape.Dims(2);
 801c5f8:	2102      	movs	r1, #2
 801c5fa:	6838      	ldr	r0, [r7, #0]
 801c5fc:	f7fc fc4d 	bl	8018e9a <_ZNK6tflite12RuntimeShape4DimsEi>
 801c600:	65b8      	str	r0, [r7, #88]	; 0x58
  const int stride_height = params.stride_height;
 801c602:	68fb      	ldr	r3, [r7, #12]
 801c604:	68db      	ldr	r3, [r3, #12]
 801c606:	657b      	str	r3, [r7, #84]	; 0x54
  const int stride_width = params.stride_width;
 801c608:	68fb      	ldr	r3, [r7, #12]
 801c60a:	691b      	ldr	r3, [r3, #16]
 801c60c:	653b      	str	r3, [r7, #80]	; 0x50
  for (int batch = 0; batch < batches; ++batch) {
 801c60e:	2300      	movs	r3, #0
 801c610:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801c614:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801c618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c61a:	429a      	cmp	r2, r3
 801c61c:	f280 80e1 	bge.w	801c7e2 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x27a>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 801c620:	2300      	movs	r3, #0
 801c622:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801c626:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801c62a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c62c:	429a      	cmp	r2, r3
 801c62e:	f280 80d2 	bge.w	801c7d6 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x26e>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 801c632:	2300      	movs	r3, #0
 801c634:	67fb      	str	r3, [r7, #124]	; 0x7c
 801c636:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801c638:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801c63a:	429a      	cmp	r2, r3
 801c63c:	f280 80c5 	bge.w	801c7ca <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x262>
        for (int channel = 0; channel < depth; ++channel) {
 801c640:	2300      	movs	r3, #0
 801c642:	67bb      	str	r3, [r7, #120]	; 0x78
 801c644:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801c646:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c648:	429a      	cmp	r2, r3
 801c64a:	f280 80ba 	bge.w	801c7c2 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x25a>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
 801c64e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801c650:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801c652:	fb02 f303 	mul.w	r3, r2, r3
 801c656:	68fa      	ldr	r2, [r7, #12]
 801c658:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
          const int in_x_origin =
 801c65c:	1a9b      	subs	r3, r3, r2
 801c65e:	64fb      	str	r3, [r7, #76]	; 0x4c
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
 801c660:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801c664:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c666:	fb02 f303 	mul.w	r3, r2, r3
 801c66a:	68fa      	ldr	r2, [r7, #12]
 801c66c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
          const int in_y_origin =
 801c670:	1a9b      	subs	r3, r3, r2
 801c672:	64bb      	str	r3, [r7, #72]	; 0x48
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
 801c674:	2300      	movs	r3, #0
 801c676:	617b      	str	r3, [r7, #20]
 801c678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c67a:	425b      	negs	r3, r3
 801c67c:	61bb      	str	r3, [r7, #24]
 801c67e:	f107 0218 	add.w	r2, r7, #24
 801c682:	f107 0314 	add.w	r3, r7, #20
 801c686:	4611      	mov	r1, r2
 801c688:	4618      	mov	r0, r3
 801c68a:	f7f9 fb6d 	bl	8015d68 <_ZSt3maxIiERKT_S2_S2_>
 801c68e:	4603      	mov	r3, r0
 801c690:	681b      	ldr	r3, [r3, #0]
 801c692:	647b      	str	r3, [r7, #68]	; 0x44
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
 801c694:	68fb      	ldr	r3, [r7, #12]
 801c696:	f103 0018 	add.w	r0, r3, #24
 801c69a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801c69c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c69e:	1ad3      	subs	r3, r2, r3
 801c6a0:	61fb      	str	r3, [r7, #28]
 801c6a2:	f107 031c 	add.w	r3, r7, #28
 801c6a6:	4619      	mov	r1, r3
 801c6a8:	f000 fb82 	bl	801cdb0 <_ZSt3minIiERKT_S2_S2_>
 801c6ac:	4603      	mov	r3, r0
 801c6ae:	681b      	ldr	r3, [r3, #0]
 801c6b0:	643b      	str	r3, [r7, #64]	; 0x40
          const int filter_y_start = std::max(0, -in_y_origin);
 801c6b2:	2300      	movs	r3, #0
 801c6b4:	623b      	str	r3, [r7, #32]
 801c6b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c6b8:	425b      	negs	r3, r3
 801c6ba:	627b      	str	r3, [r7, #36]	; 0x24
 801c6bc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801c6c0:	f107 0320 	add.w	r3, r7, #32
 801c6c4:	4611      	mov	r1, r2
 801c6c6:	4618      	mov	r0, r3
 801c6c8:	f7f9 fb4e 	bl	8015d68 <_ZSt3maxIiERKT_S2_S2_>
 801c6cc:	4603      	mov	r3, r0
 801c6ce:	681b      	ldr	r3, [r3, #0]
 801c6d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
 801c6d2:	68fb      	ldr	r3, [r7, #12]
 801c6d4:	f103 0014 	add.w	r0, r3, #20
 801c6d8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801c6da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c6dc:	1ad3      	subs	r3, r2, r3
 801c6de:	62bb      	str	r3, [r7, #40]	; 0x28
 801c6e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c6e4:	4619      	mov	r1, r3
 801c6e6:	f000 fb63 	bl	801cdb0 <_ZSt3minIiERKT_S2_S2_>
 801c6ea:	4603      	mov	r3, r0
 801c6ec:	681b      	ldr	r3, [r3, #0]
 801c6ee:	63bb      	str	r3, [r7, #56]	; 0x38
          uint8 max = 0;
 801c6f0:	2300      	movs	r3, #0
 801c6f2:	74fb      	strb	r3, [r7, #19]
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 801c6f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c6f6:	677b      	str	r3, [r7, #116]	; 0x74
 801c6f8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801c6fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c6fc:	429a      	cmp	r2, r3
 801c6fe:	da2b      	bge.n	801c758 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1f0>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 801c700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c702:	673b      	str	r3, [r7, #112]	; 0x70
 801c704:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801c706:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c708:	429a      	cmp	r2, r3
 801c70a:	da21      	bge.n	801c750 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1e8>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
 801c70c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c70e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c710:	4413      	add	r3, r2
 801c712:	637b      	str	r3, [r7, #52]	; 0x34
              const int in_y = in_y_origin + filter_y;
 801c714:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c716:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801c718:	4413      	add	r3, r2
 801c71a:	633b      	str	r3, [r7, #48]	; 0x30
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
 801c71c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801c71e:	9300      	str	r3, [sp, #0]
 801c720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c722:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c724:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 801c728:	68b8      	ldr	r0, [r7, #8]
 801c72a:	f7fc fdc9 	bl	80192c0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 801c72e:	4603      	mov	r3, r0
 801c730:	461a      	mov	r2, r3
 801c732:	687b      	ldr	r3, [r7, #4]
 801c734:	441a      	add	r2, r3
 801c736:	f107 0313 	add.w	r3, r7, #19
 801c73a:	4611      	mov	r1, r2
 801c73c:	4618      	mov	r0, r3
 801c73e:	f000 fb4b 	bl	801cdd8 <_ZSt3maxIhERKT_S2_S2_>
 801c742:	4603      	mov	r3, r0
              max = std::max(
 801c744:	781b      	ldrb	r3, [r3, #0]
 801c746:	74fb      	strb	r3, [r7, #19]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 801c748:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c74a:	3301      	adds	r3, #1
 801c74c:	673b      	str	r3, [r7, #112]	; 0x70
 801c74e:	e7d9      	b.n	801c704 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x19c>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 801c750:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801c752:	3301      	adds	r3, #1
 801c754:	677b      	str	r3, [r7, #116]	; 0x74
 801c756:	e7cf      	b.n	801c6f8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x190>
            }
          }
          max = std::max<uint8>(max, params.quantized_activation_min);
 801c758:	68fb      	ldr	r3, [r7, #12]
 801c75a:	69db      	ldr	r3, [r3, #28]
 801c75c:	b2db      	uxtb	r3, r3
 801c75e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 801c762:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 801c766:	f107 0313 	add.w	r3, r7, #19
 801c76a:	4611      	mov	r1, r2
 801c76c:	4618      	mov	r0, r3
 801c76e:	f000 fb33 	bl	801cdd8 <_ZSt3maxIhERKT_S2_S2_>
 801c772:	4603      	mov	r3, r0
 801c774:	781b      	ldrb	r3, [r3, #0]
 801c776:	74fb      	strb	r3, [r7, #19]
          max = std::min<uint8>(max, params.quantized_activation_max);
 801c778:	68fb      	ldr	r3, [r7, #12]
 801c77a:	6a1b      	ldr	r3, [r3, #32]
 801c77c:	b2db      	uxtb	r3, r3
 801c77e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801c782:	f107 022f 	add.w	r2, r7, #47	; 0x2f
 801c786:	f107 0313 	add.w	r3, r7, #19
 801c78a:	4611      	mov	r1, r2
 801c78c:	4618      	mov	r0, r3
 801c78e:	f000 fb37 	bl	801ce00 <_ZSt3minIhERKT_S2_S2_>
 801c792:	4603      	mov	r3, r0
 801c794:	781b      	ldrb	r3, [r3, #0]
 801c796:	74fb      	strb	r3, [r7, #19]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 801c798:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801c79a:	9300      	str	r3, [sp, #0]
 801c79c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801c79e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801c7a2:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 801c7a6:	6838      	ldr	r0, [r7, #0]
 801c7a8:	f7fc fd8a 	bl	80192c0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 801c7ac:	4603      	mov	r3, r0
 801c7ae:	461a      	mov	r2, r3
 801c7b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c7b4:	4413      	add	r3, r2
 801c7b6:	7cfa      	ldrb	r2, [r7, #19]
 801c7b8:	701a      	strb	r2, [r3, #0]
        for (int channel = 0; channel < depth; ++channel) {
 801c7ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801c7bc:	3301      	adds	r3, #1
 801c7be:	67bb      	str	r3, [r7, #120]	; 0x78
 801c7c0:	e740      	b.n	801c644 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xdc>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 801c7c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801c7c4:	3301      	adds	r3, #1
 801c7c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 801c7c8:	e735      	b.n	801c636 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xce>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 801c7ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801c7ce:	3301      	adds	r3, #1
 801c7d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801c7d4:	e727      	b.n	801c626 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xbe>
  for (int batch = 0; batch < batches; ++batch) {
 801c7d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801c7da:	3301      	adds	r3, #1
 801c7dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801c7e0:	e718      	b.n	801c614 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xac>
              static_cast<uint8>(max);
        }
      }
    }
  }
}
 801c7e2:	bf00      	nop
 801c7e4:	3788      	adds	r7, #136	; 0x88
 801c7e6:	46bd      	mov	sp, r7
 801c7e8:	bd80      	pop	{r7, pc}

0801c7ea <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa>:
  }
}

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const int8* input_data, const RuntimeShape& output_shape,
                    int8* output_data) {
 801c7ea:	b590      	push	{r4, r7, lr}
 801c7ec:	b0a5      	sub	sp, #148	; 0x94
 801c7ee:	af02      	add	r7, sp, #8
 801c7f0:	60f8      	str	r0, [r7, #12]
 801c7f2:	60b9      	str	r1, [r7, #8]
 801c7f4:	607a      	str	r2, [r7, #4]
 801c7f6:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_LE(params.quantized_activation_min,
 801c7f8:	68fb      	ldr	r3, [r7, #12]
 801c7fa:	69da      	ldr	r2, [r3, #28]
 801c7fc:	68fb      	ldr	r3, [r7, #12]
 801c7fe:	6a1b      	ldr	r3, [r3, #32]
 801c800:	429a      	cmp	r2, r3
 801c802:	dd01      	ble.n	801c808 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1e>
 801c804:	f002 fb24 	bl	801ee50 <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_GE(params.quantized_activation_min,
 801c808:	68fb      	ldr	r3, [r7, #12]
 801c80a:	69dc      	ldr	r4, [r3, #28]
 801c80c:	f7f8 fee6 	bl	80155dc <_ZNSt14numeric_limitsIaE3minEv>
 801c810:	4603      	mov	r3, r0
 801c812:	429c      	cmp	r4, r3
 801c814:	da01      	bge.n	801c81a <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x30>
 801c816:	f002 fb1b 	bl	801ee50 <abort>
                   std::numeric_limits<int8_t>::min());
  TFLITE_DCHECK_LE(params.quantized_activation_max,
 801c81a:	68fb      	ldr	r3, [r7, #12]
 801c81c:	6a1c      	ldr	r4, [r3, #32]
 801c81e:	f7f8 fee6 	bl	80155ee <_ZNSt14numeric_limitsIaE3maxEv>
 801c822:	4603      	mov	r3, r0
 801c824:	429c      	cmp	r4, r3
 801c826:	dd01      	ble.n	801c82c <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x42>
 801c828:	f002 fb12 	bl	801ee50 <abort>
                   std::numeric_limits<int8_t>::max());
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 801c82c:	68b8      	ldr	r0, [r7, #8]
 801c82e:	f7fc fb28 	bl	8018e82 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801c832:	4603      	mov	r3, r0
 801c834:	2b04      	cmp	r3, #4
 801c836:	d001      	beq.n	801c83c <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x52>
 801c838:	f002 fb0a 	bl	801ee50 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 801c83c:	6838      	ldr	r0, [r7, #0]
 801c83e:	f7fc fb20 	bl	8018e82 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801c842:	4603      	mov	r3, r0
 801c844:	2b04      	cmp	r3, #4
 801c846:	d001      	beq.n	801c84c <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x62>
 801c848:	f002 fb02 	bl	801ee50 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 801c84c:	2300      	movs	r3, #0
 801c84e:	683a      	ldr	r2, [r7, #0]
 801c850:	2100      	movs	r1, #0
 801c852:	68b8      	ldr	r0, [r7, #8]
 801c854:	f7fc ff06 	bl	8019664 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801c858:	66f8      	str	r0, [r7, #108]	; 0x6c
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 801c85a:	2303      	movs	r3, #3
 801c85c:	683a      	ldr	r2, [r7, #0]
 801c85e:	2103      	movs	r1, #3
 801c860:	68b8      	ldr	r0, [r7, #8]
 801c862:	f7fc feff 	bl	8019664 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801c866:	66b8      	str	r0, [r7, #104]	; 0x68
  const int input_height = input_shape.Dims(1);
 801c868:	2101      	movs	r1, #1
 801c86a:	68b8      	ldr	r0, [r7, #8]
 801c86c:	f7fc fb15 	bl	8018e9a <_ZNK6tflite12RuntimeShape4DimsEi>
 801c870:	6678      	str	r0, [r7, #100]	; 0x64
  const int input_width = input_shape.Dims(2);
 801c872:	2102      	movs	r1, #2
 801c874:	68b8      	ldr	r0, [r7, #8]
 801c876:	f7fc fb10 	bl	8018e9a <_ZNK6tflite12RuntimeShape4DimsEi>
 801c87a:	6638      	str	r0, [r7, #96]	; 0x60
  const int output_height = output_shape.Dims(1);
 801c87c:	2101      	movs	r1, #1
 801c87e:	6838      	ldr	r0, [r7, #0]
 801c880:	f7fc fb0b 	bl	8018e9a <_ZNK6tflite12RuntimeShape4DimsEi>
 801c884:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_width = output_shape.Dims(2);
 801c886:	2102      	movs	r1, #2
 801c888:	6838      	ldr	r0, [r7, #0]
 801c88a:	f7fc fb06 	bl	8018e9a <_ZNK6tflite12RuntimeShape4DimsEi>
 801c88e:	65b8      	str	r0, [r7, #88]	; 0x58
  const int stride_height = params.stride_height;
 801c890:	68fb      	ldr	r3, [r7, #12]
 801c892:	68db      	ldr	r3, [r3, #12]
 801c894:	657b      	str	r3, [r7, #84]	; 0x54
  const int stride_width = params.stride_width;
 801c896:	68fb      	ldr	r3, [r7, #12]
 801c898:	691b      	ldr	r3, [r3, #16]
 801c89a:	653b      	str	r3, [r7, #80]	; 0x50
  for (int batch = 0; batch < batches; ++batch) {
 801c89c:	2300      	movs	r3, #0
 801c89e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801c8a2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801c8a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c8a8:	429a      	cmp	r2, r3
 801c8aa:	f280 80e5 	bge.w	801ca78 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x28e>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 801c8ae:	2300      	movs	r3, #0
 801c8b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801c8b4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801c8b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c8ba:	429a      	cmp	r2, r3
 801c8bc:	f280 80d6 	bge.w	801ca6c <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x282>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 801c8c0:	2300      	movs	r3, #0
 801c8c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 801c8c4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801c8c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801c8c8:	429a      	cmp	r2, r3
 801c8ca:	f280 80c9 	bge.w	801ca60 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x276>
        for (int channel = 0; channel < depth; ++channel) {
 801c8ce:	2300      	movs	r3, #0
 801c8d0:	67bb      	str	r3, [r7, #120]	; 0x78
 801c8d2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801c8d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c8d6:	429a      	cmp	r2, r3
 801c8d8:	f280 80be 	bge.w	801ca58 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x26e>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
 801c8dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801c8de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801c8e0:	fb02 f303 	mul.w	r3, r2, r3
 801c8e4:	68fa      	ldr	r2, [r7, #12]
 801c8e6:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
          const int in_x_origin =
 801c8ea:	1a9b      	subs	r3, r3, r2
 801c8ec:	64fb      	str	r3, [r7, #76]	; 0x4c
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
 801c8ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801c8f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c8f4:	fb02 f303 	mul.w	r3, r2, r3
 801c8f8:	68fa      	ldr	r2, [r7, #12]
 801c8fa:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
          const int in_y_origin =
 801c8fe:	1a9b      	subs	r3, r3, r2
 801c900:	64bb      	str	r3, [r7, #72]	; 0x48
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
 801c902:	2300      	movs	r3, #0
 801c904:	617b      	str	r3, [r7, #20]
 801c906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c908:	425b      	negs	r3, r3
 801c90a:	61bb      	str	r3, [r7, #24]
 801c90c:	f107 0218 	add.w	r2, r7, #24
 801c910:	f107 0314 	add.w	r3, r7, #20
 801c914:	4611      	mov	r1, r2
 801c916:	4618      	mov	r0, r3
 801c918:	f7f9 fa26 	bl	8015d68 <_ZSt3maxIiERKT_S2_S2_>
 801c91c:	4603      	mov	r3, r0
 801c91e:	681b      	ldr	r3, [r3, #0]
 801c920:	647b      	str	r3, [r7, #68]	; 0x44
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
 801c922:	68fb      	ldr	r3, [r7, #12]
 801c924:	f103 0018 	add.w	r0, r3, #24
 801c928:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801c92a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c92c:	1ad3      	subs	r3, r2, r3
 801c92e:	61fb      	str	r3, [r7, #28]
 801c930:	f107 031c 	add.w	r3, r7, #28
 801c934:	4619      	mov	r1, r3
 801c936:	f000 fa3b 	bl	801cdb0 <_ZSt3minIiERKT_S2_S2_>
 801c93a:	4603      	mov	r3, r0
 801c93c:	681b      	ldr	r3, [r3, #0]
 801c93e:	643b      	str	r3, [r7, #64]	; 0x40
          const int filter_y_start = std::max(0, -in_y_origin);
 801c940:	2300      	movs	r3, #0
 801c942:	623b      	str	r3, [r7, #32]
 801c944:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c946:	425b      	negs	r3, r3
 801c948:	627b      	str	r3, [r7, #36]	; 0x24
 801c94a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801c94e:	f107 0320 	add.w	r3, r7, #32
 801c952:	4611      	mov	r1, r2
 801c954:	4618      	mov	r0, r3
 801c956:	f7f9 fa07 	bl	8015d68 <_ZSt3maxIiERKT_S2_S2_>
 801c95a:	4603      	mov	r3, r0
 801c95c:	681b      	ldr	r3, [r3, #0]
 801c95e:	63fb      	str	r3, [r7, #60]	; 0x3c
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
 801c960:	68fb      	ldr	r3, [r7, #12]
 801c962:	f103 0014 	add.w	r0, r3, #20
 801c966:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801c968:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c96a:	1ad3      	subs	r3, r2, r3
 801c96c:	62bb      	str	r3, [r7, #40]	; 0x28
 801c96e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c972:	4619      	mov	r1, r3
 801c974:	f000 fa1c 	bl	801cdb0 <_ZSt3minIiERKT_S2_S2_>
 801c978:	4603      	mov	r3, r0
 801c97a:	681b      	ldr	r3, [r3, #0]
 801c97c:	63bb      	str	r3, [r7, #56]	; 0x38
          int8_t max = std::numeric_limits<int8_t>::lowest();
 801c97e:	2380      	movs	r3, #128	; 0x80
 801c980:	74fb      	strb	r3, [r7, #19]
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 801c982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c984:	677b      	str	r3, [r7, #116]	; 0x74
 801c986:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801c988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c98a:	429a      	cmp	r2, r3
 801c98c:	da2c      	bge.n	801c9e8 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1fe>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 801c98e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c990:	673b      	str	r3, [r7, #112]	; 0x70
 801c992:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801c994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c996:	429a      	cmp	r2, r3
 801c998:	da22      	bge.n	801c9e0 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1f6>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
 801c99a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c99c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c99e:	4413      	add	r3, r2
 801c9a0:	637b      	str	r3, [r7, #52]	; 0x34
              const int in_y = in_y_origin + filter_y;
 801c9a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c9a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801c9a6:	4413      	add	r3, r2
 801c9a8:	633b      	str	r3, [r7, #48]	; 0x30
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
 801c9aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801c9ac:	9300      	str	r3, [sp, #0]
 801c9ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c9b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c9b2:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 801c9b6:	68b8      	ldr	r0, [r7, #8]
 801c9b8:	f7fc fc82 	bl	80192c0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 801c9bc:	4603      	mov	r3, r0
 801c9be:	461a      	mov	r2, r3
 801c9c0:	687b      	ldr	r3, [r7, #4]
 801c9c2:	441a      	add	r2, r3
 801c9c4:	f107 0313 	add.w	r3, r7, #19
 801c9c8:	4611      	mov	r1, r2
 801c9ca:	4618      	mov	r0, r3
 801c9cc:	f000 fa2c 	bl	801ce28 <_ZSt3maxIaERKT_S2_S2_>
 801c9d0:	4603      	mov	r3, r0
              max = std::max(
 801c9d2:	f993 3000 	ldrsb.w	r3, [r3]
 801c9d6:	74fb      	strb	r3, [r7, #19]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 801c9d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c9da:	3301      	adds	r3, #1
 801c9dc:	673b      	str	r3, [r7, #112]	; 0x70
 801c9de:	e7d8      	b.n	801c992 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1a8>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 801c9e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801c9e2:	3301      	adds	r3, #1
 801c9e4:	677b      	str	r3, [r7, #116]	; 0x74
 801c9e6:	e7ce      	b.n	801c986 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x19c>
            }
          }
          max = std::max<int8_t>(max, params.quantized_activation_min);
 801c9e8:	68fb      	ldr	r3, [r7, #12]
 801c9ea:	69db      	ldr	r3, [r3, #28]
 801c9ec:	b25b      	sxtb	r3, r3
 801c9ee:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 801c9f2:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 801c9f6:	f107 0313 	add.w	r3, r7, #19
 801c9fa:	4611      	mov	r1, r2
 801c9fc:	4618      	mov	r0, r3
 801c9fe:	f000 fa13 	bl	801ce28 <_ZSt3maxIaERKT_S2_S2_>
 801ca02:	4603      	mov	r3, r0
 801ca04:	f993 3000 	ldrsb.w	r3, [r3]
 801ca08:	74fb      	strb	r3, [r7, #19]
          max = std::min<int8_t>(max, params.quantized_activation_max);
 801ca0a:	68fb      	ldr	r3, [r7, #12]
 801ca0c:	6a1b      	ldr	r3, [r3, #32]
 801ca0e:	b25b      	sxtb	r3, r3
 801ca10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801ca14:	f107 022f 	add.w	r2, r7, #47	; 0x2f
 801ca18:	f107 0313 	add.w	r3, r7, #19
 801ca1c:	4611      	mov	r1, r2
 801ca1e:	4618      	mov	r0, r3
 801ca20:	f000 fa18 	bl	801ce54 <_ZSt3minIaERKT_S2_S2_>
 801ca24:	4603      	mov	r3, r0
 801ca26:	f993 3000 	ldrsb.w	r3, [r3]
 801ca2a:	74fb      	strb	r3, [r7, #19]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 801ca2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ca2e:	9300      	str	r3, [sp, #0]
 801ca30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801ca32:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801ca36:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 801ca3a:	6838      	ldr	r0, [r7, #0]
 801ca3c:	f7fc fc40 	bl	80192c0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 801ca40:	4603      	mov	r3, r0
 801ca42:	461a      	mov	r2, r3
 801ca44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801ca48:	4413      	add	r3, r2
 801ca4a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801ca4e:	701a      	strb	r2, [r3, #0]
        for (int channel = 0; channel < depth; ++channel) {
 801ca50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ca52:	3301      	adds	r3, #1
 801ca54:	67bb      	str	r3, [r7, #120]	; 0x78
 801ca56:	e73c      	b.n	801c8d2 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xe8>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 801ca58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801ca5a:	3301      	adds	r3, #1
 801ca5c:	67fb      	str	r3, [r7, #124]	; 0x7c
 801ca5e:	e731      	b.n	801c8c4 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xda>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 801ca60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801ca64:	3301      	adds	r3, #1
 801ca66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801ca6a:	e723      	b.n	801c8b4 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xca>
  for (int batch = 0; batch < batches; ++batch) {
 801ca6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801ca70:	3301      	adds	r3, #1
 801ca72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801ca76:	e714      	b.n	801c8a2 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xb8>
              static_cast<int8_t>(max);
        }
      }
    }
  }
}
 801ca78:	bf00      	nop
 801ca7a:	378c      	adds	r7, #140	; 0x8c
 801ca7c:	46bd      	mov	sp, r7
 801ca7e:	bd90      	pop	{r4, r7, pc}

0801ca80 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorSC_PNS3_6OpDataE>:
};

TfLiteStatus CalculateOpData(const TfLiteContext* context,
                             const TfLitePoolParams* params,
                             const TfLiteTensor* input,
                             const TfLiteTensor* output, OpData* data) {
 801ca80:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ca82:	b097      	sub	sp, #92	; 0x5c
 801ca84:	af08      	add	r7, sp, #32
 801ca86:	6278      	str	r0, [r7, #36]	; 0x24
 801ca88:	6239      	str	r1, [r7, #32]
 801ca8a:	61fa      	str	r2, [r7, #28]
 801ca8c:	61bb      	str	r3, [r7, #24]
  // input: batch, height, width, channel
  int height = SizeOfDimension(input, 1);
 801ca8e:	2101      	movs	r1, #1
 801ca90:	69f8      	ldr	r0, [r7, #28]
 801ca92:	f7f8 fde5 	bl	8015660 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 801ca96:	6378      	str	r0, [r7, #52]	; 0x34
  int width = SizeOfDimension(input, 2);
 801ca98:	2102      	movs	r1, #2
 801ca9a:	69f8      	ldr	r0, [r7, #28]
 801ca9c:	f7f8 fde0 	bl	8015660 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 801caa0:	6338      	str	r0, [r7, #48]	; 0x30

  int out_height, out_width;

  data->padding = ComputePaddingHeightWidth(
      params->stride_height, params->stride_width,
 801caa2:	6a3b      	ldr	r3, [r7, #32]
 801caa4:	689e      	ldr	r6, [r3, #8]
 801caa6:	6a3b      	ldr	r3, [r7, #32]
 801caa8:	685b      	ldr	r3, [r3, #4]
 801caaa:	607b      	str	r3, [r7, #4]
      /*dilation_rate_height=*/1,
      /*dilation_rate_width=*/1, height, width, params->filter_height,
 801caac:	6a3b      	ldr	r3, [r7, #32]
 801caae:	691b      	ldr	r3, [r3, #16]
      params->filter_width, params->padding, &out_height, &out_width);
 801cab0:	6a3a      	ldr	r2, [r7, #32]
 801cab2:	68d2      	ldr	r2, [r2, #12]
 801cab4:	6a39      	ldr	r1, [r7, #32]
 801cab6:	7809      	ldrb	r1, [r1, #0]
  data->padding = ComputePaddingHeightWidth(
 801cab8:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 801caba:	f107 0508 	add.w	r5, r7, #8
 801cabe:	f107 0028 	add.w	r0, r7, #40	; 0x28
 801cac2:	9007      	str	r0, [sp, #28]
 801cac4:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801cac8:	9006      	str	r0, [sp, #24]
 801caca:	9105      	str	r1, [sp, #20]
 801cacc:	9204      	str	r2, [sp, #16]
 801cace:	9303      	str	r3, [sp, #12]
 801cad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cad2:	9302      	str	r3, [sp, #8]
 801cad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cad6:	9301      	str	r3, [sp, #4]
 801cad8:	2301      	movs	r3, #1
 801cada:	9300      	str	r3, [sp, #0]
 801cadc:	2301      	movs	r3, #1
 801cade:	687a      	ldr	r2, [r7, #4]
 801cae0:	4631      	mov	r1, r6
 801cae2:	4628      	mov	r0, r5
 801cae4:	f7fd fb58 	bl	801a198 <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>
 801cae8:	f107 0308 	add.w	r3, r7, #8
 801caec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801caee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  return kTfLiteOk;
 801caf2:	2300      	movs	r3, #0
}
 801caf4:	4618      	mov	r0, r3
 801caf6:	373c      	adds	r7, #60	; 0x3c
 801caf8:	46bd      	mov	sp, r7
 801cafa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cafc <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_112MaxEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS3_6OpDataEPK12TfLiteTensorPSC_>:
  }
}

void MaxEvalFloat(TfLiteContext* context, TfLiteNode* node,
                  TfLitePoolParams* params, OpData* data,
                  const TfLiteTensor* input, TfLiteTensor* output) {
 801cafc:	b590      	push	{r4, r7, lr}
 801cafe:	b0a1      	sub	sp, #132	; 0x84
 801cb00:	af02      	add	r7, sp, #8
 801cb02:	60f8      	str	r0, [r7, #12]
 801cb04:	60b9      	str	r1, [r7, #8]
 801cb06:	607a      	str	r2, [r7, #4]
 801cb08:	603b      	str	r3, [r7, #0]
  float activation_min, activation_max;
  CalculateActivationRange(params->activation, &activation_min,
 801cb0a:	687b      	ldr	r3, [r7, #4]
 801cb0c:	7d1b      	ldrb	r3, [r3, #20]
 801cb0e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801cb12:	f107 0144 	add.w	r1, r7, #68	; 0x44
 801cb16:	4618      	mov	r0, r3
 801cb18:	f7fc fcbc 	bl	8019494 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &activation_max);

  tflite::PoolParams op_params;
  op_params.stride_height = params->stride_height;
 801cb1c:	687b      	ldr	r3, [r7, #4]
 801cb1e:	689b      	ldr	r3, [r3, #8]
 801cb20:	623b      	str	r3, [r7, #32]
  op_params.stride_width = params->stride_width;
 801cb22:	687b      	ldr	r3, [r7, #4]
 801cb24:	685b      	ldr	r3, [r3, #4]
 801cb26:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.filter_height = params->filter_height;
 801cb28:	687b      	ldr	r3, [r7, #4]
 801cb2a:	691b      	ldr	r3, [r3, #16]
 801cb2c:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.filter_width = params->filter_width;
 801cb2e:	687b      	ldr	r3, [r7, #4]
 801cb30:	68db      	ldr	r3, [r3, #12]
 801cb32:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.padding_values.height = data->padding.height;
 801cb34:	683b      	ldr	r3, [r7, #0]
 801cb36:	685b      	ldr	r3, [r3, #4]
 801cb38:	b21b      	sxth	r3, r3
 801cb3a:	833b      	strh	r3, [r7, #24]
  op_params.padding_values.width = data->padding.width;
 801cb3c:	683b      	ldr	r3, [r7, #0]
 801cb3e:	681b      	ldr	r3, [r3, #0]
 801cb40:	b21b      	sxth	r3, r3
 801cb42:	82fb      	strh	r3, [r7, #22]
  op_params.float_activation_min = activation_min;
 801cb44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cb46:	63bb      	str	r3, [r7, #56]	; 0x38
  op_params.float_activation_max = activation_max;
 801cb48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801cb4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  reference_ops::MaxPool(op_params, GetTensorShape(input),
 801cb4c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801cb50:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 801cb54:	4618      	mov	r0, r3
 801cb56:	f7fc fa55 	bl	8019004 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 801cb5a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 801cb5e:	f7fc faaa 	bl	80190b6 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 801cb62:	4604      	mov	r4, r0
                         GetTensorData<float>(input), GetTensorShape(output),
 801cb64:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801cb68:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 801cb6c:	4618      	mov	r0, r3
 801cb6e:	f7fc fa49 	bl	8019004 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::MaxPool(op_params, GetTensorShape(input),
 801cb72:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 801cb76:	f7fc faaf 	bl	80190d8 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 801cb7a:	4602      	mov	r2, r0
 801cb7c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801cb80:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801cb84:	f107 0014 	add.w	r0, r7, #20
 801cb88:	9200      	str	r2, [sp, #0]
 801cb8a:	4622      	mov	r2, r4
 801cb8c:	f7ff fbc8 	bl	801c320 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>
                         GetTensorData<float>(input), GetTensorShape(output),
 801cb90:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801cb94:	4618      	mov	r0, r3
 801cb96:	f7fc f95e 	bl	8018e56 <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::MaxPool(op_params, GetTensorShape(input),
 801cb9a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801cb9e:	4618      	mov	r0, r3
 801cba0:	f7fc f959 	bl	8018e56 <_ZN6tflite12RuntimeShapeD1Ev>
                         GetTensorData<float>(output));
}
 801cba4:	bf00      	nop
 801cba6:	377c      	adds	r7, #124	; 0x7c
 801cba8:	46bd      	mov	sp, r7
 801cbaa:	bd90      	pop	{r4, r7, pc}

0801cbac <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS3_6OpDataEPK12TfLiteTensorPSC_>:

void MaxEvalQuantized(TfLiteContext* context, TfLiteNode* node,
                      TfLitePoolParams* params, OpData* data,
                      const TfLiteTensor* input, TfLiteTensor* output) {
 801cbac:	b590      	push	{r4, r7, lr}
 801cbae:	b0ad      	sub	sp, #180	; 0xb4
 801cbb0:	af02      	add	r7, sp, #8
 801cbb2:	60f8      	str	r0, [r7, #12]
 801cbb4:	60b9      	str	r1, [r7, #8]
 801cbb6:	607a      	str	r2, [r7, #4]
 801cbb8:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(input->type == kTfLiteUInt8 || input->type == kTfLiteInt8);
 801cbba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801cbbe:	781b      	ldrb	r3, [r3, #0]
 801cbc0:	2b03      	cmp	r3, #3
 801cbc2:	d006      	beq.n	801cbd2 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS3_6OpDataEPK12TfLiteTensorPSC_+0x26>
 801cbc4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801cbc8:	781b      	ldrb	r3, [r3, #0]
 801cbca:	2b09      	cmp	r3, #9
 801cbcc:	d001      	beq.n	801cbd2 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS3_6OpDataEPK12TfLiteTensorPSC_+0x26>
 801cbce:	f002 f93f 	bl	801ee50 <abort>

  int32_t activation_min, activation_max;
  (void)CalculateActivationRangeQuantized(context, params->activation, output,
 801cbd2:	687b      	ldr	r3, [r7, #4]
 801cbd4:	7d19      	ldrb	r1, [r3, #20]
 801cbd6:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801cbda:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801cbde:	9300      	str	r3, [sp, #0]
 801cbe0:	4613      	mov	r3, r2
 801cbe2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801cbe6:	68f8      	ldr	r0, [r7, #12]
 801cbe8:	f7f9 f86a 	bl	8015cc0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
                                          &activation_min, &activation_max);

  tflite::PoolParams op_params;
  op_params.stride_height = params->stride_height;
 801cbec:	687b      	ldr	r3, [r7, #4]
 801cbee:	689b      	ldr	r3, [r3, #8]
 801cbf0:	623b      	str	r3, [r7, #32]
  op_params.stride_width = params->stride_width;
 801cbf2:	687b      	ldr	r3, [r7, #4]
 801cbf4:	685b      	ldr	r3, [r3, #4]
 801cbf6:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.filter_height = params->filter_height;
 801cbf8:	687b      	ldr	r3, [r7, #4]
 801cbfa:	691b      	ldr	r3, [r3, #16]
 801cbfc:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.filter_width = params->filter_width;
 801cbfe:	687b      	ldr	r3, [r7, #4]
 801cc00:	68db      	ldr	r3, [r3, #12]
 801cc02:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.padding_values.height = data->padding.height;
 801cc04:	683b      	ldr	r3, [r7, #0]
 801cc06:	685b      	ldr	r3, [r3, #4]
 801cc08:	b21b      	sxth	r3, r3
 801cc0a:	833b      	strh	r3, [r7, #24]
  op_params.padding_values.width = data->padding.width;
 801cc0c:	683b      	ldr	r3, [r7, #0]
 801cc0e:	681b      	ldr	r3, [r3, #0]
 801cc10:	b21b      	sxth	r3, r3
 801cc12:	82fb      	strh	r3, [r7, #22]
  op_params.quantized_activation_min = activation_min;
 801cc14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cc16:	633b      	str	r3, [r7, #48]	; 0x30
  op_params.quantized_activation_max = activation_max;
 801cc18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801cc1a:	637b      	str	r3, [r7, #52]	; 0x34

  if (input->type == kTfLiteUInt8) {
 801cc1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801cc20:	781b      	ldrb	r3, [r3, #0]
 801cc22:	2b03      	cmp	r3, #3
 801cc24:	d12c      	bne.n	801cc80 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS3_6OpDataEPK12TfLiteTensorPSC_+0xd4>
    reference_ops::MaxPool(
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
 801cc26:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801cc2a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 801cc2e:	4618      	mov	r0, r3
 801cc30:	f7fc f9e8 	bl	8019004 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    reference_ops::MaxPool(
 801cc34:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 801cc38:	f7fc fa81 	bl	801913e <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 801cc3c:	4604      	mov	r4, r0
        GetTensorShape(output), GetTensorData<uint8_t>(output));
 801cc3e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801cc42:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 801cc46:	4618      	mov	r0, r3
 801cc48:	f7fc f9dc 	bl	8019004 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    reference_ops::MaxPool(
 801cc4c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 801cc50:	f7fc fa86 	bl	8019160 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 801cc54:	4602      	mov	r2, r0
 801cc56:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801cc5a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801cc5e:	f107 0014 	add.w	r0, r7, #20
 801cc62:	9200      	str	r2, [sp, #0]
 801cc64:	4622      	mov	r2, r4
 801cc66:	f7ff fc7f 	bl	801c568 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>
        GetTensorShape(output), GetTensorData<uint8_t>(output));
 801cc6a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801cc6e:	4618      	mov	r0, r3
 801cc70:	f7fc f8f1 	bl	8018e56 <_ZN6tflite12RuntimeShapeD1Ev>
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
 801cc74:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801cc78:	4618      	mov	r0, r3
 801cc7a:	f7fc f8ec 	bl	8018e56 <_ZN6tflite12RuntimeShapeD1Ev>
  } else {
    reference_integer_ops::MaxPool(
        op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
        GetTensorShape(output), GetTensorData<int8_t>(output));
  }
}
 801cc7e:	e02b      	b.n	801ccd8 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS3_6OpDataEPK12TfLiteTensorPSC_+0x12c>
        op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
 801cc80:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801cc84:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 801cc88:	4618      	mov	r0, r3
 801cc8a:	f7fc f9bb 	bl	8019004 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    reference_integer_ops::MaxPool(
 801cc8e:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 801cc92:	f7fc fa32 	bl	80190fa <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 801cc96:	4604      	mov	r4, r0
        GetTensorShape(output), GetTensorData<int8_t>(output));
 801cc98:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801cc9c:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 801cca0:	4618      	mov	r0, r3
 801cca2:	f7fc f9af 	bl	8019004 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    reference_integer_ops::MaxPool(
 801cca6:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 801ccaa:	f7fc fa37 	bl	801911c <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 801ccae:	4602      	mov	r2, r0
 801ccb0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801ccb4:	f107 0178 	add.w	r1, r7, #120	; 0x78
 801ccb8:	f107 0014 	add.w	r0, r7, #20
 801ccbc:	9200      	str	r2, [sp, #0]
 801ccbe:	4622      	mov	r2, r4
 801ccc0:	f7ff fd93 	bl	801c7ea <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa>
        GetTensorShape(output), GetTensorData<int8_t>(output));
 801ccc4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801ccc8:	4618      	mov	r0, r3
 801ccca:	f7fc f8c4 	bl	8018e56 <_ZN6tflite12RuntimeShapeD1Ev>
        op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
 801ccce:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801ccd2:	4618      	mov	r0, r3
 801ccd4:	f7fc f8bf 	bl	8018e56 <_ZN6tflite12RuntimeShapeD1Ev>
}
 801ccd8:	bf00      	nop
 801ccda:	37ac      	adds	r7, #172	; 0xac
 801ccdc:	46bd      	mov	sp, r7
 801ccde:	bd90      	pop	{r4, r7, pc}

0801cce0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode>:
      return kTfLiteError;
  }
  return kTfLiteOk;
}

TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
 801cce0:	b5b0      	push	{r4, r5, r7, lr}
 801cce2:	b08c      	sub	sp, #48	; 0x30
 801cce4:	af02      	add	r7, sp, #8
 801cce6:	6078      	str	r0, [r7, #4]
 801cce8:	6039      	str	r1, [r7, #0]
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
 801ccea:	683b      	ldr	r3, [r7, #0]
 801ccec:	695b      	ldr	r3, [r3, #20]
 801ccee:	627b      	str	r3, [r7, #36]	; 0x24
  OpData data;

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 801ccf0:	687b      	ldr	r3, [r7, #4]
 801ccf2:	2200      	movs	r2, #0
 801ccf4:	6839      	ldr	r1, [r7, #0]
 801ccf6:	4618      	mov	r0, r3
 801ccf8:	f7fc f9a2 	bl	8019040 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801ccfc:	6238      	str	r0, [r7, #32]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 801ccfe:	687b      	ldr	r3, [r7, #4]
 801cd00:	2200      	movs	r2, #0
 801cd02:	6839      	ldr	r1, [r7, #0]
 801cd04:	4618      	mov	r0, r3
 801cd06:	f7fc f9b3 	bl	8019070 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 801cd0a:	61f8      	str	r0, [r7, #28]

  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, &data));
 801cd0c:	6878      	ldr	r0, [r7, #4]
 801cd0e:	f107 0308 	add.w	r3, r7, #8
 801cd12:	9300      	str	r3, [sp, #0]
 801cd14:	69fb      	ldr	r3, [r7, #28]
 801cd16:	6a3a      	ldr	r2, [r7, #32]
 801cd18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801cd1a:	f7ff feb1 	bl	801ca80 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorSC_PNS3_6OpDataE>
 801cd1e:	4603      	mov	r3, r0
 801cd20:	76fb      	strb	r3, [r7, #27]
 801cd22:	7efb      	ldrb	r3, [r7, #27]
 801cd24:	2b00      	cmp	r3, #0
 801cd26:	d001      	beq.n	801cd2c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x4c>
 801cd28:	7efb      	ldrb	r3, [r7, #27]
 801cd2a:	e031      	b.n	801cd90 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0>

  switch (input->type) {
 801cd2c:	6a3b      	ldr	r3, [r7, #32]
 801cd2e:	781b      	ldrb	r3, [r3, #0]
 801cd30:	2b03      	cmp	r3, #3
 801cd32:	d010      	beq.n	801cd56 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x76>
 801cd34:	2b09      	cmp	r3, #9
 801cd36:	d00e      	beq.n	801cd56 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x76>
 801cd38:	2b01      	cmp	r3, #1
 801cd3a:	d119      	bne.n	801cd70 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x90>
    case kTfLiteFloat32:
      MaxEvalFloat(context, node, params, &data, input, output);
 801cd3c:	6878      	ldr	r0, [r7, #4]
 801cd3e:	f107 0208 	add.w	r2, r7, #8
 801cd42:	69fb      	ldr	r3, [r7, #28]
 801cd44:	9301      	str	r3, [sp, #4]
 801cd46:	6a3b      	ldr	r3, [r7, #32]
 801cd48:	9300      	str	r3, [sp, #0]
 801cd4a:	4613      	mov	r3, r2
 801cd4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cd4e:	6839      	ldr	r1, [r7, #0]
 801cd50:	f7ff fed4 	bl	801cafc <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_112MaxEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS3_6OpDataEPK12TfLiteTensorPSC_>
      break;
 801cd54:	e01b      	b.n	801cd8e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xae>
    case kTfLiteUInt8:
    case kTfLiteInt8:
      MaxEvalQuantized(context, node, params, &data, input, output);
 801cd56:	6878      	ldr	r0, [r7, #4]
 801cd58:	f107 0208 	add.w	r2, r7, #8
 801cd5c:	69fb      	ldr	r3, [r7, #28]
 801cd5e:	9301      	str	r3, [sp, #4]
 801cd60:	6a3b      	ldr	r3, [r7, #32]
 801cd62:	9300      	str	r3, [sp, #0]
 801cd64:	4613      	mov	r3, r2
 801cd66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cd68:	6839      	ldr	r1, [r7, #0]
 801cd6a:	f7ff ff1f 	bl	801cbac <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS3_6OpDataEPK12TfLiteTensorPSC_>
      break;
 801cd6e:	e00e      	b.n	801cd8e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xae>
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported.",
 801cd70:	687b      	ldr	r3, [r7, #4]
 801cd72:	695c      	ldr	r4, [r3, #20]
 801cd74:	687d      	ldr	r5, [r7, #4]
 801cd76:	6a3b      	ldr	r3, [r7, #32]
 801cd78:	781b      	ldrb	r3, [r3, #0]
 801cd7a:	4618      	mov	r0, r3
 801cd7c:	f7e8 fac8 	bl	8005310 <TfLiteTypeGetName>
 801cd80:	4603      	mov	r3, r0
 801cd82:	461a      	mov	r2, r3
 801cd84:	4904      	ldr	r1, [pc, #16]	; (801cd98 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb8>)
 801cd86:	4628      	mov	r0, r5
 801cd88:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 801cd8a:	2301      	movs	r3, #1
 801cd8c:	e000      	b.n	801cd90 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0>
  }
  return kTfLiteOk;
 801cd8e:	2300      	movs	r3, #0
}
 801cd90:	4618      	mov	r0, r3
 801cd92:	3728      	adds	r7, #40	; 0x28
 801cd94:	46bd      	mov	sp, r7
 801cd96:	bdb0      	pop	{r4, r5, r7, pc}
 801cd98:	08024574 	.word	0x08024574

0801cd9c <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv>:
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}

TfLiteRegistration* Register_MAX_POOL_2D() {
 801cd9c:	b480      	push	{r7}
 801cd9e:	af00      	add	r7, sp, #0
                                 /*invoke=*/pooling::MaxEval,
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
 801cda0:	4b02      	ldr	r3, [pc, #8]	; (801cdac <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv+0x10>)
}
 801cda2:	4618      	mov	r0, r3
 801cda4:	46bd      	mov	sp, r7
 801cda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cdaa:	4770      	bx	lr
 801cdac:	20016d08 	.word	0x20016d08

0801cdb0 <_ZSt3minIiERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 801cdb0:	b480      	push	{r7}
 801cdb2:	b083      	sub	sp, #12
 801cdb4:	af00      	add	r7, sp, #0
 801cdb6:	6078      	str	r0, [r7, #4]
 801cdb8:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 801cdba:	683b      	ldr	r3, [r7, #0]
 801cdbc:	681a      	ldr	r2, [r3, #0]
 801cdbe:	687b      	ldr	r3, [r7, #4]
 801cdc0:	681b      	ldr	r3, [r3, #0]
 801cdc2:	429a      	cmp	r2, r3
 801cdc4:	da01      	bge.n	801cdca <_ZSt3minIiERKT_S2_S2_+0x1a>
	return __b;
 801cdc6:	683b      	ldr	r3, [r7, #0]
 801cdc8:	e000      	b.n	801cdcc <_ZSt3minIiERKT_S2_S2_+0x1c>
      return __a;
 801cdca:	687b      	ldr	r3, [r7, #4]
    }
 801cdcc:	4618      	mov	r0, r3
 801cdce:	370c      	adds	r7, #12
 801cdd0:	46bd      	mov	sp, r7
 801cdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cdd6:	4770      	bx	lr

0801cdd8 <_ZSt3maxIhERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 801cdd8:	b480      	push	{r7}
 801cdda:	b083      	sub	sp, #12
 801cddc:	af00      	add	r7, sp, #0
 801cdde:	6078      	str	r0, [r7, #4]
 801cde0:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 801cde2:	687b      	ldr	r3, [r7, #4]
 801cde4:	781a      	ldrb	r2, [r3, #0]
 801cde6:	683b      	ldr	r3, [r7, #0]
 801cde8:	781b      	ldrb	r3, [r3, #0]
 801cdea:	429a      	cmp	r2, r3
 801cdec:	d201      	bcs.n	801cdf2 <_ZSt3maxIhERKT_S2_S2_+0x1a>
	return __b;
 801cdee:	683b      	ldr	r3, [r7, #0]
 801cdf0:	e000      	b.n	801cdf4 <_ZSt3maxIhERKT_S2_S2_+0x1c>
      return __a;
 801cdf2:	687b      	ldr	r3, [r7, #4]
    }
 801cdf4:	4618      	mov	r0, r3
 801cdf6:	370c      	adds	r7, #12
 801cdf8:	46bd      	mov	sp, r7
 801cdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cdfe:	4770      	bx	lr

0801ce00 <_ZSt3minIhERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 801ce00:	b480      	push	{r7}
 801ce02:	b083      	sub	sp, #12
 801ce04:	af00      	add	r7, sp, #0
 801ce06:	6078      	str	r0, [r7, #4]
 801ce08:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 801ce0a:	683b      	ldr	r3, [r7, #0]
 801ce0c:	781a      	ldrb	r2, [r3, #0]
 801ce0e:	687b      	ldr	r3, [r7, #4]
 801ce10:	781b      	ldrb	r3, [r3, #0]
 801ce12:	429a      	cmp	r2, r3
 801ce14:	d201      	bcs.n	801ce1a <_ZSt3minIhERKT_S2_S2_+0x1a>
	return __b;
 801ce16:	683b      	ldr	r3, [r7, #0]
 801ce18:	e000      	b.n	801ce1c <_ZSt3minIhERKT_S2_S2_+0x1c>
      return __a;
 801ce1a:	687b      	ldr	r3, [r7, #4]
    }
 801ce1c:	4618      	mov	r0, r3
 801ce1e:	370c      	adds	r7, #12
 801ce20:	46bd      	mov	sp, r7
 801ce22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce26:	4770      	bx	lr

0801ce28 <_ZSt3maxIaERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 801ce28:	b480      	push	{r7}
 801ce2a:	b083      	sub	sp, #12
 801ce2c:	af00      	add	r7, sp, #0
 801ce2e:	6078      	str	r0, [r7, #4]
 801ce30:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 801ce32:	687b      	ldr	r3, [r7, #4]
 801ce34:	f993 2000 	ldrsb.w	r2, [r3]
 801ce38:	683b      	ldr	r3, [r7, #0]
 801ce3a:	f993 3000 	ldrsb.w	r3, [r3]
 801ce3e:	429a      	cmp	r2, r3
 801ce40:	da01      	bge.n	801ce46 <_ZSt3maxIaERKT_S2_S2_+0x1e>
	return __b;
 801ce42:	683b      	ldr	r3, [r7, #0]
 801ce44:	e000      	b.n	801ce48 <_ZSt3maxIaERKT_S2_S2_+0x20>
      return __a;
 801ce46:	687b      	ldr	r3, [r7, #4]
    }
 801ce48:	4618      	mov	r0, r3
 801ce4a:	370c      	adds	r7, #12
 801ce4c:	46bd      	mov	sp, r7
 801ce4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce52:	4770      	bx	lr

0801ce54 <_ZSt3minIaERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 801ce54:	b480      	push	{r7}
 801ce56:	b083      	sub	sp, #12
 801ce58:	af00      	add	r7, sp, #0
 801ce5a:	6078      	str	r0, [r7, #4]
 801ce5c:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 801ce5e:	683b      	ldr	r3, [r7, #0]
 801ce60:	f993 2000 	ldrsb.w	r2, [r3]
 801ce64:	687b      	ldr	r3, [r7, #4]
 801ce66:	f993 3000 	ldrsb.w	r3, [r3]
 801ce6a:	429a      	cmp	r2, r3
 801ce6c:	da01      	bge.n	801ce72 <_ZSt3minIaERKT_S2_S2_+0x1e>
	return __b;
 801ce6e:	683b      	ldr	r3, [r7, #0]
 801ce70:	e000      	b.n	801ce74 <_ZSt3minIaERKT_S2_S2_+0x20>
      return __a;
 801ce72:	687b      	ldr	r3, [r7, #4]
    }
 801ce74:	4618      	mov	r0, r3
 801ce76:	370c      	adds	r7, #12
 801ce78:	46bd      	mov	sp, r7
 801ce7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce7e:	4770      	bx	lr

0801ce80 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>:
    int32 x, int32 quantized_multiplier, int left_shift) {
 801ce80:	b580      	push	{r7, lr}
 801ce82:	b084      	sub	sp, #16
 801ce84:	af00      	add	r7, sp, #0
 801ce86:	60f8      	str	r0, [r7, #12]
 801ce88:	60b9      	str	r1, [r7, #8]
 801ce8a:	607a      	str	r2, [r7, #4]
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
 801ce8c:	68fa      	ldr	r2, [r7, #12]
 801ce8e:	687b      	ldr	r3, [r7, #4]
 801ce90:	fa02 f303 	lsl.w	r3, r2, r3
                                           quantized_multiplier);
 801ce94:	68b9      	ldr	r1, [r7, #8]
 801ce96:	4618      	mov	r0, r3
 801ce98:	f7fc f996 	bl	80191c8 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 801ce9c:	4603      	mov	r3, r0
}
 801ce9e:	4618      	mov	r0, r3
 801cea0:	3710      	adds	r7, #16
 801cea2:	46bd      	mov	sp, r7
 801cea4:	bd80      	pop	{r7, pc}

0801cea6 <_ZN6tflite13GetReciprocalEliPi>:
                                                     InputIntegerBits>(
      input_val);
}

inline int32 GetReciprocal(int32 x, int x_integer_digits,
                           int* num_bits_over_unit) {
 801cea6:	b580      	push	{r7, lr}
 801cea8:	b088      	sub	sp, #32
 801ceaa:	af00      	add	r7, sp, #0
 801ceac:	60f8      	str	r0, [r7, #12]
 801ceae:	60b9      	str	r1, [r7, #8]
 801ceb0:	607a      	str	r2, [r7, #4]
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32>(x));
 801ceb2:	68fb      	ldr	r3, [r7, #12]
 801ceb4:	4618      	mov	r0, r3
 801ceb6:	f7fe fd49 	bl	801b94c <_ZN6tflite17CountLeadingZerosImEEiT_>
 801ceba:	61f8      	str	r0, [r7, #28]
  // This is the number of bits to the left of the binary point above 1.0.
  // Consider x=1.25.  In that case shifted_scale=0.8 and
  // no later adjustment will be needed.
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
 801cebc:	68ba      	ldr	r2, [r7, #8]
 801cebe:	69fb      	ldr	r3, [r7, #28]
 801cec0:	1ad2      	subs	r2, r2, r3
 801cec2:	687b      	ldr	r3, [r7, #4]
 801cec4:	601a      	str	r2, [r3, #0]
  const int32 shifted_sum_minus_one =
      static_cast<int32>((static_cast<uint32>(x) << headroom_plus_one) -
 801cec6:	68fa      	ldr	r2, [r7, #12]
 801cec8:	69fb      	ldr	r3, [r7, #28]
 801ceca:	fa02 f303 	lsl.w	r3, r2, r3
 801cece:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  const int32 shifted_sum_minus_one =
 801ced2:	61bb      	str	r3, [r7, #24]
                         (static_cast<uint32>(1) << 31));

  gemmlowp::FixedPoint<int32, 0> shifted_scale =
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
          gemmlowp::FixedPoint<int32, 0>::FromRaw(shifted_sum_minus_one));
 801ced4:	69b8      	ldr	r0, [r7, #24]
 801ced6:	f7fe fe61 	bl	801bb9c <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801ceda:	4603      	mov	r3, r0
 801cedc:	4618      	mov	r0, r3
 801cede:	f7fe fe6f 	bl	801bbc0 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>
 801cee2:	4603      	mov	r3, r0
 801cee4:	617b      	str	r3, [r7, #20]
  return shifted_scale.raw();
 801cee6:	f107 0314 	add.w	r3, r7, #20
 801ceea:	4618      	mov	r0, r3
 801ceec:	f7fe fd40 	bl	801b970 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801cef0:	4603      	mov	r3, r0
 801cef2:	681b      	ldr	r3, [r3, #0]
}
 801cef4:	4618      	mov	r0, r3
 801cef6:	3720      	adds	r7, #32
 801cef8:	46bd      	mov	sp, r7
 801cefa:	bd80      	pop	{r7, pc}

0801cefc <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace tflite {
namespace reference_ops {

inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const float* input_data,
                    const RuntimeShape& output_shape, float* output_data) {
 801cefc:	b590      	push	{r4, r7, lr}
 801cefe:	ed2d 8b02 	vpush	{d8}
 801cf02:	b08f      	sub	sp, #60	; 0x3c
 801cf04:	af00      	add	r7, sp, #0
 801cf06:	60f8      	str	r0, [r7, #12]
 801cf08:	60b9      	str	r1, [r7, #8]
 801cf0a:	607a      	str	r2, [r7, #4]
 801cf0c:	603b      	str	r3, [r7, #0]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 801cf0e:	68b8      	ldr	r0, [r7, #8]
 801cf10:	f7fb ffb7 	bl	8018e82 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801cf14:	4603      	mov	r3, r0
 801cf16:	3b01      	subs	r3, #1
 801cf18:	623b      	str	r3, [r7, #32]
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 801cf1a:	683a      	ldr	r2, [r7, #0]
 801cf1c:	6a39      	ldr	r1, [r7, #32]
 801cf1e:	68b8      	ldr	r0, [r7, #8]
 801cf20:	f7fe fce5 	bl	801b8ee <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 801cf24:	61f8      	str	r0, [r7, #28]
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 801cf26:	6a3b      	ldr	r3, [r7, #32]
 801cf28:	683a      	ldr	r2, [r7, #0]
 801cf2a:	6a39      	ldr	r1, [r7, #32]
 801cf2c:	68b8      	ldr	r0, [r7, #8]
 801cf2e:	f7fc fb99 	bl	8019664 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801cf32:	61b8      	str	r0, [r7, #24]

  for (int i = 0; i < outer_size; ++i) {
 801cf34:	2300      	movs	r3, #0
 801cf36:	637b      	str	r3, [r7, #52]	; 0x34
 801cf38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801cf3a:	69fb      	ldr	r3, [r7, #28]
 801cf3c:	429a      	cmp	r2, r3
 801cf3e:	f280 808f 	bge.w	801d060 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x164>
    // Find max element value which we'll use to ensure numerical stability
    // taking advantage of the following equality:
    // exp(x[i])/sum(exp(x[i])) == exp(x[i]+C)/sum(exp(x[i]+C))
    float max = std::numeric_limits<float>::lowest();
 801cf42:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 801cf46:	617b      	str	r3, [r7, #20]
    for (int c = 0; c < depth; ++c) {
 801cf48:	2300      	movs	r3, #0
 801cf4a:	633b      	str	r3, [r7, #48]	; 0x30
 801cf4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801cf4e:	69bb      	ldr	r3, [r7, #24]
 801cf50:	429a      	cmp	r2, r3
 801cf52:	da15      	bge.n	801cf80 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x84>
      max = std::max(max, input_data[i * depth + c]);
 801cf54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cf56:	69ba      	ldr	r2, [r7, #24]
 801cf58:	fb02 f203 	mul.w	r2, r2, r3
 801cf5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cf5e:	4413      	add	r3, r2
 801cf60:	009b      	lsls	r3, r3, #2
 801cf62:	687a      	ldr	r2, [r7, #4]
 801cf64:	441a      	add	r2, r3
 801cf66:	f107 0314 	add.w	r3, r7, #20
 801cf6a:	4611      	mov	r1, r2
 801cf6c:	4618      	mov	r0, r3
 801cf6e:	f7f8 facc 	bl	801550a <_ZSt3maxIfERKT_S2_S2_>
 801cf72:	4603      	mov	r3, r0
 801cf74:	681b      	ldr	r3, [r3, #0]
 801cf76:	617b      	str	r3, [r7, #20]
    for (int c = 0; c < depth; ++c) {
 801cf78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cf7a:	3301      	adds	r3, #1
 801cf7c:	633b      	str	r3, [r7, #48]	; 0x30
 801cf7e:	e7e5      	b.n	801cf4c <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x50>
    }

    // Compute sum.
    float sum = 0.f;
 801cf80:	f04f 0300 	mov.w	r3, #0
 801cf84:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 801cf86:	2300      	movs	r3, #0
 801cf88:	62bb      	str	r3, [r7, #40]	; 0x28
 801cf8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801cf8c:	69bb      	ldr	r3, [r7, #24]
 801cf8e:	429a      	cmp	r2, r3
 801cf90:	da29      	bge.n	801cfe6 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xea>
      sum += std::exp((input_data[i * depth + c] - max) *
 801cf92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cf94:	69ba      	ldr	r2, [r7, #24]
 801cf96:	fb02 f203 	mul.w	r2, r2, r3
 801cf9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cf9c:	4413      	add	r3, r2
 801cf9e:	009b      	lsls	r3, r3, #2
 801cfa0:	687a      	ldr	r2, [r7, #4]
 801cfa2:	4413      	add	r3, r2
 801cfa4:	ed93 7a00 	vldr	s14, [r3]
 801cfa8:	edd7 7a05 	vldr	s15, [r7, #20]
 801cfac:	ee37 8a67 	vsub.f32	s16, s14, s15
                      static_cast<float>(params.beta));
 801cfb0:	68fb      	ldr	r3, [r7, #12]
 801cfb2:	e9d3 3400 	ldrd	r3, r4, [r3]
 801cfb6:	4618      	mov	r0, r3
 801cfb8:	4621      	mov	r1, r4
 801cfba:	f7e3 fde3 	bl	8000b84 <__aeabi_d2f>
 801cfbe:	ee07 0a90 	vmov	s15, r0
      sum += std::exp((input_data[i * depth + c] - max) *
 801cfc2:	ee68 7a27 	vmul.f32	s15, s16, s15
 801cfc6:	eeb0 0a67 	vmov.f32	s0, s15
 801cfca:	f7fe fd92 	bl	801baf2 <_ZSt3expf>
 801cfce:	eeb0 7a40 	vmov.f32	s14, s0
 801cfd2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801cfd6:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cfda:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 801cfde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cfe0:	3301      	adds	r3, #1
 801cfe2:	62bb      	str	r3, [r7, #40]	; 0x28
 801cfe4:	e7d1      	b.n	801cf8a <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x8e>
    }

    // Compute result.
    for (int c = 0; c < depth; ++c) {
 801cfe6:	2300      	movs	r3, #0
 801cfe8:	627b      	str	r3, [r7, #36]	; 0x24
 801cfea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cfec:	69bb      	ldr	r3, [r7, #24]
 801cfee:	429a      	cmp	r2, r3
 801cff0:	da32      	bge.n	801d058 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x15c>
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
 801cff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cff4:	69ba      	ldr	r2, [r7, #24]
 801cff6:	fb02 f203 	mul.w	r2, r2, r3
 801cffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cffc:	4413      	add	r3, r2
 801cffe:	009b      	lsls	r3, r3, #2
 801d000:	687a      	ldr	r2, [r7, #4]
 801d002:	4413      	add	r3, r2
 801d004:	ed93 7a00 	vldr	s14, [r3]
 801d008:	edd7 7a05 	vldr	s15, [r7, #20]
 801d00c:	ee37 8a67 	vsub.f32	s16, s14, s15
                                            static_cast<float>(params.beta)) /
 801d010:	68fb      	ldr	r3, [r7, #12]
 801d012:	e9d3 3400 	ldrd	r3, r4, [r3]
 801d016:	4618      	mov	r0, r3
 801d018:	4621      	mov	r1, r4
 801d01a:	f7e3 fdb3 	bl	8000b84 <__aeabi_d2f>
 801d01e:	ee07 0a90 	vmov	s15, r0
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
 801d022:	ee68 7a27 	vmul.f32	s15, s16, s15
 801d026:	eeb0 0a67 	vmov.f32	s0, s15
 801d02a:	f7fe fd62 	bl	801baf2 <_ZSt3expf>
 801d02e:	eef0 6a40 	vmov.f32	s13, s0
 801d032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d034:	69ba      	ldr	r2, [r7, #24]
 801d036:	fb02 f203 	mul.w	r2, r2, r3
 801d03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d03c:	4413      	add	r3, r2
 801d03e:	009b      	lsls	r3, r3, #2
 801d040:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801d042:	4413      	add	r3, r2
                                            static_cast<float>(params.beta)) /
 801d044:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801d048:	eec6 7a87 	vdiv.f32	s15, s13, s14
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
 801d04c:	edc3 7a00 	vstr	s15, [r3]
    for (int c = 0; c < depth; ++c) {
 801d050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d052:	3301      	adds	r3, #1
 801d054:	627b      	str	r3, [r7, #36]	; 0x24
 801d056:	e7c8      	b.n	801cfea <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xee>
  for (int i = 0; i < outer_size; ++i) {
 801d058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d05a:	3301      	adds	r3, #1
 801d05c:	637b      	str	r3, [r7, #52]	; 0x34
 801d05e:	e76b      	b.n	801cf38 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x3c>
                                   sum;
    }
  }
}
 801d060:	bf00      	nop
 801d062:	373c      	adds	r7, #60	; 0x3c
 801d064:	46bd      	mov	sp, r7
 801d066:	ecbd 8b02 	vpop	{d8}
 801d06a:	bd90      	pop	{r4, r7, pc}

0801d06c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
 801d06c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d070:	b08b      	sub	sp, #44	; 0x2c
 801d072:	af04      	add	r7, sp, #16
 801d074:	60f8      	str	r0, [r7, #12]
 801d076:	60b9      	str	r1, [r7, #8]
 801d078:	607a      	str	r2, [r7, #4]
 801d07a:	603b      	str	r3, [r7, #0]
  if (input->type == kTfLiteUInt8 || input->type == kTfLiteInt8) {
 801d07c:	68bb      	ldr	r3, [r7, #8]
 801d07e:	781b      	ldrb	r3, [r3, #0]
 801d080:	2b03      	cmp	r3, #3
 801d082:	d004      	beq.n	801d08e <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x22>
 801d084:	68bb      	ldr	r3, [r7, #8]
 801d086:	781b      	ldrb	r3, [r3, #0]
 801d088:	2b09      	cmp	r3, #9
 801d08a:	f040 80f2 	bne.w	801d272 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x206>
    if (input->type == kTfLiteUInt8) {
 801d08e:	68bb      	ldr	r3, [r7, #8]
 801d090:	781b      	ldrb	r3, [r3, #0]
 801d092:	2b03      	cmp	r3, #3
 801d094:	d134      	bne.n	801d100 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x94>
      TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteUInt8);
 801d096:	687b      	ldr	r3, [r7, #4]
 801d098:	781b      	ldrb	r3, [r3, #0]
 801d09a:	2b03      	cmp	r3, #3
 801d09c:	d019      	beq.n	801d0d2 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x66>
 801d09e:	68fb      	ldr	r3, [r7, #12]
 801d0a0:	695c      	ldr	r4, [r3, #20]
 801d0a2:	68fd      	ldr	r5, [r7, #12]
 801d0a4:	687b      	ldr	r3, [r7, #4]
 801d0a6:	781b      	ldrb	r3, [r3, #0]
 801d0a8:	4618      	mov	r0, r3
 801d0aa:	f7e8 f931 	bl	8005310 <TfLiteTypeGetName>
 801d0ae:	4606      	mov	r6, r0
 801d0b0:	2003      	movs	r0, #3
 801d0b2:	f7e8 f92d 	bl	8005310 <TfLiteTypeGetName>
 801d0b6:	4603      	mov	r3, r0
 801d0b8:	9303      	str	r3, [sp, #12]
 801d0ba:	9602      	str	r6, [sp, #8]
 801d0bc:	4b93      	ldr	r3, [pc, #588]	; (801d30c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a0>)
 801d0be:	9301      	str	r3, [sp, #4]
 801d0c0:	4b93      	ldr	r3, [pc, #588]	; (801d310 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a4>)
 801d0c2:	9300      	str	r3, [sp, #0]
 801d0c4:	2327      	movs	r3, #39	; 0x27
 801d0c6:	4a93      	ldr	r2, [pc, #588]	; (801d314 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a8>)
 801d0c8:	4993      	ldr	r1, [pc, #588]	; (801d318 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ac>)
 801d0ca:	4628      	mov	r0, r5
 801d0cc:	47a0      	blx	r4
 801d0ce:	2301      	movs	r3, #1
 801d0d0:	e116      	b.n	801d300 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x294>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 801d0d2:	687b      	ldr	r3, [r7, #4]
 801d0d4:	691b      	ldr	r3, [r3, #16]
 801d0d6:	2b00      	cmp	r3, #0
 801d0d8:	f000 8096 	beq.w	801d208 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x19c>
 801d0dc:	68fb      	ldr	r3, [r7, #12]
 801d0de:	695c      	ldr	r4, [r3, #20]
 801d0e0:	68f8      	ldr	r0, [r7, #12]
 801d0e2:	687b      	ldr	r3, [r7, #4]
 801d0e4:	691b      	ldr	r3, [r3, #16]
 801d0e6:	2200      	movs	r2, #0
 801d0e8:	9203      	str	r2, [sp, #12]
 801d0ea:	9302      	str	r3, [sp, #8]
 801d0ec:	4b8b      	ldr	r3, [pc, #556]	; (801d31c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b0>)
 801d0ee:	9301      	str	r3, [sp, #4]
 801d0f0:	4b8b      	ldr	r3, [pc, #556]	; (801d320 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b4>)
 801d0f2:	9300      	str	r3, [sp, #0]
 801d0f4:	2328      	movs	r3, #40	; 0x28
 801d0f6:	4a87      	ldr	r2, [pc, #540]	; (801d314 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a8>)
 801d0f8:	498a      	ldr	r1, [pc, #552]	; (801d324 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b8>)
 801d0fa:	47a0      	blx	r4
 801d0fc:	2301      	movs	r3, #1
 801d0fe:	e0ff      	b.n	801d300 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x294>
    } else {
      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteInt8);
 801d100:	68bb      	ldr	r3, [r7, #8]
 801d102:	781b      	ldrb	r3, [r3, #0]
 801d104:	2b09      	cmp	r3, #9
 801d106:	d019      	beq.n	801d13c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xd0>
 801d108:	68fb      	ldr	r3, [r7, #12]
 801d10a:	695c      	ldr	r4, [r3, #20]
 801d10c:	68fd      	ldr	r5, [r7, #12]
 801d10e:	68bb      	ldr	r3, [r7, #8]
 801d110:	781b      	ldrb	r3, [r3, #0]
 801d112:	4618      	mov	r0, r3
 801d114:	f7e8 f8fc 	bl	8005310 <TfLiteTypeGetName>
 801d118:	4606      	mov	r6, r0
 801d11a:	2009      	movs	r0, #9
 801d11c:	f7e8 f8f8 	bl	8005310 <TfLiteTypeGetName>
 801d120:	4603      	mov	r3, r0
 801d122:	9303      	str	r3, [sp, #12]
 801d124:	9602      	str	r6, [sp, #8]
 801d126:	4b80      	ldr	r3, [pc, #512]	; (801d328 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2bc>)
 801d128:	9301      	str	r3, [sp, #4]
 801d12a:	4b80      	ldr	r3, [pc, #512]	; (801d32c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c0>)
 801d12c:	9300      	str	r3, [sp, #0]
 801d12e:	232a      	movs	r3, #42	; 0x2a
 801d130:	4a78      	ldr	r2, [pc, #480]	; (801d314 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a8>)
 801d132:	4979      	ldr	r1, [pc, #484]	; (801d318 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ac>)
 801d134:	4628      	mov	r0, r5
 801d136:	47a0      	blx	r4
 801d138:	2301      	movs	r3, #1
 801d13a:	e0e1      	b.n	801d300 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x294>
      if (output->type == kTfLiteInt16) {
 801d13c:	687b      	ldr	r3, [r7, #4]
 801d13e:	781b      	ldrb	r3, [r3, #0]
 801d140:	2b07      	cmp	r3, #7
 801d142:	d116      	bne.n	801d172 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x106>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
 801d144:	687b      	ldr	r3, [r7, #4]
 801d146:	691b      	ldr	r3, [r3, #16]
 801d148:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801d14c:	d05c      	beq.n	801d208 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x19c>
 801d14e:	68fb      	ldr	r3, [r7, #12]
 801d150:	695c      	ldr	r4, [r3, #20]
 801d152:	68f8      	ldr	r0, [r7, #12]
 801d154:	687b      	ldr	r3, [r7, #4]
 801d156:	691b      	ldr	r3, [r3, #16]
 801d158:	4a75      	ldr	r2, [pc, #468]	; (801d330 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c4>)
 801d15a:	9203      	str	r2, [sp, #12]
 801d15c:	9302      	str	r3, [sp, #8]
 801d15e:	4b75      	ldr	r3, [pc, #468]	; (801d334 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c8>)
 801d160:	9301      	str	r3, [sp, #4]
 801d162:	4b6f      	ldr	r3, [pc, #444]	; (801d320 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b4>)
 801d164:	9300      	str	r3, [sp, #0]
 801d166:	232c      	movs	r3, #44	; 0x2c
 801d168:	4a6a      	ldr	r2, [pc, #424]	; (801d314 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a8>)
 801d16a:	496e      	ldr	r1, [pc, #440]	; (801d324 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b8>)
 801d16c:	47a0      	blx	r4
 801d16e:	2301      	movs	r3, #1
 801d170:	e0c6      	b.n	801d300 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x294>
        // NOTE: Current int16 softmax output does not require symmetric scaling
        // - so no need to verify scale here.
      } else {
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
 801d172:	687b      	ldr	r3, [r7, #4]
 801d174:	781b      	ldrb	r3, [r3, #0]
 801d176:	2b09      	cmp	r3, #9
 801d178:	d019      	beq.n	801d1ae <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x142>
 801d17a:	68fb      	ldr	r3, [r7, #12]
 801d17c:	695c      	ldr	r4, [r3, #20]
 801d17e:	68fd      	ldr	r5, [r7, #12]
 801d180:	687b      	ldr	r3, [r7, #4]
 801d182:	781b      	ldrb	r3, [r3, #0]
 801d184:	4618      	mov	r0, r3
 801d186:	f7e8 f8c3 	bl	8005310 <TfLiteTypeGetName>
 801d18a:	4606      	mov	r6, r0
 801d18c:	2009      	movs	r0, #9
 801d18e:	f7e8 f8bf 	bl	8005310 <TfLiteTypeGetName>
 801d192:	4603      	mov	r3, r0
 801d194:	9303      	str	r3, [sp, #12]
 801d196:	9602      	str	r6, [sp, #8]
 801d198:	4b63      	ldr	r3, [pc, #396]	; (801d328 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2bc>)
 801d19a:	9301      	str	r3, [sp, #4]
 801d19c:	4b5c      	ldr	r3, [pc, #368]	; (801d310 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a4>)
 801d19e:	9300      	str	r3, [sp, #0]
 801d1a0:	2330      	movs	r3, #48	; 0x30
 801d1a2:	4a5c      	ldr	r2, [pc, #368]	; (801d314 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a8>)
 801d1a4:	495c      	ldr	r1, [pc, #368]	; (801d318 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ac>)
 801d1a6:	4628      	mov	r0, r5
 801d1a8:	47a0      	blx	r4
 801d1aa:	2301      	movs	r3, #1
 801d1ac:	e0a8      	b.n	801d300 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x294>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
 801d1ae:	687b      	ldr	r3, [r7, #4]
 801d1b0:	691b      	ldr	r3, [r3, #16]
 801d1b2:	f113 0f80 	cmn.w	r3, #128	; 0x80
 801d1b6:	d012      	beq.n	801d1de <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x172>
 801d1b8:	68fb      	ldr	r3, [r7, #12]
 801d1ba:	695c      	ldr	r4, [r3, #20]
 801d1bc:	68f8      	ldr	r0, [r7, #12]
 801d1be:	687b      	ldr	r3, [r7, #4]
 801d1c0:	691b      	ldr	r3, [r3, #16]
 801d1c2:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 801d1c6:	9203      	str	r2, [sp, #12]
 801d1c8:	9302      	str	r3, [sp, #8]
 801d1ca:	4b5b      	ldr	r3, [pc, #364]	; (801d338 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 801d1cc:	9301      	str	r3, [sp, #4]
 801d1ce:	4b54      	ldr	r3, [pc, #336]	; (801d320 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b4>)
 801d1d0:	9300      	str	r3, [sp, #0]
 801d1d2:	2331      	movs	r3, #49	; 0x31
 801d1d4:	4a4f      	ldr	r2, [pc, #316]	; (801d314 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a8>)
 801d1d6:	4953      	ldr	r1, [pc, #332]	; (801d324 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b8>)
 801d1d8:	47a0      	blx	r4
 801d1da:	2301      	movs	r3, #1
 801d1dc:	e090      	b.n	801d300 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x294>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
 801d1de:	687b      	ldr	r3, [r7, #4]
 801d1e0:	edd3 7a03 	vldr	s15, [r3, #12]
 801d1e4:	ed9f 7a55 	vldr	s14, [pc, #340]	; 801d33c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>
 801d1e8:	eef4 7a47 	vcmp.f32	s15, s14
 801d1ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d1f0:	d00a      	beq.n	801d208 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x19c>
 801d1f2:	68fb      	ldr	r3, [r7, #12]
 801d1f4:	695c      	ldr	r4, [r3, #20]
 801d1f6:	68f8      	ldr	r0, [r7, #12]
 801d1f8:	4b51      	ldr	r3, [pc, #324]	; (801d340 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 801d1fa:	9300      	str	r3, [sp, #0]
 801d1fc:	2332      	movs	r3, #50	; 0x32
 801d1fe:	4a45      	ldr	r2, [pc, #276]	; (801d314 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a8>)
 801d200:	4950      	ldr	r1, [pc, #320]	; (801d344 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>)
 801d202:	47a0      	blx	r4
 801d204:	2301      	movs	r3, #1
 801d206:	e07b      	b.n	801d300 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x294>

    static const int kScaledDiffIntegerBits = 5;

    int input_left_shift;
    tflite::PreprocessSoftmaxScaling(
        static_cast<double>(params->beta),
 801d208:	683b      	ldr	r3, [r7, #0]
 801d20a:	681b      	ldr	r3, [r3, #0]
    tflite::PreprocessSoftmaxScaling(
 801d20c:	4618      	mov	r0, r3
 801d20e:	f7e3 f989 	bl	8000524 <__aeabi_f2d>
 801d212:	4680      	mov	r8, r0
 801d214:	4689      	mov	r9, r1
        static_cast<double>(input->params.scale), kScaledDiffIntegerBits,
 801d216:	68bb      	ldr	r3, [r7, #8]
 801d218:	68db      	ldr	r3, [r3, #12]
    tflite::PreprocessSoftmaxScaling(
 801d21a:	4618      	mov	r0, r3
 801d21c:	f7e3 f982 	bl	8000524 <__aeabi_f2d>
 801d220:	4682      	mov	sl, r0
 801d222:	468b      	mov	fp, r1
 801d224:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d226:	3308      	adds	r3, #8
 801d228:	f107 0214 	add.w	r2, r7, #20
 801d22c:	4619      	mov	r1, r3
 801d22e:	2005      	movs	r0, #5
 801d230:	ec4b ab11 	vmov	d1, sl, fp
 801d234:	ec49 8b10 	vmov	d0, r8, r9
 801d238:	f7f8 f8b6 	bl	80153a8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
        &op_data->input_multiplier, &input_left_shift);
    op_data->input_left_shift = input_left_shift;
 801d23c:	697a      	ldr	r2, [r7, #20]
 801d23e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d240:	60da      	str	r2, [r3, #12]
    op_data->diff_min =
        -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
                                            op_data->input_left_shift);
 801d242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d244:	68db      	ldr	r3, [r3, #12]
        -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
 801d246:	221f      	movs	r2, #31
 801d248:	4619      	mov	r1, r3
 801d24a:	2005      	movs	r0, #5
 801d24c:	f7f8 f8f4 	bl	8015438 <_ZN6tflite20CalculateInputRadiusEiii>
 801d250:	4603      	mov	r3, r0
 801d252:	4618      	mov	r0, r3
 801d254:	f7e3 f954 	bl	8000500 <__aeabi_i2d>
 801d258:	4602      	mov	r2, r0
 801d25a:	460b      	mov	r3, r1
 801d25c:	4614      	mov	r4, r2
 801d25e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
    op_data->diff_min =
 801d262:	4620      	mov	r0, r4
 801d264:	4629      	mov	r1, r5
 801d266:	f7e3 fc65 	bl	8000b34 <__aeabi_d2iz>
 801d26a:	4602      	mov	r2, r0
 801d26c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d26e:	619a      	str	r2, [r3, #24]
                                            op_data->input_left_shift);
 801d270:	e045      	b.n	801d2fe <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x292>
  } else {
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
 801d272:	68bb      	ldr	r3, [r7, #8]
 801d274:	781b      	ldrb	r3, [r3, #0]
 801d276:	2b01      	cmp	r3, #1
 801d278:	d019      	beq.n	801d2ae <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x242>
 801d27a:	68fb      	ldr	r3, [r7, #12]
 801d27c:	695c      	ldr	r4, [r3, #20]
 801d27e:	68fd      	ldr	r5, [r7, #12]
 801d280:	68bb      	ldr	r3, [r7, #8]
 801d282:	781b      	ldrb	r3, [r3, #0]
 801d284:	4618      	mov	r0, r3
 801d286:	f7e8 f843 	bl	8005310 <TfLiteTypeGetName>
 801d28a:	4606      	mov	r6, r0
 801d28c:	2001      	movs	r0, #1
 801d28e:	f7e8 f83f 	bl	8005310 <TfLiteTypeGetName>
 801d292:	4603      	mov	r3, r0
 801d294:	9303      	str	r3, [sp, #12]
 801d296:	9602      	str	r6, [sp, #8]
 801d298:	4b2b      	ldr	r3, [pc, #172]	; (801d348 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2dc>)
 801d29a:	9301      	str	r3, [sp, #4]
 801d29c:	4b23      	ldr	r3, [pc, #140]	; (801d32c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c0>)
 801d29e:	9300      	str	r3, [sp, #0]
 801d2a0:	2342      	movs	r3, #66	; 0x42
 801d2a2:	4a1c      	ldr	r2, [pc, #112]	; (801d314 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a8>)
 801d2a4:	491c      	ldr	r1, [pc, #112]	; (801d318 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ac>)
 801d2a6:	4628      	mov	r0, r5
 801d2a8:	47a0      	blx	r4
 801d2aa:	2301      	movs	r3, #1
 801d2ac:	e028      	b.n	801d300 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x294>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
 801d2ae:	687b      	ldr	r3, [r7, #4]
 801d2b0:	781b      	ldrb	r3, [r3, #0]
 801d2b2:	2b01      	cmp	r3, #1
 801d2b4:	d019      	beq.n	801d2ea <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x27e>
 801d2b6:	68fb      	ldr	r3, [r7, #12]
 801d2b8:	695c      	ldr	r4, [r3, #20]
 801d2ba:	68fd      	ldr	r5, [r7, #12]
 801d2bc:	687b      	ldr	r3, [r7, #4]
 801d2be:	781b      	ldrb	r3, [r3, #0]
 801d2c0:	4618      	mov	r0, r3
 801d2c2:	f7e8 f825 	bl	8005310 <TfLiteTypeGetName>
 801d2c6:	4606      	mov	r6, r0
 801d2c8:	2001      	movs	r0, #1
 801d2ca:	f7e8 f821 	bl	8005310 <TfLiteTypeGetName>
 801d2ce:	4603      	mov	r3, r0
 801d2d0:	9303      	str	r3, [sp, #12]
 801d2d2:	9602      	str	r6, [sp, #8]
 801d2d4:	4b1c      	ldr	r3, [pc, #112]	; (801d348 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2dc>)
 801d2d6:	9301      	str	r3, [sp, #4]
 801d2d8:	4b0d      	ldr	r3, [pc, #52]	; (801d310 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a4>)
 801d2da:	9300      	str	r3, [sp, #0]
 801d2dc:	2343      	movs	r3, #67	; 0x43
 801d2de:	4a0d      	ldr	r2, [pc, #52]	; (801d314 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a8>)
 801d2e0:	490d      	ldr	r1, [pc, #52]	; (801d318 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ac>)
 801d2e2:	4628      	mov	r0, r5
 801d2e4:	47a0      	blx	r4
 801d2e6:	2301      	movs	r3, #1
 801d2e8:	e00a      	b.n	801d300 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x294>
    op_data->beta = static_cast<double>(params->beta);
 801d2ea:	683b      	ldr	r3, [r7, #0]
 801d2ec:	681b      	ldr	r3, [r3, #0]
 801d2ee:	4618      	mov	r0, r3
 801d2f0:	f7e3 f918 	bl	8000524 <__aeabi_f2d>
 801d2f4:	4603      	mov	r3, r0
 801d2f6:	460c      	mov	r4, r1
 801d2f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801d2fa:	e9c2 3400 	strd	r3, r4, [r2]
  }
  return kTfLiteOk;
 801d2fe:	2300      	movs	r3, #0
}
 801d300:	4618      	mov	r0, r3
 801d302:	371c      	adds	r7, #28
 801d304:	46bd      	mov	sp, r7
 801d306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d30a:	bf00      	nop
 801d30c:	08024604 	.word	0x08024604
 801d310:	08024614 	.word	0x08024614
 801d314:	080245ac 	.word	0x080245ac
 801d318:	080245e8 	.word	0x080245e8
 801d31c:	08024640 	.word	0x08024640
 801d320:	08024644 	.word	0x08024644
 801d324:	08024624 	.word	0x08024624
 801d328:	08024660 	.word	0x08024660
 801d32c:	0802466c 	.word	0x0802466c
 801d330:	ffff8000 	.word	0xffff8000
 801d334:	08024678 	.word	0x08024678
 801d338:	08024680 	.word	0x08024680
 801d33c:	3b800000 	.word	0x3b800000
 801d340:	080246a0 	.word	0x080246a0
 801d344:	08024688 	.word	0x08024688
 801d348:	080246c4 	.word	0x080246c4

0801d34c <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:

}  // namespace

TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 801d34c:	b5b0      	push	{r4, r5, r7, lr}
 801d34e:	b088      	sub	sp, #32
 801d350:	af04      	add	r7, sp, #16
 801d352:	6078      	str	r0, [r7, #4]
 801d354:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 801d356:	6838      	ldr	r0, [r7, #0]
 801d358:	f7fc f96a 	bl	8019630 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 801d35c:	4603      	mov	r3, r0
 801d35e:	2b01      	cmp	r3, #1
 801d360:	bf14      	ite	ne
 801d362:	2301      	movne	r3, #1
 801d364:	2300      	moveq	r3, #0
 801d366:	b2db      	uxtb	r3, r3
 801d368:	2b00      	cmp	r3, #0
 801d36a:	d014      	beq.n	801d396 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4a>
 801d36c:	687b      	ldr	r3, [r7, #4]
 801d36e:	695c      	ldr	r4, [r3, #20]
 801d370:	687d      	ldr	r5, [r7, #4]
 801d372:	6838      	ldr	r0, [r7, #0]
 801d374:	f7fc f95c 	bl	8019630 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 801d378:	4602      	mov	r2, r0
 801d37a:	2301      	movs	r3, #1
 801d37c:	9303      	str	r3, [sp, #12]
 801d37e:	9202      	str	r2, [sp, #8]
 801d380:	4b26      	ldr	r3, [pc, #152]	; (801d41c <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd0>)
 801d382:	9301      	str	r3, [sp, #4]
 801d384:	4b26      	ldr	r3, [pc, #152]	; (801d420 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 801d386:	9300      	str	r3, [sp, #0]
 801d388:	234c      	movs	r3, #76	; 0x4c
 801d38a:	4a26      	ldr	r2, [pc, #152]	; (801d424 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd8>)
 801d38c:	4926      	ldr	r1, [pc, #152]	; (801d428 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
 801d38e:	4628      	mov	r0, r5
 801d390:	47a0      	blx	r4
 801d392:	2301      	movs	r3, #1
 801d394:	e03d      	b.n	801d412 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 801d396:	6838      	ldr	r0, [r7, #0]
 801d398:	f7fc f957 	bl	801964a <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 801d39c:	4603      	mov	r3, r0
 801d39e:	2b01      	cmp	r3, #1
 801d3a0:	bf14      	ite	ne
 801d3a2:	2301      	movne	r3, #1
 801d3a4:	2300      	moveq	r3, #0
 801d3a6:	b2db      	uxtb	r3, r3
 801d3a8:	2b00      	cmp	r3, #0
 801d3aa:	d014      	beq.n	801d3d6 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x8a>
 801d3ac:	687b      	ldr	r3, [r7, #4]
 801d3ae:	695c      	ldr	r4, [r3, #20]
 801d3b0:	687d      	ldr	r5, [r7, #4]
 801d3b2:	6838      	ldr	r0, [r7, #0]
 801d3b4:	f7fc f949 	bl	801964a <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 801d3b8:	4602      	mov	r2, r0
 801d3ba:	2301      	movs	r3, #1
 801d3bc:	9303      	str	r3, [sp, #12]
 801d3be:	9202      	str	r2, [sp, #8]
 801d3c0:	4b16      	ldr	r3, [pc, #88]	; (801d41c <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd0>)
 801d3c2:	9301      	str	r3, [sp, #4]
 801d3c4:	4b19      	ldr	r3, [pc, #100]	; (801d42c <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xe0>)
 801d3c6:	9300      	str	r3, [sp, #0]
 801d3c8:	234d      	movs	r3, #77	; 0x4d
 801d3ca:	4a16      	ldr	r2, [pc, #88]	; (801d424 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd8>)
 801d3cc:	4916      	ldr	r1, [pc, #88]	; (801d428 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
 801d3ce:	4628      	mov	r0, r5
 801d3d0:	47a0      	blx	r4
 801d3d2:	2301      	movs	r3, #1
 801d3d4:	e01d      	b.n	801d412 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  const TfLiteTensor* input = GetInput(context, node, 0);
 801d3d6:	687b      	ldr	r3, [r7, #4]
 801d3d8:	2200      	movs	r2, #0
 801d3da:	6839      	ldr	r1, [r7, #0]
 801d3dc:	4618      	mov	r0, r3
 801d3de:	f7fb fe2f 	bl	8019040 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801d3e2:	60f8      	str	r0, [r7, #12]
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 801d3e4:	68f8      	ldr	r0, [r7, #12]
 801d3e6:	f7f8 f92e 	bl	8015646 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 801d3ea:	4603      	mov	r3, r0
 801d3ec:	2b00      	cmp	r3, #0
 801d3ee:	bfd4      	ite	le
 801d3f0:	2301      	movle	r3, #1
 801d3f2:	2300      	movgt	r3, #0
 801d3f4:	b2db      	uxtb	r3, r3
 801d3f6:	2b00      	cmp	r3, #0
 801d3f8:	d00a      	beq.n	801d410 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc4>
 801d3fa:	687b      	ldr	r3, [r7, #4]
 801d3fc:	695c      	ldr	r4, [r3, #20]
 801d3fe:	6878      	ldr	r0, [r7, #4]
 801d400:	4b0b      	ldr	r3, [pc, #44]	; (801d430 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
 801d402:	9300      	str	r3, [sp, #0]
 801d404:	234f      	movs	r3, #79	; 0x4f
 801d406:	4a07      	ldr	r2, [pc, #28]	; (801d424 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd8>)
 801d408:	490a      	ldr	r1, [pc, #40]	; (801d434 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xe8>)
 801d40a:	47a0      	blx	r4
 801d40c:	2301      	movs	r3, #1
 801d40e:	e000      	b.n	801d412 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc6>

  return kTfLiteOk;
 801d410:	2300      	movs	r3, #0
}
 801d412:	4618      	mov	r0, r3
 801d414:	3710      	adds	r7, #16
 801d416:	46bd      	mov	sp, r7
 801d418:	bdb0      	pop	{r4, r5, r7, pc}
 801d41a:	bf00      	nop
 801d41c:	080246d4 	.word	0x080246d4
 801d420:	080246d8 	.word	0x080246d8
 801d424:	080245ac 	.word	0x080245ac
 801d428:	08024624 	.word	0x08024624
 801d42c:	080246e8 	.word	0x080246e8
 801d430:	080246fc 	.word	0x080246fc
 801d434:	08024688 	.word	0x08024688

0801d438 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>:

// Takes a tensor and performs softmax along the last dimension.
void SoftmaxFloat(const TfLiteTensor* input, TfLiteTensor* output,
                  const SoftmaxParams& op_data) {
 801d438:	b590      	push	{r4, r7, lr}
 801d43a:	b093      	sub	sp, #76	; 0x4c
 801d43c:	af02      	add	r7, sp, #8
 801d43e:	60f8      	str	r0, [r7, #12]
 801d440:	60b9      	str	r1, [r7, #8]
 801d442:	607a      	str	r2, [r7, #4]
  tflite::reference_ops::Softmax(
      op_data, GetTensorShape(input), GetTensorData<float>(input),
 801d444:	f107 0310 	add.w	r3, r7, #16
 801d448:	68f9      	ldr	r1, [r7, #12]
 801d44a:	4618      	mov	r0, r3
 801d44c:	f7fb fdda 	bl	8019004 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::Softmax(
 801d450:	68f8      	ldr	r0, [r7, #12]
 801d452:	f7fb fe30 	bl	80190b6 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 801d456:	4604      	mov	r4, r0
      GetTensorShape(output), GetTensorData<float>(output));
 801d458:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d45c:	68b9      	ldr	r1, [r7, #8]
 801d45e:	4618      	mov	r0, r3
 801d460:	f7fb fdd0 	bl	8019004 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::Softmax(
 801d464:	68b8      	ldr	r0, [r7, #8]
 801d466:	f7fb fe37 	bl	80190d8 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 801d46a:	4602      	mov	r2, r0
 801d46c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d470:	f107 0110 	add.w	r1, r7, #16
 801d474:	9200      	str	r2, [sp, #0]
 801d476:	4622      	mov	r2, r4
 801d478:	6878      	ldr	r0, [r7, #4]
 801d47a:	f7ff fd3f 	bl	801cefc <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>
      GetTensorShape(output), GetTensorData<float>(output));
 801d47e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d482:	4618      	mov	r0, r3
 801d484:	f7fb fce7 	bl	8018e56 <_ZN6tflite12RuntimeShapeD1Ev>
      op_data, GetTensorShape(input), GetTensorData<float>(input),
 801d488:	f107 0310 	add.w	r3, r7, #16
 801d48c:	4618      	mov	r0, r3
 801d48e:	f7fb fce2 	bl	8018e56 <_ZN6tflite12RuntimeShapeD1Ev>
}
 801d492:	bf00      	nop
 801d494:	3744      	adds	r7, #68	; 0x44
 801d496:	46bd      	mov	sp, r7
 801d498:	bd90      	pop	{r4, r7, pc}

0801d49a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>:

void SoftmaxQuantized(const TfLiteTensor* input, TfLiteTensor* output,
                      const SoftmaxParams& op_data) {
 801d49a:	b590      	push	{r4, r7, lr}
 801d49c:	b0ab      	sub	sp, #172	; 0xac
 801d49e:	af02      	add	r7, sp, #8
 801d4a0:	60f8      	str	r0, [r7, #12]
 801d4a2:	60b9      	str	r1, [r7, #8]
 801d4a4:	607a      	str	r2, [r7, #4]
  if (input->type == kTfLiteUInt8) {
 801d4a6:	68fb      	ldr	r3, [r7, #12]
 801d4a8:	781b      	ldrb	r3, [r3, #0]
 801d4aa:	2b03      	cmp	r3, #3
 801d4ac:	d127      	bne.n	801d4fe <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x64>
    tflite::reference_ops::Softmax(
        op_data, GetTensorShape(input), GetTensorData<uint8_t>(input),
 801d4ae:	f107 0310 	add.w	r3, r7, #16
 801d4b2:	68f9      	ldr	r1, [r7, #12]
 801d4b4:	4618      	mov	r0, r3
 801d4b6:	f7fb fda5 	bl	8019004 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    tflite::reference_ops::Softmax(
 801d4ba:	68f8      	ldr	r0, [r7, #12]
 801d4bc:	f7fb fe3f 	bl	801913e <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 801d4c0:	4604      	mov	r4, r0
        GetTensorShape(output), GetTensorData<uint8_t>(output));
 801d4c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d4c6:	68b9      	ldr	r1, [r7, #8]
 801d4c8:	4618      	mov	r0, r3
 801d4ca:	f7fb fd9b 	bl	8019004 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    tflite::reference_ops::Softmax(
 801d4ce:	68b8      	ldr	r0, [r7, #8]
 801d4d0:	f7fb fe46 	bl	8019160 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 801d4d4:	4602      	mov	r2, r0
 801d4d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d4da:	f107 0110 	add.w	r1, r7, #16
 801d4de:	9200      	str	r2, [sp, #0]
 801d4e0:	4622      	mov	r2, r4
 801d4e2:	6878      	ldr	r0, [r7, #4]
 801d4e4:	f000 f8c4 	bl	801d670 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
        GetTensorShape(output), GetTensorData<uint8_t>(output));
 801d4e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d4ec:	4618      	mov	r0, r3
 801d4ee:	f7fb fcb2 	bl	8018e56 <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, GetTensorShape(input), GetTensorData<uint8_t>(input),
 801d4f2:	f107 0310 	add.w	r3, r7, #16
 801d4f6:	4618      	mov	r0, r3
 801d4f8:	f7fb fcad 	bl	8018e56 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::reference_ops::Softmax(
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
          GetTensorShape(output), GetTensorData<int8_t>(output));
    }
  }
}
 801d4fc:	e052      	b.n	801d5a4 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x10a>
    if (output->type == kTfLiteInt16) {
 801d4fe:	68bb      	ldr	r3, [r7, #8]
 801d500:	781b      	ldrb	r3, [r3, #0]
 801d502:	2b07      	cmp	r3, #7
 801d504:	d127      	bne.n	801d556 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xbc>
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
 801d506:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d50a:	68f9      	ldr	r1, [r7, #12]
 801d50c:	4618      	mov	r0, r3
 801d50e:	f7fb fd79 	bl	8019004 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      tflite::reference_ops::Softmax(
 801d512:	68f8      	ldr	r0, [r7, #12]
 801d514:	f7fb fdf1 	bl	80190fa <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 801d518:	4604      	mov	r4, r0
          GetTensorShape(output), GetTensorData<int16_t>(output));
 801d51a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801d51e:	68b9      	ldr	r1, [r7, #8]
 801d520:	4618      	mov	r0, r3
 801d522:	f7fb fd6f 	bl	8019004 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      tflite::reference_ops::Softmax(
 801d526:	68b8      	ldr	r0, [r7, #8]
 801d528:	f7fe f9d0 	bl	801b8cc <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor>
 801d52c:	4602      	mov	r2, r0
 801d52e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801d532:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801d536:	9200      	str	r2, [sp, #0]
 801d538:	4622      	mov	r2, r4
 801d53a:	6878      	ldr	r0, [r7, #4]
 801d53c:	f000 f9b3 	bl	801d8a6 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
          GetTensorShape(output), GetTensorData<int16_t>(output));
 801d540:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801d544:	4618      	mov	r0, r3
 801d546:	f7fb fc86 	bl	8018e56 <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
 801d54a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d54e:	4618      	mov	r0, r3
 801d550:	f7fb fc81 	bl	8018e56 <_ZN6tflite12RuntimeShapeD1Ev>
}
 801d554:	e026      	b.n	801d5a4 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x10a>
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
 801d556:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801d55a:	68f9      	ldr	r1, [r7, #12]
 801d55c:	4618      	mov	r0, r3
 801d55e:	f7fb fd51 	bl	8019004 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      tflite::reference_ops::Softmax(
 801d562:	68f8      	ldr	r0, [r7, #12]
 801d564:	f7fb fdc9 	bl	80190fa <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 801d568:	4604      	mov	r4, r0
          GetTensorShape(output), GetTensorData<int8_t>(output));
 801d56a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801d56e:	68b9      	ldr	r1, [r7, #8]
 801d570:	4618      	mov	r0, r3
 801d572:	f7fb fd47 	bl	8019004 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      tflite::reference_ops::Softmax(
 801d576:	68b8      	ldr	r0, [r7, #8]
 801d578:	f7fb fdd0 	bl	801911c <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 801d57c:	4602      	mov	r2, r0
 801d57e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801d582:	f107 0170 	add.w	r1, r7, #112	; 0x70
 801d586:	9200      	str	r2, [sp, #0]
 801d588:	4622      	mov	r2, r4
 801d58a:	6878      	ldr	r0, [r7, #4]
 801d58c:	f000 faa9 	bl	801dae2 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
          GetTensorShape(output), GetTensorData<int8_t>(output));
 801d590:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801d594:	4618      	mov	r0, r3
 801d596:	f7fb fc5e 	bl	8018e56 <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
 801d59a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801d59e:	4618      	mov	r0, r3
 801d5a0:	f7fb fc59 	bl	8018e56 <_ZN6tflite12RuntimeShapeD1Ev>
}
 801d5a4:	bf00      	nop
 801d5a6:	37a4      	adds	r7, #164	; 0xa4
 801d5a8:	46bd      	mov	sp, r7
 801d5aa:	bd90      	pop	{r4, r7, pc}

0801d5ac <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 801d5ac:	b5b0      	push	{r4, r5, r7, lr}
 801d5ae:	b094      	sub	sp, #80	; 0x50
 801d5b0:	af02      	add	r7, sp, #8
 801d5b2:	6078      	str	r0, [r7, #4]
 801d5b4:	6039      	str	r1, [r7, #0]
  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
 801d5b6:	683b      	ldr	r3, [r7, #0]
 801d5b8:	695b      	ldr	r3, [r3, #20]
 801d5ba:	647b      	str	r3, [r7, #68]	; 0x44

  const TfLiteTensor* input = GetInput(context, node, 0);
 801d5bc:	687b      	ldr	r3, [r7, #4]
 801d5be:	2200      	movs	r2, #0
 801d5c0:	6839      	ldr	r1, [r7, #0]
 801d5c2:	4618      	mov	r0, r3
 801d5c4:	f7fb fd3c 	bl	8019040 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801d5c8:	6438      	str	r0, [r7, #64]	; 0x40
  TfLiteTensor* output = GetOutput(context, node, 0);
 801d5ca:	687b      	ldr	r3, [r7, #4]
 801d5cc:	2200      	movs	r2, #0
 801d5ce:	6839      	ldr	r1, [r7, #0]
 801d5d0:	4618      	mov	r0, r3
 801d5d2:	f7fb fd4d 	bl	8019070 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 801d5d6:	63f8      	str	r0, [r7, #60]	; 0x3c

  SoftmaxParams op_data;
  TF_LITE_ENSURE_STATUS(
 801d5d8:	6878      	ldr	r0, [r7, #4]
 801d5da:	f107 0308 	add.w	r3, r7, #8
 801d5de:	9300      	str	r3, [sp, #0]
 801d5e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d5e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d5e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801d5e6:	f7ff fd41 	bl	801d06c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
 801d5ea:	4603      	mov	r3, r0
 801d5ec:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801d5f0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801d5f4:	2b00      	cmp	r3, #0
 801d5f6:	d002      	beq.n	801d5fe <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x52>
 801d5f8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801d5fc:	e028      	b.n	801d650 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xa4>
      CalculateSoftmaxParams(context, input, output, params, &op_data));

  switch (input->type) {
 801d5fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d600:	781b      	ldrb	r3, [r3, #0]
 801d602:	2b03      	cmp	r3, #3
 801d604:	d00c      	beq.n	801d620 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x74>
 801d606:	2b09      	cmp	r3, #9
 801d608:	d00a      	beq.n	801d620 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x74>
 801d60a:	2b01      	cmp	r3, #1
 801d60c:	d111      	bne.n	801d632 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x86>
    case kTfLiteFloat32: {
      SoftmaxFloat(input, output, op_data);
 801d60e:	f107 0308 	add.w	r3, r7, #8
 801d612:	461a      	mov	r2, r3
 801d614:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801d616:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801d618:	f7ff ff0e 	bl	801d438 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
 801d61c:	2300      	movs	r3, #0
 801d61e:	e017      	b.n	801d650 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xa4>
    }
    case kTfLiteInt8:
    case kTfLiteUInt8: {
      SoftmaxQuantized(input, output, op_data);
 801d620:	f107 0308 	add.w	r3, r7, #8
 801d624:	461a      	mov	r2, r3
 801d626:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801d628:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801d62a:	f7ff ff36 	bl	801d49a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
 801d62e:	2300      	movs	r3, #0
 801d630:	e00e      	b.n	801d650 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xa4>
    }
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801d632:	687b      	ldr	r3, [r7, #4]
 801d634:	695c      	ldr	r4, [r3, #20]
 801d636:	687d      	ldr	r5, [r7, #4]
 801d638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d63a:	781b      	ldrb	r3, [r3, #0]
 801d63c:	4618      	mov	r0, r3
 801d63e:	f7e7 fe67 	bl	8005310 <TfLiteTypeGetName>
 801d642:	4602      	mov	r2, r0
 801d644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d646:	781b      	ldrb	r3, [r3, #0]
 801d648:	4903      	ldr	r1, [pc, #12]	; (801d658 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xac>)
 801d64a:	4628      	mov	r0, r5
 801d64c:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801d64e:	2301      	movs	r3, #1
  }
}
 801d650:	4618      	mov	r0, r3
 801d652:	3748      	adds	r7, #72	; 0x48
 801d654:	46bd      	mov	sp, r7
 801d656:	bdb0      	pop	{r4, r5, r7, pc}
 801d658:	08024718 	.word	0x08024718

0801d65c <_ZN6tflite3ops5micro16Register_SOFTMAXEv>:
}  // namespace activations

TfLiteRegistration* Register_SOFTMAX() {
 801d65c:	b480      	push	{r7}
 801d65e:	af00      	add	r7, sp, #0
                                 /*invoke=*/activations::SoftmaxEval,
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
 801d660:	4b02      	ldr	r3, [pc, #8]	; (801d66c <_ZN6tflite3ops5micro16Register_SOFTMAXEv+0x10>)
}
 801d662:	4618      	mov	r0, r3
 801d664:	46bd      	mov	sp, r7
 801d666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d66a:	4770      	bx	lr
 801d66c:	20016d28 	.word	0x20016d28

0801d670 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:

// Quantized softmax with int8/uint8 input and int8/uint8/int16 output.
template <typename InputT, typename OutputT>
inline void Softmax(const SoftmaxParams& params,
 801d670:	b590      	push	{r4, r7, lr}
 801d672:	b09f      	sub	sp, #124	; 0x7c
 801d674:	af00      	add	r7, sp, #0
 801d676:	60f8      	str	r0, [r7, #12]
 801d678:	60b9      	str	r1, [r7, #8]
 801d67a:	607a      	str	r2, [r7, #4]
 801d67c:	603b      	str	r3, [r7, #0]
                    const RuntimeShape& input_shape, const InputT* input_data,
                    const RuntimeShape& output_shape, OutputT* output_data) {
  const int32 input_beta_multiplier = params.input_multiplier;
 801d67e:	68fb      	ldr	r3, [r7, #12]
 801d680:	689b      	ldr	r3, [r3, #8]
 801d682:	667b      	str	r3, [r7, #100]	; 0x64
  const int32 input_beta_left_shift = params.input_left_shift;
 801d684:	68fb      	ldr	r3, [r7, #12]
 801d686:	68db      	ldr	r3, [r3, #12]
 801d688:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 801d68a:	68fb      	ldr	r3, [r7, #12]
 801d68c:	699b      	ldr	r3, [r3, #24]
 801d68e:	65fb      	str	r3, [r7, #92]	; 0x5c
  using FixedPointScaledDiff =
      gemmlowp::FixedPoint<int32, kScaledDiffIntegerBits>;
  using FixedPointAccum = gemmlowp::FixedPoint<int32, kAccumulationIntegerBits>;
  using FixedPoint0 = gemmlowp::FixedPoint<int32, 0>;

  const int trailing_dim = input_shape.DimensionsCount() - 1;
 801d690:	68b8      	ldr	r0, [r7, #8]
 801d692:	f7fb fbf6 	bl	8018e82 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801d696:	4603      	mov	r3, r0
 801d698:	3b01      	subs	r3, #1
 801d69a:	65bb      	str	r3, [r7, #88]	; 0x58
  const int outer_size =
 801d69c:	683a      	ldr	r2, [r7, #0]
 801d69e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801d6a0:	68b8      	ldr	r0, [r7, #8]
 801d6a2:	f7fe f924 	bl	801b8ee <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 801d6a6:	6578      	str	r0, [r7, #84]	; 0x54
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
  const int depth =
 801d6a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801d6aa:	683a      	ldr	r2, [r7, #0]
 801d6ac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801d6ae:	68b8      	ldr	r0, [r7, #8]
 801d6b0:	f7fb ffd8 	bl	8019664 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801d6b4:	6538      	str	r0, [r7, #80]	; 0x50
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);

  for (int i = 0; i < outer_size; ++i) {
 801d6b6:	2300      	movs	r3, #0
 801d6b8:	677b      	str	r3, [r7, #116]	; 0x74
 801d6ba:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801d6bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d6be:	429a      	cmp	r2, r3
 801d6c0:	f280 80ed 	bge.w	801d89e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22e>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 801d6c4:	2300      	movs	r3, #0
 801d6c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 801d6ca:	2300      	movs	r3, #0
 801d6cc:	673b      	str	r3, [r7, #112]	; 0x70
 801d6ce:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801d6d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d6d2:	429a      	cmp	r2, r3
 801d6d4:	da16      	bge.n	801d704 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x94>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 801d6d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d6d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801d6da:	fb02 f203 	mul.w	r2, r2, r3
 801d6de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d6e0:	4413      	add	r3, r2
 801d6e2:	461a      	mov	r2, r3
 801d6e4:	687b      	ldr	r3, [r7, #4]
 801d6e6:	441a      	add	r2, r3
 801d6e8:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 801d6ec:	4611      	mov	r1, r2
 801d6ee:	4618      	mov	r0, r3
 801d6f0:	f7ff fb72 	bl	801cdd8 <_ZSt3maxIhERKT_S2_S2_>
 801d6f4:	4603      	mov	r3, r0
 801d6f6:	781b      	ldrb	r3, [r3, #0]
 801d6f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 801d6fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d6fe:	3301      	adds	r3, #1
 801d700:	673b      	str	r3, [r7, #112]	; 0x70
 801d702:	e7e4      	b.n	801d6ce <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    }

    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 801d704:	f000 fb0b 	bl	801dd1e <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 801d708:	4603      	mov	r3, r0
 801d70a:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 801d70c:	2300      	movs	r3, #0
 801d70e:	66fb      	str	r3, [r7, #108]	; 0x6c
 801d710:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801d712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d714:	429a      	cmp	r2, r3
 801d716:	da2f      	bge.n	801d778 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x108>
      int32 input_diff =
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 801d718:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d71a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801d71c:	fb02 f203 	mul.w	r2, r2, r3
 801d720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d722:	4413      	add	r3, r2
 801d724:	461a      	mov	r2, r3
 801d726:	687b      	ldr	r3, [r7, #4]
 801d728:	4413      	add	r3, r2
 801d72a:	781b      	ldrb	r3, [r3, #0]
 801d72c:	461a      	mov	r2, r3
 801d72e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 801d732:	1ad3      	subs	r3, r2, r3
 801d734:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 801d736:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801d738:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d73a:	429a      	cmp	r2, r3
 801d73c:	db18      	blt.n	801d770 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x100>
        const int32 input_diff_rescaled =
 801d73e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801d740:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801d742:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801d744:	f7ff fb9c 	bl	801ce80 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 801d748:	64b8      	str	r0, [r7, #72]	; 0x48
            MultiplyByQuantizedMultiplierGreaterThanOne(
                input_diff, input_beta_multiplier, input_beta_left_shift);
        const FixedPointScaledDiff scaled_diff_f8 =
 801d74a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801d74c:	f000 faef 	bl	801dd2e <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801d750:	4603      	mov	r3, r0
 801d752:	61fb      	str	r3, [r7, #28]
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 801d754:	69f8      	ldr	r0, [r7, #28]
 801d756:	f000 fb19 	bl	801dd8c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 801d75a:	4603      	mov	r3, r0
 801d75c:	4618      	mov	r0, r3
 801d75e:	f000 fc5d 	bl	801e01c <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 801d762:	4603      	mov	r3, r0
 801d764:	4619      	mov	r1, r3
 801d766:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d768:	f000 faf2 	bl	801dd50 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801d76c:	4603      	mov	r3, r0
 801d76e:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 801d770:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d772:	3301      	adds	r3, #1
 801d774:	66fb      	str	r3, [r7, #108]	; 0x6c
 801d776:	e7cb      	b.n	801d710 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa0>
      }
    }

    int num_bits_over_unit;
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 801d778:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d77c:	4618      	mov	r0, r3
 801d77e:	f000 fc67 	bl	801e050 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801d782:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 801d784:	681b      	ldr	r3, [r3, #0]
 801d786:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801d78a:	210c      	movs	r1, #12
 801d78c:	4618      	mov	r0, r3
 801d78e:	f7ff fb8a 	bl	801cea6 <_ZN6tflite13GetReciprocalEliPi>
 801d792:	4603      	mov	r3, r0
 801d794:	4618      	mov	r0, r3
 801d796:	f7fe fa01 	bl	801bb9c <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801d79a:	4603      	mov	r3, r0
 801d79c:	623b      	str	r3, [r7, #32]

    for (int c = 0; c < depth; ++c) {
 801d79e:	2300      	movs	r3, #0
 801d7a0:	66bb      	str	r3, [r7, #104]	; 0x68
 801d7a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801d7a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d7a6:	429a      	cmp	r2, r3
 801d7a8:	da75      	bge.n	801d896 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x226>
      int32 input_diff =
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 801d7aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d7ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801d7ae:	fb02 f203 	mul.w	r2, r2, r3
 801d7b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d7b4:	4413      	add	r3, r2
 801d7b6:	461a      	mov	r2, r3
 801d7b8:	687b      	ldr	r3, [r7, #4]
 801d7ba:	4413      	add	r3, r2
 801d7bc:	781b      	ldrb	r3, [r3, #0]
 801d7be:	461a      	mov	r2, r3
 801d7c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 801d7c4:	1ad3      	subs	r3, r2, r3
 801d7c6:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 801d7c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801d7ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d7cc:	429a      	cmp	r2, r3
 801d7ce:	db50      	blt.n	801d872 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x202>
        const int32 input_diff_rescaled =
 801d7d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801d7d2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801d7d4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801d7d6:	f7ff fb53 	bl	801ce80 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 801d7da:	6438      	str	r0, [r7, #64]	; 0x40
            MultiplyByQuantizedMultiplierGreaterThanOne(
                input_diff, input_beta_multiplier, input_beta_left_shift);
        const FixedPointScaledDiff scaled_diff_f8 =
 801d7dc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801d7de:	f000 faa6 	bl	801dd2e <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801d7e2:	4603      	mov	r3, r0
 801d7e4:	61bb      	str	r3, [r7, #24]
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);

        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 801d7e6:	69b8      	ldr	r0, [r7, #24]
 801d7e8:	f000 fad0 	bl	801dd8c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 801d7ec:	4603      	mov	r3, r0
 801d7ee:	617b      	str	r3, [r7, #20]
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
            (shifted_scale * exp_in_0).raw(),
 801d7f0:	6979      	ldr	r1, [r7, #20]
 801d7f2:	6a38      	ldr	r0, [r7, #32]
 801d7f4:	f7fe fccc 	bl	801c190 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801d7f8:	4603      	mov	r3, r0
 801d7fa:	633b      	str	r3, [r7, #48]	; 0x30
 801d7fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d800:	4618      	mov	r0, r3
 801d802:	f7fe f8b5 	bl	801b970 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801d806:	4603      	mov	r3, r0
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 801d808:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 801d80a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d80c:	3217      	adds	r2, #23
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 801d80e:	4611      	mov	r1, r2
 801d810:	4618      	mov	r0, r3
 801d812:	f7fb fdcd 	bl	80193b0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801d816:	63f8      	str	r0, [r7, #60]	; 0x3c

        const int32 shifted_output =
            unsat_output +
            static_cast<int32>(std::numeric_limits<OutputT>::min());
 801d818:	f7f7 fef1 	bl	80155fe <_ZNSt14numeric_limitsIhE3minEv>
 801d81c:	4603      	mov	r3, r0
 801d81e:	461a      	mov	r2, r3
            unsat_output +
 801d820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d822:	4413      	add	r3, r2
        const int32 shifted_output =
 801d824:	613b      	str	r3, [r7, #16]

        output_data[i * depth + c] = static_cast<OutputT>(std::max(
            std::min(shifted_output,
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
 801d826:	f7f7 fef2 	bl	801560e <_ZNSt14numeric_limitsIhE3maxEv>
 801d82a:	4603      	mov	r3, r0
 801d82c:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
 801d82e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801d832:	f107 0310 	add.w	r3, r7, #16
 801d836:	4611      	mov	r1, r2
 801d838:	4618      	mov	r0, r3
 801d83a:	f7f8 fabd 	bl	8015db8 <_ZSt3minIlERKT_S2_S2_>
 801d83e:	4604      	mov	r4, r0
 801d840:	f7f7 fedd 	bl	80155fe <_ZNSt14numeric_limitsIhE3minEv>
 801d844:	4603      	mov	r3, r0
 801d846:	63bb      	str	r3, [r7, #56]	; 0x38
 801d848:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801d84c:	4619      	mov	r1, r3
 801d84e:	4620      	mov	r0, r4
 801d850:	f7f8 fa9e 	bl	8015d90 <_ZSt3maxIlERKT_S2_S2_>
 801d854:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 801d856:	6819      	ldr	r1, [r3, #0]
 801d858:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d85a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801d85c:	fb02 f203 	mul.w	r2, r2, r3
 801d860:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d862:	4413      	add	r3, r2
 801d864:	461a      	mov	r2, r3
 801d866:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801d86a:	4413      	add	r3, r2
 801d86c:	b2ca      	uxtb	r2, r1
 801d86e:	701a      	strb	r2, [r3, #0]
 801d870:	e00d      	b.n	801d88e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x21e>
      } else {
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 801d872:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d874:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801d876:	fb02 f203 	mul.w	r2, r2, r3
 801d87a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d87c:	4413      	add	r3, r2
 801d87e:	461a      	mov	r2, r3
 801d880:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801d884:	189c      	adds	r4, r3, r2
 801d886:	f7f7 feba 	bl	80155fe <_ZNSt14numeric_limitsIhE3minEv>
 801d88a:	4603      	mov	r3, r0
 801d88c:	7023      	strb	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 801d88e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d890:	3301      	adds	r3, #1
 801d892:	66bb      	str	r3, [r7, #104]	; 0x68
 801d894:	e785      	b.n	801d7a2 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x132>
  for (int i = 0; i < outer_size; ++i) {
 801d896:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d898:	3301      	adds	r3, #1
 801d89a:	677b      	str	r3, [r7, #116]	; 0x74
 801d89c:	e70d      	b.n	801d6ba <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
      }
    }
  }
}
 801d89e:	bf00      	nop
 801d8a0:	377c      	adds	r7, #124	; 0x7c
 801d8a2:	46bd      	mov	sp, r7
 801d8a4:	bd90      	pop	{r4, r7, pc}

0801d8a6 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 801d8a6:	b590      	push	{r4, r7, lr}
 801d8a8:	b09f      	sub	sp, #124	; 0x7c
 801d8aa:	af00      	add	r7, sp, #0
 801d8ac:	60f8      	str	r0, [r7, #12]
 801d8ae:	60b9      	str	r1, [r7, #8]
 801d8b0:	607a      	str	r2, [r7, #4]
 801d8b2:	603b      	str	r3, [r7, #0]
  const int32 input_beta_multiplier = params.input_multiplier;
 801d8b4:	68fb      	ldr	r3, [r7, #12]
 801d8b6:	689b      	ldr	r3, [r3, #8]
 801d8b8:	667b      	str	r3, [r7, #100]	; 0x64
  const int32 input_beta_left_shift = params.input_left_shift;
 801d8ba:	68fb      	ldr	r3, [r7, #12]
 801d8bc:	68db      	ldr	r3, [r3, #12]
 801d8be:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 801d8c0:	68fb      	ldr	r3, [r7, #12]
 801d8c2:	699b      	ldr	r3, [r3, #24]
 801d8c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 801d8c6:	68b8      	ldr	r0, [r7, #8]
 801d8c8:	f7fb fadb 	bl	8018e82 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801d8cc:	4603      	mov	r3, r0
 801d8ce:	3b01      	subs	r3, #1
 801d8d0:	65bb      	str	r3, [r7, #88]	; 0x58
  const int outer_size =
 801d8d2:	683a      	ldr	r2, [r7, #0]
 801d8d4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801d8d6:	68b8      	ldr	r0, [r7, #8]
 801d8d8:	f7fe f809 	bl	801b8ee <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 801d8dc:	6578      	str	r0, [r7, #84]	; 0x54
  const int depth =
 801d8de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801d8e0:	683a      	ldr	r2, [r7, #0]
 801d8e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801d8e4:	68b8      	ldr	r0, [r7, #8]
 801d8e6:	f7fb febd 	bl	8019664 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801d8ea:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 801d8ec:	2300      	movs	r3, #0
 801d8ee:	677b      	str	r3, [r7, #116]	; 0x74
 801d8f0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801d8f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d8f4:	429a      	cmp	r2, r3
 801d8f6:	f280 80f0 	bge.w	801dada <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x234>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 801d8fa:	2380      	movs	r3, #128	; 0x80
 801d8fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 801d900:	2300      	movs	r3, #0
 801d902:	673b      	str	r3, [r7, #112]	; 0x70
 801d904:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801d906:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d908:	429a      	cmp	r2, r3
 801d90a:	da17      	bge.n	801d93c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x96>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 801d90c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d90e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801d910:	fb02 f203 	mul.w	r2, r2, r3
 801d914:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d916:	4413      	add	r3, r2
 801d918:	461a      	mov	r2, r3
 801d91a:	687b      	ldr	r3, [r7, #4]
 801d91c:	441a      	add	r2, r3
 801d91e:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 801d922:	4611      	mov	r1, r2
 801d924:	4618      	mov	r0, r3
 801d926:	f7ff fa7f 	bl	801ce28 <_ZSt3maxIaERKT_S2_S2_>
 801d92a:	4603      	mov	r3, r0
 801d92c:	f993 3000 	ldrsb.w	r3, [r3]
 801d930:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 801d934:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d936:	3301      	adds	r3, #1
 801d938:	673b      	str	r3, [r7, #112]	; 0x70
 801d93a:	e7e3      	b.n	801d904 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 801d93c:	f000 f9ef 	bl	801dd1e <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 801d940:	4603      	mov	r3, r0
 801d942:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 801d944:	2300      	movs	r3, #0
 801d946:	66fb      	str	r3, [r7, #108]	; 0x6c
 801d948:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801d94a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d94c:	429a      	cmp	r2, r3
 801d94e:	da30      	bge.n	801d9b2 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x10c>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 801d950:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d952:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801d954:	fb02 f203 	mul.w	r2, r2, r3
 801d958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d95a:	4413      	add	r3, r2
 801d95c:	461a      	mov	r2, r3
 801d95e:	687b      	ldr	r3, [r7, #4]
 801d960:	4413      	add	r3, r2
 801d962:	f993 3000 	ldrsb.w	r3, [r3]
 801d966:	461a      	mov	r2, r3
 801d968:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 801d96c:	1ad3      	subs	r3, r2, r3
 801d96e:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 801d970:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801d972:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d974:	429a      	cmp	r2, r3
 801d976:	db18      	blt.n	801d9aa <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x104>
        const int32 input_diff_rescaled =
 801d978:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801d97a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801d97c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801d97e:	f7ff fa7f 	bl	801ce80 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 801d982:	64b8      	str	r0, [r7, #72]	; 0x48
        const FixedPointScaledDiff scaled_diff_f8 =
 801d984:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801d986:	f000 f9d2 	bl	801dd2e <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801d98a:	4603      	mov	r3, r0
 801d98c:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 801d98e:	69f8      	ldr	r0, [r7, #28]
 801d990:	f000 f9fc 	bl	801dd8c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 801d994:	4603      	mov	r3, r0
 801d996:	4618      	mov	r0, r3
 801d998:	f000 fb40 	bl	801e01c <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 801d99c:	4603      	mov	r3, r0
 801d99e:	4619      	mov	r1, r3
 801d9a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d9a2:	f000 f9d5 	bl	801dd50 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801d9a6:	4603      	mov	r3, r0
 801d9a8:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 801d9aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d9ac:	3301      	adds	r3, #1
 801d9ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 801d9b0:	e7ca      	b.n	801d948 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa2>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 801d9b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d9b6:	4618      	mov	r0, r3
 801d9b8:	f000 fb4a 	bl	801e050 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801d9bc:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 801d9be:	681b      	ldr	r3, [r3, #0]
 801d9c0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801d9c4:	210c      	movs	r1, #12
 801d9c6:	4618      	mov	r0, r3
 801d9c8:	f7ff fa6d 	bl	801cea6 <_ZN6tflite13GetReciprocalEliPi>
 801d9cc:	4603      	mov	r3, r0
 801d9ce:	4618      	mov	r0, r3
 801d9d0:	f7fe f8e4 	bl	801bb9c <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801d9d4:	4603      	mov	r3, r0
 801d9d6:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 801d9d8:	2300      	movs	r3, #0
 801d9da:	66bb      	str	r3, [r7, #104]	; 0x68
 801d9dc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801d9de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d9e0:	429a      	cmp	r2, r3
 801d9e2:	da76      	bge.n	801dad2 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22c>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 801d9e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d9e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801d9e8:	fb02 f203 	mul.w	r2, r2, r3
 801d9ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d9ee:	4413      	add	r3, r2
 801d9f0:	461a      	mov	r2, r3
 801d9f2:	687b      	ldr	r3, [r7, #4]
 801d9f4:	4413      	add	r3, r2
 801d9f6:	f993 3000 	ldrsb.w	r3, [r3]
 801d9fa:	461a      	mov	r2, r3
 801d9fc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 801da00:	1ad3      	subs	r3, r2, r3
 801da02:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 801da04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801da06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801da08:	429a      	cmp	r2, r3
 801da0a:	db50      	blt.n	801daae <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x208>
        const int32 input_diff_rescaled =
 801da0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801da0e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801da10:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801da12:	f7ff fa35 	bl	801ce80 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 801da16:	6438      	str	r0, [r7, #64]	; 0x40
        const FixedPointScaledDiff scaled_diff_f8 =
 801da18:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801da1a:	f000 f988 	bl	801dd2e <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801da1e:	4603      	mov	r3, r0
 801da20:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 801da22:	69b8      	ldr	r0, [r7, #24]
 801da24:	f000 f9b2 	bl	801dd8c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 801da28:	4603      	mov	r3, r0
 801da2a:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 801da2c:	6979      	ldr	r1, [r7, #20]
 801da2e:	6a38      	ldr	r0, [r7, #32]
 801da30:	f7fe fbae 	bl	801c190 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801da34:	4603      	mov	r3, r0
 801da36:	633b      	str	r3, [r7, #48]	; 0x30
 801da38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801da3c:	4618      	mov	r0, r3
 801da3e:	f7fd ff97 	bl	801b970 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801da42:	4603      	mov	r3, r0
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 801da44:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 801da46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801da48:	320f      	adds	r2, #15
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 801da4a:	4611      	mov	r1, r2
 801da4c:	4618      	mov	r0, r3
 801da4e:	f7fb fcaf 	bl	80193b0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801da52:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32>(std::numeric_limits<OutputT>::min());
 801da54:	f7f7 fde4 	bl	8015620 <_ZNSt14numeric_limitsIsE3minEv>
 801da58:	4603      	mov	r3, r0
 801da5a:	461a      	mov	r2, r3
            unsat_output +
 801da5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801da5e:	4413      	add	r3, r2
        const int32 shifted_output =
 801da60:	613b      	str	r3, [r7, #16]
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
 801da62:	f7f7 fde7 	bl	8015634 <_ZNSt14numeric_limitsIsE3maxEv>
 801da66:	4603      	mov	r3, r0
 801da68:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
 801da6a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801da6e:	f107 0310 	add.w	r3, r7, #16
 801da72:	4611      	mov	r1, r2
 801da74:	4618      	mov	r0, r3
 801da76:	f7f8 f99f 	bl	8015db8 <_ZSt3minIlERKT_S2_S2_>
 801da7a:	4604      	mov	r4, r0
 801da7c:	f7f7 fdd0 	bl	8015620 <_ZNSt14numeric_limitsIsE3minEv>
 801da80:	4603      	mov	r3, r0
 801da82:	63bb      	str	r3, [r7, #56]	; 0x38
 801da84:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801da88:	4619      	mov	r1, r3
 801da8a:	4620      	mov	r0, r4
 801da8c:	f7f8 f980 	bl	8015d90 <_ZSt3maxIlERKT_S2_S2_>
 801da90:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 801da92:	6819      	ldr	r1, [r3, #0]
 801da94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801da96:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801da98:	fb02 f203 	mul.w	r2, r2, r3
 801da9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801da9e:	4413      	add	r3, r2
 801daa0:	005b      	lsls	r3, r3, #1
 801daa2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801daa6:	4413      	add	r3, r2
 801daa8:	b20a      	sxth	r2, r1
 801daaa:	801a      	strh	r2, [r3, #0]
 801daac:	e00d      	b.n	801daca <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x224>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 801daae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801dab0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801dab2:	fb02 f203 	mul.w	r2, r2, r3
 801dab6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801dab8:	4413      	add	r3, r2
 801daba:	005b      	lsls	r3, r3, #1
 801dabc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801dac0:	18d4      	adds	r4, r2, r3
 801dac2:	f7f7 fdad 	bl	8015620 <_ZNSt14numeric_limitsIsE3minEv>
 801dac6:	4603      	mov	r3, r0
 801dac8:	8023      	strh	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 801daca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801dacc:	3301      	adds	r3, #1
 801dace:	66bb      	str	r3, [r7, #104]	; 0x68
 801dad0:	e784      	b.n	801d9dc <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
  for (int i = 0; i < outer_size; ++i) {
 801dad2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801dad4:	3301      	adds	r3, #1
 801dad6:	677b      	str	r3, [r7, #116]	; 0x74
 801dad8:	e70a      	b.n	801d8f0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 801dada:	bf00      	nop
 801dadc:	377c      	adds	r7, #124	; 0x7c
 801dade:	46bd      	mov	sp, r7
 801dae0:	bd90      	pop	{r4, r7, pc}

0801dae2 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 801dae2:	b590      	push	{r4, r7, lr}
 801dae4:	b09f      	sub	sp, #124	; 0x7c
 801dae6:	af00      	add	r7, sp, #0
 801dae8:	60f8      	str	r0, [r7, #12]
 801daea:	60b9      	str	r1, [r7, #8]
 801daec:	607a      	str	r2, [r7, #4]
 801daee:	603b      	str	r3, [r7, #0]
  const int32 input_beta_multiplier = params.input_multiplier;
 801daf0:	68fb      	ldr	r3, [r7, #12]
 801daf2:	689b      	ldr	r3, [r3, #8]
 801daf4:	667b      	str	r3, [r7, #100]	; 0x64
  const int32 input_beta_left_shift = params.input_left_shift;
 801daf6:	68fb      	ldr	r3, [r7, #12]
 801daf8:	68db      	ldr	r3, [r3, #12]
 801dafa:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 801dafc:	68fb      	ldr	r3, [r7, #12]
 801dafe:	699b      	ldr	r3, [r3, #24]
 801db00:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 801db02:	68b8      	ldr	r0, [r7, #8]
 801db04:	f7fb f9bd 	bl	8018e82 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801db08:	4603      	mov	r3, r0
 801db0a:	3b01      	subs	r3, #1
 801db0c:	65bb      	str	r3, [r7, #88]	; 0x58
  const int outer_size =
 801db0e:	683a      	ldr	r2, [r7, #0]
 801db10:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801db12:	68b8      	ldr	r0, [r7, #8]
 801db14:	f7fd feeb 	bl	801b8ee <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 801db18:	6578      	str	r0, [r7, #84]	; 0x54
  const int depth =
 801db1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801db1c:	683a      	ldr	r2, [r7, #0]
 801db1e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801db20:	68b8      	ldr	r0, [r7, #8]
 801db22:	f7fb fd9f 	bl	8019664 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801db26:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 801db28:	2300      	movs	r3, #0
 801db2a:	677b      	str	r3, [r7, #116]	; 0x74
 801db2c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801db2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801db30:	429a      	cmp	r2, r3
 801db32:	f280 80f0 	bge.w	801dd16 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x234>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 801db36:	2380      	movs	r3, #128	; 0x80
 801db38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 801db3c:	2300      	movs	r3, #0
 801db3e:	673b      	str	r3, [r7, #112]	; 0x70
 801db40:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801db42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801db44:	429a      	cmp	r2, r3
 801db46:	da17      	bge.n	801db78 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x96>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 801db48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801db4a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801db4c:	fb02 f203 	mul.w	r2, r2, r3
 801db50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801db52:	4413      	add	r3, r2
 801db54:	461a      	mov	r2, r3
 801db56:	687b      	ldr	r3, [r7, #4]
 801db58:	441a      	add	r2, r3
 801db5a:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 801db5e:	4611      	mov	r1, r2
 801db60:	4618      	mov	r0, r3
 801db62:	f7ff f961 	bl	801ce28 <_ZSt3maxIaERKT_S2_S2_>
 801db66:	4603      	mov	r3, r0
 801db68:	f993 3000 	ldrsb.w	r3, [r3]
 801db6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 801db70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801db72:	3301      	adds	r3, #1
 801db74:	673b      	str	r3, [r7, #112]	; 0x70
 801db76:	e7e3      	b.n	801db40 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 801db78:	f000 f8d1 	bl	801dd1e <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 801db7c:	4603      	mov	r3, r0
 801db7e:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 801db80:	2300      	movs	r3, #0
 801db82:	66fb      	str	r3, [r7, #108]	; 0x6c
 801db84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801db86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801db88:	429a      	cmp	r2, r3
 801db8a:	da30      	bge.n	801dbee <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x10c>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 801db8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801db8e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801db90:	fb02 f203 	mul.w	r2, r2, r3
 801db94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801db96:	4413      	add	r3, r2
 801db98:	461a      	mov	r2, r3
 801db9a:	687b      	ldr	r3, [r7, #4]
 801db9c:	4413      	add	r3, r2
 801db9e:	f993 3000 	ldrsb.w	r3, [r3]
 801dba2:	461a      	mov	r2, r3
 801dba4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 801dba8:	1ad3      	subs	r3, r2, r3
 801dbaa:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 801dbac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801dbae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801dbb0:	429a      	cmp	r2, r3
 801dbb2:	db18      	blt.n	801dbe6 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x104>
        const int32 input_diff_rescaled =
 801dbb4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801dbb6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801dbb8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801dbba:	f7ff f961 	bl	801ce80 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 801dbbe:	64b8      	str	r0, [r7, #72]	; 0x48
        const FixedPointScaledDiff scaled_diff_f8 =
 801dbc0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801dbc2:	f000 f8b4 	bl	801dd2e <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801dbc6:	4603      	mov	r3, r0
 801dbc8:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 801dbca:	69f8      	ldr	r0, [r7, #28]
 801dbcc:	f000 f8de 	bl	801dd8c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 801dbd0:	4603      	mov	r3, r0
 801dbd2:	4618      	mov	r0, r3
 801dbd4:	f000 fa22 	bl	801e01c <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 801dbd8:	4603      	mov	r3, r0
 801dbda:	4619      	mov	r1, r3
 801dbdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801dbde:	f000 f8b7 	bl	801dd50 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801dbe2:	4603      	mov	r3, r0
 801dbe4:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 801dbe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801dbe8:	3301      	adds	r3, #1
 801dbea:	66fb      	str	r3, [r7, #108]	; 0x6c
 801dbec:	e7ca      	b.n	801db84 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa2>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 801dbee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801dbf2:	4618      	mov	r0, r3
 801dbf4:	f000 fa2c 	bl	801e050 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801dbf8:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 801dbfa:	681b      	ldr	r3, [r3, #0]
 801dbfc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801dc00:	210c      	movs	r1, #12
 801dc02:	4618      	mov	r0, r3
 801dc04:	f7ff f94f 	bl	801cea6 <_ZN6tflite13GetReciprocalEliPi>
 801dc08:	4603      	mov	r3, r0
 801dc0a:	4618      	mov	r0, r3
 801dc0c:	f7fd ffc6 	bl	801bb9c <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801dc10:	4603      	mov	r3, r0
 801dc12:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 801dc14:	2300      	movs	r3, #0
 801dc16:	66bb      	str	r3, [r7, #104]	; 0x68
 801dc18:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801dc1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dc1c:	429a      	cmp	r2, r3
 801dc1e:	da76      	bge.n	801dd0e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22c>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 801dc20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801dc22:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801dc24:	fb02 f203 	mul.w	r2, r2, r3
 801dc28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801dc2a:	4413      	add	r3, r2
 801dc2c:	461a      	mov	r2, r3
 801dc2e:	687b      	ldr	r3, [r7, #4]
 801dc30:	4413      	add	r3, r2
 801dc32:	f993 3000 	ldrsb.w	r3, [r3]
 801dc36:	461a      	mov	r2, r3
 801dc38:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 801dc3c:	1ad3      	subs	r3, r2, r3
 801dc3e:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 801dc40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801dc42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801dc44:	429a      	cmp	r2, r3
 801dc46:	db50      	blt.n	801dcea <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x208>
        const int32 input_diff_rescaled =
 801dc48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801dc4a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801dc4c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801dc4e:	f7ff f917 	bl	801ce80 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 801dc52:	6438      	str	r0, [r7, #64]	; 0x40
        const FixedPointScaledDiff scaled_diff_f8 =
 801dc54:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801dc56:	f000 f86a 	bl	801dd2e <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801dc5a:	4603      	mov	r3, r0
 801dc5c:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 801dc5e:	69b8      	ldr	r0, [r7, #24]
 801dc60:	f000 f894 	bl	801dd8c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 801dc64:	4603      	mov	r3, r0
 801dc66:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 801dc68:	6979      	ldr	r1, [r7, #20]
 801dc6a:	6a38      	ldr	r0, [r7, #32]
 801dc6c:	f7fe fa90 	bl	801c190 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801dc70:	4603      	mov	r3, r0
 801dc72:	633b      	str	r3, [r7, #48]	; 0x30
 801dc74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801dc78:	4618      	mov	r0, r3
 801dc7a:	f7fd fe79 	bl	801b970 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801dc7e:	4603      	mov	r3, r0
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 801dc80:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 801dc82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801dc84:	3217      	adds	r2, #23
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 801dc86:	4611      	mov	r1, r2
 801dc88:	4618      	mov	r0, r3
 801dc8a:	f7fb fb91 	bl	80193b0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801dc8e:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32>(std::numeric_limits<OutputT>::min());
 801dc90:	f7f7 fca4 	bl	80155dc <_ZNSt14numeric_limitsIaE3minEv>
 801dc94:	4603      	mov	r3, r0
 801dc96:	461a      	mov	r2, r3
            unsat_output +
 801dc98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dc9a:	4413      	add	r3, r2
        const int32 shifted_output =
 801dc9c:	613b      	str	r3, [r7, #16]
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
 801dc9e:	f7f7 fca6 	bl	80155ee <_ZNSt14numeric_limitsIaE3maxEv>
 801dca2:	4603      	mov	r3, r0
 801dca4:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
 801dca6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801dcaa:	f107 0310 	add.w	r3, r7, #16
 801dcae:	4611      	mov	r1, r2
 801dcb0:	4618      	mov	r0, r3
 801dcb2:	f7f8 f881 	bl	8015db8 <_ZSt3minIlERKT_S2_S2_>
 801dcb6:	4604      	mov	r4, r0
 801dcb8:	f7f7 fc90 	bl	80155dc <_ZNSt14numeric_limitsIaE3minEv>
 801dcbc:	4603      	mov	r3, r0
 801dcbe:	63bb      	str	r3, [r7, #56]	; 0x38
 801dcc0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801dcc4:	4619      	mov	r1, r3
 801dcc6:	4620      	mov	r0, r4
 801dcc8:	f7f8 f862 	bl	8015d90 <_ZSt3maxIlERKT_S2_S2_>
 801dccc:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 801dcce:	6819      	ldr	r1, [r3, #0]
 801dcd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801dcd2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801dcd4:	fb02 f203 	mul.w	r2, r2, r3
 801dcd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801dcda:	4413      	add	r3, r2
 801dcdc:	461a      	mov	r2, r3
 801dcde:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801dce2:	4413      	add	r3, r2
 801dce4:	b24a      	sxtb	r2, r1
 801dce6:	701a      	strb	r2, [r3, #0]
 801dce8:	e00d      	b.n	801dd06 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x224>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 801dcea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801dcec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801dcee:	fb02 f203 	mul.w	r2, r2, r3
 801dcf2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801dcf4:	4413      	add	r3, r2
 801dcf6:	461a      	mov	r2, r3
 801dcf8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801dcfc:	189c      	adds	r4, r3, r2
 801dcfe:	f7f7 fc6d 	bl	80155dc <_ZNSt14numeric_limitsIaE3minEv>
 801dd02:	4603      	mov	r3, r0
 801dd04:	7023      	strb	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 801dd06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801dd08:	3301      	adds	r3, #1
 801dd0a:	66bb      	str	r3, [r7, #104]	; 0x68
 801dd0c:	e784      	b.n	801dc18 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
  for (int i = 0; i < outer_size; ++i) {
 801dd0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801dd10:	3301      	adds	r3, #1
 801dd12:	677b      	str	r3, [r7, #116]	; 0x74
 801dd14:	e70a      	b.n	801db2c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 801dd16:	bf00      	nop
 801dd18:	377c      	adds	r7, #124	; 0x7c
 801dd1a:	46bd      	mov	sp, r7
 801dd1c:	bd90      	pop	{r4, r7, pc}

0801dd1e <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>:
  static FixedPoint Zero() { return FromScalarRaw(0); }
 801dd1e:	b580      	push	{r7, lr}
 801dd20:	af00      	add	r7, sp, #0
 801dd22:	2000      	movs	r0, #0
 801dd24:	f000 f99f 	bl	801e066 <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>
 801dd28:	4603      	mov	r3, r0
 801dd2a:	4618      	mov	r0, r3
 801dd2c:	bd80      	pop	{r7, pc}

0801dd2e <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 801dd2e:	b580      	push	{r7, lr}
 801dd30:	b084      	sub	sp, #16
 801dd32:	af00      	add	r7, sp, #0
 801dd34:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 801dd36:	f107 030c 	add.w	r3, r7, #12
 801dd3a:	4618      	mov	r0, r3
 801dd3c:	f000 f9a7 	bl	801e08e <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801dd40:	4602      	mov	r2, r0
 801dd42:	687b      	ldr	r3, [r7, #4]
 801dd44:	6013      	str	r3, [r2, #0]
    return retval;
 801dd46:	68fb      	ldr	r3, [r7, #12]
  }
 801dd48:	4618      	mov	r0, r3
 801dd4a:	3710      	adds	r7, #16
 801dd4c:	46bd      	mov	sp, r7
 801dd4e:	bd80      	pop	{r7, pc}

0801dd50 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 801dd50:	b590      	push	{r4, r7, lr}
 801dd52:	b083      	sub	sp, #12
 801dd54:	af00      	add	r7, sp, #0
 801dd56:	6078      	str	r0, [r7, #4]
 801dd58:	6039      	str	r1, [r7, #0]
 801dd5a:	1d3b      	adds	r3, r7, #4
 801dd5c:	4618      	mov	r0, r3
 801dd5e:	f000 f977 	bl	801e050 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801dd62:	4603      	mov	r3, r0
 801dd64:	681c      	ldr	r4, [r3, #0]
 801dd66:	463b      	mov	r3, r7
 801dd68:	4618      	mov	r0, r3
 801dd6a:	f000 f971 	bl	801e050 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801dd6e:	4603      	mov	r3, r0
 801dd70:	681b      	ldr	r3, [r3, #0]
 801dd72:	4619      	mov	r1, r3
 801dd74:	4620      	mov	r0, r4
 801dd76:	f7fb fc0b 	bl	8019590 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 801dd7a:	4603      	mov	r3, r0
 801dd7c:	4618      	mov	r0, r3
 801dd7e:	f000 f991 	bl	801e0a4 <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>
 801dd82:	4603      	mov	r3, r0
 801dd84:	4618      	mov	r0, r3
 801dd86:	370c      	adds	r7, #12
 801dd88:	46bd      	mov	sp, r7
 801dd8a:	bd90      	pop	{r4, r7, pc}

0801dd8c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
 801dd8c:	b590      	push	{r4, r7, lr}
 801dd8e:	b091      	sub	sp, #68	; 0x44
 801dd90:	af00      	add	r7, sp, #0
 801dd92:	6078      	str	r0, [r7, #4]
  const InputF kOneQuarter = InputF::template ConstantPOT<-2>();
 801dd94:	f000 f997 	bl	801e0c6 <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>
 801dd98:	4603      	mov	r3, r0
 801dd9a:	637b      	str	r3, [r7, #52]	; 0x34
  InputF mask = kOneQuarter - InputF::FromScalarRaw(1);
 801dd9c:	2001      	movs	r0, #1
 801dd9e:	f000 f99b 	bl	801e0d8 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 801dda2:	4603      	mov	r3, r0
 801dda4:	4619      	mov	r1, r3
 801dda6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801dda8:	f000 f9aa 	bl	801e100 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801ddac:	4603      	mov	r3, r0
 801ddae:	633b      	str	r3, [r7, #48]	; 0x30
  InputF a_mod_quarter_minus_one_quarter = (a & mask) - kOneQuarter;
 801ddb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801ddb2:	6878      	ldr	r0, [r7, #4]
 801ddb4:	f000 f9c2 	bl	801e13c <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801ddb8:	4603      	mov	r3, r0
 801ddba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801ddbc:	4618      	mov	r0, r3
 801ddbe:	f000 f99f 	bl	801e100 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801ddc2:	4603      	mov	r3, r0
 801ddc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
 801ddc6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801ddc8:	f000 f9d6 	bl	801e178 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 801ddcc:	4603      	mov	r3, r0
 801ddce:	4618      	mov	r0, r3
 801ddd0:	f7fe f97c 	bl	801c0cc <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>
 801ddd4:	4603      	mov	r3, r0
 801ddd6:	62bb      	str	r3, [r7, #40]	; 0x28
  tRawType remainder = (a_mod_quarter_minus_one_quarter - a).raw();
 801ddd8:	6879      	ldr	r1, [r7, #4]
 801ddda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801dddc:	f000 f990 	bl	801e100 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801dde0:	4603      	mov	r3, r0
 801dde2:	63bb      	str	r3, [r7, #56]	; 0x38
 801dde4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801dde8:	4618      	mov	r0, r3
 801ddea:	f000 f950 	bl	801e08e <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801ddee:	4603      	mov	r3, r0
 801ddf0:	681b      	ldr	r3, [r3, #0]
 801ddf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
 801ddf4:	4883      	ldr	r0, [pc, #524]	; (801e004 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x278>)
 801ddf6:	f7fd fdda 	bl	801b9ae <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801ddfa:	4603      	mov	r3, r0
 801ddfc:	4618      	mov	r0, r3
 801ddfe:	f7fd fdc2 	bl	801b986 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801de02:	4603      	mov	r3, r0
 801de04:	627b      	str	r3, [r7, #36]	; 0x24
 801de06:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 801de0a:	f7fb fb85 	bl	8019518 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801de0e:	4603      	mov	r3, r0
 801de10:	4619      	mov	r1, r3
 801de12:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801de14:	f7fb fb8b 	bl	801952e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801de18:	4603      	mov	r3, r0
 801de1a:	4618      	mov	r0, r3
 801de1c:	f7fb fbda 	bl	80195d4 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801de20:	4604      	mov	r4, r0
 801de22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801de24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801de26:	f7fe f9b3 	bl	801c190 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801de2a:	4603      	mov	r3, r0
 801de2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801de2e:	4619      	mov	r1, r3
 801de30:	4620      	mov	r0, r4
 801de32:	f7fe f84d 	bl	801bed0 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801de36:	4603      	mov	r3, r0
 801de38:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
 801de3a:	4873      	ldr	r0, [pc, #460]	; (801e008 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x27c>)
 801de3c:	f7fd fdb7 	bl	801b9ae <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801de40:	4603      	mov	r3, r0
 801de42:	4618      	mov	r0, r3
 801de44:	f7fd fd9f 	bl	801b986 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801de48:	4603      	mov	r3, r0
 801de4a:	623b      	str	r3, [r7, #32]
 801de4c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 801de50:	f7fb fb62 	bl	8019518 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801de54:	4603      	mov	r3, r0
 801de56:	4619      	mov	r1, r3
 801de58:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801de5a:	f7fb fb68 	bl	801952e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801de5e:	4603      	mov	r3, r0
 801de60:	4618      	mov	r0, r3
 801de62:	f7fb fbb7 	bl	80195d4 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801de66:	4604      	mov	r4, r0
 801de68:	6a39      	ldr	r1, [r7, #32]
 801de6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801de6c:	f7fe f990 	bl	801c190 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801de70:	4603      	mov	r3, r0
 801de72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801de74:	4619      	mov	r1, r3
 801de76:	4620      	mov	r0, r4
 801de78:	f7fe f82a 	bl	801bed0 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801de7c:	4603      	mov	r3, r0
 801de7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
 801de80:	4862      	ldr	r0, [pc, #392]	; (801e00c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x280>)
 801de82:	f7fd fd94 	bl	801b9ae <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801de86:	4603      	mov	r3, r0
 801de88:	4618      	mov	r0, r3
 801de8a:	f7fd fd7c 	bl	801b986 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801de8e:	4603      	mov	r3, r0
 801de90:	61fb      	str	r3, [r7, #28]
 801de92:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 801de96:	f7fb fb3f 	bl	8019518 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801de9a:	4603      	mov	r3, r0
 801de9c:	4619      	mov	r1, r3
 801de9e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801dea0:	f7fb fb45 	bl	801952e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801dea4:	4603      	mov	r3, r0
 801dea6:	4618      	mov	r0, r3
 801dea8:	f7fb fb94 	bl	80195d4 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801deac:	4604      	mov	r4, r0
 801deae:	69f9      	ldr	r1, [r7, #28]
 801deb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801deb2:	f7fe f96d 	bl	801c190 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801deb6:	4603      	mov	r3, r0
 801deb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801deba:	4619      	mov	r1, r3
 801debc:	4620      	mov	r0, r4
 801debe:	f7fe f807 	bl	801bed0 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801dec2:	4603      	mov	r3, r0
 801dec4:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
 801dec6:	4852      	ldr	r0, [pc, #328]	; (801e010 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x284>)
 801dec8:	f7fd fd71 	bl	801b9ae <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801decc:	4603      	mov	r3, r0
 801dece:	4618      	mov	r0, r3
 801ded0:	f7fd fd59 	bl	801b986 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801ded4:	4603      	mov	r3, r0
 801ded6:	61bb      	str	r3, [r7, #24]
 801ded8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 801dedc:	f7fb fb1c 	bl	8019518 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801dee0:	4603      	mov	r3, r0
 801dee2:	4619      	mov	r1, r3
 801dee4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801dee6:	f7fb fb22 	bl	801952e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801deea:	4603      	mov	r3, r0
 801deec:	4618      	mov	r0, r3
 801deee:	f7fb fb71 	bl	80195d4 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801def2:	4604      	mov	r4, r0
 801def4:	69b9      	ldr	r1, [r7, #24]
 801def6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801def8:	f7fe f94a 	bl	801c190 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801defc:	4603      	mov	r3, r0
 801defe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801df00:	4619      	mov	r1, r3
 801df02:	4620      	mov	r0, r4
 801df04:	f7fd ffe4 	bl	801bed0 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801df08:	4603      	mov	r3, r0
 801df0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
 801df0c:	4841      	ldr	r0, [pc, #260]	; (801e014 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x288>)
 801df0e:	f7fd fd4e 	bl	801b9ae <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801df12:	4603      	mov	r3, r0
 801df14:	4618      	mov	r0, r3
 801df16:	f7fd fd36 	bl	801b986 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801df1a:	4603      	mov	r3, r0
 801df1c:	617b      	str	r3, [r7, #20]
 801df1e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 801df22:	f7fb faf9 	bl	8019518 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801df26:	4603      	mov	r3, r0
 801df28:	4619      	mov	r1, r3
 801df2a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801df2c:	f7fb faff 	bl	801952e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801df30:	4603      	mov	r3, r0
 801df32:	4618      	mov	r0, r3
 801df34:	f7fb fb4e 	bl	80195d4 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801df38:	4604      	mov	r4, r0
 801df3a:	6979      	ldr	r1, [r7, #20]
 801df3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801df3e:	f7fe f927 	bl	801c190 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801df42:	4603      	mov	r3, r0
 801df44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801df46:	4619      	mov	r1, r3
 801df48:	4620      	mov	r0, r4
 801df4a:	f7fd ffc1 	bl	801bed0 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801df4e:	4603      	mov	r3, r0
 801df50:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
 801df52:	4831      	ldr	r0, [pc, #196]	; (801e018 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x28c>)
 801df54:	f7fd fd2b 	bl	801b9ae <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801df58:	4603      	mov	r3, r0
 801df5a:	4618      	mov	r0, r3
 801df5c:	f7fd fd13 	bl	801b986 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801df60:	4603      	mov	r3, r0
 801df62:	613b      	str	r3, [r7, #16]
 801df64:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 801df68:	f7fb fad6 	bl	8019518 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801df6c:	4603      	mov	r3, r0
 801df6e:	4619      	mov	r1, r3
 801df70:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801df72:	f7fb fadc 	bl	801952e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801df76:	4603      	mov	r3, r0
 801df78:	4618      	mov	r0, r3
 801df7a:	f7fb fb2b 	bl	80195d4 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801df7e:	4604      	mov	r4, r0
 801df80:	6939      	ldr	r1, [r7, #16]
 801df82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801df84:	f7fe f904 	bl	801c190 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801df88:	4603      	mov	r3, r0
 801df8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801df8c:	4619      	mov	r1, r3
 801df8e:	4620      	mov	r0, r4
 801df90:	f7fd ff9e 	bl	801bed0 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801df94:	4603      	mov	r3, r0
 801df96:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
 801df98:	20f2      	movs	r0, #242	; 0xf2
 801df9a:	f7fd fd08 	bl	801b9ae <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801df9e:	4603      	mov	r3, r0
 801dfa0:	4618      	mov	r0, r3
 801dfa2:	f7fd fcf0 	bl	801b986 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801dfa6:	4603      	mov	r3, r0
 801dfa8:	60fb      	str	r3, [r7, #12]
 801dfaa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 801dfae:	f7fb fab3 	bl	8019518 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801dfb2:	4603      	mov	r3, r0
 801dfb4:	4619      	mov	r1, r3
 801dfb6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801dfb8:	f7fb fab9 	bl	801952e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801dfbc:	4603      	mov	r3, r0
 801dfbe:	4618      	mov	r0, r3
 801dfc0:	f7fb fb08 	bl	80195d4 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801dfc4:	4604      	mov	r4, r0
 801dfc6:	68f9      	ldr	r1, [r7, #12]
 801dfc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801dfca:	f7fe f8e1 	bl	801c190 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801dfce:	4603      	mov	r3, r0
 801dfd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801dfd2:	4619      	mov	r1, r3
 801dfd4:	4620      	mov	r0, r4
 801dfd6:	f7fd ff7b 	bl	801bed0 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801dfda:	4603      	mov	r3, r0
 801dfdc:	62bb      	str	r3, [r7, #40]	; 0x28
  result = SelectUsingMask(MaskIfZero(a), ResultF::One(), result);
 801dfde:	6878      	ldr	r0, [r7, #4]
 801dfe0:	f000 f8e4 	bl	801e1ac <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>
 801dfe4:	4604      	mov	r4, r0
 801dfe6:	f7fd fe4b 	bl	801bc80 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 801dfea:	4603      	mov	r3, r0
 801dfec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801dfee:	4619      	mov	r1, r3
 801dff0:	4620      	mov	r0, r4
 801dff2:	f7fd ff6d 	bl	801bed0 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801dff6:	4603      	mov	r3, r0
 801dff8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 801dffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 801dffc:	4618      	mov	r0, r3
 801dffe:	3744      	adds	r7, #68	; 0x44
 801e000:	46bd      	mov	sp, r7
 801e002:	bd90      	pop	{r4, r7, pc}
 801e004:	63afbe7b 	.word	0x63afbe7b
 801e008:	4da2cbf2 	.word	0x4da2cbf2
 801e00c:	2f16ac6c 	.word	0x2f16ac6c
 801e010:	1152aaa4 	.word	0x1152aaa4
 801e014:	02582ab7 	.word	0x02582ab7
 801e018:	000afe11 	.word	0x000afe11

0801e01c <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 801e01c:	b5b0      	push	{r4, r5, r7, lr}
 801e01e:	b084      	sub	sp, #16
 801e020:	af00      	add	r7, sp, #0
 801e022:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 801e024:	1d3b      	adds	r3, r7, #4
 801e026:	4618      	mov	r0, r3
 801e028:	f7fd fca2 	bl	801b970 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801e02c:	4603      	mov	r3, r0
 801e02e:	681d      	ldr	r5, [r3, #0]
 801e030:	f107 030c 	add.w	r3, r7, #12
 801e034:	4618      	mov	r0, r3
 801e036:	f000 f80b 	bl	801e050 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801e03a:	4604      	mov	r4, r0
 801e03c:	4628      	mov	r0, r5
 801e03e:	f000 f8c7 	bl	801e1d0 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>
 801e042:	4603      	mov	r3, r0
 801e044:	6023      	str	r3, [r4, #0]
  return result;
 801e046:	68fb      	ldr	r3, [r7, #12]
}
 801e048:	4618      	mov	r0, r3
 801e04a:	3710      	adds	r7, #16
 801e04c:	46bd      	mov	sp, r7
 801e04e:	bdb0      	pop	{r4, r5, r7, pc}

0801e050 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>:
  RawType& raw() { return i_; }
 801e050:	b480      	push	{r7}
 801e052:	b083      	sub	sp, #12
 801e054:	af00      	add	r7, sp, #0
 801e056:	6078      	str	r0, [r7, #4]
 801e058:	687b      	ldr	r3, [r7, #4]
 801e05a:	4618      	mov	r0, r3
 801e05c:	370c      	adds	r7, #12
 801e05e:	46bd      	mov	sp, r7
 801e060:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e064:	4770      	bx	lr

0801e066 <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 801e066:	b590      	push	{r4, r7, lr}
 801e068:	b085      	sub	sp, #20
 801e06a:	af00      	add	r7, sp, #0
 801e06c:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 801e06e:	f107 030c 	add.w	r3, r7, #12
 801e072:	4618      	mov	r0, r3
 801e074:	f7ff ffec 	bl	801e050 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801e078:	4604      	mov	r4, r0
 801e07a:	6878      	ldr	r0, [r7, #4]
 801e07c:	f7fb fa4c 	bl	8019518 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801e080:	4603      	mov	r3, r0
 801e082:	6023      	str	r3, [r4, #0]
    return retval;
 801e084:	68fb      	ldr	r3, [r7, #12]
  }
 801e086:	4618      	mov	r0, r3
 801e088:	3714      	adds	r7, #20
 801e08a:	46bd      	mov	sp, r7
 801e08c:	bd90      	pop	{r4, r7, pc}

0801e08e <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>:
  RawType& raw() { return i_; }
 801e08e:	b480      	push	{r7}
 801e090:	b083      	sub	sp, #12
 801e092:	af00      	add	r7, sp, #0
 801e094:	6078      	str	r0, [r7, #4]
 801e096:	687b      	ldr	r3, [r7, #4]
 801e098:	4618      	mov	r0, r3
 801e09a:	370c      	adds	r7, #12
 801e09c:	46bd      	mov	sp, r7
 801e09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e0a2:	4770      	bx	lr

0801e0a4 <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 801e0a4:	b580      	push	{r7, lr}
 801e0a6:	b084      	sub	sp, #16
 801e0a8:	af00      	add	r7, sp, #0
 801e0aa:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 801e0ac:	f107 030c 	add.w	r3, r7, #12
 801e0b0:	4618      	mov	r0, r3
 801e0b2:	f7ff ffcd 	bl	801e050 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801e0b6:	4602      	mov	r2, r0
 801e0b8:	687b      	ldr	r3, [r7, #4]
 801e0ba:	6013      	str	r3, [r2, #0]
    return retval;
 801e0bc:	68fb      	ldr	r3, [r7, #12]
  }
 801e0be:	4618      	mov	r0, r3
 801e0c0:	3710      	adds	r7, #16
 801e0c2:	46bd      	mov	sp, r7
 801e0c4:	bd80      	pop	{r7, pc}

0801e0c6 <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>:
  static FixedPoint ConstantPOT() {
 801e0c6:	b580      	push	{r7, lr}
 801e0c8:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 801e0ca:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 801e0ce:	f000 f803 	bl	801e0d8 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 801e0d2:	4603      	mov	r3, r0
  }
 801e0d4:	4618      	mov	r0, r3
 801e0d6:	bd80      	pop	{r7, pc}

0801e0d8 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 801e0d8:	b590      	push	{r4, r7, lr}
 801e0da:	b085      	sub	sp, #20
 801e0dc:	af00      	add	r7, sp, #0
 801e0de:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 801e0e0:	f107 030c 	add.w	r3, r7, #12
 801e0e4:	4618      	mov	r0, r3
 801e0e6:	f7ff ffd2 	bl	801e08e <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801e0ea:	4604      	mov	r4, r0
 801e0ec:	6878      	ldr	r0, [r7, #4]
 801e0ee:	f7fb fa13 	bl	8019518 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801e0f2:	4603      	mov	r3, r0
 801e0f4:	6023      	str	r3, [r4, #0]
    return retval;
 801e0f6:	68fb      	ldr	r3, [r7, #12]
  }
 801e0f8:	4618      	mov	r0, r3
 801e0fa:	3714      	adds	r7, #20
 801e0fc:	46bd      	mov	sp, r7
 801e0fe:	bd90      	pop	{r4, r7, pc}

0801e100 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 801e100:	b590      	push	{r4, r7, lr}
 801e102:	b083      	sub	sp, #12
 801e104:	af00      	add	r7, sp, #0
 801e106:	6078      	str	r0, [r7, #4]
 801e108:	6039      	str	r1, [r7, #0]
 801e10a:	1d3b      	adds	r3, r7, #4
 801e10c:	4618      	mov	r0, r3
 801e10e:	f7ff ffbe 	bl	801e08e <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801e112:	4603      	mov	r3, r0
 801e114:	681c      	ldr	r4, [r3, #0]
 801e116:	463b      	mov	r3, r7
 801e118:	4618      	mov	r0, r3
 801e11a:	f7ff ffb8 	bl	801e08e <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801e11e:	4603      	mov	r3, r0
 801e120:	681b      	ldr	r3, [r3, #0]
 801e122:	4619      	mov	r1, r3
 801e124:	4620      	mov	r0, r4
 801e126:	f7fd fc5b 	bl	801b9e0 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 801e12a:	4603      	mov	r3, r0
 801e12c:	4618      	mov	r0, r3
 801e12e:	f7ff fdfe 	bl	801dd2e <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801e132:	4603      	mov	r3, r0
 801e134:	4618      	mov	r0, r3
 801e136:	370c      	adds	r7, #12
 801e138:	46bd      	mov	sp, r7
 801e13a:	bd90      	pop	{r4, r7, pc}

0801e13c <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator&, BitAnd)
 801e13c:	b590      	push	{r4, r7, lr}
 801e13e:	b083      	sub	sp, #12
 801e140:	af00      	add	r7, sp, #0
 801e142:	6078      	str	r0, [r7, #4]
 801e144:	6039      	str	r1, [r7, #0]
 801e146:	1d3b      	adds	r3, r7, #4
 801e148:	4618      	mov	r0, r3
 801e14a:	f7ff ffa0 	bl	801e08e <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801e14e:	4603      	mov	r3, r0
 801e150:	681c      	ldr	r4, [r3, #0]
 801e152:	463b      	mov	r3, r7
 801e154:	4618      	mov	r0, r3
 801e156:	f7ff ff9a 	bl	801e08e <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801e15a:	4603      	mov	r3, r0
 801e15c:	681b      	ldr	r3, [r3, #0]
 801e15e:	4619      	mov	r1, r3
 801e160:	4620      	mov	r0, r4
 801e162:	f7fb f9e4 	bl	801952e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801e166:	4603      	mov	r3, r0
 801e168:	4618      	mov	r0, r3
 801e16a:	f7ff fde0 	bl	801dd2e <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801e16e:	4603      	mov	r3, r0
 801e170:	4618      	mov	r0, r3
 801e172:	370c      	adds	r7, #12
 801e174:	46bd      	mov	sp, r7
 801e176:	bd90      	pop	{r4, r7, pc}

0801e178 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 801e178:	b5b0      	push	{r4, r5, r7, lr}
 801e17a:	b084      	sub	sp, #16
 801e17c:	af00      	add	r7, sp, #0
 801e17e:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 801e180:	1d3b      	adds	r3, r7, #4
 801e182:	4618      	mov	r0, r3
 801e184:	f7ff ff83 	bl	801e08e <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801e188:	4603      	mov	r3, r0
 801e18a:	681d      	ldr	r5, [r3, #0]
 801e18c:	f107 030c 	add.w	r3, r7, #12
 801e190:	4618      	mov	r0, r3
 801e192:	f7fd fbed 	bl	801b970 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801e196:	4604      	mov	r4, r0
 801e198:	4628      	mov	r0, r5
 801e19a:	f000 f825 	bl	801e1e8 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>
 801e19e:	4603      	mov	r3, r0
 801e1a0:	6023      	str	r3, [r4, #0]
  return result;
 801e1a2:	68fb      	ldr	r3, [r7, #12]
}
 801e1a4:	4618      	mov	r0, r3
 801e1a6:	3710      	adds	r7, #16
 801e1a8:	46bd      	mov	sp, r7
 801e1aa:	bdb0      	pop	{r4, r5, r7, pc}

0801e1ac <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>:
MAKE_FIXEDPOINT_UNARY_FUNC_RETURNING_RAW(MaskIfZero)
 801e1ac:	b580      	push	{r7, lr}
 801e1ae:	b082      	sub	sp, #8
 801e1b0:	af00      	add	r7, sp, #0
 801e1b2:	6078      	str	r0, [r7, #4]
 801e1b4:	1d3b      	adds	r3, r7, #4
 801e1b6:	4618      	mov	r0, r3
 801e1b8:	f7ff ff69 	bl	801e08e <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801e1bc:	4603      	mov	r3, r0
 801e1be:	681b      	ldr	r3, [r3, #0]
 801e1c0:	4618      	mov	r0, r3
 801e1c2:	f7fd feec 	bl	801bf9e <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>
 801e1c6:	4603      	mov	r3, r0
 801e1c8:	4618      	mov	r0, r3
 801e1ca:	3708      	adds	r7, #8
 801e1cc:	46bd      	mov	sp, r7
 801e1ce:	bd80      	pop	{r7, pc}

0801e1d0 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 801e1d0:	b580      	push	{r7, lr}
 801e1d2:	b082      	sub	sp, #8
 801e1d4:	af00      	add	r7, sp, #0
 801e1d6:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801e1d8:	6878      	ldr	r0, [r7, #4]
 801e1da:	f000 f811 	bl	801e200 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>
 801e1de:	4603      	mov	r3, r0
}
 801e1e0:	4618      	mov	r0, r3
 801e1e2:	3708      	adds	r7, #8
 801e1e4:	46bd      	mov	sp, r7
 801e1e6:	bd80      	pop	{r7, pc}

0801e1e8 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 801e1e8:	b580      	push	{r7, lr}
 801e1ea:	b082      	sub	sp, #8
 801e1ec:	af00      	add	r7, sp, #0
 801e1ee:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801e1f0:	6878      	ldr	r0, [r7, #4]
 801e1f2:	f000 f813 	bl	801e21c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>
 801e1f6:	4603      	mov	r3, r0
}
 801e1f8:	4618      	mov	r0, r3
 801e1fa:	3708      	adds	r7, #8
 801e1fc:	46bd      	mov	sp, r7
 801e1fe:	bd80      	pop	{r7, pc}

0801e200 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801e200:	b580      	push	{r7, lr}
 801e202:	b082      	sub	sp, #8
 801e204:	af00      	add	r7, sp, #0
 801e206:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 801e208:	210c      	movs	r1, #12
 801e20a:	6878      	ldr	r0, [r7, #4]
 801e20c:	f7fb f8d0 	bl	80193b0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801e210:	4603      	mov	r3, r0
  }
 801e212:	4618      	mov	r0, r3
 801e214:	3708      	adds	r7, #8
 801e216:	46bd      	mov	sp, r7
 801e218:	bd80      	pop	{r7, pc}
	...

0801e21c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801e21c:	b580      	push	{r7, lr}
 801e21e:	b08a      	sub	sp, #40	; 0x28
 801e220:	af00      	add	r7, sp, #0
 801e222:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 801e224:	f7fa ffad 	bl	8019182 <_ZNSt14numeric_limitsIlE3minEv>
 801e228:	4603      	mov	r3, r0
    const IntegerType min =
 801e22a:	4618      	mov	r0, r3
 801e22c:	f7fb f974 	bl	8019518 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801e230:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 801e232:	f7f6 ffdf 	bl	80151f4 <_ZNSt14numeric_limitsIlE3maxEv>
 801e236:	4603      	mov	r3, r0
    const IntegerType max =
 801e238:	4618      	mov	r0, r3
 801e23a:	f7fb f96d 	bl	8019518 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801e23e:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 801e240:	2320      	movs	r3, #32
 801e242:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 801e244:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
 801e248:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 801e24a:	f06f 407c 	mvn.w	r0, #4227858432	; 0xfc000000
 801e24e:	f7fb f963 	bl	8019518 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801e252:	4603      	mov	r3, r0
    const IntegerType positive_mask =
 801e254:	4619      	mov	r1, r3
 801e256:	6878      	ldr	r0, [r7, #4]
 801e258:	f7fb f9a8 	bl	80195ac <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 801e25c:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 801e25e:	480f      	ldr	r0, [pc, #60]	; (801e29c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl+0x80>)
 801e260:	f7fb f95a 	bl	8019518 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801e264:	4603      	mov	r3, r0
    const IntegerType negative_mask =
 801e266:	4619      	mov	r1, r3
 801e268:	6878      	ldr	r0, [r7, #4]
 801e26a:	f7fb f97d 	bl	8019568 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 801e26e:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 801e270:	2105      	movs	r1, #5
 801e272:	6878      	ldr	r0, [r7, #4]
 801e274:	f7fd fbcf 	bl	801ba16 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 801e278:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 801e27a:	68fa      	ldr	r2, [r7, #12]
 801e27c:	6a39      	ldr	r1, [r7, #32]
 801e27e:	6978      	ldr	r0, [r7, #20]
 801e280:	f7fd fc0c 	bl	801ba9c <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801e284:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 801e286:	68fa      	ldr	r2, [r7, #12]
 801e288:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801e28a:	6938      	ldr	r0, [r7, #16]
 801e28c:	f7fd fc06 	bl	801ba9c <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801e290:	60f8      	str	r0, [r7, #12]
    return result;
 801e292:	68fb      	ldr	r3, [r7, #12]
  }
 801e294:	4618      	mov	r0, r3
 801e296:	3728      	adds	r7, #40	; 0x28
 801e298:	46bd      	mov	sp, r7
 801e29a:	bd80      	pop	{r7, pc}
 801e29c:	fc000001 	.word	0xfc000001

0801e2a0 <_ZN6tflite13MemoryPlannerC1Ev>:
// The goal is for applications to be able to experiment with different layout
// strategies without changing their client code, by swapping out classes that
// implement this interface.=
class MemoryPlanner {
 public:
  MemoryPlanner() {}
 801e2a0:	b480      	push	{r7}
 801e2a2:	b083      	sub	sp, #12
 801e2a4:	af00      	add	r7, sp, #0
 801e2a6:	6078      	str	r0, [r7, #4]
 801e2a8:	4a04      	ldr	r2, [pc, #16]	; (801e2bc <_ZN6tflite13MemoryPlannerC1Ev+0x1c>)
 801e2aa:	687b      	ldr	r3, [r7, #4]
 801e2ac:	601a      	str	r2, [r3, #0]
 801e2ae:	687b      	ldr	r3, [r7, #4]
 801e2b0:	4618      	mov	r0, r3
 801e2b2:	370c      	adds	r7, #12
 801e2b4:	46bd      	mov	sp, r7
 801e2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e2ba:	4770      	bx	lr
 801e2bc:	08026018 	.word	0x08026018

0801e2c0 <_ZN6tflite13MemoryPlannerD1Ev>:
  virtual ~MemoryPlanner() {}
 801e2c0:	b480      	push	{r7}
 801e2c2:	b083      	sub	sp, #12
 801e2c4:	af00      	add	r7, sp, #0
 801e2c6:	6078      	str	r0, [r7, #4]
 801e2c8:	4a04      	ldr	r2, [pc, #16]	; (801e2dc <_ZN6tflite13MemoryPlannerD1Ev+0x1c>)
 801e2ca:	687b      	ldr	r3, [r7, #4]
 801e2cc:	601a      	str	r2, [r3, #0]
 801e2ce:	687b      	ldr	r3, [r7, #4]
 801e2d0:	4618      	mov	r0, r3
 801e2d2:	370c      	adds	r7, #12
 801e2d4:	46bd      	mov	sp, r7
 801e2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e2da:	4770      	bx	lr
 801e2dc:	08026018 	.word	0x08026018

0801e2e0 <_ZN6tflite13MemoryPlannerD0Ev>:
 801e2e0:	b580      	push	{r7, lr}
 801e2e2:	b082      	sub	sp, #8
 801e2e4:	af00      	add	r7, sp, #0
 801e2e6:	6078      	str	r0, [r7, #4]
 801e2e8:	6878      	ldr	r0, [r7, #4]
 801e2ea:	f7ff ffe9 	bl	801e2c0 <_ZN6tflite13MemoryPlannerD1Ev>
 801e2ee:	2104      	movs	r1, #4
 801e2f0:	6878      	ldr	r0, [r7, #4]
 801e2f2:	f000 fb24 	bl	801e93e <_ZdlPvj>
 801e2f6:	687b      	ldr	r3, [r7, #4]
 801e2f8:	4618      	mov	r0, r3
 801e2fa:	3708      	adds	r7, #8
 801e2fc:	46bd      	mov	sp, r7
 801e2fe:	bd80      	pop	{r7, pc}

0801e300 <_ZN6tflite19GreedyMemoryPlanner15per_buffer_sizeEv>:
    int requirements_index;
    int next_entry_index;
  };

  // Number of bytes required in order to plan a buffer.
  static size_t per_buffer_size() {
 801e300:	b480      	push	{r7}
 801e302:	b083      	sub	sp, #12
 801e304:	af00      	add	r7, sp, #0
    const int per_buffer_size =
 801e306:	2324      	movs	r3, #36	; 0x24
 801e308:	607b      	str	r3, [r7, #4]
        sizeof(BufferRequirements) +  // requirements_
        sizeof(int) +                 // buffer_sizes_sorted_by_size_
        sizeof(int) +                 // buffer_ids_sorted_by_size_
        sizeof(ListEntry) +           // buffers_sorted_by_offset_
        sizeof(int);                  // buffer_offsets_;
    return per_buffer_size;
 801e30a:	2324      	movs	r3, #36	; 0x24
  }
 801e30c:	4618      	mov	r0, r3
 801e30e:	370c      	adds	r7, #12
 801e310:	46bd      	mov	sp, r7
 801e312:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e316:	4770      	bx	lr

0801e318 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>:
namespace tflite {

// Simple stable in-place sort function. Not time-efficient for large arrays.
// Would normally be in an anonymous namespace to keep it private, but we want
// to be able to test it externally.
void ReverseSortInPlace(int* values, int* ids, int size) {
 801e318:	b480      	push	{r7}
 801e31a:	b089      	sub	sp, #36	; 0x24
 801e31c:	af00      	add	r7, sp, #0
 801e31e:	60f8      	str	r0, [r7, #12]
 801e320:	60b9      	str	r1, [r7, #8]
 801e322:	607a      	str	r2, [r7, #4]
  bool any_swapped;
  do {
    any_swapped = false;
 801e324:	2300      	movs	r3, #0
 801e326:	77fb      	strb	r3, [r7, #31]
    for (int i = 1; i < size; ++i) {
 801e328:	2301      	movs	r3, #1
 801e32a:	61bb      	str	r3, [r7, #24]
 801e32c:	69ba      	ldr	r2, [r7, #24]
 801e32e:	687b      	ldr	r3, [r7, #4]
 801e330:	429a      	cmp	r2, r3
 801e332:	da4c      	bge.n	801e3ce <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xb6>
      if (values[i - 1] < values[i]) {
 801e334:	69bb      	ldr	r3, [r7, #24]
 801e336:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801e33a:	3b01      	subs	r3, #1
 801e33c:	009b      	lsls	r3, r3, #2
 801e33e:	68fa      	ldr	r2, [r7, #12]
 801e340:	4413      	add	r3, r2
 801e342:	681a      	ldr	r2, [r3, #0]
 801e344:	69bb      	ldr	r3, [r7, #24]
 801e346:	009b      	lsls	r3, r3, #2
 801e348:	68f9      	ldr	r1, [r7, #12]
 801e34a:	440b      	add	r3, r1
 801e34c:	681b      	ldr	r3, [r3, #0]
 801e34e:	429a      	cmp	r2, r3
 801e350:	da39      	bge.n	801e3c6 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xae>
        const int value_temp = values[i - 1];
 801e352:	69bb      	ldr	r3, [r7, #24]
 801e354:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801e358:	3b01      	subs	r3, #1
 801e35a:	009b      	lsls	r3, r3, #2
 801e35c:	68fa      	ldr	r2, [r7, #12]
 801e35e:	4413      	add	r3, r2
 801e360:	681b      	ldr	r3, [r3, #0]
 801e362:	617b      	str	r3, [r7, #20]
        values[i - 1] = values[i];
 801e364:	69bb      	ldr	r3, [r7, #24]
 801e366:	009b      	lsls	r3, r3, #2
 801e368:	68fa      	ldr	r2, [r7, #12]
 801e36a:	441a      	add	r2, r3
 801e36c:	69bb      	ldr	r3, [r7, #24]
 801e36e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801e372:	3b01      	subs	r3, #1
 801e374:	009b      	lsls	r3, r3, #2
 801e376:	68f9      	ldr	r1, [r7, #12]
 801e378:	440b      	add	r3, r1
 801e37a:	6812      	ldr	r2, [r2, #0]
 801e37c:	601a      	str	r2, [r3, #0]
        values[i] = value_temp;
 801e37e:	69bb      	ldr	r3, [r7, #24]
 801e380:	009b      	lsls	r3, r3, #2
 801e382:	68fa      	ldr	r2, [r7, #12]
 801e384:	4413      	add	r3, r2
 801e386:	697a      	ldr	r2, [r7, #20]
 801e388:	601a      	str	r2, [r3, #0]
        const int id_temp = ids[i - 1];
 801e38a:	69bb      	ldr	r3, [r7, #24]
 801e38c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801e390:	3b01      	subs	r3, #1
 801e392:	009b      	lsls	r3, r3, #2
 801e394:	68ba      	ldr	r2, [r7, #8]
 801e396:	4413      	add	r3, r2
 801e398:	681b      	ldr	r3, [r3, #0]
 801e39a:	613b      	str	r3, [r7, #16]
        ids[i - 1] = ids[i];
 801e39c:	69bb      	ldr	r3, [r7, #24]
 801e39e:	009b      	lsls	r3, r3, #2
 801e3a0:	68ba      	ldr	r2, [r7, #8]
 801e3a2:	441a      	add	r2, r3
 801e3a4:	69bb      	ldr	r3, [r7, #24]
 801e3a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801e3aa:	3b01      	subs	r3, #1
 801e3ac:	009b      	lsls	r3, r3, #2
 801e3ae:	68b9      	ldr	r1, [r7, #8]
 801e3b0:	440b      	add	r3, r1
 801e3b2:	6812      	ldr	r2, [r2, #0]
 801e3b4:	601a      	str	r2, [r3, #0]
        ids[i] = id_temp;
 801e3b6:	69bb      	ldr	r3, [r7, #24]
 801e3b8:	009b      	lsls	r3, r3, #2
 801e3ba:	68ba      	ldr	r2, [r7, #8]
 801e3bc:	4413      	add	r3, r2
 801e3be:	693a      	ldr	r2, [r7, #16]
 801e3c0:	601a      	str	r2, [r3, #0]
        any_swapped = true;
 801e3c2:	2301      	movs	r3, #1
 801e3c4:	77fb      	strb	r3, [r7, #31]
    for (int i = 1; i < size; ++i) {
 801e3c6:	69bb      	ldr	r3, [r7, #24]
 801e3c8:	3301      	adds	r3, #1
 801e3ca:	61bb      	str	r3, [r7, #24]
 801e3cc:	e7ae      	b.n	801e32c <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x14>
  do {
 801e3ce:	7ffb      	ldrb	r3, [r7, #31]
 801e3d0:	2b00      	cmp	r3, #0
 801e3d2:	d000      	beq.n	801e3d6 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xbe>
 801e3d4:	e7a6      	b.n	801e324 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xc>
      }
    }
  } while (any_swapped);
}
 801e3d6:	bf00      	nop
 801e3d8:	3724      	adds	r7, #36	; 0x24
 801e3da:	46bd      	mov	sp, r7
 801e3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e3e0:	4770      	bx	lr
	...

0801e3e4 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>:

GreedyMemoryPlanner::GreedyMemoryPlanner(unsigned char* scratch_buffer,
 801e3e4:	b590      	push	{r4, r7, lr}
 801e3e6:	b087      	sub	sp, #28
 801e3e8:	af00      	add	r7, sp, #0
 801e3ea:	60f8      	str	r0, [r7, #12]
 801e3ec:	60b9      	str	r1, [r7, #8]
 801e3ee:	607a      	str	r2, [r7, #4]
                                         int scratch_buffer_size)
    : buffer_count_(0), need_to_calculate_offsets_(true) {
 801e3f0:	68fb      	ldr	r3, [r7, #12]
 801e3f2:	4618      	mov	r0, r3
 801e3f4:	f7ff ff54 	bl	801e2a0 <_ZN6tflite13MemoryPlannerC1Ev>
 801e3f8:	4a25      	ldr	r2, [pc, #148]	; (801e490 <_ZN6tflite19GreedyMemoryPlannerC1EPhi+0xac>)
 801e3fa:	68fb      	ldr	r3, [r7, #12]
 801e3fc:	601a      	str	r2, [r3, #0]
 801e3fe:	68fb      	ldr	r3, [r7, #12]
 801e400:	2200      	movs	r2, #0
 801e402:	609a      	str	r2, [r3, #8]
 801e404:	68fb      	ldr	r3, [r7, #12]
 801e406:	2201      	movs	r2, #1
 801e408:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  // Allocate the arrays we need within the scratch buffer arena.
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
 801e40c:	687c      	ldr	r4, [r7, #4]
 801e40e:	f7ff ff77 	bl	801e300 <_ZN6tflite19GreedyMemoryPlanner15per_buffer_sizeEv>
 801e412:	4603      	mov	r3, r0
 801e414:	fbb4 f3f3 	udiv	r3, r4, r3
 801e418:	461a      	mov	r2, r3
 801e41a:	68fb      	ldr	r3, [r7, #12]
 801e41c:	605a      	str	r2, [r3, #4]

  unsigned char* next_free = scratch_buffer;
 801e41e:	68bb      	ldr	r3, [r7, #8]
 801e420:	617b      	str	r3, [r7, #20]
  requirements_ = reinterpret_cast<BufferRequirements*>(next_free);
 801e422:	68fb      	ldr	r3, [r7, #12]
 801e424:	697a      	ldr	r2, [r7, #20]
 801e426:	60da      	str	r2, [r3, #12]
  next_free += sizeof(BufferRequirements) * max_buffer_count_;
 801e428:	68fb      	ldr	r3, [r7, #12]
 801e42a:	685b      	ldr	r3, [r3, #4]
 801e42c:	461a      	mov	r2, r3
 801e42e:	4613      	mov	r3, r2
 801e430:	005b      	lsls	r3, r3, #1
 801e432:	4413      	add	r3, r2
 801e434:	009b      	lsls	r3, r3, #2
 801e436:	461a      	mov	r2, r3
 801e438:	697b      	ldr	r3, [r7, #20]
 801e43a:	4413      	add	r3, r2
 801e43c:	617b      	str	r3, [r7, #20]

  buffer_sizes_sorted_by_size_ = reinterpret_cast<int*>(next_free);
 801e43e:	68fb      	ldr	r3, [r7, #12]
 801e440:	697a      	ldr	r2, [r7, #20]
 801e442:	611a      	str	r2, [r3, #16]
  next_free += sizeof(int) * max_buffer_count_;
 801e444:	68fb      	ldr	r3, [r7, #12]
 801e446:	685b      	ldr	r3, [r3, #4]
 801e448:	009b      	lsls	r3, r3, #2
 801e44a:	697a      	ldr	r2, [r7, #20]
 801e44c:	4413      	add	r3, r2
 801e44e:	617b      	str	r3, [r7, #20]

  buffer_ids_sorted_by_size_ = reinterpret_cast<int*>(next_free);
 801e450:	68fb      	ldr	r3, [r7, #12]
 801e452:	697a      	ldr	r2, [r7, #20]
 801e454:	615a      	str	r2, [r3, #20]
  next_free += sizeof(int) * max_buffer_count_;
 801e456:	68fb      	ldr	r3, [r7, #12]
 801e458:	685b      	ldr	r3, [r3, #4]
 801e45a:	009b      	lsls	r3, r3, #2
 801e45c:	697a      	ldr	r2, [r7, #20]
 801e45e:	4413      	add	r3, r2
 801e460:	617b      	str	r3, [r7, #20]

  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
 801e462:	68fb      	ldr	r3, [r7, #12]
 801e464:	697a      	ldr	r2, [r7, #20]
 801e466:	619a      	str	r2, [r3, #24]
  next_free += sizeof(ListEntry) * max_buffer_count_;
 801e468:	68fb      	ldr	r3, [r7, #12]
 801e46a:	685b      	ldr	r3, [r3, #4]
 801e46c:	461a      	mov	r2, r3
 801e46e:	4613      	mov	r3, r2
 801e470:	005b      	lsls	r3, r3, #1
 801e472:	4413      	add	r3, r2
 801e474:	009b      	lsls	r3, r3, #2
 801e476:	461a      	mov	r2, r3
 801e478:	697b      	ldr	r3, [r7, #20]
 801e47a:	4413      	add	r3, r2
 801e47c:	617b      	str	r3, [r7, #20]

  buffer_offsets_ = reinterpret_cast<int*>(next_free);
 801e47e:	68fb      	ldr	r3, [r7, #12]
 801e480:	697a      	ldr	r2, [r7, #20]
 801e482:	621a      	str	r2, [r3, #32]
}
 801e484:	68fb      	ldr	r3, [r7, #12]
 801e486:	4618      	mov	r0, r3
 801e488:	371c      	adds	r7, #28
 801e48a:	46bd      	mov	sp, r7
 801e48c:	bd90      	pop	{r4, r7, pc}
 801e48e:	bf00      	nop
 801e490:	08025ff8 	.word	0x08025ff8

0801e494 <_ZN6tflite19GreedyMemoryPlannerD1Ev>:

GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 801e494:	b580      	push	{r7, lr}
 801e496:	b082      	sub	sp, #8
 801e498:	af00      	add	r7, sp, #0
 801e49a:	6078      	str	r0, [r7, #4]
 801e49c:	4a05      	ldr	r2, [pc, #20]	; (801e4b4 <_ZN6tflite19GreedyMemoryPlannerD1Ev+0x20>)
 801e49e:	687b      	ldr	r3, [r7, #4]
 801e4a0:	601a      	str	r2, [r3, #0]
 801e4a2:	687b      	ldr	r3, [r7, #4]
 801e4a4:	4618      	mov	r0, r3
 801e4a6:	f7ff ff0b 	bl	801e2c0 <_ZN6tflite13MemoryPlannerD1Ev>
  // We don't own the scratch buffer, so don't deallocate anything.
}
 801e4aa:	687b      	ldr	r3, [r7, #4]
 801e4ac:	4618      	mov	r0, r3
 801e4ae:	3708      	adds	r7, #8
 801e4b0:	46bd      	mov	sp, r7
 801e4b2:	bd80      	pop	{r7, pc}
 801e4b4:	08025ff8 	.word	0x08025ff8

0801e4b8 <_ZN6tflite19GreedyMemoryPlannerD0Ev>:
GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 801e4b8:	b580      	push	{r7, lr}
 801e4ba:	b082      	sub	sp, #8
 801e4bc:	af00      	add	r7, sp, #0
 801e4be:	6078      	str	r0, [r7, #4]
}
 801e4c0:	6878      	ldr	r0, [r7, #4]
 801e4c2:	f7ff ffe7 	bl	801e494 <_ZN6tflite19GreedyMemoryPlannerD1Ev>
 801e4c6:	2128      	movs	r1, #40	; 0x28
 801e4c8:	6878      	ldr	r0, [r7, #4]
 801e4ca:	f000 fa38 	bl	801e93e <_ZdlPvj>
 801e4ce:	687b      	ldr	r3, [r7, #4]
 801e4d0:	4618      	mov	r0, r3
 801e4d2:	3708      	adds	r7, #8
 801e4d4:	46bd      	mov	sp, r7
 801e4d6:	bd80      	pop	{r7, pc}

0801e4d8 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>:

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used) {
 801e4d8:	b580      	push	{r7, lr}
 801e4da:	b086      	sub	sp, #24
 801e4dc:	af00      	add	r7, sp, #0
 801e4de:	60f8      	str	r0, [r7, #12]
 801e4e0:	60b9      	str	r1, [r7, #8]
 801e4e2:	607a      	str	r2, [r7, #4]
 801e4e4:	603b      	str	r3, [r7, #0]
  if (buffer_count_ >= max_buffer_count_) {
 801e4e6:	68fb      	ldr	r3, [r7, #12]
 801e4e8:	689a      	ldr	r2, [r3, #8]
 801e4ea:	68fb      	ldr	r3, [r7, #12]
 801e4ec:	685b      	ldr	r3, [r3, #4]
 801e4ee:	429a      	cmp	r2, r3
 801e4f0:	db08      	blt.n	801e504 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
 801e4f2:	68fb      	ldr	r3, [r7, #12]
 801e4f4:	685b      	ldr	r3, [r3, #4]
 801e4f6:	461a      	mov	r2, r3
 801e4f8:	4913      	ldr	r1, [pc, #76]	; (801e548 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x70>)
 801e4fa:	68b8      	ldr	r0, [r7, #8]
 801e4fc:	f7e6 ff66 	bl	80053cc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         max_buffer_count_);
    return kTfLiteError;
 801e500:	2301      	movs	r3, #1
 801e502:	e01d      	b.n	801e540 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x68>
  }
  BufferRequirements* current = &requirements_[buffer_count_];
 801e504:	68fb      	ldr	r3, [r7, #12]
 801e506:	68da      	ldr	r2, [r3, #12]
 801e508:	68fb      	ldr	r3, [r7, #12]
 801e50a:	689b      	ldr	r3, [r3, #8]
 801e50c:	4619      	mov	r1, r3
 801e50e:	460b      	mov	r3, r1
 801e510:	005b      	lsls	r3, r3, #1
 801e512:	440b      	add	r3, r1
 801e514:	009b      	lsls	r3, r3, #2
 801e516:	4413      	add	r3, r2
 801e518:	617b      	str	r3, [r7, #20]
  current->size = size;
 801e51a:	697b      	ldr	r3, [r7, #20]
 801e51c:	687a      	ldr	r2, [r7, #4]
 801e51e:	601a      	str	r2, [r3, #0]
  current->first_time_used = first_time_used;
 801e520:	697b      	ldr	r3, [r7, #20]
 801e522:	683a      	ldr	r2, [r7, #0]
 801e524:	605a      	str	r2, [r3, #4]
  current->last_time_used = last_time_used;
 801e526:	697b      	ldr	r3, [r7, #20]
 801e528:	6a3a      	ldr	r2, [r7, #32]
 801e52a:	609a      	str	r2, [r3, #8]
  ++buffer_count_;
 801e52c:	68fb      	ldr	r3, [r7, #12]
 801e52e:	689b      	ldr	r3, [r3, #8]
 801e530:	1c5a      	adds	r2, r3, #1
 801e532:	68fb      	ldr	r3, [r7, #12]
 801e534:	609a      	str	r2, [r3, #8]
  need_to_calculate_offsets_ = true;
 801e536:	68fb      	ldr	r3, [r7, #12]
 801e538:	2201      	movs	r2, #1
 801e53a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  return kTfLiteOk;
 801e53e:	2300      	movs	r3, #0
}
 801e540:	4618      	mov	r0, r3
 801e542:	3718      	adds	r7, #24
 801e544:	46bd      	mov	sp, r7
 801e546:	bd80      	pop	{r7, pc}
 801e548:	080247d4 	.word	0x080247d4

0801e54c <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>:

bool GreedyMemoryPlanner::DoesEntryOverlapInTime(
    const GreedyMemoryPlanner::ListEntry* entry, const int first_time_used,
    const int last_time_used) const {
 801e54c:	b480      	push	{r7}
 801e54e:	b087      	sub	sp, #28
 801e550:	af00      	add	r7, sp, #0
 801e552:	60f8      	str	r0, [r7, #12]
 801e554:	60b9      	str	r1, [r7, #8]
 801e556:	607a      	str	r2, [r7, #4]
 801e558:	603b      	str	r3, [r7, #0]
  const BufferRequirements* entry_requirements =
      &requirements_[entry->requirements_index];
 801e55a:	68fb      	ldr	r3, [r7, #12]
 801e55c:	68da      	ldr	r2, [r3, #12]
 801e55e:	68bb      	ldr	r3, [r7, #8]
 801e560:	685b      	ldr	r3, [r3, #4]
 801e562:	4619      	mov	r1, r3
 801e564:	460b      	mov	r3, r1
 801e566:	005b      	lsls	r3, r3, #1
 801e568:	440b      	add	r3, r1
 801e56a:	009b      	lsls	r3, r3, #2
  const BufferRequirements* entry_requirements =
 801e56c:	4413      	add	r3, r2
 801e56e:	617b      	str	r3, [r7, #20]
  if (entry_requirements->first_time_used > last_time_used) {
 801e570:	697b      	ldr	r3, [r7, #20]
 801e572:	685b      	ldr	r3, [r3, #4]
 801e574:	683a      	ldr	r2, [r7, #0]
 801e576:	429a      	cmp	r2, r3
 801e578:	da01      	bge.n	801e57e <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x32>
    return false;
 801e57a:	2300      	movs	r3, #0
 801e57c:	e007      	b.n	801e58e <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x42>
  }
  if (first_time_used > entry_requirements->last_time_used) {
 801e57e:	697b      	ldr	r3, [r7, #20]
 801e580:	689b      	ldr	r3, [r3, #8]
 801e582:	687a      	ldr	r2, [r7, #4]
 801e584:	429a      	cmp	r2, r3
 801e586:	dd01      	ble.n	801e58c <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x40>
    return false;
 801e588:	2300      	movs	r3, #0
 801e58a:	e000      	b.n	801e58e <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x42>
  }
  return true;
 801e58c:	2301      	movs	r3, #1
}
 801e58e:	4618      	mov	r0, r3
 801e590:	371c      	adds	r7, #28
 801e592:	46bd      	mov	sp, r7
 801e594:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e598:	4770      	bx	lr

0801e59a <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>:

GreedyMemoryPlanner::ListEntry*
GreedyMemoryPlanner::NextSimultaneouslyActiveBuffer(
    const GreedyMemoryPlanner::ListEntry* start, const int first_time_used,
    const int last_time_used) {
 801e59a:	b580      	push	{r7, lr}
 801e59c:	b086      	sub	sp, #24
 801e59e:	af00      	add	r7, sp, #0
 801e5a0:	60f8      	str	r0, [r7, #12]
 801e5a2:	60b9      	str	r1, [r7, #8]
 801e5a4:	607a      	str	r2, [r7, #4]
 801e5a6:	603b      	str	r3, [r7, #0]
  ListEntry* result = nullptr;
 801e5a8:	2300      	movs	r3, #0
 801e5aa:	617b      	str	r3, [r7, #20]
  ListEntry* candidate_next_entry;
  if (start == nullptr) {
 801e5ac:	68bb      	ldr	r3, [r7, #8]
 801e5ae:	2b00      	cmp	r3, #0
 801e5b0:	d103      	bne.n	801e5ba <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x20>
    candidate_next_entry = &buffers_sorted_by_offset_[0];
 801e5b2:	68fb      	ldr	r3, [r7, #12]
 801e5b4:	699b      	ldr	r3, [r3, #24]
 801e5b6:	613b      	str	r3, [r7, #16]
 801e5b8:	e011      	b.n	801e5de <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x44>
  } else {
    if (start->next_entry_index == -1) {
 801e5ba:	68bb      	ldr	r3, [r7, #8]
 801e5bc:	689b      	ldr	r3, [r3, #8]
 801e5be:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e5c2:	d101      	bne.n	801e5c8 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x2e>
      return nullptr;
 801e5c4:	2300      	movs	r3, #0
 801e5c6:	e029      	b.n	801e61c <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x82>
    }
    candidate_next_entry = &buffers_sorted_by_offset_[start->next_entry_index];
 801e5c8:	68fb      	ldr	r3, [r7, #12]
 801e5ca:	699a      	ldr	r2, [r3, #24]
 801e5cc:	68bb      	ldr	r3, [r7, #8]
 801e5ce:	689b      	ldr	r3, [r3, #8]
 801e5d0:	4619      	mov	r1, r3
 801e5d2:	460b      	mov	r3, r1
 801e5d4:	005b      	lsls	r3, r3, #1
 801e5d6:	440b      	add	r3, r1
 801e5d8:	009b      	lsls	r3, r3, #2
 801e5da:	4413      	add	r3, r2
 801e5dc:	613b      	str	r3, [r7, #16]
  }
  do {
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 801e5de:	683b      	ldr	r3, [r7, #0]
 801e5e0:	687a      	ldr	r2, [r7, #4]
 801e5e2:	6939      	ldr	r1, [r7, #16]
 801e5e4:	68f8      	ldr	r0, [r7, #12]
 801e5e6:	f7ff ffb1 	bl	801e54c <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>
 801e5ea:	4603      	mov	r3, r0
 801e5ec:	2b00      	cmp	r3, #0
 801e5ee:	d002      	beq.n	801e5f6 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x5c>
                               last_time_used)) {
      result = candidate_next_entry;
 801e5f0:	693b      	ldr	r3, [r7, #16]
 801e5f2:	617b      	str	r3, [r7, #20]
      break;
 801e5f4:	e011      	b.n	801e61a <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x80>
    }
    if (candidate_next_entry->next_entry_index == -1) {
 801e5f6:	693b      	ldr	r3, [r7, #16]
 801e5f8:	689b      	ldr	r3, [r3, #8]
 801e5fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e5fe:	d00b      	beq.n	801e618 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x7e>
      break;
    }
    candidate_next_entry =
        &buffers_sorted_by_offset_[candidate_next_entry->next_entry_index];
 801e600:	68fb      	ldr	r3, [r7, #12]
 801e602:	699a      	ldr	r2, [r3, #24]
 801e604:	693b      	ldr	r3, [r7, #16]
 801e606:	689b      	ldr	r3, [r3, #8]
 801e608:	4619      	mov	r1, r3
 801e60a:	460b      	mov	r3, r1
 801e60c:	005b      	lsls	r3, r3, #1
 801e60e:	440b      	add	r3, r1
 801e610:	009b      	lsls	r3, r3, #2
    candidate_next_entry =
 801e612:	4413      	add	r3, r2
 801e614:	613b      	str	r3, [r7, #16]
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 801e616:	e7e2      	b.n	801e5de <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x44>
      break;
 801e618:	bf00      	nop
  } while (true);
  return result;
 801e61a:	697b      	ldr	r3, [r7, #20]
}
 801e61c:	4618      	mov	r0, r3
 801e61e:	3718      	adds	r7, #24
 801e620:	46bd      	mov	sp, r7
 801e622:	bd80      	pop	{r7, pc}

0801e624 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>:

void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
 801e624:	b580      	push	{r7, lr}
 801e626:	b096      	sub	sp, #88	; 0x58
 801e628:	af00      	add	r7, sp, #0
 801e62a:	6078      	str	r0, [r7, #4]
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
 801e62c:	687b      	ldr	r3, [r7, #4]
 801e62e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801e632:	f083 0301 	eor.w	r3, r3, #1
 801e636:	b2db      	uxtb	r3, r3
 801e638:	2b00      	cmp	r3, #0
 801e63a:	f040 80fc 	bne.w	801e836 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x212>
 801e63e:	687b      	ldr	r3, [r7, #4]
 801e640:	689b      	ldr	r3, [r3, #8]
 801e642:	2b00      	cmp	r3, #0
 801e644:	f000 80f7 	beq.w	801e836 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x212>
    return;
  }
  need_to_calculate_offsets_ = false;
 801e648:	687b      	ldr	r3, [r7, #4]
 801e64a:	2200      	movs	r2, #0
 801e64c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  // Start off by ordering the buffers in descending order of size.
  // This helps find a more compact layout. Intuitively, you can think
  // about putting the large buffers in place first, and then the
  // smaller buffers can fit in the gaps, rather than fragmenting the
  // gaps with small buffers at the beginning.
  for (int i = 0; i < buffer_count_; ++i) {
 801e650:	2300      	movs	r3, #0
 801e652:	657b      	str	r3, [r7, #84]	; 0x54
 801e654:	687b      	ldr	r3, [r7, #4]
 801e656:	689b      	ldr	r3, [r3, #8]
 801e658:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801e65a:	429a      	cmp	r2, r3
 801e65c:	da21      	bge.n	801e6a2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x7e>
    buffer_sizes_sorted_by_size_[i] = requirements_[i].size;
 801e65e:	687b      	ldr	r3, [r7, #4]
 801e660:	68d9      	ldr	r1, [r3, #12]
 801e662:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801e664:	4613      	mov	r3, r2
 801e666:	005b      	lsls	r3, r3, #1
 801e668:	4413      	add	r3, r2
 801e66a:	009b      	lsls	r3, r3, #2
 801e66c:	18ca      	adds	r2, r1, r3
 801e66e:	687b      	ldr	r3, [r7, #4]
 801e670:	6919      	ldr	r1, [r3, #16]
 801e672:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e674:	009b      	lsls	r3, r3, #2
 801e676:	440b      	add	r3, r1
 801e678:	6812      	ldr	r2, [r2, #0]
 801e67a:	601a      	str	r2, [r3, #0]
    buffer_ids_sorted_by_size_[i] = i;
 801e67c:	687b      	ldr	r3, [r7, #4]
 801e67e:	695a      	ldr	r2, [r3, #20]
 801e680:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e682:	009b      	lsls	r3, r3, #2
 801e684:	4413      	add	r3, r2
 801e686:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801e688:	601a      	str	r2, [r3, #0]
    buffer_offsets_[i] = -1;
 801e68a:	687b      	ldr	r3, [r7, #4]
 801e68c:	6a1a      	ldr	r2, [r3, #32]
 801e68e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e690:	009b      	lsls	r3, r3, #2
 801e692:	4413      	add	r3, r2
 801e694:	f04f 32ff 	mov.w	r2, #4294967295
 801e698:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < buffer_count_; ++i) {
 801e69a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e69c:	3301      	adds	r3, #1
 801e69e:	657b      	str	r3, [r7, #84]	; 0x54
 801e6a0:	e7d8      	b.n	801e654 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x30>
  }
  // This sorting algorithm is naive, and may end up taking a very long time
  // with hundreds of buffers.
  ReverseSortInPlace(buffer_sizes_sorted_by_size_, buffer_ids_sorted_by_size_,
 801e6a2:	687b      	ldr	r3, [r7, #4]
 801e6a4:	6918      	ldr	r0, [r3, #16]
 801e6a6:	687b      	ldr	r3, [r7, #4]
 801e6a8:	6959      	ldr	r1, [r3, #20]
 801e6aa:	687b      	ldr	r3, [r7, #4]
 801e6ac:	689b      	ldr	r3, [r3, #8]
 801e6ae:	461a      	mov	r2, r3
 801e6b0:	f7ff fe32 	bl	801e318 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>
                     buffer_count_);

  // Put the largest buffer at offset zero to start the process.
  ListEntry* first_entry = &buffers_sorted_by_offset_[0];
 801e6b4:	687b      	ldr	r3, [r7, #4]
 801e6b6:	699b      	ldr	r3, [r3, #24]
 801e6b8:	643b      	str	r3, [r7, #64]	; 0x40
  first_entry->offset = 0;
 801e6ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e6bc:	2200      	movs	r2, #0
 801e6be:	601a      	str	r2, [r3, #0]
  first_entry->requirements_index = buffer_ids_sorted_by_size_[0];
 801e6c0:	687b      	ldr	r3, [r7, #4]
 801e6c2:	695b      	ldr	r3, [r3, #20]
 801e6c4:	681a      	ldr	r2, [r3, #0]
 801e6c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e6c8:	605a      	str	r2, [r3, #4]
  first_entry->next_entry_index = -1;
 801e6ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e6cc:	f04f 32ff 	mov.w	r2, #4294967295
 801e6d0:	609a      	str	r2, [r3, #8]
  next_free_entry_ = 1;
 801e6d2:	687b      	ldr	r3, [r7, #4]
 801e6d4:	2201      	movs	r2, #1
 801e6d6:	61da      	str	r2, [r3, #28]
  buffer_offsets_[buffer_ids_sorted_by_size_[0]] = 0;
 801e6d8:	687b      	ldr	r3, [r7, #4]
 801e6da:	6a1a      	ldr	r2, [r3, #32]
 801e6dc:	687b      	ldr	r3, [r7, #4]
 801e6de:	695b      	ldr	r3, [r3, #20]
 801e6e0:	681b      	ldr	r3, [r3, #0]
 801e6e2:	009b      	lsls	r3, r3, #2
 801e6e4:	4413      	add	r3, r2
 801e6e6:	2200      	movs	r2, #0
 801e6e8:	601a      	str	r2, [r3, #0]

  // Work through the rest of the buffers to find a good gap to place each one.
  for (int i = 1; i < buffer_count_; ++i) {
 801e6ea:	2301      	movs	r3, #1
 801e6ec:	653b      	str	r3, [r7, #80]	; 0x50
 801e6ee:	687b      	ldr	r3, [r7, #4]
 801e6f0:	689b      	ldr	r3, [r3, #8]
 801e6f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801e6f4:	429a      	cmp	r2, r3
 801e6f6:	f280 809f 	bge.w	801e838 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x214>
    // The id is the order the buffer was originally added by the client.
    const int buffer_id = buffer_ids_sorted_by_size_[i];
 801e6fa:	687b      	ldr	r3, [r7, #4]
 801e6fc:	695a      	ldr	r2, [r3, #20]
 801e6fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e700:	009b      	lsls	r3, r3, #2
 801e702:	4413      	add	r3, r2
 801e704:	681b      	ldr	r3, [r3, #0]
 801e706:	63fb      	str	r3, [r7, #60]	; 0x3c
    // Look at what size and time range the buffer needs to be active.
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
 801e708:	687b      	ldr	r3, [r7, #4]
 801e70a:	68d9      	ldr	r1, [r3, #12]
 801e70c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801e70e:	4613      	mov	r3, r2
 801e710:	005b      	lsls	r3, r3, #1
 801e712:	4413      	add	r3, r2
 801e714:	009b      	lsls	r3, r3, #2
 801e716:	440b      	add	r3, r1
 801e718:	63bb      	str	r3, [r7, #56]	; 0x38
    const int wanted_size = wanted_requirements->size;
 801e71a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e71c:	681b      	ldr	r3, [r3, #0]
 801e71e:	637b      	str	r3, [r7, #52]	; 0x34
    const int wanted_first_time_used = wanted_requirements->first_time_used;
 801e720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e722:	685b      	ldr	r3, [r3, #4]
 801e724:	633b      	str	r3, [r7, #48]	; 0x30
    const int wanted_last_time_used = wanted_requirements->last_time_used;
 801e726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e728:	689b      	ldr	r3, [r3, #8]
 801e72a:	62fb      	str	r3, [r7, #44]	; 0x2c
    // Find the first buffer that's active in our time range. All placed
    // buffers are stored in the order of their starting position in the arena
    // so that it's easy to find the next buffer in memory, and so the gap.
    // The candidate_entry variable holds the buffer that we're considering
    // placing the current buffer after.
    ListEntry* prior_entry = nullptr;
 801e72c:	2300      	movs	r3, #0
 801e72e:	64fb      	str	r3, [r7, #76]	; 0x4c
    int candidate_offset = 0;
 801e730:	2300      	movs	r3, #0
 801e732:	64bb      	str	r3, [r7, #72]	; 0x48
    // Loop through the offset-ordered list of buffers, looking for gaps.
    while (true) {
      // Find out what the next active buffer is.
      ListEntry* next_entry = NextSimultaneouslyActiveBuffer(
          prior_entry, wanted_first_time_used, wanted_last_time_used);
 801e734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e736:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e738:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801e73a:	6878      	ldr	r0, [r7, #4]
 801e73c:	f7ff ff2d 	bl	801e59a <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>
 801e740:	62b8      	str	r0, [r7, #40]	; 0x28

      if (prior_entry) {
 801e742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e744:	2b00      	cmp	r3, #0
 801e746:	d016      	beq.n	801e776 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x152>
        BufferRequirements* candidate_requirements =
            &requirements_[prior_entry->requirements_index];
 801e748:	687b      	ldr	r3, [r7, #4]
 801e74a:	68da      	ldr	r2, [r3, #12]
 801e74c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e74e:	685b      	ldr	r3, [r3, #4]
 801e750:	4619      	mov	r1, r3
 801e752:	460b      	mov	r3, r1
 801e754:	005b      	lsls	r3, r3, #1
 801e756:	440b      	add	r3, r1
 801e758:	009b      	lsls	r3, r3, #2
        BufferRequirements* candidate_requirements =
 801e75a:	4413      	add	r3, r2
 801e75c:	627b      	str	r3, [r7, #36]	; 0x24
        const int prior_entry_offset =
            prior_entry->offset + candidate_requirements->size;
 801e75e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e760:	681a      	ldr	r2, [r3, #0]
 801e762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e764:	681b      	ldr	r3, [r3, #0]
        const int prior_entry_offset =
 801e766:	4413      	add	r3, r2
 801e768:	623b      	str	r3, [r7, #32]
        if (prior_entry_offset > candidate_offset) {
 801e76a:	6a3a      	ldr	r2, [r7, #32]
 801e76c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e76e:	429a      	cmp	r2, r3
 801e770:	dd01      	ble.n	801e776 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x152>
          candidate_offset = prior_entry_offset;
 801e772:	6a3b      	ldr	r3, [r7, #32]
 801e774:	64bb      	str	r3, [r7, #72]	; 0x48
        }
      }
      if (next_entry == nullptr) {
 801e776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e778:	2b00      	cmp	r3, #0
 801e77a:	d00b      	beq.n	801e794 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x170>
        // We're at the end of the list, so we can always append the buffer
        // here.
        break;
      }
      // Find out how much space there is between us and the next buffer.
      const int gap = next_entry->offset - candidate_offset;
 801e77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e77e:	681a      	ldr	r2, [r3, #0]
 801e780:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e782:	1ad3      	subs	r3, r2, r3
 801e784:	61fb      	str	r3, [r7, #28]
      if (gap >= wanted_size) {
 801e786:	69fa      	ldr	r2, [r7, #28]
 801e788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e78a:	429a      	cmp	r2, r3
 801e78c:	da04      	bge.n	801e798 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x174>
        // This entry has a big enough gap between it and the next, so
        // use it!
        break;
      }
      // The gap wasn't big enough, so move on to another candidate.
      prior_entry = next_entry;
 801e78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e790:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
 801e792:	e7cf      	b.n	801e734 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x110>
        break;
 801e794:	bf00      	nop
 801e796:	e000      	b.n	801e79a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x176>
        break;
 801e798:	bf00      	nop
    // At this point, we've either found a gap (possibly at the end of the
    // list) and want to place the buffer there, or there are no other active
    // buffers in this time range and so we can put it at offset zero.
    // Record the buffer's offset in our plan.
    buffer_offsets_[buffer_id] = candidate_offset;
 801e79a:	687b      	ldr	r3, [r7, #4]
 801e79c:	6a1a      	ldr	r2, [r3, #32]
 801e79e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e7a0:	009b      	lsls	r3, r3, #2
 801e7a2:	4413      	add	r3, r2
 801e7a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801e7a6:	601a      	str	r2, [r3, #0]
    // Add the newly-placed buffer to our offset-ordered list, so that
    // subsequent passes can fit in their buffers around it.
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
 801e7a8:	687b      	ldr	r3, [r7, #4]
 801e7aa:	699a      	ldr	r2, [r3, #24]
 801e7ac:	687b      	ldr	r3, [r7, #4]
 801e7ae:	69db      	ldr	r3, [r3, #28]
 801e7b0:	4619      	mov	r1, r3
 801e7b2:	460b      	mov	r3, r1
 801e7b4:	005b      	lsls	r3, r3, #1
 801e7b6:	440b      	add	r3, r1
 801e7b8:	009b      	lsls	r3, r3, #2
 801e7ba:	4413      	add	r3, r2
 801e7bc:	61bb      	str	r3, [r7, #24]
    new_entry->offset = candidate_offset;
 801e7be:	69bb      	ldr	r3, [r7, #24]
 801e7c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801e7c2:	601a      	str	r2, [r3, #0]
    new_entry->requirements_index = buffer_id;
 801e7c4:	69bb      	ldr	r3, [r7, #24]
 801e7c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801e7c8:	605a      	str	r2, [r3, #4]
    const int new_entry_index = next_free_entry_;
 801e7ca:	687b      	ldr	r3, [r7, #4]
 801e7cc:	69db      	ldr	r3, [r3, #28]
 801e7ce:	617b      	str	r3, [r7, #20]
    ++next_free_entry_;
 801e7d0:	687b      	ldr	r3, [r7, #4]
 801e7d2:	69db      	ldr	r3, [r3, #28]
 801e7d4:	1c5a      	adds	r2, r3, #1
 801e7d6:	687b      	ldr	r3, [r7, #4]
 801e7d8:	61da      	str	r2, [r3, #28]
    ListEntry* current_entry = first_entry;
 801e7da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e7dc:	647b      	str	r3, [r7, #68]	; 0x44
    // Make sure that we insert the buffer at the correct place in the ordered
    // list.
    while (true) {
      const int next_entry_index = current_entry->next_entry_index;
 801e7de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e7e0:	689b      	ldr	r3, [r3, #8]
 801e7e2:	613b      	str	r3, [r7, #16]
      if (next_entry_index == -1) {
 801e7e4:	693b      	ldr	r3, [r7, #16]
 801e7e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e7ea:	d107      	bne.n	801e7fc <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1d8>
        // We're at the end of the list, so just add the new entry here.
        current_entry->next_entry_index = new_entry_index;
 801e7ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e7ee:	697a      	ldr	r2, [r7, #20]
 801e7f0:	609a      	str	r2, [r3, #8]
        new_entry->next_entry_index = -1;
 801e7f2:	69bb      	ldr	r3, [r7, #24]
 801e7f4:	f04f 32ff 	mov.w	r2, #4294967295
 801e7f8:	609a      	str	r2, [r3, #8]
        break;
 801e7fa:	e018      	b.n	801e82e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x20a>
      }
      ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
 801e7fc:	687b      	ldr	r3, [r7, #4]
 801e7fe:	6999      	ldr	r1, [r3, #24]
 801e800:	693a      	ldr	r2, [r7, #16]
 801e802:	4613      	mov	r3, r2
 801e804:	005b      	lsls	r3, r3, #1
 801e806:	4413      	add	r3, r2
 801e808:	009b      	lsls	r3, r3, #2
 801e80a:	440b      	add	r3, r1
 801e80c:	60fb      	str	r3, [r7, #12]
      if (next_entry->offset > candidate_offset) {
 801e80e:	68fb      	ldr	r3, [r7, #12]
 801e810:	681b      	ldr	r3, [r3, #0]
 801e812:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801e814:	429a      	cmp	r2, r3
 801e816:	da07      	bge.n	801e828 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x204>
        // We're at the right spot to do an insertion and retain the sorting
        // order, so place the new entry here.
        new_entry->next_entry_index = current_entry->next_entry_index;
 801e818:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e81a:	689a      	ldr	r2, [r3, #8]
 801e81c:	69bb      	ldr	r3, [r7, #24]
 801e81e:	609a      	str	r2, [r3, #8]
        current_entry->next_entry_index = new_entry_index;
 801e820:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e822:	697a      	ldr	r2, [r7, #20]
 801e824:	609a      	str	r2, [r3, #8]
        break;
 801e826:	e002      	b.n	801e82e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x20a>
      }
      current_entry = next_entry;
 801e828:	68fb      	ldr	r3, [r7, #12]
 801e82a:	647b      	str	r3, [r7, #68]	; 0x44
    }
 801e82c:	e7d7      	b.n	801e7de <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1ba>
  for (int i = 1; i < buffer_count_; ++i) {
 801e82e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e830:	3301      	adds	r3, #1
 801e832:	653b      	str	r3, [r7, #80]	; 0x50
 801e834:	e75b      	b.n	801e6ee <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xca>
    return;
 801e836:	bf00      	nop
  }
}
 801e838:	3758      	adds	r7, #88	; 0x58
 801e83a:	46bd      	mov	sp, r7
 801e83c:	bd80      	pop	{r7, pc}

0801e83e <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>:

size_t GreedyMemoryPlanner::GetMaximumMemorySize() {
 801e83e:	b580      	push	{r7, lr}
 801e840:	b086      	sub	sp, #24
 801e842:	af00      	add	r7, sp, #0
 801e844:	6078      	str	r0, [r7, #4]
  CalculateOffsetsIfNeeded();
 801e846:	6878      	ldr	r0, [r7, #4]
 801e848:	f7ff feec 	bl	801e624 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if (buffer_count_ == 0) {
 801e84c:	687b      	ldr	r3, [r7, #4]
 801e84e:	689b      	ldr	r3, [r3, #8]
 801e850:	2b00      	cmp	r3, #0
 801e852:	d101      	bne.n	801e858 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x1a>
    return 0;
 801e854:	2300      	movs	r3, #0
 801e856:	e031      	b.n	801e8bc <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x7e>
  }
  ListEntry* entry = &buffers_sorted_by_offset_[0];
 801e858:	687b      	ldr	r3, [r7, #4]
 801e85a:	699b      	ldr	r3, [r3, #24]
 801e85c:	617b      	str	r3, [r7, #20]
  size_t max_size = 0;
 801e85e:	2300      	movs	r3, #0
 801e860:	613b      	str	r3, [r7, #16]
  while (entry) {
 801e862:	697b      	ldr	r3, [r7, #20]
 801e864:	2b00      	cmp	r3, #0
 801e866:	d028      	beq.n	801e8ba <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x7c>
    BufferRequirements* requirements =
        &requirements_[entry->requirements_index];
 801e868:	687b      	ldr	r3, [r7, #4]
 801e86a:	68da      	ldr	r2, [r3, #12]
 801e86c:	697b      	ldr	r3, [r7, #20]
 801e86e:	685b      	ldr	r3, [r3, #4]
 801e870:	4619      	mov	r1, r3
 801e872:	460b      	mov	r3, r1
 801e874:	005b      	lsls	r3, r3, #1
 801e876:	440b      	add	r3, r1
 801e878:	009b      	lsls	r3, r3, #2
    BufferRequirements* requirements =
 801e87a:	4413      	add	r3, r2
 801e87c:	60fb      	str	r3, [r7, #12]
    // TODO(b/148246793): Update all size and offset variables types from
    //                    int to size_t
    const size_t current_size = entry->offset + requirements->size;
 801e87e:	697b      	ldr	r3, [r7, #20]
 801e880:	681a      	ldr	r2, [r3, #0]
 801e882:	68fb      	ldr	r3, [r7, #12]
 801e884:	681b      	ldr	r3, [r3, #0]
 801e886:	4413      	add	r3, r2
 801e888:	60bb      	str	r3, [r7, #8]
    if (current_size > max_size) {
 801e88a:	68ba      	ldr	r2, [r7, #8]
 801e88c:	693b      	ldr	r3, [r7, #16]
 801e88e:	429a      	cmp	r2, r3
 801e890:	d901      	bls.n	801e896 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x58>
      max_size = current_size;
 801e892:	68bb      	ldr	r3, [r7, #8]
 801e894:	613b      	str	r3, [r7, #16]
    }
    if (entry->next_entry_index == -1) {
 801e896:	697b      	ldr	r3, [r7, #20]
 801e898:	689b      	ldr	r3, [r3, #8]
 801e89a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e89e:	d00b      	beq.n	801e8b8 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x7a>
      break;
    }
    entry = &buffers_sorted_by_offset_[entry->next_entry_index];
 801e8a0:	687b      	ldr	r3, [r7, #4]
 801e8a2:	699a      	ldr	r2, [r3, #24]
 801e8a4:	697b      	ldr	r3, [r7, #20]
 801e8a6:	689b      	ldr	r3, [r3, #8]
 801e8a8:	4619      	mov	r1, r3
 801e8aa:	460b      	mov	r3, r1
 801e8ac:	005b      	lsls	r3, r3, #1
 801e8ae:	440b      	add	r3, r1
 801e8b0:	009b      	lsls	r3, r3, #2
 801e8b2:	4413      	add	r3, r2
 801e8b4:	617b      	str	r3, [r7, #20]
  while (entry) {
 801e8b6:	e7d4      	b.n	801e862 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x24>
      break;
 801e8b8:	bf00      	nop
  }
  return max_size;
 801e8ba:	693b      	ldr	r3, [r7, #16]
}
 801e8bc:	4618      	mov	r0, r3
 801e8be:	3718      	adds	r7, #24
 801e8c0:	46bd      	mov	sp, r7
 801e8c2:	bd80      	pop	{r7, pc}

0801e8c4 <_ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv>:
    line[kLineWidth] = 0;
    TF_LITE_REPORT_ERROR(error_reporter, "%s", (const char*)line);
  }
}

int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }
 801e8c4:	b480      	push	{r7}
 801e8c6:	b083      	sub	sp, #12
 801e8c8:	af00      	add	r7, sp, #0
 801e8ca:	6078      	str	r0, [r7, #4]
 801e8cc:	687b      	ldr	r3, [r7, #4]
 801e8ce:	689b      	ldr	r3, [r3, #8]
 801e8d0:	4618      	mov	r0, r3
 801e8d2:	370c      	adds	r7, #12
 801e8d4:	46bd      	mov	sp, r7
 801e8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e8da:	4770      	bx	lr

0801e8dc <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>:

TfLiteStatus GreedyMemoryPlanner::GetOffsetForBuffer(
    tflite::ErrorReporter* error_reporter, int buffer_index, int* offset) {
 801e8dc:	b580      	push	{r7, lr}
 801e8de:	b084      	sub	sp, #16
 801e8e0:	af00      	add	r7, sp, #0
 801e8e2:	60f8      	str	r0, [r7, #12]
 801e8e4:	60b9      	str	r1, [r7, #8]
 801e8e6:	607a      	str	r2, [r7, #4]
 801e8e8:	603b      	str	r3, [r7, #0]
  CalculateOffsetsIfNeeded();
 801e8ea:	68f8      	ldr	r0, [r7, #12]
 801e8ec:	f7ff fe9a 	bl	801e624 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if ((buffer_index < 0) || (buffer_index >= buffer_count_)) {
 801e8f0:	687b      	ldr	r3, [r7, #4]
 801e8f2:	2b00      	cmp	r3, #0
 801e8f4:	db04      	blt.n	801e900 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x24>
 801e8f6:	68fb      	ldr	r3, [r7, #12]
 801e8f8:	689b      	ldr	r3, [r3, #8]
 801e8fa:	687a      	ldr	r2, [r7, #4]
 801e8fc:	429a      	cmp	r2, r3
 801e8fe:	db08      	blt.n	801e912 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x36>
    TF_LITE_REPORT_ERROR(error_reporter,
 801e900:	68fb      	ldr	r3, [r7, #12]
 801e902:	689b      	ldr	r3, [r3, #8]
 801e904:	687a      	ldr	r2, [r7, #4]
 801e906:	4909      	ldr	r1, [pc, #36]	; (801e92c <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x50>)
 801e908:	68b8      	ldr	r0, [r7, #8]
 801e90a:	f7e6 fd5f 	bl	80053cc <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "buffer index %d is outside range 0 to %d",
                         buffer_index, buffer_count_);
    return kTfLiteError;
 801e90e:	2301      	movs	r3, #1
 801e910:	e008      	b.n	801e924 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x48>
  }
  *offset = buffer_offsets_[buffer_index];
 801e912:	68fb      	ldr	r3, [r7, #12]
 801e914:	6a1a      	ldr	r2, [r3, #32]
 801e916:	687b      	ldr	r3, [r7, #4]
 801e918:	009b      	lsls	r3, r3, #2
 801e91a:	4413      	add	r3, r2
 801e91c:	681a      	ldr	r2, [r3, #0]
 801e91e:	683b      	ldr	r3, [r7, #0]
 801e920:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 801e922:	2300      	movs	r3, #0
}
 801e924:	4618      	mov	r0, r3
 801e926:	3710      	adds	r7, #16
 801e928:	46bd      	mov	sp, r7
 801e92a:	bd80      	pop	{r7, pc}
 801e92c:	08024864 	.word	0x08024864

0801e930 <_ZdaPv>:
 801e930:	f000 b81e 	b.w	801e970 <_ZdlPv>

0801e934 <__cxa_pure_virtual>:
 801e934:	b508      	push	{r3, lr}
 801e936:	f000 f827 	bl	801e988 <_ZSt9terminatev>

0801e93a <_Znaj>:
 801e93a:	f000 b802 	b.w	801e942 <_Znwj>

0801e93e <_ZdlPvj>:
 801e93e:	f000 b817 	b.w	801e970 <_ZdlPv>

0801e942 <_Znwj>:
 801e942:	b510      	push	{r4, lr}
 801e944:	2800      	cmp	r0, #0
 801e946:	bf14      	ite	ne
 801e948:	4604      	movne	r4, r0
 801e94a:	2401      	moveq	r4, #1
 801e94c:	4620      	mov	r0, r4
 801e94e:	f000 fb37 	bl	801efc0 <malloc>
 801e952:	b930      	cbnz	r0, 801e962 <_Znwj+0x20>
 801e954:	f000 f806 	bl	801e964 <_ZSt15get_new_handlerv>
 801e958:	b908      	cbnz	r0, 801e95e <_Znwj+0x1c>
 801e95a:	f000 fa79 	bl	801ee50 <abort>
 801e95e:	4780      	blx	r0
 801e960:	e7f4      	b.n	801e94c <_Znwj+0xa>
 801e962:	bd10      	pop	{r4, pc}

0801e964 <_ZSt15get_new_handlerv>:
 801e964:	4b01      	ldr	r3, [pc, #4]	; (801e96c <_ZSt15get_new_handlerv+0x8>)
 801e966:	e8d3 0faf 	lda	r0, [r3]
 801e96a:	4770      	bx	lr
 801e96c:	2002d0f0 	.word	0x2002d0f0

0801e970 <_ZdlPv>:
 801e970:	f000 bb2e 	b.w	801efd0 <free>

0801e974 <_ZN10__cxxabiv111__terminateEPFvvE>:
 801e974:	b508      	push	{r3, lr}
 801e976:	4780      	blx	r0
 801e978:	f000 fa6a 	bl	801ee50 <abort>

0801e97c <_ZSt13get_terminatev>:
 801e97c:	4b01      	ldr	r3, [pc, #4]	; (801e984 <_ZSt13get_terminatev+0x8>)
 801e97e:	e8d3 0faf 	lda	r0, [r3]
 801e982:	4770      	bx	lr
 801e984:	20016d48 	.word	0x20016d48

0801e988 <_ZSt9terminatev>:
 801e988:	b508      	push	{r3, lr}
 801e98a:	f7ff fff7 	bl	801e97c <_ZSt13get_terminatev>
 801e98e:	f7ff fff1 	bl	801e974 <_ZN10__cxxabiv111__terminateEPFvvE>
 801e992:	0000      	movs	r0, r0
 801e994:	0000      	movs	r0, r0
	...

0801e998 <floor>:
 801e998:	ec51 0b10 	vmov	r0, r1, d0
 801e99c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e9a0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801e9a4:	460c      	mov	r4, r1
 801e9a6:	ee10 5a10 	vmov	r5, s0
 801e9aa:	4680      	mov	r8, r0
 801e9ac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801e9b0:	2e13      	cmp	r6, #19
 801e9b2:	dc35      	bgt.n	801ea20 <floor+0x88>
 801e9b4:	2e00      	cmp	r6, #0
 801e9b6:	da16      	bge.n	801e9e6 <floor+0x4e>
 801e9b8:	a335      	add	r3, pc, #212	; (adr r3, 801ea90 <floor+0xf8>)
 801e9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9be:	f7e1 fc53 	bl	8000268 <__adddf3>
 801e9c2:	2200      	movs	r2, #0
 801e9c4:	2300      	movs	r3, #0
 801e9c6:	f7e2 f895 	bl	8000af4 <__aeabi_dcmpgt>
 801e9ca:	b148      	cbz	r0, 801e9e0 <floor+0x48>
 801e9cc:	2c00      	cmp	r4, #0
 801e9ce:	da5a      	bge.n	801ea86 <floor+0xee>
 801e9d0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801e9d4:	4a30      	ldr	r2, [pc, #192]	; (801ea98 <floor+0x100>)
 801e9d6:	432b      	orrs	r3, r5
 801e9d8:	2500      	movs	r5, #0
 801e9da:	42ab      	cmp	r3, r5
 801e9dc:	bf18      	it	ne
 801e9de:	4614      	movne	r4, r2
 801e9e0:	4621      	mov	r1, r4
 801e9e2:	4628      	mov	r0, r5
 801e9e4:	e026      	b.n	801ea34 <floor+0x9c>
 801e9e6:	4f2d      	ldr	r7, [pc, #180]	; (801ea9c <floor+0x104>)
 801e9e8:	4137      	asrs	r7, r6
 801e9ea:	ea01 0307 	and.w	r3, r1, r7
 801e9ee:	4303      	orrs	r3, r0
 801e9f0:	d020      	beq.n	801ea34 <floor+0x9c>
 801e9f2:	a327      	add	r3, pc, #156	; (adr r3, 801ea90 <floor+0xf8>)
 801e9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9f8:	f7e1 fc36 	bl	8000268 <__adddf3>
 801e9fc:	2200      	movs	r2, #0
 801e9fe:	2300      	movs	r3, #0
 801ea00:	f7e2 f878 	bl	8000af4 <__aeabi_dcmpgt>
 801ea04:	2800      	cmp	r0, #0
 801ea06:	d0eb      	beq.n	801e9e0 <floor+0x48>
 801ea08:	2c00      	cmp	r4, #0
 801ea0a:	f04f 0500 	mov.w	r5, #0
 801ea0e:	bfbe      	ittt	lt
 801ea10:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801ea14:	fa43 f606 	asrlt.w	r6, r3, r6
 801ea18:	19a4      	addlt	r4, r4, r6
 801ea1a:	ea24 0407 	bic.w	r4, r4, r7
 801ea1e:	e7df      	b.n	801e9e0 <floor+0x48>
 801ea20:	2e33      	cmp	r6, #51	; 0x33
 801ea22:	dd0b      	ble.n	801ea3c <floor+0xa4>
 801ea24:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801ea28:	d104      	bne.n	801ea34 <floor+0x9c>
 801ea2a:	ee10 2a10 	vmov	r2, s0
 801ea2e:	460b      	mov	r3, r1
 801ea30:	f7e1 fc1a 	bl	8000268 <__adddf3>
 801ea34:	ec41 0b10 	vmov	d0, r0, r1
 801ea38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ea3c:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801ea40:	f04f 33ff 	mov.w	r3, #4294967295
 801ea44:	fa23 f707 	lsr.w	r7, r3, r7
 801ea48:	4207      	tst	r7, r0
 801ea4a:	d0f3      	beq.n	801ea34 <floor+0x9c>
 801ea4c:	a310      	add	r3, pc, #64	; (adr r3, 801ea90 <floor+0xf8>)
 801ea4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea52:	f7e1 fc09 	bl	8000268 <__adddf3>
 801ea56:	2200      	movs	r2, #0
 801ea58:	2300      	movs	r3, #0
 801ea5a:	f7e2 f84b 	bl	8000af4 <__aeabi_dcmpgt>
 801ea5e:	2800      	cmp	r0, #0
 801ea60:	d0be      	beq.n	801e9e0 <floor+0x48>
 801ea62:	2c00      	cmp	r4, #0
 801ea64:	da02      	bge.n	801ea6c <floor+0xd4>
 801ea66:	2e14      	cmp	r6, #20
 801ea68:	d103      	bne.n	801ea72 <floor+0xda>
 801ea6a:	3401      	adds	r4, #1
 801ea6c:	ea25 0507 	bic.w	r5, r5, r7
 801ea70:	e7b6      	b.n	801e9e0 <floor+0x48>
 801ea72:	2301      	movs	r3, #1
 801ea74:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801ea78:	fa03 f606 	lsl.w	r6, r3, r6
 801ea7c:	4435      	add	r5, r6
 801ea7e:	4545      	cmp	r5, r8
 801ea80:	bf38      	it	cc
 801ea82:	18e4      	addcc	r4, r4, r3
 801ea84:	e7f2      	b.n	801ea6c <floor+0xd4>
 801ea86:	2500      	movs	r5, #0
 801ea88:	462c      	mov	r4, r5
 801ea8a:	e7a9      	b.n	801e9e0 <floor+0x48>
 801ea8c:	f3af 8000 	nop.w
 801ea90:	8800759c 	.word	0x8800759c
 801ea94:	7e37e43c 	.word	0x7e37e43c
 801ea98:	bff00000 	.word	0xbff00000
 801ea9c:	000fffff 	.word	0x000fffff

0801eaa0 <frexp>:
 801eaa0:	2100      	movs	r1, #0
 801eaa2:	b570      	push	{r4, r5, r6, lr}
 801eaa4:	ec55 4b10 	vmov	r4, r5, d0
 801eaa8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801eaac:	6001      	str	r1, [r0, #0]
 801eaae:	4915      	ldr	r1, [pc, #84]	; (801eb04 <frexp+0x64>)
 801eab0:	4606      	mov	r6, r0
 801eab2:	462a      	mov	r2, r5
 801eab4:	428b      	cmp	r3, r1
 801eab6:	dc22      	bgt.n	801eafe <frexp+0x5e>
 801eab8:	ee10 1a10 	vmov	r1, s0
 801eabc:	4319      	orrs	r1, r3
 801eabe:	d01e      	beq.n	801eafe <frexp+0x5e>
 801eac0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801eac4:	da0d      	bge.n	801eae2 <frexp+0x42>
 801eac6:	2200      	movs	r2, #0
 801eac8:	4b0f      	ldr	r3, [pc, #60]	; (801eb08 <frexp+0x68>)
 801eaca:	ee10 0a10 	vmov	r0, s0
 801eace:	4629      	mov	r1, r5
 801ead0:	f7e1 fd80 	bl	80005d4 <__aeabi_dmul>
 801ead4:	460a      	mov	r2, r1
 801ead6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801eada:	4604      	mov	r4, r0
 801eadc:	f06f 0135 	mvn.w	r1, #53	; 0x35
 801eae0:	6031      	str	r1, [r6, #0]
 801eae2:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 801eae6:	151b      	asrs	r3, r3, #20
 801eae8:	6831      	ldr	r1, [r6, #0]
 801eaea:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 801eaee:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801eaf2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801eaf6:	440b      	add	r3, r1
 801eaf8:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 801eafc:	6033      	str	r3, [r6, #0]
 801eafe:	ec45 4b10 	vmov	d0, r4, r5
 801eb02:	bd70      	pop	{r4, r5, r6, pc}
 801eb04:	7fefffff 	.word	0x7fefffff
 801eb08:	43500000 	.word	0x43500000

0801eb0c <round>:
 801eb0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eb0e:	ec57 6b10 	vmov	r6, r7, d0
 801eb12:	f3c7 500a 	ubfx	r0, r7, #20, #11
 801eb16:	463b      	mov	r3, r7
 801eb18:	463d      	mov	r5, r7
 801eb1a:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 801eb1e:	2c13      	cmp	r4, #19
 801eb20:	dc17      	bgt.n	801eb52 <round+0x46>
 801eb22:	2c00      	cmp	r4, #0
 801eb24:	da09      	bge.n	801eb3a <round+0x2e>
 801eb26:	3401      	adds	r4, #1
 801eb28:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 801eb2c:	d103      	bne.n	801eb36 <round+0x2a>
 801eb2e:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801eb32:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801eb36:	2100      	movs	r1, #0
 801eb38:	e02c      	b.n	801eb94 <round+0x88>
 801eb3a:	4a18      	ldr	r2, [pc, #96]	; (801eb9c <round+0x90>)
 801eb3c:	4122      	asrs	r2, r4
 801eb3e:	4217      	tst	r7, r2
 801eb40:	d100      	bne.n	801eb44 <round+0x38>
 801eb42:	b19e      	cbz	r6, 801eb6c <round+0x60>
 801eb44:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801eb48:	4123      	asrs	r3, r4
 801eb4a:	442b      	add	r3, r5
 801eb4c:	ea23 0302 	bic.w	r3, r3, r2
 801eb50:	e7f1      	b.n	801eb36 <round+0x2a>
 801eb52:	2c33      	cmp	r4, #51	; 0x33
 801eb54:	dd0d      	ble.n	801eb72 <round+0x66>
 801eb56:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 801eb5a:	d107      	bne.n	801eb6c <round+0x60>
 801eb5c:	4630      	mov	r0, r6
 801eb5e:	4639      	mov	r1, r7
 801eb60:	ee10 2a10 	vmov	r2, s0
 801eb64:	f7e1 fb80 	bl	8000268 <__adddf3>
 801eb68:	4606      	mov	r6, r0
 801eb6a:	460f      	mov	r7, r1
 801eb6c:	ec47 6b10 	vmov	d0, r6, r7
 801eb70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801eb72:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 801eb76:	f04f 30ff 	mov.w	r0, #4294967295
 801eb7a:	40d0      	lsrs	r0, r2
 801eb7c:	4206      	tst	r6, r0
 801eb7e:	d0f5      	beq.n	801eb6c <round+0x60>
 801eb80:	2201      	movs	r2, #1
 801eb82:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 801eb86:	fa02 f404 	lsl.w	r4, r2, r4
 801eb8a:	1931      	adds	r1, r6, r4
 801eb8c:	bf28      	it	cs
 801eb8e:	189b      	addcs	r3, r3, r2
 801eb90:	ea21 0100 	bic.w	r1, r1, r0
 801eb94:	461f      	mov	r7, r3
 801eb96:	460e      	mov	r6, r1
 801eb98:	e7e8      	b.n	801eb6c <round+0x60>
 801eb9a:	bf00      	nop
 801eb9c:	000fffff 	.word	0x000fffff

0801eba0 <expf>:
 801eba0:	b530      	push	{r4, r5, lr}
 801eba2:	4d36      	ldr	r5, [pc, #216]	; (801ec7c <expf+0xdc>)
 801eba4:	ed2d 8b02 	vpush	{d8}
 801eba8:	b08b      	sub	sp, #44	; 0x2c
 801ebaa:	eeb0 8a40 	vmov.f32	s16, s0
 801ebae:	f000 f871 	bl	801ec94 <__ieee754_expf>
 801ebb2:	f995 3000 	ldrsb.w	r3, [r5]
 801ebb6:	ee10 4a10 	vmov	r4, s0
 801ebba:	3301      	adds	r3, #1
 801ebbc:	d030      	beq.n	801ec20 <expf+0x80>
 801ebbe:	eeb0 0a48 	vmov.f32	s0, s16
 801ebc2:	f000 f93b 	bl	801ee3c <finitef>
 801ebc6:	b358      	cbz	r0, 801ec20 <expf+0x80>
 801ebc8:	eddf 7a2d 	vldr	s15, [pc, #180]	; 801ec80 <expf+0xe0>
 801ebcc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801ebd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ebd4:	dd35      	ble.n	801ec42 <expf+0xa2>
 801ebd6:	2303      	movs	r3, #3
 801ebd8:	ee18 0a10 	vmov	r0, s16
 801ebdc:	9300      	str	r3, [sp, #0]
 801ebde:	4b29      	ldr	r3, [pc, #164]	; (801ec84 <expf+0xe4>)
 801ebe0:	9301      	str	r3, [sp, #4]
 801ebe2:	2300      	movs	r3, #0
 801ebe4:	9308      	str	r3, [sp, #32]
 801ebe6:	f7e1 fc9d 	bl	8000524 <__aeabi_f2d>
 801ebea:	f995 3000 	ldrsb.w	r3, [r5]
 801ebee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801ebf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ebf6:	b9cb      	cbnz	r3, 801ec2c <expf+0x8c>
 801ebf8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801ebfc:	4b22      	ldr	r3, [pc, #136]	; (801ec88 <expf+0xe8>)
 801ebfe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801ec02:	4668      	mov	r0, sp
 801ec04:	f000 f918 	bl	801ee38 <matherr>
 801ec08:	b1b0      	cbz	r0, 801ec38 <expf+0x98>
 801ec0a:	9b08      	ldr	r3, [sp, #32]
 801ec0c:	b11b      	cbz	r3, 801ec16 <expf+0x76>
 801ec0e:	f000 f94b 	bl	801eea8 <__errno>
 801ec12:	9b08      	ldr	r3, [sp, #32]
 801ec14:	6003      	str	r3, [r0, #0]
 801ec16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ec1a:	f7e1 ffb3 	bl	8000b84 <__aeabi_d2f>
 801ec1e:	4604      	mov	r4, r0
 801ec20:	ee00 4a10 	vmov	s0, r4
 801ec24:	b00b      	add	sp, #44	; 0x2c
 801ec26:	ecbd 8b02 	vpop	{d8}
 801ec2a:	bd30      	pop	{r4, r5, pc}
 801ec2c:	2000      	movs	r0, #0
 801ec2e:	4917      	ldr	r1, [pc, #92]	; (801ec8c <expf+0xec>)
 801ec30:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801ec34:	2b02      	cmp	r3, #2
 801ec36:	d1e4      	bne.n	801ec02 <expf+0x62>
 801ec38:	f000 f936 	bl	801eea8 <__errno>
 801ec3c:	2322      	movs	r3, #34	; 0x22
 801ec3e:	6003      	str	r3, [r0, #0]
 801ec40:	e7e3      	b.n	801ec0a <expf+0x6a>
 801ec42:	eddf 7a13 	vldr	s15, [pc, #76]	; 801ec90 <expf+0xf0>
 801ec46:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801ec4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ec4e:	d5e7      	bpl.n	801ec20 <expf+0x80>
 801ec50:	2304      	movs	r3, #4
 801ec52:	ee18 0a10 	vmov	r0, s16
 801ec56:	9300      	str	r3, [sp, #0]
 801ec58:	4b0a      	ldr	r3, [pc, #40]	; (801ec84 <expf+0xe4>)
 801ec5a:	9301      	str	r3, [sp, #4]
 801ec5c:	2300      	movs	r3, #0
 801ec5e:	9308      	str	r3, [sp, #32]
 801ec60:	f7e1 fc60 	bl	8000524 <__aeabi_f2d>
 801ec64:	2300      	movs	r3, #0
 801ec66:	2200      	movs	r2, #0
 801ec68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801ec6c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801ec70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ec74:	f995 3000 	ldrsb.w	r3, [r5]
 801ec78:	e7dc      	b.n	801ec34 <expf+0x94>
 801ec7a:	bf00      	nop
 801ec7c:	20016d4c 	.word	0x20016d4c
 801ec80:	42b17180 	.word	0x42b17180
 801ec84:	08026030 	.word	0x08026030
 801ec88:	47efffff 	.word	0x47efffff
 801ec8c:	7ff00000 	.word	0x7ff00000
 801ec90:	c2cff1b5 	.word	0xc2cff1b5

0801ec94 <__ieee754_expf>:
 801ec94:	ee10 2a10 	vmov	r2, s0
 801ec98:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 801ec9c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801eca0:	d902      	bls.n	801eca8 <__ieee754_expf+0x14>
 801eca2:	ee30 0a00 	vadd.f32	s0, s0, s0
 801eca6:	4770      	bx	lr
 801eca8:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 801ecac:	d105      	bne.n	801ecba <__ieee754_expf+0x26>
 801ecae:	2b00      	cmp	r3, #0
 801ecb0:	eddf 7a4f 	vldr	s15, [pc, #316]	; 801edf0 <__ieee754_expf+0x15c>
 801ecb4:	fe00 0a27 	vseleq.f32	s0, s0, s15
 801ecb8:	4770      	bx	lr
 801ecba:	484e      	ldr	r0, [pc, #312]	; (801edf4 <__ieee754_expf+0x160>)
 801ecbc:	4282      	cmp	r2, r0
 801ecbe:	dd04      	ble.n	801ecca <__ieee754_expf+0x36>
 801ecc0:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 801edf8 <__ieee754_expf+0x164>
 801ecc4:	ee20 0a00 	vmul.f32	s0, s0, s0
 801ecc8:	4770      	bx	lr
 801ecca:	2a00      	cmp	r2, #0
 801eccc:	da03      	bge.n	801ecd6 <__ieee754_expf+0x42>
 801ecce:	4a4b      	ldr	r2, [pc, #300]	; (801edfc <__ieee754_expf+0x168>)
 801ecd0:	4291      	cmp	r1, r2
 801ecd2:	f200 808a 	bhi.w	801edea <__ieee754_expf+0x156>
 801ecd6:	4a4a      	ldr	r2, [pc, #296]	; (801ee00 <__ieee754_expf+0x16c>)
 801ecd8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801ecdc:	4291      	cmp	r1, r2
 801ecde:	d954      	bls.n	801ed8a <__ieee754_expf+0xf6>
 801ece0:	4a48      	ldr	r2, [pc, #288]	; (801ee04 <__ieee754_expf+0x170>)
 801ece2:	4291      	cmp	r1, r2
 801ece4:	ea4f 0283 	mov.w	r2, r3, lsl #2
 801ece8:	d836      	bhi.n	801ed58 <__ieee754_expf+0xc4>
 801ecea:	4947      	ldr	r1, [pc, #284]	; (801ee08 <__ieee754_expf+0x174>)
 801ecec:	4411      	add	r1, r2
 801ecee:	ed91 7a00 	vldr	s14, [r1]
 801ecf2:	4946      	ldr	r1, [pc, #280]	; (801ee0c <__ieee754_expf+0x178>)
 801ecf4:	ee30 7a47 	vsub.f32	s14, s0, s14
 801ecf8:	440a      	add	r2, r1
 801ecfa:	edd2 7a00 	vldr	s15, [r2]
 801ecfe:	f1c3 0201 	rsb	r2, r3, #1
 801ed02:	1ad2      	subs	r2, r2, r3
 801ed04:	ee37 0a67 	vsub.f32	s0, s14, s15
 801ed08:	ee60 6a00 	vmul.f32	s13, s0, s0
 801ed0c:	eddf 5a40 	vldr	s11, [pc, #256]	; 801ee10 <__ieee754_expf+0x17c>
 801ed10:	ed9f 5a40 	vldr	s10, [pc, #256]	; 801ee14 <__ieee754_expf+0x180>
 801ed14:	eea6 5aa5 	vfma.f32	s10, s13, s11
 801ed18:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801ee18 <__ieee754_expf+0x184>
 801ed1c:	eee5 5a26 	vfma.f32	s11, s10, s13
 801ed20:	ed9f 5a3e 	vldr	s10, [pc, #248]	; 801ee1c <__ieee754_expf+0x188>
 801ed24:	eea5 5aa6 	vfma.f32	s10, s11, s13
 801ed28:	eddf 5a3d 	vldr	s11, [pc, #244]	; 801ee20 <__ieee754_expf+0x18c>
 801ed2c:	eee5 5a26 	vfma.f32	s11, s10, s13
 801ed30:	eeb0 5a40 	vmov.f32	s10, s0
 801ed34:	eea5 5ae6 	vfms.f32	s10, s11, s13
 801ed38:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 801ed3c:	eef0 6a45 	vmov.f32	s13, s10
 801ed40:	ee20 5a05 	vmul.f32	s10, s0, s10
 801ed44:	bb92      	cbnz	r2, 801edac <__ieee754_expf+0x118>
 801ed46:	ee76 6ae5 	vsub.f32	s13, s13, s11
 801ed4a:	eec5 7a26 	vdiv.f32	s15, s10, s13
 801ed4e:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801ed52:	ee36 0a40 	vsub.f32	s0, s12, s0
 801ed56:	4770      	bx	lr
 801ed58:	4b32      	ldr	r3, [pc, #200]	; (801ee24 <__ieee754_expf+0x190>)
 801ed5a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 801ee28 <__ieee754_expf+0x194>
 801ed5e:	4413      	add	r3, r2
 801ed60:	edd3 7a00 	vldr	s15, [r3]
 801ed64:	eee0 7a07 	vfma.f32	s15, s0, s14
 801ed68:	ed9f 7a30 	vldr	s14, [pc, #192]	; 801ee2c <__ieee754_expf+0x198>
 801ed6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ed70:	ee17 2a90 	vmov	r2, s15
 801ed74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ed78:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801ed7c:	eeb0 7a40 	vmov.f32	s14, s0
 801ed80:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 801ee30 <__ieee754_expf+0x19c>
 801ed84:	ee67 7a80 	vmul.f32	s15, s15, s0
 801ed88:	e7bc      	b.n	801ed04 <__ieee754_expf+0x70>
 801ed8a:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 801ed8e:	d20b      	bcs.n	801eda8 <__ieee754_expf+0x114>
 801ed90:	eddf 6a19 	vldr	s13, [pc, #100]	; 801edf8 <__ieee754_expf+0x164>
 801ed94:	ee70 6a26 	vadd.f32	s13, s0, s13
 801ed98:	eef4 6ac6 	vcmpe.f32	s13, s12
 801ed9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eda0:	dd02      	ble.n	801eda8 <__ieee754_expf+0x114>
 801eda2:	ee30 0a06 	vadd.f32	s0, s0, s12
 801eda6:	4770      	bx	lr
 801eda8:	2200      	movs	r2, #0
 801edaa:	e7ad      	b.n	801ed08 <__ieee754_expf+0x74>
 801edac:	ee75 6ae6 	vsub.f32	s13, s11, s13
 801edb0:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 801edb4:	bfb8      	it	lt
 801edb6:	3264      	addlt	r2, #100	; 0x64
 801edb8:	ee85 0a26 	vdiv.f32	s0, s10, s13
 801edbc:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801edc0:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801edc4:	ee76 7a40 	vsub.f32	s15, s12, s0
 801edc8:	ee17 3a90 	vmov	r3, s15
 801edcc:	bfb5      	itete	lt
 801edce:	eddf 7a19 	vldrlt	s15, [pc, #100]	; 801ee34 <__ieee754_expf+0x1a0>
 801edd2:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 801edd6:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 801edda:	ee00 3a10 	vmovge	s0, r3
 801edde:	bfbc      	itt	lt
 801ede0:	ee00 3a10 	vmovlt	s0, r3
 801ede4:	ee20 0a27 	vmullt.f32	s0, s0, s15
 801ede8:	4770      	bx	lr
 801edea:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801edf0 <__ieee754_expf+0x15c>
 801edee:	4770      	bx	lr
 801edf0:	00000000 	.word	0x00000000
 801edf4:	42b17217 	.word	0x42b17217
 801edf8:	7149f2ca 	.word	0x7149f2ca
 801edfc:	42cff1b5 	.word	0x42cff1b5
 801ee00:	3eb17218 	.word	0x3eb17218
 801ee04:	3f851591 	.word	0x3f851591
 801ee08:	08026040 	.word	0x08026040
 801ee0c:	08026048 	.word	0x08026048
 801ee10:	3331bb4c 	.word	0x3331bb4c
 801ee14:	b5ddea0e 	.word	0xb5ddea0e
 801ee18:	388ab355 	.word	0x388ab355
 801ee1c:	bb360b61 	.word	0xbb360b61
 801ee20:	3e2aaaab 	.word	0x3e2aaaab
 801ee24:	08026038 	.word	0x08026038
 801ee28:	3fb8aa3b 	.word	0x3fb8aa3b
 801ee2c:	3f317180 	.word	0x3f317180
 801ee30:	3717f7d1 	.word	0x3717f7d1
 801ee34:	0d800000 	.word	0x0d800000

0801ee38 <matherr>:
 801ee38:	2000      	movs	r0, #0
 801ee3a:	4770      	bx	lr

0801ee3c <finitef>:
 801ee3c:	ee10 3a10 	vmov	r3, s0
 801ee40:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 801ee44:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801ee48:	bfac      	ite	ge
 801ee4a:	2000      	movge	r0, #0
 801ee4c:	2001      	movlt	r0, #1
 801ee4e:	4770      	bx	lr

0801ee50 <abort>:
 801ee50:	b508      	push	{r3, lr}
 801ee52:	2006      	movs	r0, #6
 801ee54:	f000 ff6e 	bl	801fd34 <raise>
 801ee58:	2001      	movs	r0, #1
 801ee5a:	f7e2 ffdf 	bl	8001e1c <_exit>
	...

0801ee60 <__assert_func>:
 801ee60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ee62:	461c      	mov	r4, r3
 801ee64:	4b09      	ldr	r3, [pc, #36]	; (801ee8c <__assert_func+0x2c>)
 801ee66:	4605      	mov	r5, r0
 801ee68:	681b      	ldr	r3, [r3, #0]
 801ee6a:	68d8      	ldr	r0, [r3, #12]
 801ee6c:	b152      	cbz	r2, 801ee84 <__assert_func+0x24>
 801ee6e:	4b08      	ldr	r3, [pc, #32]	; (801ee90 <__assert_func+0x30>)
 801ee70:	9100      	str	r1, [sp, #0]
 801ee72:	4908      	ldr	r1, [pc, #32]	; (801ee94 <__assert_func+0x34>)
 801ee74:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801ee78:	462b      	mov	r3, r5
 801ee7a:	4622      	mov	r2, r4
 801ee7c:	f000 f81a 	bl	801eeb4 <fiprintf>
 801ee80:	f7ff ffe6 	bl	801ee50 <abort>
 801ee84:	4b04      	ldr	r3, [pc, #16]	; (801ee98 <__assert_func+0x38>)
 801ee86:	461a      	mov	r2, r3
 801ee88:	e7f2      	b.n	801ee70 <__assert_func+0x10>
 801ee8a:	bf00      	nop
 801ee8c:	20016d50 	.word	0x20016d50
 801ee90:	08026050 	.word	0x08026050
 801ee94:	0802605d 	.word	0x0802605d
 801ee98:	0802608b 	.word	0x0802608b

0801ee9c <atexit>:
 801ee9c:	2300      	movs	r3, #0
 801ee9e:	4601      	mov	r1, r0
 801eea0:	461a      	mov	r2, r3
 801eea2:	4618      	mov	r0, r3
 801eea4:	f001 b842 	b.w	801ff2c <__register_exitproc>

0801eea8 <__errno>:
 801eea8:	4b01      	ldr	r3, [pc, #4]	; (801eeb0 <__errno+0x8>)
 801eeaa:	6818      	ldr	r0, [r3, #0]
 801eeac:	4770      	bx	lr
 801eeae:	bf00      	nop
 801eeb0:	20016d50 	.word	0x20016d50

0801eeb4 <fiprintf>:
 801eeb4:	b40e      	push	{r1, r2, r3}
 801eeb6:	b503      	push	{r0, r1, lr}
 801eeb8:	ab03      	add	r3, sp, #12
 801eeba:	4601      	mov	r1, r0
 801eebc:	4805      	ldr	r0, [pc, #20]	; (801eed4 <fiprintf+0x20>)
 801eebe:	f853 2b04 	ldr.w	r2, [r3], #4
 801eec2:	6800      	ldr	r0, [r0, #0]
 801eec4:	9301      	str	r3, [sp, #4]
 801eec6:	f000 f989 	bl	801f1dc <_vfiprintf_r>
 801eeca:	b002      	add	sp, #8
 801eecc:	f85d eb04 	ldr.w	lr, [sp], #4
 801eed0:	b003      	add	sp, #12
 801eed2:	4770      	bx	lr
 801eed4:	20016d50 	.word	0x20016d50

0801eed8 <_fputs_r>:
 801eed8:	b570      	push	{r4, r5, r6, lr}
 801eeda:	460e      	mov	r6, r1
 801eedc:	4614      	mov	r4, r2
 801eede:	4605      	mov	r5, r0
 801eee0:	b118      	cbz	r0, 801eeea <_fputs_r+0x12>
 801eee2:	6983      	ldr	r3, [r0, #24]
 801eee4:	b90b      	cbnz	r3, 801eeea <_fputs_r+0x12>
 801eee6:	f001 ffb9 	bl	8020e5c <__sinit>
 801eeea:	4b1c      	ldr	r3, [pc, #112]	; (801ef5c <_fputs_r+0x84>)
 801eeec:	429c      	cmp	r4, r3
 801eeee:	d10b      	bne.n	801ef08 <_fputs_r+0x30>
 801eef0:	686c      	ldr	r4, [r5, #4]
 801eef2:	89a3      	ldrh	r3, [r4, #12]
 801eef4:	071b      	lsls	r3, r3, #28
 801eef6:	d511      	bpl.n	801ef1c <_fputs_r+0x44>
 801eef8:	6923      	ldr	r3, [r4, #16]
 801eefa:	b17b      	cbz	r3, 801ef1c <_fputs_r+0x44>
 801eefc:	3e01      	subs	r6, #1
 801eefe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801ef02:	b9a1      	cbnz	r1, 801ef2e <_fputs_r+0x56>
 801ef04:	4608      	mov	r0, r1
 801ef06:	e011      	b.n	801ef2c <_fputs_r+0x54>
 801ef08:	4b15      	ldr	r3, [pc, #84]	; (801ef60 <_fputs_r+0x88>)
 801ef0a:	429c      	cmp	r4, r3
 801ef0c:	d101      	bne.n	801ef12 <_fputs_r+0x3a>
 801ef0e:	68ac      	ldr	r4, [r5, #8]
 801ef10:	e7ef      	b.n	801eef2 <_fputs_r+0x1a>
 801ef12:	4b14      	ldr	r3, [pc, #80]	; (801ef64 <_fputs_r+0x8c>)
 801ef14:	429c      	cmp	r4, r3
 801ef16:	bf08      	it	eq
 801ef18:	68ec      	ldreq	r4, [r5, #12]
 801ef1a:	e7ea      	b.n	801eef2 <_fputs_r+0x1a>
 801ef1c:	4621      	mov	r1, r4
 801ef1e:	4628      	mov	r0, r5
 801ef20:	f000 ff96 	bl	801fe50 <__swsetup_r>
 801ef24:	2800      	cmp	r0, #0
 801ef26:	d0e9      	beq.n	801eefc <_fputs_r+0x24>
 801ef28:	f04f 30ff 	mov.w	r0, #4294967295
 801ef2c:	bd70      	pop	{r4, r5, r6, pc}
 801ef2e:	68a3      	ldr	r3, [r4, #8]
 801ef30:	3b01      	subs	r3, #1
 801ef32:	2b00      	cmp	r3, #0
 801ef34:	60a3      	str	r3, [r4, #8]
 801ef36:	da04      	bge.n	801ef42 <_fputs_r+0x6a>
 801ef38:	69a2      	ldr	r2, [r4, #24]
 801ef3a:	4293      	cmp	r3, r2
 801ef3c:	db06      	blt.n	801ef4c <_fputs_r+0x74>
 801ef3e:	290a      	cmp	r1, #10
 801ef40:	d004      	beq.n	801ef4c <_fputs_r+0x74>
 801ef42:	6823      	ldr	r3, [r4, #0]
 801ef44:	1c5a      	adds	r2, r3, #1
 801ef46:	6022      	str	r2, [r4, #0]
 801ef48:	7019      	strb	r1, [r3, #0]
 801ef4a:	e7d8      	b.n	801eefe <_fputs_r+0x26>
 801ef4c:	4622      	mov	r2, r4
 801ef4e:	4628      	mov	r0, r5
 801ef50:	f000 ff2c 	bl	801fdac <__swbuf_r>
 801ef54:	3001      	adds	r0, #1
 801ef56:	d1d2      	bne.n	801eefe <_fputs_r+0x26>
 801ef58:	e7e6      	b.n	801ef28 <_fputs_r+0x50>
 801ef5a:	bf00      	nop
 801ef5c:	08026104 	.word	0x08026104
 801ef60:	08026124 	.word	0x08026124
 801ef64:	080260e4 	.word	0x080260e4

0801ef68 <fputs>:
 801ef68:	4b02      	ldr	r3, [pc, #8]	; (801ef74 <fputs+0xc>)
 801ef6a:	460a      	mov	r2, r1
 801ef6c:	4601      	mov	r1, r0
 801ef6e:	6818      	ldr	r0, [r3, #0]
 801ef70:	f7ff bfb2 	b.w	801eed8 <_fputs_r>
 801ef74:	20016d50 	.word	0x20016d50

0801ef78 <__libc_init_array>:
 801ef78:	b570      	push	{r4, r5, r6, lr}
 801ef7a:	4e0d      	ldr	r6, [pc, #52]	; (801efb0 <__libc_init_array+0x38>)
 801ef7c:	2500      	movs	r5, #0
 801ef7e:	4c0d      	ldr	r4, [pc, #52]	; (801efb4 <__libc_init_array+0x3c>)
 801ef80:	1ba4      	subs	r4, r4, r6
 801ef82:	10a4      	asrs	r4, r4, #2
 801ef84:	42a5      	cmp	r5, r4
 801ef86:	d109      	bne.n	801ef9c <__libc_init_array+0x24>
 801ef88:	4e0b      	ldr	r6, [pc, #44]	; (801efb8 <__libc_init_array+0x40>)
 801ef8a:	2500      	movs	r5, #0
 801ef8c:	4c0b      	ldr	r4, [pc, #44]	; (801efbc <__libc_init_array+0x44>)
 801ef8e:	f002 fdab 	bl	8021ae8 <_init>
 801ef92:	1ba4      	subs	r4, r4, r6
 801ef94:	10a4      	asrs	r4, r4, #2
 801ef96:	42a5      	cmp	r5, r4
 801ef98:	d105      	bne.n	801efa6 <__libc_init_array+0x2e>
 801ef9a:	bd70      	pop	{r4, r5, r6, pc}
 801ef9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801efa0:	3501      	adds	r5, #1
 801efa2:	4798      	blx	r3
 801efa4:	e7ee      	b.n	801ef84 <__libc_init_array+0xc>
 801efa6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801efaa:	3501      	adds	r5, #1
 801efac:	4798      	blx	r3
 801efae:	e7f2      	b.n	801ef96 <__libc_init_array+0x1e>
 801efb0:	08026358 	.word	0x08026358
 801efb4:	08026358 	.word	0x08026358
 801efb8:	08026358 	.word	0x08026358
 801efbc:	0802635c 	.word	0x0802635c

0801efc0 <malloc>:
 801efc0:	4b02      	ldr	r3, [pc, #8]	; (801efcc <malloc+0xc>)
 801efc2:	4601      	mov	r1, r0
 801efc4:	6818      	ldr	r0, [r3, #0]
 801efc6:	f000 b885 	b.w	801f0d4 <_malloc_r>
 801efca:	bf00      	nop
 801efcc:	20016d50 	.word	0x20016d50

0801efd0 <free>:
 801efd0:	4b02      	ldr	r3, [pc, #8]	; (801efdc <free+0xc>)
 801efd2:	4601      	mov	r1, r0
 801efd4:	6818      	ldr	r0, [r3, #0]
 801efd6:	f000 b82f 	b.w	801f038 <_free_r>
 801efda:	bf00      	nop
 801efdc:	20016d50 	.word	0x20016d50

0801efe0 <memcpy>:
 801efe0:	1e43      	subs	r3, r0, #1
 801efe2:	440a      	add	r2, r1
 801efe4:	b510      	push	{r4, lr}
 801efe6:	4291      	cmp	r1, r2
 801efe8:	d100      	bne.n	801efec <memcpy+0xc>
 801efea:	bd10      	pop	{r4, pc}
 801efec:	f811 4b01 	ldrb.w	r4, [r1], #1
 801eff0:	f803 4f01 	strb.w	r4, [r3, #1]!
 801eff4:	e7f7      	b.n	801efe6 <memcpy+0x6>

0801eff6 <memmove>:
 801eff6:	4288      	cmp	r0, r1
 801eff8:	eb01 0302 	add.w	r3, r1, r2
 801effc:	b510      	push	{r4, lr}
 801effe:	d807      	bhi.n	801f010 <memmove+0x1a>
 801f000:	1e42      	subs	r2, r0, #1
 801f002:	4299      	cmp	r1, r3
 801f004:	d00a      	beq.n	801f01c <memmove+0x26>
 801f006:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f00a:	f802 4f01 	strb.w	r4, [r2, #1]!
 801f00e:	e7f8      	b.n	801f002 <memmove+0xc>
 801f010:	4283      	cmp	r3, r0
 801f012:	d9f5      	bls.n	801f000 <memmove+0xa>
 801f014:	1881      	adds	r1, r0, r2
 801f016:	1ad2      	subs	r2, r2, r3
 801f018:	42d3      	cmn	r3, r2
 801f01a:	d100      	bne.n	801f01e <memmove+0x28>
 801f01c:	bd10      	pop	{r4, pc}
 801f01e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801f022:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801f026:	e7f7      	b.n	801f018 <memmove+0x22>

0801f028 <memset>:
 801f028:	4402      	add	r2, r0
 801f02a:	4603      	mov	r3, r0
 801f02c:	4293      	cmp	r3, r2
 801f02e:	d100      	bne.n	801f032 <memset+0xa>
 801f030:	4770      	bx	lr
 801f032:	f803 1b01 	strb.w	r1, [r3], #1
 801f036:	e7f9      	b.n	801f02c <memset+0x4>

0801f038 <_free_r>:
 801f038:	b538      	push	{r3, r4, r5, lr}
 801f03a:	4605      	mov	r5, r0
 801f03c:	2900      	cmp	r1, #0
 801f03e:	d045      	beq.n	801f0cc <_free_r+0x94>
 801f040:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f044:	1f0c      	subs	r4, r1, #4
 801f046:	2b00      	cmp	r3, #0
 801f048:	bfb8      	it	lt
 801f04a:	18e4      	addlt	r4, r4, r3
 801f04c:	f002 f810 	bl	8021070 <__malloc_lock>
 801f050:	4a1f      	ldr	r2, [pc, #124]	; (801f0d0 <_free_r+0x98>)
 801f052:	6813      	ldr	r3, [r2, #0]
 801f054:	4610      	mov	r0, r2
 801f056:	b933      	cbnz	r3, 801f066 <_free_r+0x2e>
 801f058:	6063      	str	r3, [r4, #4]
 801f05a:	6014      	str	r4, [r2, #0]
 801f05c:	4628      	mov	r0, r5
 801f05e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f062:	f002 b806 	b.w	8021072 <__malloc_unlock>
 801f066:	42a3      	cmp	r3, r4
 801f068:	d90c      	bls.n	801f084 <_free_r+0x4c>
 801f06a:	6821      	ldr	r1, [r4, #0]
 801f06c:	1862      	adds	r2, r4, r1
 801f06e:	4293      	cmp	r3, r2
 801f070:	bf02      	ittt	eq
 801f072:	681a      	ldreq	r2, [r3, #0]
 801f074:	685b      	ldreq	r3, [r3, #4]
 801f076:	1852      	addeq	r2, r2, r1
 801f078:	6063      	str	r3, [r4, #4]
 801f07a:	bf08      	it	eq
 801f07c:	6022      	streq	r2, [r4, #0]
 801f07e:	6004      	str	r4, [r0, #0]
 801f080:	e7ec      	b.n	801f05c <_free_r+0x24>
 801f082:	4613      	mov	r3, r2
 801f084:	685a      	ldr	r2, [r3, #4]
 801f086:	b10a      	cbz	r2, 801f08c <_free_r+0x54>
 801f088:	42a2      	cmp	r2, r4
 801f08a:	d9fa      	bls.n	801f082 <_free_r+0x4a>
 801f08c:	6819      	ldr	r1, [r3, #0]
 801f08e:	1858      	adds	r0, r3, r1
 801f090:	42a0      	cmp	r0, r4
 801f092:	d10b      	bne.n	801f0ac <_free_r+0x74>
 801f094:	6820      	ldr	r0, [r4, #0]
 801f096:	4401      	add	r1, r0
 801f098:	1858      	adds	r0, r3, r1
 801f09a:	6019      	str	r1, [r3, #0]
 801f09c:	4282      	cmp	r2, r0
 801f09e:	d1dd      	bne.n	801f05c <_free_r+0x24>
 801f0a0:	6810      	ldr	r0, [r2, #0]
 801f0a2:	6852      	ldr	r2, [r2, #4]
 801f0a4:	4401      	add	r1, r0
 801f0a6:	605a      	str	r2, [r3, #4]
 801f0a8:	6019      	str	r1, [r3, #0]
 801f0aa:	e7d7      	b.n	801f05c <_free_r+0x24>
 801f0ac:	d902      	bls.n	801f0b4 <_free_r+0x7c>
 801f0ae:	230c      	movs	r3, #12
 801f0b0:	602b      	str	r3, [r5, #0]
 801f0b2:	e7d3      	b.n	801f05c <_free_r+0x24>
 801f0b4:	6820      	ldr	r0, [r4, #0]
 801f0b6:	1821      	adds	r1, r4, r0
 801f0b8:	428a      	cmp	r2, r1
 801f0ba:	bf02      	ittt	eq
 801f0bc:	6811      	ldreq	r1, [r2, #0]
 801f0be:	6852      	ldreq	r2, [r2, #4]
 801f0c0:	1809      	addeq	r1, r1, r0
 801f0c2:	6062      	str	r2, [r4, #4]
 801f0c4:	bf08      	it	eq
 801f0c6:	6021      	streq	r1, [r4, #0]
 801f0c8:	605c      	str	r4, [r3, #4]
 801f0ca:	e7c7      	b.n	801f05c <_free_r+0x24>
 801f0cc:	bd38      	pop	{r3, r4, r5, pc}
 801f0ce:	bf00      	nop
 801f0d0:	2002d0f4 	.word	0x2002d0f4

0801f0d4 <_malloc_r>:
 801f0d4:	b570      	push	{r4, r5, r6, lr}
 801f0d6:	1ccd      	adds	r5, r1, #3
 801f0d8:	4606      	mov	r6, r0
 801f0da:	f025 0503 	bic.w	r5, r5, #3
 801f0de:	3508      	adds	r5, #8
 801f0e0:	2d0c      	cmp	r5, #12
 801f0e2:	bf38      	it	cc
 801f0e4:	250c      	movcc	r5, #12
 801f0e6:	2d00      	cmp	r5, #0
 801f0e8:	db01      	blt.n	801f0ee <_malloc_r+0x1a>
 801f0ea:	42a9      	cmp	r1, r5
 801f0ec:	d903      	bls.n	801f0f6 <_malloc_r+0x22>
 801f0ee:	230c      	movs	r3, #12
 801f0f0:	6033      	str	r3, [r6, #0]
 801f0f2:	2000      	movs	r0, #0
 801f0f4:	bd70      	pop	{r4, r5, r6, pc}
 801f0f6:	f001 ffbb 	bl	8021070 <__malloc_lock>
 801f0fa:	4a21      	ldr	r2, [pc, #132]	; (801f180 <_malloc_r+0xac>)
 801f0fc:	6814      	ldr	r4, [r2, #0]
 801f0fe:	4621      	mov	r1, r4
 801f100:	b991      	cbnz	r1, 801f128 <_malloc_r+0x54>
 801f102:	4c20      	ldr	r4, [pc, #128]	; (801f184 <_malloc_r+0xb0>)
 801f104:	6823      	ldr	r3, [r4, #0]
 801f106:	b91b      	cbnz	r3, 801f110 <_malloc_r+0x3c>
 801f108:	4630      	mov	r0, r6
 801f10a:	f000 fddb 	bl	801fcc4 <_sbrk_r>
 801f10e:	6020      	str	r0, [r4, #0]
 801f110:	4629      	mov	r1, r5
 801f112:	4630      	mov	r0, r6
 801f114:	f000 fdd6 	bl	801fcc4 <_sbrk_r>
 801f118:	1c43      	adds	r3, r0, #1
 801f11a:	d124      	bne.n	801f166 <_malloc_r+0x92>
 801f11c:	230c      	movs	r3, #12
 801f11e:	4630      	mov	r0, r6
 801f120:	6033      	str	r3, [r6, #0]
 801f122:	f001 ffa6 	bl	8021072 <__malloc_unlock>
 801f126:	e7e4      	b.n	801f0f2 <_malloc_r+0x1e>
 801f128:	680b      	ldr	r3, [r1, #0]
 801f12a:	1b5b      	subs	r3, r3, r5
 801f12c:	d418      	bmi.n	801f160 <_malloc_r+0x8c>
 801f12e:	2b0b      	cmp	r3, #11
 801f130:	d90f      	bls.n	801f152 <_malloc_r+0x7e>
 801f132:	18cc      	adds	r4, r1, r3
 801f134:	600b      	str	r3, [r1, #0]
 801f136:	50cd      	str	r5, [r1, r3]
 801f138:	4630      	mov	r0, r6
 801f13a:	f001 ff9a 	bl	8021072 <__malloc_unlock>
 801f13e:	f104 000b 	add.w	r0, r4, #11
 801f142:	1d23      	adds	r3, r4, #4
 801f144:	f020 0007 	bic.w	r0, r0, #7
 801f148:	1ac3      	subs	r3, r0, r3
 801f14a:	d0d3      	beq.n	801f0f4 <_malloc_r+0x20>
 801f14c:	425a      	negs	r2, r3
 801f14e:	50e2      	str	r2, [r4, r3]
 801f150:	e7d0      	b.n	801f0f4 <_malloc_r+0x20>
 801f152:	428c      	cmp	r4, r1
 801f154:	684b      	ldr	r3, [r1, #4]
 801f156:	bf1a      	itte	ne
 801f158:	6063      	strne	r3, [r4, #4]
 801f15a:	460c      	movne	r4, r1
 801f15c:	6013      	streq	r3, [r2, #0]
 801f15e:	e7eb      	b.n	801f138 <_malloc_r+0x64>
 801f160:	460c      	mov	r4, r1
 801f162:	6849      	ldr	r1, [r1, #4]
 801f164:	e7cc      	b.n	801f100 <_malloc_r+0x2c>
 801f166:	1cc4      	adds	r4, r0, #3
 801f168:	f024 0403 	bic.w	r4, r4, #3
 801f16c:	42a0      	cmp	r0, r4
 801f16e:	d005      	beq.n	801f17c <_malloc_r+0xa8>
 801f170:	1a21      	subs	r1, r4, r0
 801f172:	4630      	mov	r0, r6
 801f174:	f000 fda6 	bl	801fcc4 <_sbrk_r>
 801f178:	3001      	adds	r0, #1
 801f17a:	d0cf      	beq.n	801f11c <_malloc_r+0x48>
 801f17c:	6025      	str	r5, [r4, #0]
 801f17e:	e7db      	b.n	801f138 <_malloc_r+0x64>
 801f180:	2002d0f4 	.word	0x2002d0f4
 801f184:	2002d0f8 	.word	0x2002d0f8

0801f188 <__sfputc_r>:
 801f188:	6893      	ldr	r3, [r2, #8]
 801f18a:	3b01      	subs	r3, #1
 801f18c:	2b00      	cmp	r3, #0
 801f18e:	6093      	str	r3, [r2, #8]
 801f190:	b410      	push	{r4}
 801f192:	da08      	bge.n	801f1a6 <__sfputc_r+0x1e>
 801f194:	6994      	ldr	r4, [r2, #24]
 801f196:	42a3      	cmp	r3, r4
 801f198:	db01      	blt.n	801f19e <__sfputc_r+0x16>
 801f19a:	290a      	cmp	r1, #10
 801f19c:	d103      	bne.n	801f1a6 <__sfputc_r+0x1e>
 801f19e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f1a2:	f000 be03 	b.w	801fdac <__swbuf_r>
 801f1a6:	6813      	ldr	r3, [r2, #0]
 801f1a8:	1c58      	adds	r0, r3, #1
 801f1aa:	6010      	str	r0, [r2, #0]
 801f1ac:	4608      	mov	r0, r1
 801f1ae:	7019      	strb	r1, [r3, #0]
 801f1b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f1b4:	4770      	bx	lr

0801f1b6 <__sfputs_r>:
 801f1b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f1b8:	4606      	mov	r6, r0
 801f1ba:	460f      	mov	r7, r1
 801f1bc:	4614      	mov	r4, r2
 801f1be:	18d5      	adds	r5, r2, r3
 801f1c0:	42ac      	cmp	r4, r5
 801f1c2:	d101      	bne.n	801f1c8 <__sfputs_r+0x12>
 801f1c4:	2000      	movs	r0, #0
 801f1c6:	e007      	b.n	801f1d8 <__sfputs_r+0x22>
 801f1c8:	463a      	mov	r2, r7
 801f1ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f1ce:	4630      	mov	r0, r6
 801f1d0:	f7ff ffda 	bl	801f188 <__sfputc_r>
 801f1d4:	1c43      	adds	r3, r0, #1
 801f1d6:	d1f3      	bne.n	801f1c0 <__sfputs_r+0xa>
 801f1d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801f1dc <_vfiprintf_r>:
 801f1dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f1e0:	460c      	mov	r4, r1
 801f1e2:	b09d      	sub	sp, #116	; 0x74
 801f1e4:	4617      	mov	r7, r2
 801f1e6:	461d      	mov	r5, r3
 801f1e8:	4606      	mov	r6, r0
 801f1ea:	b118      	cbz	r0, 801f1f4 <_vfiprintf_r+0x18>
 801f1ec:	6983      	ldr	r3, [r0, #24]
 801f1ee:	b90b      	cbnz	r3, 801f1f4 <_vfiprintf_r+0x18>
 801f1f0:	f001 fe34 	bl	8020e5c <__sinit>
 801f1f4:	4b7c      	ldr	r3, [pc, #496]	; (801f3e8 <_vfiprintf_r+0x20c>)
 801f1f6:	429c      	cmp	r4, r3
 801f1f8:	d158      	bne.n	801f2ac <_vfiprintf_r+0xd0>
 801f1fa:	6874      	ldr	r4, [r6, #4]
 801f1fc:	89a3      	ldrh	r3, [r4, #12]
 801f1fe:	0718      	lsls	r0, r3, #28
 801f200:	d55e      	bpl.n	801f2c0 <_vfiprintf_r+0xe4>
 801f202:	6923      	ldr	r3, [r4, #16]
 801f204:	2b00      	cmp	r3, #0
 801f206:	d05b      	beq.n	801f2c0 <_vfiprintf_r+0xe4>
 801f208:	2300      	movs	r3, #0
 801f20a:	f04f 0b01 	mov.w	fp, #1
 801f20e:	9503      	str	r5, [sp, #12]
 801f210:	9309      	str	r3, [sp, #36]	; 0x24
 801f212:	2320      	movs	r3, #32
 801f214:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f218:	2330      	movs	r3, #48	; 0x30
 801f21a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f21e:	46b8      	mov	r8, r7
 801f220:	4645      	mov	r5, r8
 801f222:	f815 3b01 	ldrb.w	r3, [r5], #1
 801f226:	b10b      	cbz	r3, 801f22c <_vfiprintf_r+0x50>
 801f228:	2b25      	cmp	r3, #37	; 0x25
 801f22a:	d154      	bne.n	801f2d6 <_vfiprintf_r+0xfa>
 801f22c:	ebb8 0a07 	subs.w	sl, r8, r7
 801f230:	d00b      	beq.n	801f24a <_vfiprintf_r+0x6e>
 801f232:	4653      	mov	r3, sl
 801f234:	463a      	mov	r2, r7
 801f236:	4621      	mov	r1, r4
 801f238:	4630      	mov	r0, r6
 801f23a:	f7ff ffbc 	bl	801f1b6 <__sfputs_r>
 801f23e:	3001      	adds	r0, #1
 801f240:	f000 80c2 	beq.w	801f3c8 <_vfiprintf_r+0x1ec>
 801f244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f246:	4453      	add	r3, sl
 801f248:	9309      	str	r3, [sp, #36]	; 0x24
 801f24a:	f898 3000 	ldrb.w	r3, [r8]
 801f24e:	2b00      	cmp	r3, #0
 801f250:	f000 80ba 	beq.w	801f3c8 <_vfiprintf_r+0x1ec>
 801f254:	2300      	movs	r3, #0
 801f256:	f04f 32ff 	mov.w	r2, #4294967295
 801f25a:	9304      	str	r3, [sp, #16]
 801f25c:	9307      	str	r3, [sp, #28]
 801f25e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f262:	931a      	str	r3, [sp, #104]	; 0x68
 801f264:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f268:	46a8      	mov	r8, r5
 801f26a:	2205      	movs	r2, #5
 801f26c:	485f      	ldr	r0, [pc, #380]	; (801f3ec <_vfiprintf_r+0x210>)
 801f26e:	f818 1b01 	ldrb.w	r1, [r8], #1
 801f272:	f001 feef 	bl	8021054 <memchr>
 801f276:	9b04      	ldr	r3, [sp, #16]
 801f278:	bb78      	cbnz	r0, 801f2da <_vfiprintf_r+0xfe>
 801f27a:	06d9      	lsls	r1, r3, #27
 801f27c:	bf44      	itt	mi
 801f27e:	2220      	movmi	r2, #32
 801f280:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801f284:	071a      	lsls	r2, r3, #28
 801f286:	bf44      	itt	mi
 801f288:	222b      	movmi	r2, #43	; 0x2b
 801f28a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801f28e:	782a      	ldrb	r2, [r5, #0]
 801f290:	2a2a      	cmp	r2, #42	; 0x2a
 801f292:	d02a      	beq.n	801f2ea <_vfiprintf_r+0x10e>
 801f294:	46a8      	mov	r8, r5
 801f296:	9a07      	ldr	r2, [sp, #28]
 801f298:	2000      	movs	r0, #0
 801f29a:	250a      	movs	r5, #10
 801f29c:	4641      	mov	r1, r8
 801f29e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f2a2:	3b30      	subs	r3, #48	; 0x30
 801f2a4:	2b09      	cmp	r3, #9
 801f2a6:	d969      	bls.n	801f37c <_vfiprintf_r+0x1a0>
 801f2a8:	b360      	cbz	r0, 801f304 <_vfiprintf_r+0x128>
 801f2aa:	e024      	b.n	801f2f6 <_vfiprintf_r+0x11a>
 801f2ac:	4b50      	ldr	r3, [pc, #320]	; (801f3f0 <_vfiprintf_r+0x214>)
 801f2ae:	429c      	cmp	r4, r3
 801f2b0:	d101      	bne.n	801f2b6 <_vfiprintf_r+0xda>
 801f2b2:	68b4      	ldr	r4, [r6, #8]
 801f2b4:	e7a2      	b.n	801f1fc <_vfiprintf_r+0x20>
 801f2b6:	4b4f      	ldr	r3, [pc, #316]	; (801f3f4 <_vfiprintf_r+0x218>)
 801f2b8:	429c      	cmp	r4, r3
 801f2ba:	bf08      	it	eq
 801f2bc:	68f4      	ldreq	r4, [r6, #12]
 801f2be:	e79d      	b.n	801f1fc <_vfiprintf_r+0x20>
 801f2c0:	4621      	mov	r1, r4
 801f2c2:	4630      	mov	r0, r6
 801f2c4:	f000 fdc4 	bl	801fe50 <__swsetup_r>
 801f2c8:	2800      	cmp	r0, #0
 801f2ca:	d09d      	beq.n	801f208 <_vfiprintf_r+0x2c>
 801f2cc:	f04f 30ff 	mov.w	r0, #4294967295
 801f2d0:	b01d      	add	sp, #116	; 0x74
 801f2d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f2d6:	46a8      	mov	r8, r5
 801f2d8:	e7a2      	b.n	801f220 <_vfiprintf_r+0x44>
 801f2da:	4a44      	ldr	r2, [pc, #272]	; (801f3ec <_vfiprintf_r+0x210>)
 801f2dc:	4645      	mov	r5, r8
 801f2de:	1a80      	subs	r0, r0, r2
 801f2e0:	fa0b f000 	lsl.w	r0, fp, r0
 801f2e4:	4318      	orrs	r0, r3
 801f2e6:	9004      	str	r0, [sp, #16]
 801f2e8:	e7be      	b.n	801f268 <_vfiprintf_r+0x8c>
 801f2ea:	9a03      	ldr	r2, [sp, #12]
 801f2ec:	1d11      	adds	r1, r2, #4
 801f2ee:	6812      	ldr	r2, [r2, #0]
 801f2f0:	2a00      	cmp	r2, #0
 801f2f2:	9103      	str	r1, [sp, #12]
 801f2f4:	db01      	blt.n	801f2fa <_vfiprintf_r+0x11e>
 801f2f6:	9207      	str	r2, [sp, #28]
 801f2f8:	e004      	b.n	801f304 <_vfiprintf_r+0x128>
 801f2fa:	4252      	negs	r2, r2
 801f2fc:	f043 0302 	orr.w	r3, r3, #2
 801f300:	9207      	str	r2, [sp, #28]
 801f302:	9304      	str	r3, [sp, #16]
 801f304:	f898 3000 	ldrb.w	r3, [r8]
 801f308:	2b2e      	cmp	r3, #46	; 0x2e
 801f30a:	d10e      	bne.n	801f32a <_vfiprintf_r+0x14e>
 801f30c:	f898 3001 	ldrb.w	r3, [r8, #1]
 801f310:	2b2a      	cmp	r3, #42	; 0x2a
 801f312:	d138      	bne.n	801f386 <_vfiprintf_r+0x1aa>
 801f314:	9b03      	ldr	r3, [sp, #12]
 801f316:	f108 0802 	add.w	r8, r8, #2
 801f31a:	1d1a      	adds	r2, r3, #4
 801f31c:	681b      	ldr	r3, [r3, #0]
 801f31e:	2b00      	cmp	r3, #0
 801f320:	9203      	str	r2, [sp, #12]
 801f322:	bfb8      	it	lt
 801f324:	f04f 33ff 	movlt.w	r3, #4294967295
 801f328:	9305      	str	r3, [sp, #20]
 801f32a:	4d33      	ldr	r5, [pc, #204]	; (801f3f8 <_vfiprintf_r+0x21c>)
 801f32c:	2203      	movs	r2, #3
 801f32e:	f898 1000 	ldrb.w	r1, [r8]
 801f332:	4628      	mov	r0, r5
 801f334:	f001 fe8e 	bl	8021054 <memchr>
 801f338:	b140      	cbz	r0, 801f34c <_vfiprintf_r+0x170>
 801f33a:	2340      	movs	r3, #64	; 0x40
 801f33c:	1b40      	subs	r0, r0, r5
 801f33e:	f108 0801 	add.w	r8, r8, #1
 801f342:	fa03 f000 	lsl.w	r0, r3, r0
 801f346:	9b04      	ldr	r3, [sp, #16]
 801f348:	4303      	orrs	r3, r0
 801f34a:	9304      	str	r3, [sp, #16]
 801f34c:	f898 1000 	ldrb.w	r1, [r8]
 801f350:	2206      	movs	r2, #6
 801f352:	482a      	ldr	r0, [pc, #168]	; (801f3fc <_vfiprintf_r+0x220>)
 801f354:	f108 0701 	add.w	r7, r8, #1
 801f358:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f35c:	f001 fe7a 	bl	8021054 <memchr>
 801f360:	2800      	cmp	r0, #0
 801f362:	d037      	beq.n	801f3d4 <_vfiprintf_r+0x1f8>
 801f364:	4b26      	ldr	r3, [pc, #152]	; (801f400 <_vfiprintf_r+0x224>)
 801f366:	bb1b      	cbnz	r3, 801f3b0 <_vfiprintf_r+0x1d4>
 801f368:	9b03      	ldr	r3, [sp, #12]
 801f36a:	3307      	adds	r3, #7
 801f36c:	f023 0307 	bic.w	r3, r3, #7
 801f370:	3308      	adds	r3, #8
 801f372:	9303      	str	r3, [sp, #12]
 801f374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f376:	444b      	add	r3, r9
 801f378:	9309      	str	r3, [sp, #36]	; 0x24
 801f37a:	e750      	b.n	801f21e <_vfiprintf_r+0x42>
 801f37c:	fb05 3202 	mla	r2, r5, r2, r3
 801f380:	2001      	movs	r0, #1
 801f382:	4688      	mov	r8, r1
 801f384:	e78a      	b.n	801f29c <_vfiprintf_r+0xc0>
 801f386:	2300      	movs	r3, #0
 801f388:	f108 0801 	add.w	r8, r8, #1
 801f38c:	250a      	movs	r5, #10
 801f38e:	4619      	mov	r1, r3
 801f390:	9305      	str	r3, [sp, #20]
 801f392:	4640      	mov	r0, r8
 801f394:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f398:	3a30      	subs	r2, #48	; 0x30
 801f39a:	2a09      	cmp	r2, #9
 801f39c:	d903      	bls.n	801f3a6 <_vfiprintf_r+0x1ca>
 801f39e:	2b00      	cmp	r3, #0
 801f3a0:	d0c3      	beq.n	801f32a <_vfiprintf_r+0x14e>
 801f3a2:	9105      	str	r1, [sp, #20]
 801f3a4:	e7c1      	b.n	801f32a <_vfiprintf_r+0x14e>
 801f3a6:	fb05 2101 	mla	r1, r5, r1, r2
 801f3aa:	2301      	movs	r3, #1
 801f3ac:	4680      	mov	r8, r0
 801f3ae:	e7f0      	b.n	801f392 <_vfiprintf_r+0x1b6>
 801f3b0:	ab03      	add	r3, sp, #12
 801f3b2:	4622      	mov	r2, r4
 801f3b4:	a904      	add	r1, sp, #16
 801f3b6:	4630      	mov	r0, r6
 801f3b8:	9300      	str	r3, [sp, #0]
 801f3ba:	4b12      	ldr	r3, [pc, #72]	; (801f404 <_vfiprintf_r+0x228>)
 801f3bc:	f000 f8b8 	bl	801f530 <_printf_float>
 801f3c0:	f1b0 3fff 	cmp.w	r0, #4294967295
 801f3c4:	4681      	mov	r9, r0
 801f3c6:	d1d5      	bne.n	801f374 <_vfiprintf_r+0x198>
 801f3c8:	89a3      	ldrh	r3, [r4, #12]
 801f3ca:	065b      	lsls	r3, r3, #25
 801f3cc:	f53f af7e 	bmi.w	801f2cc <_vfiprintf_r+0xf0>
 801f3d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f3d2:	e77d      	b.n	801f2d0 <_vfiprintf_r+0xf4>
 801f3d4:	ab03      	add	r3, sp, #12
 801f3d6:	4622      	mov	r2, r4
 801f3d8:	a904      	add	r1, sp, #16
 801f3da:	4630      	mov	r0, r6
 801f3dc:	9300      	str	r3, [sp, #0]
 801f3de:	4b09      	ldr	r3, [pc, #36]	; (801f404 <_vfiprintf_r+0x228>)
 801f3e0:	f000 fb5e 	bl	801faa0 <_printf_i>
 801f3e4:	e7ec      	b.n	801f3c0 <_vfiprintf_r+0x1e4>
 801f3e6:	bf00      	nop
 801f3e8:	08026104 	.word	0x08026104
 801f3ec:	08026090 	.word	0x08026090
 801f3f0:	08026124 	.word	0x08026124
 801f3f4:	080260e4 	.word	0x080260e4
 801f3f8:	08026096 	.word	0x08026096
 801f3fc:	0802609a 	.word	0x0802609a
 801f400:	0801f531 	.word	0x0801f531
 801f404:	0801f1b7 	.word	0x0801f1b7

0801f408 <__cvt>:
 801f408:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f40c:	ec55 4b10 	vmov	r4, r5, d0
 801f410:	2d00      	cmp	r5, #0
 801f412:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801f414:	460e      	mov	r6, r1
 801f416:	4691      	mov	r9, r2
 801f418:	4619      	mov	r1, r3
 801f41a:	bfb8      	it	lt
 801f41c:	4622      	movlt	r2, r4
 801f41e:	462b      	mov	r3, r5
 801f420:	f027 0720 	bic.w	r7, r7, #32
 801f424:	bfb6      	itet	lt
 801f426:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801f42a:	2300      	movge	r3, #0
 801f42c:	4614      	movlt	r4, r2
 801f42e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801f432:	bfbc      	itt	lt
 801f434:	461d      	movlt	r5, r3
 801f436:	232d      	movlt	r3, #45	; 0x2d
 801f438:	2f46      	cmp	r7, #70	; 0x46
 801f43a:	700b      	strb	r3, [r1, #0]
 801f43c:	d004      	beq.n	801f448 <__cvt+0x40>
 801f43e:	2f45      	cmp	r7, #69	; 0x45
 801f440:	d100      	bne.n	801f444 <__cvt+0x3c>
 801f442:	3601      	adds	r6, #1
 801f444:	2102      	movs	r1, #2
 801f446:	e000      	b.n	801f44a <__cvt+0x42>
 801f448:	2103      	movs	r1, #3
 801f44a:	ab03      	add	r3, sp, #12
 801f44c:	4632      	mov	r2, r6
 801f44e:	9301      	str	r3, [sp, #4]
 801f450:	ab02      	add	r3, sp, #8
 801f452:	ec45 4b10 	vmov	d0, r4, r5
 801f456:	9300      	str	r3, [sp, #0]
 801f458:	4653      	mov	r3, sl
 801f45a:	f000 fe5d 	bl	8020118 <_dtoa_r>
 801f45e:	2f47      	cmp	r7, #71	; 0x47
 801f460:	4680      	mov	r8, r0
 801f462:	d102      	bne.n	801f46a <__cvt+0x62>
 801f464:	f019 0f01 	tst.w	r9, #1
 801f468:	d026      	beq.n	801f4b8 <__cvt+0xb0>
 801f46a:	2f46      	cmp	r7, #70	; 0x46
 801f46c:	eb08 0906 	add.w	r9, r8, r6
 801f470:	d111      	bne.n	801f496 <__cvt+0x8e>
 801f472:	f898 3000 	ldrb.w	r3, [r8]
 801f476:	2b30      	cmp	r3, #48	; 0x30
 801f478:	d10a      	bne.n	801f490 <__cvt+0x88>
 801f47a:	2200      	movs	r2, #0
 801f47c:	2300      	movs	r3, #0
 801f47e:	4620      	mov	r0, r4
 801f480:	4629      	mov	r1, r5
 801f482:	f7e1 fb0f 	bl	8000aa4 <__aeabi_dcmpeq>
 801f486:	b918      	cbnz	r0, 801f490 <__cvt+0x88>
 801f488:	f1c6 0601 	rsb	r6, r6, #1
 801f48c:	f8ca 6000 	str.w	r6, [sl]
 801f490:	f8da 3000 	ldr.w	r3, [sl]
 801f494:	4499      	add	r9, r3
 801f496:	2200      	movs	r2, #0
 801f498:	2300      	movs	r3, #0
 801f49a:	4620      	mov	r0, r4
 801f49c:	4629      	mov	r1, r5
 801f49e:	f7e1 fb01 	bl	8000aa4 <__aeabi_dcmpeq>
 801f4a2:	b938      	cbnz	r0, 801f4b4 <__cvt+0xac>
 801f4a4:	2230      	movs	r2, #48	; 0x30
 801f4a6:	9b03      	ldr	r3, [sp, #12]
 801f4a8:	454b      	cmp	r3, r9
 801f4aa:	d205      	bcs.n	801f4b8 <__cvt+0xb0>
 801f4ac:	1c59      	adds	r1, r3, #1
 801f4ae:	9103      	str	r1, [sp, #12]
 801f4b0:	701a      	strb	r2, [r3, #0]
 801f4b2:	e7f8      	b.n	801f4a6 <__cvt+0x9e>
 801f4b4:	f8cd 900c 	str.w	r9, [sp, #12]
 801f4b8:	9b03      	ldr	r3, [sp, #12]
 801f4ba:	4640      	mov	r0, r8
 801f4bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f4be:	eba3 0308 	sub.w	r3, r3, r8
 801f4c2:	6013      	str	r3, [r2, #0]
 801f4c4:	b004      	add	sp, #16
 801f4c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801f4ca <__exponent>:
 801f4ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f4cc:	2900      	cmp	r1, #0
 801f4ce:	4604      	mov	r4, r0
 801f4d0:	bfba      	itte	lt
 801f4d2:	4249      	neglt	r1, r1
 801f4d4:	232d      	movlt	r3, #45	; 0x2d
 801f4d6:	232b      	movge	r3, #43	; 0x2b
 801f4d8:	f804 2b02 	strb.w	r2, [r4], #2
 801f4dc:	2909      	cmp	r1, #9
 801f4de:	7043      	strb	r3, [r0, #1]
 801f4e0:	dd20      	ble.n	801f524 <__exponent+0x5a>
 801f4e2:	f10d 0307 	add.w	r3, sp, #7
 801f4e6:	260a      	movs	r6, #10
 801f4e8:	461f      	mov	r7, r3
 801f4ea:	1e5a      	subs	r2, r3, #1
 801f4ec:	fb91 f5f6 	sdiv	r5, r1, r6
 801f4f0:	fb06 1115 	mls	r1, r6, r5, r1
 801f4f4:	2d09      	cmp	r5, #9
 801f4f6:	f101 0130 	add.w	r1, r1, #48	; 0x30
 801f4fa:	f803 1c01 	strb.w	r1, [r3, #-1]
 801f4fe:	4629      	mov	r1, r5
 801f500:	dc09      	bgt.n	801f516 <__exponent+0x4c>
 801f502:	3130      	adds	r1, #48	; 0x30
 801f504:	3b02      	subs	r3, #2
 801f506:	f802 1c01 	strb.w	r1, [r2, #-1]
 801f50a:	42bb      	cmp	r3, r7
 801f50c:	4622      	mov	r2, r4
 801f50e:	d304      	bcc.n	801f51a <__exponent+0x50>
 801f510:	1a10      	subs	r0, r2, r0
 801f512:	b003      	add	sp, #12
 801f514:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f516:	4613      	mov	r3, r2
 801f518:	e7e7      	b.n	801f4ea <__exponent+0x20>
 801f51a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f51e:	f804 2b01 	strb.w	r2, [r4], #1
 801f522:	e7f2      	b.n	801f50a <__exponent+0x40>
 801f524:	2330      	movs	r3, #48	; 0x30
 801f526:	1d02      	adds	r2, r0, #4
 801f528:	4419      	add	r1, r3
 801f52a:	7083      	strb	r3, [r0, #2]
 801f52c:	70c1      	strb	r1, [r0, #3]
 801f52e:	e7ef      	b.n	801f510 <__exponent+0x46>

0801f530 <_printf_float>:
 801f530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f534:	b08d      	sub	sp, #52	; 0x34
 801f536:	460c      	mov	r4, r1
 801f538:	4616      	mov	r6, r2
 801f53a:	461f      	mov	r7, r3
 801f53c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801f540:	4605      	mov	r5, r0
 801f542:	f001 fd15 	bl	8020f70 <_localeconv_r>
 801f546:	6803      	ldr	r3, [r0, #0]
 801f548:	4618      	mov	r0, r3
 801f54a:	9304      	str	r3, [sp, #16]
 801f54c:	f7e0 fe7e 	bl	800024c <strlen>
 801f550:	2300      	movs	r3, #0
 801f552:	9005      	str	r0, [sp, #20]
 801f554:	930a      	str	r3, [sp, #40]	; 0x28
 801f556:	f8d8 3000 	ldr.w	r3, [r8]
 801f55a:	f894 a018 	ldrb.w	sl, [r4, #24]
 801f55e:	3307      	adds	r3, #7
 801f560:	f8d4 b000 	ldr.w	fp, [r4]
 801f564:	f023 0307 	bic.w	r3, r3, #7
 801f568:	f103 0208 	add.w	r2, r3, #8
 801f56c:	f8c8 2000 	str.w	r2, [r8]
 801f570:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f574:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801f578:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801f57c:	f04f 32ff 	mov.w	r2, #4294967295
 801f580:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801f584:	f8cd 8018 	str.w	r8, [sp, #24]
 801f588:	9307      	str	r3, [sp, #28]
 801f58a:	4ba7      	ldr	r3, [pc, #668]	; (801f828 <_printf_float+0x2f8>)
 801f58c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801f590:	f7e1 faba 	bl	8000b08 <__aeabi_dcmpun>
 801f594:	bb70      	cbnz	r0, 801f5f4 <_printf_float+0xc4>
 801f596:	f04f 32ff 	mov.w	r2, #4294967295
 801f59a:	4ba3      	ldr	r3, [pc, #652]	; (801f828 <_printf_float+0x2f8>)
 801f59c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801f5a0:	f7e1 fa94 	bl	8000acc <__aeabi_dcmple>
 801f5a4:	bb30      	cbnz	r0, 801f5f4 <_printf_float+0xc4>
 801f5a6:	2200      	movs	r2, #0
 801f5a8:	2300      	movs	r3, #0
 801f5aa:	4640      	mov	r0, r8
 801f5ac:	4649      	mov	r1, r9
 801f5ae:	f7e1 fa83 	bl	8000ab8 <__aeabi_dcmplt>
 801f5b2:	b110      	cbz	r0, 801f5ba <_printf_float+0x8a>
 801f5b4:	232d      	movs	r3, #45	; 0x2d
 801f5b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f5ba:	4a9c      	ldr	r2, [pc, #624]	; (801f82c <_printf_float+0x2fc>)
 801f5bc:	4b9c      	ldr	r3, [pc, #624]	; (801f830 <_printf_float+0x300>)
 801f5be:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801f5c2:	bf8c      	ite	hi
 801f5c4:	4690      	movhi	r8, r2
 801f5c6:	4698      	movls	r8, r3
 801f5c8:	f04f 0900 	mov.w	r9, #0
 801f5cc:	2303      	movs	r3, #3
 801f5ce:	f02b 0204 	bic.w	r2, fp, #4
 801f5d2:	6123      	str	r3, [r4, #16]
 801f5d4:	6022      	str	r2, [r4, #0]
 801f5d6:	9700      	str	r7, [sp, #0]
 801f5d8:	4633      	mov	r3, r6
 801f5da:	aa0b      	add	r2, sp, #44	; 0x2c
 801f5dc:	4621      	mov	r1, r4
 801f5de:	4628      	mov	r0, r5
 801f5e0:	f000 f9e6 	bl	801f9b0 <_printf_common>
 801f5e4:	3001      	adds	r0, #1
 801f5e6:	f040 808d 	bne.w	801f704 <_printf_float+0x1d4>
 801f5ea:	f04f 30ff 	mov.w	r0, #4294967295
 801f5ee:	b00d      	add	sp, #52	; 0x34
 801f5f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f5f4:	4642      	mov	r2, r8
 801f5f6:	464b      	mov	r3, r9
 801f5f8:	4640      	mov	r0, r8
 801f5fa:	4649      	mov	r1, r9
 801f5fc:	f7e1 fa84 	bl	8000b08 <__aeabi_dcmpun>
 801f600:	b110      	cbz	r0, 801f608 <_printf_float+0xd8>
 801f602:	4a8c      	ldr	r2, [pc, #560]	; (801f834 <_printf_float+0x304>)
 801f604:	4b8c      	ldr	r3, [pc, #560]	; (801f838 <_printf_float+0x308>)
 801f606:	e7da      	b.n	801f5be <_printf_float+0x8e>
 801f608:	6861      	ldr	r1, [r4, #4]
 801f60a:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 801f60e:	a80a      	add	r0, sp, #40	; 0x28
 801f610:	1c4b      	adds	r3, r1, #1
 801f612:	d13e      	bne.n	801f692 <_printf_float+0x162>
 801f614:	2306      	movs	r3, #6
 801f616:	6063      	str	r3, [r4, #4]
 801f618:	2300      	movs	r3, #0
 801f61a:	6022      	str	r2, [r4, #0]
 801f61c:	f8cd a004 	str.w	sl, [sp, #4]
 801f620:	6861      	ldr	r1, [r4, #4]
 801f622:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801f626:	ab09      	add	r3, sp, #36	; 0x24
 801f628:	4628      	mov	r0, r5
 801f62a:	9300      	str	r3, [sp, #0]
 801f62c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801f630:	ec49 8b10 	vmov	d0, r8, r9
 801f634:	f7ff fee8 	bl	801f408 <__cvt>
 801f638:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 801f63c:	4680      	mov	r8, r0
 801f63e:	2b47      	cmp	r3, #71	; 0x47
 801f640:	d109      	bne.n	801f656 <_printf_float+0x126>
 801f642:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f644:	1cd8      	adds	r0, r3, #3
 801f646:	db02      	blt.n	801f64e <_printf_float+0x11e>
 801f648:	6862      	ldr	r2, [r4, #4]
 801f64a:	4293      	cmp	r3, r2
 801f64c:	dd47      	ble.n	801f6de <_printf_float+0x1ae>
 801f64e:	f1aa 0a02 	sub.w	sl, sl, #2
 801f652:	fa5f fa8a 	uxtb.w	sl, sl
 801f656:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801f65a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f65c:	d824      	bhi.n	801f6a8 <_printf_float+0x178>
 801f65e:	3901      	subs	r1, #1
 801f660:	4652      	mov	r2, sl
 801f662:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801f666:	9109      	str	r1, [sp, #36]	; 0x24
 801f668:	f7ff ff2f 	bl	801f4ca <__exponent>
 801f66c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f66e:	4681      	mov	r9, r0
 801f670:	1813      	adds	r3, r2, r0
 801f672:	2a01      	cmp	r2, #1
 801f674:	6123      	str	r3, [r4, #16]
 801f676:	dc02      	bgt.n	801f67e <_printf_float+0x14e>
 801f678:	6822      	ldr	r2, [r4, #0]
 801f67a:	07d1      	lsls	r1, r2, #31
 801f67c:	d501      	bpl.n	801f682 <_printf_float+0x152>
 801f67e:	3301      	adds	r3, #1
 801f680:	6123      	str	r3, [r4, #16]
 801f682:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801f686:	2b00      	cmp	r3, #0
 801f688:	d0a5      	beq.n	801f5d6 <_printf_float+0xa6>
 801f68a:	232d      	movs	r3, #45	; 0x2d
 801f68c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f690:	e7a1      	b.n	801f5d6 <_printf_float+0xa6>
 801f692:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 801f696:	f000 8177 	beq.w	801f988 <_printf_float+0x458>
 801f69a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801f69e:	d1bb      	bne.n	801f618 <_printf_float+0xe8>
 801f6a0:	2900      	cmp	r1, #0
 801f6a2:	d1b9      	bne.n	801f618 <_printf_float+0xe8>
 801f6a4:	2301      	movs	r3, #1
 801f6a6:	e7b6      	b.n	801f616 <_printf_float+0xe6>
 801f6a8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 801f6ac:	d119      	bne.n	801f6e2 <_printf_float+0x1b2>
 801f6ae:	2900      	cmp	r1, #0
 801f6b0:	6863      	ldr	r3, [r4, #4]
 801f6b2:	dd0c      	ble.n	801f6ce <_printf_float+0x19e>
 801f6b4:	6121      	str	r1, [r4, #16]
 801f6b6:	b913      	cbnz	r3, 801f6be <_printf_float+0x18e>
 801f6b8:	6822      	ldr	r2, [r4, #0]
 801f6ba:	07d2      	lsls	r2, r2, #31
 801f6bc:	d502      	bpl.n	801f6c4 <_printf_float+0x194>
 801f6be:	3301      	adds	r3, #1
 801f6c0:	440b      	add	r3, r1
 801f6c2:	6123      	str	r3, [r4, #16]
 801f6c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f6c6:	f04f 0900 	mov.w	r9, #0
 801f6ca:	65a3      	str	r3, [r4, #88]	; 0x58
 801f6cc:	e7d9      	b.n	801f682 <_printf_float+0x152>
 801f6ce:	b913      	cbnz	r3, 801f6d6 <_printf_float+0x1a6>
 801f6d0:	6822      	ldr	r2, [r4, #0]
 801f6d2:	07d0      	lsls	r0, r2, #31
 801f6d4:	d501      	bpl.n	801f6da <_printf_float+0x1aa>
 801f6d6:	3302      	adds	r3, #2
 801f6d8:	e7f3      	b.n	801f6c2 <_printf_float+0x192>
 801f6da:	2301      	movs	r3, #1
 801f6dc:	e7f1      	b.n	801f6c2 <_printf_float+0x192>
 801f6de:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801f6e2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801f6e6:	4293      	cmp	r3, r2
 801f6e8:	db05      	blt.n	801f6f6 <_printf_float+0x1c6>
 801f6ea:	6822      	ldr	r2, [r4, #0]
 801f6ec:	6123      	str	r3, [r4, #16]
 801f6ee:	07d1      	lsls	r1, r2, #31
 801f6f0:	d5e8      	bpl.n	801f6c4 <_printf_float+0x194>
 801f6f2:	3301      	adds	r3, #1
 801f6f4:	e7e5      	b.n	801f6c2 <_printf_float+0x192>
 801f6f6:	2b00      	cmp	r3, #0
 801f6f8:	bfd4      	ite	le
 801f6fa:	f1c3 0302 	rsble	r3, r3, #2
 801f6fe:	2301      	movgt	r3, #1
 801f700:	4413      	add	r3, r2
 801f702:	e7de      	b.n	801f6c2 <_printf_float+0x192>
 801f704:	6823      	ldr	r3, [r4, #0]
 801f706:	055a      	lsls	r2, r3, #21
 801f708:	d407      	bmi.n	801f71a <_printf_float+0x1ea>
 801f70a:	6923      	ldr	r3, [r4, #16]
 801f70c:	4642      	mov	r2, r8
 801f70e:	4631      	mov	r1, r6
 801f710:	4628      	mov	r0, r5
 801f712:	47b8      	blx	r7
 801f714:	3001      	adds	r0, #1
 801f716:	d12b      	bne.n	801f770 <_printf_float+0x240>
 801f718:	e767      	b.n	801f5ea <_printf_float+0xba>
 801f71a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801f71e:	f240 80dc 	bls.w	801f8da <_printf_float+0x3aa>
 801f722:	2200      	movs	r2, #0
 801f724:	2300      	movs	r3, #0
 801f726:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801f72a:	f7e1 f9bb 	bl	8000aa4 <__aeabi_dcmpeq>
 801f72e:	2800      	cmp	r0, #0
 801f730:	d033      	beq.n	801f79a <_printf_float+0x26a>
 801f732:	2301      	movs	r3, #1
 801f734:	4a41      	ldr	r2, [pc, #260]	; (801f83c <_printf_float+0x30c>)
 801f736:	4631      	mov	r1, r6
 801f738:	4628      	mov	r0, r5
 801f73a:	47b8      	blx	r7
 801f73c:	3001      	adds	r0, #1
 801f73e:	f43f af54 	beq.w	801f5ea <_printf_float+0xba>
 801f742:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f746:	429a      	cmp	r2, r3
 801f748:	db02      	blt.n	801f750 <_printf_float+0x220>
 801f74a:	6823      	ldr	r3, [r4, #0]
 801f74c:	07d8      	lsls	r0, r3, #31
 801f74e:	d50f      	bpl.n	801f770 <_printf_float+0x240>
 801f750:	4631      	mov	r1, r6
 801f752:	4628      	mov	r0, r5
 801f754:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801f758:	47b8      	blx	r7
 801f75a:	3001      	adds	r0, #1
 801f75c:	f43f af45 	beq.w	801f5ea <_printf_float+0xba>
 801f760:	f04f 0800 	mov.w	r8, #0
 801f764:	f104 091a 	add.w	r9, r4, #26
 801f768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f76a:	3b01      	subs	r3, #1
 801f76c:	4543      	cmp	r3, r8
 801f76e:	dc09      	bgt.n	801f784 <_printf_float+0x254>
 801f770:	6823      	ldr	r3, [r4, #0]
 801f772:	079b      	lsls	r3, r3, #30
 801f774:	f100 8103 	bmi.w	801f97e <_printf_float+0x44e>
 801f778:	68e0      	ldr	r0, [r4, #12]
 801f77a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f77c:	4298      	cmp	r0, r3
 801f77e:	bfb8      	it	lt
 801f780:	4618      	movlt	r0, r3
 801f782:	e734      	b.n	801f5ee <_printf_float+0xbe>
 801f784:	2301      	movs	r3, #1
 801f786:	464a      	mov	r2, r9
 801f788:	4631      	mov	r1, r6
 801f78a:	4628      	mov	r0, r5
 801f78c:	47b8      	blx	r7
 801f78e:	3001      	adds	r0, #1
 801f790:	f43f af2b 	beq.w	801f5ea <_printf_float+0xba>
 801f794:	f108 0801 	add.w	r8, r8, #1
 801f798:	e7e6      	b.n	801f768 <_printf_float+0x238>
 801f79a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f79c:	2b00      	cmp	r3, #0
 801f79e:	dc2b      	bgt.n	801f7f8 <_printf_float+0x2c8>
 801f7a0:	2301      	movs	r3, #1
 801f7a2:	4a26      	ldr	r2, [pc, #152]	; (801f83c <_printf_float+0x30c>)
 801f7a4:	4631      	mov	r1, r6
 801f7a6:	4628      	mov	r0, r5
 801f7a8:	47b8      	blx	r7
 801f7aa:	3001      	adds	r0, #1
 801f7ac:	f43f af1d 	beq.w	801f5ea <_printf_float+0xba>
 801f7b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f7b2:	b923      	cbnz	r3, 801f7be <_printf_float+0x28e>
 801f7b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f7b6:	b913      	cbnz	r3, 801f7be <_printf_float+0x28e>
 801f7b8:	6823      	ldr	r3, [r4, #0]
 801f7ba:	07d9      	lsls	r1, r3, #31
 801f7bc:	d5d8      	bpl.n	801f770 <_printf_float+0x240>
 801f7be:	4631      	mov	r1, r6
 801f7c0:	4628      	mov	r0, r5
 801f7c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801f7c6:	47b8      	blx	r7
 801f7c8:	3001      	adds	r0, #1
 801f7ca:	f43f af0e 	beq.w	801f5ea <_printf_float+0xba>
 801f7ce:	f04f 0900 	mov.w	r9, #0
 801f7d2:	f104 0a1a 	add.w	sl, r4, #26
 801f7d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f7d8:	425b      	negs	r3, r3
 801f7da:	454b      	cmp	r3, r9
 801f7dc:	dc01      	bgt.n	801f7e2 <_printf_float+0x2b2>
 801f7de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f7e0:	e794      	b.n	801f70c <_printf_float+0x1dc>
 801f7e2:	2301      	movs	r3, #1
 801f7e4:	4652      	mov	r2, sl
 801f7e6:	4631      	mov	r1, r6
 801f7e8:	4628      	mov	r0, r5
 801f7ea:	47b8      	blx	r7
 801f7ec:	3001      	adds	r0, #1
 801f7ee:	f43f aefc 	beq.w	801f5ea <_printf_float+0xba>
 801f7f2:	f109 0901 	add.w	r9, r9, #1
 801f7f6:	e7ee      	b.n	801f7d6 <_printf_float+0x2a6>
 801f7f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f7fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801f7fc:	429a      	cmp	r2, r3
 801f7fe:	bfa8      	it	ge
 801f800:	461a      	movge	r2, r3
 801f802:	2a00      	cmp	r2, #0
 801f804:	4691      	mov	r9, r2
 801f806:	dd07      	ble.n	801f818 <_printf_float+0x2e8>
 801f808:	4613      	mov	r3, r2
 801f80a:	4631      	mov	r1, r6
 801f80c:	4642      	mov	r2, r8
 801f80e:	4628      	mov	r0, r5
 801f810:	47b8      	blx	r7
 801f812:	3001      	adds	r0, #1
 801f814:	f43f aee9 	beq.w	801f5ea <_printf_float+0xba>
 801f818:	f104 031a 	add.w	r3, r4, #26
 801f81c:	f04f 0b00 	mov.w	fp, #0
 801f820:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801f824:	9306      	str	r3, [sp, #24]
 801f826:	e015      	b.n	801f854 <_printf_float+0x324>
 801f828:	7fefffff 	.word	0x7fefffff
 801f82c:	080260a5 	.word	0x080260a5
 801f830:	080260a1 	.word	0x080260a1
 801f834:	080260ad 	.word	0x080260ad
 801f838:	080260a9 	.word	0x080260a9
 801f83c:	080260b1 	.word	0x080260b1
 801f840:	2301      	movs	r3, #1
 801f842:	9a06      	ldr	r2, [sp, #24]
 801f844:	4631      	mov	r1, r6
 801f846:	4628      	mov	r0, r5
 801f848:	47b8      	blx	r7
 801f84a:	3001      	adds	r0, #1
 801f84c:	f43f aecd 	beq.w	801f5ea <_printf_float+0xba>
 801f850:	f10b 0b01 	add.w	fp, fp, #1
 801f854:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 801f858:	ebaa 0309 	sub.w	r3, sl, r9
 801f85c:	455b      	cmp	r3, fp
 801f85e:	dcef      	bgt.n	801f840 <_printf_float+0x310>
 801f860:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f864:	44d0      	add	r8, sl
 801f866:	429a      	cmp	r2, r3
 801f868:	db15      	blt.n	801f896 <_printf_float+0x366>
 801f86a:	6823      	ldr	r3, [r4, #0]
 801f86c:	07da      	lsls	r2, r3, #31
 801f86e:	d412      	bmi.n	801f896 <_printf_float+0x366>
 801f870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f872:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f874:	eba3 020a 	sub.w	r2, r3, sl
 801f878:	eba3 0a01 	sub.w	sl, r3, r1
 801f87c:	4592      	cmp	sl, r2
 801f87e:	bfa8      	it	ge
 801f880:	4692      	movge	sl, r2
 801f882:	f1ba 0f00 	cmp.w	sl, #0
 801f886:	dc0e      	bgt.n	801f8a6 <_printf_float+0x376>
 801f888:	f04f 0800 	mov.w	r8, #0
 801f88c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801f890:	f104 091a 	add.w	r9, r4, #26
 801f894:	e019      	b.n	801f8ca <_printf_float+0x39a>
 801f896:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801f89a:	4631      	mov	r1, r6
 801f89c:	4628      	mov	r0, r5
 801f89e:	47b8      	blx	r7
 801f8a0:	3001      	adds	r0, #1
 801f8a2:	d1e5      	bne.n	801f870 <_printf_float+0x340>
 801f8a4:	e6a1      	b.n	801f5ea <_printf_float+0xba>
 801f8a6:	4653      	mov	r3, sl
 801f8a8:	4642      	mov	r2, r8
 801f8aa:	4631      	mov	r1, r6
 801f8ac:	4628      	mov	r0, r5
 801f8ae:	47b8      	blx	r7
 801f8b0:	3001      	adds	r0, #1
 801f8b2:	d1e9      	bne.n	801f888 <_printf_float+0x358>
 801f8b4:	e699      	b.n	801f5ea <_printf_float+0xba>
 801f8b6:	2301      	movs	r3, #1
 801f8b8:	464a      	mov	r2, r9
 801f8ba:	4631      	mov	r1, r6
 801f8bc:	4628      	mov	r0, r5
 801f8be:	47b8      	blx	r7
 801f8c0:	3001      	adds	r0, #1
 801f8c2:	f43f ae92 	beq.w	801f5ea <_printf_float+0xba>
 801f8c6:	f108 0801 	add.w	r8, r8, #1
 801f8ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f8ce:	1a9b      	subs	r3, r3, r2
 801f8d0:	eba3 030a 	sub.w	r3, r3, sl
 801f8d4:	4543      	cmp	r3, r8
 801f8d6:	dcee      	bgt.n	801f8b6 <_printf_float+0x386>
 801f8d8:	e74a      	b.n	801f770 <_printf_float+0x240>
 801f8da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f8dc:	2a01      	cmp	r2, #1
 801f8de:	dc01      	bgt.n	801f8e4 <_printf_float+0x3b4>
 801f8e0:	07db      	lsls	r3, r3, #31
 801f8e2:	d53a      	bpl.n	801f95a <_printf_float+0x42a>
 801f8e4:	2301      	movs	r3, #1
 801f8e6:	4642      	mov	r2, r8
 801f8e8:	4631      	mov	r1, r6
 801f8ea:	4628      	mov	r0, r5
 801f8ec:	47b8      	blx	r7
 801f8ee:	3001      	adds	r0, #1
 801f8f0:	f43f ae7b 	beq.w	801f5ea <_printf_float+0xba>
 801f8f4:	4631      	mov	r1, r6
 801f8f6:	4628      	mov	r0, r5
 801f8f8:	f108 0801 	add.w	r8, r8, #1
 801f8fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801f900:	47b8      	blx	r7
 801f902:	3001      	adds	r0, #1
 801f904:	f43f ae71 	beq.w	801f5ea <_printf_float+0xba>
 801f908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f90a:	2200      	movs	r2, #0
 801f90c:	f103 3aff 	add.w	sl, r3, #4294967295
 801f910:	2300      	movs	r3, #0
 801f912:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801f916:	f7e1 f8c5 	bl	8000aa4 <__aeabi_dcmpeq>
 801f91a:	b9c8      	cbnz	r0, 801f950 <_printf_float+0x420>
 801f91c:	4653      	mov	r3, sl
 801f91e:	4642      	mov	r2, r8
 801f920:	4631      	mov	r1, r6
 801f922:	4628      	mov	r0, r5
 801f924:	47b8      	blx	r7
 801f926:	3001      	adds	r0, #1
 801f928:	d10e      	bne.n	801f948 <_printf_float+0x418>
 801f92a:	e65e      	b.n	801f5ea <_printf_float+0xba>
 801f92c:	2301      	movs	r3, #1
 801f92e:	4652      	mov	r2, sl
 801f930:	4631      	mov	r1, r6
 801f932:	4628      	mov	r0, r5
 801f934:	47b8      	blx	r7
 801f936:	3001      	adds	r0, #1
 801f938:	f43f ae57 	beq.w	801f5ea <_printf_float+0xba>
 801f93c:	f108 0801 	add.w	r8, r8, #1
 801f940:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f942:	3b01      	subs	r3, #1
 801f944:	4543      	cmp	r3, r8
 801f946:	dcf1      	bgt.n	801f92c <_printf_float+0x3fc>
 801f948:	464b      	mov	r3, r9
 801f94a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801f94e:	e6de      	b.n	801f70e <_printf_float+0x1de>
 801f950:	f04f 0800 	mov.w	r8, #0
 801f954:	f104 0a1a 	add.w	sl, r4, #26
 801f958:	e7f2      	b.n	801f940 <_printf_float+0x410>
 801f95a:	2301      	movs	r3, #1
 801f95c:	e7df      	b.n	801f91e <_printf_float+0x3ee>
 801f95e:	2301      	movs	r3, #1
 801f960:	464a      	mov	r2, r9
 801f962:	4631      	mov	r1, r6
 801f964:	4628      	mov	r0, r5
 801f966:	47b8      	blx	r7
 801f968:	3001      	adds	r0, #1
 801f96a:	f43f ae3e 	beq.w	801f5ea <_printf_float+0xba>
 801f96e:	f108 0801 	add.w	r8, r8, #1
 801f972:	68e3      	ldr	r3, [r4, #12]
 801f974:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f976:	1a9b      	subs	r3, r3, r2
 801f978:	4543      	cmp	r3, r8
 801f97a:	dcf0      	bgt.n	801f95e <_printf_float+0x42e>
 801f97c:	e6fc      	b.n	801f778 <_printf_float+0x248>
 801f97e:	f04f 0800 	mov.w	r8, #0
 801f982:	f104 0919 	add.w	r9, r4, #25
 801f986:	e7f4      	b.n	801f972 <_printf_float+0x442>
 801f988:	2900      	cmp	r1, #0
 801f98a:	f43f ae8b 	beq.w	801f6a4 <_printf_float+0x174>
 801f98e:	2300      	movs	r3, #0
 801f990:	6022      	str	r2, [r4, #0]
 801f992:	f8cd a004 	str.w	sl, [sp, #4]
 801f996:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801f99a:	ab09      	add	r3, sp, #36	; 0x24
 801f99c:	4628      	mov	r0, r5
 801f99e:	9300      	str	r3, [sp, #0]
 801f9a0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801f9a4:	ec49 8b10 	vmov	d0, r8, r9
 801f9a8:	f7ff fd2e 	bl	801f408 <__cvt>
 801f9ac:	4680      	mov	r8, r0
 801f9ae:	e648      	b.n	801f642 <_printf_float+0x112>

0801f9b0 <_printf_common>:
 801f9b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f9b4:	4691      	mov	r9, r2
 801f9b6:	461f      	mov	r7, r3
 801f9b8:	688a      	ldr	r2, [r1, #8]
 801f9ba:	4606      	mov	r6, r0
 801f9bc:	690b      	ldr	r3, [r1, #16]
 801f9be:	460c      	mov	r4, r1
 801f9c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801f9c4:	4293      	cmp	r3, r2
 801f9c6:	bfb8      	it	lt
 801f9c8:	4613      	movlt	r3, r2
 801f9ca:	f8c9 3000 	str.w	r3, [r9]
 801f9ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801f9d2:	b112      	cbz	r2, 801f9da <_printf_common+0x2a>
 801f9d4:	3301      	adds	r3, #1
 801f9d6:	f8c9 3000 	str.w	r3, [r9]
 801f9da:	6823      	ldr	r3, [r4, #0]
 801f9dc:	0699      	lsls	r1, r3, #26
 801f9de:	bf42      	ittt	mi
 801f9e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 801f9e4:	3302      	addmi	r3, #2
 801f9e6:	f8c9 3000 	strmi.w	r3, [r9]
 801f9ea:	6825      	ldr	r5, [r4, #0]
 801f9ec:	f015 0506 	ands.w	r5, r5, #6
 801f9f0:	d107      	bne.n	801fa02 <_printf_common+0x52>
 801f9f2:	f104 0a19 	add.w	sl, r4, #25
 801f9f6:	68e3      	ldr	r3, [r4, #12]
 801f9f8:	f8d9 2000 	ldr.w	r2, [r9]
 801f9fc:	1a9b      	subs	r3, r3, r2
 801f9fe:	42ab      	cmp	r3, r5
 801fa00:	dc2b      	bgt.n	801fa5a <_printf_common+0xaa>
 801fa02:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801fa06:	6822      	ldr	r2, [r4, #0]
 801fa08:	3300      	adds	r3, #0
 801fa0a:	bf18      	it	ne
 801fa0c:	2301      	movne	r3, #1
 801fa0e:	0692      	lsls	r2, r2, #26
 801fa10:	d430      	bmi.n	801fa74 <_printf_common+0xc4>
 801fa12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801fa16:	4639      	mov	r1, r7
 801fa18:	4630      	mov	r0, r6
 801fa1a:	47c0      	blx	r8
 801fa1c:	3001      	adds	r0, #1
 801fa1e:	d023      	beq.n	801fa68 <_printf_common+0xb8>
 801fa20:	6823      	ldr	r3, [r4, #0]
 801fa22:	341a      	adds	r4, #26
 801fa24:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 801fa28:	f003 0306 	and.w	r3, r3, #6
 801fa2c:	f8d9 2000 	ldr.w	r2, [r9]
 801fa30:	f04f 0900 	mov.w	r9, #0
 801fa34:	2b04      	cmp	r3, #4
 801fa36:	f854 3c12 	ldr.w	r3, [r4, #-18]
 801fa3a:	bf08      	it	eq
 801fa3c:	1aad      	subeq	r5, r5, r2
 801fa3e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 801fa42:	bf14      	ite	ne
 801fa44:	2500      	movne	r5, #0
 801fa46:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801fa4a:	4293      	cmp	r3, r2
 801fa4c:	bfc4      	itt	gt
 801fa4e:	1a9b      	subgt	r3, r3, r2
 801fa50:	18ed      	addgt	r5, r5, r3
 801fa52:	454d      	cmp	r5, r9
 801fa54:	d11a      	bne.n	801fa8c <_printf_common+0xdc>
 801fa56:	2000      	movs	r0, #0
 801fa58:	e008      	b.n	801fa6c <_printf_common+0xbc>
 801fa5a:	2301      	movs	r3, #1
 801fa5c:	4652      	mov	r2, sl
 801fa5e:	4639      	mov	r1, r7
 801fa60:	4630      	mov	r0, r6
 801fa62:	47c0      	blx	r8
 801fa64:	3001      	adds	r0, #1
 801fa66:	d103      	bne.n	801fa70 <_printf_common+0xc0>
 801fa68:	f04f 30ff 	mov.w	r0, #4294967295
 801fa6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fa70:	3501      	adds	r5, #1
 801fa72:	e7c0      	b.n	801f9f6 <_printf_common+0x46>
 801fa74:	18e1      	adds	r1, r4, r3
 801fa76:	1c5a      	adds	r2, r3, #1
 801fa78:	2030      	movs	r0, #48	; 0x30
 801fa7a:	3302      	adds	r3, #2
 801fa7c:	4422      	add	r2, r4
 801fa7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801fa82:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801fa86:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801fa8a:	e7c2      	b.n	801fa12 <_printf_common+0x62>
 801fa8c:	2301      	movs	r3, #1
 801fa8e:	4622      	mov	r2, r4
 801fa90:	4639      	mov	r1, r7
 801fa92:	4630      	mov	r0, r6
 801fa94:	47c0      	blx	r8
 801fa96:	3001      	adds	r0, #1
 801fa98:	d0e6      	beq.n	801fa68 <_printf_common+0xb8>
 801fa9a:	f109 0901 	add.w	r9, r9, #1
 801fa9e:	e7d8      	b.n	801fa52 <_printf_common+0xa2>

0801faa0 <_printf_i>:
 801faa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801faa4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801faa8:	460c      	mov	r4, r1
 801faaa:	7e09      	ldrb	r1, [r1, #24]
 801faac:	b085      	sub	sp, #20
 801faae:	4617      	mov	r7, r2
 801fab0:	4606      	mov	r6, r0
 801fab2:	296e      	cmp	r1, #110	; 0x6e
 801fab4:	4698      	mov	r8, r3
 801fab6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801fab8:	f000 80b3 	beq.w	801fc22 <_printf_i+0x182>
 801fabc:	d822      	bhi.n	801fb04 <_printf_i+0x64>
 801fabe:	2963      	cmp	r1, #99	; 0x63
 801fac0:	d036      	beq.n	801fb30 <_printf_i+0x90>
 801fac2:	d80a      	bhi.n	801fada <_printf_i+0x3a>
 801fac4:	2900      	cmp	r1, #0
 801fac6:	f000 80b9 	beq.w	801fc3c <_printf_i+0x19c>
 801faca:	2958      	cmp	r1, #88	; 0x58
 801facc:	f000 8083 	beq.w	801fbd6 <_printf_i+0x136>
 801fad0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801fad4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801fad8:	e032      	b.n	801fb40 <_printf_i+0xa0>
 801fada:	2964      	cmp	r1, #100	; 0x64
 801fadc:	d001      	beq.n	801fae2 <_printf_i+0x42>
 801fade:	2969      	cmp	r1, #105	; 0x69
 801fae0:	d1f6      	bne.n	801fad0 <_printf_i+0x30>
 801fae2:	6820      	ldr	r0, [r4, #0]
 801fae4:	6813      	ldr	r3, [r2, #0]
 801fae6:	0605      	lsls	r5, r0, #24
 801fae8:	f103 0104 	add.w	r1, r3, #4
 801faec:	d52a      	bpl.n	801fb44 <_printf_i+0xa4>
 801faee:	681b      	ldr	r3, [r3, #0]
 801faf0:	6011      	str	r1, [r2, #0]
 801faf2:	2b00      	cmp	r3, #0
 801faf4:	da03      	bge.n	801fafe <_printf_i+0x5e>
 801faf6:	222d      	movs	r2, #45	; 0x2d
 801faf8:	425b      	negs	r3, r3
 801fafa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801fafe:	486f      	ldr	r0, [pc, #444]	; (801fcbc <_printf_i+0x21c>)
 801fb00:	220a      	movs	r2, #10
 801fb02:	e039      	b.n	801fb78 <_printf_i+0xd8>
 801fb04:	2973      	cmp	r1, #115	; 0x73
 801fb06:	f000 809d 	beq.w	801fc44 <_printf_i+0x1a4>
 801fb0a:	d808      	bhi.n	801fb1e <_printf_i+0x7e>
 801fb0c:	296f      	cmp	r1, #111	; 0x6f
 801fb0e:	d020      	beq.n	801fb52 <_printf_i+0xb2>
 801fb10:	2970      	cmp	r1, #112	; 0x70
 801fb12:	d1dd      	bne.n	801fad0 <_printf_i+0x30>
 801fb14:	6823      	ldr	r3, [r4, #0]
 801fb16:	f043 0320 	orr.w	r3, r3, #32
 801fb1a:	6023      	str	r3, [r4, #0]
 801fb1c:	e003      	b.n	801fb26 <_printf_i+0x86>
 801fb1e:	2975      	cmp	r1, #117	; 0x75
 801fb20:	d017      	beq.n	801fb52 <_printf_i+0xb2>
 801fb22:	2978      	cmp	r1, #120	; 0x78
 801fb24:	d1d4      	bne.n	801fad0 <_printf_i+0x30>
 801fb26:	2378      	movs	r3, #120	; 0x78
 801fb28:	4865      	ldr	r0, [pc, #404]	; (801fcc0 <_printf_i+0x220>)
 801fb2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801fb2e:	e055      	b.n	801fbdc <_printf_i+0x13c>
 801fb30:	6813      	ldr	r3, [r2, #0]
 801fb32:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801fb36:	1d19      	adds	r1, r3, #4
 801fb38:	681b      	ldr	r3, [r3, #0]
 801fb3a:	6011      	str	r1, [r2, #0]
 801fb3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801fb40:	2301      	movs	r3, #1
 801fb42:	e08c      	b.n	801fc5e <_printf_i+0x1be>
 801fb44:	681b      	ldr	r3, [r3, #0]
 801fb46:	f010 0f40 	tst.w	r0, #64	; 0x40
 801fb4a:	6011      	str	r1, [r2, #0]
 801fb4c:	bf18      	it	ne
 801fb4e:	b21b      	sxthne	r3, r3
 801fb50:	e7cf      	b.n	801faf2 <_printf_i+0x52>
 801fb52:	6813      	ldr	r3, [r2, #0]
 801fb54:	6825      	ldr	r5, [r4, #0]
 801fb56:	1d18      	adds	r0, r3, #4
 801fb58:	6010      	str	r0, [r2, #0]
 801fb5a:	0628      	lsls	r0, r5, #24
 801fb5c:	d501      	bpl.n	801fb62 <_printf_i+0xc2>
 801fb5e:	681b      	ldr	r3, [r3, #0]
 801fb60:	e002      	b.n	801fb68 <_printf_i+0xc8>
 801fb62:	0668      	lsls	r0, r5, #25
 801fb64:	d5fb      	bpl.n	801fb5e <_printf_i+0xbe>
 801fb66:	881b      	ldrh	r3, [r3, #0]
 801fb68:	296f      	cmp	r1, #111	; 0x6f
 801fb6a:	4854      	ldr	r0, [pc, #336]	; (801fcbc <_printf_i+0x21c>)
 801fb6c:	bf14      	ite	ne
 801fb6e:	220a      	movne	r2, #10
 801fb70:	2208      	moveq	r2, #8
 801fb72:	2100      	movs	r1, #0
 801fb74:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801fb78:	6865      	ldr	r5, [r4, #4]
 801fb7a:	2d00      	cmp	r5, #0
 801fb7c:	60a5      	str	r5, [r4, #8]
 801fb7e:	f2c0 8095 	blt.w	801fcac <_printf_i+0x20c>
 801fb82:	6821      	ldr	r1, [r4, #0]
 801fb84:	f021 0104 	bic.w	r1, r1, #4
 801fb88:	6021      	str	r1, [r4, #0]
 801fb8a:	2b00      	cmp	r3, #0
 801fb8c:	d13d      	bne.n	801fc0a <_printf_i+0x16a>
 801fb8e:	2d00      	cmp	r5, #0
 801fb90:	f040 808e 	bne.w	801fcb0 <_printf_i+0x210>
 801fb94:	4665      	mov	r5, ip
 801fb96:	2a08      	cmp	r2, #8
 801fb98:	d10b      	bne.n	801fbb2 <_printf_i+0x112>
 801fb9a:	6823      	ldr	r3, [r4, #0]
 801fb9c:	07db      	lsls	r3, r3, #31
 801fb9e:	d508      	bpl.n	801fbb2 <_printf_i+0x112>
 801fba0:	6923      	ldr	r3, [r4, #16]
 801fba2:	6862      	ldr	r2, [r4, #4]
 801fba4:	429a      	cmp	r2, r3
 801fba6:	bfde      	ittt	le
 801fba8:	2330      	movle	r3, #48	; 0x30
 801fbaa:	f805 3c01 	strble.w	r3, [r5, #-1]
 801fbae:	f105 35ff 	addle.w	r5, r5, #4294967295
 801fbb2:	ebac 0305 	sub.w	r3, ip, r5
 801fbb6:	6123      	str	r3, [r4, #16]
 801fbb8:	f8cd 8000 	str.w	r8, [sp]
 801fbbc:	463b      	mov	r3, r7
 801fbbe:	aa03      	add	r2, sp, #12
 801fbc0:	4621      	mov	r1, r4
 801fbc2:	4630      	mov	r0, r6
 801fbc4:	f7ff fef4 	bl	801f9b0 <_printf_common>
 801fbc8:	3001      	adds	r0, #1
 801fbca:	d14d      	bne.n	801fc68 <_printf_i+0x1c8>
 801fbcc:	f04f 30ff 	mov.w	r0, #4294967295
 801fbd0:	b005      	add	sp, #20
 801fbd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fbd6:	4839      	ldr	r0, [pc, #228]	; (801fcbc <_printf_i+0x21c>)
 801fbd8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801fbdc:	6813      	ldr	r3, [r2, #0]
 801fbde:	6821      	ldr	r1, [r4, #0]
 801fbe0:	1d1d      	adds	r5, r3, #4
 801fbe2:	681b      	ldr	r3, [r3, #0]
 801fbe4:	6015      	str	r5, [r2, #0]
 801fbe6:	060a      	lsls	r2, r1, #24
 801fbe8:	d50b      	bpl.n	801fc02 <_printf_i+0x162>
 801fbea:	07ca      	lsls	r2, r1, #31
 801fbec:	bf44      	itt	mi
 801fbee:	f041 0120 	orrmi.w	r1, r1, #32
 801fbf2:	6021      	strmi	r1, [r4, #0]
 801fbf4:	b91b      	cbnz	r3, 801fbfe <_printf_i+0x15e>
 801fbf6:	6822      	ldr	r2, [r4, #0]
 801fbf8:	f022 0220 	bic.w	r2, r2, #32
 801fbfc:	6022      	str	r2, [r4, #0]
 801fbfe:	2210      	movs	r2, #16
 801fc00:	e7b7      	b.n	801fb72 <_printf_i+0xd2>
 801fc02:	064d      	lsls	r5, r1, #25
 801fc04:	bf48      	it	mi
 801fc06:	b29b      	uxthmi	r3, r3
 801fc08:	e7ef      	b.n	801fbea <_printf_i+0x14a>
 801fc0a:	4665      	mov	r5, ip
 801fc0c:	fbb3 f1f2 	udiv	r1, r3, r2
 801fc10:	fb02 3311 	mls	r3, r2, r1, r3
 801fc14:	5cc3      	ldrb	r3, [r0, r3]
 801fc16:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801fc1a:	460b      	mov	r3, r1
 801fc1c:	2900      	cmp	r1, #0
 801fc1e:	d1f5      	bne.n	801fc0c <_printf_i+0x16c>
 801fc20:	e7b9      	b.n	801fb96 <_printf_i+0xf6>
 801fc22:	6813      	ldr	r3, [r2, #0]
 801fc24:	6825      	ldr	r5, [r4, #0]
 801fc26:	1d18      	adds	r0, r3, #4
 801fc28:	6961      	ldr	r1, [r4, #20]
 801fc2a:	6010      	str	r0, [r2, #0]
 801fc2c:	0628      	lsls	r0, r5, #24
 801fc2e:	681b      	ldr	r3, [r3, #0]
 801fc30:	d501      	bpl.n	801fc36 <_printf_i+0x196>
 801fc32:	6019      	str	r1, [r3, #0]
 801fc34:	e002      	b.n	801fc3c <_printf_i+0x19c>
 801fc36:	066a      	lsls	r2, r5, #25
 801fc38:	d5fb      	bpl.n	801fc32 <_printf_i+0x192>
 801fc3a:	8019      	strh	r1, [r3, #0]
 801fc3c:	2300      	movs	r3, #0
 801fc3e:	4665      	mov	r5, ip
 801fc40:	6123      	str	r3, [r4, #16]
 801fc42:	e7b9      	b.n	801fbb8 <_printf_i+0x118>
 801fc44:	6813      	ldr	r3, [r2, #0]
 801fc46:	1d19      	adds	r1, r3, #4
 801fc48:	6011      	str	r1, [r2, #0]
 801fc4a:	2100      	movs	r1, #0
 801fc4c:	681d      	ldr	r5, [r3, #0]
 801fc4e:	6862      	ldr	r2, [r4, #4]
 801fc50:	4628      	mov	r0, r5
 801fc52:	f001 f9ff 	bl	8021054 <memchr>
 801fc56:	b108      	cbz	r0, 801fc5c <_printf_i+0x1bc>
 801fc58:	1b40      	subs	r0, r0, r5
 801fc5a:	6060      	str	r0, [r4, #4]
 801fc5c:	6863      	ldr	r3, [r4, #4]
 801fc5e:	6123      	str	r3, [r4, #16]
 801fc60:	2300      	movs	r3, #0
 801fc62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801fc66:	e7a7      	b.n	801fbb8 <_printf_i+0x118>
 801fc68:	6923      	ldr	r3, [r4, #16]
 801fc6a:	462a      	mov	r2, r5
 801fc6c:	4639      	mov	r1, r7
 801fc6e:	4630      	mov	r0, r6
 801fc70:	47c0      	blx	r8
 801fc72:	3001      	adds	r0, #1
 801fc74:	d0aa      	beq.n	801fbcc <_printf_i+0x12c>
 801fc76:	6823      	ldr	r3, [r4, #0]
 801fc78:	079b      	lsls	r3, r3, #30
 801fc7a:	d413      	bmi.n	801fca4 <_printf_i+0x204>
 801fc7c:	68e0      	ldr	r0, [r4, #12]
 801fc7e:	9b03      	ldr	r3, [sp, #12]
 801fc80:	4298      	cmp	r0, r3
 801fc82:	bfb8      	it	lt
 801fc84:	4618      	movlt	r0, r3
 801fc86:	e7a3      	b.n	801fbd0 <_printf_i+0x130>
 801fc88:	2301      	movs	r3, #1
 801fc8a:	464a      	mov	r2, r9
 801fc8c:	4639      	mov	r1, r7
 801fc8e:	4630      	mov	r0, r6
 801fc90:	47c0      	blx	r8
 801fc92:	3001      	adds	r0, #1
 801fc94:	d09a      	beq.n	801fbcc <_printf_i+0x12c>
 801fc96:	3501      	adds	r5, #1
 801fc98:	68e3      	ldr	r3, [r4, #12]
 801fc9a:	9a03      	ldr	r2, [sp, #12]
 801fc9c:	1a9b      	subs	r3, r3, r2
 801fc9e:	42ab      	cmp	r3, r5
 801fca0:	dcf2      	bgt.n	801fc88 <_printf_i+0x1e8>
 801fca2:	e7eb      	b.n	801fc7c <_printf_i+0x1dc>
 801fca4:	2500      	movs	r5, #0
 801fca6:	f104 0919 	add.w	r9, r4, #25
 801fcaa:	e7f5      	b.n	801fc98 <_printf_i+0x1f8>
 801fcac:	2b00      	cmp	r3, #0
 801fcae:	d1ac      	bne.n	801fc0a <_printf_i+0x16a>
 801fcb0:	7803      	ldrb	r3, [r0, #0]
 801fcb2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801fcb6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801fcba:	e76c      	b.n	801fb96 <_printf_i+0xf6>
 801fcbc:	080260b3 	.word	0x080260b3
 801fcc0:	080260c4 	.word	0x080260c4

0801fcc4 <_sbrk_r>:
 801fcc4:	b538      	push	{r3, r4, r5, lr}
 801fcc6:	2300      	movs	r3, #0
 801fcc8:	4c05      	ldr	r4, [pc, #20]	; (801fce0 <_sbrk_r+0x1c>)
 801fcca:	4605      	mov	r5, r0
 801fccc:	4608      	mov	r0, r1
 801fcce:	6023      	str	r3, [r4, #0]
 801fcd0:	f7e2 f91c 	bl	8001f0c <_sbrk>
 801fcd4:	1c43      	adds	r3, r0, #1
 801fcd6:	d102      	bne.n	801fcde <_sbrk_r+0x1a>
 801fcd8:	6823      	ldr	r3, [r4, #0]
 801fcda:	b103      	cbz	r3, 801fcde <_sbrk_r+0x1a>
 801fcdc:	602b      	str	r3, [r5, #0]
 801fcde:	bd38      	pop	{r3, r4, r5, pc}
 801fce0:	2002d190 	.word	0x2002d190

0801fce4 <_raise_r>:
 801fce4:	291f      	cmp	r1, #31
 801fce6:	b538      	push	{r3, r4, r5, lr}
 801fce8:	4604      	mov	r4, r0
 801fcea:	460d      	mov	r5, r1
 801fcec:	d904      	bls.n	801fcf8 <_raise_r+0x14>
 801fcee:	2316      	movs	r3, #22
 801fcf0:	6003      	str	r3, [r0, #0]
 801fcf2:	f04f 30ff 	mov.w	r0, #4294967295
 801fcf6:	bd38      	pop	{r3, r4, r5, pc}
 801fcf8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801fcfa:	b112      	cbz	r2, 801fd02 <_raise_r+0x1e>
 801fcfc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801fd00:	b94b      	cbnz	r3, 801fd16 <_raise_r+0x32>
 801fd02:	4620      	mov	r0, r4
 801fd04:	f000 f830 	bl	801fd68 <_getpid_r>
 801fd08:	462a      	mov	r2, r5
 801fd0a:	4601      	mov	r1, r0
 801fd0c:	4620      	mov	r0, r4
 801fd0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fd12:	f000 b817 	b.w	801fd44 <_kill_r>
 801fd16:	2b01      	cmp	r3, #1
 801fd18:	d00a      	beq.n	801fd30 <_raise_r+0x4c>
 801fd1a:	1c59      	adds	r1, r3, #1
 801fd1c:	d103      	bne.n	801fd26 <_raise_r+0x42>
 801fd1e:	2316      	movs	r3, #22
 801fd20:	6003      	str	r3, [r0, #0]
 801fd22:	2001      	movs	r0, #1
 801fd24:	e7e7      	b.n	801fcf6 <_raise_r+0x12>
 801fd26:	2400      	movs	r4, #0
 801fd28:	4628      	mov	r0, r5
 801fd2a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801fd2e:	4798      	blx	r3
 801fd30:	2000      	movs	r0, #0
 801fd32:	e7e0      	b.n	801fcf6 <_raise_r+0x12>

0801fd34 <raise>:
 801fd34:	4b02      	ldr	r3, [pc, #8]	; (801fd40 <raise+0xc>)
 801fd36:	4601      	mov	r1, r0
 801fd38:	6818      	ldr	r0, [r3, #0]
 801fd3a:	f7ff bfd3 	b.w	801fce4 <_raise_r>
 801fd3e:	bf00      	nop
 801fd40:	20016d50 	.word	0x20016d50

0801fd44 <_kill_r>:
 801fd44:	b538      	push	{r3, r4, r5, lr}
 801fd46:	2300      	movs	r3, #0
 801fd48:	4c06      	ldr	r4, [pc, #24]	; (801fd64 <_kill_r+0x20>)
 801fd4a:	4605      	mov	r5, r0
 801fd4c:	4608      	mov	r0, r1
 801fd4e:	4611      	mov	r1, r2
 801fd50:	6023      	str	r3, [r4, #0]
 801fd52:	f7e2 f853 	bl	8001dfc <_kill>
 801fd56:	1c43      	adds	r3, r0, #1
 801fd58:	d102      	bne.n	801fd60 <_kill_r+0x1c>
 801fd5a:	6823      	ldr	r3, [r4, #0]
 801fd5c:	b103      	cbz	r3, 801fd60 <_kill_r+0x1c>
 801fd5e:	602b      	str	r3, [r5, #0]
 801fd60:	bd38      	pop	{r3, r4, r5, pc}
 801fd62:	bf00      	nop
 801fd64:	2002d190 	.word	0x2002d190

0801fd68 <_getpid_r>:
 801fd68:	f7e2 b840 	b.w	8001dec <_getpid>

0801fd6c <siprintf>:
 801fd6c:	b40e      	push	{r1, r2, r3}
 801fd6e:	b500      	push	{lr}
 801fd70:	b09c      	sub	sp, #112	; 0x70
 801fd72:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801fd76:	ab1d      	add	r3, sp, #116	; 0x74
 801fd78:	9002      	str	r0, [sp, #8]
 801fd7a:	9006      	str	r0, [sp, #24]
 801fd7c:	9107      	str	r1, [sp, #28]
 801fd7e:	9104      	str	r1, [sp, #16]
 801fd80:	4808      	ldr	r0, [pc, #32]	; (801fda4 <siprintf+0x38>)
 801fd82:	4909      	ldr	r1, [pc, #36]	; (801fda8 <siprintf+0x3c>)
 801fd84:	f853 2b04 	ldr.w	r2, [r3], #4
 801fd88:	9105      	str	r1, [sp, #20]
 801fd8a:	a902      	add	r1, sp, #8
 801fd8c:	6800      	ldr	r0, [r0, #0]
 801fd8e:	9301      	str	r3, [sp, #4]
 801fd90:	f001 fcde 	bl	8021750 <_svfiprintf_r>
 801fd94:	9b02      	ldr	r3, [sp, #8]
 801fd96:	2200      	movs	r2, #0
 801fd98:	701a      	strb	r2, [r3, #0]
 801fd9a:	b01c      	add	sp, #112	; 0x70
 801fd9c:	f85d eb04 	ldr.w	lr, [sp], #4
 801fda0:	b003      	add	sp, #12
 801fda2:	4770      	bx	lr
 801fda4:	20016d50 	.word	0x20016d50
 801fda8:	ffff0208 	.word	0xffff0208

0801fdac <__swbuf_r>:
 801fdac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fdae:	460e      	mov	r6, r1
 801fdb0:	4614      	mov	r4, r2
 801fdb2:	4605      	mov	r5, r0
 801fdb4:	b118      	cbz	r0, 801fdbe <__swbuf_r+0x12>
 801fdb6:	6983      	ldr	r3, [r0, #24]
 801fdb8:	b90b      	cbnz	r3, 801fdbe <__swbuf_r+0x12>
 801fdba:	f001 f84f 	bl	8020e5c <__sinit>
 801fdbe:	4b21      	ldr	r3, [pc, #132]	; (801fe44 <__swbuf_r+0x98>)
 801fdc0:	429c      	cmp	r4, r3
 801fdc2:	d12a      	bne.n	801fe1a <__swbuf_r+0x6e>
 801fdc4:	686c      	ldr	r4, [r5, #4]
 801fdc6:	69a3      	ldr	r3, [r4, #24]
 801fdc8:	60a3      	str	r3, [r4, #8]
 801fdca:	89a3      	ldrh	r3, [r4, #12]
 801fdcc:	071a      	lsls	r2, r3, #28
 801fdce:	d52e      	bpl.n	801fe2e <__swbuf_r+0x82>
 801fdd0:	6923      	ldr	r3, [r4, #16]
 801fdd2:	b363      	cbz	r3, 801fe2e <__swbuf_r+0x82>
 801fdd4:	6923      	ldr	r3, [r4, #16]
 801fdd6:	b2f6      	uxtb	r6, r6
 801fdd8:	6820      	ldr	r0, [r4, #0]
 801fdda:	4637      	mov	r7, r6
 801fddc:	1ac0      	subs	r0, r0, r3
 801fdde:	6963      	ldr	r3, [r4, #20]
 801fde0:	4283      	cmp	r3, r0
 801fde2:	dc04      	bgt.n	801fdee <__swbuf_r+0x42>
 801fde4:	4621      	mov	r1, r4
 801fde6:	4628      	mov	r0, r5
 801fde8:	f000 ffce 	bl	8020d88 <_fflush_r>
 801fdec:	bb28      	cbnz	r0, 801fe3a <__swbuf_r+0x8e>
 801fdee:	68a3      	ldr	r3, [r4, #8]
 801fdf0:	3001      	adds	r0, #1
 801fdf2:	3b01      	subs	r3, #1
 801fdf4:	60a3      	str	r3, [r4, #8]
 801fdf6:	6823      	ldr	r3, [r4, #0]
 801fdf8:	1c5a      	adds	r2, r3, #1
 801fdfa:	6022      	str	r2, [r4, #0]
 801fdfc:	701e      	strb	r6, [r3, #0]
 801fdfe:	6963      	ldr	r3, [r4, #20]
 801fe00:	4283      	cmp	r3, r0
 801fe02:	d004      	beq.n	801fe0e <__swbuf_r+0x62>
 801fe04:	89a3      	ldrh	r3, [r4, #12]
 801fe06:	07db      	lsls	r3, r3, #31
 801fe08:	d519      	bpl.n	801fe3e <__swbuf_r+0x92>
 801fe0a:	2e0a      	cmp	r6, #10
 801fe0c:	d117      	bne.n	801fe3e <__swbuf_r+0x92>
 801fe0e:	4621      	mov	r1, r4
 801fe10:	4628      	mov	r0, r5
 801fe12:	f000 ffb9 	bl	8020d88 <_fflush_r>
 801fe16:	b190      	cbz	r0, 801fe3e <__swbuf_r+0x92>
 801fe18:	e00f      	b.n	801fe3a <__swbuf_r+0x8e>
 801fe1a:	4b0b      	ldr	r3, [pc, #44]	; (801fe48 <__swbuf_r+0x9c>)
 801fe1c:	429c      	cmp	r4, r3
 801fe1e:	d101      	bne.n	801fe24 <__swbuf_r+0x78>
 801fe20:	68ac      	ldr	r4, [r5, #8]
 801fe22:	e7d0      	b.n	801fdc6 <__swbuf_r+0x1a>
 801fe24:	4b09      	ldr	r3, [pc, #36]	; (801fe4c <__swbuf_r+0xa0>)
 801fe26:	429c      	cmp	r4, r3
 801fe28:	bf08      	it	eq
 801fe2a:	68ec      	ldreq	r4, [r5, #12]
 801fe2c:	e7cb      	b.n	801fdc6 <__swbuf_r+0x1a>
 801fe2e:	4621      	mov	r1, r4
 801fe30:	4628      	mov	r0, r5
 801fe32:	f000 f80d 	bl	801fe50 <__swsetup_r>
 801fe36:	2800      	cmp	r0, #0
 801fe38:	d0cc      	beq.n	801fdd4 <__swbuf_r+0x28>
 801fe3a:	f04f 37ff 	mov.w	r7, #4294967295
 801fe3e:	4638      	mov	r0, r7
 801fe40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fe42:	bf00      	nop
 801fe44:	08026104 	.word	0x08026104
 801fe48:	08026124 	.word	0x08026124
 801fe4c:	080260e4 	.word	0x080260e4

0801fe50 <__swsetup_r>:
 801fe50:	4b32      	ldr	r3, [pc, #200]	; (801ff1c <__swsetup_r+0xcc>)
 801fe52:	b570      	push	{r4, r5, r6, lr}
 801fe54:	681d      	ldr	r5, [r3, #0]
 801fe56:	4606      	mov	r6, r0
 801fe58:	460c      	mov	r4, r1
 801fe5a:	b125      	cbz	r5, 801fe66 <__swsetup_r+0x16>
 801fe5c:	69ab      	ldr	r3, [r5, #24]
 801fe5e:	b913      	cbnz	r3, 801fe66 <__swsetup_r+0x16>
 801fe60:	4628      	mov	r0, r5
 801fe62:	f000 fffb 	bl	8020e5c <__sinit>
 801fe66:	4b2e      	ldr	r3, [pc, #184]	; (801ff20 <__swsetup_r+0xd0>)
 801fe68:	429c      	cmp	r4, r3
 801fe6a:	d10f      	bne.n	801fe8c <__swsetup_r+0x3c>
 801fe6c:	686c      	ldr	r4, [r5, #4]
 801fe6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fe72:	b29a      	uxth	r2, r3
 801fe74:	0715      	lsls	r5, r2, #28
 801fe76:	d42c      	bmi.n	801fed2 <__swsetup_r+0x82>
 801fe78:	06d0      	lsls	r0, r2, #27
 801fe7a:	d411      	bmi.n	801fea0 <__swsetup_r+0x50>
 801fe7c:	2209      	movs	r2, #9
 801fe7e:	6032      	str	r2, [r6, #0]
 801fe80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fe84:	f04f 30ff 	mov.w	r0, #4294967295
 801fe88:	81a3      	strh	r3, [r4, #12]
 801fe8a:	e03e      	b.n	801ff0a <__swsetup_r+0xba>
 801fe8c:	4b25      	ldr	r3, [pc, #148]	; (801ff24 <__swsetup_r+0xd4>)
 801fe8e:	429c      	cmp	r4, r3
 801fe90:	d101      	bne.n	801fe96 <__swsetup_r+0x46>
 801fe92:	68ac      	ldr	r4, [r5, #8]
 801fe94:	e7eb      	b.n	801fe6e <__swsetup_r+0x1e>
 801fe96:	4b24      	ldr	r3, [pc, #144]	; (801ff28 <__swsetup_r+0xd8>)
 801fe98:	429c      	cmp	r4, r3
 801fe9a:	bf08      	it	eq
 801fe9c:	68ec      	ldreq	r4, [r5, #12]
 801fe9e:	e7e6      	b.n	801fe6e <__swsetup_r+0x1e>
 801fea0:	0751      	lsls	r1, r2, #29
 801fea2:	d512      	bpl.n	801feca <__swsetup_r+0x7a>
 801fea4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fea6:	b141      	cbz	r1, 801feba <__swsetup_r+0x6a>
 801fea8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801feac:	4299      	cmp	r1, r3
 801feae:	d002      	beq.n	801feb6 <__swsetup_r+0x66>
 801feb0:	4630      	mov	r0, r6
 801feb2:	f7ff f8c1 	bl	801f038 <_free_r>
 801feb6:	2300      	movs	r3, #0
 801feb8:	6363      	str	r3, [r4, #52]	; 0x34
 801feba:	89a3      	ldrh	r3, [r4, #12]
 801febc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801fec0:	81a3      	strh	r3, [r4, #12]
 801fec2:	2300      	movs	r3, #0
 801fec4:	6063      	str	r3, [r4, #4]
 801fec6:	6923      	ldr	r3, [r4, #16]
 801fec8:	6023      	str	r3, [r4, #0]
 801feca:	89a3      	ldrh	r3, [r4, #12]
 801fecc:	f043 0308 	orr.w	r3, r3, #8
 801fed0:	81a3      	strh	r3, [r4, #12]
 801fed2:	6923      	ldr	r3, [r4, #16]
 801fed4:	b94b      	cbnz	r3, 801feea <__swsetup_r+0x9a>
 801fed6:	89a3      	ldrh	r3, [r4, #12]
 801fed8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801fedc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801fee0:	d003      	beq.n	801feea <__swsetup_r+0x9a>
 801fee2:	4621      	mov	r1, r4
 801fee4:	4630      	mov	r0, r6
 801fee6:	f001 f875 	bl	8020fd4 <__smakebuf_r>
 801feea:	89a2      	ldrh	r2, [r4, #12]
 801feec:	f012 0301 	ands.w	r3, r2, #1
 801fef0:	d00c      	beq.n	801ff0c <__swsetup_r+0xbc>
 801fef2:	2300      	movs	r3, #0
 801fef4:	60a3      	str	r3, [r4, #8]
 801fef6:	6963      	ldr	r3, [r4, #20]
 801fef8:	425b      	negs	r3, r3
 801fefa:	61a3      	str	r3, [r4, #24]
 801fefc:	6923      	ldr	r3, [r4, #16]
 801fefe:	b953      	cbnz	r3, 801ff16 <__swsetup_r+0xc6>
 801ff00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ff04:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801ff08:	d1ba      	bne.n	801fe80 <__swsetup_r+0x30>
 801ff0a:	bd70      	pop	{r4, r5, r6, pc}
 801ff0c:	0792      	lsls	r2, r2, #30
 801ff0e:	bf58      	it	pl
 801ff10:	6963      	ldrpl	r3, [r4, #20]
 801ff12:	60a3      	str	r3, [r4, #8]
 801ff14:	e7f2      	b.n	801fefc <__swsetup_r+0xac>
 801ff16:	2000      	movs	r0, #0
 801ff18:	e7f7      	b.n	801ff0a <__swsetup_r+0xba>
 801ff1a:	bf00      	nop
 801ff1c:	20016d50 	.word	0x20016d50
 801ff20:	08026104 	.word	0x08026104
 801ff24:	08026124 	.word	0x08026124
 801ff28:	080260e4 	.word	0x080260e4

0801ff2c <__register_exitproc>:
 801ff2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ff30:	4d2d      	ldr	r5, [pc, #180]	; (801ffe8 <__register_exitproc+0xbc>)
 801ff32:	4607      	mov	r7, r0
 801ff34:	460e      	mov	r6, r1
 801ff36:	4691      	mov	r9, r2
 801ff38:	682c      	ldr	r4, [r5, #0]
 801ff3a:	4698      	mov	r8, r3
 801ff3c:	b934      	cbnz	r4, 801ff4c <__register_exitproc+0x20>
 801ff3e:	4c2b      	ldr	r4, [pc, #172]	; (801ffec <__register_exitproc+0xc0>)
 801ff40:	4b2b      	ldr	r3, [pc, #172]	; (801fff0 <__register_exitproc+0xc4>)
 801ff42:	602c      	str	r4, [r5, #0]
 801ff44:	b113      	cbz	r3, 801ff4c <__register_exitproc+0x20>
 801ff46:	681b      	ldr	r3, [r3, #0]
 801ff48:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801ff4c:	6863      	ldr	r3, [r4, #4]
 801ff4e:	2b1f      	cmp	r3, #31
 801ff50:	dd3f      	ble.n	801ffd2 <__register_exitproc+0xa6>
 801ff52:	4b28      	ldr	r3, [pc, #160]	; (801fff4 <__register_exitproc+0xc8>)
 801ff54:	b91b      	cbnz	r3, 801ff5e <__register_exitproc+0x32>
 801ff56:	f04f 30ff 	mov.w	r0, #4294967295
 801ff5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ff5e:	208c      	movs	r0, #140	; 0x8c
 801ff60:	f7ff f82e 	bl	801efc0 <malloc>
 801ff64:	4604      	mov	r4, r0
 801ff66:	2800      	cmp	r0, #0
 801ff68:	d0f5      	beq.n	801ff56 <__register_exitproc+0x2a>
 801ff6a:	2300      	movs	r3, #0
 801ff6c:	682a      	ldr	r2, [r5, #0]
 801ff6e:	6043      	str	r3, [r0, #4]
 801ff70:	6002      	str	r2, [r0, #0]
 801ff72:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 801ff76:	6028      	str	r0, [r5, #0]
 801ff78:	b31f      	cbz	r7, 801ffc2 <__register_exitproc+0x96>
 801ff7a:	f44f 7084 	mov.w	r0, #264	; 0x108
 801ff7e:	f7ff f81f 	bl	801efc0 <malloc>
 801ff82:	2800      	cmp	r0, #0
 801ff84:	d0e7      	beq.n	801ff56 <__register_exitproc+0x2a>
 801ff86:	2300      	movs	r3, #0
 801ff88:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801ff8c:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 801ff90:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801ff94:	6862      	ldr	r2, [r4, #4]
 801ff96:	2301      	movs	r3, #1
 801ff98:	2f02      	cmp	r7, #2
 801ff9a:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 801ff9e:	fa03 f302 	lsl.w	r3, r3, r2
 801ffa2:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 801ffa6:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 801ffaa:	ea42 0203 	orr.w	r2, r2, r3
 801ffae:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 801ffb2:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 801ffb6:	bf02      	ittt	eq
 801ffb8:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 801ffbc:	4313      	orreq	r3, r2
 801ffbe:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 801ffc2:	6863      	ldr	r3, [r4, #4]
 801ffc4:	2000      	movs	r0, #0
 801ffc6:	1c5a      	adds	r2, r3, #1
 801ffc8:	3302      	adds	r3, #2
 801ffca:	6062      	str	r2, [r4, #4]
 801ffcc:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 801ffd0:	e7c3      	b.n	801ff5a <__register_exitproc+0x2e>
 801ffd2:	2f00      	cmp	r7, #0
 801ffd4:	d0f5      	beq.n	801ffc2 <__register_exitproc+0x96>
 801ffd6:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801ffda:	2800      	cmp	r0, #0
 801ffdc:	d1da      	bne.n	801ff94 <__register_exitproc+0x68>
 801ffde:	4b05      	ldr	r3, [pc, #20]	; (801fff4 <__register_exitproc+0xc8>)
 801ffe0:	2b00      	cmp	r3, #0
 801ffe2:	d0b8      	beq.n	801ff56 <__register_exitproc+0x2a>
 801ffe4:	e7c9      	b.n	801ff7a <__register_exitproc+0x4e>
 801ffe6:	bf00      	nop
 801ffe8:	2002d188 	.word	0x2002d188
 801ffec:	2002d0fc 	.word	0x2002d0fc
 801fff0:	00000000 	.word	0x00000000
 801fff4:	0801efc1 	.word	0x0801efc1

0801fff8 <quorem>:
 801fff8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fffc:	6903      	ldr	r3, [r0, #16]
 801fffe:	4680      	mov	r8, r0
 8020000:	690c      	ldr	r4, [r1, #16]
 8020002:	42a3      	cmp	r3, r4
 8020004:	f2c0 8086 	blt.w	8020114 <quorem+0x11c>
 8020008:	3c01      	subs	r4, #1
 802000a:	f101 0714 	add.w	r7, r1, #20
 802000e:	f100 0614 	add.w	r6, r0, #20
 8020012:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8020016:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 802001a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 802001e:	3501      	adds	r5, #1
 8020020:	eb06 030c 	add.w	r3, r6, ip
 8020024:	eb07 090c 	add.w	r9, r7, ip
 8020028:	9301      	str	r3, [sp, #4]
 802002a:	fbb0 f5f5 	udiv	r5, r0, r5
 802002e:	b3a5      	cbz	r5, 802009a <quorem+0xa2>
 8020030:	f04f 0a00 	mov.w	sl, #0
 8020034:	4638      	mov	r0, r7
 8020036:	46b6      	mov	lr, r6
 8020038:	46d3      	mov	fp, sl
 802003a:	f850 2b04 	ldr.w	r2, [r0], #4
 802003e:	b293      	uxth	r3, r2
 8020040:	4581      	cmp	r9, r0
 8020042:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8020046:	fb05 a303 	mla	r3, r5, r3, sl
 802004a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802004e:	b29b      	uxth	r3, r3
 8020050:	fb05 a202 	mla	r2, r5, r2, sl
 8020054:	ebab 0303 	sub.w	r3, fp, r3
 8020058:	f8de b000 	ldr.w	fp, [lr]
 802005c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8020060:	fa1f fb8b 	uxth.w	fp, fp
 8020064:	445b      	add	r3, fp
 8020066:	fa1f fb82 	uxth.w	fp, r2
 802006a:	f8de 2000 	ldr.w	r2, [lr]
 802006e:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8020072:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8020076:	b29b      	uxth	r3, r3
 8020078:	ea4f 4b22 	mov.w	fp, r2, asr #16
 802007c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020080:	f84e 3b04 	str.w	r3, [lr], #4
 8020084:	d2d9      	bcs.n	802003a <quorem+0x42>
 8020086:	f856 300c 	ldr.w	r3, [r6, ip]
 802008a:	b933      	cbnz	r3, 802009a <quorem+0xa2>
 802008c:	9b01      	ldr	r3, [sp, #4]
 802008e:	3b04      	subs	r3, #4
 8020090:	429e      	cmp	r6, r3
 8020092:	461a      	mov	r2, r3
 8020094:	d332      	bcc.n	80200fc <quorem+0x104>
 8020096:	f8c8 4010 	str.w	r4, [r8, #16]
 802009a:	4640      	mov	r0, r8
 802009c:	f001 fa00 	bl	80214a0 <__mcmp>
 80200a0:	2800      	cmp	r0, #0
 80200a2:	db27      	blt.n	80200f4 <quorem+0xfc>
 80200a4:	3501      	adds	r5, #1
 80200a6:	4630      	mov	r0, r6
 80200a8:	f04f 0c00 	mov.w	ip, #0
 80200ac:	f857 1b04 	ldr.w	r1, [r7], #4
 80200b0:	f8d0 e000 	ldr.w	lr, [r0]
 80200b4:	b28b      	uxth	r3, r1
 80200b6:	45b9      	cmp	r9, r7
 80200b8:	fa1f f28e 	uxth.w	r2, lr
 80200bc:	ebac 0303 	sub.w	r3, ip, r3
 80200c0:	4413      	add	r3, r2
 80200c2:	ea4f 4211 	mov.w	r2, r1, lsr #16
 80200c6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80200ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80200ce:	b29b      	uxth	r3, r3
 80200d0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80200d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80200d8:	f840 3b04 	str.w	r3, [r0], #4
 80200dc:	d2e6      	bcs.n	80200ac <quorem+0xb4>
 80200de:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80200e2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80200e6:	b92a      	cbnz	r2, 80200f4 <quorem+0xfc>
 80200e8:	3b04      	subs	r3, #4
 80200ea:	429e      	cmp	r6, r3
 80200ec:	461a      	mov	r2, r3
 80200ee:	d30b      	bcc.n	8020108 <quorem+0x110>
 80200f0:	f8c8 4010 	str.w	r4, [r8, #16]
 80200f4:	4628      	mov	r0, r5
 80200f6:	b003      	add	sp, #12
 80200f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80200fc:	6812      	ldr	r2, [r2, #0]
 80200fe:	3b04      	subs	r3, #4
 8020100:	2a00      	cmp	r2, #0
 8020102:	d1c8      	bne.n	8020096 <quorem+0x9e>
 8020104:	3c01      	subs	r4, #1
 8020106:	e7c3      	b.n	8020090 <quorem+0x98>
 8020108:	6812      	ldr	r2, [r2, #0]
 802010a:	3b04      	subs	r3, #4
 802010c:	2a00      	cmp	r2, #0
 802010e:	d1ef      	bne.n	80200f0 <quorem+0xf8>
 8020110:	3c01      	subs	r4, #1
 8020112:	e7ea      	b.n	80200ea <quorem+0xf2>
 8020114:	2000      	movs	r0, #0
 8020116:	e7ee      	b.n	80200f6 <quorem+0xfe>

08020118 <_dtoa_r>:
 8020118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802011c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 802011e:	b097      	sub	sp, #92	; 0x5c
 8020120:	4604      	mov	r4, r0
 8020122:	9106      	str	r1, [sp, #24]
 8020124:	920b      	str	r2, [sp, #44]	; 0x2c
 8020126:	9312      	str	r3, [sp, #72]	; 0x48
 8020128:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 802012c:	ec57 6b10 	vmov	r6, r7, d0
 8020130:	e9cd 6700 	strd	r6, r7, [sp]
 8020134:	b93d      	cbnz	r5, 8020146 <_dtoa_r+0x2e>
 8020136:	2010      	movs	r0, #16
 8020138:	f7fe ff42 	bl	801efc0 <malloc>
 802013c:	6260      	str	r0, [r4, #36]	; 0x24
 802013e:	6005      	str	r5, [r0, #0]
 8020140:	60c5      	str	r5, [r0, #12]
 8020142:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8020146:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020148:	6819      	ldr	r1, [r3, #0]
 802014a:	b151      	cbz	r1, 8020162 <_dtoa_r+0x4a>
 802014c:	685a      	ldr	r2, [r3, #4]
 802014e:	2301      	movs	r3, #1
 8020150:	4620      	mov	r0, r4
 8020152:	4093      	lsls	r3, r2
 8020154:	604a      	str	r2, [r1, #4]
 8020156:	608b      	str	r3, [r1, #8]
 8020158:	f000 ffc0 	bl	80210dc <_Bfree>
 802015c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802015e:	2200      	movs	r2, #0
 8020160:	601a      	str	r2, [r3, #0]
 8020162:	1e3b      	subs	r3, r7, #0
 8020164:	bfb7      	itett	lt
 8020166:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 802016a:	2300      	movge	r3, #0
 802016c:	2201      	movlt	r2, #1
 802016e:	9301      	strlt	r3, [sp, #4]
 8020170:	bfac      	ite	ge
 8020172:	f8c8 3000 	strge.w	r3, [r8]
 8020176:	f8c8 2000 	strlt.w	r2, [r8]
 802017a:	4baf      	ldr	r3, [pc, #700]	; (8020438 <_dtoa_r+0x320>)
 802017c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8020180:	ea33 0308 	bics.w	r3, r3, r8
 8020184:	d114      	bne.n	80201b0 <_dtoa_r+0x98>
 8020186:	f242 730f 	movw	r3, #9999	; 0x270f
 802018a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802018c:	6013      	str	r3, [r2, #0]
 802018e:	9b00      	ldr	r3, [sp, #0]
 8020190:	b923      	cbnz	r3, 802019c <_dtoa_r+0x84>
 8020192:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8020196:	2800      	cmp	r0, #0
 8020198:	f000 853e 	beq.w	8020c18 <_dtoa_r+0xb00>
 802019c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802019e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 802044c <_dtoa_r+0x334>
 80201a2:	2b00      	cmp	r3, #0
 80201a4:	f000 8540 	beq.w	8020c28 <_dtoa_r+0xb10>
 80201a8:	f10b 0303 	add.w	r3, fp, #3
 80201ac:	f000 bd3a 	b.w	8020c24 <_dtoa_r+0xb0c>
 80201b0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80201b4:	2200      	movs	r2, #0
 80201b6:	2300      	movs	r3, #0
 80201b8:	4630      	mov	r0, r6
 80201ba:	4639      	mov	r1, r7
 80201bc:	f7e0 fc72 	bl	8000aa4 <__aeabi_dcmpeq>
 80201c0:	4681      	mov	r9, r0
 80201c2:	b168      	cbz	r0, 80201e0 <_dtoa_r+0xc8>
 80201c4:	2301      	movs	r3, #1
 80201c6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80201c8:	6013      	str	r3, [r2, #0]
 80201ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80201cc:	2b00      	cmp	r3, #0
 80201ce:	f000 8520 	beq.w	8020c12 <_dtoa_r+0xafa>
 80201d2:	4b9a      	ldr	r3, [pc, #616]	; (802043c <_dtoa_r+0x324>)
 80201d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80201d6:	f103 3bff 	add.w	fp, r3, #4294967295
 80201da:	6013      	str	r3, [r2, #0]
 80201dc:	f000 bd24 	b.w	8020c28 <_dtoa_r+0xb10>
 80201e0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80201e4:	aa14      	add	r2, sp, #80	; 0x50
 80201e6:	a915      	add	r1, sp, #84	; 0x54
 80201e8:	4620      	mov	r0, r4
 80201ea:	ec47 6b10 	vmov	d0, r6, r7
 80201ee:	f001 f9d1 	bl	8021594 <__d2b>
 80201f2:	9004      	str	r0, [sp, #16]
 80201f4:	2d00      	cmp	r5, #0
 80201f6:	d07a      	beq.n	80202ee <_dtoa_r+0x1d6>
 80201f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80201fc:	46b2      	mov	sl, r6
 80201fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8020202:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8020206:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 802020a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 802020e:	2200      	movs	r2, #0
 8020210:	4b8b      	ldr	r3, [pc, #556]	; (8020440 <_dtoa_r+0x328>)
 8020212:	4650      	mov	r0, sl
 8020214:	4659      	mov	r1, fp
 8020216:	f7e0 f825 	bl	8000264 <__aeabi_dsub>
 802021a:	a381      	add	r3, pc, #516	; (adr r3, 8020420 <_dtoa_r+0x308>)
 802021c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020220:	f7e0 f9d8 	bl	80005d4 <__aeabi_dmul>
 8020224:	a380      	add	r3, pc, #512	; (adr r3, 8020428 <_dtoa_r+0x310>)
 8020226:	e9d3 2300 	ldrd	r2, r3, [r3]
 802022a:	f7e0 f81d 	bl	8000268 <__adddf3>
 802022e:	4606      	mov	r6, r0
 8020230:	460f      	mov	r7, r1
 8020232:	4628      	mov	r0, r5
 8020234:	f7e0 f964 	bl	8000500 <__aeabi_i2d>
 8020238:	a37d      	add	r3, pc, #500	; (adr r3, 8020430 <_dtoa_r+0x318>)
 802023a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802023e:	f7e0 f9c9 	bl	80005d4 <__aeabi_dmul>
 8020242:	4602      	mov	r2, r0
 8020244:	460b      	mov	r3, r1
 8020246:	4630      	mov	r0, r6
 8020248:	4639      	mov	r1, r7
 802024a:	f7e0 f80d 	bl	8000268 <__adddf3>
 802024e:	4606      	mov	r6, r0
 8020250:	460f      	mov	r7, r1
 8020252:	f7e0 fc6f 	bl	8000b34 <__aeabi_d2iz>
 8020256:	2200      	movs	r2, #0
 8020258:	4682      	mov	sl, r0
 802025a:	2300      	movs	r3, #0
 802025c:	4630      	mov	r0, r6
 802025e:	4639      	mov	r1, r7
 8020260:	f7e0 fc2a 	bl	8000ab8 <__aeabi_dcmplt>
 8020264:	b148      	cbz	r0, 802027a <_dtoa_r+0x162>
 8020266:	4650      	mov	r0, sl
 8020268:	f7e0 f94a 	bl	8000500 <__aeabi_i2d>
 802026c:	4632      	mov	r2, r6
 802026e:	463b      	mov	r3, r7
 8020270:	f7e0 fc18 	bl	8000aa4 <__aeabi_dcmpeq>
 8020274:	b908      	cbnz	r0, 802027a <_dtoa_r+0x162>
 8020276:	f10a 3aff 	add.w	sl, sl, #4294967295
 802027a:	f1ba 0f16 	cmp.w	sl, #22
 802027e:	d857      	bhi.n	8020330 <_dtoa_r+0x218>
 8020280:	4970      	ldr	r1, [pc, #448]	; (8020444 <_dtoa_r+0x32c>)
 8020282:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8020286:	e9dd 2300 	ldrd	r2, r3, [sp]
 802028a:	e9d1 0100 	ldrd	r0, r1, [r1]
 802028e:	f7e0 fc31 	bl	8000af4 <__aeabi_dcmpgt>
 8020292:	2800      	cmp	r0, #0
 8020294:	d04e      	beq.n	8020334 <_dtoa_r+0x21c>
 8020296:	f10a 3aff 	add.w	sl, sl, #4294967295
 802029a:	2300      	movs	r3, #0
 802029c:	930f      	str	r3, [sp, #60]	; 0x3c
 802029e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80202a0:	1b5d      	subs	r5, r3, r5
 80202a2:	f1b5 0801 	subs.w	r8, r5, #1
 80202a6:	bf49      	itett	mi
 80202a8:	f1c5 0301 	rsbmi	r3, r5, #1
 80202ac:	2300      	movpl	r3, #0
 80202ae:	f04f 0800 	movmi.w	r8, #0
 80202b2:	9305      	strmi	r3, [sp, #20]
 80202b4:	bf58      	it	pl
 80202b6:	9305      	strpl	r3, [sp, #20]
 80202b8:	f1ba 0f00 	cmp.w	sl, #0
 80202bc:	db3c      	blt.n	8020338 <_dtoa_r+0x220>
 80202be:	2300      	movs	r3, #0
 80202c0:	44d0      	add	r8, sl
 80202c2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80202c6:	9307      	str	r3, [sp, #28]
 80202c8:	9b06      	ldr	r3, [sp, #24]
 80202ca:	2b09      	cmp	r3, #9
 80202cc:	f200 808e 	bhi.w	80203ec <_dtoa_r+0x2d4>
 80202d0:	2b05      	cmp	r3, #5
 80202d2:	bfc5      	ittet	gt
 80202d4:	3b04      	subgt	r3, #4
 80202d6:	2500      	movgt	r5, #0
 80202d8:	2501      	movle	r5, #1
 80202da:	9306      	strgt	r3, [sp, #24]
 80202dc:	9b06      	ldr	r3, [sp, #24]
 80202de:	3b02      	subs	r3, #2
 80202e0:	2b03      	cmp	r3, #3
 80202e2:	f200 808f 	bhi.w	8020404 <_dtoa_r+0x2ec>
 80202e6:	e8df f003 	tbb	[pc, r3]
 80202ea:	7f7d      	.short	0x7f7d
 80202ec:	7131      	.short	0x7131
 80202ee:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80202f2:	441d      	add	r5, r3
 80202f4:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80202f8:	2820      	cmp	r0, #32
 80202fa:	dd13      	ble.n	8020324 <_dtoa_r+0x20c>
 80202fc:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8020300:	9b00      	ldr	r3, [sp, #0]
 8020302:	fa08 f800 	lsl.w	r8, r8, r0
 8020306:	f205 4012 	addw	r0, r5, #1042	; 0x412
 802030a:	fa23 f000 	lsr.w	r0, r3, r0
 802030e:	ea48 0000 	orr.w	r0, r8, r0
 8020312:	f7e0 f8e5 	bl	80004e0 <__aeabi_ui2d>
 8020316:	2301      	movs	r3, #1
 8020318:	4682      	mov	sl, r0
 802031a:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 802031e:	3d01      	subs	r5, #1
 8020320:	9313      	str	r3, [sp, #76]	; 0x4c
 8020322:	e774      	b.n	802020e <_dtoa_r+0xf6>
 8020324:	f1c0 0020 	rsb	r0, r0, #32
 8020328:	9b00      	ldr	r3, [sp, #0]
 802032a:	fa03 f000 	lsl.w	r0, r3, r0
 802032e:	e7f0      	b.n	8020312 <_dtoa_r+0x1fa>
 8020330:	2301      	movs	r3, #1
 8020332:	e7b3      	b.n	802029c <_dtoa_r+0x184>
 8020334:	900f      	str	r0, [sp, #60]	; 0x3c
 8020336:	e7b2      	b.n	802029e <_dtoa_r+0x186>
 8020338:	9b05      	ldr	r3, [sp, #20]
 802033a:	eba3 030a 	sub.w	r3, r3, sl
 802033e:	9305      	str	r3, [sp, #20]
 8020340:	f1ca 0300 	rsb	r3, sl, #0
 8020344:	9307      	str	r3, [sp, #28]
 8020346:	2300      	movs	r3, #0
 8020348:	930e      	str	r3, [sp, #56]	; 0x38
 802034a:	e7bd      	b.n	80202c8 <_dtoa_r+0x1b0>
 802034c:	2301      	movs	r3, #1
 802034e:	930a      	str	r3, [sp, #40]	; 0x28
 8020350:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020352:	2b00      	cmp	r3, #0
 8020354:	dd59      	ble.n	802040a <_dtoa_r+0x2f2>
 8020356:	4699      	mov	r9, r3
 8020358:	9302      	str	r3, [sp, #8]
 802035a:	2200      	movs	r2, #0
 802035c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 802035e:	6072      	str	r2, [r6, #4]
 8020360:	2204      	movs	r2, #4
 8020362:	f102 0014 	add.w	r0, r2, #20
 8020366:	6871      	ldr	r1, [r6, #4]
 8020368:	4298      	cmp	r0, r3
 802036a:	d953      	bls.n	8020414 <_dtoa_r+0x2fc>
 802036c:	4620      	mov	r0, r4
 802036e:	f000 fe81 	bl	8021074 <_Balloc>
 8020372:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020374:	f1b9 0f0e 	cmp.w	r9, #14
 8020378:	6030      	str	r0, [r6, #0]
 802037a:	f8d3 b000 	ldr.w	fp, [r3]
 802037e:	f200 80e8 	bhi.w	8020552 <_dtoa_r+0x43a>
 8020382:	2d00      	cmp	r5, #0
 8020384:	f000 80e5 	beq.w	8020552 <_dtoa_r+0x43a>
 8020388:	f1ba 0f00 	cmp.w	sl, #0
 802038c:	ed9d 7b00 	vldr	d7, [sp]
 8020390:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8020394:	dd76      	ble.n	8020484 <_dtoa_r+0x36c>
 8020396:	f00a 030f 	and.w	r3, sl, #15
 802039a:	4a2a      	ldr	r2, [pc, #168]	; (8020444 <_dtoa_r+0x32c>)
 802039c:	ea4f 162a 	mov.w	r6, sl, asr #4
 80203a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80203a4:	06f0      	lsls	r0, r6, #27
 80203a6:	ed93 7b00 	vldr	d7, [r3]
 80203aa:	ed8d 7b08 	vstr	d7, [sp, #32]
 80203ae:	d567      	bpl.n	8020480 <_dtoa_r+0x368>
 80203b0:	4b25      	ldr	r3, [pc, #148]	; (8020448 <_dtoa_r+0x330>)
 80203b2:	f006 060f 	and.w	r6, r6, #15
 80203b6:	2503      	movs	r5, #3
 80203b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80203bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80203c0:	f7e0 fa32 	bl	8000828 <__aeabi_ddiv>
 80203c4:	e9cd 0100 	strd	r0, r1, [sp]
 80203c8:	4f1f      	ldr	r7, [pc, #124]	; (8020448 <_dtoa_r+0x330>)
 80203ca:	e04e      	b.n	802046a <_dtoa_r+0x352>
 80203cc:	2301      	movs	r3, #1
 80203ce:	930a      	str	r3, [sp, #40]	; 0x28
 80203d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80203d2:	4453      	add	r3, sl
 80203d4:	f103 0901 	add.w	r9, r3, #1
 80203d8:	9302      	str	r3, [sp, #8]
 80203da:	464b      	mov	r3, r9
 80203dc:	2b01      	cmp	r3, #1
 80203de:	bfb8      	it	lt
 80203e0:	2301      	movlt	r3, #1
 80203e2:	e7ba      	b.n	802035a <_dtoa_r+0x242>
 80203e4:	2300      	movs	r3, #0
 80203e6:	e7b2      	b.n	802034e <_dtoa_r+0x236>
 80203e8:	2300      	movs	r3, #0
 80203ea:	e7f0      	b.n	80203ce <_dtoa_r+0x2b6>
 80203ec:	2501      	movs	r5, #1
 80203ee:	2300      	movs	r3, #0
 80203f0:	950a      	str	r5, [sp, #40]	; 0x28
 80203f2:	9306      	str	r3, [sp, #24]
 80203f4:	f04f 33ff 	mov.w	r3, #4294967295
 80203f8:	2200      	movs	r2, #0
 80203fa:	9302      	str	r3, [sp, #8]
 80203fc:	4699      	mov	r9, r3
 80203fe:	2312      	movs	r3, #18
 8020400:	920b      	str	r2, [sp, #44]	; 0x2c
 8020402:	e7aa      	b.n	802035a <_dtoa_r+0x242>
 8020404:	2301      	movs	r3, #1
 8020406:	930a      	str	r3, [sp, #40]	; 0x28
 8020408:	e7f4      	b.n	80203f4 <_dtoa_r+0x2dc>
 802040a:	2301      	movs	r3, #1
 802040c:	9302      	str	r3, [sp, #8]
 802040e:	4699      	mov	r9, r3
 8020410:	461a      	mov	r2, r3
 8020412:	e7f5      	b.n	8020400 <_dtoa_r+0x2e8>
 8020414:	3101      	adds	r1, #1
 8020416:	0052      	lsls	r2, r2, #1
 8020418:	6071      	str	r1, [r6, #4]
 802041a:	e7a2      	b.n	8020362 <_dtoa_r+0x24a>
 802041c:	f3af 8000 	nop.w
 8020420:	636f4361 	.word	0x636f4361
 8020424:	3fd287a7 	.word	0x3fd287a7
 8020428:	8b60c8b3 	.word	0x8b60c8b3
 802042c:	3fc68a28 	.word	0x3fc68a28
 8020430:	509f79fb 	.word	0x509f79fb
 8020434:	3fd34413 	.word	0x3fd34413
 8020438:	7ff00000 	.word	0x7ff00000
 802043c:	080260b2 	.word	0x080260b2
 8020440:	3ff80000 	.word	0x3ff80000
 8020444:	08026170 	.word	0x08026170
 8020448:	08026148 	.word	0x08026148
 802044c:	080260de 	.word	0x080260de
 8020450:	07f1      	lsls	r1, r6, #31
 8020452:	d508      	bpl.n	8020466 <_dtoa_r+0x34e>
 8020454:	3501      	adds	r5, #1
 8020456:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 802045a:	e9d7 2300 	ldrd	r2, r3, [r7]
 802045e:	f7e0 f8b9 	bl	80005d4 <__aeabi_dmul>
 8020462:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8020466:	1076      	asrs	r6, r6, #1
 8020468:	3708      	adds	r7, #8
 802046a:	2e00      	cmp	r6, #0
 802046c:	d1f0      	bne.n	8020450 <_dtoa_r+0x338>
 802046e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8020472:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020476:	f7e0 f9d7 	bl	8000828 <__aeabi_ddiv>
 802047a:	e9cd 0100 	strd	r0, r1, [sp]
 802047e:	e01a      	b.n	80204b6 <_dtoa_r+0x39e>
 8020480:	2502      	movs	r5, #2
 8020482:	e7a1      	b.n	80203c8 <_dtoa_r+0x2b0>
 8020484:	f000 80a0 	beq.w	80205c8 <_dtoa_r+0x4b0>
 8020488:	f1ca 0600 	rsb	r6, sl, #0
 802048c:	4b9f      	ldr	r3, [pc, #636]	; (802070c <_dtoa_r+0x5f4>)
 802048e:	4fa0      	ldr	r7, [pc, #640]	; (8020710 <_dtoa_r+0x5f8>)
 8020490:	2502      	movs	r5, #2
 8020492:	f006 020f 	and.w	r2, r6, #15
 8020496:	1136      	asrs	r6, r6, #4
 8020498:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802049c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80204a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80204a4:	f7e0 f896 	bl	80005d4 <__aeabi_dmul>
 80204a8:	2300      	movs	r3, #0
 80204aa:	e9cd 0100 	strd	r0, r1, [sp]
 80204ae:	2e00      	cmp	r6, #0
 80204b0:	d17f      	bne.n	80205b2 <_dtoa_r+0x49a>
 80204b2:	2b00      	cmp	r3, #0
 80204b4:	d1e1      	bne.n	802047a <_dtoa_r+0x362>
 80204b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80204b8:	2b00      	cmp	r3, #0
 80204ba:	f000 8087 	beq.w	80205cc <_dtoa_r+0x4b4>
 80204be:	2200      	movs	r2, #0
 80204c0:	4b94      	ldr	r3, [pc, #592]	; (8020714 <_dtoa_r+0x5fc>)
 80204c2:	e9dd 6700 	ldrd	r6, r7, [sp]
 80204c6:	4630      	mov	r0, r6
 80204c8:	4639      	mov	r1, r7
 80204ca:	f7e0 faf5 	bl	8000ab8 <__aeabi_dcmplt>
 80204ce:	2800      	cmp	r0, #0
 80204d0:	d07c      	beq.n	80205cc <_dtoa_r+0x4b4>
 80204d2:	f1b9 0f00 	cmp.w	r9, #0
 80204d6:	d079      	beq.n	80205cc <_dtoa_r+0x4b4>
 80204d8:	9b02      	ldr	r3, [sp, #8]
 80204da:	2b00      	cmp	r3, #0
 80204dc:	dd35      	ble.n	802054a <_dtoa_r+0x432>
 80204de:	f10a 33ff 	add.w	r3, sl, #4294967295
 80204e2:	4639      	mov	r1, r7
 80204e4:	2200      	movs	r2, #0
 80204e6:	4630      	mov	r0, r6
 80204e8:	9308      	str	r3, [sp, #32]
 80204ea:	3501      	adds	r5, #1
 80204ec:	4b8a      	ldr	r3, [pc, #552]	; (8020718 <_dtoa_r+0x600>)
 80204ee:	f7e0 f871 	bl	80005d4 <__aeabi_dmul>
 80204f2:	9f02      	ldr	r7, [sp, #8]
 80204f4:	e9cd 0100 	strd	r0, r1, [sp]
 80204f8:	4628      	mov	r0, r5
 80204fa:	f7e0 f801 	bl	8000500 <__aeabi_i2d>
 80204fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020502:	f7e0 f867 	bl	80005d4 <__aeabi_dmul>
 8020506:	2200      	movs	r2, #0
 8020508:	4b84      	ldr	r3, [pc, #528]	; (802071c <_dtoa_r+0x604>)
 802050a:	f7df fead 	bl	8000268 <__adddf3>
 802050e:	4605      	mov	r5, r0
 8020510:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8020514:	2f00      	cmp	r7, #0
 8020516:	d15d      	bne.n	80205d4 <_dtoa_r+0x4bc>
 8020518:	2200      	movs	r2, #0
 802051a:	4b81      	ldr	r3, [pc, #516]	; (8020720 <_dtoa_r+0x608>)
 802051c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020520:	f7df fea0 	bl	8000264 <__aeabi_dsub>
 8020524:	462a      	mov	r2, r5
 8020526:	4633      	mov	r3, r6
 8020528:	e9cd 0100 	strd	r0, r1, [sp]
 802052c:	f7e0 fae2 	bl	8000af4 <__aeabi_dcmpgt>
 8020530:	2800      	cmp	r0, #0
 8020532:	f040 8287 	bne.w	8020a44 <_dtoa_r+0x92c>
 8020536:	462a      	mov	r2, r5
 8020538:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 802053c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020540:	f7e0 faba 	bl	8000ab8 <__aeabi_dcmplt>
 8020544:	2800      	cmp	r0, #0
 8020546:	f040 827b 	bne.w	8020a40 <_dtoa_r+0x928>
 802054a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 802054e:	e9cd 2300 	strd	r2, r3, [sp]
 8020552:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020554:	2b00      	cmp	r3, #0
 8020556:	f2c0 814f 	blt.w	80207f8 <_dtoa_r+0x6e0>
 802055a:	f1ba 0f0e 	cmp.w	sl, #14
 802055e:	f300 814b 	bgt.w	80207f8 <_dtoa_r+0x6e0>
 8020562:	4b6a      	ldr	r3, [pc, #424]	; (802070c <_dtoa_r+0x5f4>)
 8020564:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8020568:	ed93 7b00 	vldr	d7, [r3]
 802056c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802056e:	2b00      	cmp	r3, #0
 8020570:	ed8d 7b02 	vstr	d7, [sp, #8]
 8020574:	f280 80d8 	bge.w	8020728 <_dtoa_r+0x610>
 8020578:	f1b9 0f00 	cmp.w	r9, #0
 802057c:	f300 80d4 	bgt.w	8020728 <_dtoa_r+0x610>
 8020580:	f040 825d 	bne.w	8020a3e <_dtoa_r+0x926>
 8020584:	2200      	movs	r2, #0
 8020586:	4b66      	ldr	r3, [pc, #408]	; (8020720 <_dtoa_r+0x608>)
 8020588:	464f      	mov	r7, r9
 802058a:	464e      	mov	r6, r9
 802058c:	ec51 0b17 	vmov	r0, r1, d7
 8020590:	f7e0 f820 	bl	80005d4 <__aeabi_dmul>
 8020594:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020598:	f7e0 faa2 	bl	8000ae0 <__aeabi_dcmpge>
 802059c:	2800      	cmp	r0, #0
 802059e:	f040 8233 	bne.w	8020a08 <_dtoa_r+0x8f0>
 80205a2:	2331      	movs	r3, #49	; 0x31
 80205a4:	f10b 0501 	add.w	r5, fp, #1
 80205a8:	f10a 0a01 	add.w	sl, sl, #1
 80205ac:	f88b 3000 	strb.w	r3, [fp]
 80205b0:	e22e      	b.n	8020a10 <_dtoa_r+0x8f8>
 80205b2:	07f2      	lsls	r2, r6, #31
 80205b4:	d505      	bpl.n	80205c2 <_dtoa_r+0x4aa>
 80205b6:	3501      	adds	r5, #1
 80205b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80205bc:	f7e0 f80a 	bl	80005d4 <__aeabi_dmul>
 80205c0:	2301      	movs	r3, #1
 80205c2:	1076      	asrs	r6, r6, #1
 80205c4:	3708      	adds	r7, #8
 80205c6:	e772      	b.n	80204ae <_dtoa_r+0x396>
 80205c8:	2502      	movs	r5, #2
 80205ca:	e774      	b.n	80204b6 <_dtoa_r+0x39e>
 80205cc:	f8cd a020 	str.w	sl, [sp, #32]
 80205d0:	464f      	mov	r7, r9
 80205d2:	e791      	b.n	80204f8 <_dtoa_r+0x3e0>
 80205d4:	4b4d      	ldr	r3, [pc, #308]	; (802070c <_dtoa_r+0x5f4>)
 80205d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80205da:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80205de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80205e0:	2b00      	cmp	r3, #0
 80205e2:	d047      	beq.n	8020674 <_dtoa_r+0x55c>
 80205e4:	4602      	mov	r2, r0
 80205e6:	460b      	mov	r3, r1
 80205e8:	2000      	movs	r0, #0
 80205ea:	494e      	ldr	r1, [pc, #312]	; (8020724 <_dtoa_r+0x60c>)
 80205ec:	f7e0 f91c 	bl	8000828 <__aeabi_ddiv>
 80205f0:	462a      	mov	r2, r5
 80205f2:	465d      	mov	r5, fp
 80205f4:	4633      	mov	r3, r6
 80205f6:	f7df fe35 	bl	8000264 <__aeabi_dsub>
 80205fa:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80205fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020602:	f7e0 fa97 	bl	8000b34 <__aeabi_d2iz>
 8020606:	4606      	mov	r6, r0
 8020608:	f7df ff7a 	bl	8000500 <__aeabi_i2d>
 802060c:	4602      	mov	r2, r0
 802060e:	3630      	adds	r6, #48	; 0x30
 8020610:	460b      	mov	r3, r1
 8020612:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020616:	f7df fe25 	bl	8000264 <__aeabi_dsub>
 802061a:	f805 6b01 	strb.w	r6, [r5], #1
 802061e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8020622:	e9cd 0100 	strd	r0, r1, [sp]
 8020626:	f7e0 fa47 	bl	8000ab8 <__aeabi_dcmplt>
 802062a:	2800      	cmp	r0, #0
 802062c:	d162      	bne.n	80206f4 <_dtoa_r+0x5dc>
 802062e:	2000      	movs	r0, #0
 8020630:	4938      	ldr	r1, [pc, #224]	; (8020714 <_dtoa_r+0x5fc>)
 8020632:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020636:	f7df fe15 	bl	8000264 <__aeabi_dsub>
 802063a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 802063e:	f7e0 fa3b 	bl	8000ab8 <__aeabi_dcmplt>
 8020642:	2800      	cmp	r0, #0
 8020644:	f040 80b7 	bne.w	80207b6 <_dtoa_r+0x69e>
 8020648:	eba5 030b 	sub.w	r3, r5, fp
 802064c:	429f      	cmp	r7, r3
 802064e:	f77f af7c 	ble.w	802054a <_dtoa_r+0x432>
 8020652:	2200      	movs	r2, #0
 8020654:	4b30      	ldr	r3, [pc, #192]	; (8020718 <_dtoa_r+0x600>)
 8020656:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 802065a:	f7df ffbb 	bl	80005d4 <__aeabi_dmul>
 802065e:	2200      	movs	r2, #0
 8020660:	4b2d      	ldr	r3, [pc, #180]	; (8020718 <_dtoa_r+0x600>)
 8020662:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8020666:	e9dd 0100 	ldrd	r0, r1, [sp]
 802066a:	f7df ffb3 	bl	80005d4 <__aeabi_dmul>
 802066e:	e9cd 0100 	strd	r0, r1, [sp]
 8020672:	e7c4      	b.n	80205fe <_dtoa_r+0x4e6>
 8020674:	462a      	mov	r2, r5
 8020676:	4633      	mov	r3, r6
 8020678:	eb0b 0507 	add.w	r5, fp, r7
 802067c:	465e      	mov	r6, fp
 802067e:	f7df ffa9 	bl	80005d4 <__aeabi_dmul>
 8020682:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8020686:	e9dd 0100 	ldrd	r0, r1, [sp]
 802068a:	f7e0 fa53 	bl	8000b34 <__aeabi_d2iz>
 802068e:	4607      	mov	r7, r0
 8020690:	f7df ff36 	bl	8000500 <__aeabi_i2d>
 8020694:	4602      	mov	r2, r0
 8020696:	3730      	adds	r7, #48	; 0x30
 8020698:	460b      	mov	r3, r1
 802069a:	e9dd 0100 	ldrd	r0, r1, [sp]
 802069e:	f7df fde1 	bl	8000264 <__aeabi_dsub>
 80206a2:	f806 7b01 	strb.w	r7, [r6], #1
 80206a6:	42ae      	cmp	r6, r5
 80206a8:	f04f 0200 	mov.w	r2, #0
 80206ac:	e9cd 0100 	strd	r0, r1, [sp]
 80206b0:	d125      	bne.n	80206fe <_dtoa_r+0x5e6>
 80206b2:	4b1c      	ldr	r3, [pc, #112]	; (8020724 <_dtoa_r+0x60c>)
 80206b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80206b8:	f7df fdd6 	bl	8000268 <__adddf3>
 80206bc:	4602      	mov	r2, r0
 80206be:	460b      	mov	r3, r1
 80206c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80206c4:	f7e0 fa16 	bl	8000af4 <__aeabi_dcmpgt>
 80206c8:	2800      	cmp	r0, #0
 80206ca:	d174      	bne.n	80207b6 <_dtoa_r+0x69e>
 80206cc:	2000      	movs	r0, #0
 80206ce:	4915      	ldr	r1, [pc, #84]	; (8020724 <_dtoa_r+0x60c>)
 80206d0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80206d4:	f7df fdc6 	bl	8000264 <__aeabi_dsub>
 80206d8:	4602      	mov	r2, r0
 80206da:	460b      	mov	r3, r1
 80206dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80206e0:	f7e0 f9ea 	bl	8000ab8 <__aeabi_dcmplt>
 80206e4:	2800      	cmp	r0, #0
 80206e6:	f43f af30 	beq.w	802054a <_dtoa_r+0x432>
 80206ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80206ee:	1e6a      	subs	r2, r5, #1
 80206f0:	2b30      	cmp	r3, #48	; 0x30
 80206f2:	d002      	beq.n	80206fa <_dtoa_r+0x5e2>
 80206f4:	f8dd a020 	ldr.w	sl, [sp, #32]
 80206f8:	e04b      	b.n	8020792 <_dtoa_r+0x67a>
 80206fa:	4615      	mov	r5, r2
 80206fc:	e7f5      	b.n	80206ea <_dtoa_r+0x5d2>
 80206fe:	4b06      	ldr	r3, [pc, #24]	; (8020718 <_dtoa_r+0x600>)
 8020700:	f7df ff68 	bl	80005d4 <__aeabi_dmul>
 8020704:	e9cd 0100 	strd	r0, r1, [sp]
 8020708:	e7bd      	b.n	8020686 <_dtoa_r+0x56e>
 802070a:	bf00      	nop
 802070c:	08026170 	.word	0x08026170
 8020710:	08026148 	.word	0x08026148
 8020714:	3ff00000 	.word	0x3ff00000
 8020718:	40240000 	.word	0x40240000
 802071c:	401c0000 	.word	0x401c0000
 8020720:	40140000 	.word	0x40140000
 8020724:	3fe00000 	.word	0x3fe00000
 8020728:	e9dd 6700 	ldrd	r6, r7, [sp]
 802072c:	465d      	mov	r5, fp
 802072e:	4630      	mov	r0, r6
 8020730:	4639      	mov	r1, r7
 8020732:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020736:	f7e0 f877 	bl	8000828 <__aeabi_ddiv>
 802073a:	f7e0 f9fb 	bl	8000b34 <__aeabi_d2iz>
 802073e:	4680      	mov	r8, r0
 8020740:	f7df fede 	bl	8000500 <__aeabi_i2d>
 8020744:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020748:	f7df ff44 	bl	80005d4 <__aeabi_dmul>
 802074c:	4602      	mov	r2, r0
 802074e:	4630      	mov	r0, r6
 8020750:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8020754:	460b      	mov	r3, r1
 8020756:	4639      	mov	r1, r7
 8020758:	f7df fd84 	bl	8000264 <__aeabi_dsub>
 802075c:	f805 6b01 	strb.w	r6, [r5], #1
 8020760:	eba5 060b 	sub.w	r6, r5, fp
 8020764:	4602      	mov	r2, r0
 8020766:	460b      	mov	r3, r1
 8020768:	45b1      	cmp	r9, r6
 802076a:	d138      	bne.n	80207de <_dtoa_r+0x6c6>
 802076c:	f7df fd7c 	bl	8000268 <__adddf3>
 8020770:	4606      	mov	r6, r0
 8020772:	460f      	mov	r7, r1
 8020774:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020778:	f7e0 f9bc 	bl	8000af4 <__aeabi_dcmpgt>
 802077c:	b9c8      	cbnz	r0, 80207b2 <_dtoa_r+0x69a>
 802077e:	4630      	mov	r0, r6
 8020780:	4639      	mov	r1, r7
 8020782:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020786:	f7e0 f98d 	bl	8000aa4 <__aeabi_dcmpeq>
 802078a:	b110      	cbz	r0, 8020792 <_dtoa_r+0x67a>
 802078c:	f018 0f01 	tst.w	r8, #1
 8020790:	d10f      	bne.n	80207b2 <_dtoa_r+0x69a>
 8020792:	9904      	ldr	r1, [sp, #16]
 8020794:	4620      	mov	r0, r4
 8020796:	f000 fca1 	bl	80210dc <_Bfree>
 802079a:	2300      	movs	r3, #0
 802079c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802079e:	702b      	strb	r3, [r5, #0]
 80207a0:	f10a 0301 	add.w	r3, sl, #1
 80207a4:	6013      	str	r3, [r2, #0]
 80207a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80207a8:	2b00      	cmp	r3, #0
 80207aa:	f000 823d 	beq.w	8020c28 <_dtoa_r+0xb10>
 80207ae:	601d      	str	r5, [r3, #0]
 80207b0:	e23a      	b.n	8020c28 <_dtoa_r+0xb10>
 80207b2:	f8cd a020 	str.w	sl, [sp, #32]
 80207b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80207ba:	1e6b      	subs	r3, r5, #1
 80207bc:	2a39      	cmp	r2, #57	; 0x39
 80207be:	d108      	bne.n	80207d2 <_dtoa_r+0x6ba>
 80207c0:	459b      	cmp	fp, r3
 80207c2:	d10a      	bne.n	80207da <_dtoa_r+0x6c2>
 80207c4:	9b08      	ldr	r3, [sp, #32]
 80207c6:	3301      	adds	r3, #1
 80207c8:	9308      	str	r3, [sp, #32]
 80207ca:	2330      	movs	r3, #48	; 0x30
 80207cc:	f88b 3000 	strb.w	r3, [fp]
 80207d0:	465b      	mov	r3, fp
 80207d2:	781a      	ldrb	r2, [r3, #0]
 80207d4:	3201      	adds	r2, #1
 80207d6:	701a      	strb	r2, [r3, #0]
 80207d8:	e78c      	b.n	80206f4 <_dtoa_r+0x5dc>
 80207da:	461d      	mov	r5, r3
 80207dc:	e7eb      	b.n	80207b6 <_dtoa_r+0x69e>
 80207de:	2200      	movs	r2, #0
 80207e0:	4b9a      	ldr	r3, [pc, #616]	; (8020a4c <_dtoa_r+0x934>)
 80207e2:	f7df fef7 	bl	80005d4 <__aeabi_dmul>
 80207e6:	2200      	movs	r2, #0
 80207e8:	2300      	movs	r3, #0
 80207ea:	4606      	mov	r6, r0
 80207ec:	460f      	mov	r7, r1
 80207ee:	f7e0 f959 	bl	8000aa4 <__aeabi_dcmpeq>
 80207f2:	2800      	cmp	r0, #0
 80207f4:	d09b      	beq.n	802072e <_dtoa_r+0x616>
 80207f6:	e7cc      	b.n	8020792 <_dtoa_r+0x67a>
 80207f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80207fa:	2a00      	cmp	r2, #0
 80207fc:	f000 808b 	beq.w	8020916 <_dtoa_r+0x7fe>
 8020800:	9a06      	ldr	r2, [sp, #24]
 8020802:	2a01      	cmp	r2, #1
 8020804:	dc6e      	bgt.n	80208e4 <_dtoa_r+0x7cc>
 8020806:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020808:	2a00      	cmp	r2, #0
 802080a:	d067      	beq.n	80208dc <_dtoa_r+0x7c4>
 802080c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8020810:	9f07      	ldr	r7, [sp, #28]
 8020812:	9d05      	ldr	r5, [sp, #20]
 8020814:	9a05      	ldr	r2, [sp, #20]
 8020816:	2101      	movs	r1, #1
 8020818:	4620      	mov	r0, r4
 802081a:	4498      	add	r8, r3
 802081c:	441a      	add	r2, r3
 802081e:	9205      	str	r2, [sp, #20]
 8020820:	f000 fcfe 	bl	8021220 <__i2b>
 8020824:	4606      	mov	r6, r0
 8020826:	2d00      	cmp	r5, #0
 8020828:	dd0c      	ble.n	8020844 <_dtoa_r+0x72c>
 802082a:	f1b8 0f00 	cmp.w	r8, #0
 802082e:	dd09      	ble.n	8020844 <_dtoa_r+0x72c>
 8020830:	4545      	cmp	r5, r8
 8020832:	462b      	mov	r3, r5
 8020834:	9a05      	ldr	r2, [sp, #20]
 8020836:	bfa8      	it	ge
 8020838:	4643      	movge	r3, r8
 802083a:	1ad2      	subs	r2, r2, r3
 802083c:	1aed      	subs	r5, r5, r3
 802083e:	eba8 0803 	sub.w	r8, r8, r3
 8020842:	9205      	str	r2, [sp, #20]
 8020844:	9b07      	ldr	r3, [sp, #28]
 8020846:	b1eb      	cbz	r3, 8020884 <_dtoa_r+0x76c>
 8020848:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802084a:	2b00      	cmp	r3, #0
 802084c:	d067      	beq.n	802091e <_dtoa_r+0x806>
 802084e:	b18f      	cbz	r7, 8020874 <_dtoa_r+0x75c>
 8020850:	4631      	mov	r1, r6
 8020852:	463a      	mov	r2, r7
 8020854:	4620      	mov	r0, r4
 8020856:	f000 fd81 	bl	802135c <__pow5mult>
 802085a:	9a04      	ldr	r2, [sp, #16]
 802085c:	4601      	mov	r1, r0
 802085e:	4606      	mov	r6, r0
 8020860:	4620      	mov	r0, r4
 8020862:	f000 fce6 	bl	8021232 <__multiply>
 8020866:	9904      	ldr	r1, [sp, #16]
 8020868:	9008      	str	r0, [sp, #32]
 802086a:	4620      	mov	r0, r4
 802086c:	f000 fc36 	bl	80210dc <_Bfree>
 8020870:	9b08      	ldr	r3, [sp, #32]
 8020872:	9304      	str	r3, [sp, #16]
 8020874:	9b07      	ldr	r3, [sp, #28]
 8020876:	1bda      	subs	r2, r3, r7
 8020878:	d004      	beq.n	8020884 <_dtoa_r+0x76c>
 802087a:	9904      	ldr	r1, [sp, #16]
 802087c:	4620      	mov	r0, r4
 802087e:	f000 fd6d 	bl	802135c <__pow5mult>
 8020882:	9004      	str	r0, [sp, #16]
 8020884:	2101      	movs	r1, #1
 8020886:	4620      	mov	r0, r4
 8020888:	f000 fcca 	bl	8021220 <__i2b>
 802088c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802088e:	4607      	mov	r7, r0
 8020890:	2b00      	cmp	r3, #0
 8020892:	f000 81cd 	beq.w	8020c30 <_dtoa_r+0xb18>
 8020896:	461a      	mov	r2, r3
 8020898:	4601      	mov	r1, r0
 802089a:	4620      	mov	r0, r4
 802089c:	f000 fd5e 	bl	802135c <__pow5mult>
 80208a0:	9b06      	ldr	r3, [sp, #24]
 80208a2:	4607      	mov	r7, r0
 80208a4:	2b01      	cmp	r3, #1
 80208a6:	dc40      	bgt.n	802092a <_dtoa_r+0x812>
 80208a8:	9b00      	ldr	r3, [sp, #0]
 80208aa:	2b00      	cmp	r3, #0
 80208ac:	d139      	bne.n	8020922 <_dtoa_r+0x80a>
 80208ae:	9b01      	ldr	r3, [sp, #4]
 80208b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80208b4:	2b00      	cmp	r3, #0
 80208b6:	d136      	bne.n	8020926 <_dtoa_r+0x80e>
 80208b8:	9b01      	ldr	r3, [sp, #4]
 80208ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80208be:	0d1b      	lsrs	r3, r3, #20
 80208c0:	051b      	lsls	r3, r3, #20
 80208c2:	b12b      	cbz	r3, 80208d0 <_dtoa_r+0x7b8>
 80208c4:	9b05      	ldr	r3, [sp, #20]
 80208c6:	f108 0801 	add.w	r8, r8, #1
 80208ca:	3301      	adds	r3, #1
 80208cc:	9305      	str	r3, [sp, #20]
 80208ce:	2301      	movs	r3, #1
 80208d0:	9307      	str	r3, [sp, #28]
 80208d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80208d4:	2b00      	cmp	r3, #0
 80208d6:	d12a      	bne.n	802092e <_dtoa_r+0x816>
 80208d8:	2001      	movs	r0, #1
 80208da:	e030      	b.n	802093e <_dtoa_r+0x826>
 80208dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80208de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80208e2:	e795      	b.n	8020810 <_dtoa_r+0x6f8>
 80208e4:	9b07      	ldr	r3, [sp, #28]
 80208e6:	f109 37ff 	add.w	r7, r9, #4294967295
 80208ea:	42bb      	cmp	r3, r7
 80208ec:	bfb7      	itett	lt
 80208ee:	9b07      	ldrlt	r3, [sp, #28]
 80208f0:	1bdf      	subge	r7, r3, r7
 80208f2:	9707      	strlt	r7, [sp, #28]
 80208f4:	1afa      	sublt	r2, r7, r3
 80208f6:	bfbf      	itttt	lt
 80208f8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80208fa:	2700      	movlt	r7, #0
 80208fc:	189b      	addlt	r3, r3, r2
 80208fe:	930e      	strlt	r3, [sp, #56]	; 0x38
 8020900:	f1b9 0f00 	cmp.w	r9, #0
 8020904:	bfb3      	iteet	lt
 8020906:	9b05      	ldrlt	r3, [sp, #20]
 8020908:	464b      	movge	r3, r9
 802090a:	9d05      	ldrge	r5, [sp, #20]
 802090c:	eba3 0509 	sublt.w	r5, r3, r9
 8020910:	bfb8      	it	lt
 8020912:	2300      	movlt	r3, #0
 8020914:	e77e      	b.n	8020814 <_dtoa_r+0x6fc>
 8020916:	9f07      	ldr	r7, [sp, #28]
 8020918:	9d05      	ldr	r5, [sp, #20]
 802091a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 802091c:	e783      	b.n	8020826 <_dtoa_r+0x70e>
 802091e:	9a07      	ldr	r2, [sp, #28]
 8020920:	e7ab      	b.n	802087a <_dtoa_r+0x762>
 8020922:	2300      	movs	r3, #0
 8020924:	e7d4      	b.n	80208d0 <_dtoa_r+0x7b8>
 8020926:	9b00      	ldr	r3, [sp, #0]
 8020928:	e7d2      	b.n	80208d0 <_dtoa_r+0x7b8>
 802092a:	2300      	movs	r3, #0
 802092c:	9307      	str	r3, [sp, #28]
 802092e:	693b      	ldr	r3, [r7, #16]
 8020930:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8020934:	6918      	ldr	r0, [r3, #16]
 8020936:	f000 fc25 	bl	8021184 <__hi0bits>
 802093a:	f1c0 0020 	rsb	r0, r0, #32
 802093e:	4440      	add	r0, r8
 8020940:	f010 001f 	ands.w	r0, r0, #31
 8020944:	d047      	beq.n	80209d6 <_dtoa_r+0x8be>
 8020946:	f1c0 0320 	rsb	r3, r0, #32
 802094a:	2b04      	cmp	r3, #4
 802094c:	dd3b      	ble.n	80209c6 <_dtoa_r+0x8ae>
 802094e:	f1c0 001c 	rsb	r0, r0, #28
 8020952:	9b05      	ldr	r3, [sp, #20]
 8020954:	4405      	add	r5, r0
 8020956:	4403      	add	r3, r0
 8020958:	4480      	add	r8, r0
 802095a:	9305      	str	r3, [sp, #20]
 802095c:	9b05      	ldr	r3, [sp, #20]
 802095e:	2b00      	cmp	r3, #0
 8020960:	dd05      	ble.n	802096e <_dtoa_r+0x856>
 8020962:	461a      	mov	r2, r3
 8020964:	9904      	ldr	r1, [sp, #16]
 8020966:	4620      	mov	r0, r4
 8020968:	f000 fd46 	bl	80213f8 <__lshift>
 802096c:	9004      	str	r0, [sp, #16]
 802096e:	f1b8 0f00 	cmp.w	r8, #0
 8020972:	dd05      	ble.n	8020980 <_dtoa_r+0x868>
 8020974:	4639      	mov	r1, r7
 8020976:	4642      	mov	r2, r8
 8020978:	4620      	mov	r0, r4
 802097a:	f000 fd3d 	bl	80213f8 <__lshift>
 802097e:	4607      	mov	r7, r0
 8020980:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020982:	b353      	cbz	r3, 80209da <_dtoa_r+0x8c2>
 8020984:	4639      	mov	r1, r7
 8020986:	9804      	ldr	r0, [sp, #16]
 8020988:	f000 fd8a 	bl	80214a0 <__mcmp>
 802098c:	2800      	cmp	r0, #0
 802098e:	da24      	bge.n	80209da <_dtoa_r+0x8c2>
 8020990:	2300      	movs	r3, #0
 8020992:	220a      	movs	r2, #10
 8020994:	9904      	ldr	r1, [sp, #16]
 8020996:	4620      	mov	r0, r4
 8020998:	f000 fbb7 	bl	802110a <__multadd>
 802099c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802099e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80209a2:	9004      	str	r0, [sp, #16]
 80209a4:	2b00      	cmp	r3, #0
 80209a6:	f000 814a 	beq.w	8020c3e <_dtoa_r+0xb26>
 80209aa:	2300      	movs	r3, #0
 80209ac:	4631      	mov	r1, r6
 80209ae:	220a      	movs	r2, #10
 80209b0:	4620      	mov	r0, r4
 80209b2:	f000 fbaa 	bl	802110a <__multadd>
 80209b6:	9b02      	ldr	r3, [sp, #8]
 80209b8:	4606      	mov	r6, r0
 80209ba:	2b00      	cmp	r3, #0
 80209bc:	dc4e      	bgt.n	8020a5c <_dtoa_r+0x944>
 80209be:	9b06      	ldr	r3, [sp, #24]
 80209c0:	2b02      	cmp	r3, #2
 80209c2:	dd4b      	ble.n	8020a5c <_dtoa_r+0x944>
 80209c4:	e011      	b.n	80209ea <_dtoa_r+0x8d2>
 80209c6:	d0c9      	beq.n	802095c <_dtoa_r+0x844>
 80209c8:	331c      	adds	r3, #28
 80209ca:	9a05      	ldr	r2, [sp, #20]
 80209cc:	441a      	add	r2, r3
 80209ce:	441d      	add	r5, r3
 80209d0:	4498      	add	r8, r3
 80209d2:	9205      	str	r2, [sp, #20]
 80209d4:	e7c2      	b.n	802095c <_dtoa_r+0x844>
 80209d6:	4603      	mov	r3, r0
 80209d8:	e7f6      	b.n	80209c8 <_dtoa_r+0x8b0>
 80209da:	f1b9 0f00 	cmp.w	r9, #0
 80209de:	dc37      	bgt.n	8020a50 <_dtoa_r+0x938>
 80209e0:	9b06      	ldr	r3, [sp, #24]
 80209e2:	2b02      	cmp	r3, #2
 80209e4:	dd34      	ble.n	8020a50 <_dtoa_r+0x938>
 80209e6:	f8cd 9008 	str.w	r9, [sp, #8]
 80209ea:	9b02      	ldr	r3, [sp, #8]
 80209ec:	b963      	cbnz	r3, 8020a08 <_dtoa_r+0x8f0>
 80209ee:	4639      	mov	r1, r7
 80209f0:	2205      	movs	r2, #5
 80209f2:	4620      	mov	r0, r4
 80209f4:	f000 fb89 	bl	802110a <__multadd>
 80209f8:	4601      	mov	r1, r0
 80209fa:	4607      	mov	r7, r0
 80209fc:	9804      	ldr	r0, [sp, #16]
 80209fe:	f000 fd4f 	bl	80214a0 <__mcmp>
 8020a02:	2800      	cmp	r0, #0
 8020a04:	f73f adcd 	bgt.w	80205a2 <_dtoa_r+0x48a>
 8020a08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020a0a:	465d      	mov	r5, fp
 8020a0c:	ea6f 0a03 	mvn.w	sl, r3
 8020a10:	f04f 0900 	mov.w	r9, #0
 8020a14:	4639      	mov	r1, r7
 8020a16:	4620      	mov	r0, r4
 8020a18:	f000 fb60 	bl	80210dc <_Bfree>
 8020a1c:	2e00      	cmp	r6, #0
 8020a1e:	f43f aeb8 	beq.w	8020792 <_dtoa_r+0x67a>
 8020a22:	f1b9 0f00 	cmp.w	r9, #0
 8020a26:	d005      	beq.n	8020a34 <_dtoa_r+0x91c>
 8020a28:	45b1      	cmp	r9, r6
 8020a2a:	d003      	beq.n	8020a34 <_dtoa_r+0x91c>
 8020a2c:	4649      	mov	r1, r9
 8020a2e:	4620      	mov	r0, r4
 8020a30:	f000 fb54 	bl	80210dc <_Bfree>
 8020a34:	4631      	mov	r1, r6
 8020a36:	4620      	mov	r0, r4
 8020a38:	f000 fb50 	bl	80210dc <_Bfree>
 8020a3c:	e6a9      	b.n	8020792 <_dtoa_r+0x67a>
 8020a3e:	2700      	movs	r7, #0
 8020a40:	463e      	mov	r6, r7
 8020a42:	e7e1      	b.n	8020a08 <_dtoa_r+0x8f0>
 8020a44:	f8dd a020 	ldr.w	sl, [sp, #32]
 8020a48:	463e      	mov	r6, r7
 8020a4a:	e5aa      	b.n	80205a2 <_dtoa_r+0x48a>
 8020a4c:	40240000 	.word	0x40240000
 8020a50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020a52:	f8cd 9008 	str.w	r9, [sp, #8]
 8020a56:	2b00      	cmp	r3, #0
 8020a58:	f000 80f8 	beq.w	8020c4c <_dtoa_r+0xb34>
 8020a5c:	2d00      	cmp	r5, #0
 8020a5e:	dd05      	ble.n	8020a6c <_dtoa_r+0x954>
 8020a60:	4631      	mov	r1, r6
 8020a62:	462a      	mov	r2, r5
 8020a64:	4620      	mov	r0, r4
 8020a66:	f000 fcc7 	bl	80213f8 <__lshift>
 8020a6a:	4606      	mov	r6, r0
 8020a6c:	9b07      	ldr	r3, [sp, #28]
 8020a6e:	2b00      	cmp	r3, #0
 8020a70:	d04c      	beq.n	8020b0c <_dtoa_r+0x9f4>
 8020a72:	6871      	ldr	r1, [r6, #4]
 8020a74:	4620      	mov	r0, r4
 8020a76:	f000 fafd 	bl	8021074 <_Balloc>
 8020a7a:	6932      	ldr	r2, [r6, #16]
 8020a7c:	4605      	mov	r5, r0
 8020a7e:	f106 010c 	add.w	r1, r6, #12
 8020a82:	3202      	adds	r2, #2
 8020a84:	300c      	adds	r0, #12
 8020a86:	0092      	lsls	r2, r2, #2
 8020a88:	f7fe faaa 	bl	801efe0 <memcpy>
 8020a8c:	2201      	movs	r2, #1
 8020a8e:	4629      	mov	r1, r5
 8020a90:	4620      	mov	r0, r4
 8020a92:	f000 fcb1 	bl	80213f8 <__lshift>
 8020a96:	9b00      	ldr	r3, [sp, #0]
 8020a98:	46b1      	mov	r9, r6
 8020a9a:	4606      	mov	r6, r0
 8020a9c:	f8cd b014 	str.w	fp, [sp, #20]
 8020aa0:	f003 0301 	and.w	r3, r3, #1
 8020aa4:	9307      	str	r3, [sp, #28]
 8020aa6:	4639      	mov	r1, r7
 8020aa8:	9804      	ldr	r0, [sp, #16]
 8020aaa:	f7ff faa5 	bl	801fff8 <quorem>
 8020aae:	4649      	mov	r1, r9
 8020ab0:	4605      	mov	r5, r0
 8020ab2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8020ab6:	9804      	ldr	r0, [sp, #16]
 8020ab8:	f000 fcf2 	bl	80214a0 <__mcmp>
 8020abc:	4632      	mov	r2, r6
 8020abe:	9000      	str	r0, [sp, #0]
 8020ac0:	4639      	mov	r1, r7
 8020ac2:	4620      	mov	r0, r4
 8020ac4:	f000 fd06 	bl	80214d4 <__mdiff>
 8020ac8:	68c3      	ldr	r3, [r0, #12]
 8020aca:	4602      	mov	r2, r0
 8020acc:	bb03      	cbnz	r3, 8020b10 <_dtoa_r+0x9f8>
 8020ace:	4601      	mov	r1, r0
 8020ad0:	9008      	str	r0, [sp, #32]
 8020ad2:	9804      	ldr	r0, [sp, #16]
 8020ad4:	f000 fce4 	bl	80214a0 <__mcmp>
 8020ad8:	9a08      	ldr	r2, [sp, #32]
 8020ada:	4603      	mov	r3, r0
 8020adc:	4611      	mov	r1, r2
 8020ade:	4620      	mov	r0, r4
 8020ae0:	9308      	str	r3, [sp, #32]
 8020ae2:	f000 fafb 	bl	80210dc <_Bfree>
 8020ae6:	9b08      	ldr	r3, [sp, #32]
 8020ae8:	b9a3      	cbnz	r3, 8020b14 <_dtoa_r+0x9fc>
 8020aea:	9a06      	ldr	r2, [sp, #24]
 8020aec:	b992      	cbnz	r2, 8020b14 <_dtoa_r+0x9fc>
 8020aee:	9a07      	ldr	r2, [sp, #28]
 8020af0:	b982      	cbnz	r2, 8020b14 <_dtoa_r+0x9fc>
 8020af2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8020af6:	d029      	beq.n	8020b4c <_dtoa_r+0xa34>
 8020af8:	9b00      	ldr	r3, [sp, #0]
 8020afa:	2b00      	cmp	r3, #0
 8020afc:	dd01      	ble.n	8020b02 <_dtoa_r+0x9ea>
 8020afe:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8020b02:	9b05      	ldr	r3, [sp, #20]
 8020b04:	1c5d      	adds	r5, r3, #1
 8020b06:	f883 8000 	strb.w	r8, [r3]
 8020b0a:	e783      	b.n	8020a14 <_dtoa_r+0x8fc>
 8020b0c:	4630      	mov	r0, r6
 8020b0e:	e7c2      	b.n	8020a96 <_dtoa_r+0x97e>
 8020b10:	2301      	movs	r3, #1
 8020b12:	e7e3      	b.n	8020adc <_dtoa_r+0x9c4>
 8020b14:	9a00      	ldr	r2, [sp, #0]
 8020b16:	2a00      	cmp	r2, #0
 8020b18:	db04      	blt.n	8020b24 <_dtoa_r+0xa0c>
 8020b1a:	d124      	bne.n	8020b66 <_dtoa_r+0xa4e>
 8020b1c:	9a06      	ldr	r2, [sp, #24]
 8020b1e:	bb12      	cbnz	r2, 8020b66 <_dtoa_r+0xa4e>
 8020b20:	9a07      	ldr	r2, [sp, #28]
 8020b22:	bb02      	cbnz	r2, 8020b66 <_dtoa_r+0xa4e>
 8020b24:	2b00      	cmp	r3, #0
 8020b26:	ddec      	ble.n	8020b02 <_dtoa_r+0x9ea>
 8020b28:	2201      	movs	r2, #1
 8020b2a:	9904      	ldr	r1, [sp, #16]
 8020b2c:	4620      	mov	r0, r4
 8020b2e:	f000 fc63 	bl	80213f8 <__lshift>
 8020b32:	4639      	mov	r1, r7
 8020b34:	9004      	str	r0, [sp, #16]
 8020b36:	f000 fcb3 	bl	80214a0 <__mcmp>
 8020b3a:	2800      	cmp	r0, #0
 8020b3c:	dc03      	bgt.n	8020b46 <_dtoa_r+0xa2e>
 8020b3e:	d1e0      	bne.n	8020b02 <_dtoa_r+0x9ea>
 8020b40:	f018 0f01 	tst.w	r8, #1
 8020b44:	d0dd      	beq.n	8020b02 <_dtoa_r+0x9ea>
 8020b46:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8020b4a:	d1d8      	bne.n	8020afe <_dtoa_r+0x9e6>
 8020b4c:	9b05      	ldr	r3, [sp, #20]
 8020b4e:	9a05      	ldr	r2, [sp, #20]
 8020b50:	1c5d      	adds	r5, r3, #1
 8020b52:	2339      	movs	r3, #57	; 0x39
 8020b54:	7013      	strb	r3, [r2, #0]
 8020b56:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8020b5a:	1e6a      	subs	r2, r5, #1
 8020b5c:	2b39      	cmp	r3, #57	; 0x39
 8020b5e:	d04e      	beq.n	8020bfe <_dtoa_r+0xae6>
 8020b60:	3301      	adds	r3, #1
 8020b62:	7013      	strb	r3, [r2, #0]
 8020b64:	e756      	b.n	8020a14 <_dtoa_r+0x8fc>
 8020b66:	9a05      	ldr	r2, [sp, #20]
 8020b68:	2b00      	cmp	r3, #0
 8020b6a:	f102 0501 	add.w	r5, r2, #1
 8020b6e:	dd06      	ble.n	8020b7e <_dtoa_r+0xa66>
 8020b70:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8020b74:	d0ea      	beq.n	8020b4c <_dtoa_r+0xa34>
 8020b76:	f108 0801 	add.w	r8, r8, #1
 8020b7a:	9b05      	ldr	r3, [sp, #20]
 8020b7c:	e7c3      	b.n	8020b06 <_dtoa_r+0x9ee>
 8020b7e:	eba5 030b 	sub.w	r3, r5, fp
 8020b82:	9a02      	ldr	r2, [sp, #8]
 8020b84:	f805 8c01 	strb.w	r8, [r5, #-1]
 8020b88:	4293      	cmp	r3, r2
 8020b8a:	d021      	beq.n	8020bd0 <_dtoa_r+0xab8>
 8020b8c:	2300      	movs	r3, #0
 8020b8e:	220a      	movs	r2, #10
 8020b90:	9904      	ldr	r1, [sp, #16]
 8020b92:	4620      	mov	r0, r4
 8020b94:	f000 fab9 	bl	802110a <__multadd>
 8020b98:	45b1      	cmp	r9, r6
 8020b9a:	9004      	str	r0, [sp, #16]
 8020b9c:	f04f 0300 	mov.w	r3, #0
 8020ba0:	f04f 020a 	mov.w	r2, #10
 8020ba4:	4649      	mov	r1, r9
 8020ba6:	4620      	mov	r0, r4
 8020ba8:	d105      	bne.n	8020bb6 <_dtoa_r+0xa9e>
 8020baa:	f000 faae 	bl	802110a <__multadd>
 8020bae:	4681      	mov	r9, r0
 8020bb0:	4606      	mov	r6, r0
 8020bb2:	9505      	str	r5, [sp, #20]
 8020bb4:	e777      	b.n	8020aa6 <_dtoa_r+0x98e>
 8020bb6:	f000 faa8 	bl	802110a <__multadd>
 8020bba:	4631      	mov	r1, r6
 8020bbc:	4681      	mov	r9, r0
 8020bbe:	2300      	movs	r3, #0
 8020bc0:	220a      	movs	r2, #10
 8020bc2:	4620      	mov	r0, r4
 8020bc4:	f000 faa1 	bl	802110a <__multadd>
 8020bc8:	4606      	mov	r6, r0
 8020bca:	e7f2      	b.n	8020bb2 <_dtoa_r+0xa9a>
 8020bcc:	f04f 0900 	mov.w	r9, #0
 8020bd0:	2201      	movs	r2, #1
 8020bd2:	9904      	ldr	r1, [sp, #16]
 8020bd4:	4620      	mov	r0, r4
 8020bd6:	f000 fc0f 	bl	80213f8 <__lshift>
 8020bda:	4639      	mov	r1, r7
 8020bdc:	9004      	str	r0, [sp, #16]
 8020bde:	f000 fc5f 	bl	80214a0 <__mcmp>
 8020be2:	2800      	cmp	r0, #0
 8020be4:	dcb7      	bgt.n	8020b56 <_dtoa_r+0xa3e>
 8020be6:	d102      	bne.n	8020bee <_dtoa_r+0xad6>
 8020be8:	f018 0f01 	tst.w	r8, #1
 8020bec:	d1b3      	bne.n	8020b56 <_dtoa_r+0xa3e>
 8020bee:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8020bf2:	1e6a      	subs	r2, r5, #1
 8020bf4:	2b30      	cmp	r3, #48	; 0x30
 8020bf6:	f47f af0d 	bne.w	8020a14 <_dtoa_r+0x8fc>
 8020bfa:	4615      	mov	r5, r2
 8020bfc:	e7f7      	b.n	8020bee <_dtoa_r+0xad6>
 8020bfe:	4593      	cmp	fp, r2
 8020c00:	d105      	bne.n	8020c0e <_dtoa_r+0xaf6>
 8020c02:	2331      	movs	r3, #49	; 0x31
 8020c04:	f10a 0a01 	add.w	sl, sl, #1
 8020c08:	f88b 3000 	strb.w	r3, [fp]
 8020c0c:	e702      	b.n	8020a14 <_dtoa_r+0x8fc>
 8020c0e:	4615      	mov	r5, r2
 8020c10:	e7a1      	b.n	8020b56 <_dtoa_r+0xa3e>
 8020c12:	f8df b064 	ldr.w	fp, [pc, #100]	; 8020c78 <_dtoa_r+0xb60>
 8020c16:	e007      	b.n	8020c28 <_dtoa_r+0xb10>
 8020c18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020c1a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8020c7c <_dtoa_r+0xb64>
 8020c1e:	b11b      	cbz	r3, 8020c28 <_dtoa_r+0xb10>
 8020c20:	f10b 0308 	add.w	r3, fp, #8
 8020c24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8020c26:	6013      	str	r3, [r2, #0]
 8020c28:	4658      	mov	r0, fp
 8020c2a:	b017      	add	sp, #92	; 0x5c
 8020c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020c30:	9b06      	ldr	r3, [sp, #24]
 8020c32:	2b01      	cmp	r3, #1
 8020c34:	f77f ae38 	ble.w	80208a8 <_dtoa_r+0x790>
 8020c38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020c3a:	9307      	str	r3, [sp, #28]
 8020c3c:	e64c      	b.n	80208d8 <_dtoa_r+0x7c0>
 8020c3e:	9b02      	ldr	r3, [sp, #8]
 8020c40:	2b00      	cmp	r3, #0
 8020c42:	dc03      	bgt.n	8020c4c <_dtoa_r+0xb34>
 8020c44:	9b06      	ldr	r3, [sp, #24]
 8020c46:	2b02      	cmp	r3, #2
 8020c48:	f73f aecf 	bgt.w	80209ea <_dtoa_r+0x8d2>
 8020c4c:	465d      	mov	r5, fp
 8020c4e:	4639      	mov	r1, r7
 8020c50:	9804      	ldr	r0, [sp, #16]
 8020c52:	f7ff f9d1 	bl	801fff8 <quorem>
 8020c56:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8020c5a:	9a02      	ldr	r2, [sp, #8]
 8020c5c:	f805 8b01 	strb.w	r8, [r5], #1
 8020c60:	eba5 030b 	sub.w	r3, r5, fp
 8020c64:	429a      	cmp	r2, r3
 8020c66:	ddb1      	ble.n	8020bcc <_dtoa_r+0xab4>
 8020c68:	2300      	movs	r3, #0
 8020c6a:	220a      	movs	r2, #10
 8020c6c:	9904      	ldr	r1, [sp, #16]
 8020c6e:	4620      	mov	r0, r4
 8020c70:	f000 fa4b 	bl	802110a <__multadd>
 8020c74:	9004      	str	r0, [sp, #16]
 8020c76:	e7ea      	b.n	8020c4e <_dtoa_r+0xb36>
 8020c78:	080260b1 	.word	0x080260b1
 8020c7c:	080260d5 	.word	0x080260d5

08020c80 <__sflush_r>:
 8020c80:	898a      	ldrh	r2, [r1, #12]
 8020c82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020c86:	4605      	mov	r5, r0
 8020c88:	0710      	lsls	r0, r2, #28
 8020c8a:	460c      	mov	r4, r1
 8020c8c:	d458      	bmi.n	8020d40 <__sflush_r+0xc0>
 8020c8e:	684b      	ldr	r3, [r1, #4]
 8020c90:	2b00      	cmp	r3, #0
 8020c92:	dc05      	bgt.n	8020ca0 <__sflush_r+0x20>
 8020c94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8020c96:	2b00      	cmp	r3, #0
 8020c98:	dc02      	bgt.n	8020ca0 <__sflush_r+0x20>
 8020c9a:	2000      	movs	r0, #0
 8020c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020ca0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020ca2:	2e00      	cmp	r6, #0
 8020ca4:	d0f9      	beq.n	8020c9a <__sflush_r+0x1a>
 8020ca6:	2300      	movs	r3, #0
 8020ca8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8020cac:	682f      	ldr	r7, [r5, #0]
 8020cae:	6a21      	ldr	r1, [r4, #32]
 8020cb0:	602b      	str	r3, [r5, #0]
 8020cb2:	d032      	beq.n	8020d1a <__sflush_r+0x9a>
 8020cb4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8020cb6:	89a3      	ldrh	r3, [r4, #12]
 8020cb8:	075a      	lsls	r2, r3, #29
 8020cba:	d505      	bpl.n	8020cc8 <__sflush_r+0x48>
 8020cbc:	6863      	ldr	r3, [r4, #4]
 8020cbe:	1ac0      	subs	r0, r0, r3
 8020cc0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020cc2:	b10b      	cbz	r3, 8020cc8 <__sflush_r+0x48>
 8020cc4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8020cc6:	1ac0      	subs	r0, r0, r3
 8020cc8:	2300      	movs	r3, #0
 8020cca:	4602      	mov	r2, r0
 8020ccc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020cce:	4628      	mov	r0, r5
 8020cd0:	6a21      	ldr	r1, [r4, #32]
 8020cd2:	47b0      	blx	r6
 8020cd4:	1c43      	adds	r3, r0, #1
 8020cd6:	89a3      	ldrh	r3, [r4, #12]
 8020cd8:	d106      	bne.n	8020ce8 <__sflush_r+0x68>
 8020cda:	6829      	ldr	r1, [r5, #0]
 8020cdc:	291d      	cmp	r1, #29
 8020cde:	d847      	bhi.n	8020d70 <__sflush_r+0xf0>
 8020ce0:	4a28      	ldr	r2, [pc, #160]	; (8020d84 <__sflush_r+0x104>)
 8020ce2:	40ca      	lsrs	r2, r1
 8020ce4:	07d6      	lsls	r6, r2, #31
 8020ce6:	d543      	bpl.n	8020d70 <__sflush_r+0xf0>
 8020ce8:	2200      	movs	r2, #0
 8020cea:	04d9      	lsls	r1, r3, #19
 8020cec:	6062      	str	r2, [r4, #4]
 8020cee:	6922      	ldr	r2, [r4, #16]
 8020cf0:	6022      	str	r2, [r4, #0]
 8020cf2:	d504      	bpl.n	8020cfe <__sflush_r+0x7e>
 8020cf4:	1c42      	adds	r2, r0, #1
 8020cf6:	d101      	bne.n	8020cfc <__sflush_r+0x7c>
 8020cf8:	682b      	ldr	r3, [r5, #0]
 8020cfa:	b903      	cbnz	r3, 8020cfe <__sflush_r+0x7e>
 8020cfc:	6560      	str	r0, [r4, #84]	; 0x54
 8020cfe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020d00:	602f      	str	r7, [r5, #0]
 8020d02:	2900      	cmp	r1, #0
 8020d04:	d0c9      	beq.n	8020c9a <__sflush_r+0x1a>
 8020d06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020d0a:	4299      	cmp	r1, r3
 8020d0c:	d002      	beq.n	8020d14 <__sflush_r+0x94>
 8020d0e:	4628      	mov	r0, r5
 8020d10:	f7fe f992 	bl	801f038 <_free_r>
 8020d14:	2000      	movs	r0, #0
 8020d16:	6360      	str	r0, [r4, #52]	; 0x34
 8020d18:	e7c0      	b.n	8020c9c <__sflush_r+0x1c>
 8020d1a:	2301      	movs	r3, #1
 8020d1c:	4628      	mov	r0, r5
 8020d1e:	47b0      	blx	r6
 8020d20:	1c41      	adds	r1, r0, #1
 8020d22:	d1c8      	bne.n	8020cb6 <__sflush_r+0x36>
 8020d24:	682b      	ldr	r3, [r5, #0]
 8020d26:	2b00      	cmp	r3, #0
 8020d28:	d0c5      	beq.n	8020cb6 <__sflush_r+0x36>
 8020d2a:	2b1d      	cmp	r3, #29
 8020d2c:	d001      	beq.n	8020d32 <__sflush_r+0xb2>
 8020d2e:	2b16      	cmp	r3, #22
 8020d30:	d101      	bne.n	8020d36 <__sflush_r+0xb6>
 8020d32:	602f      	str	r7, [r5, #0]
 8020d34:	e7b1      	b.n	8020c9a <__sflush_r+0x1a>
 8020d36:	89a3      	ldrh	r3, [r4, #12]
 8020d38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020d3c:	81a3      	strh	r3, [r4, #12]
 8020d3e:	e7ad      	b.n	8020c9c <__sflush_r+0x1c>
 8020d40:	690f      	ldr	r7, [r1, #16]
 8020d42:	2f00      	cmp	r7, #0
 8020d44:	d0a9      	beq.n	8020c9a <__sflush_r+0x1a>
 8020d46:	0793      	lsls	r3, r2, #30
 8020d48:	680e      	ldr	r6, [r1, #0]
 8020d4a:	600f      	str	r7, [r1, #0]
 8020d4c:	bf0c      	ite	eq
 8020d4e:	694b      	ldreq	r3, [r1, #20]
 8020d50:	2300      	movne	r3, #0
 8020d52:	eba6 0807 	sub.w	r8, r6, r7
 8020d56:	608b      	str	r3, [r1, #8]
 8020d58:	f1b8 0f00 	cmp.w	r8, #0
 8020d5c:	dd9d      	ble.n	8020c9a <__sflush_r+0x1a>
 8020d5e:	4643      	mov	r3, r8
 8020d60:	463a      	mov	r2, r7
 8020d62:	6a21      	ldr	r1, [r4, #32]
 8020d64:	4628      	mov	r0, r5
 8020d66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8020d68:	47b0      	blx	r6
 8020d6a:	2800      	cmp	r0, #0
 8020d6c:	dc06      	bgt.n	8020d7c <__sflush_r+0xfc>
 8020d6e:	89a3      	ldrh	r3, [r4, #12]
 8020d70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020d74:	f04f 30ff 	mov.w	r0, #4294967295
 8020d78:	81a3      	strh	r3, [r4, #12]
 8020d7a:	e78f      	b.n	8020c9c <__sflush_r+0x1c>
 8020d7c:	4407      	add	r7, r0
 8020d7e:	eba8 0800 	sub.w	r8, r8, r0
 8020d82:	e7e9      	b.n	8020d58 <__sflush_r+0xd8>
 8020d84:	20400001 	.word	0x20400001

08020d88 <_fflush_r>:
 8020d88:	b538      	push	{r3, r4, r5, lr}
 8020d8a:	690b      	ldr	r3, [r1, #16]
 8020d8c:	4605      	mov	r5, r0
 8020d8e:	460c      	mov	r4, r1
 8020d90:	b1db      	cbz	r3, 8020dca <_fflush_r+0x42>
 8020d92:	b118      	cbz	r0, 8020d9c <_fflush_r+0x14>
 8020d94:	6983      	ldr	r3, [r0, #24]
 8020d96:	b90b      	cbnz	r3, 8020d9c <_fflush_r+0x14>
 8020d98:	f000 f860 	bl	8020e5c <__sinit>
 8020d9c:	4b0c      	ldr	r3, [pc, #48]	; (8020dd0 <_fflush_r+0x48>)
 8020d9e:	429c      	cmp	r4, r3
 8020da0:	d109      	bne.n	8020db6 <_fflush_r+0x2e>
 8020da2:	686c      	ldr	r4, [r5, #4]
 8020da4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020da8:	b17b      	cbz	r3, 8020dca <_fflush_r+0x42>
 8020daa:	4621      	mov	r1, r4
 8020dac:	4628      	mov	r0, r5
 8020dae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020db2:	f7ff bf65 	b.w	8020c80 <__sflush_r>
 8020db6:	4b07      	ldr	r3, [pc, #28]	; (8020dd4 <_fflush_r+0x4c>)
 8020db8:	429c      	cmp	r4, r3
 8020dba:	d101      	bne.n	8020dc0 <_fflush_r+0x38>
 8020dbc:	68ac      	ldr	r4, [r5, #8]
 8020dbe:	e7f1      	b.n	8020da4 <_fflush_r+0x1c>
 8020dc0:	4b05      	ldr	r3, [pc, #20]	; (8020dd8 <_fflush_r+0x50>)
 8020dc2:	429c      	cmp	r4, r3
 8020dc4:	bf08      	it	eq
 8020dc6:	68ec      	ldreq	r4, [r5, #12]
 8020dc8:	e7ec      	b.n	8020da4 <_fflush_r+0x1c>
 8020dca:	2000      	movs	r0, #0
 8020dcc:	bd38      	pop	{r3, r4, r5, pc}
 8020dce:	bf00      	nop
 8020dd0:	08026104 	.word	0x08026104
 8020dd4:	08026124 	.word	0x08026124
 8020dd8:	080260e4 	.word	0x080260e4

08020ddc <std>:
 8020ddc:	2300      	movs	r3, #0
 8020dde:	b510      	push	{r4, lr}
 8020de0:	4604      	mov	r4, r0
 8020de2:	6083      	str	r3, [r0, #8]
 8020de4:	8181      	strh	r1, [r0, #12]
 8020de6:	4619      	mov	r1, r3
 8020de8:	6643      	str	r3, [r0, #100]	; 0x64
 8020dea:	81c2      	strh	r2, [r0, #14]
 8020dec:	2208      	movs	r2, #8
 8020dee:	6183      	str	r3, [r0, #24]
 8020df0:	e9c0 3300 	strd	r3, r3, [r0]
 8020df4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8020df8:	305c      	adds	r0, #92	; 0x5c
 8020dfa:	f7fe f915 	bl	801f028 <memset>
 8020dfe:	4b05      	ldr	r3, [pc, #20]	; (8020e14 <std+0x38>)
 8020e00:	6224      	str	r4, [r4, #32]
 8020e02:	6263      	str	r3, [r4, #36]	; 0x24
 8020e04:	4b04      	ldr	r3, [pc, #16]	; (8020e18 <std+0x3c>)
 8020e06:	62a3      	str	r3, [r4, #40]	; 0x28
 8020e08:	4b04      	ldr	r3, [pc, #16]	; (8020e1c <std+0x40>)
 8020e0a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8020e0c:	4b04      	ldr	r3, [pc, #16]	; (8020e20 <std+0x44>)
 8020e0e:	6323      	str	r3, [r4, #48]	; 0x30
 8020e10:	bd10      	pop	{r4, pc}
 8020e12:	bf00      	nop
 8020e14:	08021941 	.word	0x08021941
 8020e18:	08021963 	.word	0x08021963
 8020e1c:	0802199b 	.word	0x0802199b
 8020e20:	080219bf 	.word	0x080219bf

08020e24 <_cleanup_r>:
 8020e24:	4901      	ldr	r1, [pc, #4]	; (8020e2c <_cleanup_r+0x8>)
 8020e26:	f000 b885 	b.w	8020f34 <_fwalk_reent>
 8020e2a:	bf00      	nop
 8020e2c:	08020d89 	.word	0x08020d89

08020e30 <__sfmoreglue>:
 8020e30:	b570      	push	{r4, r5, r6, lr}
 8020e32:	1e4a      	subs	r2, r1, #1
 8020e34:	2568      	movs	r5, #104	; 0x68
 8020e36:	460e      	mov	r6, r1
 8020e38:	4355      	muls	r5, r2
 8020e3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8020e3e:	f7fe f949 	bl	801f0d4 <_malloc_r>
 8020e42:	4604      	mov	r4, r0
 8020e44:	b140      	cbz	r0, 8020e58 <__sfmoreglue+0x28>
 8020e46:	2100      	movs	r1, #0
 8020e48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8020e4c:	e9c0 1600 	strd	r1, r6, [r0]
 8020e50:	300c      	adds	r0, #12
 8020e52:	60a0      	str	r0, [r4, #8]
 8020e54:	f7fe f8e8 	bl	801f028 <memset>
 8020e58:	4620      	mov	r0, r4
 8020e5a:	bd70      	pop	{r4, r5, r6, pc}

08020e5c <__sinit>:
 8020e5c:	6983      	ldr	r3, [r0, #24]
 8020e5e:	b510      	push	{r4, lr}
 8020e60:	4604      	mov	r4, r0
 8020e62:	bb33      	cbnz	r3, 8020eb2 <__sinit+0x56>
 8020e64:	6503      	str	r3, [r0, #80]	; 0x50
 8020e66:	4a13      	ldr	r2, [pc, #76]	; (8020eb4 <__sinit+0x58>)
 8020e68:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8020e6c:	4b12      	ldr	r3, [pc, #72]	; (8020eb8 <__sinit+0x5c>)
 8020e6e:	6282      	str	r2, [r0, #40]	; 0x28
 8020e70:	681b      	ldr	r3, [r3, #0]
 8020e72:	4298      	cmp	r0, r3
 8020e74:	bf04      	itt	eq
 8020e76:	2301      	moveq	r3, #1
 8020e78:	6183      	streq	r3, [r0, #24]
 8020e7a:	f000 f81f 	bl	8020ebc <__sfp>
 8020e7e:	6060      	str	r0, [r4, #4]
 8020e80:	4620      	mov	r0, r4
 8020e82:	f000 f81b 	bl	8020ebc <__sfp>
 8020e86:	60a0      	str	r0, [r4, #8]
 8020e88:	4620      	mov	r0, r4
 8020e8a:	f000 f817 	bl	8020ebc <__sfp>
 8020e8e:	2200      	movs	r2, #0
 8020e90:	60e0      	str	r0, [r4, #12]
 8020e92:	2104      	movs	r1, #4
 8020e94:	6860      	ldr	r0, [r4, #4]
 8020e96:	f7ff ffa1 	bl	8020ddc <std>
 8020e9a:	2201      	movs	r2, #1
 8020e9c:	2109      	movs	r1, #9
 8020e9e:	68a0      	ldr	r0, [r4, #8]
 8020ea0:	f7ff ff9c 	bl	8020ddc <std>
 8020ea4:	2202      	movs	r2, #2
 8020ea6:	2112      	movs	r1, #18
 8020ea8:	68e0      	ldr	r0, [r4, #12]
 8020eaa:	f7ff ff97 	bl	8020ddc <std>
 8020eae:	2301      	movs	r3, #1
 8020eb0:	61a3      	str	r3, [r4, #24]
 8020eb2:	bd10      	pop	{r4, pc}
 8020eb4:	08020e25 	.word	0x08020e25
 8020eb8:	0802608c 	.word	0x0802608c

08020ebc <__sfp>:
 8020ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020ebe:	4b1b      	ldr	r3, [pc, #108]	; (8020f2c <__sfp+0x70>)
 8020ec0:	4607      	mov	r7, r0
 8020ec2:	681e      	ldr	r6, [r3, #0]
 8020ec4:	69b3      	ldr	r3, [r6, #24]
 8020ec6:	b913      	cbnz	r3, 8020ece <__sfp+0x12>
 8020ec8:	4630      	mov	r0, r6
 8020eca:	f7ff ffc7 	bl	8020e5c <__sinit>
 8020ece:	3648      	adds	r6, #72	; 0x48
 8020ed0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8020ed4:	3b01      	subs	r3, #1
 8020ed6:	d503      	bpl.n	8020ee0 <__sfp+0x24>
 8020ed8:	6833      	ldr	r3, [r6, #0]
 8020eda:	b133      	cbz	r3, 8020eea <__sfp+0x2e>
 8020edc:	6836      	ldr	r6, [r6, #0]
 8020ede:	e7f7      	b.n	8020ed0 <__sfp+0x14>
 8020ee0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8020ee4:	b16d      	cbz	r5, 8020f02 <__sfp+0x46>
 8020ee6:	3468      	adds	r4, #104	; 0x68
 8020ee8:	e7f4      	b.n	8020ed4 <__sfp+0x18>
 8020eea:	2104      	movs	r1, #4
 8020eec:	4638      	mov	r0, r7
 8020eee:	f7ff ff9f 	bl	8020e30 <__sfmoreglue>
 8020ef2:	6030      	str	r0, [r6, #0]
 8020ef4:	2800      	cmp	r0, #0
 8020ef6:	d1f1      	bne.n	8020edc <__sfp+0x20>
 8020ef8:	230c      	movs	r3, #12
 8020efa:	4604      	mov	r4, r0
 8020efc:	603b      	str	r3, [r7, #0]
 8020efe:	4620      	mov	r0, r4
 8020f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020f02:	4b0b      	ldr	r3, [pc, #44]	; (8020f30 <__sfp+0x74>)
 8020f04:	2208      	movs	r2, #8
 8020f06:	6665      	str	r5, [r4, #100]	; 0x64
 8020f08:	4629      	mov	r1, r5
 8020f0a:	60a5      	str	r5, [r4, #8]
 8020f0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8020f10:	e9c4 5500 	strd	r5, r5, [r4]
 8020f14:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8020f18:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8020f1c:	f7fe f884 	bl	801f028 <memset>
 8020f20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8020f24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8020f28:	e7e9      	b.n	8020efe <__sfp+0x42>
 8020f2a:	bf00      	nop
 8020f2c:	0802608c 	.word	0x0802608c
 8020f30:	ffff0001 	.word	0xffff0001

08020f34 <_fwalk_reent>:
 8020f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020f38:	4680      	mov	r8, r0
 8020f3a:	4689      	mov	r9, r1
 8020f3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8020f40:	2600      	movs	r6, #0
 8020f42:	b914      	cbnz	r4, 8020f4a <_fwalk_reent+0x16>
 8020f44:	4630      	mov	r0, r6
 8020f46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020f4a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8020f4e:	3f01      	subs	r7, #1
 8020f50:	d501      	bpl.n	8020f56 <_fwalk_reent+0x22>
 8020f52:	6824      	ldr	r4, [r4, #0]
 8020f54:	e7f5      	b.n	8020f42 <_fwalk_reent+0xe>
 8020f56:	89ab      	ldrh	r3, [r5, #12]
 8020f58:	2b01      	cmp	r3, #1
 8020f5a:	d907      	bls.n	8020f6c <_fwalk_reent+0x38>
 8020f5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8020f60:	3301      	adds	r3, #1
 8020f62:	d003      	beq.n	8020f6c <_fwalk_reent+0x38>
 8020f64:	4629      	mov	r1, r5
 8020f66:	4640      	mov	r0, r8
 8020f68:	47c8      	blx	r9
 8020f6a:	4306      	orrs	r6, r0
 8020f6c:	3568      	adds	r5, #104	; 0x68
 8020f6e:	e7ee      	b.n	8020f4e <_fwalk_reent+0x1a>

08020f70 <_localeconv_r>:
 8020f70:	4b04      	ldr	r3, [pc, #16]	; (8020f84 <_localeconv_r+0x14>)
 8020f72:	681b      	ldr	r3, [r3, #0]
 8020f74:	6a18      	ldr	r0, [r3, #32]
 8020f76:	4b04      	ldr	r3, [pc, #16]	; (8020f88 <_localeconv_r+0x18>)
 8020f78:	2800      	cmp	r0, #0
 8020f7a:	bf08      	it	eq
 8020f7c:	4618      	moveq	r0, r3
 8020f7e:	30f0      	adds	r0, #240	; 0xf0
 8020f80:	4770      	bx	lr
 8020f82:	bf00      	nop
 8020f84:	20016d50 	.word	0x20016d50
 8020f88:	20016db4 	.word	0x20016db4

08020f8c <__swhatbuf_r>:
 8020f8c:	b570      	push	{r4, r5, r6, lr}
 8020f8e:	460e      	mov	r6, r1
 8020f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020f94:	b096      	sub	sp, #88	; 0x58
 8020f96:	4614      	mov	r4, r2
 8020f98:	2900      	cmp	r1, #0
 8020f9a:	461d      	mov	r5, r3
 8020f9c:	da07      	bge.n	8020fae <__swhatbuf_r+0x22>
 8020f9e:	2300      	movs	r3, #0
 8020fa0:	602b      	str	r3, [r5, #0]
 8020fa2:	89b3      	ldrh	r3, [r6, #12]
 8020fa4:	061a      	lsls	r2, r3, #24
 8020fa6:	d410      	bmi.n	8020fca <__swhatbuf_r+0x3e>
 8020fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020fac:	e00e      	b.n	8020fcc <__swhatbuf_r+0x40>
 8020fae:	466a      	mov	r2, sp
 8020fb0:	f000 fd2c 	bl	8021a0c <_fstat_r>
 8020fb4:	2800      	cmp	r0, #0
 8020fb6:	dbf2      	blt.n	8020f9e <__swhatbuf_r+0x12>
 8020fb8:	9a01      	ldr	r2, [sp, #4]
 8020fba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8020fbe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8020fc2:	425a      	negs	r2, r3
 8020fc4:	415a      	adcs	r2, r3
 8020fc6:	602a      	str	r2, [r5, #0]
 8020fc8:	e7ee      	b.n	8020fa8 <__swhatbuf_r+0x1c>
 8020fca:	2340      	movs	r3, #64	; 0x40
 8020fcc:	2000      	movs	r0, #0
 8020fce:	6023      	str	r3, [r4, #0]
 8020fd0:	b016      	add	sp, #88	; 0x58
 8020fd2:	bd70      	pop	{r4, r5, r6, pc}

08020fd4 <__smakebuf_r>:
 8020fd4:	898b      	ldrh	r3, [r1, #12]
 8020fd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8020fd8:	079d      	lsls	r5, r3, #30
 8020fda:	4606      	mov	r6, r0
 8020fdc:	460c      	mov	r4, r1
 8020fde:	d507      	bpl.n	8020ff0 <__smakebuf_r+0x1c>
 8020fe0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8020fe4:	6023      	str	r3, [r4, #0]
 8020fe6:	6123      	str	r3, [r4, #16]
 8020fe8:	2301      	movs	r3, #1
 8020fea:	6163      	str	r3, [r4, #20]
 8020fec:	b002      	add	sp, #8
 8020fee:	bd70      	pop	{r4, r5, r6, pc}
 8020ff0:	ab01      	add	r3, sp, #4
 8020ff2:	466a      	mov	r2, sp
 8020ff4:	f7ff ffca 	bl	8020f8c <__swhatbuf_r>
 8020ff8:	9900      	ldr	r1, [sp, #0]
 8020ffa:	4605      	mov	r5, r0
 8020ffc:	4630      	mov	r0, r6
 8020ffe:	f7fe f869 	bl	801f0d4 <_malloc_r>
 8021002:	b948      	cbnz	r0, 8021018 <__smakebuf_r+0x44>
 8021004:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021008:	059a      	lsls	r2, r3, #22
 802100a:	d4ef      	bmi.n	8020fec <__smakebuf_r+0x18>
 802100c:	f023 0303 	bic.w	r3, r3, #3
 8021010:	f043 0302 	orr.w	r3, r3, #2
 8021014:	81a3      	strh	r3, [r4, #12]
 8021016:	e7e3      	b.n	8020fe0 <__smakebuf_r+0xc>
 8021018:	4b0d      	ldr	r3, [pc, #52]	; (8021050 <__smakebuf_r+0x7c>)
 802101a:	62b3      	str	r3, [r6, #40]	; 0x28
 802101c:	89a3      	ldrh	r3, [r4, #12]
 802101e:	6020      	str	r0, [r4, #0]
 8021020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021024:	6120      	str	r0, [r4, #16]
 8021026:	81a3      	strh	r3, [r4, #12]
 8021028:	9b00      	ldr	r3, [sp, #0]
 802102a:	6163      	str	r3, [r4, #20]
 802102c:	9b01      	ldr	r3, [sp, #4]
 802102e:	b15b      	cbz	r3, 8021048 <__smakebuf_r+0x74>
 8021030:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021034:	4630      	mov	r0, r6
 8021036:	f000 fcfb 	bl	8021a30 <_isatty_r>
 802103a:	b128      	cbz	r0, 8021048 <__smakebuf_r+0x74>
 802103c:	89a3      	ldrh	r3, [r4, #12]
 802103e:	f023 0303 	bic.w	r3, r3, #3
 8021042:	f043 0301 	orr.w	r3, r3, #1
 8021046:	81a3      	strh	r3, [r4, #12]
 8021048:	89a3      	ldrh	r3, [r4, #12]
 802104a:	431d      	orrs	r5, r3
 802104c:	81a5      	strh	r5, [r4, #12]
 802104e:	e7cd      	b.n	8020fec <__smakebuf_r+0x18>
 8021050:	08020e25 	.word	0x08020e25

08021054 <memchr>:
 8021054:	b2c9      	uxtb	r1, r1
 8021056:	4402      	add	r2, r0
 8021058:	b510      	push	{r4, lr}
 802105a:	4290      	cmp	r0, r2
 802105c:	4603      	mov	r3, r0
 802105e:	d101      	bne.n	8021064 <memchr+0x10>
 8021060:	2300      	movs	r3, #0
 8021062:	e003      	b.n	802106c <memchr+0x18>
 8021064:	781c      	ldrb	r4, [r3, #0]
 8021066:	3001      	adds	r0, #1
 8021068:	428c      	cmp	r4, r1
 802106a:	d1f6      	bne.n	802105a <memchr+0x6>
 802106c:	4618      	mov	r0, r3
 802106e:	bd10      	pop	{r4, pc}

08021070 <__malloc_lock>:
 8021070:	4770      	bx	lr

08021072 <__malloc_unlock>:
 8021072:	4770      	bx	lr

08021074 <_Balloc>:
 8021074:	b570      	push	{r4, r5, r6, lr}
 8021076:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8021078:	4604      	mov	r4, r0
 802107a:	460e      	mov	r6, r1
 802107c:	b93d      	cbnz	r5, 802108e <_Balloc+0x1a>
 802107e:	2010      	movs	r0, #16
 8021080:	f7fd ff9e 	bl	801efc0 <malloc>
 8021084:	6260      	str	r0, [r4, #36]	; 0x24
 8021086:	6005      	str	r5, [r0, #0]
 8021088:	60c5      	str	r5, [r0, #12]
 802108a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 802108e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8021090:	68eb      	ldr	r3, [r5, #12]
 8021092:	b183      	cbz	r3, 80210b6 <_Balloc+0x42>
 8021094:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021096:	68db      	ldr	r3, [r3, #12]
 8021098:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 802109c:	b9b8      	cbnz	r0, 80210ce <_Balloc+0x5a>
 802109e:	2101      	movs	r1, #1
 80210a0:	4620      	mov	r0, r4
 80210a2:	fa01 f506 	lsl.w	r5, r1, r6
 80210a6:	1d6a      	adds	r2, r5, #5
 80210a8:	0092      	lsls	r2, r2, #2
 80210aa:	f000 fac2 	bl	8021632 <_calloc_r>
 80210ae:	b160      	cbz	r0, 80210ca <_Balloc+0x56>
 80210b0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80210b4:	e00e      	b.n	80210d4 <_Balloc+0x60>
 80210b6:	2221      	movs	r2, #33	; 0x21
 80210b8:	2104      	movs	r1, #4
 80210ba:	4620      	mov	r0, r4
 80210bc:	f000 fab9 	bl	8021632 <_calloc_r>
 80210c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80210c2:	60e8      	str	r0, [r5, #12]
 80210c4:	68db      	ldr	r3, [r3, #12]
 80210c6:	2b00      	cmp	r3, #0
 80210c8:	d1e4      	bne.n	8021094 <_Balloc+0x20>
 80210ca:	2000      	movs	r0, #0
 80210cc:	bd70      	pop	{r4, r5, r6, pc}
 80210ce:	6802      	ldr	r2, [r0, #0]
 80210d0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80210d4:	2300      	movs	r3, #0
 80210d6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80210da:	e7f7      	b.n	80210cc <_Balloc+0x58>

080210dc <_Bfree>:
 80210dc:	b570      	push	{r4, r5, r6, lr}
 80210de:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80210e0:	4606      	mov	r6, r0
 80210e2:	460d      	mov	r5, r1
 80210e4:	b93c      	cbnz	r4, 80210f6 <_Bfree+0x1a>
 80210e6:	2010      	movs	r0, #16
 80210e8:	f7fd ff6a 	bl	801efc0 <malloc>
 80210ec:	6270      	str	r0, [r6, #36]	; 0x24
 80210ee:	6004      	str	r4, [r0, #0]
 80210f0:	60c4      	str	r4, [r0, #12]
 80210f2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80210f6:	b13d      	cbz	r5, 8021108 <_Bfree+0x2c>
 80210f8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80210fa:	686a      	ldr	r2, [r5, #4]
 80210fc:	68db      	ldr	r3, [r3, #12]
 80210fe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8021102:	6029      	str	r1, [r5, #0]
 8021104:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8021108:	bd70      	pop	{r4, r5, r6, pc}

0802110a <__multadd>:
 802110a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802110e:	f101 0c14 	add.w	ip, r1, #20
 8021112:	461f      	mov	r7, r3
 8021114:	4606      	mov	r6, r0
 8021116:	460c      	mov	r4, r1
 8021118:	690d      	ldr	r5, [r1, #16]
 802111a:	2300      	movs	r3, #0
 802111c:	f8dc 0000 	ldr.w	r0, [ip]
 8021120:	3301      	adds	r3, #1
 8021122:	b281      	uxth	r1, r0
 8021124:	429d      	cmp	r5, r3
 8021126:	ea4f 4010 	mov.w	r0, r0, lsr #16
 802112a:	fb02 7101 	mla	r1, r2, r1, r7
 802112e:	ea4f 4711 	mov.w	r7, r1, lsr #16
 8021132:	b289      	uxth	r1, r1
 8021134:	fb02 7000 	mla	r0, r2, r0, r7
 8021138:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 802113c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8021140:	f84c 1b04 	str.w	r1, [ip], #4
 8021144:	dcea      	bgt.n	802111c <__multadd+0x12>
 8021146:	b1d7      	cbz	r7, 802117e <__multadd+0x74>
 8021148:	68a3      	ldr	r3, [r4, #8]
 802114a:	42ab      	cmp	r3, r5
 802114c:	dc12      	bgt.n	8021174 <__multadd+0x6a>
 802114e:	6861      	ldr	r1, [r4, #4]
 8021150:	4630      	mov	r0, r6
 8021152:	3101      	adds	r1, #1
 8021154:	f7ff ff8e 	bl	8021074 <_Balloc>
 8021158:	6922      	ldr	r2, [r4, #16]
 802115a:	4680      	mov	r8, r0
 802115c:	f104 010c 	add.w	r1, r4, #12
 8021160:	3202      	adds	r2, #2
 8021162:	300c      	adds	r0, #12
 8021164:	0092      	lsls	r2, r2, #2
 8021166:	f7fd ff3b 	bl	801efe0 <memcpy>
 802116a:	4621      	mov	r1, r4
 802116c:	4644      	mov	r4, r8
 802116e:	4630      	mov	r0, r6
 8021170:	f7ff ffb4 	bl	80210dc <_Bfree>
 8021174:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8021178:	3501      	adds	r5, #1
 802117a:	615f      	str	r7, [r3, #20]
 802117c:	6125      	str	r5, [r4, #16]
 802117e:	4620      	mov	r0, r4
 8021180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08021184 <__hi0bits>:
 8021184:	0c02      	lsrs	r2, r0, #16
 8021186:	4603      	mov	r3, r0
 8021188:	0412      	lsls	r2, r2, #16
 802118a:	b9b2      	cbnz	r2, 80211ba <__hi0bits+0x36>
 802118c:	0403      	lsls	r3, r0, #16
 802118e:	2010      	movs	r0, #16
 8021190:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8021194:	bf04      	itt	eq
 8021196:	021b      	lsleq	r3, r3, #8
 8021198:	3008      	addeq	r0, #8
 802119a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 802119e:	bf04      	itt	eq
 80211a0:	011b      	lsleq	r3, r3, #4
 80211a2:	3004      	addeq	r0, #4
 80211a4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80211a8:	bf04      	itt	eq
 80211aa:	009b      	lsleq	r3, r3, #2
 80211ac:	3002      	addeq	r0, #2
 80211ae:	2b00      	cmp	r3, #0
 80211b0:	db06      	blt.n	80211c0 <__hi0bits+0x3c>
 80211b2:	005b      	lsls	r3, r3, #1
 80211b4:	d503      	bpl.n	80211be <__hi0bits+0x3a>
 80211b6:	3001      	adds	r0, #1
 80211b8:	4770      	bx	lr
 80211ba:	2000      	movs	r0, #0
 80211bc:	e7e8      	b.n	8021190 <__hi0bits+0xc>
 80211be:	2020      	movs	r0, #32
 80211c0:	4770      	bx	lr

080211c2 <__lo0bits>:
 80211c2:	6803      	ldr	r3, [r0, #0]
 80211c4:	4601      	mov	r1, r0
 80211c6:	f013 0207 	ands.w	r2, r3, #7
 80211ca:	d00b      	beq.n	80211e4 <__lo0bits+0x22>
 80211cc:	07da      	lsls	r2, r3, #31
 80211ce:	d423      	bmi.n	8021218 <__lo0bits+0x56>
 80211d0:	0798      	lsls	r0, r3, #30
 80211d2:	bf47      	ittee	mi
 80211d4:	085b      	lsrmi	r3, r3, #1
 80211d6:	2001      	movmi	r0, #1
 80211d8:	089b      	lsrpl	r3, r3, #2
 80211da:	2002      	movpl	r0, #2
 80211dc:	bf4c      	ite	mi
 80211de:	600b      	strmi	r3, [r1, #0]
 80211e0:	600b      	strpl	r3, [r1, #0]
 80211e2:	4770      	bx	lr
 80211e4:	b298      	uxth	r0, r3
 80211e6:	b9a8      	cbnz	r0, 8021214 <__lo0bits+0x52>
 80211e8:	0c1b      	lsrs	r3, r3, #16
 80211ea:	2010      	movs	r0, #16
 80211ec:	f013 0fff 	tst.w	r3, #255	; 0xff
 80211f0:	bf04      	itt	eq
 80211f2:	0a1b      	lsreq	r3, r3, #8
 80211f4:	3008      	addeq	r0, #8
 80211f6:	071a      	lsls	r2, r3, #28
 80211f8:	bf04      	itt	eq
 80211fa:	091b      	lsreq	r3, r3, #4
 80211fc:	3004      	addeq	r0, #4
 80211fe:	079a      	lsls	r2, r3, #30
 8021200:	bf04      	itt	eq
 8021202:	089b      	lsreq	r3, r3, #2
 8021204:	3002      	addeq	r0, #2
 8021206:	07da      	lsls	r2, r3, #31
 8021208:	d402      	bmi.n	8021210 <__lo0bits+0x4e>
 802120a:	085b      	lsrs	r3, r3, #1
 802120c:	d006      	beq.n	802121c <__lo0bits+0x5a>
 802120e:	3001      	adds	r0, #1
 8021210:	600b      	str	r3, [r1, #0]
 8021212:	4770      	bx	lr
 8021214:	4610      	mov	r0, r2
 8021216:	e7e9      	b.n	80211ec <__lo0bits+0x2a>
 8021218:	2000      	movs	r0, #0
 802121a:	4770      	bx	lr
 802121c:	2020      	movs	r0, #32
 802121e:	4770      	bx	lr

08021220 <__i2b>:
 8021220:	b510      	push	{r4, lr}
 8021222:	460c      	mov	r4, r1
 8021224:	2101      	movs	r1, #1
 8021226:	f7ff ff25 	bl	8021074 <_Balloc>
 802122a:	2201      	movs	r2, #1
 802122c:	6144      	str	r4, [r0, #20]
 802122e:	6102      	str	r2, [r0, #16]
 8021230:	bd10      	pop	{r4, pc}

08021232 <__multiply>:
 8021232:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021236:	4614      	mov	r4, r2
 8021238:	690a      	ldr	r2, [r1, #16]
 802123a:	4688      	mov	r8, r1
 802123c:	6923      	ldr	r3, [r4, #16]
 802123e:	429a      	cmp	r2, r3
 8021240:	bfbe      	ittt	lt
 8021242:	460b      	movlt	r3, r1
 8021244:	46a0      	movlt	r8, r4
 8021246:	461c      	movlt	r4, r3
 8021248:	f8d8 7010 	ldr.w	r7, [r8, #16]
 802124c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8021250:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8021254:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8021258:	eb07 0609 	add.w	r6, r7, r9
 802125c:	42b3      	cmp	r3, r6
 802125e:	bfb8      	it	lt
 8021260:	3101      	addlt	r1, #1
 8021262:	f7ff ff07 	bl	8021074 <_Balloc>
 8021266:	f100 0514 	add.w	r5, r0, #20
 802126a:	2200      	movs	r2, #0
 802126c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8021270:	462b      	mov	r3, r5
 8021272:	4573      	cmp	r3, lr
 8021274:	d316      	bcc.n	80212a4 <__multiply+0x72>
 8021276:	f108 0114 	add.w	r1, r8, #20
 802127a:	f104 0214 	add.w	r2, r4, #20
 802127e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8021282:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8021286:	9300      	str	r3, [sp, #0]
 8021288:	9b00      	ldr	r3, [sp, #0]
 802128a:	9201      	str	r2, [sp, #4]
 802128c:	4293      	cmp	r3, r2
 802128e:	d80c      	bhi.n	80212aa <__multiply+0x78>
 8021290:	2e00      	cmp	r6, #0
 8021292:	dd03      	ble.n	802129c <__multiply+0x6a>
 8021294:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8021298:	2b00      	cmp	r3, #0
 802129a:	d05d      	beq.n	8021358 <__multiply+0x126>
 802129c:	6106      	str	r6, [r0, #16]
 802129e:	b003      	add	sp, #12
 80212a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80212a4:	f843 2b04 	str.w	r2, [r3], #4
 80212a8:	e7e3      	b.n	8021272 <__multiply+0x40>
 80212aa:	f8b2 b000 	ldrh.w	fp, [r2]
 80212ae:	f1bb 0f00 	cmp.w	fp, #0
 80212b2:	d023      	beq.n	80212fc <__multiply+0xca>
 80212b4:	4689      	mov	r9, r1
 80212b6:	46ac      	mov	ip, r5
 80212b8:	f04f 0800 	mov.w	r8, #0
 80212bc:	f859 4b04 	ldr.w	r4, [r9], #4
 80212c0:	f8dc a000 	ldr.w	sl, [ip]
 80212c4:	b2a3      	uxth	r3, r4
 80212c6:	454f      	cmp	r7, r9
 80212c8:	fa1f fa8a 	uxth.w	sl, sl
 80212cc:	fb0b a303 	mla	r3, fp, r3, sl
 80212d0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80212d4:	f8dc 4000 	ldr.w	r4, [ip]
 80212d8:	4443      	add	r3, r8
 80212da:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80212de:	fb0b 840a 	mla	r4, fp, sl, r8
 80212e2:	46e2      	mov	sl, ip
 80212e4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80212e8:	b29b      	uxth	r3, r3
 80212ea:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80212ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80212f2:	f84a 3b04 	str.w	r3, [sl], #4
 80212f6:	d82b      	bhi.n	8021350 <__multiply+0x11e>
 80212f8:	f8cc 8004 	str.w	r8, [ip, #4]
 80212fc:	9b01      	ldr	r3, [sp, #4]
 80212fe:	3204      	adds	r2, #4
 8021300:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8021304:	f1ba 0f00 	cmp.w	sl, #0
 8021308:	d020      	beq.n	802134c <__multiply+0x11a>
 802130a:	682b      	ldr	r3, [r5, #0]
 802130c:	4689      	mov	r9, r1
 802130e:	46a8      	mov	r8, r5
 8021310:	f04f 0b00 	mov.w	fp, #0
 8021314:	f8b9 c000 	ldrh.w	ip, [r9]
 8021318:	b29b      	uxth	r3, r3
 802131a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 802131e:	fb0a 440c 	mla	r4, sl, ip, r4
 8021322:	46c4      	mov	ip, r8
 8021324:	445c      	add	r4, fp
 8021326:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 802132a:	f84c 3b04 	str.w	r3, [ip], #4
 802132e:	f859 3b04 	ldr.w	r3, [r9], #4
 8021332:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8021336:	0c1b      	lsrs	r3, r3, #16
 8021338:	454f      	cmp	r7, r9
 802133a:	fb0a b303 	mla	r3, sl, r3, fp
 802133e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8021342:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8021346:	d805      	bhi.n	8021354 <__multiply+0x122>
 8021348:	f8c8 3004 	str.w	r3, [r8, #4]
 802134c:	3504      	adds	r5, #4
 802134e:	e79b      	b.n	8021288 <__multiply+0x56>
 8021350:	46d4      	mov	ip, sl
 8021352:	e7b3      	b.n	80212bc <__multiply+0x8a>
 8021354:	46e0      	mov	r8, ip
 8021356:	e7dd      	b.n	8021314 <__multiply+0xe2>
 8021358:	3e01      	subs	r6, #1
 802135a:	e799      	b.n	8021290 <__multiply+0x5e>

0802135c <__pow5mult>:
 802135c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021360:	4615      	mov	r5, r2
 8021362:	f012 0203 	ands.w	r2, r2, #3
 8021366:	4606      	mov	r6, r0
 8021368:	460f      	mov	r7, r1
 802136a:	d007      	beq.n	802137c <__pow5mult+0x20>
 802136c:	3a01      	subs	r2, #1
 802136e:	4c21      	ldr	r4, [pc, #132]	; (80213f4 <__pow5mult+0x98>)
 8021370:	2300      	movs	r3, #0
 8021372:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8021376:	f7ff fec8 	bl	802110a <__multadd>
 802137a:	4607      	mov	r7, r0
 802137c:	10ad      	asrs	r5, r5, #2
 802137e:	d035      	beq.n	80213ec <__pow5mult+0x90>
 8021380:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8021382:	b93c      	cbnz	r4, 8021394 <__pow5mult+0x38>
 8021384:	2010      	movs	r0, #16
 8021386:	f7fd fe1b 	bl	801efc0 <malloc>
 802138a:	6270      	str	r0, [r6, #36]	; 0x24
 802138c:	6004      	str	r4, [r0, #0]
 802138e:	60c4      	str	r4, [r0, #12]
 8021390:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8021394:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8021398:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802139c:	b94c      	cbnz	r4, 80213b2 <__pow5mult+0x56>
 802139e:	f240 2171 	movw	r1, #625	; 0x271
 80213a2:	4630      	mov	r0, r6
 80213a4:	f7ff ff3c 	bl	8021220 <__i2b>
 80213a8:	2300      	movs	r3, #0
 80213aa:	4604      	mov	r4, r0
 80213ac:	f8c8 0008 	str.w	r0, [r8, #8]
 80213b0:	6003      	str	r3, [r0, #0]
 80213b2:	f04f 0800 	mov.w	r8, #0
 80213b6:	07eb      	lsls	r3, r5, #31
 80213b8:	d50a      	bpl.n	80213d0 <__pow5mult+0x74>
 80213ba:	4639      	mov	r1, r7
 80213bc:	4622      	mov	r2, r4
 80213be:	4630      	mov	r0, r6
 80213c0:	f7ff ff37 	bl	8021232 <__multiply>
 80213c4:	4681      	mov	r9, r0
 80213c6:	4639      	mov	r1, r7
 80213c8:	4630      	mov	r0, r6
 80213ca:	464f      	mov	r7, r9
 80213cc:	f7ff fe86 	bl	80210dc <_Bfree>
 80213d0:	106d      	asrs	r5, r5, #1
 80213d2:	d00b      	beq.n	80213ec <__pow5mult+0x90>
 80213d4:	6820      	ldr	r0, [r4, #0]
 80213d6:	b938      	cbnz	r0, 80213e8 <__pow5mult+0x8c>
 80213d8:	4622      	mov	r2, r4
 80213da:	4621      	mov	r1, r4
 80213dc:	4630      	mov	r0, r6
 80213de:	f7ff ff28 	bl	8021232 <__multiply>
 80213e2:	6020      	str	r0, [r4, #0]
 80213e4:	f8c0 8000 	str.w	r8, [r0]
 80213e8:	4604      	mov	r4, r0
 80213ea:	e7e4      	b.n	80213b6 <__pow5mult+0x5a>
 80213ec:	4638      	mov	r0, r7
 80213ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80213f2:	bf00      	nop
 80213f4:	08026238 	.word	0x08026238

080213f8 <__lshift>:
 80213f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80213fc:	460c      	mov	r4, r1
 80213fe:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8021402:	4607      	mov	r7, r0
 8021404:	4616      	mov	r6, r2
 8021406:	6923      	ldr	r3, [r4, #16]
 8021408:	6849      	ldr	r1, [r1, #4]
 802140a:	eb0a 0903 	add.w	r9, sl, r3
 802140e:	68a3      	ldr	r3, [r4, #8]
 8021410:	f109 0501 	add.w	r5, r9, #1
 8021414:	42ab      	cmp	r3, r5
 8021416:	db32      	blt.n	802147e <__lshift+0x86>
 8021418:	4638      	mov	r0, r7
 802141a:	f7ff fe2b 	bl	8021074 <_Balloc>
 802141e:	2300      	movs	r3, #0
 8021420:	4680      	mov	r8, r0
 8021422:	f100 0114 	add.w	r1, r0, #20
 8021426:	461a      	mov	r2, r3
 8021428:	4553      	cmp	r3, sl
 802142a:	db2b      	blt.n	8021484 <__lshift+0x8c>
 802142c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8021430:	f104 0314 	add.w	r3, r4, #20
 8021434:	6920      	ldr	r0, [r4, #16]
 8021436:	f016 021f 	ands.w	r2, r6, #31
 802143a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802143e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8021442:	d025      	beq.n	8021490 <__lshift+0x98>
 8021444:	f1c2 0e20 	rsb	lr, r2, #32
 8021448:	2000      	movs	r0, #0
 802144a:	681e      	ldr	r6, [r3, #0]
 802144c:	468a      	mov	sl, r1
 802144e:	4096      	lsls	r6, r2
 8021450:	4330      	orrs	r0, r6
 8021452:	f84a 0b04 	str.w	r0, [sl], #4
 8021456:	f853 0b04 	ldr.w	r0, [r3], #4
 802145a:	459c      	cmp	ip, r3
 802145c:	fa20 f00e 	lsr.w	r0, r0, lr
 8021460:	d814      	bhi.n	802148c <__lshift+0x94>
 8021462:	6048      	str	r0, [r1, #4]
 8021464:	b108      	cbz	r0, 802146a <__lshift+0x72>
 8021466:	f109 0502 	add.w	r5, r9, #2
 802146a:	3d01      	subs	r5, #1
 802146c:	4638      	mov	r0, r7
 802146e:	4621      	mov	r1, r4
 8021470:	f8c8 5010 	str.w	r5, [r8, #16]
 8021474:	f7ff fe32 	bl	80210dc <_Bfree>
 8021478:	4640      	mov	r0, r8
 802147a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802147e:	3101      	adds	r1, #1
 8021480:	005b      	lsls	r3, r3, #1
 8021482:	e7c7      	b.n	8021414 <__lshift+0x1c>
 8021484:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8021488:	3301      	adds	r3, #1
 802148a:	e7cd      	b.n	8021428 <__lshift+0x30>
 802148c:	4651      	mov	r1, sl
 802148e:	e7dc      	b.n	802144a <__lshift+0x52>
 8021490:	3904      	subs	r1, #4
 8021492:	f853 2b04 	ldr.w	r2, [r3], #4
 8021496:	459c      	cmp	ip, r3
 8021498:	f841 2f04 	str.w	r2, [r1, #4]!
 802149c:	d8f9      	bhi.n	8021492 <__lshift+0x9a>
 802149e:	e7e4      	b.n	802146a <__lshift+0x72>

080214a0 <__mcmp>:
 80214a0:	6903      	ldr	r3, [r0, #16]
 80214a2:	690a      	ldr	r2, [r1, #16]
 80214a4:	1a9b      	subs	r3, r3, r2
 80214a6:	b530      	push	{r4, r5, lr}
 80214a8:	d10c      	bne.n	80214c4 <__mcmp+0x24>
 80214aa:	0092      	lsls	r2, r2, #2
 80214ac:	3014      	adds	r0, #20
 80214ae:	3114      	adds	r1, #20
 80214b0:	1884      	adds	r4, r0, r2
 80214b2:	4411      	add	r1, r2
 80214b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80214b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80214bc:	4295      	cmp	r5, r2
 80214be:	d003      	beq.n	80214c8 <__mcmp+0x28>
 80214c0:	d305      	bcc.n	80214ce <__mcmp+0x2e>
 80214c2:	2301      	movs	r3, #1
 80214c4:	4618      	mov	r0, r3
 80214c6:	bd30      	pop	{r4, r5, pc}
 80214c8:	42a0      	cmp	r0, r4
 80214ca:	d3f3      	bcc.n	80214b4 <__mcmp+0x14>
 80214cc:	e7fa      	b.n	80214c4 <__mcmp+0x24>
 80214ce:	f04f 33ff 	mov.w	r3, #4294967295
 80214d2:	e7f7      	b.n	80214c4 <__mcmp+0x24>

080214d4 <__mdiff>:
 80214d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80214d8:	460d      	mov	r5, r1
 80214da:	4607      	mov	r7, r0
 80214dc:	4611      	mov	r1, r2
 80214de:	4614      	mov	r4, r2
 80214e0:	4628      	mov	r0, r5
 80214e2:	f7ff ffdd 	bl	80214a0 <__mcmp>
 80214e6:	1e06      	subs	r6, r0, #0
 80214e8:	d108      	bne.n	80214fc <__mdiff+0x28>
 80214ea:	4631      	mov	r1, r6
 80214ec:	4638      	mov	r0, r7
 80214ee:	f7ff fdc1 	bl	8021074 <_Balloc>
 80214f2:	2301      	movs	r3, #1
 80214f4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80214f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80214fc:	bfa3      	ittte	ge
 80214fe:	4623      	movge	r3, r4
 8021500:	462c      	movge	r4, r5
 8021502:	2600      	movge	r6, #0
 8021504:	2601      	movlt	r6, #1
 8021506:	bfa8      	it	ge
 8021508:	461d      	movge	r5, r3
 802150a:	6861      	ldr	r1, [r4, #4]
 802150c:	4638      	mov	r0, r7
 802150e:	f7ff fdb1 	bl	8021074 <_Balloc>
 8021512:	f105 0914 	add.w	r9, r5, #20
 8021516:	60c6      	str	r6, [r0, #12]
 8021518:	f104 0214 	add.w	r2, r4, #20
 802151c:	6926      	ldr	r6, [r4, #16]
 802151e:	f100 0114 	add.w	r1, r0, #20
 8021522:	692b      	ldr	r3, [r5, #16]
 8021524:	f04f 0e00 	mov.w	lr, #0
 8021528:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 802152c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8021530:	f852 ab04 	ldr.w	sl, [r2], #4
 8021534:	f859 5b04 	ldr.w	r5, [r9], #4
 8021538:	fa1f f38a 	uxth.w	r3, sl
 802153c:	4694      	mov	ip, r2
 802153e:	b2ac      	uxth	r4, r5
 8021540:	45c8      	cmp	r8, r9
 8021542:	4473      	add	r3, lr
 8021544:	eba3 0304 	sub.w	r3, r3, r4
 8021548:	ea4f 4415 	mov.w	r4, r5, lsr #16
 802154c:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8021550:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8021554:	b29b      	uxth	r3, r3
 8021556:	ea4f 4e24 	mov.w	lr, r4, asr #16
 802155a:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 802155e:	f841 4b04 	str.w	r4, [r1], #4
 8021562:	d8e5      	bhi.n	8021530 <__mdiff+0x5c>
 8021564:	45bc      	cmp	ip, r7
 8021566:	d304      	bcc.n	8021572 <__mdiff+0x9e>
 8021568:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 802156c:	b183      	cbz	r3, 8021590 <__mdiff+0xbc>
 802156e:	6106      	str	r6, [r0, #16]
 8021570:	e7c2      	b.n	80214f8 <__mdiff+0x24>
 8021572:	f85c 4b04 	ldr.w	r4, [ip], #4
 8021576:	b2a2      	uxth	r2, r4
 8021578:	4472      	add	r2, lr
 802157a:	1413      	asrs	r3, r2, #16
 802157c:	b292      	uxth	r2, r2
 802157e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8021582:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8021586:	ea4f 4e23 	mov.w	lr, r3, asr #16
 802158a:	f841 2b04 	str.w	r2, [r1], #4
 802158e:	e7e9      	b.n	8021564 <__mdiff+0x90>
 8021590:	3e01      	subs	r6, #1
 8021592:	e7e9      	b.n	8021568 <__mdiff+0x94>

08021594 <__d2b>:
 8021594:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8021598:	ec59 8b10 	vmov	r8, r9, d0
 802159c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80215a0:	460e      	mov	r6, r1
 80215a2:	2101      	movs	r1, #1
 80215a4:	4615      	mov	r5, r2
 80215a6:	f7ff fd65 	bl	8021074 <_Balloc>
 80215aa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80215ae:	4607      	mov	r7, r0
 80215b0:	bb34      	cbnz	r4, 8021600 <__d2b+0x6c>
 80215b2:	9301      	str	r3, [sp, #4]
 80215b4:	f1b8 0300 	subs.w	r3, r8, #0
 80215b8:	d027      	beq.n	802160a <__d2b+0x76>
 80215ba:	a802      	add	r0, sp, #8
 80215bc:	f840 3d08 	str.w	r3, [r0, #-8]!
 80215c0:	f7ff fdff 	bl	80211c2 <__lo0bits>
 80215c4:	9900      	ldr	r1, [sp, #0]
 80215c6:	b1f0      	cbz	r0, 8021606 <__d2b+0x72>
 80215c8:	9a01      	ldr	r2, [sp, #4]
 80215ca:	f1c0 0320 	rsb	r3, r0, #32
 80215ce:	fa02 f303 	lsl.w	r3, r2, r3
 80215d2:	40c2      	lsrs	r2, r0
 80215d4:	430b      	orrs	r3, r1
 80215d6:	9201      	str	r2, [sp, #4]
 80215d8:	617b      	str	r3, [r7, #20]
 80215da:	9b01      	ldr	r3, [sp, #4]
 80215dc:	2b00      	cmp	r3, #0
 80215de:	61bb      	str	r3, [r7, #24]
 80215e0:	bf14      	ite	ne
 80215e2:	2102      	movne	r1, #2
 80215e4:	2101      	moveq	r1, #1
 80215e6:	6139      	str	r1, [r7, #16]
 80215e8:	b1c4      	cbz	r4, 802161c <__d2b+0x88>
 80215ea:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80215ee:	4404      	add	r4, r0
 80215f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80215f4:	6034      	str	r4, [r6, #0]
 80215f6:	6028      	str	r0, [r5, #0]
 80215f8:	4638      	mov	r0, r7
 80215fa:	b003      	add	sp, #12
 80215fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021600:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8021604:	e7d5      	b.n	80215b2 <__d2b+0x1e>
 8021606:	6179      	str	r1, [r7, #20]
 8021608:	e7e7      	b.n	80215da <__d2b+0x46>
 802160a:	a801      	add	r0, sp, #4
 802160c:	f7ff fdd9 	bl	80211c2 <__lo0bits>
 8021610:	9b01      	ldr	r3, [sp, #4]
 8021612:	2101      	movs	r1, #1
 8021614:	3020      	adds	r0, #32
 8021616:	617b      	str	r3, [r7, #20]
 8021618:	6139      	str	r1, [r7, #16]
 802161a:	e7e5      	b.n	80215e8 <__d2b+0x54>
 802161c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8021620:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8021624:	6030      	str	r0, [r6, #0]
 8021626:	6918      	ldr	r0, [r3, #16]
 8021628:	f7ff fdac 	bl	8021184 <__hi0bits>
 802162c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8021630:	e7e1      	b.n	80215f6 <__d2b+0x62>

08021632 <_calloc_r>:
 8021632:	b538      	push	{r3, r4, r5, lr}
 8021634:	fb02 f401 	mul.w	r4, r2, r1
 8021638:	4621      	mov	r1, r4
 802163a:	f7fd fd4b 	bl	801f0d4 <_malloc_r>
 802163e:	4605      	mov	r5, r0
 8021640:	b118      	cbz	r0, 802164a <_calloc_r+0x18>
 8021642:	4622      	mov	r2, r4
 8021644:	2100      	movs	r1, #0
 8021646:	f7fd fcef 	bl	801f028 <memset>
 802164a:	4628      	mov	r0, r5
 802164c:	bd38      	pop	{r3, r4, r5, pc}

0802164e <_realloc_r>:
 802164e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021650:	4607      	mov	r7, r0
 8021652:	4614      	mov	r4, r2
 8021654:	460e      	mov	r6, r1
 8021656:	b921      	cbnz	r1, 8021662 <_realloc_r+0x14>
 8021658:	4611      	mov	r1, r2
 802165a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802165e:	f7fd bd39 	b.w	801f0d4 <_malloc_r>
 8021662:	b922      	cbnz	r2, 802166e <_realloc_r+0x20>
 8021664:	4625      	mov	r5, r4
 8021666:	f7fd fce7 	bl	801f038 <_free_r>
 802166a:	4628      	mov	r0, r5
 802166c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802166e:	f000 fa13 	bl	8021a98 <_malloc_usable_size_r>
 8021672:	42a0      	cmp	r0, r4
 8021674:	d20f      	bcs.n	8021696 <_realloc_r+0x48>
 8021676:	4621      	mov	r1, r4
 8021678:	4638      	mov	r0, r7
 802167a:	f7fd fd2b 	bl	801f0d4 <_malloc_r>
 802167e:	4605      	mov	r5, r0
 8021680:	2800      	cmp	r0, #0
 8021682:	d0f2      	beq.n	802166a <_realloc_r+0x1c>
 8021684:	4631      	mov	r1, r6
 8021686:	4622      	mov	r2, r4
 8021688:	f7fd fcaa 	bl	801efe0 <memcpy>
 802168c:	4631      	mov	r1, r6
 802168e:	4638      	mov	r0, r7
 8021690:	f7fd fcd2 	bl	801f038 <_free_r>
 8021694:	e7e9      	b.n	802166a <_realloc_r+0x1c>
 8021696:	4635      	mov	r5, r6
 8021698:	e7e7      	b.n	802166a <_realloc_r+0x1c>

0802169a <__ssputs_r>:
 802169a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802169e:	688e      	ldr	r6, [r1, #8]
 80216a0:	4682      	mov	sl, r0
 80216a2:	460c      	mov	r4, r1
 80216a4:	4690      	mov	r8, r2
 80216a6:	429e      	cmp	r6, r3
 80216a8:	4699      	mov	r9, r3
 80216aa:	d837      	bhi.n	802171c <__ssputs_r+0x82>
 80216ac:	898a      	ldrh	r2, [r1, #12]
 80216ae:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80216b2:	d031      	beq.n	8021718 <__ssputs_r+0x7e>
 80216b4:	6825      	ldr	r5, [r4, #0]
 80216b6:	2302      	movs	r3, #2
 80216b8:	6909      	ldr	r1, [r1, #16]
 80216ba:	1a6f      	subs	r7, r5, r1
 80216bc:	6965      	ldr	r5, [r4, #20]
 80216be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80216c2:	fb95 f5f3 	sdiv	r5, r5, r3
 80216c6:	f109 0301 	add.w	r3, r9, #1
 80216ca:	443b      	add	r3, r7
 80216cc:	429d      	cmp	r5, r3
 80216ce:	bf38      	it	cc
 80216d0:	461d      	movcc	r5, r3
 80216d2:	0553      	lsls	r3, r2, #21
 80216d4:	d530      	bpl.n	8021738 <__ssputs_r+0x9e>
 80216d6:	4629      	mov	r1, r5
 80216d8:	f7fd fcfc 	bl	801f0d4 <_malloc_r>
 80216dc:	4606      	mov	r6, r0
 80216de:	b950      	cbnz	r0, 80216f6 <__ssputs_r+0x5c>
 80216e0:	230c      	movs	r3, #12
 80216e2:	f04f 30ff 	mov.w	r0, #4294967295
 80216e6:	f8ca 3000 	str.w	r3, [sl]
 80216ea:	89a3      	ldrh	r3, [r4, #12]
 80216ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80216f0:	81a3      	strh	r3, [r4, #12]
 80216f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80216f6:	463a      	mov	r2, r7
 80216f8:	6921      	ldr	r1, [r4, #16]
 80216fa:	f7fd fc71 	bl	801efe0 <memcpy>
 80216fe:	89a3      	ldrh	r3, [r4, #12]
 8021700:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8021704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021708:	81a3      	strh	r3, [r4, #12]
 802170a:	6126      	str	r6, [r4, #16]
 802170c:	443e      	add	r6, r7
 802170e:	6165      	str	r5, [r4, #20]
 8021710:	1bed      	subs	r5, r5, r7
 8021712:	6026      	str	r6, [r4, #0]
 8021714:	464e      	mov	r6, r9
 8021716:	60a5      	str	r5, [r4, #8]
 8021718:	454e      	cmp	r6, r9
 802171a:	d900      	bls.n	802171e <__ssputs_r+0x84>
 802171c:	464e      	mov	r6, r9
 802171e:	4632      	mov	r2, r6
 8021720:	4641      	mov	r1, r8
 8021722:	6820      	ldr	r0, [r4, #0]
 8021724:	f7fd fc67 	bl	801eff6 <memmove>
 8021728:	68a3      	ldr	r3, [r4, #8]
 802172a:	2000      	movs	r0, #0
 802172c:	1b9b      	subs	r3, r3, r6
 802172e:	60a3      	str	r3, [r4, #8]
 8021730:	6823      	ldr	r3, [r4, #0]
 8021732:	441e      	add	r6, r3
 8021734:	6026      	str	r6, [r4, #0]
 8021736:	e7dc      	b.n	80216f2 <__ssputs_r+0x58>
 8021738:	462a      	mov	r2, r5
 802173a:	f7ff ff88 	bl	802164e <_realloc_r>
 802173e:	4606      	mov	r6, r0
 8021740:	2800      	cmp	r0, #0
 8021742:	d1e2      	bne.n	802170a <__ssputs_r+0x70>
 8021744:	6921      	ldr	r1, [r4, #16]
 8021746:	4650      	mov	r0, sl
 8021748:	f7fd fc76 	bl	801f038 <_free_r>
 802174c:	e7c8      	b.n	80216e0 <__ssputs_r+0x46>
	...

08021750 <_svfiprintf_r>:
 8021750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021754:	461d      	mov	r5, r3
 8021756:	898b      	ldrh	r3, [r1, #12]
 8021758:	b09d      	sub	sp, #116	; 0x74
 802175a:	4680      	mov	r8, r0
 802175c:	061f      	lsls	r7, r3, #24
 802175e:	460c      	mov	r4, r1
 8021760:	4616      	mov	r6, r2
 8021762:	d50f      	bpl.n	8021784 <_svfiprintf_r+0x34>
 8021764:	690b      	ldr	r3, [r1, #16]
 8021766:	b96b      	cbnz	r3, 8021784 <_svfiprintf_r+0x34>
 8021768:	2140      	movs	r1, #64	; 0x40
 802176a:	f7fd fcb3 	bl	801f0d4 <_malloc_r>
 802176e:	6020      	str	r0, [r4, #0]
 8021770:	6120      	str	r0, [r4, #16]
 8021772:	b928      	cbnz	r0, 8021780 <_svfiprintf_r+0x30>
 8021774:	230c      	movs	r3, #12
 8021776:	f8c8 3000 	str.w	r3, [r8]
 802177a:	f04f 30ff 	mov.w	r0, #4294967295
 802177e:	e0c8      	b.n	8021912 <_svfiprintf_r+0x1c2>
 8021780:	2340      	movs	r3, #64	; 0x40
 8021782:	6163      	str	r3, [r4, #20]
 8021784:	2300      	movs	r3, #0
 8021786:	f04f 0b01 	mov.w	fp, #1
 802178a:	9503      	str	r5, [sp, #12]
 802178c:	9309      	str	r3, [sp, #36]	; 0x24
 802178e:	2320      	movs	r3, #32
 8021790:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8021794:	2330      	movs	r3, #48	; 0x30
 8021796:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802179a:	4637      	mov	r7, r6
 802179c:	463d      	mov	r5, r7
 802179e:	f815 3b01 	ldrb.w	r3, [r5], #1
 80217a2:	b10b      	cbz	r3, 80217a8 <_svfiprintf_r+0x58>
 80217a4:	2b25      	cmp	r3, #37	; 0x25
 80217a6:	d13e      	bne.n	8021826 <_svfiprintf_r+0xd6>
 80217a8:	ebb7 0a06 	subs.w	sl, r7, r6
 80217ac:	d00b      	beq.n	80217c6 <_svfiprintf_r+0x76>
 80217ae:	4653      	mov	r3, sl
 80217b0:	4632      	mov	r2, r6
 80217b2:	4621      	mov	r1, r4
 80217b4:	4640      	mov	r0, r8
 80217b6:	f7ff ff70 	bl	802169a <__ssputs_r>
 80217ba:	3001      	adds	r0, #1
 80217bc:	f000 80a4 	beq.w	8021908 <_svfiprintf_r+0x1b8>
 80217c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80217c2:	4453      	add	r3, sl
 80217c4:	9309      	str	r3, [sp, #36]	; 0x24
 80217c6:	783b      	ldrb	r3, [r7, #0]
 80217c8:	2b00      	cmp	r3, #0
 80217ca:	f000 809d 	beq.w	8021908 <_svfiprintf_r+0x1b8>
 80217ce:	2300      	movs	r3, #0
 80217d0:	f04f 32ff 	mov.w	r2, #4294967295
 80217d4:	9304      	str	r3, [sp, #16]
 80217d6:	9307      	str	r3, [sp, #28]
 80217d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80217dc:	931a      	str	r3, [sp, #104]	; 0x68
 80217de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80217e2:	462f      	mov	r7, r5
 80217e4:	2205      	movs	r2, #5
 80217e6:	4851      	ldr	r0, [pc, #324]	; (802192c <_svfiprintf_r+0x1dc>)
 80217e8:	f817 1b01 	ldrb.w	r1, [r7], #1
 80217ec:	f7ff fc32 	bl	8021054 <memchr>
 80217f0:	9b04      	ldr	r3, [sp, #16]
 80217f2:	b9d0      	cbnz	r0, 802182a <_svfiprintf_r+0xda>
 80217f4:	06d9      	lsls	r1, r3, #27
 80217f6:	bf44      	itt	mi
 80217f8:	2220      	movmi	r2, #32
 80217fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80217fe:	071a      	lsls	r2, r3, #28
 8021800:	bf44      	itt	mi
 8021802:	222b      	movmi	r2, #43	; 0x2b
 8021804:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8021808:	782a      	ldrb	r2, [r5, #0]
 802180a:	2a2a      	cmp	r2, #42	; 0x2a
 802180c:	d015      	beq.n	802183a <_svfiprintf_r+0xea>
 802180e:	462f      	mov	r7, r5
 8021810:	9a07      	ldr	r2, [sp, #28]
 8021812:	2000      	movs	r0, #0
 8021814:	250a      	movs	r5, #10
 8021816:	4639      	mov	r1, r7
 8021818:	f811 3b01 	ldrb.w	r3, [r1], #1
 802181c:	3b30      	subs	r3, #48	; 0x30
 802181e:	2b09      	cmp	r3, #9
 8021820:	d94d      	bls.n	80218be <_svfiprintf_r+0x16e>
 8021822:	b1b8      	cbz	r0, 8021854 <_svfiprintf_r+0x104>
 8021824:	e00f      	b.n	8021846 <_svfiprintf_r+0xf6>
 8021826:	462f      	mov	r7, r5
 8021828:	e7b8      	b.n	802179c <_svfiprintf_r+0x4c>
 802182a:	4a40      	ldr	r2, [pc, #256]	; (802192c <_svfiprintf_r+0x1dc>)
 802182c:	463d      	mov	r5, r7
 802182e:	1a80      	subs	r0, r0, r2
 8021830:	fa0b f000 	lsl.w	r0, fp, r0
 8021834:	4318      	orrs	r0, r3
 8021836:	9004      	str	r0, [sp, #16]
 8021838:	e7d3      	b.n	80217e2 <_svfiprintf_r+0x92>
 802183a:	9a03      	ldr	r2, [sp, #12]
 802183c:	1d11      	adds	r1, r2, #4
 802183e:	6812      	ldr	r2, [r2, #0]
 8021840:	2a00      	cmp	r2, #0
 8021842:	9103      	str	r1, [sp, #12]
 8021844:	db01      	blt.n	802184a <_svfiprintf_r+0xfa>
 8021846:	9207      	str	r2, [sp, #28]
 8021848:	e004      	b.n	8021854 <_svfiprintf_r+0x104>
 802184a:	4252      	negs	r2, r2
 802184c:	f043 0302 	orr.w	r3, r3, #2
 8021850:	9207      	str	r2, [sp, #28]
 8021852:	9304      	str	r3, [sp, #16]
 8021854:	783b      	ldrb	r3, [r7, #0]
 8021856:	2b2e      	cmp	r3, #46	; 0x2e
 8021858:	d10c      	bne.n	8021874 <_svfiprintf_r+0x124>
 802185a:	787b      	ldrb	r3, [r7, #1]
 802185c:	2b2a      	cmp	r3, #42	; 0x2a
 802185e:	d133      	bne.n	80218c8 <_svfiprintf_r+0x178>
 8021860:	9b03      	ldr	r3, [sp, #12]
 8021862:	3702      	adds	r7, #2
 8021864:	1d1a      	adds	r2, r3, #4
 8021866:	681b      	ldr	r3, [r3, #0]
 8021868:	2b00      	cmp	r3, #0
 802186a:	9203      	str	r2, [sp, #12]
 802186c:	bfb8      	it	lt
 802186e:	f04f 33ff 	movlt.w	r3, #4294967295
 8021872:	9305      	str	r3, [sp, #20]
 8021874:	4d2e      	ldr	r5, [pc, #184]	; (8021930 <_svfiprintf_r+0x1e0>)
 8021876:	2203      	movs	r2, #3
 8021878:	7839      	ldrb	r1, [r7, #0]
 802187a:	4628      	mov	r0, r5
 802187c:	f7ff fbea 	bl	8021054 <memchr>
 8021880:	b138      	cbz	r0, 8021892 <_svfiprintf_r+0x142>
 8021882:	2340      	movs	r3, #64	; 0x40
 8021884:	1b40      	subs	r0, r0, r5
 8021886:	3701      	adds	r7, #1
 8021888:	fa03 f000 	lsl.w	r0, r3, r0
 802188c:	9b04      	ldr	r3, [sp, #16]
 802188e:	4303      	orrs	r3, r0
 8021890:	9304      	str	r3, [sp, #16]
 8021892:	7839      	ldrb	r1, [r7, #0]
 8021894:	2206      	movs	r2, #6
 8021896:	4827      	ldr	r0, [pc, #156]	; (8021934 <_svfiprintf_r+0x1e4>)
 8021898:	1c7e      	adds	r6, r7, #1
 802189a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802189e:	f7ff fbd9 	bl	8021054 <memchr>
 80218a2:	2800      	cmp	r0, #0
 80218a4:	d038      	beq.n	8021918 <_svfiprintf_r+0x1c8>
 80218a6:	4b24      	ldr	r3, [pc, #144]	; (8021938 <_svfiprintf_r+0x1e8>)
 80218a8:	bb13      	cbnz	r3, 80218f0 <_svfiprintf_r+0x1a0>
 80218aa:	9b03      	ldr	r3, [sp, #12]
 80218ac:	3307      	adds	r3, #7
 80218ae:	f023 0307 	bic.w	r3, r3, #7
 80218b2:	3308      	adds	r3, #8
 80218b4:	9303      	str	r3, [sp, #12]
 80218b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80218b8:	444b      	add	r3, r9
 80218ba:	9309      	str	r3, [sp, #36]	; 0x24
 80218bc:	e76d      	b.n	802179a <_svfiprintf_r+0x4a>
 80218be:	fb05 3202 	mla	r2, r5, r2, r3
 80218c2:	2001      	movs	r0, #1
 80218c4:	460f      	mov	r7, r1
 80218c6:	e7a6      	b.n	8021816 <_svfiprintf_r+0xc6>
 80218c8:	2300      	movs	r3, #0
 80218ca:	3701      	adds	r7, #1
 80218cc:	250a      	movs	r5, #10
 80218ce:	4619      	mov	r1, r3
 80218d0:	9305      	str	r3, [sp, #20]
 80218d2:	4638      	mov	r0, r7
 80218d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80218d8:	3a30      	subs	r2, #48	; 0x30
 80218da:	2a09      	cmp	r2, #9
 80218dc:	d903      	bls.n	80218e6 <_svfiprintf_r+0x196>
 80218de:	2b00      	cmp	r3, #0
 80218e0:	d0c8      	beq.n	8021874 <_svfiprintf_r+0x124>
 80218e2:	9105      	str	r1, [sp, #20]
 80218e4:	e7c6      	b.n	8021874 <_svfiprintf_r+0x124>
 80218e6:	fb05 2101 	mla	r1, r5, r1, r2
 80218ea:	2301      	movs	r3, #1
 80218ec:	4607      	mov	r7, r0
 80218ee:	e7f0      	b.n	80218d2 <_svfiprintf_r+0x182>
 80218f0:	ab03      	add	r3, sp, #12
 80218f2:	4622      	mov	r2, r4
 80218f4:	a904      	add	r1, sp, #16
 80218f6:	4640      	mov	r0, r8
 80218f8:	9300      	str	r3, [sp, #0]
 80218fa:	4b10      	ldr	r3, [pc, #64]	; (802193c <_svfiprintf_r+0x1ec>)
 80218fc:	f7fd fe18 	bl	801f530 <_printf_float>
 8021900:	f1b0 3fff 	cmp.w	r0, #4294967295
 8021904:	4681      	mov	r9, r0
 8021906:	d1d6      	bne.n	80218b6 <_svfiprintf_r+0x166>
 8021908:	89a3      	ldrh	r3, [r4, #12]
 802190a:	065b      	lsls	r3, r3, #25
 802190c:	f53f af35 	bmi.w	802177a <_svfiprintf_r+0x2a>
 8021910:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021912:	b01d      	add	sp, #116	; 0x74
 8021914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021918:	ab03      	add	r3, sp, #12
 802191a:	4622      	mov	r2, r4
 802191c:	a904      	add	r1, sp, #16
 802191e:	4640      	mov	r0, r8
 8021920:	9300      	str	r3, [sp, #0]
 8021922:	4b06      	ldr	r3, [pc, #24]	; (802193c <_svfiprintf_r+0x1ec>)
 8021924:	f7fe f8bc 	bl	801faa0 <_printf_i>
 8021928:	e7ea      	b.n	8021900 <_svfiprintf_r+0x1b0>
 802192a:	bf00      	nop
 802192c:	08026090 	.word	0x08026090
 8021930:	08026096 	.word	0x08026096
 8021934:	0802609a 	.word	0x0802609a
 8021938:	0801f531 	.word	0x0801f531
 802193c:	0802169b 	.word	0x0802169b

08021940 <__sread>:
 8021940:	b510      	push	{r4, lr}
 8021942:	460c      	mov	r4, r1
 8021944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021948:	f000 f8ae 	bl	8021aa8 <_read_r>
 802194c:	2800      	cmp	r0, #0
 802194e:	bfab      	itete	ge
 8021950:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8021952:	89a3      	ldrhlt	r3, [r4, #12]
 8021954:	181b      	addge	r3, r3, r0
 8021956:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802195a:	bfac      	ite	ge
 802195c:	6563      	strge	r3, [r4, #84]	; 0x54
 802195e:	81a3      	strhlt	r3, [r4, #12]
 8021960:	bd10      	pop	{r4, pc}

08021962 <__swrite>:
 8021962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021966:	461f      	mov	r7, r3
 8021968:	898b      	ldrh	r3, [r1, #12]
 802196a:	4605      	mov	r5, r0
 802196c:	460c      	mov	r4, r1
 802196e:	05db      	lsls	r3, r3, #23
 8021970:	4616      	mov	r6, r2
 8021972:	d505      	bpl.n	8021980 <__swrite+0x1e>
 8021974:	2302      	movs	r3, #2
 8021976:	2200      	movs	r2, #0
 8021978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802197c:	f000 f868 	bl	8021a50 <_lseek_r>
 8021980:	89a3      	ldrh	r3, [r4, #12]
 8021982:	4632      	mov	r2, r6
 8021984:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021988:	4628      	mov	r0, r5
 802198a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802198e:	81a3      	strh	r3, [r4, #12]
 8021990:	463b      	mov	r3, r7
 8021992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021996:	f000 b817 	b.w	80219c8 <_write_r>

0802199a <__sseek>:
 802199a:	b510      	push	{r4, lr}
 802199c:	460c      	mov	r4, r1
 802199e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80219a2:	f000 f855 	bl	8021a50 <_lseek_r>
 80219a6:	1c43      	adds	r3, r0, #1
 80219a8:	89a3      	ldrh	r3, [r4, #12]
 80219aa:	bf15      	itete	ne
 80219ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80219ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80219b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80219b6:	81a3      	strheq	r3, [r4, #12]
 80219b8:	bf18      	it	ne
 80219ba:	81a3      	strhne	r3, [r4, #12]
 80219bc:	bd10      	pop	{r4, pc}

080219be <__sclose>:
 80219be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80219c2:	f000 b813 	b.w	80219ec <_close_r>
	...

080219c8 <_write_r>:
 80219c8:	b538      	push	{r3, r4, r5, lr}
 80219ca:	4605      	mov	r5, r0
 80219cc:	4c06      	ldr	r4, [pc, #24]	; (80219e8 <_write_r+0x20>)
 80219ce:	4608      	mov	r0, r1
 80219d0:	4611      	mov	r1, r2
 80219d2:	2200      	movs	r2, #0
 80219d4:	6022      	str	r2, [r4, #0]
 80219d6:	461a      	mov	r2, r3
 80219d8:	f7e0 fa47 	bl	8001e6a <_write>
 80219dc:	1c43      	adds	r3, r0, #1
 80219de:	d102      	bne.n	80219e6 <_write_r+0x1e>
 80219e0:	6823      	ldr	r3, [r4, #0]
 80219e2:	b103      	cbz	r3, 80219e6 <_write_r+0x1e>
 80219e4:	602b      	str	r3, [r5, #0]
 80219e6:	bd38      	pop	{r3, r4, r5, pc}
 80219e8:	2002d190 	.word	0x2002d190

080219ec <_close_r>:
 80219ec:	b538      	push	{r3, r4, r5, lr}
 80219ee:	2300      	movs	r3, #0
 80219f0:	4c05      	ldr	r4, [pc, #20]	; (8021a08 <_close_r+0x1c>)
 80219f2:	4605      	mov	r5, r0
 80219f4:	4608      	mov	r0, r1
 80219f6:	6023      	str	r3, [r4, #0]
 80219f8:	f7e0 fa53 	bl	8001ea2 <_close>
 80219fc:	1c43      	adds	r3, r0, #1
 80219fe:	d102      	bne.n	8021a06 <_close_r+0x1a>
 8021a00:	6823      	ldr	r3, [r4, #0]
 8021a02:	b103      	cbz	r3, 8021a06 <_close_r+0x1a>
 8021a04:	602b      	str	r3, [r5, #0]
 8021a06:	bd38      	pop	{r3, r4, r5, pc}
 8021a08:	2002d190 	.word	0x2002d190

08021a0c <_fstat_r>:
 8021a0c:	b538      	push	{r3, r4, r5, lr}
 8021a0e:	2300      	movs	r3, #0
 8021a10:	4c06      	ldr	r4, [pc, #24]	; (8021a2c <_fstat_r+0x20>)
 8021a12:	4605      	mov	r5, r0
 8021a14:	4608      	mov	r0, r1
 8021a16:	4611      	mov	r1, r2
 8021a18:	6023      	str	r3, [r4, #0]
 8021a1a:	f7e0 fa4e 	bl	8001eba <_fstat>
 8021a1e:	1c43      	adds	r3, r0, #1
 8021a20:	d102      	bne.n	8021a28 <_fstat_r+0x1c>
 8021a22:	6823      	ldr	r3, [r4, #0]
 8021a24:	b103      	cbz	r3, 8021a28 <_fstat_r+0x1c>
 8021a26:	602b      	str	r3, [r5, #0]
 8021a28:	bd38      	pop	{r3, r4, r5, pc}
 8021a2a:	bf00      	nop
 8021a2c:	2002d190 	.word	0x2002d190

08021a30 <_isatty_r>:
 8021a30:	b538      	push	{r3, r4, r5, lr}
 8021a32:	2300      	movs	r3, #0
 8021a34:	4c05      	ldr	r4, [pc, #20]	; (8021a4c <_isatty_r+0x1c>)
 8021a36:	4605      	mov	r5, r0
 8021a38:	4608      	mov	r0, r1
 8021a3a:	6023      	str	r3, [r4, #0]
 8021a3c:	f7e0 fa4d 	bl	8001eda <_isatty>
 8021a40:	1c43      	adds	r3, r0, #1
 8021a42:	d102      	bne.n	8021a4a <_isatty_r+0x1a>
 8021a44:	6823      	ldr	r3, [r4, #0]
 8021a46:	b103      	cbz	r3, 8021a4a <_isatty_r+0x1a>
 8021a48:	602b      	str	r3, [r5, #0]
 8021a4a:	bd38      	pop	{r3, r4, r5, pc}
 8021a4c:	2002d190 	.word	0x2002d190

08021a50 <_lseek_r>:
 8021a50:	b538      	push	{r3, r4, r5, lr}
 8021a52:	4605      	mov	r5, r0
 8021a54:	4c06      	ldr	r4, [pc, #24]	; (8021a70 <_lseek_r+0x20>)
 8021a56:	4608      	mov	r0, r1
 8021a58:	4611      	mov	r1, r2
 8021a5a:	2200      	movs	r2, #0
 8021a5c:	6022      	str	r2, [r4, #0]
 8021a5e:	461a      	mov	r2, r3
 8021a60:	f7e0 fa46 	bl	8001ef0 <_lseek>
 8021a64:	1c43      	adds	r3, r0, #1
 8021a66:	d102      	bne.n	8021a6e <_lseek_r+0x1e>
 8021a68:	6823      	ldr	r3, [r4, #0]
 8021a6a:	b103      	cbz	r3, 8021a6e <_lseek_r+0x1e>
 8021a6c:	602b      	str	r3, [r5, #0]
 8021a6e:	bd38      	pop	{r3, r4, r5, pc}
 8021a70:	2002d190 	.word	0x2002d190

08021a74 <__ascii_mbtowc>:
 8021a74:	b082      	sub	sp, #8
 8021a76:	b901      	cbnz	r1, 8021a7a <__ascii_mbtowc+0x6>
 8021a78:	a901      	add	r1, sp, #4
 8021a7a:	b142      	cbz	r2, 8021a8e <__ascii_mbtowc+0x1a>
 8021a7c:	b14b      	cbz	r3, 8021a92 <__ascii_mbtowc+0x1e>
 8021a7e:	7813      	ldrb	r3, [r2, #0]
 8021a80:	600b      	str	r3, [r1, #0]
 8021a82:	7812      	ldrb	r2, [r2, #0]
 8021a84:	1c10      	adds	r0, r2, #0
 8021a86:	bf18      	it	ne
 8021a88:	2001      	movne	r0, #1
 8021a8a:	b002      	add	sp, #8
 8021a8c:	4770      	bx	lr
 8021a8e:	4610      	mov	r0, r2
 8021a90:	e7fb      	b.n	8021a8a <__ascii_mbtowc+0x16>
 8021a92:	f06f 0001 	mvn.w	r0, #1
 8021a96:	e7f8      	b.n	8021a8a <__ascii_mbtowc+0x16>

08021a98 <_malloc_usable_size_r>:
 8021a98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021a9c:	1f18      	subs	r0, r3, #4
 8021a9e:	2b00      	cmp	r3, #0
 8021aa0:	bfbc      	itt	lt
 8021aa2:	580b      	ldrlt	r3, [r1, r0]
 8021aa4:	18c0      	addlt	r0, r0, r3
 8021aa6:	4770      	bx	lr

08021aa8 <_read_r>:
 8021aa8:	b538      	push	{r3, r4, r5, lr}
 8021aaa:	4605      	mov	r5, r0
 8021aac:	4c06      	ldr	r4, [pc, #24]	; (8021ac8 <_read_r+0x20>)
 8021aae:	4608      	mov	r0, r1
 8021ab0:	4611      	mov	r1, r2
 8021ab2:	2200      	movs	r2, #0
 8021ab4:	6022      	str	r2, [r4, #0]
 8021ab6:	461a      	mov	r2, r3
 8021ab8:	f7e0 f9ba 	bl	8001e30 <_read>
 8021abc:	1c43      	adds	r3, r0, #1
 8021abe:	d102      	bne.n	8021ac6 <_read_r+0x1e>
 8021ac0:	6823      	ldr	r3, [r4, #0]
 8021ac2:	b103      	cbz	r3, 8021ac6 <_read_r+0x1e>
 8021ac4:	602b      	str	r3, [r5, #0]
 8021ac6:	bd38      	pop	{r3, r4, r5, pc}
 8021ac8:	2002d190 	.word	0x2002d190

08021acc <__ascii_wctomb>:
 8021acc:	b149      	cbz	r1, 8021ae2 <__ascii_wctomb+0x16>
 8021ace:	2aff      	cmp	r2, #255	; 0xff
 8021ad0:	bf8d      	iteet	hi
 8021ad2:	238a      	movhi	r3, #138	; 0x8a
 8021ad4:	700a      	strbls	r2, [r1, #0]
 8021ad6:	2001      	movls	r0, #1
 8021ad8:	6003      	strhi	r3, [r0, #0]
 8021ada:	bf88      	it	hi
 8021adc:	f04f 30ff 	movhi.w	r0, #4294967295
 8021ae0:	4770      	bx	lr
 8021ae2:	4608      	mov	r0, r1
 8021ae4:	4770      	bx	lr
	...

08021ae8 <_init>:
 8021ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021aea:	bf00      	nop
 8021aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021aee:	bc08      	pop	{r3}
 8021af0:	469e      	mov	lr, r3
 8021af2:	4770      	bx	lr

08021af4 <_fini>:
 8021af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021af6:	bf00      	nop
 8021af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021afa:	bc08      	pop	{r3}
 8021afc:	469e      	mov	lr, r3
 8021afe:	4770      	bx	lr
