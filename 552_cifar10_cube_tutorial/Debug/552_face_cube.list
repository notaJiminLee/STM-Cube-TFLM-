
552_face_cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c638  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000171c0  0800c830  0800c830  0001c830  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080239f0  080239f0  00040cd4  2**0
                  CONTENTS
  4 .ARM          00000008  080239f0  080239f0  000339f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080239f8  080239f8  00040cd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080239f8  080239f8  000339f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080239fc  080239fc  000339fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000cd4  20000000  08023a00  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  20000cd4  080246d4  00040cd4  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  20000eb0  080246d4  00040eb0  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00040cd4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012394  00000000  00000000  00040d0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000023b8  00000000  00000000  0005309e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f48  00000000  00000000  00055458  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e50  00000000  00000000  000563a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a8b0  00000000  00000000  000571f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d112  00000000  00000000  00081aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00114327  00000000  00000000  0008ebb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a2ed9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c50  00000000  00000000  001a2f54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	e000      	b.n	800020a <__do_global_dtors_aux+0x12>
 8000208:	bf00      	nop
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000cd4 	.word	0x20000cd4
 8000214:	00000000 	.word	0x00000000
 8000218:	0800c818 	.word	0x0800c818

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	e000      	b.n	800022a <frame_dummy+0xe>
 8000228:	bf00      	nop
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000cd8 	.word	0x20000cd8
 8000234:	0800c818 	.word	0x0800c818

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_drsub>:
 8000248:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800024c:	e002      	b.n	8000254 <__adddf3>
 800024e:	bf00      	nop

08000250 <__aeabi_dsub>:
 8000250:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000254 <__adddf3>:
 8000254:	b530      	push	{r4, r5, lr}
 8000256:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800025a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800025e:	ea94 0f05 	teq	r4, r5
 8000262:	bf08      	it	eq
 8000264:	ea90 0f02 	teqeq	r0, r2
 8000268:	bf1f      	itttt	ne
 800026a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800026e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000272:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000276:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800027a:	f000 80e2 	beq.w	8000442 <__adddf3+0x1ee>
 800027e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000282:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000286:	bfb8      	it	lt
 8000288:	426d      	neglt	r5, r5
 800028a:	dd0c      	ble.n	80002a6 <__adddf3+0x52>
 800028c:	442c      	add	r4, r5
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	ea82 0000 	eor.w	r0, r2, r0
 800029a:	ea83 0101 	eor.w	r1, r3, r1
 800029e:	ea80 0202 	eor.w	r2, r0, r2
 80002a2:	ea81 0303 	eor.w	r3, r1, r3
 80002a6:	2d36      	cmp	r5, #54	; 0x36
 80002a8:	bf88      	it	hi
 80002aa:	bd30      	pophi	{r4, r5, pc}
 80002ac:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002b4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002bc:	d002      	beq.n	80002c4 <__adddf3+0x70>
 80002be:	4240      	negs	r0, r0
 80002c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002cc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d0:	d002      	beq.n	80002d8 <__adddf3+0x84>
 80002d2:	4252      	negs	r2, r2
 80002d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d8:	ea94 0f05 	teq	r4, r5
 80002dc:	f000 80a7 	beq.w	800042e <__adddf3+0x1da>
 80002e0:	f1a4 0401 	sub.w	r4, r4, #1
 80002e4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e8:	db0d      	blt.n	8000306 <__adddf3+0xb2>
 80002ea:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ee:	fa22 f205 	lsr.w	r2, r2, r5
 80002f2:	1880      	adds	r0, r0, r2
 80002f4:	f141 0100 	adc.w	r1, r1, #0
 80002f8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002fc:	1880      	adds	r0, r0, r2
 80002fe:	fa43 f305 	asr.w	r3, r3, r5
 8000302:	4159      	adcs	r1, r3
 8000304:	e00e      	b.n	8000324 <__adddf3+0xd0>
 8000306:	f1a5 0520 	sub.w	r5, r5, #32
 800030a:	f10e 0e20 	add.w	lr, lr, #32
 800030e:	2a01      	cmp	r2, #1
 8000310:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000314:	bf28      	it	cs
 8000316:	f04c 0c02 	orrcs.w	ip, ip, #2
 800031a:	fa43 f305 	asr.w	r3, r3, r5
 800031e:	18c0      	adds	r0, r0, r3
 8000320:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000324:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000328:	d507      	bpl.n	800033a <__adddf3+0xe6>
 800032a:	f04f 0e00 	mov.w	lr, #0
 800032e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000332:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000336:	eb6e 0101 	sbc.w	r1, lr, r1
 800033a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800033e:	d31b      	bcc.n	8000378 <__adddf3+0x124>
 8000340:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000344:	d30c      	bcc.n	8000360 <__adddf3+0x10c>
 8000346:	0849      	lsrs	r1, r1, #1
 8000348:	ea5f 0030 	movs.w	r0, r0, rrx
 800034c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000350:	f104 0401 	add.w	r4, r4, #1
 8000354:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000358:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800035c:	f080 809a 	bcs.w	8000494 <__adddf3+0x240>
 8000360:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	ea41 0105 	orr.w	r1, r1, r5
 8000376:	bd30      	pop	{r4, r5, pc}
 8000378:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800037c:	4140      	adcs	r0, r0
 800037e:	eb41 0101 	adc.w	r1, r1, r1
 8000382:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000386:	f1a4 0401 	sub.w	r4, r4, #1
 800038a:	d1e9      	bne.n	8000360 <__adddf3+0x10c>
 800038c:	f091 0f00 	teq	r1, #0
 8000390:	bf04      	itt	eq
 8000392:	4601      	moveq	r1, r0
 8000394:	2000      	moveq	r0, #0
 8000396:	fab1 f381 	clz	r3, r1
 800039a:	bf08      	it	eq
 800039c:	3320      	addeq	r3, #32
 800039e:	f1a3 030b 	sub.w	r3, r3, #11
 80003a2:	f1b3 0220 	subs.w	r2, r3, #32
 80003a6:	da0c      	bge.n	80003c2 <__adddf3+0x16e>
 80003a8:	320c      	adds	r2, #12
 80003aa:	dd08      	ble.n	80003be <__adddf3+0x16a>
 80003ac:	f102 0c14 	add.w	ip, r2, #20
 80003b0:	f1c2 020c 	rsb	r2, r2, #12
 80003b4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b8:	fa21 f102 	lsr.w	r1, r1, r2
 80003bc:	e00c      	b.n	80003d8 <__adddf3+0x184>
 80003be:	f102 0214 	add.w	r2, r2, #20
 80003c2:	bfd8      	it	le
 80003c4:	f1c2 0c20 	rsble	ip, r2, #32
 80003c8:	fa01 f102 	lsl.w	r1, r1, r2
 80003cc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d0:	bfdc      	itt	le
 80003d2:	ea41 010c 	orrle.w	r1, r1, ip
 80003d6:	4090      	lslle	r0, r2
 80003d8:	1ae4      	subs	r4, r4, r3
 80003da:	bfa2      	ittt	ge
 80003dc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e0:	4329      	orrge	r1, r5
 80003e2:	bd30      	popge	{r4, r5, pc}
 80003e4:	ea6f 0404 	mvn.w	r4, r4
 80003e8:	3c1f      	subs	r4, #31
 80003ea:	da1c      	bge.n	8000426 <__adddf3+0x1d2>
 80003ec:	340c      	adds	r4, #12
 80003ee:	dc0e      	bgt.n	800040e <__adddf3+0x1ba>
 80003f0:	f104 0414 	add.w	r4, r4, #20
 80003f4:	f1c4 0220 	rsb	r2, r4, #32
 80003f8:	fa20 f004 	lsr.w	r0, r0, r4
 80003fc:	fa01 f302 	lsl.w	r3, r1, r2
 8000400:	ea40 0003 	orr.w	r0, r0, r3
 8000404:	fa21 f304 	lsr.w	r3, r1, r4
 8000408:	ea45 0103 	orr.w	r1, r5, r3
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f1c4 040c 	rsb	r4, r4, #12
 8000412:	f1c4 0220 	rsb	r2, r4, #32
 8000416:	fa20 f002 	lsr.w	r0, r0, r2
 800041a:	fa01 f304 	lsl.w	r3, r1, r4
 800041e:	ea40 0003 	orr.w	r0, r0, r3
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	fa21 f004 	lsr.w	r0, r1, r4
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	f094 0f00 	teq	r4, #0
 8000432:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000436:	bf06      	itte	eq
 8000438:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800043c:	3401      	addeq	r4, #1
 800043e:	3d01      	subne	r5, #1
 8000440:	e74e      	b.n	80002e0 <__adddf3+0x8c>
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf18      	it	ne
 8000448:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044c:	d029      	beq.n	80004a2 <__adddf3+0x24e>
 800044e:	ea94 0f05 	teq	r4, r5
 8000452:	bf08      	it	eq
 8000454:	ea90 0f02 	teqeq	r0, r2
 8000458:	d005      	beq.n	8000466 <__adddf3+0x212>
 800045a:	ea54 0c00 	orrs.w	ip, r4, r0
 800045e:	bf04      	itt	eq
 8000460:	4619      	moveq	r1, r3
 8000462:	4610      	moveq	r0, r2
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	ea91 0f03 	teq	r1, r3
 800046a:	bf1e      	ittt	ne
 800046c:	2100      	movne	r1, #0
 800046e:	2000      	movne	r0, #0
 8000470:	bd30      	popne	{r4, r5, pc}
 8000472:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000476:	d105      	bne.n	8000484 <__adddf3+0x230>
 8000478:	0040      	lsls	r0, r0, #1
 800047a:	4149      	adcs	r1, r1
 800047c:	bf28      	it	cs
 800047e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000482:	bd30      	pop	{r4, r5, pc}
 8000484:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000488:	bf3c      	itt	cc
 800048a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800048e:	bd30      	popcc	{r4, r5, pc}
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000498:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800049c:	f04f 0000 	mov.w	r0, #0
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a6:	bf1a      	itte	ne
 80004a8:	4619      	movne	r1, r3
 80004aa:	4610      	movne	r0, r2
 80004ac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b0:	bf1c      	itt	ne
 80004b2:	460b      	movne	r3, r1
 80004b4:	4602      	movne	r2, r0
 80004b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004ba:	bf06      	itte	eq
 80004bc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c0:	ea91 0f03 	teqeq	r1, r3
 80004c4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	bf00      	nop

080004cc <__aeabi_ui2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f04f 0500 	mov.w	r5, #0
 80004e4:	f04f 0100 	mov.w	r1, #0
 80004e8:	e750      	b.n	800038c <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_i2d>:
 80004ec:	f090 0f00 	teq	r0, #0
 80004f0:	bf04      	itt	eq
 80004f2:	2100      	moveq	r1, #0
 80004f4:	4770      	bxeq	lr
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000500:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000504:	bf48      	it	mi
 8000506:	4240      	negmi	r0, r0
 8000508:	f04f 0100 	mov.w	r1, #0
 800050c:	e73e      	b.n	800038c <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_f2d>:
 8000510:	0042      	lsls	r2, r0, #1
 8000512:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000516:	ea4f 0131 	mov.w	r1, r1, rrx
 800051a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800051e:	bf1f      	itttt	ne
 8000520:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000524:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000528:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800052c:	4770      	bxne	lr
 800052e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000532:	bf08      	it	eq
 8000534:	4770      	bxeq	lr
 8000536:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800053a:	bf04      	itt	eq
 800053c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000550:	e71c      	b.n	800038c <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_ul2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f04f 0500 	mov.w	r5, #0
 8000562:	e00a      	b.n	800057a <__aeabi_l2d+0x16>

08000564 <__aeabi_l2d>:
 8000564:	ea50 0201 	orrs.w	r2, r0, r1
 8000568:	bf08      	it	eq
 800056a:	4770      	bxeq	lr
 800056c:	b530      	push	{r4, r5, lr}
 800056e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000572:	d502      	bpl.n	800057a <__aeabi_l2d+0x16>
 8000574:	4240      	negs	r0, r0
 8000576:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800057a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000582:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000586:	f43f aed8 	beq.w	800033a <__adddf3+0xe6>
 800058a:	f04f 0203 	mov.w	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005a2:	f1c2 0320 	rsb	r3, r2, #32
 80005a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005aa:	fa20 f002 	lsr.w	r0, r0, r2
 80005ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80005b2:	ea40 000e 	orr.w	r0, r0, lr
 80005b6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ba:	4414      	add	r4, r2
 80005bc:	e6bd      	b.n	800033a <__adddf3+0xe6>
 80005be:	bf00      	nop

080005c0 <__aeabi_dmul>:
 80005c0:	b570      	push	{r4, r5, r6, lr}
 80005c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ce:	bf1d      	ittte	ne
 80005d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005d4:	ea94 0f0c 	teqne	r4, ip
 80005d8:	ea95 0f0c 	teqne	r5, ip
 80005dc:	f000 f8de 	bleq	800079c <__aeabi_dmul+0x1dc>
 80005e0:	442c      	add	r4, r5
 80005e2:	ea81 0603 	eor.w	r6, r1, r3
 80005e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005f2:	bf18      	it	ne
 80005f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000600:	d038      	beq.n	8000674 <__aeabi_dmul+0xb4>
 8000602:	fba0 ce02 	umull	ip, lr, r0, r2
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800060e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000612:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000616:	f04f 0600 	mov.w	r6, #0
 800061a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800061e:	f09c 0f00 	teq	ip, #0
 8000622:	bf18      	it	ne
 8000624:	f04e 0e01 	orrne.w	lr, lr, #1
 8000628:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800062c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000630:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000634:	d204      	bcs.n	8000640 <__aeabi_dmul+0x80>
 8000636:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800063a:	416d      	adcs	r5, r5
 800063c:	eb46 0606 	adc.w	r6, r6, r6
 8000640:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000644:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000648:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800064c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000650:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000654:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000658:	bf88      	it	hi
 800065a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800065e:	d81e      	bhi.n	800069e <__aeabi_dmul+0xde>
 8000660:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000664:	bf08      	it	eq
 8000666:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800066a:	f150 0000 	adcs.w	r0, r0, #0
 800066e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000678:	ea46 0101 	orr.w	r1, r6, r1
 800067c:	ea40 0002 	orr.w	r0, r0, r2
 8000680:	ea81 0103 	eor.w	r1, r1, r3
 8000684:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000688:	bfc2      	ittt	gt
 800068a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800068e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000692:	bd70      	popgt	{r4, r5, r6, pc}
 8000694:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000698:	f04f 0e00 	mov.w	lr, #0
 800069c:	3c01      	subs	r4, #1
 800069e:	f300 80ab 	bgt.w	80007f8 <__aeabi_dmul+0x238>
 80006a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006a6:	bfde      	ittt	le
 80006a8:	2000      	movle	r0, #0
 80006aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ae:	bd70      	pople	{r4, r5, r6, pc}
 80006b0:	f1c4 0400 	rsb	r4, r4, #0
 80006b4:	3c20      	subs	r4, #32
 80006b6:	da35      	bge.n	8000724 <__aeabi_dmul+0x164>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc1b      	bgt.n	80006f4 <__aeabi_dmul+0x134>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f305 	lsl.w	r3, r0, r5
 80006c8:	fa20 f004 	lsr.w	r0, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e0:	fa21 f604 	lsr.w	r6, r1, r4
 80006e4:	eb42 0106 	adc.w	r1, r2, r6
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 040c 	rsb	r4, r4, #12
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000700:	fa20 f005 	lsr.w	r0, r0, r5
 8000704:	fa01 f204 	lsl.w	r2, r1, r4
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000710:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000714:	f141 0100 	adc.w	r1, r1, #0
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 0520 	rsb	r5, r4, #32
 8000728:	fa00 f205 	lsl.w	r2, r0, r5
 800072c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000730:	fa20 f304 	lsr.w	r3, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea43 0302 	orr.w	r3, r3, r2
 800073c:	fa21 f004 	lsr.w	r0, r1, r4
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	fa21 f204 	lsr.w	r2, r1, r4
 8000748:	ea20 0002 	bic.w	r0, r0, r2
 800074c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f094 0f00 	teq	r4, #0
 8000760:	d10f      	bne.n	8000782 <__aeabi_dmul+0x1c2>
 8000762:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000766:	0040      	lsls	r0, r0, #1
 8000768:	eb41 0101 	adc.w	r1, r1, r1
 800076c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3c01      	subeq	r4, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1a6>
 8000776:	ea41 0106 	orr.w	r1, r1, r6
 800077a:	f095 0f00 	teq	r5, #0
 800077e:	bf18      	it	ne
 8000780:	4770      	bxne	lr
 8000782:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000786:	0052      	lsls	r2, r2, #1
 8000788:	eb43 0303 	adc.w	r3, r3, r3
 800078c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000790:	bf08      	it	eq
 8000792:	3d01      	subeq	r5, #1
 8000794:	d0f7      	beq.n	8000786 <__aeabi_dmul+0x1c6>
 8000796:	ea43 0306 	orr.w	r3, r3, r6
 800079a:	4770      	bx	lr
 800079c:	ea94 0f0c 	teq	r4, ip
 80007a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007a4:	bf18      	it	ne
 80007a6:	ea95 0f0c 	teqne	r5, ip
 80007aa:	d00c      	beq.n	80007c6 <__aeabi_dmul+0x206>
 80007ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b0:	bf18      	it	ne
 80007b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b6:	d1d1      	bne.n	800075c <__aeabi_dmul+0x19c>
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ca:	bf06      	itte	eq
 80007cc:	4610      	moveq	r0, r2
 80007ce:	4619      	moveq	r1, r3
 80007d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d4:	d019      	beq.n	800080a <__aeabi_dmul+0x24a>
 80007d6:	ea94 0f0c 	teq	r4, ip
 80007da:	d102      	bne.n	80007e2 <__aeabi_dmul+0x222>
 80007dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e0:	d113      	bne.n	800080a <__aeabi_dmul+0x24a>
 80007e2:	ea95 0f0c 	teq	r5, ip
 80007e6:	d105      	bne.n	80007f4 <__aeabi_dmul+0x234>
 80007e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ec:	bf1c      	itt	ne
 80007ee:	4610      	movne	r0, r2
 80007f0:	4619      	movne	r1, r3
 80007f2:	d10a      	bne.n	800080a <__aeabi_dmul+0x24a>
 80007f4:	ea81 0103 	eor.w	r1, r1, r3
 80007f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000800:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000804:	f04f 0000 	mov.w	r0, #0
 8000808:	bd70      	pop	{r4, r5, r6, pc}
 800080a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800080e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000812:	bd70      	pop	{r4, r5, r6, pc}

08000814 <__aeabi_ddiv>:
 8000814:	b570      	push	{r4, r5, r6, lr}
 8000816:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800081a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800081e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000822:	bf1d      	ittte	ne
 8000824:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000828:	ea94 0f0c 	teqne	r4, ip
 800082c:	ea95 0f0c 	teqne	r5, ip
 8000830:	f000 f8a7 	bleq	8000982 <__aeabi_ddiv+0x16e>
 8000834:	eba4 0405 	sub.w	r4, r4, r5
 8000838:	ea81 0e03 	eor.w	lr, r1, r3
 800083c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000840:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000844:	f000 8088 	beq.w	8000958 <__aeabi_ddiv+0x144>
 8000848:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800084c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000850:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000854:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000858:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800085c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000860:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000864:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000868:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800086c:	429d      	cmp	r5, r3
 800086e:	bf08      	it	eq
 8000870:	4296      	cmpeq	r6, r2
 8000872:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000876:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800087a:	d202      	bcs.n	8000882 <__aeabi_ddiv+0x6e>
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	1ab6      	subs	r6, r6, r2
 8000884:	eb65 0503 	sbc.w	r5, r5, r3
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000892:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008f4:	d018      	beq.n	8000928 <__aeabi_ddiv+0x114>
 80008f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000902:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000906:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800090a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800090e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000912:	d1c0      	bne.n	8000896 <__aeabi_ddiv+0x82>
 8000914:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000918:	d10b      	bne.n	8000932 <__aeabi_ddiv+0x11e>
 800091a:	ea41 0100 	orr.w	r1, r1, r0
 800091e:	f04f 0000 	mov.w	r0, #0
 8000922:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000926:	e7b6      	b.n	8000896 <__aeabi_ddiv+0x82>
 8000928:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800092c:	bf04      	itt	eq
 800092e:	4301      	orreq	r1, r0
 8000930:	2000      	moveq	r0, #0
 8000932:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000936:	bf88      	it	hi
 8000938:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800093c:	f63f aeaf 	bhi.w	800069e <__aeabi_dmul+0xde>
 8000940:	ebb5 0c03 	subs.w	ip, r5, r3
 8000944:	bf04      	itt	eq
 8000946:	ebb6 0c02 	subseq.w	ip, r6, r2
 800094a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800094e:	f150 0000 	adcs.w	r0, r0, #0
 8000952:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000956:	bd70      	pop	{r4, r5, r6, pc}
 8000958:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800095c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000960:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000964:	bfc2      	ittt	gt
 8000966:	ebd4 050c 	rsbsgt	r5, r4, ip
 800096a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800096e:	bd70      	popgt	{r4, r5, r6, pc}
 8000970:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000974:	f04f 0e00 	mov.w	lr, #0
 8000978:	3c01      	subs	r4, #1
 800097a:	e690      	b.n	800069e <__aeabi_dmul+0xde>
 800097c:	ea45 0e06 	orr.w	lr, r5, r6
 8000980:	e68d      	b.n	800069e <__aeabi_dmul+0xde>
 8000982:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000986:	ea94 0f0c 	teq	r4, ip
 800098a:	bf08      	it	eq
 800098c:	ea95 0f0c 	teqeq	r5, ip
 8000990:	f43f af3b 	beq.w	800080a <__aeabi_dmul+0x24a>
 8000994:	ea94 0f0c 	teq	r4, ip
 8000998:	d10a      	bne.n	80009b0 <__aeabi_ddiv+0x19c>
 800099a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800099e:	f47f af34 	bne.w	800080a <__aeabi_dmul+0x24a>
 80009a2:	ea95 0f0c 	teq	r5, ip
 80009a6:	f47f af25 	bne.w	80007f4 <__aeabi_dmul+0x234>
 80009aa:	4610      	mov	r0, r2
 80009ac:	4619      	mov	r1, r3
 80009ae:	e72c      	b.n	800080a <__aeabi_dmul+0x24a>
 80009b0:	ea95 0f0c 	teq	r5, ip
 80009b4:	d106      	bne.n	80009c4 <__aeabi_ddiv+0x1b0>
 80009b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ba:	f43f aefd 	beq.w	80007b8 <__aeabi_dmul+0x1f8>
 80009be:	4610      	mov	r0, r2
 80009c0:	4619      	mov	r1, r3
 80009c2:	e722      	b.n	800080a <__aeabi_dmul+0x24a>
 80009c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ce:	f47f aec5 	bne.w	800075c <__aeabi_dmul+0x19c>
 80009d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009d6:	f47f af0d 	bne.w	80007f4 <__aeabi_dmul+0x234>
 80009da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009de:	f47f aeeb 	bne.w	80007b8 <__aeabi_dmul+0x1f8>
 80009e2:	e712      	b.n	800080a <__aeabi_dmul+0x24a>

080009e4 <__gedf2>:
 80009e4:	f04f 3cff 	mov.w	ip, #4294967295
 80009e8:	e006      	b.n	80009f8 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__ledf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	e002      	b.n	80009f8 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__cmpdf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a0e:	d01b      	beq.n	8000a48 <__cmpdf2+0x54>
 8000a10:	b001      	add	sp, #4
 8000a12:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a16:	bf0c      	ite	eq
 8000a18:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a1c:	ea91 0f03 	teqne	r1, r3
 8000a20:	bf02      	ittt	eq
 8000a22:	ea90 0f02 	teqeq	r0, r2
 8000a26:	2000      	moveq	r0, #0
 8000a28:	4770      	bxeq	lr
 8000a2a:	f110 0f00 	cmn.w	r0, #0
 8000a2e:	ea91 0f03 	teq	r1, r3
 8000a32:	bf58      	it	pl
 8000a34:	4299      	cmppl	r1, r3
 8000a36:	bf08      	it	eq
 8000a38:	4290      	cmpeq	r0, r2
 8000a3a:	bf2c      	ite	cs
 8000a3c:	17d8      	asrcs	r0, r3, #31
 8000a3e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a42:	f040 0001 	orr.w	r0, r0, #1
 8000a46:	4770      	bx	lr
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d102      	bne.n	8000a58 <__cmpdf2+0x64>
 8000a52:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a56:	d107      	bne.n	8000a68 <__cmpdf2+0x74>
 8000a58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a60:	d1d6      	bne.n	8000a10 <__cmpdf2+0x1c>
 8000a62:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a66:	d0d3      	beq.n	8000a10 <__cmpdf2+0x1c>
 8000a68:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdrcmple>:
 8000a70:	4684      	mov	ip, r0
 8000a72:	4610      	mov	r0, r2
 8000a74:	4662      	mov	r2, ip
 8000a76:	468c      	mov	ip, r1
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4663      	mov	r3, ip
 8000a7c:	e000      	b.n	8000a80 <__aeabi_cdcmpeq>
 8000a7e:	bf00      	nop

08000a80 <__aeabi_cdcmpeq>:
 8000a80:	b501      	push	{r0, lr}
 8000a82:	f7ff ffb7 	bl	80009f4 <__cmpdf2>
 8000a86:	2800      	cmp	r0, #0
 8000a88:	bf48      	it	mi
 8000a8a:	f110 0f00 	cmnmi.w	r0, #0
 8000a8e:	bd01      	pop	{r0, pc}

08000a90 <__aeabi_dcmpeq>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff fff4 	bl	8000a80 <__aeabi_cdcmpeq>
 8000a98:	bf0c      	ite	eq
 8000a9a:	2001      	moveq	r0, #1
 8000a9c:	2000      	movne	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmplt>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffea 	bl	8000a80 <__aeabi_cdcmpeq>
 8000aac:	bf34      	ite	cc
 8000aae:	2001      	movcc	r0, #1
 8000ab0:	2000      	movcs	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmple>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffe0 	bl	8000a80 <__aeabi_cdcmpeq>
 8000ac0:	bf94      	ite	ls
 8000ac2:	2001      	movls	r0, #1
 8000ac4:	2000      	movhi	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpge>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffce 	bl	8000a70 <__aeabi_cdrcmple>
 8000ad4:	bf94      	ite	ls
 8000ad6:	2001      	movls	r0, #1
 8000ad8:	2000      	movhi	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmpgt>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffc4 	bl	8000a70 <__aeabi_cdrcmple>
 8000ae8:	bf34      	ite	cc
 8000aea:	2001      	movcc	r0, #1
 8000aec:	2000      	movcs	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpun>:
 8000af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x10>
 8000afe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b02:	d10a      	bne.n	8000b1a <__aeabi_dcmpun+0x26>
 8000b04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b0c:	d102      	bne.n	8000b14 <__aeabi_dcmpun+0x20>
 8000b0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b12:	d102      	bne.n	8000b1a <__aeabi_dcmpun+0x26>
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	f04f 0001 	mov.w	r0, #1
 8000b1e:	4770      	bx	lr

08000b20 <__aeabi_d2iz>:
 8000b20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b24:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b28:	d215      	bcs.n	8000b56 <__aeabi_d2iz+0x36>
 8000b2a:	d511      	bpl.n	8000b50 <__aeabi_d2iz+0x30>
 8000b2c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b34:	d912      	bls.n	8000b5c <__aeabi_d2iz+0x3c>
 8000b36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b46:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	4240      	negne	r0, r0
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5a:	d105      	bne.n	8000b68 <__aeabi_d2iz+0x48>
 8000b5c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	bf08      	it	eq
 8000b62:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b66:	4770      	bx	lr
 8000b68:	f04f 0000 	mov.w	r0, #0
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop

08000b70 <__aeabi_d2f>:
 8000b70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b74:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b78:	bf24      	itt	cs
 8000b7a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b7e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b82:	d90d      	bls.n	8000ba0 <__aeabi_d2f+0x30>
 8000b84:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b88:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b8c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b90:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b94:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b98:	bf08      	it	eq
 8000b9a:	f020 0001 	biceq.w	r0, r0, #1
 8000b9e:	4770      	bx	lr
 8000ba0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ba4:	d121      	bne.n	8000bea <__aeabi_d2f+0x7a>
 8000ba6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000baa:	bfbc      	itt	lt
 8000bac:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	4770      	bxlt	lr
 8000bb2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bb6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bba:	f1c2 0218 	rsb	r2, r2, #24
 8000bbe:	f1c2 0c20 	rsb	ip, r2, #32
 8000bc2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bca:	bf18      	it	ne
 8000bcc:	f040 0001 	orrne.w	r0, r0, #1
 8000bd0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bdc:	ea40 000c 	orr.w	r0, r0, ip
 8000be0:	fa23 f302 	lsr.w	r3, r3, r2
 8000be4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be8:	e7cc      	b.n	8000b84 <__aeabi_d2f+0x14>
 8000bea:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bee:	d107      	bne.n	8000c00 <__aeabi_d2f+0x90>
 8000bf0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf4:	bf1e      	ittt	ne
 8000bf6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bfa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bfe:	4770      	bxne	lr
 8000c00:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c04:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop

08000c10 <__aeabi_uldivmod>:
 8000c10:	b953      	cbnz	r3, 8000c28 <__aeabi_uldivmod+0x18>
 8000c12:	b94a      	cbnz	r2, 8000c28 <__aeabi_uldivmod+0x18>
 8000c14:	2900      	cmp	r1, #0
 8000c16:	bf08      	it	eq
 8000c18:	2800      	cmpeq	r0, #0
 8000c1a:	bf1c      	itt	ne
 8000c1c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c20:	f04f 30ff 	movne.w	r0, #4294967295
 8000c24:	f000 b9b2 	b.w	8000f8c <__aeabi_idiv0>
 8000c28:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c2c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c30:	f000 f83c 	bl	8000cac <__udivmoddi4>
 8000c34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c3c:	b004      	add	sp, #16
 8000c3e:	4770      	bx	lr

08000c40 <__aeabi_f2lz>:
 8000c40:	ee07 0a90 	vmov	s15, r0
 8000c44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c4c:	d401      	bmi.n	8000c52 <__aeabi_f2lz+0x12>
 8000c4e:	f000 b809 	b.w	8000c64 <__aeabi_f2ulz>
 8000c52:	b508      	push	{r3, lr}
 8000c54:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	f000 f804 	bl	8000c64 <__aeabi_f2ulz>
 8000c5c:	4240      	negs	r0, r0
 8000c5e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c62:	bd08      	pop	{r3, pc}

08000c64 <__aeabi_f2ulz>:
 8000c64:	b5d0      	push	{r4, r6, r7, lr}
 8000c66:	f7ff fc53 	bl	8000510 <__aeabi_f2d>
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ca4 <__aeabi_f2ulz+0x40>)
 8000c6e:	4606      	mov	r6, r0
 8000c70:	460f      	mov	r7, r1
 8000c72:	f7ff fca5 	bl	80005c0 <__aeabi_dmul>
 8000c76:	f000 f98b 	bl	8000f90 <__aeabi_d2uiz>
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	f7ff fc26 	bl	80004cc <__aeabi_ui2d>
 8000c80:	2200      	movs	r2, #0
 8000c82:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <__aeabi_f2ulz+0x44>)
 8000c84:	f7ff fc9c 	bl	80005c0 <__aeabi_dmul>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	4630      	mov	r0, r6
 8000c8e:	4639      	mov	r1, r7
 8000c90:	f7ff fade 	bl	8000250 <__aeabi_dsub>
 8000c94:	f000 f97c 	bl	8000f90 <__aeabi_d2uiz>
 8000c98:	2200      	movs	r2, #0
 8000c9a:	4623      	mov	r3, r4
 8000c9c:	4310      	orrs	r0, r2
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	bdd0      	pop	{r4, r6, r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	3df00000 	.word	0x3df00000
 8000ca8:	41f00000 	.word	0x41f00000

08000cac <__udivmoddi4>:
 8000cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cb0:	468c      	mov	ip, r1
 8000cb2:	9d08      	ldr	r5, [sp, #32]
 8000cb4:	4604      	mov	r4, r0
 8000cb6:	468a      	mov	sl, r1
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d14a      	bne.n	8000d52 <__udivmoddi4+0xa6>
 8000cbc:	428a      	cmp	r2, r1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	d962      	bls.n	8000d88 <__udivmoddi4+0xdc>
 8000cc2:	fab2 f682 	clz	r6, r2
 8000cc6:	b14e      	cbz	r6, 8000cdc <__udivmoddi4+0x30>
 8000cc8:	f1c6 0e20 	rsb	lr, r6, #32
 8000ccc:	fa01 f306 	lsl.w	r3, r1, r6
 8000cd0:	40b7      	lsls	r7, r6
 8000cd2:	40b4      	lsls	r4, r6
 8000cd4:	fa20 fe0e 	lsr.w	lr, r0, lr
 8000cd8:	ea4e 0a03 	orr.w	sl, lr, r3
 8000cdc:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ce0:	0c23      	lsrs	r3, r4, #16
 8000ce2:	fa1f f987 	uxth.w	r9, r7
 8000ce6:	fbba fef8 	udiv	lr, sl, r8
 8000cea:	fb08 aa1e 	mls	sl, r8, lr, sl
 8000cee:	fb0e f209 	mul.w	r2, lr, r9
 8000cf2:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	d90b      	bls.n	8000d12 <__udivmoddi4+0x66>
 8000cfa:	18fb      	adds	r3, r7, r3
 8000cfc:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000d00:	bf2c      	ite	cs
 8000d02:	2001      	movcs	r0, #1
 8000d04:	2000      	movcc	r0, #0
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d902      	bls.n	8000d10 <__udivmoddi4+0x64>
 8000d0a:	2800      	cmp	r0, #0
 8000d0c:	f000 812a 	beq.w	8000f64 <__udivmoddi4+0x2b8>
 8000d10:	468e      	mov	lr, r1
 8000d12:	1a9a      	subs	r2, r3, r2
 8000d14:	b2a3      	uxth	r3, r4
 8000d16:	fbb2 f0f8 	udiv	r0, r2, r8
 8000d1a:	fb08 2210 	mls	r2, r8, r0, r2
 8000d1e:	fb00 f909 	mul.w	r9, r0, r9
 8000d22:	ea43 4402 	orr.w	r4, r3, r2, lsl #16
 8000d26:	45a1      	cmp	r9, r4
 8000d28:	d907      	bls.n	8000d3a <__udivmoddi4+0x8e>
 8000d2a:	193c      	adds	r4, r7, r4
 8000d2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d30:	d202      	bcs.n	8000d38 <__udivmoddi4+0x8c>
 8000d32:	45a1      	cmp	r9, r4
 8000d34:	f200 8110 	bhi.w	8000f58 <__udivmoddi4+0x2ac>
 8000d38:	4618      	mov	r0, r3
 8000d3a:	eba4 0409 	sub.w	r4, r4, r9
 8000d3e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000d42:	2100      	movs	r1, #0
 8000d44:	b11d      	cbz	r5, 8000d4e <__udivmoddi4+0xa2>
 8000d46:	40f4      	lsrs	r4, r6
 8000d48:	2300      	movs	r3, #0
 8000d4a:	e9c5 4300 	strd	r4, r3, [r5]
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d908      	bls.n	8000d68 <__udivmoddi4+0xbc>
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	f000 80f2 	beq.w	8000f40 <__udivmoddi4+0x294>
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	e9c5 0c00 	strd	r0, ip, [r5]
 8000d62:	4608      	mov	r0, r1
 8000d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d68:	fab3 f183 	clz	r1, r3
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0x162>
 8000d70:	4563      	cmp	r3, ip
 8000d72:	f0c0 80e8 	bcc.w	8000f46 <__udivmoddi4+0x29a>
 8000d76:	4282      	cmp	r2, r0
 8000d78:	f240 80e5 	bls.w	8000f46 <__udivmoddi4+0x29a>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	2d00      	cmp	r5, #0
 8000d80:	d0e5      	beq.n	8000d4e <__udivmoddi4+0xa2>
 8000d82:	e9c5 4a00 	strd	r4, sl, [r5]
 8000d86:	e7e2      	b.n	8000d4e <__udivmoddi4+0xa2>
 8000d88:	b902      	cbnz	r2, 8000d8c <__udivmoddi4+0xe0>
 8000d8a:	deff      	udf	#255	; 0xff
 8000d8c:	fab2 f682 	clz	r6, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	f040 8099 	bne.w	8000ec8 <__udivmoddi4+0x21c>
 8000d96:	1a8b      	subs	r3, r1, r2
 8000d98:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000d9c:	fa1f f882 	uxth.w	r8, r2
 8000da0:	2101      	movs	r1, #1
 8000da2:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000da6:	fbb3 f2fe 	udiv	r2, r3, lr
 8000daa:	fb0e 3012 	mls	r0, lr, r2, r3
 8000dae:	fb08 f902 	mul.w	r9, r8, r2
 8000db2:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
 8000db6:	45e1      	cmp	r9, ip
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x120>
 8000dba:	eb17 0c0c 	adds.w	ip, r7, ip
 8000dbe:	f102 33ff 	add.w	r3, r2, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x11e>
 8000dc4:	45e1      	cmp	r9, ip
 8000dc6:	f200 80ca 	bhi.w	8000f5e <__udivmoddi4+0x2b2>
 8000dca:	461a      	mov	r2, r3
 8000dcc:	ebac 0c09 	sub.w	ip, ip, r9
 8000dd0:	b2a3      	uxth	r3, r4
 8000dd2:	fbbc f0fe 	udiv	r0, ip, lr
 8000dd6:	fb0e cc10 	mls	ip, lr, r0, ip
 8000dda:	fb08 f800 	mul.w	r8, r8, r0
 8000dde:	ea43 440c 	orr.w	r4, r3, ip, lsl #16
 8000de2:	45a0      	cmp	r8, r4
 8000de4:	d90e      	bls.n	8000e04 <__udivmoddi4+0x158>
 8000de6:	193c      	adds	r4, r7, r4
 8000de8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dec:	bf2c      	ite	cs
 8000dee:	f04f 0c01 	movcs.w	ip, #1
 8000df2:	f04f 0c00 	movcc.w	ip, #0
 8000df6:	45a0      	cmp	r8, r4
 8000df8:	d903      	bls.n	8000e02 <__udivmoddi4+0x156>
 8000dfa:	f1bc 0f00 	cmp.w	ip, #0
 8000dfe:	f000 80a8 	beq.w	8000f52 <__udivmoddi4+0x2a6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000e0c:	e79a      	b.n	8000d44 <__udivmoddi4+0x98>
 8000e0e:	f1c1 0420 	rsb	r4, r1, #32
 8000e12:	408b      	lsls	r3, r1
 8000e14:	fa02 fe01 	lsl.w	lr, r2, r1
 8000e18:	fa0c f601 	lsl.w	r6, ip, r1
 8000e1c:	40e2      	lsrs	r2, r4
 8000e1e:	fa20 f704 	lsr.w	r7, r0, r4
 8000e22:	fa2c fc04 	lsr.w	ip, ip, r4
 8000e26:	fa00 f801 	lsl.w	r8, r0, r1
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	433e      	orrs	r6, r7
 8000e2e:	0c1f      	lsrs	r7, r3, #16
 8000e30:	0c32      	lsrs	r2, r6, #16
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbbc f0f7 	udiv	r0, ip, r7
 8000e3a:	fb07 cc10 	mls	ip, r7, r0, ip
 8000e3e:	fb00 fa09 	mul.w	sl, r0, r9
 8000e42:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
 8000e46:	45e2      	cmp	sl, ip
 8000e48:	d908      	bls.n	8000e5c <__udivmoddi4+0x1b0>
 8000e4a:	eb13 0c0c 	adds.w	ip, r3, ip
 8000e4e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e52:	d202      	bcs.n	8000e5a <__udivmoddi4+0x1ae>
 8000e54:	45e2      	cmp	sl, ip
 8000e56:	f200 8089 	bhi.w	8000f6c <__udivmoddi4+0x2c0>
 8000e5a:	4610      	mov	r0, r2
 8000e5c:	ebac 0c0a 	sub.w	ip, ip, sl
 8000e60:	b2b6      	uxth	r6, r6
 8000e62:	fbbc faf7 	udiv	sl, ip, r7
 8000e66:	fb07 cc1a 	mls	ip, r7, sl, ip
 8000e6a:	fb0a f909 	mul.w	r9, sl, r9
 8000e6e:	ea46 420c 	orr.w	r2, r6, ip, lsl #16
 8000e72:	4591      	cmp	r9, r2
 8000e74:	d906      	bls.n	8000e84 <__udivmoddi4+0x1d8>
 8000e76:	189a      	adds	r2, r3, r2
 8000e78:	f10a 36ff 	add.w	r6, sl, #4294967295
 8000e7c:	d201      	bcs.n	8000e82 <__udivmoddi4+0x1d6>
 8000e7e:	4591      	cmp	r9, r2
 8000e80:	d87a      	bhi.n	8000f78 <__udivmoddi4+0x2cc>
 8000e82:	46b2      	mov	sl, r6
 8000e84:	ea4a 4000 	orr.w	r0, sl, r0, lsl #16
 8000e88:	eba2 0209 	sub.w	r2, r2, r9
 8000e8c:	fba0 670e 	umull	r6, r7, r0, lr
 8000e90:	42ba      	cmp	r2, r7
 8000e92:	46b4      	mov	ip, r6
 8000e94:	46b9      	mov	r9, r7
 8000e96:	d302      	bcc.n	8000e9e <__udivmoddi4+0x1f2>
 8000e98:	d107      	bne.n	8000eaa <__udivmoddi4+0x1fe>
 8000e9a:	45b0      	cmp	r8, r6
 8000e9c:	d205      	bcs.n	8000eaa <__udivmoddi4+0x1fe>
 8000e9e:	ebb6 0c0e 	subs.w	ip, r6, lr
 8000ea2:	eb67 0303 	sbc.w	r3, r7, r3
 8000ea6:	3801      	subs	r0, #1
 8000ea8:	4699      	mov	r9, r3
 8000eaa:	2d00      	cmp	r5, #0
 8000eac:	d06b      	beq.n	8000f86 <__udivmoddi4+0x2da>
 8000eae:	ebb8 030c 	subs.w	r3, r8, ip
 8000eb2:	eb62 0209 	sbc.w	r2, r2, r9
 8000eb6:	fa02 f404 	lsl.w	r4, r2, r4
 8000eba:	40cb      	lsrs	r3, r1
 8000ebc:	40ca      	lsrs	r2, r1
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	431c      	orrs	r4, r3
 8000ec2:	e9c5 4200 	strd	r4, r2, [r5]
 8000ec6:	e742      	b.n	8000d4e <__udivmoddi4+0xa2>
 8000ec8:	40b7      	lsls	r7, r6
 8000eca:	f1c6 0220 	rsb	r2, r6, #32
 8000ece:	fa01 f306 	lsl.w	r3, r1, r6
 8000ed2:	40b4      	lsls	r4, r6
 8000ed4:	fa21 fc02 	lsr.w	ip, r1, r2
 8000ed8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000edc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ee0:	fa1f f887 	uxth.w	r8, r7
 8000ee4:	fbbc f1fe 	udiv	r1, ip, lr
 8000ee8:	431a      	orrs	r2, r3
 8000eea:	fb0e cc11 	mls	ip, lr, r1, ip
 8000eee:	fb01 f008 	mul.w	r0, r1, r8
 8000ef2:	0c13      	lsrs	r3, r2, #16
 8000ef4:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
 8000ef8:	4560      	cmp	r0, ip
 8000efa:	d907      	bls.n	8000f0c <__udivmoddi4+0x260>
 8000efc:	eb17 0c0c 	adds.w	ip, r7, ip
 8000f00:	f101 33ff 	add.w	r3, r1, #4294967295
 8000f04:	d201      	bcs.n	8000f0a <__udivmoddi4+0x25e>
 8000f06:	4560      	cmp	r0, ip
 8000f08:	d833      	bhi.n	8000f72 <__udivmoddi4+0x2c6>
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	ebac 0c00 	sub.w	ip, ip, r0
 8000f10:	b292      	uxth	r2, r2
 8000f12:	fbbc f0fe 	udiv	r0, ip, lr
 8000f16:	fb0e cc10 	mls	ip, lr, r0, ip
 8000f1a:	fb00 f308 	mul.w	r3, r0, r8
 8000f1e:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
 8000f22:	4563      	cmp	r3, ip
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x28a>
 8000f26:	eb17 0c0c 	adds.w	ip, r7, ip
 8000f2a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f2e:	d201      	bcs.n	8000f34 <__udivmoddi4+0x288>
 8000f30:	4563      	cmp	r3, ip
 8000f32:	d825      	bhi.n	8000f80 <__udivmoddi4+0x2d4>
 8000f34:	4610      	mov	r0, r2
 8000f36:	ebac 0303 	sub.w	r3, ip, r3
 8000f3a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f3e:	e730      	b.n	8000da2 <__udivmoddi4+0xf6>
 8000f40:	4629      	mov	r1, r5
 8000f42:	4628      	mov	r0, r5
 8000f44:	e703      	b.n	8000d4e <__udivmoddi4+0xa2>
 8000f46:	1a84      	subs	r4, r0, r2
 8000f48:	eb6c 0303 	sbc.w	r3, ip, r3
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	469a      	mov	sl, r3
 8000f50:	e715      	b.n	8000d7e <__udivmoddi4+0xd2>
 8000f52:	3802      	subs	r0, #2
 8000f54:	443c      	add	r4, r7
 8000f56:	e755      	b.n	8000e04 <__udivmoddi4+0x158>
 8000f58:	3802      	subs	r0, #2
 8000f5a:	443c      	add	r4, r7
 8000f5c:	e6ed      	b.n	8000d3a <__udivmoddi4+0x8e>
 8000f5e:	3a02      	subs	r2, #2
 8000f60:	44bc      	add	ip, r7
 8000f62:	e733      	b.n	8000dcc <__udivmoddi4+0x120>
 8000f64:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f68:	443b      	add	r3, r7
 8000f6a:	e6d2      	b.n	8000d12 <__udivmoddi4+0x66>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	449c      	add	ip, r3
 8000f70:	e774      	b.n	8000e5c <__udivmoddi4+0x1b0>
 8000f72:	3902      	subs	r1, #2
 8000f74:	44bc      	add	ip, r7
 8000f76:	e7c9      	b.n	8000f0c <__udivmoddi4+0x260>
 8000f78:	f1aa 0a02 	sub.w	sl, sl, #2
 8000f7c:	441a      	add	r2, r3
 8000f7e:	e781      	b.n	8000e84 <__udivmoddi4+0x1d8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	44bc      	add	ip, r7
 8000f84:	e7d7      	b.n	8000f36 <__udivmoddi4+0x28a>
 8000f86:	4629      	mov	r1, r5
 8000f88:	e6e1      	b.n	8000d4e <__udivmoddi4+0xa2>
 8000f8a:	bf00      	nop

08000f8c <__aeabi_idiv0>:
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <__aeabi_d2uiz>:
 8000f90:	004a      	lsls	r2, r1, #1
 8000f92:	d211      	bcs.n	8000fb8 <__aeabi_d2uiz+0x28>
 8000f94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000f98:	d211      	bcs.n	8000fbe <__aeabi_d2uiz+0x2e>
 8000f9a:	d50d      	bpl.n	8000fb8 <__aeabi_d2uiz+0x28>
 8000f9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000fa0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000fa4:	d40e      	bmi.n	8000fc4 <__aeabi_d2uiz+0x34>
 8000fa6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000faa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000fb2:	fa23 f002 	lsr.w	r0, r3, r2
 8000fb6:	4770      	bx	lr
 8000fb8:	f04f 0000 	mov.w	r0, #0
 8000fbc:	4770      	bx	lr
 8000fbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000fc2:	d102      	bne.n	8000fca <__aeabi_d2uiz+0x3a>
 8000fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc8:	4770      	bx	lr
 8000fca:	f04f 0000 	mov.w	r0, #0
 8000fce:	4770      	bx	lr

08000fd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd0:	b5b0      	push	{r4, r5, r7, lr}
 8000fd2:	f5ad 4daa 	sub.w	sp, sp, #21760	; 0x5500
 8000fd6:	b08c      	sub	sp, #48	; 0x30
 8000fd8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  char buf[50];
  int buf_len = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f507 42aa 	add.w	r2, r7, #21760	; 0x5500
 8000fe0:	f102 0214 	add.w	r2, r2, #20
 8000fe4:	6013      	str	r3, [r2, #0]
  ai_error ai_err;
  ai_i32 nbatch;
  uint32_t timestamp;
  int max_index;
  uint8_t value = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	f507 42aa 	add.w	r2, r7, #21760	; 0x5500
 8000fec:	f102 0223 	add.w	r2, r2, #35	; 0x23
 8000ff0:	7013      	strb	r3, [r2, #0]
  unsigned long inference_time = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	f507 42aa 	add.w	r2, r7, #21760	; 0x5500
 8000ff8:	f102 0210 	add.w	r2, r2, #16
 8000ffc:	6013      	str	r3, [r2, #0]
  // Buffers used to store input and output tensors
  AI_ALIGNED(4) ai_i8 in_data[AI_FACEDETECTION_IN_1_SIZE_BYTES];
  AI_ALIGNED(4) ai_i8 out_data[AI_FACEDETECTION_OUT_1_SIZE_BYTES];

  // Pointer to our model
  ai_handle facedetect = AI_HANDLE_NULL;
 8000ffe:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001002:	3b48      	subs	r3, #72	; 0x48
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]

  // Initialize wrapper structs that hold pointers to data and info about the
  // data (tensor height, width, channels)
  ai_buffer ai_input[AI_FACEDETECTION_IN_NUM] = AI_FACEDETECTION_IN;
 8001008:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800100c:	3b60      	subs	r3, #96	; 0x60
 800100e:	4ac5      	ldr	r2, [pc, #788]	; (8001324 <main+0x354>)
 8001010:	461c      	mov	r4, r3
 8001012:	4615      	mov	r5, r2
 8001014:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001016:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001018:	e895 0003 	ldmia.w	r5, {r0, r1}
 800101c:	e884 0003 	stmia.w	r4, {r0, r1}
  ai_buffer ai_output[AI_FACEDETECTION_OUT_NUM] = AI_FACEDETECTION_OUT;
 8001020:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001024:	3b78      	subs	r3, #120	; 0x78
 8001026:	4ac0      	ldr	r2, [pc, #768]	; (8001328 <main+0x358>)
 8001028:	461c      	mov	r4, r3
 800102a:	4615      	mov	r5, r2
 800102c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800102e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001030:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001034:	e884 0003 	stmia.w	r4, {r0, r1}

  // Set working memory and get weights/biases from model
  ai_network_params ai_params = {
 8001038:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800103c:	3b28      	subs	r3, #40	; 0x28
 800103e:	4abb      	ldr	r2, [pc, #748]	; (800132c <main+0x35c>)
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001046:	3b28      	subs	r3, #40	; 0x28
 8001048:	2201      	movs	r2, #1
 800104a:	809a      	strh	r2, [r3, #4]
 800104c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001050:	3b28      	subs	r3, #40	; 0x28
 8001052:	2201      	movs	r2, #1
 8001054:	80da      	strh	r2, [r3, #6]
 8001056:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800105a:	3b28      	subs	r3, #40	; 0x28
 800105c:	2201      	movs	r2, #1
 800105e:	811a      	strh	r2, [r3, #8]
 8001060:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001064:	3b28      	subs	r3, #40	; 0x28
 8001066:	4ab2      	ldr	r2, [pc, #712]	; (8001330 <main+0x360>)
 8001068:	60da      	str	r2, [r3, #12]
	AI_FACEDETECTION_DATA_WEIGHTS(ai_facedetection_data_weights_get()),
 800106a:	f003 ff63 	bl	8004f34 <ai_facedetection_data_weights_get>
 800106e:	4602      	mov	r2, r0
  ai_network_params ai_params = {
 8001070:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001074:	3b28      	subs	r3, #40	; 0x28
 8001076:	611a      	str	r2, [r3, #16]
 8001078:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800107c:	3b28      	subs	r3, #40	; 0x28
 800107e:	2200      	movs	r2, #0
 8001080:	615a      	str	r2, [r3, #20]
 8001082:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001086:	3b28      	subs	r3, #40	; 0x28
 8001088:	4aaa      	ldr	r2, [pc, #680]	; (8001334 <main+0x364>)
 800108a:	619a      	str	r2, [r3, #24]
 800108c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001090:	3b28      	subs	r3, #40	; 0x28
 8001092:	2201      	movs	r2, #1
 8001094:	839a      	strh	r2, [r3, #28]
 8001096:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800109a:	3b28      	subs	r3, #40	; 0x28
 800109c:	2201      	movs	r2, #1
 800109e:	83da      	strh	r2, [r3, #30]
 80010a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010a4:	3b28      	subs	r3, #40	; 0x28
 80010a6:	2201      	movs	r2, #1
 80010a8:	841a      	strh	r2, [r3, #32]
 80010aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010ae:	3b28      	subs	r3, #40	; 0x28
 80010b0:	f644 0260 	movw	r2, #18528	; 0x4860
 80010b4:	625a      	str	r2, [r3, #36]	; 0x24
 80010b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010ba:	3b28      	subs	r3, #40	; 0x28
 80010bc:	f607 42a8 	addw	r2, r7, #3240	; 0xca8
 80010c0:	3a38      	subs	r2, #56	; 0x38
 80010c2:	629a      	str	r2, [r3, #40]	; 0x28
 80010c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010c8:	3b28      	subs	r3, #40	; 0x28
 80010ca:	2200      	movs	r2, #0
 80010cc:	62da      	str	r2, [r3, #44]	; 0x2c
	AI_FACEDETECTION_DATA_ACTIVATIONS(activations)
  };

  // Set pointers wrapper structs to our data buffers
  ai_input[0].n_batches = 1;
 80010ce:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80010d2:	3b60      	subs	r3, #96	; 0x60
 80010d4:	2201      	movs	r2, #1
 80010d6:	809a      	strh	r2, [r3, #4]
  ai_input[0].data = AI_HANDLE_PTR(in_data);
 80010d8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80010dc:	3b60      	subs	r3, #96	; 0x60
 80010de:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80010e2:	3a38      	subs	r2, #56	; 0x38
 80010e4:	611a      	str	r2, [r3, #16]
  ai_output[0].n_batches = 1;
 80010e6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80010ea:	3b78      	subs	r3, #120	; 0x78
 80010ec:	2201      	movs	r2, #1
 80010ee:	809a      	strh	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(out_data);
 80010f0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80010f4:	3b78      	subs	r3, #120	; 0x78
 80010f6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80010fa:	3a44      	subs	r2, #68	; 0x44
 80010fc:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010fe:	f000 fd16 	bl	8001b2e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001102:	f000 f9eb 	bl	80014dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001106:	f000 facd 	bl	80016a4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800110a:	f000 fa7f 	bl	800160c <MX_USART3_UART_Init>
  MX_TIM16_Init();
 800110e:	f000 fa57 	bl	80015c0 <MX_TIM16_Init>
  MX_CRC_Init();
 8001112:	f000 fa33 	bl	800157c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  // Start timer/counter
  HAL_TIM_Base_Start(&htim16);
 8001116:	4888      	ldr	r0, [pc, #544]	; (8001338 <main+0x368>)
 8001118:	f002 fe06 	bl	8003d28 <HAL_TIM_Base_Start>

  // Greetings!
  buf_len = sprintf(buf, "\r\n\r\nSTM32 X-Cube-AI test\r\n");
 800111c:	f507 43a9 	add.w	r3, r7, #21632	; 0x5480
 8001120:	f103 0354 	add.w	r3, r3, #84	; 0x54
 8001124:	4a85      	ldr	r2, [pc, #532]	; (800133c <main+0x36c>)
 8001126:	461c      	mov	r4, r3
 8001128:	4615      	mov	r5, r2
 800112a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800112c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800112e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001132:	c403      	stmia	r4!, {r0, r1}
 8001134:	8022      	strh	r2, [r4, #0]
 8001136:	3402      	adds	r4, #2
 8001138:	0c13      	lsrs	r3, r2, #16
 800113a:	7023      	strb	r3, [r4, #0]
 800113c:	231a      	movs	r3, #26
 800113e:	f507 42aa 	add.w	r2, r7, #21760	; 0x5500
 8001142:	f102 0214 	add.w	r2, r2, #20
 8001146:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);
 8001148:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 800114c:	f103 0314 	add.w	r3, r3, #20
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	b29a      	uxth	r2, r3
 8001154:	f507 41a9 	add.w	r1, r7, #21632	; 0x5480
 8001158:	f101 0154 	add.w	r1, r1, #84	; 0x54
 800115c:	2364      	movs	r3, #100	; 0x64
 800115e:	4878      	ldr	r0, [pc, #480]	; (8001340 <main+0x370>)
 8001160:	f002 ff34 	bl	8003fcc <HAL_UART_Transmit>

  // Create instance of neural network
  ai_err = ai_facedetection_create(&facedetect, AI_FACEDETECTION_DATA_CONFIG);
 8001164:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001168:	3b48      	subs	r3, #72	; 0x48
 800116a:	2100      	movs	r1, #0
 800116c:	4618      	mov	r0, r3
 800116e:	f003 fe7b 	bl	8004e68 <ai_facedetection_create>
 8001172:	4603      	mov	r3, r0
 8001174:	f507 42a9 	add.w	r2, r7, #21632	; 0x5480
 8001178:	f102 0250 	add.w	r2, r2, #80	; 0x50
 800117c:	6013      	str	r3, [r2, #0]
  if (ai_err.type != AI_ERROR_NONE)
 800117e:	f507 43a9 	add.w	r3, r7, #21632	; 0x5480
 8001182:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d024      	beq.n	80011d6 <main+0x206>
  {
    buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 800118c:	f507 43a9 	add.w	r3, r7, #21632	; 0x5480
 8001190:	f103 0354 	add.w	r3, r3, #84	; 0x54
 8001194:	4a6b      	ldr	r2, [pc, #428]	; (8001344 <main+0x374>)
 8001196:	461c      	mov	r4, r3
 8001198:	4615      	mov	r5, r2
 800119a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800119c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800119e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011a2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80011a6:	6020      	str	r0, [r4, #0]
 80011a8:	3404      	adds	r4, #4
 80011aa:	8021      	strh	r1, [r4, #0]
 80011ac:	2325      	movs	r3, #37	; 0x25
 80011ae:	f507 42aa 	add.w	r2, r7, #21760	; 0x5500
 80011b2:	f102 0214 	add.w	r2, r2, #20
 80011b6:	6013      	str	r3, [r2, #0]
    HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);
 80011b8:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 80011bc:	f103 0314 	add.w	r3, r3, #20
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	f507 41a9 	add.w	r1, r7, #21632	; 0x5480
 80011c8:	f101 0154 	add.w	r1, r1, #84	; 0x54
 80011cc:	2364      	movs	r3, #100	; 0x64
 80011ce:	485c      	ldr	r0, [pc, #368]	; (8001340 <main+0x370>)
 80011d0:	f002 fefc 	bl	8003fcc <HAL_UART_Transmit>
    while(1);
 80011d4:	e7fe      	b.n	80011d4 <main+0x204>
  }

  // Initialize neural network
  if (!ai_facedetection_init(facedetect, &ai_params))
 80011d6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80011da:	3b48      	subs	r3, #72	; 0x48
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011e2:	3b28      	subs	r3, #40	; 0x28
 80011e4:	4619      	mov	r1, r3
 80011e6:	4610      	mov	r0, r2
 80011e8:	f003 fe54 	bl	8004e94 <ai_facedetection_init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	f083 0301 	eor.w	r3, r3, #1
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d021      	beq.n	800123c <main+0x26c>
  {
    buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
 80011f8:	f507 43a9 	add.w	r3, r7, #21632	; 0x5480
 80011fc:	f103 0354 	add.w	r3, r3, #84	; 0x54
 8001200:	4a51      	ldr	r2, [pc, #324]	; (8001348 <main+0x378>)
 8001202:	461c      	mov	r4, r3
 8001204:	4615      	mov	r5, r2
 8001206:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001208:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800120a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800120c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800120e:	682b      	ldr	r3, [r5, #0]
 8001210:	7023      	strb	r3, [r4, #0]
 8001212:	2320      	movs	r3, #32
 8001214:	f507 42aa 	add.w	r2, r7, #21760	; 0x5500
 8001218:	f102 0214 	add.w	r2, r2, #20
 800121c:	6013      	str	r3, [r2, #0]
    HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);
 800121e:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 8001222:	f103 0314 	add.w	r3, r3, #20
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	b29a      	uxth	r2, r3
 800122a:	f507 41a9 	add.w	r1, r7, #21632	; 0x5480
 800122e:	f101 0154 	add.w	r1, r1, #84	; 0x54
 8001232:	2364      	movs	r3, #100	; 0x64
 8001234:	4842      	ldr	r0, [pc, #264]	; (8001340 <main+0x370>)
 8001236:	f002 fec9 	bl	8003fcc <HAL_UART_Transmit>
    while(1);
 800123a:	e7fe      	b.n	800123a <main+0x26a>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	for (uint32_t i = 0; i < AI_FACEDETECTION_IN_1_SIZE; i++)
 800123c:	2300      	movs	r3, #0
 800123e:	f507 42aa 	add.w	r2, r7, #21760	; 0x5500
 8001242:	f102 021c 	add.w	r2, r2, #28
 8001246:	6013      	str	r3, [r2, #0]
 8001248:	e01c      	b.n	8001284 <main+0x2b4>
	{
	  ((ai_u8 *)in_data)[i] = (ai_u8)image_data[i];
 800124a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800124e:	3b38      	subs	r3, #56	; 0x38
 8001250:	f507 42aa 	add.w	r2, r7, #21760	; 0x5500
 8001254:	f102 021c 	add.w	r2, r2, #28
 8001258:	6812      	ldr	r2, [r2, #0]
 800125a:	4413      	add	r3, r2
 800125c:	493b      	ldr	r1, [pc, #236]	; (800134c <main+0x37c>)
 800125e:	f507 42aa 	add.w	r2, r7, #21760	; 0x5500
 8001262:	f102 021c 	add.w	r2, r2, #28
 8001266:	6812      	ldr	r2, [r2, #0]
 8001268:	440a      	add	r2, r1
 800126a:	7812      	ldrb	r2, [r2, #0]
 800126c:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < AI_FACEDETECTION_IN_1_SIZE; i++)
 800126e:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 8001272:	f103 031c 	add.w	r3, r3, #28
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	3301      	adds	r3, #1
 800127a:	f507 42aa 	add.w	r2, r7, #21760	; 0x5500
 800127e:	f102 021c 	add.w	r2, r2, #28
 8001282:	6013      	str	r3, [r2, #0]
 8001284:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 8001288:	f103 031c 	add.w	r3, r3, #28
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001292:	d3da      	bcc.n	800124a <main+0x27a>
	}

	// Get current timestamp
	timestamp = HAL_GetTick();
 8001294:	f000 fcb6 	bl	8001c04 <HAL_GetTick>
 8001298:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 800129c:	f103 030c 	add.w	r3, r3, #12
 80012a0:	6018      	str	r0, [r3, #0]

	// Perform inference
	nbatch = ai_facedetection_run(facedetect, &ai_input[0], &ai_output[0]);
 80012a2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80012a6:	3b48      	subs	r3, #72	; 0x48
 80012a8:	6818      	ldr	r0, [r3, #0]
 80012aa:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80012ae:	3a78      	subs	r2, #120	; 0x78
 80012b0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80012b4:	3b60      	subs	r3, #96	; 0x60
 80012b6:	4619      	mov	r1, r3
 80012b8:	f003 fe2b 	bl	8004f12 <ai_facedetection_run>
 80012bc:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 80012c0:	f103 0308 	add.w	r3, r3, #8
 80012c4:	6018      	str	r0, [r3, #0]
	if (nbatch != 1) {
 80012c6:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 80012ca:	f103 0308 	add.w	r3, r3, #8
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d020      	beq.n	8001316 <main+0x346>
	  buf_len = sprintf(buf, "Error: could not run inference\r\n");
 80012d4:	f507 43a9 	add.w	r3, r7, #21632	; 0x5480
 80012d8:	f103 0354 	add.w	r3, r3, #84	; 0x54
 80012dc:	4a1c      	ldr	r2, [pc, #112]	; (8001350 <main+0x380>)
 80012de:	461c      	mov	r4, r3
 80012e0:	4615      	mov	r5, r2
 80012e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012ea:	682b      	ldr	r3, [r5, #0]
 80012ec:	7023      	strb	r3, [r4, #0]
 80012ee:	2320      	movs	r3, #32
 80012f0:	f507 42aa 	add.w	r2, r7, #21760	; 0x5500
 80012f4:	f102 0214 	add.w	r2, r2, #20
 80012f8:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);
 80012fa:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 80012fe:	f103 0314 	add.w	r3, r3, #20
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	b29a      	uxth	r2, r3
 8001306:	f507 41a9 	add.w	r1, r7, #21632	; 0x5480
 800130a:	f101 0154 	add.w	r1, r1, #84	; 0x54
 800130e:	2364      	movs	r3, #100	; 0x64
 8001310:	480b      	ldr	r0, [pc, #44]	; (8001340 <main+0x370>)
 8001312:	f002 fe5b 	bl	8003fcc <HAL_UART_Transmit>
	}

	for(int i=0; i<10; i++){
 8001316:	2300      	movs	r3, #0
 8001318:	f507 42aa 	add.w	r2, r7, #21760	; 0x5500
 800131c:	f102 0218 	add.w	r2, r2, #24
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	e04f      	b.n	80013c4 <main+0x3f4>
 8001324:	0800c94c 	.word	0x0800c94c
 8001328:	0800c964 	.word	0x0800c964
 800132c:	40040440 	.word	0x40040440
 8001330:	00015f88 	.word	0x00015f88
 8001334:	00040440 	.word	0x00040440
 8001338:	20000e5c 	.word	0x20000e5c
 800133c:	0800c880 	.word	0x0800c880
 8001340:	20000da8 	.word	0x20000da8
 8001344:	0800c89c 	.word	0x0800c89c
 8001348:	0800c8c4 	.word	0x0800c8c4
 800134c:	0800c990 	.word	0x0800c990
 8001350:	0800c8e8 	.word	0x0800c8e8
		if(value < (uint8_t)out_data[i]){
 8001354:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001358:	3b44      	subs	r3, #68	; 0x44
 800135a:	f507 42aa 	add.w	r2, r7, #21760	; 0x5500
 800135e:	f102 0218 	add.w	r2, r2, #24
 8001362:	6812      	ldr	r2, [r2, #0]
 8001364:	4413      	add	r3, r2
 8001366:	f993 3000 	ldrsb.w	r3, [r3]
 800136a:	b2db      	uxtb	r3, r3
 800136c:	f507 42aa 	add.w	r2, r7, #21760	; 0x5500
 8001370:	f102 0223 	add.w	r2, r2, #35	; 0x23
 8001374:	7812      	ldrb	r2, [r2, #0]
 8001376:	429a      	cmp	r2, r3
 8001378:	d219      	bcs.n	80013ae <main+0x3de>
			value = (uint8_t)out_data[i];
 800137a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800137e:	3b44      	subs	r3, #68	; 0x44
 8001380:	f507 42aa 	add.w	r2, r7, #21760	; 0x5500
 8001384:	f102 0218 	add.w	r2, r2, #24
 8001388:	6812      	ldr	r2, [r2, #0]
 800138a:	4413      	add	r3, r2
 800138c:	f993 3000 	ldrsb.w	r3, [r3]
 8001390:	f507 42aa 	add.w	r2, r7, #21760	; 0x5500
 8001394:	f102 0223 	add.w	r2, r2, #35	; 0x23
 8001398:	7013      	strb	r3, [r2, #0]
			max_index = i;
 800139a:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 800139e:	f103 0318 	add.w	r3, r3, #24
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f507 42aa 	add.w	r2, r7, #21760	; 0x5500
 80013a8:	f102 0224 	add.w	r2, r2, #36	; 0x24
 80013ac:	6013      	str	r3, [r2, #0]
	for(int i=0; i<10; i++){
 80013ae:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 80013b2:	f103 0318 	add.w	r3, r3, #24
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	3301      	adds	r3, #1
 80013ba:	f507 42aa 	add.w	r2, r7, #21760	; 0x5500
 80013be:	f102 0218 	add.w	r2, r2, #24
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 80013c8:	f103 0318 	add.w	r3, r3, #24
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2b09      	cmp	r3, #9
 80013d0:	ddc0      	ble.n	8001354 <main+0x384>
		}
	}
	inference_time = HAL_GetTick() - timestamp;
 80013d2:	f000 fc17 	bl	8001c04 <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 80013dc:	f103 030c 	add.w	r3, r3, #12
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	f507 42aa 	add.w	r2, r7, #21760	; 0x5500
 80013e8:	f102 0210 	add.w	r2, r2, #16
 80013ec:	6013      	str	r3, [r2, #0]

	// Print output of neural network along with inference time (microseconds)
	buf_len = sprintf(buf, "Detected : %s (confidence : %.2f%%)\r\n", labels[max_index], (float)value/256*100);
 80013ee:	4a34      	ldr	r2, [pc, #208]	; (80014c0 <main+0x4f0>)
 80013f0:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 80013f4:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 80013fe:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 8001402:	f103 0323 	add.w	r3, r3, #35	; 0x23
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	ee07 3a90 	vmov	s15, r3
 800140c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001410:	eddf 6a2c 	vldr	s13, [pc, #176]	; 80014c4 <main+0x4f4>
 8001414:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001418:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80014c8 <main+0x4f8>
 800141c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001420:	ee17 0a90 	vmov	r0, s15
 8001424:	f7ff f874 	bl	8000510 <__aeabi_f2d>
 8001428:	4603      	mov	r3, r0
 800142a:	460c      	mov	r4, r1
 800142c:	f507 40a9 	add.w	r0, r7, #21632	; 0x5480
 8001430:	f100 0054 	add.w	r0, r0, #84	; 0x54
 8001434:	e9cd 3400 	strd	r3, r4, [sp]
 8001438:	462a      	mov	r2, r5
 800143a:	4924      	ldr	r1, [pc, #144]	; (80014cc <main+0x4fc>)
 800143c:	f009 fec2 	bl	800b1c4 <siprintf>
 8001440:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 8001444:	f103 0314 	add.w	r3, r3, #20
 8001448:	6018      	str	r0, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);
 800144a:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 800144e:	f103 0314 	add.w	r3, r3, #20
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	b29a      	uxth	r2, r3
 8001456:	f507 41a9 	add.w	r1, r7, #21632	; 0x5480
 800145a:	f101 0154 	add.w	r1, r1, #84	; 0x54
 800145e:	2364      	movs	r3, #100	; 0x64
 8001460:	481b      	ldr	r0, [pc, #108]	; (80014d0 <main+0x500>)
 8001462:	f002 fdb3 	bl	8003fcc <HAL_UART_Transmit>
	buf_len = sprintf(buf, "Duration : %lu㎳\r\n\r\n\r\n", inference_time, inference_time/1000);
 8001466:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 800146a:	f103 0310 	add.w	r3, r3, #16
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a18      	ldr	r2, [pc, #96]	; (80014d4 <main+0x504>)
 8001472:	fba2 2303 	umull	r2, r3, r2, r3
 8001476:	099b      	lsrs	r3, r3, #6
 8001478:	f507 40a9 	add.w	r0, r7, #21632	; 0x5480
 800147c:	f100 0054 	add.w	r0, r0, #84	; 0x54
 8001480:	f507 42aa 	add.w	r2, r7, #21760	; 0x5500
 8001484:	f102 0210 	add.w	r2, r2, #16
 8001488:	6812      	ldr	r2, [r2, #0]
 800148a:	4913      	ldr	r1, [pc, #76]	; (80014d8 <main+0x508>)
 800148c:	f009 fe9a 	bl	800b1c4 <siprintf>
 8001490:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 8001494:	f103 0314 	add.w	r3, r3, #20
 8001498:	6018      	str	r0, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);
 800149a:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 800149e:	f103 0314 	add.w	r3, r3, #20
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	f507 41a9 	add.w	r1, r7, #21632	; 0x5480
 80014aa:	f101 0154 	add.w	r1, r1, #84	; 0x54
 80014ae:	2364      	movs	r3, #100	; 0x64
 80014b0:	4807      	ldr	r0, [pc, #28]	; (80014d0 <main+0x500>)
 80014b2:	f002 fd8b 	bl	8003fcc <HAL_UART_Transmit>

	// Wait before doing it again
	HAL_Delay(500);
 80014b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014ba:	f000 fbaf 	bl	8001c1c <HAL_Delay>
	for (uint32_t i = 0; i < AI_FACEDETECTION_IN_1_SIZE; i++)
 80014be:	e6bd      	b.n	800123c <main+0x26c>
 80014c0:	20000000 	.word	0x20000000
 80014c4:	43800000 	.word	0x43800000
 80014c8:	42c80000 	.word	0x42c80000
 80014cc:	0800c90c 	.word	0x0800c90c
 80014d0:	20000da8 	.word	0x20000da8
 80014d4:	10624dd3 	.word	0x10624dd3
 80014d8:	0800c934 	.word	0x0800c934

080014dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b098      	sub	sp, #96	; 0x60
 80014e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014e2:	f107 0318 	add.w	r3, r7, #24
 80014e6:	2248      	movs	r2, #72	; 0x48
 80014e8:	2100      	movs	r1, #0
 80014ea:	4618      	mov	r0, r3
 80014ec:	f009 f94b 	bl	800a786 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f0:	1d3b      	adds	r3, r7, #4
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	60da      	str	r2, [r3, #12]
 80014fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 80014fe:	2000      	movs	r0, #0
 8001500:	f000 ff22 	bl	8002348 <HAL_PWREx_ControlVoltageScaling>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800150a:	f000 f8fb 	bl	8001704 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800150e:	2302      	movs	r3, #2
 8001510:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001512:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001518:	2340      	movs	r3, #64	; 0x40
 800151a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800151c:	2302      	movs	r3, #2
 800151e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001520:	2302      	movs	r3, #2
 8001522:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001524:	2304      	movs	r3, #4
 8001526:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8001528:	2337      	movs	r3, #55	; 0x37
 800152a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800152c:	2307      	movs	r3, #7
 800152e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001530:	2302      	movs	r3, #2
 8001532:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001534:	2302      	movs	r3, #2
 8001536:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001538:	f107 0318 	add.w	r3, r7, #24
 800153c:	4618      	mov	r0, r3
 800153e:	f000 ff93 	bl	8002468 <HAL_RCC_OscConfig>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <SystemClock_Config+0x70>
  {
    Error_Handler();
 8001548:	f000 f8dc 	bl	8001704 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800154c:	230f      	movs	r3, #15
 800154e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001550:	2303      	movs	r3, #3
 8001552:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001558:	2300      	movs	r3, #0
 800155a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001560:	1d3b      	adds	r3, r7, #4
 8001562:	2105      	movs	r1, #5
 8001564:	4618      	mov	r0, r3
 8001566:	f001 fbe1 	bl	8002d2c <HAL_RCC_ClockConfig>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001570:	f000 f8c8 	bl	8001704 <Error_Handler>
  }
}
 8001574:	bf00      	nop
 8001576:	3760      	adds	r7, #96	; 0x60
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001580:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <MX_CRC_Init+0x3c>)
 8001582:	4a0e      	ldr	r2, [pc, #56]	; (80015bc <MX_CRC_Init+0x40>)
 8001584:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001586:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <MX_CRC_Init+0x3c>)
 8001588:	2200      	movs	r2, #0
 800158a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800158c:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <MX_CRC_Init+0x3c>)
 800158e:	2200      	movs	r2, #0
 8001590:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001592:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <MX_CRC_Init+0x3c>)
 8001594:	2200      	movs	r2, #0
 8001596:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001598:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <MX_CRC_Init+0x3c>)
 800159a:	2200      	movs	r2, #0
 800159c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <MX_CRC_Init+0x3c>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80015a4:	4804      	ldr	r0, [pc, #16]	; (80015b8 <MX_CRC_Init+0x3c>)
 80015a6:	f000 fc3f 	bl	8001e28 <HAL_CRC_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80015b0:	f000 f8a8 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20000e38 	.word	0x20000e38
 80015bc:	40023000 	.word	0x40023000

080015c0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80015c4:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <MX_TIM16_Init+0x44>)
 80015c6:	4a10      	ldr	r2, [pc, #64]	; (8001608 <MX_TIM16_Init+0x48>)
 80015c8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 109;
 80015ca:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <MX_TIM16_Init+0x44>)
 80015cc:	226d      	movs	r2, #109	; 0x6d
 80015ce:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <MX_TIM16_Init+0x44>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80015d6:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <MX_TIM16_Init+0x44>)
 80015d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015dc:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015de:	4b09      	ldr	r3, [pc, #36]	; (8001604 <MX_TIM16_Init+0x44>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80015e4:	4b07      	ldr	r3, [pc, #28]	; (8001604 <MX_TIM16_Init+0x44>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ea:	4b06      	ldr	r3, [pc, #24]	; (8001604 <MX_TIM16_Init+0x44>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80015f0:	4804      	ldr	r0, [pc, #16]	; (8001604 <MX_TIM16_Init+0x44>)
 80015f2:	f002 fb41 	bl	8003c78 <HAL_TIM_Base_Init>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80015fc:	f000 f882 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20000e5c 	.word	0x20000e5c
 8001608:	40014400 	.word	0x40014400

0800160c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001610:	4b22      	ldr	r3, [pc, #136]	; (800169c <MX_USART3_UART_Init+0x90>)
 8001612:	4a23      	ldr	r2, [pc, #140]	; (80016a0 <MX_USART3_UART_Init+0x94>)
 8001614:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001616:	4b21      	ldr	r3, [pc, #132]	; (800169c <MX_USART3_UART_Init+0x90>)
 8001618:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800161c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800161e:	4b1f      	ldr	r3, [pc, #124]	; (800169c <MX_USART3_UART_Init+0x90>)
 8001620:	2200      	movs	r2, #0
 8001622:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001624:	4b1d      	ldr	r3, [pc, #116]	; (800169c <MX_USART3_UART_Init+0x90>)
 8001626:	2200      	movs	r2, #0
 8001628:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800162a:	4b1c      	ldr	r3, [pc, #112]	; (800169c <MX_USART3_UART_Init+0x90>)
 800162c:	2200      	movs	r2, #0
 800162e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001630:	4b1a      	ldr	r3, [pc, #104]	; (800169c <MX_USART3_UART_Init+0x90>)
 8001632:	220c      	movs	r2, #12
 8001634:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001636:	4b19      	ldr	r3, [pc, #100]	; (800169c <MX_USART3_UART_Init+0x90>)
 8001638:	2200      	movs	r2, #0
 800163a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800163c:	4b17      	ldr	r3, [pc, #92]	; (800169c <MX_USART3_UART_Init+0x90>)
 800163e:	2200      	movs	r2, #0
 8001640:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001642:	4b16      	ldr	r3, [pc, #88]	; (800169c <MX_USART3_UART_Init+0x90>)
 8001644:	2200      	movs	r2, #0
 8001646:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001648:	4b14      	ldr	r3, [pc, #80]	; (800169c <MX_USART3_UART_Init+0x90>)
 800164a:	2200      	movs	r2, #0
 800164c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800164e:	4b13      	ldr	r3, [pc, #76]	; (800169c <MX_USART3_UART_Init+0x90>)
 8001650:	2200      	movs	r2, #0
 8001652:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001654:	4811      	ldr	r0, [pc, #68]	; (800169c <MX_USART3_UART_Init+0x90>)
 8001656:	f002 fc69 	bl	8003f2c <HAL_UART_Init>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001660:	f000 f850 	bl	8001704 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001664:	2100      	movs	r1, #0
 8001666:	480d      	ldr	r0, [pc, #52]	; (800169c <MX_USART3_UART_Init+0x90>)
 8001668:	f003 f9c2 	bl	80049f0 <HAL_UARTEx_SetTxFifoThreshold>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001672:	f000 f847 	bl	8001704 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001676:	2100      	movs	r1, #0
 8001678:	4808      	ldr	r0, [pc, #32]	; (800169c <MX_USART3_UART_Init+0x90>)
 800167a:	f003 f9f7 	bl	8004a6c <HAL_UARTEx_SetRxFifoThreshold>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001684:	f000 f83e 	bl	8001704 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001688:	4804      	ldr	r0, [pc, #16]	; (800169c <MX_USART3_UART_Init+0x90>)
 800168a:	f003 f978 	bl	800497e <HAL_UARTEx_DisableFifoMode>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001694:	f000 f836 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000da8 	.word	0x20000da8
 80016a0:	40004800 	.word	0x40004800

080016a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016aa:	1d3b      	adds	r3, r7, #4
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b8:	4b10      	ldr	r3, [pc, #64]	; (80016fc <MX_GPIO_Init+0x58>)
 80016ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016bc:	4a0f      	ldr	r2, [pc, #60]	; (80016fc <MX_GPIO_Init+0x58>)
 80016be:	f043 0302 	orr.w	r3, r3, #2
 80016c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016c4:	4b0d      	ldr	r3, [pc, #52]	; (80016fc <MX_GPIO_Init+0x58>)
 80016c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c8:	f003 0302 	and.w	r3, r3, #2
 80016cc:	603b      	str	r3, [r7, #0]
 80016ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 80016d0:	2201      	movs	r2, #1
 80016d2:	2108      	movs	r1, #8
 80016d4:	480a      	ldr	r0, [pc, #40]	; (8001700 <MX_GPIO_Init+0x5c>)
 80016d6:	f000 fe11 	bl	80022fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016da:	2308      	movs	r3, #8
 80016dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016de:	2301      	movs	r3, #1
 80016e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016e2:	2301      	movs	r3, #1
 80016e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016e6:	2302      	movs	r3, #2
 80016e8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ea:	1d3b      	adds	r3, r7, #4
 80016ec:	4619      	mov	r1, r3
 80016ee:	4804      	ldr	r0, [pc, #16]	; (8001700 <MX_GPIO_Init+0x5c>)
 80016f0:	f000 fc84 	bl	8001ffc <HAL_GPIO_Init>

}
 80016f4:	bf00      	nop
 80016f6:	3718      	adds	r7, #24
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40021000 	.word	0x40021000
 8001700:	42020400 	.word	0x42020400

08001704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
	...

08001714 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800171a:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <HAL_MspInit+0x44>)
 800171c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800171e:	4a0e      	ldr	r2, [pc, #56]	; (8001758 <HAL_MspInit+0x44>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	6613      	str	r3, [r2, #96]	; 0x60
 8001726:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <HAL_MspInit+0x44>)
 8001728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	607b      	str	r3, [r7, #4]
 8001730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001732:	4b09      	ldr	r3, [pc, #36]	; (8001758 <HAL_MspInit+0x44>)
 8001734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001736:	4a08      	ldr	r2, [pc, #32]	; (8001758 <HAL_MspInit+0x44>)
 8001738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800173c:	6593      	str	r3, [r2, #88]	; 0x58
 800173e:	4b06      	ldr	r3, [pc, #24]	; (8001758 <HAL_MspInit+0x44>)
 8001740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001746:	603b      	str	r3, [r7, #0]
 8001748:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800174a:	f000 fe59 	bl	8002400 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40021000 	.word	0x40021000

0800175c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a0a      	ldr	r2, [pc, #40]	; (8001794 <HAL_CRC_MspInit+0x38>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d10b      	bne.n	8001786 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800176e:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <HAL_CRC_MspInit+0x3c>)
 8001770:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001772:	4a09      	ldr	r2, [pc, #36]	; (8001798 <HAL_CRC_MspInit+0x3c>)
 8001774:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001778:	6493      	str	r3, [r2, #72]	; 0x48
 800177a:	4b07      	ldr	r3, [pc, #28]	; (8001798 <HAL_CRC_MspInit+0x3c>)
 800177c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800177e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001786:	bf00      	nop
 8001788:	3714      	adds	r7, #20
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	40023000 	.word	0x40023000
 8001798:	40021000 	.word	0x40021000

0800179c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a0a      	ldr	r2, [pc, #40]	; (80017d4 <HAL_TIM_Base_MspInit+0x38>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d10b      	bne.n	80017c6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80017ae:	4b0a      	ldr	r3, [pc, #40]	; (80017d8 <HAL_TIM_Base_MspInit+0x3c>)
 80017b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017b2:	4a09      	ldr	r2, [pc, #36]	; (80017d8 <HAL_TIM_Base_MspInit+0x3c>)
 80017b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b8:	6613      	str	r3, [r2, #96]	; 0x60
 80017ba:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <HAL_TIM_Base_MspInit+0x3c>)
 80017bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80017c6:	bf00      	nop
 80017c8:	3714      	adds	r7, #20
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	40014400 	.word	0x40014400
 80017d8:	40021000 	.word	0x40021000

080017dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b0ae      	sub	sp, #184	; 0xb8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
 80017f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017f4:	f107 0310 	add.w	r3, r7, #16
 80017f8:	2294      	movs	r2, #148	; 0x94
 80017fa:	2100      	movs	r1, #0
 80017fc:	4618      	mov	r0, r3
 80017fe:	f008 ffc2 	bl	800a786 <memset>
  if(huart->Instance==USART3)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a21      	ldr	r2, [pc, #132]	; (800188c <HAL_UART_MspInit+0xb0>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d13b      	bne.n	8001884 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800180c:	2304      	movs	r3, #4
 800180e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001810:	2300      	movs	r3, #0
 8001812:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001814:	f107 0310 	add.w	r3, r7, #16
 8001818:	4618      	mov	r0, r3
 800181a:	f001 fd59 	bl	80032d0 <HAL_RCCEx_PeriphCLKConfig>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001824:	f7ff ff6e 	bl	8001704 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001828:	4b19      	ldr	r3, [pc, #100]	; (8001890 <HAL_UART_MspInit+0xb4>)
 800182a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800182c:	4a18      	ldr	r2, [pc, #96]	; (8001890 <HAL_UART_MspInit+0xb4>)
 800182e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001832:	6593      	str	r3, [r2, #88]	; 0x58
 8001834:	4b16      	ldr	r3, [pc, #88]	; (8001890 <HAL_UART_MspInit+0xb4>)
 8001836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001838:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001840:	4b13      	ldr	r3, [pc, #76]	; (8001890 <HAL_UART_MspInit+0xb4>)
 8001842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001844:	4a12      	ldr	r2, [pc, #72]	; (8001890 <HAL_UART_MspInit+0xb4>)
 8001846:	f043 0302 	orr.w	r3, r3, #2
 800184a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800184c:	4b10      	ldr	r3, [pc, #64]	; (8001890 <HAL_UART_MspInit+0xb4>)
 800184e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001850:	f003 0302 	and.w	r3, r3, #2
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001858:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800185c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001860:	2302      	movs	r3, #2
 8001862:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186c:	2300      	movs	r3, #0
 800186e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001872:	2307      	movs	r3, #7
 8001874:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001878:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800187c:	4619      	mov	r1, r3
 800187e:	4805      	ldr	r0, [pc, #20]	; (8001894 <HAL_UART_MspInit+0xb8>)
 8001880:	f000 fbbc 	bl	8001ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001884:	bf00      	nop
 8001886:	37b8      	adds	r7, #184	; 0xb8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40004800 	.word	0x40004800
 8001890:	40021000 	.word	0x40021000
 8001894:	42020400 	.word	0x42020400

08001898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018aa:	e7fe      	b.n	80018aa <HardFault_Handler+0x4>

080018ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018b0:	e7fe      	b.n	80018b0 <MemManage_Handler+0x4>

080018b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018b2:	b480      	push	{r7}
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018b6:	e7fe      	b.n	80018b6 <BusFault_Handler+0x4>

080018b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018bc:	e7fe      	b.n	80018bc <UsageFault_Handler+0x4>

080018be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ec:	f000 f976 	bl	8001bdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018f0:	bf00      	nop
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018fc:	4a14      	ldr	r2, [pc, #80]	; (8001950 <_sbrk+0x5c>)
 80018fe:	4b15      	ldr	r3, [pc, #84]	; (8001954 <_sbrk+0x60>)
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001908:	4b13      	ldr	r3, [pc, #76]	; (8001958 <_sbrk+0x64>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d102      	bne.n	8001916 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001910:	4b11      	ldr	r3, [pc, #68]	; (8001958 <_sbrk+0x64>)
 8001912:	4a12      	ldr	r2, [pc, #72]	; (800195c <_sbrk+0x68>)
 8001914:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001916:	4b10      	ldr	r3, [pc, #64]	; (8001958 <_sbrk+0x64>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4413      	add	r3, r2
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	429a      	cmp	r2, r3
 8001922:	d207      	bcs.n	8001934 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001924:	f008 fef2 	bl	800a70c <__errno>
 8001928:	4602      	mov	r2, r0
 800192a:	230c      	movs	r3, #12
 800192c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800192e:	f04f 33ff 	mov.w	r3, #4294967295
 8001932:	e009      	b.n	8001948 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001934:	4b08      	ldr	r3, [pc, #32]	; (8001958 <_sbrk+0x64>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800193a:	4b07      	ldr	r3, [pc, #28]	; (8001958 <_sbrk+0x64>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4413      	add	r3, r2
 8001942:	4a05      	ldr	r2, [pc, #20]	; (8001958 <_sbrk+0x64>)
 8001944:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001946:	68fb      	ldr	r3, [r7, #12]
}
 8001948:	4618      	mov	r0, r3
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20030000 	.word	0x20030000
 8001954:	00000800 	.word	0x00000800
 8001958:	20000cf0 	.word	0x20000cf0
 800195c:	20000eb0 	.word	0x20000eb0

08001960 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001964:	4b06      	ldr	r3, [pc, #24]	; (8001980 <SystemInit+0x20>)
 8001966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800196a:	4a05      	ldr	r2, [pc, #20]	; (8001980 <SystemInit+0x20>)
 800196c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001970:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001984:	b480      	push	{r7}
 8001986:	b087      	sub	sp, #28
 8001988:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 800198a:	4b4f      	ldr	r3, [pc, #316]	; (8001ac8 <SystemCoreClockUpdate+0x144>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0308 	and.w	r3, r3, #8
 8001992:	2b00      	cmp	r3, #0
 8001994:	d107      	bne.n	80019a6 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8001996:	4b4c      	ldr	r3, [pc, #304]	; (8001ac8 <SystemCoreClockUpdate+0x144>)
 8001998:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800199c:	0a1b      	lsrs	r3, r3, #8
 800199e:	f003 030f 	and.w	r3, r3, #15
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	e005      	b.n	80019b2 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 80019a6:	4b48      	ldr	r3, [pc, #288]	; (8001ac8 <SystemCoreClockUpdate+0x144>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	091b      	lsrs	r3, r3, #4
 80019ac:	f003 030f 	and.w	r3, r3, #15
 80019b0:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 80019b2:	4a46      	ldr	r2, [pc, #280]	; (8001acc <SystemCoreClockUpdate+0x148>)
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ba:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019bc:	4b42      	ldr	r3, [pc, #264]	; (8001ac8 <SystemCoreClockUpdate+0x144>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f003 030c 	and.w	r3, r3, #12
 80019c4:	2b0c      	cmp	r3, #12
 80019c6:	d865      	bhi.n	8001a94 <SystemCoreClockUpdate+0x110>
 80019c8:	a201      	add	r2, pc, #4	; (adr r2, 80019d0 <SystemCoreClockUpdate+0x4c>)
 80019ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ce:	bf00      	nop
 80019d0:	08001a05 	.word	0x08001a05
 80019d4:	08001a95 	.word	0x08001a95
 80019d8:	08001a95 	.word	0x08001a95
 80019dc:	08001a95 	.word	0x08001a95
 80019e0:	08001a0d 	.word	0x08001a0d
 80019e4:	08001a95 	.word	0x08001a95
 80019e8:	08001a95 	.word	0x08001a95
 80019ec:	08001a95 	.word	0x08001a95
 80019f0:	08001a15 	.word	0x08001a15
 80019f4:	08001a95 	.word	0x08001a95
 80019f8:	08001a95 	.word	0x08001a95
 80019fc:	08001a95 	.word	0x08001a95
 8001a00:	08001a1d 	.word	0x08001a1d
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8001a04:	4a32      	ldr	r2, [pc, #200]	; (8001ad0 <SystemCoreClockUpdate+0x14c>)
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	6013      	str	r3, [r2, #0]
      break;
 8001a0a:	e047      	b.n	8001a9c <SystemCoreClockUpdate+0x118>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001a0c:	4b30      	ldr	r3, [pc, #192]	; (8001ad0 <SystemCoreClockUpdate+0x14c>)
 8001a0e:	4a31      	ldr	r2, [pc, #196]	; (8001ad4 <SystemCoreClockUpdate+0x150>)
 8001a10:	601a      	str	r2, [r3, #0]
      break;
 8001a12:	e043      	b.n	8001a9c <SystemCoreClockUpdate+0x118>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001a14:	4b2e      	ldr	r3, [pc, #184]	; (8001ad0 <SystemCoreClockUpdate+0x14c>)
 8001a16:	4a2f      	ldr	r2, [pc, #188]	; (8001ad4 <SystemCoreClockUpdate+0x150>)
 8001a18:	601a      	str	r2, [r3, #0]
      break;
 8001a1a:	e03f      	b.n	8001a9c <SystemCoreClockUpdate+0x118>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001a1c:	4b2a      	ldr	r3, [pc, #168]	; (8001ac8 <SystemCoreClockUpdate+0x144>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	f003 0303 	and.w	r3, r3, #3
 8001a24:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8001a26:	4b28      	ldr	r3, [pc, #160]	; (8001ac8 <SystemCoreClockUpdate+0x144>)
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	091b      	lsrs	r3, r3, #4
 8001a2c:	f003 030f 	and.w	r3, r3, #15
 8001a30:	3301      	adds	r3, #1
 8001a32:	60bb      	str	r3, [r7, #8]

      switch (pllsource)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d002      	beq.n	8001a40 <SystemCoreClockUpdate+0xbc>
 8001a3a:	2b03      	cmp	r3, #3
 8001a3c:	d006      	beq.n	8001a4c <SystemCoreClockUpdate+0xc8>
 8001a3e:	e00b      	b.n	8001a58 <SystemCoreClockUpdate+0xd4>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8001a40:	4a24      	ldr	r2, [pc, #144]	; (8001ad4 <SystemCoreClockUpdate+0x150>)
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a48:	613b      	str	r3, [r7, #16]
          break;
 8001a4a:	e00b      	b.n	8001a64 <SystemCoreClockUpdate+0xe0>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8001a4c:	4a21      	ldr	r2, [pc, #132]	; (8001ad4 <SystemCoreClockUpdate+0x150>)
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a54:	613b      	str	r3, [r7, #16]
          break;
 8001a56:	e005      	b.n	8001a64 <SystemCoreClockUpdate+0xe0>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a60:	613b      	str	r3, [r7, #16]
          break;
 8001a62:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8001a64:	4b18      	ldr	r3, [pc, #96]	; (8001ac8 <SystemCoreClockUpdate+0x144>)
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	0a1b      	lsrs	r3, r3, #8
 8001a6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	fb02 f303 	mul.w	r3, r2, r3
 8001a74:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8001a76:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <SystemCoreClockUpdate+0x144>)
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	0e5b      	lsrs	r3, r3, #25
 8001a7c:	f003 0303 	and.w	r3, r3, #3
 8001a80:	3301      	adds	r3, #1
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a8e:	4a10      	ldr	r2, [pc, #64]	; (8001ad0 <SystemCoreClockUpdate+0x14c>)
 8001a90:	6013      	str	r3, [r2, #0]
      break;
 8001a92:	e003      	b.n	8001a9c <SystemCoreClockUpdate+0x118>

    default:
      SystemCoreClock = msirange;
 8001a94:	4a0e      	ldr	r2, [pc, #56]	; (8001ad0 <SystemCoreClockUpdate+0x14c>)
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	6013      	str	r3, [r2, #0]
      break;
 8001a9a:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8001a9c:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <SystemCoreClockUpdate+0x144>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	091b      	lsrs	r3, r3, #4
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	4a0c      	ldr	r2, [pc, #48]	; (8001ad8 <SystemCoreClockUpdate+0x154>)
 8001aa8:	5cd3      	ldrb	r3, [r2, r3]
 8001aaa:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8001aac:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <SystemCoreClockUpdate+0x14c>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab6:	4a06      	ldr	r2, [pc, #24]	; (8001ad0 <SystemCoreClockUpdate+0x14c>)
 8001ab8:	6013      	str	r3, [r2, #0]
}
 8001aba:	bf00      	nop
 8001abc:	371c      	adds	r7, #28
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	0800d5a8 	.word	0x0800d5a8
 8001ad0:	20000028 	.word	0x20000028
 8001ad4:	00f42400 	.word	0x00f42400
 8001ad8:	0800d590 	.word	0x0800d590

08001adc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001adc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b14 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ae0:	f7ff ff3e 	bl	8001960 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001ae4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001ae6:	e003      	b.n	8001af0 <LoopCopyDataInit>

08001ae8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001ae8:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001aea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001aec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001aee:	3104      	adds	r1, #4

08001af0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001af0:	480a      	ldr	r0, [pc, #40]	; (8001b1c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001af2:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001af4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001af6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001af8:	d3f6      	bcc.n	8001ae8 <CopyDataInit>
	ldr	r2, =_sbss
 8001afa:	4a0a      	ldr	r2, [pc, #40]	; (8001b24 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001afc:	e002      	b.n	8001b04 <LoopFillZerobss>

08001afe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001afe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001b00:	f842 3b04 	str.w	r3, [r2], #4

08001b04 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001b04:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <LoopForever+0x16>)
	cmp	r2, r3
 8001b06:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001b08:	d3f9      	bcc.n	8001afe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001b0a:	f008 fe05 	bl	800a718 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b0e:	f7ff fa5f 	bl	8000fd0 <main>

08001b12 <LoopForever>:

LoopForever:
    b LoopForever
 8001b12:	e7fe      	b.n	8001b12 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001b14:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8001b18:	08023a00 	.word	0x08023a00
	ldr	r0, =_sdata
 8001b1c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001b20:	20000cd4 	.word	0x20000cd4
	ldr	r2, =_sbss
 8001b24:	20000cd4 	.word	0x20000cd4
	ldr	r3, = _ebss
 8001b28:	20000eb0 	.word	0x20000eb0

08001b2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b2c:	e7fe      	b.n	8001b2c <ADC1_2_IRQHandler>

08001b2e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b34:	2300      	movs	r3, #0
 8001b36:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001b38:	2004      	movs	r0, #4
 8001b3a:	f000 f943 	bl	8001dc4 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8001b3e:	f7ff ff21 	bl	8001984 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b42:	2000      	movs	r0, #0
 8001b44:	f000 f80e 	bl	8001b64 <HAL_InitTick>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d002      	beq.n	8001b54 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	71fb      	strb	r3, [r7, #7]
 8001b52:	e001      	b.n	8001b58 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b54:	f7ff fdde 	bl	8001714 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b58:	79fb      	ldrb	r3, [r7, #7]
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
	...

08001b64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b70:	4b17      	ldr	r3, [pc, #92]	; (8001bd0 <HAL_InitTick+0x6c>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d023      	beq.n	8001bc0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b78:	4b16      	ldr	r3, [pc, #88]	; (8001bd4 <HAL_InitTick+0x70>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	4b14      	ldr	r3, [pc, #80]	; (8001bd0 <HAL_InitTick+0x6c>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	4619      	mov	r1, r3
 8001b82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b86:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f000 f93d 	bl	8001e0e <HAL_SYSTICK_Config>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d10f      	bne.n	8001bba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2b07      	cmp	r3, #7
 8001b9e:	d809      	bhi.n	8001bb4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	6879      	ldr	r1, [r7, #4]
 8001ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba8:	f000 f917 	bl	8001dda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bac:	4a0a      	ldr	r2, [pc, #40]	; (8001bd8 <HAL_InitTick+0x74>)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6013      	str	r3, [r2, #0]
 8001bb2:	e007      	b.n	8001bc4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	73fb      	strb	r3, [r7, #15]
 8001bb8:	e004      	b.n	8001bc4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	73fb      	strb	r3, [r7, #15]
 8001bbe:	e001      	b.n	8001bc4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000030 	.word	0x20000030
 8001bd4:	20000028 	.word	0x20000028
 8001bd8:	2000002c 	.word	0x2000002c

08001bdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001be0:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <HAL_IncTick+0x20>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	461a      	mov	r2, r3
 8001be6:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <HAL_IncTick+0x24>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4413      	add	r3, r2
 8001bec:	4a04      	ldr	r2, [pc, #16]	; (8001c00 <HAL_IncTick+0x24>)
 8001bee:	6013      	str	r3, [r2, #0]
}
 8001bf0:	bf00      	nop
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	20000030 	.word	0x20000030
 8001c00:	20000ea8 	.word	0x20000ea8

08001c04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  return uwTick;
 8001c08:	4b03      	ldr	r3, [pc, #12]	; (8001c18 <HAL_GetTick+0x14>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	20000ea8 	.word	0x20000ea8

08001c1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c24:	f7ff ffee 	bl	8001c04 <HAL_GetTick>
 8001c28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c34:	d005      	beq.n	8001c42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001c36:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <HAL_Delay+0x40>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	4413      	add	r3, r2
 8001c40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c42:	bf00      	nop
 8001c44:	f7ff ffde 	bl	8001c04 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d8f7      	bhi.n	8001c44 <HAL_Delay+0x28>
  {
  }
}
 8001c54:	bf00      	nop
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20000030 	.word	0x20000030

08001c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c70:	4b0c      	ldr	r3, [pc, #48]	; (8001ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c92:	4a04      	ldr	r2, [pc, #16]	; (8001ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	60d3      	str	r3, [r2, #12]
}
 8001c98:	bf00      	nop
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cac:	4b04      	ldr	r3, [pc, #16]	; (8001cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	0a1b      	lsrs	r3, r3, #8
 8001cb2:	f003 0307 	and.w	r3, r3, #7
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	6039      	str	r1, [r7, #0]
 8001cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	db0a      	blt.n	8001cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	b2da      	uxtb	r2, r3
 8001cdc:	490c      	ldr	r1, [pc, #48]	; (8001d10 <__NVIC_SetPriority+0x4c>)
 8001cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce2:	0152      	lsls	r2, r2, #5
 8001ce4:	b2d2      	uxtb	r2, r2
 8001ce6:	440b      	add	r3, r1
 8001ce8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cec:	e00a      	b.n	8001d04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	4908      	ldr	r1, [pc, #32]	; (8001d14 <__NVIC_SetPriority+0x50>)
 8001cf4:	79fb      	ldrb	r3, [r7, #7]
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	3b04      	subs	r3, #4
 8001cfc:	0152      	lsls	r2, r2, #5
 8001cfe:	b2d2      	uxtb	r2, r2
 8001d00:	440b      	add	r3, r1
 8001d02:	761a      	strb	r2, [r3, #24]
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	e000e100 	.word	0xe000e100
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b089      	sub	sp, #36	; 0x24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	f1c3 0307 	rsb	r3, r3, #7
 8001d32:	2b03      	cmp	r3, #3
 8001d34:	bf28      	it	cs
 8001d36:	2303      	movcs	r3, #3
 8001d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	3303      	adds	r3, #3
 8001d3e:	2b06      	cmp	r3, #6
 8001d40:	d902      	bls.n	8001d48 <NVIC_EncodePriority+0x30>
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	3b04      	subs	r3, #4
 8001d46:	e000      	b.n	8001d4a <NVIC_EncodePriority+0x32>
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	43da      	mvns	r2, r3
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	401a      	ands	r2, r3
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d60:	f04f 31ff 	mov.w	r1, #4294967295
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6a:	43d9      	mvns	r1, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d70:	4313      	orrs	r3, r2
         );
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3724      	adds	r7, #36	; 0x24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
	...

08001d80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d90:	d301      	bcc.n	8001d96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d92:	2301      	movs	r3, #1
 8001d94:	e00f      	b.n	8001db6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d96:	4a0a      	ldr	r2, [pc, #40]	; (8001dc0 <SysTick_Config+0x40>)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d9e:	2107      	movs	r1, #7
 8001da0:	f04f 30ff 	mov.w	r0, #4294967295
 8001da4:	f7ff ff8e 	bl	8001cc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001da8:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <SysTick_Config+0x40>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dae:	4b04      	ldr	r3, [pc, #16]	; (8001dc0 <SysTick_Config+0x40>)
 8001db0:	2207      	movs	r2, #7
 8001db2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	e000e010 	.word	0xe000e010

08001dc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f7ff ff47 	bl	8001c60 <__NVIC_SetPriorityGrouping>
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b086      	sub	sp, #24
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	4603      	mov	r3, r0
 8001de2:	60b9      	str	r1, [r7, #8]
 8001de4:	607a      	str	r2, [r7, #4]
 8001de6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001de8:	f7ff ff5e 	bl	8001ca8 <__NVIC_GetPriorityGrouping>
 8001dec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	68b9      	ldr	r1, [r7, #8]
 8001df2:	6978      	ldr	r0, [r7, #20]
 8001df4:	f7ff ff90 	bl	8001d18 <NVIC_EncodePriority>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dfe:	4611      	mov	r1, r2
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff ff5f 	bl	8001cc4 <__NVIC_SetPriority>
}
 8001e06:	bf00      	nop
 8001e08:	3718      	adds	r7, #24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b082      	sub	sp, #8
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f7ff ffb2 	bl	8001d80 <SysTick_Config>
 8001e1c:	4603      	mov	r3, r0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
	...

08001e28 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e054      	b.n	8001ee4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	7f5b      	ldrb	r3, [r3, #29]
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d105      	bne.n	8001e50 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7ff fc86 	bl	800175c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2202      	movs	r2, #2
 8001e54:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	791b      	ldrb	r3, [r3, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d10c      	bne.n	8001e78 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a22      	ldr	r2, [pc, #136]	; (8001eec <HAL_CRC_Init+0xc4>)
 8001e64:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 0218 	bic.w	r2, r2, #24
 8001e74:	609a      	str	r2, [r3, #8]
 8001e76:	e00c      	b.n	8001e92 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6899      	ldr	r1, [r3, #8]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	461a      	mov	r2, r3
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 f834 	bl	8001ef0 <HAL_CRCEx_Polynomial_Set>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e028      	b.n	8001ee4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	795b      	ldrb	r3, [r3, #5]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d105      	bne.n	8001ea6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea2:	611a      	str	r2, [r3, #16]
 8001ea4:	e004      	b.n	8001eb0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	6912      	ldr	r2, [r2, #16]
 8001eae:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	695a      	ldr	r2, [r3, #20]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	699a      	ldr	r2, [r3, #24]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	04c11db7 	.word	0x04c11db7

08001ef0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b087      	sub	sp, #28
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001efc:	2300      	movs	r3, #0
 8001efe:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001f00:	231f      	movs	r3, #31
 8001f02:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001f04:	bf00      	nop
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1e5a      	subs	r2, r3, #1
 8001f0a:	613a      	str	r2, [r7, #16]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d009      	beq.n	8001f24 <HAL_CRCEx_Polynomial_Set+0x34>
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	f003 031f 	and.w	r3, r3, #31
 8001f16:	68ba      	ldr	r2, [r7, #8]
 8001f18:	fa22 f303 	lsr.w	r3, r2, r3
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d0f0      	beq.n	8001f06 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b18      	cmp	r3, #24
 8001f28:	d846      	bhi.n	8001fb8 <HAL_CRCEx_Polynomial_Set+0xc8>
 8001f2a:	a201      	add	r2, pc, #4	; (adr r2, 8001f30 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f30:	08001fbf 	.word	0x08001fbf
 8001f34:	08001fb9 	.word	0x08001fb9
 8001f38:	08001fb9 	.word	0x08001fb9
 8001f3c:	08001fb9 	.word	0x08001fb9
 8001f40:	08001fb9 	.word	0x08001fb9
 8001f44:	08001fb9 	.word	0x08001fb9
 8001f48:	08001fb9 	.word	0x08001fb9
 8001f4c:	08001fb9 	.word	0x08001fb9
 8001f50:	08001fad 	.word	0x08001fad
 8001f54:	08001fb9 	.word	0x08001fb9
 8001f58:	08001fb9 	.word	0x08001fb9
 8001f5c:	08001fb9 	.word	0x08001fb9
 8001f60:	08001fb9 	.word	0x08001fb9
 8001f64:	08001fb9 	.word	0x08001fb9
 8001f68:	08001fb9 	.word	0x08001fb9
 8001f6c:	08001fb9 	.word	0x08001fb9
 8001f70:	08001fa1 	.word	0x08001fa1
 8001f74:	08001fb9 	.word	0x08001fb9
 8001f78:	08001fb9 	.word	0x08001fb9
 8001f7c:	08001fb9 	.word	0x08001fb9
 8001f80:	08001fb9 	.word	0x08001fb9
 8001f84:	08001fb9 	.word	0x08001fb9
 8001f88:	08001fb9 	.word	0x08001fb9
 8001f8c:	08001fb9 	.word	0x08001fb9
 8001f90:	08001f95 	.word	0x08001f95
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	2b06      	cmp	r3, #6
 8001f98:	d913      	bls.n	8001fc2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001f9e:	e010      	b.n	8001fc2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	2b07      	cmp	r3, #7
 8001fa4:	d90f      	bls.n	8001fc6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001faa:	e00c      	b.n	8001fc6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	2b0f      	cmp	r3, #15
 8001fb0:	d90b      	bls.n	8001fca <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001fb6:	e008      	b.n	8001fca <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	75fb      	strb	r3, [r7, #23]
      break;
 8001fbc:	e006      	b.n	8001fcc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001fbe:	bf00      	nop
 8001fc0:	e004      	b.n	8001fcc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001fc2:	bf00      	nop
 8001fc4:	e002      	b.n	8001fcc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001fc6:	bf00      	nop
 8001fc8:	e000      	b.n	8001fcc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001fca:	bf00      	nop
  }
  if (status == HAL_OK)
 8001fcc:	7dfb      	ldrb	r3, [r7, #23]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d10d      	bne.n	8001fee <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68ba      	ldr	r2, [r7, #8]
 8001fd8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f023 0118 	bic.w	r1, r3, #24
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	430a      	orrs	r2, r1
 8001fec:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001fee:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	371c      	adds	r7, #28
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b087      	sub	sp, #28
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8002006:	2300      	movs	r3, #0
 8002008:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800200a:	e158      	b.n	80022be <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	2101      	movs	r1, #1
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	fa01 f303 	lsl.w	r3, r1, r3
 8002018:	4013      	ands	r3, r2
 800201a:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2b00      	cmp	r3, #0
 8002020:	f000 814a 	beq.w	80022b8 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d00b      	beq.n	8002044 <HAL_GPIO_Init+0x48>
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2b02      	cmp	r3, #2
 8002032:	d007      	beq.n	8002044 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002038:	2b11      	cmp	r3, #17
 800203a:	d003      	beq.n	8002044 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	2b12      	cmp	r3, #18
 8002042:	d130      	bne.n	80020a6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	2203      	movs	r2, #3
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	43db      	mvns	r3, r3
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	4013      	ands	r3, r2
 800205a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	68da      	ldr	r2, [r3, #12]
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	4313      	orrs	r3, r2
 800206c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800207a:	2201      	movs	r2, #1
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	43db      	mvns	r3, r3
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	4013      	ands	r3, r2
 8002088:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	091b      	lsrs	r3, r3, #4
 8002090:	f003 0201 	and.w	r2, r3, #1
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	4313      	orrs	r3, r2
 800209e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	2203      	movs	r2, #3
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43db      	mvns	r3, r3
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	4013      	ands	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	689a      	ldr	r2, [r3, #8]
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d003      	beq.n	80020e6 <HAL_GPIO_Init+0xea>
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2b12      	cmp	r3, #18
 80020e4:	d123      	bne.n	800212e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	08da      	lsrs	r2, r3, #3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	3208      	adds	r2, #8
 80020ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	220f      	movs	r2, #15
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	43db      	mvns	r3, r3
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	4013      	ands	r3, r2
 8002108:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	691a      	ldr	r2, [r3, #16]
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	f003 0307 	and.w	r3, r3, #7
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	4313      	orrs	r3, r2
 800211e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	08da      	lsrs	r2, r3, #3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	3208      	adds	r2, #8
 8002128:	6939      	ldr	r1, [r7, #16]
 800212a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	2203      	movs	r2, #3
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	43db      	mvns	r3, r3
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	4013      	ands	r3, r2
 8002144:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f003 0203 	and.w	r2, r3, #3
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	4313      	orrs	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800216a:	2b00      	cmp	r3, #0
 800216c:	f000 80a4 	beq.w	80022b8 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8002170:	4a5a      	ldr	r2, [pc, #360]	; (80022dc <HAL_GPIO_Init+0x2e0>)
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	089b      	lsrs	r3, r3, #2
 8002176:	3318      	adds	r3, #24
 8002178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800217c:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	f003 0303 	and.w	r3, r3, #3
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	220f      	movs	r2, #15
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	4013      	ands	r3, r2
 8002192:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a52      	ldr	r2, [pc, #328]	; (80022e0 <HAL_GPIO_Init+0x2e4>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d025      	beq.n	80021e8 <HAL_GPIO_Init+0x1ec>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a51      	ldr	r2, [pc, #324]	; (80022e4 <HAL_GPIO_Init+0x2e8>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d01f      	beq.n	80021e4 <HAL_GPIO_Init+0x1e8>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4a50      	ldr	r2, [pc, #320]	; (80022e8 <HAL_GPIO_Init+0x2ec>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d019      	beq.n	80021e0 <HAL_GPIO_Init+0x1e4>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a4f      	ldr	r2, [pc, #316]	; (80022ec <HAL_GPIO_Init+0x2f0>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d013      	beq.n	80021dc <HAL_GPIO_Init+0x1e0>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a4e      	ldr	r2, [pc, #312]	; (80022f0 <HAL_GPIO_Init+0x2f4>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d00d      	beq.n	80021d8 <HAL_GPIO_Init+0x1dc>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a4d      	ldr	r2, [pc, #308]	; (80022f4 <HAL_GPIO_Init+0x2f8>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d007      	beq.n	80021d4 <HAL_GPIO_Init+0x1d8>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a4c      	ldr	r2, [pc, #304]	; (80022f8 <HAL_GPIO_Init+0x2fc>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d101      	bne.n	80021d0 <HAL_GPIO_Init+0x1d4>
 80021cc:	2306      	movs	r3, #6
 80021ce:	e00c      	b.n	80021ea <HAL_GPIO_Init+0x1ee>
 80021d0:	2307      	movs	r3, #7
 80021d2:	e00a      	b.n	80021ea <HAL_GPIO_Init+0x1ee>
 80021d4:	2305      	movs	r3, #5
 80021d6:	e008      	b.n	80021ea <HAL_GPIO_Init+0x1ee>
 80021d8:	2304      	movs	r3, #4
 80021da:	e006      	b.n	80021ea <HAL_GPIO_Init+0x1ee>
 80021dc:	2303      	movs	r3, #3
 80021de:	e004      	b.n	80021ea <HAL_GPIO_Init+0x1ee>
 80021e0:	2302      	movs	r3, #2
 80021e2:	e002      	b.n	80021ea <HAL_GPIO_Init+0x1ee>
 80021e4:	2301      	movs	r3, #1
 80021e6:	e000      	b.n	80021ea <HAL_GPIO_Init+0x1ee>
 80021e8:	2300      	movs	r3, #0
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	f002 0203 	and.w	r2, r2, #3
 80021f0:	00d2      	lsls	r2, r2, #3
 80021f2:	4093      	lsls	r3, r2
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 80021fa:	4938      	ldr	r1, [pc, #224]	; (80022dc <HAL_GPIO_Init+0x2e0>)
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	089b      	lsrs	r3, r3, #2
 8002200:	3318      	adds	r3, #24
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002208:	4b34      	ldr	r3, [pc, #208]	; (80022dc <HAL_GPIO_Init+0x2e0>)
 800220a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800220e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	43db      	mvns	r3, r3
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	4013      	ands	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	4313      	orrs	r3, r2
 800222c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800222e:	4a2b      	ldr	r2, [pc, #172]	; (80022dc <HAL_GPIO_Init+0x2e0>)
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002236:	4b29      	ldr	r3, [pc, #164]	; (80022dc <HAL_GPIO_Init+0x2e0>)
 8002238:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800223c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	43db      	mvns	r3, r3
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	4013      	ands	r3, r2
 8002246:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d003      	beq.n	800225c <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	4313      	orrs	r3, r2
 800225a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800225c:	4a1f      	ldr	r2, [pc, #124]	; (80022dc <HAL_GPIO_Init+0x2e0>)
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002264:	4b1d      	ldr	r3, [pc, #116]	; (80022dc <HAL_GPIO_Init+0x2e0>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	43db      	mvns	r3, r3
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	4013      	ands	r3, r2
 8002272:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	4313      	orrs	r3, r2
 8002286:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002288:	4a14      	ldr	r2, [pc, #80]	; (80022dc <HAL_GPIO_Init+0x2e0>)
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800228e:	4b13      	ldr	r3, [pc, #76]	; (80022dc <HAL_GPIO_Init+0x2e0>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	43db      	mvns	r3, r3
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	4013      	ands	r3, r2
 800229c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022b2:	4a0a      	ldr	r2, [pc, #40]	; (80022dc <HAL_GPIO_Init+0x2e0>)
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	3301      	adds	r3, #1
 80022bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	fa22 f303 	lsr.w	r3, r2, r3
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f47f ae9f 	bne.w	800200c <HAL_GPIO_Init+0x10>
  }
}
 80022ce:	bf00      	nop
 80022d0:	371c      	adds	r7, #28
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	4002f400 	.word	0x4002f400
 80022e0:	42020000 	.word	0x42020000
 80022e4:	42020400 	.word	0x42020400
 80022e8:	42020800 	.word	0x42020800
 80022ec:	42020c00 	.word	0x42020c00
 80022f0:	42021000 	.word	0x42021000
 80022f4:	42021400 	.word	0x42021400
 80022f8:	42021800 	.word	0x42021800

080022fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	460b      	mov	r3, r1
 8002306:	807b      	strh	r3, [r7, #2]
 8002308:	4613      	mov	r3, r2
 800230a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800230c:	787b      	ldrb	r3, [r7, #1]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002312:	887a      	ldrh	r2, [r7, #2]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002318:	e002      	b.n	8002320 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800231a:	887a      	ldrh	r2, [r7, #2]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002330:	4b04      	ldr	r3, [pc, #16]	; (8002344 <HAL_PWREx_GetVoltageRange+0x18>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002338:	4618      	mov	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	40007000 	.word	0x40007000

08002348 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8002350:	4b27      	ldr	r3, [pc, #156]	; (80023f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002358:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 800235a:	f000 f861 	bl	8002420 <HAL_PWREx_SMPS_GetEffectiveMode>
 800235e:	4603      	mov	r3, r0
 8002360:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002364:	d101      	bne.n	800236a <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e03e      	b.n	80023e8 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 800236a:	4b21      	ldr	r3, [pc, #132]	; (80023f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002372:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002376:	d101      	bne.n	800237c <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e035      	b.n	80023e8 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800237c:	68ba      	ldr	r2, [r7, #8]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	429a      	cmp	r2, r3
 8002382:	d101      	bne.n	8002388 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8002384:	2300      	movs	r3, #0
 8002386:	e02f      	b.n	80023e8 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002388:	4b19      	ldr	r3, [pc, #100]	; (80023f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8002390:	4917      	ldr	r1, [pc, #92]	; (80023f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4313      	orrs	r3, r2
 8002396:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8002398:	4b16      	ldr	r3, [pc, #88]	; (80023f4 <HAL_PWREx_ControlVoltageScaling+0xac>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	095b      	lsrs	r3, r3, #5
 800239e:	4a16      	ldr	r2, [pc, #88]	; (80023f8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80023a0:	fba2 2303 	umull	r2, r3, r2, r3
 80023a4:	09db      	lsrs	r3, r3, #7
 80023a6:	2232      	movs	r2, #50	; 0x32
 80023a8:	fb02 f303 	mul.w	r3, r2, r3
 80023ac:	4a13      	ldr	r2, [pc, #76]	; (80023fc <HAL_PWREx_ControlVoltageScaling+0xb4>)
 80023ae:	fba2 2303 	umull	r2, r3, r2, r3
 80023b2:	08db      	lsrs	r3, r3, #3
 80023b4:	3301      	adds	r3, #1
 80023b6:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023b8:	e002      	b.n	80023c0 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	3b01      	subs	r3, #1
 80023be:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023c0:	4b0b      	ldr	r3, [pc, #44]	; (80023f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023cc:	d102      	bne.n	80023d4 <HAL_PWREx_ControlVoltageScaling+0x8c>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1f2      	bne.n	80023ba <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023d4:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80023d6:	695b      	ldr	r3, [r3, #20]
 80023d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023e0:	d101      	bne.n	80023e6 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e000      	b.n	80023e8 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40007000 	.word	0x40007000
 80023f4:	20000028 	.word	0x20000028
 80023f8:	0a7c5ac5 	.word	0x0a7c5ac5
 80023fc:	cccccccd 	.word	0xcccccccd

08002400 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002404:	4b05      	ldr	r3, [pc, #20]	; (800241c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	4a04      	ldr	r2, [pc, #16]	; (800241c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800240a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800240e:	6093      	str	r3, [r2, #8]
}
 8002410:	bf00      	nop
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	40007000 	.word	0x40007000

08002420 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8002426:	4b0f      	ldr	r3, [pc, #60]	; (8002464 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8002436:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800243a:	607b      	str	r3, [r7, #4]
 800243c:	e00a      	b.n	8002454 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d103      	bne.n	8002450 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8002448:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800244c:	607b      	str	r3, [r7, #4]
 800244e:	e001      	b.n	8002454 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8002450:	2300      	movs	r3, #0
 8002452:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8002454:	687b      	ldr	r3, [r7, #4]
}
 8002456:	4618      	mov	r0, r3
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	40007000 	.word	0x40007000

08002468 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b088      	sub	sp, #32
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d102      	bne.n	800247c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	f000 bc52 	b.w	8002d20 <HAL_RCC_OscConfig+0x8b8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800247c:	4ba3      	ldr	r3, [pc, #652]	; (800270c <HAL_RCC_OscConfig+0x2a4>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f003 030c 	and.w	r3, r3, #12
 8002484:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002486:	4ba1      	ldr	r3, [pc, #644]	; (800270c <HAL_RCC_OscConfig+0x2a4>)
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	f003 0303 	and.w	r3, r3, #3
 800248e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0310 	and.w	r3, r3, #16
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 80da 	beq.w	8002652 <HAL_RCC_OscConfig+0x1ea>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d006      	beq.n	80024b2 <HAL_RCC_OscConfig+0x4a>
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	2b0c      	cmp	r3, #12
 80024a8:	f040 8081 	bne.w	80025ae <HAL_RCC_OscConfig+0x146>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d17d      	bne.n	80025ae <HAL_RCC_OscConfig+0x146>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024b2:	4b96      	ldr	r3, [pc, #600]	; (800270c <HAL_RCC_OscConfig+0x2a4>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d006      	beq.n	80024cc <HAL_RCC_OscConfig+0x64>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d102      	bne.n	80024cc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	f000 bc2a 	b.w	8002d20 <HAL_RCC_OscConfig+0x8b8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024d0:	4b8e      	ldr	r3, [pc, #568]	; (800270c <HAL_RCC_OscConfig+0x2a4>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0308 	and.w	r3, r3, #8
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d004      	beq.n	80024e6 <HAL_RCC_OscConfig+0x7e>
 80024dc:	4b8b      	ldr	r3, [pc, #556]	; (800270c <HAL_RCC_OscConfig+0x2a4>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024e4:	e005      	b.n	80024f2 <HAL_RCC_OscConfig+0x8a>
 80024e6:	4b89      	ldr	r3, [pc, #548]	; (800270c <HAL_RCC_OscConfig+0x2a4>)
 80024e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024ec:	091b      	lsrs	r3, r3, #4
 80024ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d224      	bcs.n	8002540 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fa:	4618      	mov	r0, r3
 80024fc:	f000 fe0c 	bl	8003118 <RCC_SetFlashLatencyFromMSIRange>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d002      	beq.n	800250c <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	f000 bc0a 	b.w	8002d20 <HAL_RCC_OscConfig+0x8b8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800250c:	4b7f      	ldr	r3, [pc, #508]	; (800270c <HAL_RCC_OscConfig+0x2a4>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a7e      	ldr	r2, [pc, #504]	; (800270c <HAL_RCC_OscConfig+0x2a4>)
 8002512:	f043 0308 	orr.w	r3, r3, #8
 8002516:	6013      	str	r3, [r2, #0]
 8002518:	4b7c      	ldr	r3, [pc, #496]	; (800270c <HAL_RCC_OscConfig+0x2a4>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002524:	4979      	ldr	r1, [pc, #484]	; (800270c <HAL_RCC_OscConfig+0x2a4>)
 8002526:	4313      	orrs	r3, r2
 8002528:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800252a:	4b78      	ldr	r3, [pc, #480]	; (800270c <HAL_RCC_OscConfig+0x2a4>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	021b      	lsls	r3, r3, #8
 8002538:	4974      	ldr	r1, [pc, #464]	; (800270c <HAL_RCC_OscConfig+0x2a4>)
 800253a:	4313      	orrs	r3, r2
 800253c:	604b      	str	r3, [r1, #4]
 800253e:	e025      	b.n	800258c <HAL_RCC_OscConfig+0x124>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002540:	4b72      	ldr	r3, [pc, #456]	; (800270c <HAL_RCC_OscConfig+0x2a4>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a71      	ldr	r2, [pc, #452]	; (800270c <HAL_RCC_OscConfig+0x2a4>)
 8002546:	f043 0308 	orr.w	r3, r3, #8
 800254a:	6013      	str	r3, [r2, #0]
 800254c:	4b6f      	ldr	r3, [pc, #444]	; (800270c <HAL_RCC_OscConfig+0x2a4>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002558:	496c      	ldr	r1, [pc, #432]	; (800270c <HAL_RCC_OscConfig+0x2a4>)
 800255a:	4313      	orrs	r3, r2
 800255c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800255e:	4b6b      	ldr	r3, [pc, #428]	; (800270c <HAL_RCC_OscConfig+0x2a4>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	021b      	lsls	r3, r3, #8
 800256c:	4967      	ldr	r1, [pc, #412]	; (800270c <HAL_RCC_OscConfig+0x2a4>)
 800256e:	4313      	orrs	r3, r2
 8002570:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d109      	bne.n	800258c <HAL_RCC_OscConfig+0x124>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	4618      	mov	r0, r3
 800257e:	f000 fdcb 	bl	8003118 <RCC_SetFlashLatencyFromMSIRange>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <HAL_RCC_OscConfig+0x124>
            {
              return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e3c9      	b.n	8002d20 <HAL_RCC_OscConfig+0x8b8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800258c:	f000 fd88 	bl	80030a0 <HAL_RCC_GetHCLKFreq>
 8002590:	4602      	mov	r2, r0
 8002592:	4b5f      	ldr	r3, [pc, #380]	; (8002710 <HAL_RCC_OscConfig+0x2a8>)
 8002594:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002596:	4b5f      	ldr	r3, [pc, #380]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4618      	mov	r0, r3
 800259c:	f7ff fae2 	bl	8001b64 <HAL_InitTick>
 80025a0:	4603      	mov	r3, r0
 80025a2:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d052      	beq.n	8002650 <HAL_RCC_OscConfig+0x1e8>
        {
          return status;
 80025aa:	7bfb      	ldrb	r3, [r7, #15]
 80025ac:	e3b8      	b.n	8002d20 <HAL_RCC_OscConfig+0x8b8>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d032      	beq.n	800261c <HAL_RCC_OscConfig+0x1b4>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80025b6:	4b55      	ldr	r3, [pc, #340]	; (800270c <HAL_RCC_OscConfig+0x2a4>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a54      	ldr	r2, [pc, #336]	; (800270c <HAL_RCC_OscConfig+0x2a4>)
 80025bc:	f043 0301 	orr.w	r3, r3, #1
 80025c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025c2:	f7ff fb1f 	bl	8001c04 <HAL_GetTick>
 80025c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025c8:	e008      	b.n	80025dc <HAL_RCC_OscConfig+0x174>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025ca:	f7ff fb1b 	bl	8001c04 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0x174>
          {
            return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e3a1      	b.n	8002d20 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025dc:	4b4b      	ldr	r3, [pc, #300]	; (800270c <HAL_RCC_OscConfig+0x2a4>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d0f0      	beq.n	80025ca <HAL_RCC_OscConfig+0x162>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025e8:	4b48      	ldr	r3, [pc, #288]	; (800270c <HAL_RCC_OscConfig+0x2a4>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a47      	ldr	r2, [pc, #284]	; (800270c <HAL_RCC_OscConfig+0x2a4>)
 80025ee:	f043 0308 	orr.w	r3, r3, #8
 80025f2:	6013      	str	r3, [r2, #0]
 80025f4:	4b45      	ldr	r3, [pc, #276]	; (800270c <HAL_RCC_OscConfig+0x2a4>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002600:	4942      	ldr	r1, [pc, #264]	; (800270c <HAL_RCC_OscConfig+0x2a4>)
 8002602:	4313      	orrs	r3, r2
 8002604:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002606:	4b41      	ldr	r3, [pc, #260]	; (800270c <HAL_RCC_OscConfig+0x2a4>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	021b      	lsls	r3, r3, #8
 8002614:	493d      	ldr	r1, [pc, #244]	; (800270c <HAL_RCC_OscConfig+0x2a4>)
 8002616:	4313      	orrs	r3, r2
 8002618:	604b      	str	r3, [r1, #4]
 800261a:	e01a      	b.n	8002652 <HAL_RCC_OscConfig+0x1ea>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800261c:	4b3b      	ldr	r3, [pc, #236]	; (800270c <HAL_RCC_OscConfig+0x2a4>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a3a      	ldr	r2, [pc, #232]	; (800270c <HAL_RCC_OscConfig+0x2a4>)
 8002622:	f023 0301 	bic.w	r3, r3, #1
 8002626:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002628:	f7ff faec 	bl	8001c04 <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0x1da>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002630:	f7ff fae8 	bl	8001c04 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x1da>
          {
            return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e36e      	b.n	8002d20 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002642:	4b32      	ldr	r3, [pc, #200]	; (800270c <HAL_RCC_OscConfig+0x2a4>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1f0      	bne.n	8002630 <HAL_RCC_OscConfig+0x1c8>
 800264e:	e000      	b.n	8002652 <HAL_RCC_OscConfig+0x1ea>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002650:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b00      	cmp	r3, #0
 800265c:	d071      	beq.n	8002742 <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	2b08      	cmp	r3, #8
 8002662:	d005      	beq.n	8002670 <HAL_RCC_OscConfig+0x208>
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	2b0c      	cmp	r3, #12
 8002668:	d10e      	bne.n	8002688 <HAL_RCC_OscConfig+0x220>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	2b03      	cmp	r3, #3
 800266e:	d10b      	bne.n	8002688 <HAL_RCC_OscConfig+0x220>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002670:	4b26      	ldr	r3, [pc, #152]	; (800270c <HAL_RCC_OscConfig+0x2a4>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d061      	beq.n	8002740 <HAL_RCC_OscConfig+0x2d8>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d15d      	bne.n	8002740 <HAL_RCC_OscConfig+0x2d8>
      {
        return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e34b      	b.n	8002d20 <HAL_RCC_OscConfig+0x8b8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002690:	d106      	bne.n	80026a0 <HAL_RCC_OscConfig+0x238>
 8002692:	4b1e      	ldr	r3, [pc, #120]	; (800270c <HAL_RCC_OscConfig+0x2a4>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a1d      	ldr	r2, [pc, #116]	; (800270c <HAL_RCC_OscConfig+0x2a4>)
 8002698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800269c:	6013      	str	r3, [r2, #0]
 800269e:	e01d      	b.n	80026dc <HAL_RCC_OscConfig+0x274>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026a8:	d10c      	bne.n	80026c4 <HAL_RCC_OscConfig+0x25c>
 80026aa:	4b18      	ldr	r3, [pc, #96]	; (800270c <HAL_RCC_OscConfig+0x2a4>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a17      	ldr	r2, [pc, #92]	; (800270c <HAL_RCC_OscConfig+0x2a4>)
 80026b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026b4:	6013      	str	r3, [r2, #0]
 80026b6:	4b15      	ldr	r3, [pc, #84]	; (800270c <HAL_RCC_OscConfig+0x2a4>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a14      	ldr	r2, [pc, #80]	; (800270c <HAL_RCC_OscConfig+0x2a4>)
 80026bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c0:	6013      	str	r3, [r2, #0]
 80026c2:	e00b      	b.n	80026dc <HAL_RCC_OscConfig+0x274>
 80026c4:	4b11      	ldr	r3, [pc, #68]	; (800270c <HAL_RCC_OscConfig+0x2a4>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a10      	ldr	r2, [pc, #64]	; (800270c <HAL_RCC_OscConfig+0x2a4>)
 80026ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ce:	6013      	str	r3, [r2, #0]
 80026d0:	4b0e      	ldr	r3, [pc, #56]	; (800270c <HAL_RCC_OscConfig+0x2a4>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a0d      	ldr	r2, [pc, #52]	; (800270c <HAL_RCC_OscConfig+0x2a4>)
 80026d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d019      	beq.n	8002718 <HAL_RCC_OscConfig+0x2b0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e4:	f7ff fa8e 	bl	8001c04 <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x296>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026ec:	f7ff fa8a 	bl	8001c04 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b64      	cmp	r3, #100	; 0x64
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x296>
          {
            return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e310      	b.n	8002d20 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026fe:	4b03      	ldr	r3, [pc, #12]	; (800270c <HAL_RCC_OscConfig+0x2a4>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d0f0      	beq.n	80026ec <HAL_RCC_OscConfig+0x284>
 800270a:	e01a      	b.n	8002742 <HAL_RCC_OscConfig+0x2da>
 800270c:	40021000 	.word	0x40021000
 8002710:	20000028 	.word	0x20000028
 8002714:	2000002c 	.word	0x2000002c
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002718:	f7ff fa74 	bl	8001c04 <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x2ca>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002720:	f7ff fa70 	bl	8001c04 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b64      	cmp	r3, #100	; 0x64
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x2ca>
          {
            return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e2f6      	b.n	8002d20 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002732:	4ba6      	ldr	r3, [pc, #664]	; (80029cc <HAL_RCC_OscConfig+0x564>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1f0      	bne.n	8002720 <HAL_RCC_OscConfig+0x2b8>
 800273e:	e000      	b.n	8002742 <HAL_RCC_OscConfig+0x2da>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002740:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d060      	beq.n	8002810 <HAL_RCC_OscConfig+0x3a8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	2b04      	cmp	r3, #4
 8002752:	d005      	beq.n	8002760 <HAL_RCC_OscConfig+0x2f8>
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	2b0c      	cmp	r3, #12
 8002758:	d119      	bne.n	800278e <HAL_RCC_OscConfig+0x326>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	2b02      	cmp	r3, #2
 800275e:	d116      	bne.n	800278e <HAL_RCC_OscConfig+0x326>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002760:	4b9a      	ldr	r3, [pc, #616]	; (80029cc <HAL_RCC_OscConfig+0x564>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002768:	2b00      	cmp	r3, #0
 800276a:	d005      	beq.n	8002778 <HAL_RCC_OscConfig+0x310>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d101      	bne.n	8002778 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e2d3      	b.n	8002d20 <HAL_RCC_OscConfig+0x8b8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002778:	4b94      	ldr	r3, [pc, #592]	; (80029cc <HAL_RCC_OscConfig+0x564>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	061b      	lsls	r3, r3, #24
 8002786:	4991      	ldr	r1, [pc, #580]	; (80029cc <HAL_RCC_OscConfig+0x564>)
 8002788:	4313      	orrs	r3, r2
 800278a:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800278c:	e040      	b.n	8002810 <HAL_RCC_OscConfig+0x3a8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d023      	beq.n	80027de <HAL_RCC_OscConfig+0x376>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002796:	4b8d      	ldr	r3, [pc, #564]	; (80029cc <HAL_RCC_OscConfig+0x564>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a8c      	ldr	r2, [pc, #560]	; (80029cc <HAL_RCC_OscConfig+0x564>)
 800279c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a2:	f7ff fa2f 	bl	8001c04 <HAL_GetTick>
 80027a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027a8:	e008      	b.n	80027bc <HAL_RCC_OscConfig+0x354>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027aa:	f7ff fa2b 	bl	8001c04 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e2b1      	b.n	8002d20 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027bc:	4b83      	ldr	r3, [pc, #524]	; (80029cc <HAL_RCC_OscConfig+0x564>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d0f0      	beq.n	80027aa <HAL_RCC_OscConfig+0x342>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c8:	4b80      	ldr	r3, [pc, #512]	; (80029cc <HAL_RCC_OscConfig+0x564>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	061b      	lsls	r3, r3, #24
 80027d6:	497d      	ldr	r1, [pc, #500]	; (80029cc <HAL_RCC_OscConfig+0x564>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	604b      	str	r3, [r1, #4]
 80027dc:	e018      	b.n	8002810 <HAL_RCC_OscConfig+0x3a8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027de:	4b7b      	ldr	r3, [pc, #492]	; (80029cc <HAL_RCC_OscConfig+0x564>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a7a      	ldr	r2, [pc, #488]	; (80029cc <HAL_RCC_OscConfig+0x564>)
 80027e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ea:	f7ff fa0b 	bl	8001c04 <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027f0:	e008      	b.n	8002804 <HAL_RCC_OscConfig+0x39c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027f2:	f7ff fa07 	bl	8001c04 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e28d      	b.n	8002d20 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002804:	4b71      	ldr	r3, [pc, #452]	; (80029cc <HAL_RCC_OscConfig+0x564>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1f0      	bne.n	80027f2 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0308 	and.w	r3, r3, #8
 8002818:	2b00      	cmp	r3, #0
 800281a:	d051      	beq.n	80028c0 <HAL_RCC_OscConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	695b      	ldr	r3, [r3, #20]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d031      	beq.n	8002888 <HAL_RCC_OscConfig+0x420>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d108      	bne.n	800283e <HAL_RCC_OscConfig+0x3d6>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800282c:	4b67      	ldr	r3, [pc, #412]	; (80029cc <HAL_RCC_OscConfig+0x564>)
 800282e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002832:	4a66      	ldr	r2, [pc, #408]	; (80029cc <HAL_RCC_OscConfig+0x564>)
 8002834:	f023 0310 	bic.w	r3, r3, #16
 8002838:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800283c:	e007      	b.n	800284e <HAL_RCC_OscConfig+0x3e6>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800283e:	4b63      	ldr	r3, [pc, #396]	; (80029cc <HAL_RCC_OscConfig+0x564>)
 8002840:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002844:	4a61      	ldr	r2, [pc, #388]	; (80029cc <HAL_RCC_OscConfig+0x564>)
 8002846:	f043 0310 	orr.w	r3, r3, #16
 800284a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800284e:	4b5f      	ldr	r3, [pc, #380]	; (80029cc <HAL_RCC_OscConfig+0x564>)
 8002850:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002854:	4a5d      	ldr	r2, [pc, #372]	; (80029cc <HAL_RCC_OscConfig+0x564>)
 8002856:	f043 0301 	orr.w	r3, r3, #1
 800285a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800285e:	f7ff f9d1 	bl	8001c04 <HAL_GetTick>
 8002862:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002864:	e008      	b.n	8002878 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002866:	f7ff f9cd 	bl	8001c04 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b07      	cmp	r3, #7
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e253      	b.n	8002d20 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002878:	4b54      	ldr	r3, [pc, #336]	; (80029cc <HAL_RCC_OscConfig+0x564>)
 800287a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0ef      	beq.n	8002866 <HAL_RCC_OscConfig+0x3fe>
 8002886:	e01b      	b.n	80028c0 <HAL_RCC_OscConfig+0x458>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002888:	4b50      	ldr	r3, [pc, #320]	; (80029cc <HAL_RCC_OscConfig+0x564>)
 800288a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800288e:	4a4f      	ldr	r2, [pc, #316]	; (80029cc <HAL_RCC_OscConfig+0x564>)
 8002890:	f023 0301 	bic.w	r3, r3, #1
 8002894:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002898:	f7ff f9b4 	bl	8001c04 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x44a>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028a0:	f7ff f9b0 	bl	8001c04 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b07      	cmp	r3, #7
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x44a>
        {
          return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e236      	b.n	8002d20 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028b2:	4b46      	ldr	r3, [pc, #280]	; (80029cc <HAL_RCC_OscConfig+0x564>)
 80028b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1ef      	bne.n	80028a0 <HAL_RCC_OscConfig+0x438>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 8109 	beq.w	8002ae0 <HAL_RCC_OscConfig+0x678>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ce:	2300      	movs	r3, #0
 80028d0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80028d2:	4b3e      	ldr	r3, [pc, #248]	; (80029cc <HAL_RCC_OscConfig+0x564>)
 80028d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10d      	bne.n	80028fa <HAL_RCC_OscConfig+0x492>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028de:	4b3b      	ldr	r3, [pc, #236]	; (80029cc <HAL_RCC_OscConfig+0x564>)
 80028e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e2:	4a3a      	ldr	r2, [pc, #232]	; (80029cc <HAL_RCC_OscConfig+0x564>)
 80028e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028e8:	6593      	str	r3, [r2, #88]	; 0x58
 80028ea:	4b38      	ldr	r3, [pc, #224]	; (80029cc <HAL_RCC_OscConfig+0x564>)
 80028ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f2:	60bb      	str	r3, [r7, #8]
 80028f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028f6:	2301      	movs	r3, #1
 80028f8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028fa:	4b35      	ldr	r3, [pc, #212]	; (80029d0 <HAL_RCC_OscConfig+0x568>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002902:	2b00      	cmp	r3, #0
 8002904:	d118      	bne.n	8002938 <HAL_RCC_OscConfig+0x4d0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002906:	4b32      	ldr	r3, [pc, #200]	; (80029d0 <HAL_RCC_OscConfig+0x568>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a31      	ldr	r2, [pc, #196]	; (80029d0 <HAL_RCC_OscConfig+0x568>)
 800290c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002910:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002912:	f7ff f977 	bl	8001c04 <HAL_GetTick>
 8002916:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002918:	e008      	b.n	800292c <HAL_RCC_OscConfig+0x4c4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800291a:	f7ff f973 	bl	8001c04 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0x4c4>
        {
          return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e1f9      	b.n	8002d20 <HAL_RCC_OscConfig+0x8b8>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800292c:	4b28      	ldr	r3, [pc, #160]	; (80029d0 <HAL_RCC_OscConfig+0x568>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002934:	2b00      	cmp	r3, #0
 8002936:	d0f0      	beq.n	800291a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f003 0301 	and.w	r3, r3, #1
 8002940:	2b00      	cmp	r3, #0
 8002942:	d01f      	beq.n	8002984 <HAL_RCC_OscConfig+0x51c>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f003 0304 	and.w	r3, r3, #4
 800294c:	2b00      	cmp	r3, #0
 800294e:	d010      	beq.n	8002972 <HAL_RCC_OscConfig+0x50a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002950:	4b1e      	ldr	r3, [pc, #120]	; (80029cc <HAL_RCC_OscConfig+0x564>)
 8002952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002956:	4a1d      	ldr	r2, [pc, #116]	; (80029cc <HAL_RCC_OscConfig+0x564>)
 8002958:	f043 0304 	orr.w	r3, r3, #4
 800295c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002960:	4b1a      	ldr	r3, [pc, #104]	; (80029cc <HAL_RCC_OscConfig+0x564>)
 8002962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002966:	4a19      	ldr	r2, [pc, #100]	; (80029cc <HAL_RCC_OscConfig+0x564>)
 8002968:	f043 0301 	orr.w	r3, r3, #1
 800296c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002970:	e018      	b.n	80029a4 <HAL_RCC_OscConfig+0x53c>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002972:	4b16      	ldr	r3, [pc, #88]	; (80029cc <HAL_RCC_OscConfig+0x564>)
 8002974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002978:	4a14      	ldr	r2, [pc, #80]	; (80029cc <HAL_RCC_OscConfig+0x564>)
 800297a:	f043 0301 	orr.w	r3, r3, #1
 800297e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002982:	e00f      	b.n	80029a4 <HAL_RCC_OscConfig+0x53c>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002984:	4b11      	ldr	r3, [pc, #68]	; (80029cc <HAL_RCC_OscConfig+0x564>)
 8002986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800298a:	4a10      	ldr	r2, [pc, #64]	; (80029cc <HAL_RCC_OscConfig+0x564>)
 800298c:	f023 0301 	bic.w	r3, r3, #1
 8002990:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002994:	4b0d      	ldr	r3, [pc, #52]	; (80029cc <HAL_RCC_OscConfig+0x564>)
 8002996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800299a:	4a0c      	ldr	r2, [pc, #48]	; (80029cc <HAL_RCC_OscConfig+0x564>)
 800299c:	f023 0304 	bic.w	r3, r3, #4
 80029a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d058      	beq.n	8002a5e <HAL_RCC_OscConfig+0x5f6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ac:	f7ff f92a 	bl	8001c04 <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029b2:	e00f      	b.n	80029d4 <HAL_RCC_OscConfig+0x56c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029b4:	f7ff f926 	bl	8001c04 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d906      	bls.n	80029d4 <HAL_RCC_OscConfig+0x56c>
        {
          return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e1aa      	b.n	8002d20 <HAL_RCC_OscConfig+0x8b8>
 80029ca:	bf00      	nop
 80029cc:	40021000 	.word	0x40021000
 80029d0:	40007000 	.word	0x40007000
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029d4:	4bb0      	ldr	r3, [pc, #704]	; (8002c98 <HAL_RCC_OscConfig+0x830>)
 80029d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0e8      	beq.n	80029b4 <HAL_RCC_OscConfig+0x54c>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d01b      	beq.n	8002a26 <HAL_RCC_OscConfig+0x5be>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80029ee:	4baa      	ldr	r3, [pc, #680]	; (8002c98 <HAL_RCC_OscConfig+0x830>)
 80029f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f4:	4aa8      	ldr	r2, [pc, #672]	; (8002c98 <HAL_RCC_OscConfig+0x830>)
 80029f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80029fe:	e00a      	b.n	8002a16 <HAL_RCC_OscConfig+0x5ae>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a00:	f7ff f900 	bl	8001c04 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x5ae>
          {
            return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e184      	b.n	8002d20 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002a16:	4ba0      	ldr	r3, [pc, #640]	; (8002c98 <HAL_RCC_OscConfig+0x830>)
 8002a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d0ed      	beq.n	8002a00 <HAL_RCC_OscConfig+0x598>
 8002a24:	e053      	b.n	8002ace <HAL_RCC_OscConfig+0x666>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002a26:	4b9c      	ldr	r3, [pc, #624]	; (8002c98 <HAL_RCC_OscConfig+0x830>)
 8002a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a2c:	4a9a      	ldr	r2, [pc, #616]	; (8002c98 <HAL_RCC_OscConfig+0x830>)
 8002a2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002a36:	e00a      	b.n	8002a4e <HAL_RCC_OscConfig+0x5e6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a38:	f7ff f8e4 	bl	8001c04 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e168      	b.n	8002d20 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002a4e:	4b92      	ldr	r3, [pc, #584]	; (8002c98 <HAL_RCC_OscConfig+0x830>)
 8002a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d1ed      	bne.n	8002a38 <HAL_RCC_OscConfig+0x5d0>
 8002a5c:	e037      	b.n	8002ace <HAL_RCC_OscConfig+0x666>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a5e:	f7ff f8d1 	bl	8001c04 <HAL_GetTick>
 8002a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a64:	e00a      	b.n	8002a7c <HAL_RCC_OscConfig+0x614>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a66:	f7ff f8cd 	bl	8001c04 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e151      	b.n	8002d20 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a7c:	4b86      	ldr	r3, [pc, #536]	; (8002c98 <HAL_RCC_OscConfig+0x830>)
 8002a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1ed      	bne.n	8002a66 <HAL_RCC_OscConfig+0x5fe>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8002a8a:	4b83      	ldr	r3, [pc, #524]	; (8002c98 <HAL_RCC_OscConfig+0x830>)
 8002a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d01a      	beq.n	8002ace <HAL_RCC_OscConfig+0x666>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002a98:	4b7f      	ldr	r3, [pc, #508]	; (8002c98 <HAL_RCC_OscConfig+0x830>)
 8002a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a9e:	4a7e      	ldr	r2, [pc, #504]	; (8002c98 <HAL_RCC_OscConfig+0x830>)
 8002aa0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002aa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002aa8:	e00a      	b.n	8002ac0 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aaa:	f7ff f8ab 	bl	8001c04 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e12f      	b.n	8002d20 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002ac0:	4b75      	ldr	r3, [pc, #468]	; (8002c98 <HAL_RCC_OscConfig+0x830>)
 8002ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1ed      	bne.n	8002aaa <HAL_RCC_OscConfig+0x642>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ace:	7ffb      	ldrb	r3, [r7, #31]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d105      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x678>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ad4:	4b70      	ldr	r3, [pc, #448]	; (8002c98 <HAL_RCC_OscConfig+0x830>)
 8002ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad8:	4a6f      	ldr	r2, [pc, #444]	; (8002c98 <HAL_RCC_OscConfig+0x830>)
 8002ada:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ade:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0320 	and.w	r3, r3, #32
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d03c      	beq.n	8002b66 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d01c      	beq.n	8002b2e <HAL_RCC_OscConfig+0x6c6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002af4:	4b68      	ldr	r3, [pc, #416]	; (8002c98 <HAL_RCC_OscConfig+0x830>)
 8002af6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002afa:	4a67      	ldr	r2, [pc, #412]	; (8002c98 <HAL_RCC_OscConfig+0x830>)
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b04:	f7ff f87e 	bl	8001c04 <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x6b6>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b0c:	f7ff f87a 	bl	8001c04 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e100      	b.n	8002d20 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b1e:	4b5e      	ldr	r3, [pc, #376]	; (8002c98 <HAL_RCC_OscConfig+0x830>)
 8002b20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0ef      	beq.n	8002b0c <HAL_RCC_OscConfig+0x6a4>
 8002b2c:	e01b      	b.n	8002b66 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b2e:	4b5a      	ldr	r3, [pc, #360]	; (8002c98 <HAL_RCC_OscConfig+0x830>)
 8002b30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b34:	4a58      	ldr	r2, [pc, #352]	; (8002c98 <HAL_RCC_OscConfig+0x830>)
 8002b36:	f023 0301 	bic.w	r3, r3, #1
 8002b3a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b3e:	f7ff f861 	bl	8001c04 <HAL_GetTick>
 8002b42:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b44:	e008      	b.n	8002b58 <HAL_RCC_OscConfig+0x6f0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b46:	f7ff f85d 	bl	8001c04 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e0e3      	b.n	8002d20 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b58:	4b4f      	ldr	r3, [pc, #316]	; (8002c98 <HAL_RCC_OscConfig+0x830>)
 8002b5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1ef      	bne.n	8002b46 <HAL_RCC_OscConfig+0x6de>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f000 80d7 	beq.w	8002d1e <HAL_RCC_OscConfig+0x8b6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b70:	4b49      	ldr	r3, [pc, #292]	; (8002c98 <HAL_RCC_OscConfig+0x830>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 030c 	and.w	r3, r3, #12
 8002b78:	2b0c      	cmp	r3, #12
 8002b7a:	f000 8091 	beq.w	8002ca0 <HAL_RCC_OscConfig+0x838>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d15a      	bne.n	8002c3c <HAL_RCC_OscConfig+0x7d4>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b86:	4b44      	ldr	r3, [pc, #272]	; (8002c98 <HAL_RCC_OscConfig+0x830>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a43      	ldr	r2, [pc, #268]	; (8002c98 <HAL_RCC_OscConfig+0x830>)
 8002b8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b92:	f7ff f837 	bl	8001c04 <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b98:	e008      	b.n	8002bac <HAL_RCC_OscConfig+0x744>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b9a:	f7ff f833 	bl	8001c04 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x744>
          {
            return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e0b9      	b.n	8002d20 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bac:	4b3a      	ldr	r3, [pc, #232]	; (8002c98 <HAL_RCC_OscConfig+0x830>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1f0      	bne.n	8002b9a <HAL_RCC_OscConfig+0x732>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bb8:	4b37      	ldr	r3, [pc, #220]	; (8002c98 <HAL_RCC_OscConfig+0x830>)
 8002bba:	68da      	ldr	r2, [r3, #12]
 8002bbc:	4b37      	ldr	r3, [pc, #220]	; (8002c9c <HAL_RCC_OscConfig+0x834>)
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002bc8:	3a01      	subs	r2, #1
 8002bca:	0112      	lsls	r2, r2, #4
 8002bcc:	4311      	orrs	r1, r2
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bd2:	0212      	lsls	r2, r2, #8
 8002bd4:	4311      	orrs	r1, r2
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002bda:	0852      	lsrs	r2, r2, #1
 8002bdc:	3a01      	subs	r2, #1
 8002bde:	0552      	lsls	r2, r2, #21
 8002be0:	4311      	orrs	r1, r2
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002be6:	0852      	lsrs	r2, r2, #1
 8002be8:	3a01      	subs	r2, #1
 8002bea:	0652      	lsls	r2, r2, #25
 8002bec:	4311      	orrs	r1, r2
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002bf2:	06d2      	lsls	r2, r2, #27
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	4928      	ldr	r1, [pc, #160]	; (8002c98 <HAL_RCC_OscConfig+0x830>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bfc:	4b26      	ldr	r3, [pc, #152]	; (8002c98 <HAL_RCC_OscConfig+0x830>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a25      	ldr	r2, [pc, #148]	; (8002c98 <HAL_RCC_OscConfig+0x830>)
 8002c02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c06:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c08:	4b23      	ldr	r3, [pc, #140]	; (8002c98 <HAL_RCC_OscConfig+0x830>)
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	4a22      	ldr	r2, [pc, #136]	; (8002c98 <HAL_RCC_OscConfig+0x830>)
 8002c0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c12:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c14:	f7fe fff6 	bl	8001c04 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x7c6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c1c:	f7fe fff2 	bl	8001c04 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x7c6>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e078      	b.n	8002d20 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c2e:	4b1a      	ldr	r3, [pc, #104]	; (8002c98 <HAL_RCC_OscConfig+0x830>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0f0      	beq.n	8002c1c <HAL_RCC_OscConfig+0x7b4>
 8002c3a:	e070      	b.n	8002d1e <HAL_RCC_OscConfig+0x8b6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c3c:	4b16      	ldr	r3, [pc, #88]	; (8002c98 <HAL_RCC_OscConfig+0x830>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a15      	ldr	r2, [pc, #84]	; (8002c98 <HAL_RCC_OscConfig+0x830>)
 8002c42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c46:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002c48:	4b13      	ldr	r3, [pc, #76]	; (8002c98 <HAL_RCC_OscConfig+0x830>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d105      	bne.n	8002c60 <HAL_RCC_OscConfig+0x7f8>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002c54:	4b10      	ldr	r3, [pc, #64]	; (8002c98 <HAL_RCC_OscConfig+0x830>)
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	4a0f      	ldr	r2, [pc, #60]	; (8002c98 <HAL_RCC_OscConfig+0x830>)
 8002c5a:	f023 0303 	bic.w	r3, r3, #3
 8002c5e:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c60:	4b0d      	ldr	r3, [pc, #52]	; (8002c98 <HAL_RCC_OscConfig+0x830>)
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	4a0c      	ldr	r2, [pc, #48]	; (8002c98 <HAL_RCC_OscConfig+0x830>)
 8002c66:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002c6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c6e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c70:	f7fe ffc8 	bl	8001c04 <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x822>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c78:	f7fe ffc4 	bl	8001c04 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x822>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e04a      	b.n	8002d20 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c8a:	4b03      	ldr	r3, [pc, #12]	; (8002c98 <HAL_RCC_OscConfig+0x830>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1f0      	bne.n	8002c78 <HAL_RCC_OscConfig+0x810>
 8002c96:	e042      	b.n	8002d1e <HAL_RCC_OscConfig+0x8b6>
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	019f800c 	.word	0x019f800c
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d101      	bne.n	8002cac <HAL_RCC_OscConfig+0x844>
      {
        return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e039      	b.n	8002d20 <HAL_RCC_OscConfig+0x8b8>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8002cac:	4b1e      	ldr	r3, [pc, #120]	; (8002d28 <HAL_RCC_OscConfig+0x8c0>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	f003 0203 	and.w	r2, r3, #3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d12c      	bne.n	8002d1a <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d123      	bne.n	8002d1a <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cdc:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d11b      	bne.n	8002d1a <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cec:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d113      	bne.n	8002d1a <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfc:	085b      	lsrs	r3, r3, #1
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d109      	bne.n	8002d1a <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d10:	085b      	lsrs	r3, r3, #1
 8002d12:	3b01      	subs	r3, #1
 8002d14:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d001      	beq.n	8002d1e <HAL_RCC_OscConfig+0x8b6>
        {
          return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e000      	b.n	8002d20 <HAL_RCC_OscConfig+0x8b8>
        }
      }
    }
  }

  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3720      	adds	r7, #32
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	40021000 	.word	0x40021000

08002d2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002d36:	2300      	movs	r3, #0
 8002d38:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e104      	b.n	8002f4e <HAL_RCC_ClockConfig+0x222>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d44:	4b84      	ldr	r3, [pc, #528]	; (8002f58 <HAL_RCC_ClockConfig+0x22c>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 030f 	and.w	r3, r3, #15
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d910      	bls.n	8002d74 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d52:	4b81      	ldr	r3, [pc, #516]	; (8002f58 <HAL_RCC_ClockConfig+0x22c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f023 020f 	bic.w	r2, r3, #15
 8002d5a:	497f      	ldr	r1, [pc, #508]	; (8002f58 <HAL_RCC_ClockConfig+0x22c>)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d62:	4b7d      	ldr	r3, [pc, #500]	; (8002f58 <HAL_RCC_ClockConfig+0x22c>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d001      	beq.n	8002d74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e0ec      	b.n	8002f4e <HAL_RCC_ClockConfig+0x222>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 808b 	beq.w	8002e98 <HAL_RCC_ClockConfig+0x16c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	2b03      	cmp	r3, #3
 8002d88:	d134      	bne.n	8002df4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d8a:	4b74      	ldr	r3, [pc, #464]	; (8002f5c <HAL_RCC_ClockConfig+0x230>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e0d9      	b.n	8002f4e <HAL_RCC_ClockConfig+0x222>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002d9a:	f000 fa21 	bl	80031e0 <RCC_GetSysClockFreqFromPLLSource>
 8002d9e:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	4a6f      	ldr	r2, [pc, #444]	; (8002f60 <HAL_RCC_ClockConfig+0x234>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d956      	bls.n	8002e56 <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002da8:	4b6c      	ldr	r3, [pc, #432]	; (8002f5c <HAL_RCC_ClockConfig+0x230>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10a      	bne.n	8002dca <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002db4:	4b69      	ldr	r3, [pc, #420]	; (8002f5c <HAL_RCC_ClockConfig+0x230>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dbc:	4a67      	ldr	r2, [pc, #412]	; (8002f5c <HAL_RCC_ClockConfig+0x230>)
 8002dbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dc2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002dc4:	2380      	movs	r3, #128	; 0x80
 8002dc6:	617b      	str	r3, [r7, #20]
 8002dc8:	e045      	b.n	8002e56 <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d03f      	beq.n	8002e56 <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d13b      	bne.n	8002e56 <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002dde:	4b5f      	ldr	r3, [pc, #380]	; (8002f5c <HAL_RCC_ClockConfig+0x230>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002de6:	4a5d      	ldr	r2, [pc, #372]	; (8002f5c <HAL_RCC_ClockConfig+0x230>)
 8002de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002dee:	2380      	movs	r3, #128	; 0x80
 8002df0:	617b      	str	r3, [r7, #20]
 8002df2:	e030      	b.n	8002e56 <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d107      	bne.n	8002e0c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dfc:	4b57      	ldr	r3, [pc, #348]	; (8002f5c <HAL_RCC_ClockConfig+0x230>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d115      	bne.n	8002e34 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e0a0      	b.n	8002f4e <HAL_RCC_ClockConfig+0x222>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d107      	bne.n	8002e24 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e14:	4b51      	ldr	r3, [pc, #324]	; (8002f5c <HAL_RCC_ClockConfig+0x230>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d109      	bne.n	8002e34 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e094      	b.n	8002f4e <HAL_RCC_ClockConfig+0x222>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e24:	4b4d      	ldr	r3, [pc, #308]	; (8002f5c <HAL_RCC_ClockConfig+0x230>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e08c      	b.n	8002f4e <HAL_RCC_ClockConfig+0x222>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002e34:	f000 f89a 	bl	8002f6c <HAL_RCC_GetSysClockFreq>
 8002e38:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	4a48      	ldr	r2, [pc, #288]	; (8002f60 <HAL_RCC_ClockConfig+0x234>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d909      	bls.n	8002e56 <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e42:	4b46      	ldr	r3, [pc, #280]	; (8002f5c <HAL_RCC_ClockConfig+0x230>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e4a:	4a44      	ldr	r2, [pc, #272]	; (8002f5c <HAL_RCC_ClockConfig+0x230>)
 8002e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e50:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002e52:	2380      	movs	r3, #128	; 0x80
 8002e54:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e56:	4b41      	ldr	r3, [pc, #260]	; (8002f5c <HAL_RCC_ClockConfig+0x230>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f023 0203 	bic.w	r2, r3, #3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	493e      	ldr	r1, [pc, #248]	; (8002f5c <HAL_RCC_ClockConfig+0x230>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e68:	f7fe fecc 	bl	8001c04 <HAL_GetTick>
 8002e6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e6e:	e00a      	b.n	8002e86 <HAL_RCC_ClockConfig+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e70:	f7fe fec8 	bl	8001c04 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_ClockConfig+0x15a>
      {
        return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e063      	b.n	8002f4e <HAL_RCC_ClockConfig+0x222>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e86:	4b35      	ldr	r3, [pc, #212]	; (8002f5c <HAL_RCC_ClockConfig+0x230>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 020c 	and.w	r2, r3, #12
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d1eb      	bne.n	8002e70 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d009      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x18c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ea4:	4b2d      	ldr	r3, [pc, #180]	; (8002f5c <HAL_RCC_ClockConfig+0x230>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	492a      	ldr	r1, [pc, #168]	; (8002f5c <HAL_RCC_ClockConfig+0x230>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	608b      	str	r3, [r1, #8]
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_ClockConfig+0x19e>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	2b80      	cmp	r3, #128	; 0x80
 8002ebc:	d105      	bne.n	8002eca <HAL_RCC_ClockConfig+0x19e>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002ebe:	4b27      	ldr	r3, [pc, #156]	; (8002f5c <HAL_RCC_ClockConfig+0x230>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	4a26      	ldr	r2, [pc, #152]	; (8002f5c <HAL_RCC_ClockConfig+0x230>)
 8002ec4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ec8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002eca:	4b23      	ldr	r3, [pc, #140]	; (8002f58 <HAL_RCC_ClockConfig+0x22c>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 030f 	and.w	r3, r3, #15
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d210      	bcs.n	8002efa <HAL_RCC_ClockConfig+0x1ce>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed8:	4b1f      	ldr	r3, [pc, #124]	; (8002f58 <HAL_RCC_ClockConfig+0x22c>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f023 020f 	bic.w	r2, r3, #15
 8002ee0:	491d      	ldr	r1, [pc, #116]	; (8002f58 <HAL_RCC_ClockConfig+0x22c>)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee8:	4b1b      	ldr	r3, [pc, #108]	; (8002f58 <HAL_RCC_ClockConfig+0x22c>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 030f 	and.w	r3, r3, #15
 8002ef0:	683a      	ldr	r2, [r7, #0]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d001      	beq.n	8002efa <HAL_RCC_ClockConfig+0x1ce>
    {
      return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e029      	b.n	8002f4e <HAL_RCC_ClockConfig+0x222>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0304 	and.w	r3, r3, #4
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d008      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x1ec>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f06:	4b15      	ldr	r3, [pc, #84]	; (8002f5c <HAL_RCC_ClockConfig+0x230>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	4912      	ldr	r1, [pc, #72]	; (8002f5c <HAL_RCC_ClockConfig+0x230>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0308 	and.w	r3, r3, #8
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d009      	beq.n	8002f38 <HAL_RCC_ClockConfig+0x20c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f24:	4b0d      	ldr	r3, [pc, #52]	; (8002f5c <HAL_RCC_ClockConfig+0x230>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	490a      	ldr	r1, [pc, #40]	; (8002f5c <HAL_RCC_ClockConfig+0x230>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002f38:	f000 f8b2 	bl	80030a0 <HAL_RCC_GetHCLKFreq>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	4b09      	ldr	r3, [pc, #36]	; (8002f64 <HAL_RCC_ClockConfig+0x238>)
 8002f40:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002f42:	4b09      	ldr	r3, [pc, #36]	; (8002f68 <HAL_RCC_ClockConfig+0x23c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fe fe0c 	bl	8001b64 <HAL_InitTick>
 8002f4c:	4603      	mov	r3, r0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3718      	adds	r7, #24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40022000 	.word	0x40022000
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	04c4b400 	.word	0x04c4b400
 8002f64:	20000028 	.word	0x20000028
 8002f68:	2000002c 	.word	0x2000002c

08002f6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b089      	sub	sp, #36	; 0x24
 8002f70:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f72:	2300      	movs	r3, #0
 8002f74:	61fb      	str	r3, [r7, #28]
 8002f76:	2300      	movs	r3, #0
 8002f78:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f7a:	4b46      	ldr	r3, [pc, #280]	; (8003094 <HAL_RCC_GetSysClockFreq+0x128>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 030c 	and.w	r3, r3, #12
 8002f82:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f84:	4b43      	ldr	r3, [pc, #268]	; (8003094 <HAL_RCC_GetSysClockFreq+0x128>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	f003 0303 	and.w	r3, r3, #3
 8002f8c:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d005      	beq.n	8002fa0 <HAL_RCC_GetSysClockFreq+0x34>
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	2b0c      	cmp	r3, #12
 8002f98:	d121      	bne.n	8002fde <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d11e      	bne.n	8002fde <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002fa0:	4b3c      	ldr	r3, [pc, #240]	; (8003094 <HAL_RCC_GetSysClockFreq+0x128>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0308 	and.w	r3, r3, #8
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d107      	bne.n	8002fbc <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002fac:	4b39      	ldr	r3, [pc, #228]	; (8003094 <HAL_RCC_GetSysClockFreq+0x128>)
 8002fae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fb2:	0a1b      	lsrs	r3, r3, #8
 8002fb4:	f003 030f 	and.w	r3, r3, #15
 8002fb8:	61fb      	str	r3, [r7, #28]
 8002fba:	e005      	b.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002fbc:	4b35      	ldr	r3, [pc, #212]	; (8003094 <HAL_RCC_GetSysClockFreq+0x128>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	091b      	lsrs	r3, r3, #4
 8002fc2:	f003 030f 	and.w	r3, r3, #15
 8002fc6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8002fc8:	4a33      	ldr	r2, [pc, #204]	; (8003098 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fd0:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d10d      	bne.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002fdc:	e00a      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	2b04      	cmp	r3, #4
 8002fe2:	d102      	bne.n	8002fea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002fe4:	4b2d      	ldr	r3, [pc, #180]	; (800309c <HAL_RCC_GetSysClockFreq+0x130>)
 8002fe6:	61bb      	str	r3, [r7, #24]
 8002fe8:	e004      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	2b08      	cmp	r3, #8
 8002fee:	d101      	bne.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ff0:	4b2a      	ldr	r3, [pc, #168]	; (800309c <HAL_RCC_GetSysClockFreq+0x130>)
 8002ff2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	2b0c      	cmp	r3, #12
 8002ff8:	d145      	bne.n	8003086 <HAL_RCC_GetSysClockFreq+0x11a>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002ffa:	4b26      	ldr	r3, [pc, #152]	; (8003094 <HAL_RCC_GetSysClockFreq+0x128>)
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	f003 0303 	and.w	r3, r3, #3
 8003002:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003004:	4b23      	ldr	r3, [pc, #140]	; (8003094 <HAL_RCC_GetSysClockFreq+0x128>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	091b      	lsrs	r3, r3, #4
 800300a:	f003 030f 	and.w	r3, r3, #15
 800300e:	3301      	adds	r3, #1
 8003010:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	2b02      	cmp	r3, #2
 8003016:	d002      	beq.n	800301e <HAL_RCC_GetSysClockFreq+0xb2>
 8003018:	2b03      	cmp	r3, #3
 800301a:	d00d      	beq.n	8003038 <HAL_RCC_GetSysClockFreq+0xcc>
 800301c:	e019      	b.n	8003052 <HAL_RCC_GetSysClockFreq+0xe6>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800301e:	4a1f      	ldr	r2, [pc, #124]	; (800309c <HAL_RCC_GetSysClockFreq+0x130>)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	fbb2 f3f3 	udiv	r3, r2, r3
 8003026:	4a1b      	ldr	r2, [pc, #108]	; (8003094 <HAL_RCC_GetSysClockFreq+0x128>)
 8003028:	68d2      	ldr	r2, [r2, #12]
 800302a:	0a12      	lsrs	r2, r2, #8
 800302c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003030:	fb02 f303 	mul.w	r3, r2, r3
 8003034:	617b      	str	r3, [r7, #20]
        break;
 8003036:	e019      	b.n	800306c <HAL_RCC_GetSysClockFreq+0x100>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003038:	4a18      	ldr	r2, [pc, #96]	; (800309c <HAL_RCC_GetSysClockFreq+0x130>)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003040:	4a14      	ldr	r2, [pc, #80]	; (8003094 <HAL_RCC_GetSysClockFreq+0x128>)
 8003042:	68d2      	ldr	r2, [r2, #12]
 8003044:	0a12      	lsrs	r2, r2, #8
 8003046:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800304a:	fb02 f303 	mul.w	r3, r2, r3
 800304e:	617b      	str	r3, [r7, #20]
        break;
 8003050:	e00c      	b.n	800306c <HAL_RCC_GetSysClockFreq+0x100>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003052:	69fa      	ldr	r2, [r7, #28]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	fbb2 f3f3 	udiv	r3, r2, r3
 800305a:	4a0e      	ldr	r2, [pc, #56]	; (8003094 <HAL_RCC_GetSysClockFreq+0x128>)
 800305c:	68d2      	ldr	r2, [r2, #12]
 800305e:	0a12      	lsrs	r2, r2, #8
 8003060:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003064:	fb02 f303 	mul.w	r3, r2, r3
 8003068:	617b      	str	r3, [r7, #20]
        break;
 800306a:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800306c:	4b09      	ldr	r3, [pc, #36]	; (8003094 <HAL_RCC_GetSysClockFreq+0x128>)
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	0e5b      	lsrs	r3, r3, #25
 8003072:	f003 0303 	and.w	r3, r3, #3
 8003076:	3301      	adds	r3, #1
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	fbb2 f3f3 	udiv	r3, r2, r3
 8003084:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003086:	69bb      	ldr	r3, [r7, #24]
}
 8003088:	4618      	mov	r0, r3
 800308a:	3724      	adds	r7, #36	; 0x24
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	40021000 	.word	0x40021000
 8003098:	0800d5a8 	.word	0x0800d5a8
 800309c:	00f42400 	.word	0x00f42400

080030a0 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 80030a4:	f7ff ff62 	bl	8002f6c <HAL_RCC_GetSysClockFreq>
 80030a8:	4601      	mov	r1, r0
 80030aa:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <HAL_RCC_GetHCLKFreq+0x20>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	091b      	lsrs	r3, r3, #4
 80030b0:	f003 030f 	and.w	r3, r3, #15
 80030b4:	4a03      	ldr	r2, [pc, #12]	; (80030c4 <HAL_RCC_GetHCLKFreq+0x24>)
 80030b6:	5cd3      	ldrb	r3, [r2, r3]
 80030b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80030bc:	4618      	mov	r0, r3
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40021000 	.word	0x40021000
 80030c4:	0800d590 	.word	0x0800d590

080030c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030cc:	f7ff ffe8 	bl	80030a0 <HAL_RCC_GetHCLKFreq>
 80030d0:	4601      	mov	r1, r0
 80030d2:	4b05      	ldr	r3, [pc, #20]	; (80030e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	0a1b      	lsrs	r3, r3, #8
 80030d8:	f003 0307 	and.w	r3, r3, #7
 80030dc:	4a03      	ldr	r2, [pc, #12]	; (80030ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80030de:	5cd3      	ldrb	r3, [r2, r3]
 80030e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	40021000 	.word	0x40021000
 80030ec:	0800d5a0 	.word	0x0800d5a0

080030f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030f4:	f7ff ffd4 	bl	80030a0 <HAL_RCC_GetHCLKFreq>
 80030f8:	4601      	mov	r1, r0
 80030fa:	4b05      	ldr	r3, [pc, #20]	; (8003110 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	0adb      	lsrs	r3, r3, #11
 8003100:	f003 0307 	and.w	r3, r3, #7
 8003104:	4a03      	ldr	r2, [pc, #12]	; (8003114 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003106:	5cd3      	ldrb	r3, [r2, r3]
 8003108:	fa21 f303 	lsr.w	r3, r1, r3
}
 800310c:	4618      	mov	r0, r3
 800310e:	bd80      	pop	{r7, pc}
 8003110:	40021000 	.word	0x40021000
 8003114:	0800d5a0 	.word	0x0800d5a0

08003118 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003120:	2300      	movs	r3, #0
 8003122:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003124:	4b2c      	ldr	r3, [pc, #176]	; (80031d8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d003      	beq.n	8003138 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003130:	f7ff f8fc 	bl	800232c <HAL_PWREx_GetVoltageRange>
 8003134:	6138      	str	r0, [r7, #16]
 8003136:	e014      	b.n	8003162 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003138:	4b27      	ldr	r3, [pc, #156]	; (80031d8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800313a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800313c:	4a26      	ldr	r2, [pc, #152]	; (80031d8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800313e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003142:	6593      	str	r3, [r2, #88]	; 0x58
 8003144:	4b24      	ldr	r3, [pc, #144]	; (80031d8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800314c:	60fb      	str	r3, [r7, #12]
 800314e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003150:	f7ff f8ec 	bl	800232c <HAL_PWREx_GetVoltageRange>
 8003154:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003156:	4b20      	ldr	r3, [pc, #128]	; (80031d8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800315a:	4a1f      	ldr	r2, [pc, #124]	; (80031d8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800315c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003160:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d003      	beq.n	8003170 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800316e:	d10b      	bne.n	8003188 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b80      	cmp	r3, #128	; 0x80
 8003174:	d919      	bls.n	80031aa <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2ba0      	cmp	r3, #160	; 0xa0
 800317a:	d902      	bls.n	8003182 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800317c:	2302      	movs	r3, #2
 800317e:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8003180:	e013      	b.n	80031aa <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003182:	2301      	movs	r3, #1
 8003184:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8003186:	e010      	b.n	80031aa <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2b80      	cmp	r3, #128	; 0x80
 800318c:	d902      	bls.n	8003194 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800318e:	2303      	movs	r3, #3
 8003190:	617b      	str	r3, [r7, #20]
 8003192:	e00a      	b.n	80031aa <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b80      	cmp	r3, #128	; 0x80
 8003198:	d102      	bne.n	80031a0 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800319a:	2302      	movs	r3, #2
 800319c:	617b      	str	r3, [r7, #20]
 800319e:	e004      	b.n	80031aa <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b70      	cmp	r3, #112	; 0x70
 80031a4:	d101      	bne.n	80031aa <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031a6:	2301      	movs	r3, #1
 80031a8:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80031aa:	4b0c      	ldr	r3, [pc, #48]	; (80031dc <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f023 020f 	bic.w	r2, r3, #15
 80031b2:	490a      	ldr	r1, [pc, #40]	; (80031dc <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80031ba:	4b08      	ldr	r3, [pc, #32]	; (80031dc <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 030f 	and.w	r3, r3, #15
 80031c2:	697a      	ldr	r2, [r7, #20]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d001      	beq.n	80031cc <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e000      	b.n	80031ce <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3718      	adds	r7, #24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	40021000 	.word	0x40021000
 80031dc:	40022000 	.word	0x40022000

080031e0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b087      	sub	sp, #28
 80031e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80031e6:	2300      	movs	r3, #0
 80031e8:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80031ea:	4b36      	ldr	r3, [pc, #216]	; (80032c4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	f003 0303 	and.w	r3, r3, #3
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d118      	bne.n	8003228 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80031f6:	4b33      	ldr	r3, [pc, #204]	; (80032c4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d107      	bne.n	8003212 <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003202:	4b30      	ldr	r3, [pc, #192]	; (80032c4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003204:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003208:	0a1b      	lsrs	r3, r3, #8
 800320a:	f003 030f 	and.w	r3, r3, #15
 800320e:	617b      	str	r3, [r7, #20]
 8003210:	e005      	b.n	800321e <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003212:	4b2c      	ldr	r3, [pc, #176]	; (80032c4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	091b      	lsrs	r3, r3, #4
 8003218:	f003 030f 	and.w	r3, r3, #15
 800321c:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 800321e:	4a2a      	ldr	r2, [pc, #168]	; (80032c8 <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003226:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003228:	4b26      	ldr	r3, [pc, #152]	; (80032c4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	f003 0303 	and.w	r3, r3, #3
 8003230:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003232:	4b24      	ldr	r3, [pc, #144]	; (80032c4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	091b      	lsrs	r3, r3, #4
 8003238:	f003 030f 	and.w	r3, r3, #15
 800323c:	3301      	adds	r3, #1
 800323e:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2b02      	cmp	r3, #2
 8003244:	d002      	beq.n	800324c <RCC_GetSysClockFreqFromPLLSource+0x6c>
 8003246:	2b03      	cmp	r3, #3
 8003248:	d00d      	beq.n	8003266 <RCC_GetSysClockFreqFromPLLSource+0x86>
 800324a:	e019      	b.n	8003280 <RCC_GetSysClockFreqFromPLLSource+0xa0>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800324c:	4a1f      	ldr	r2, [pc, #124]	; (80032cc <RCC_GetSysClockFreqFromPLLSource+0xec>)
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	fbb2 f3f3 	udiv	r3, r2, r3
 8003254:	4a1b      	ldr	r2, [pc, #108]	; (80032c4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003256:	68d2      	ldr	r2, [r2, #12]
 8003258:	0a12      	lsrs	r2, r2, #8
 800325a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800325e:	fb02 f303 	mul.w	r3, r2, r3
 8003262:	613b      	str	r3, [r7, #16]
      break;
 8003264:	e019      	b.n	800329a <RCC_GetSysClockFreqFromPLLSource+0xba>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003266:	4a19      	ldr	r2, [pc, #100]	; (80032cc <RCC_GetSysClockFreqFromPLLSource+0xec>)
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	fbb2 f3f3 	udiv	r3, r2, r3
 800326e:	4a15      	ldr	r2, [pc, #84]	; (80032c4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003270:	68d2      	ldr	r2, [r2, #12]
 8003272:	0a12      	lsrs	r2, r2, #8
 8003274:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003278:	fb02 f303 	mul.w	r3, r2, r3
 800327c:	613b      	str	r3, [r7, #16]
      break;
 800327e:	e00c      	b.n	800329a <RCC_GetSysClockFreqFromPLLSource+0xba>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	fbb2 f3f3 	udiv	r3, r2, r3
 8003288:	4a0e      	ldr	r2, [pc, #56]	; (80032c4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 800328a:	68d2      	ldr	r2, [r2, #12]
 800328c:	0a12      	lsrs	r2, r2, #8
 800328e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003292:	fb02 f303 	mul.w	r3, r2, r3
 8003296:	613b      	str	r3, [r7, #16]
      break;
 8003298:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800329a:	4b0a      	ldr	r3, [pc, #40]	; (80032c4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	0e5b      	lsrs	r3, r3, #25
 80032a0:	f003 0303 	and.w	r3, r3, #3
 80032a4:	3301      	adds	r3, #1
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b2:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80032b4:	683b      	ldr	r3, [r7, #0]
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	371c      	adds	r7, #28
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	40021000 	.word	0x40021000
 80032c8:	0800d5a8 	.word	0x0800d5a8
 80032cc:	00f42400 	.word	0x00f42400

080032d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b088      	sub	sp, #32
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032d8:	2300      	movs	r3, #0
 80032da:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032dc:	2300      	movs	r3, #0
 80032de:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d03d      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032f0:	2b40      	cmp	r3, #64	; 0x40
 80032f2:	d00b      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80032f4:	2b40      	cmp	r3, #64	; 0x40
 80032f6:	d804      	bhi.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00e      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x4a>
 80032fc:	2b20      	cmp	r3, #32
 80032fe:	d015      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003300:	e01d      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003302:	2b60      	cmp	r3, #96	; 0x60
 8003304:	d01e      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003306:	2b80      	cmp	r3, #128	; 0x80
 8003308:	d01c      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800330a:	e018      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800330c:	4b84      	ldr	r3, [pc, #528]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	4a83      	ldr	r2, [pc, #524]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003312:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003316:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003318:	e015      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x76>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	3304      	adds	r3, #4
 800331e:	2100      	movs	r1, #0
 8003320:	4618      	mov	r0, r3
 8003322:	f000 fb3f 	bl	80039a4 <RCCEx_PLLSAI1_Config>
 8003326:	4603      	mov	r3, r0
 8003328:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800332a:	e00c      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x76>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	3320      	adds	r3, #32
 8003330:	2100      	movs	r1, #0
 8003332:	4618      	mov	r0, r3
 8003334:	f000 fc08 	bl	8003b48 <RCCEx_PLLSAI2_Config>
 8003338:	4603      	mov	r3, r0
 800333a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800333c:	e003      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x76>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	77fb      	strb	r3, [r7, #31]
        break;
 8003342:	e000      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x76>
        break;
 8003344:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003346:	7ffb      	ldrb	r3, [r7, #31]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d10b      	bne.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800334c:	4b74      	ldr	r3, [pc, #464]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800334e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003352:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800335a:	4971      	ldr	r1, [pc, #452]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800335c:	4313      	orrs	r3, r2
 800335e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003362:	e001      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003364:	7ffb      	ldrb	r3, [r7, #31]
 8003366:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d042      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800337c:	d00f      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0xce>
 800337e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003382:	d805      	bhi.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8003384:	2b00      	cmp	r3, #0
 8003386:	d011      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8003388:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800338c:	d017      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0xee>
 800338e:	e01f      	b.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8003390:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003394:	d01f      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003396:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800339a:	d01c      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800339c:	e018      	b.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800339e:	4b60      	ldr	r3, [pc, #384]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	4a5f      	ldr	r2, [pc, #380]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80033a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a8:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80033aa:	e015      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x108>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	3304      	adds	r3, #4
 80033b0:	2100      	movs	r1, #0
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 faf6 	bl	80039a4 <RCCEx_PLLSAI1_Config>
 80033b8:	4603      	mov	r3, r0
 80033ba:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80033bc:	e00c      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x108>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	3320      	adds	r3, #32
 80033c2:	2100      	movs	r1, #0
 80033c4:	4618      	mov	r0, r3
 80033c6:	f000 fbbf 	bl	8003b48 <RCCEx_PLLSAI2_Config>
 80033ca:	4603      	mov	r3, r0
 80033cc:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80033ce:	e003      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x108>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	77fb      	strb	r3, [r7, #31]
        break;
 80033d4:	e000      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        break;
 80033d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033d8:	7ffb      	ldrb	r3, [r7, #31]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10b      	bne.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033de:	4b50      	ldr	r3, [pc, #320]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80033e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ec:	494c      	ldr	r1, [pc, #304]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80033f4:	e001      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033f6:	7ffb      	ldrb	r3, [r7, #31]
 80033f8:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003402:	2b00      	cmp	r3, #0
 8003404:	f000 809b 	beq.w	800353e <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003408:	2300      	movs	r3, #0
 800340a:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800340c:	4b44      	ldr	r3, [pc, #272]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800340e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d10d      	bne.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003418:	4b41      	ldr	r3, [pc, #260]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800341a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800341c:	4a40      	ldr	r2, [pc, #256]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800341e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003422:	6593      	str	r3, [r2, #88]	; 0x58
 8003424:	4b3e      	ldr	r3, [pc, #248]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800342c:	60fb      	str	r3, [r7, #12]
 800342e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003430:	2301      	movs	r3, #1
 8003432:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003434:	4b3b      	ldr	r3, [pc, #236]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a3a      	ldr	r2, [pc, #232]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800343a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800343e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003440:	f7fe fbe0 	bl	8001c04 <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003446:	e009      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003448:	f7fe fbdc 	bl	8001c04 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d902      	bls.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      {
        ret = HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	77fb      	strb	r3, [r7, #31]
        break;
 800345a:	e005      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x198>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800345c:	4b31      	ldr	r3, [pc, #196]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003464:	2b00      	cmp	r3, #0
 8003466:	d0ef      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x178>
      }
    }

    if (ret == HAL_OK)
 8003468:	7ffb      	ldrb	r3, [r7, #31]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d15c      	bne.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800346e:	4b2c      	ldr	r3, [pc, #176]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003474:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003478:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d01f      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	429a      	cmp	r2, r3
 800348a:	d019      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800348c:	4b24      	ldr	r3, [pc, #144]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800348e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003496:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003498:	4b21      	ldr	r3, [pc, #132]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800349a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800349e:	4a20      	ldr	r2, [pc, #128]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80034a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034a8:	4b1d      	ldr	r3, [pc, #116]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80034aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ae:	4a1c      	ldr	r2, [pc, #112]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80034b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034b8:	4a19      	ldr	r2, [pc, #100]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d016      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x228>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ca:	f7fe fb9b 	bl	8001c04 <HAL_GetTick>
 80034ce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034d0:	e00b      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x21a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034d2:	f7fe fb97 	bl	8001c04 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d902      	bls.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x21a>
          {
            ret = HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	77fb      	strb	r3, [r7, #31]
            break;
 80034e8:	e006      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x228>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034ea:	4b0d      	ldr	r3, [pc, #52]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80034ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0ec      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x202>
          }
        }
      }

      if (ret == HAL_OK)
 80034f8:	7ffb      	ldrb	r3, [r7, #31]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10c      	bne.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x248>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034fe:	4b08      	ldr	r3, [pc, #32]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003504:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800350e:	4904      	ldr	r1, [pc, #16]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003510:	4313      	orrs	r3, r2
 8003512:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003516:	e009      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x25c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003518:	7ffb      	ldrb	r3, [r7, #31]
 800351a:	77bb      	strb	r3, [r7, #30]
 800351c:	e006      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x25c>
 800351e:	bf00      	nop
 8003520:	40021000 	.word	0x40021000
 8003524:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003528:	7ffb      	ldrb	r3, [r7, #31]
 800352a:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800352c:	7dfb      	ldrb	r3, [r7, #23]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d105      	bne.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003532:	4bae      	ldr	r3, [pc, #696]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003536:	4aad      	ldr	r2, [pc, #692]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003538:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800353c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00a      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800354a:	4ba8      	ldr	r3, [pc, #672]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 800354c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003550:	f023 0203 	bic.w	r2, r3, #3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003558:	49a4      	ldr	r1, [pc, #656]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 800355a:	4313      	orrs	r3, r2
 800355c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00a      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800356c:	4b9f      	ldr	r3, [pc, #636]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 800356e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003572:	f023 020c 	bic.w	r2, r3, #12
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357a:	499c      	ldr	r1, [pc, #624]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 800357c:	4313      	orrs	r3, r2
 800357e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0304 	and.w	r3, r3, #4
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00a      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800358e:	4b97      	ldr	r3, [pc, #604]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003594:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800359c:	4993      	ldr	r1, [pc, #588]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0308 	and.w	r3, r3, #8
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00a      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035b0:	4b8e      	ldr	r3, [pc, #568]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80035b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035be:	498b      	ldr	r1, [pc, #556]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0310 	and.w	r3, r3, #16
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00a      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x318>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035d2:	4b86      	ldr	r3, [pc, #536]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80035d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e0:	4982      	ldr	r1, [pc, #520]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0320 	and.w	r3, r3, #32
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00a      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x33a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035f4:	4b7d      	ldr	r3, [pc, #500]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80035f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003602:	497a      	ldr	r1, [pc, #488]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003604:	4313      	orrs	r3, r2
 8003606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00a      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x35c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003616:	4b75      	ldr	r3, [pc, #468]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800361c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003624:	4971      	ldr	r1, [pc, #452]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003626:	4313      	orrs	r3, r2
 8003628:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00a      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x37e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003638:	4b6c      	ldr	r3, [pc, #432]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 800363a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800363e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003646:	4969      	ldr	r1, [pc, #420]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003648:	4313      	orrs	r3, r2
 800364a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00a      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800365a:	4b64      	ldr	r3, [pc, #400]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 800365c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003660:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003668:	4960      	ldr	r1, [pc, #384]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 800366a:	4313      	orrs	r3, r2
 800366c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d02f      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x40c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003680:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003684:	d005      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8003686:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800368a:	d009      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800368c:	2b00      	cmp	r3, #0
 800368e:	d013      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003690:	e00f      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003692:	4b56      	ldr	r3, [pc, #344]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	4a55      	ldr	r2, [pc, #340]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003698:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800369c:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800369e:	e00c      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x3ea>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	3304      	adds	r3, #4
 80036a4:	2100      	movs	r1, #0
 80036a6:	4618      	mov	r0, r3
 80036a8:	f000 f97c 	bl	80039a4 <RCCEx_PLLSAI1_Config>
 80036ac:	4603      	mov	r3, r0
 80036ae:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80036b0:	e003      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x3ea>

      default:
        ret = HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	77fb      	strb	r3, [r7, #31]
        break;
 80036b6:	e000      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x3ea>
        break;
 80036b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036ba:	7ffb      	ldrb	r3, [r7, #31]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10b      	bne.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80036c0:	4b4a      	ldr	r3, [pc, #296]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80036c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036ce:	4947      	ldr	r1, [pc, #284]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80036d6:	e001      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x40c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d8:	7ffb      	ldrb	r3, [r7, #31]
 80036da:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00a      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x42e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036e8:	4b40      	ldr	r3, [pc, #256]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80036ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036f6:	493d      	ldr	r1, [pc, #244]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00a      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x450>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800370a:	4b38      	ldr	r3, [pc, #224]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 800370c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003710:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003718:	4934      	ldr	r1, [pc, #208]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 800371a:	4313      	orrs	r3, r2
 800371c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00a      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800372c:	4b2f      	ldr	r3, [pc, #188]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 800372e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003732:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800373a:	492c      	ldr	r1, [pc, #176]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 800373c:	4313      	orrs	r3, r2
 800373e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00a      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800374e:	4b27      	ldr	r3, [pc, #156]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003750:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003754:	f023 0203 	bic.w	r2, r3, #3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800375c:	4923      	ldr	r1, [pc, #140]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 800375e:	4313      	orrs	r3, r2
 8003760:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d028      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003770:	4b1e      	ldr	r3, [pc, #120]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003776:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800377e:	491b      	ldr	r1, [pc, #108]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003780:	4313      	orrs	r3, r2
 8003782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800378a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800378e:	d106      	bne.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003790:	4b16      	ldr	r3, [pc, #88]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	4a15      	ldr	r2, [pc, #84]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003796:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800379a:	60d3      	str	r3, [r2, #12]
 800379c:	e011      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037a6:	d10c      	bne.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3304      	adds	r3, #4
 80037ac:	2101      	movs	r1, #1
 80037ae:	4618      	mov	r0, r3
 80037b0:	f000 f8f8 	bl	80039a4 <RCCEx_PLLSAI1_Config>
 80037b4:	4603      	mov	r3, r0
 80037b6:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 80037b8:	7ffb      	ldrb	r3, [r7, #31]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
        {
          /* set overall return value */
          status = ret;
 80037be:	7ffb      	ldrb	r3, [r7, #31]
 80037c0:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d04d      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037d6:	d10b      	bne.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80037d8:	4b04      	ldr	r3, [pc, #16]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80037da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037de:	4a03      	ldr	r2, [pc, #12]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80037e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037e4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80037e8:	e015      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x546>
 80037ea:	bf00      	nop
 80037ec:	40021000 	.word	0x40021000
 80037f0:	4b6b      	ldr	r3, [pc, #428]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 80037f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037fe:	4968      	ldr	r1, [pc, #416]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8003800:	4313      	orrs	r3, r2
 8003802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003806:	4b66      	ldr	r3, [pc, #408]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8003808:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800380c:	4a64      	ldr	r2, [pc, #400]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 800380e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003812:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800381a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800381e:	d10d      	bne.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	3304      	adds	r3, #4
 8003824:	2101      	movs	r1, #1
 8003826:	4618      	mov	r0, r3
 8003828:	f000 f8bc 	bl	80039a4 <RCCEx_PLLSAI1_Config>
 800382c:	4603      	mov	r3, r0
 800382e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003830:	7ffb      	ldrb	r3, [r7, #31]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d019      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x59a>
      {
        /* set overall return value */
        status = ret;
 8003836:	7ffb      	ldrb	r3, [r7, #31]
 8003838:	77bb      	strb	r3, [r7, #30]
 800383a:	e016      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x59a>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003840:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003844:	d106      	bne.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x584>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003846:	4b56      	ldr	r3, [pc, #344]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	4a55      	ldr	r2, [pc, #340]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 800384c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003850:	60d3      	str	r3, [r2, #12]
 8003852:	e00a      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x59a>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003858:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800385c:	d105      	bne.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x59a>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800385e:	4b50      	ldr	r3, [pc, #320]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	4a4f      	ldr	r2, [pc, #316]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8003864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003868:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d028      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003876:	4b4a      	ldr	r3, [pc, #296]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8003878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800387c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003884:	4946      	ldr	r1, [pc, #280]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8003886:	4313      	orrs	r3, r2
 8003888:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003890:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003894:	d106      	bne.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003896:	4b42      	ldr	r3, [pc, #264]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	4a41      	ldr	r2, [pc, #260]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 800389c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038a0:	60d3      	str	r3, [r2, #12]
 80038a2:	e011      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038ac:	d10c      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	3304      	adds	r3, #4
 80038b2:	2101      	movs	r1, #1
 80038b4:	4618      	mov	r0, r3
 80038b6:	f000 f875 	bl	80039a4 <RCCEx_PLLSAI1_Config>
 80038ba:	4603      	mov	r3, r0
 80038bc:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80038be:	7ffb      	ldrb	r3, [r7, #31]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        /* set overall return value */
        status = ret;
 80038c4:	7ffb      	ldrb	r3, [r7, #31]
 80038c6:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d01e      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x642>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038d4:	4b32      	ldr	r3, [pc, #200]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 80038d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038e4:	492e      	ldr	r1, [pc, #184]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038f6:	d10c      	bne.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x642>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3304      	adds	r3, #4
 80038fc:	2102      	movs	r1, #2
 80038fe:	4618      	mov	r0, r3
 8003900:	f000 f850 	bl	80039a4 <RCCEx_PLLSAI1_Config>
 8003904:	4603      	mov	r3, r0
 8003906:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003908:	7ffb      	ldrb	r3, [r7, #31]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* set overall return value */
        status = ret;
 800390e:	7ffb      	ldrb	r3, [r7, #31]
 8003910:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00b      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x666>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800391e:	4b20      	ldr	r3, [pc, #128]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8003920:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003924:	f023 0204 	bic.w	r2, r3, #4
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800392e:	491c      	ldr	r1, [pc, #112]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8003930:	4313      	orrs	r3, r2
 8003932:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00b      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x68a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003942:	4b17      	ldr	r3, [pc, #92]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8003944:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003948:	f023 0218 	bic.w	r2, r3, #24
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003952:	4913      	ldr	r1, [pc, #76]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8003954:	4313      	orrs	r3, r2
 8003956:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d017      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003966:	4b0e      	ldr	r3, [pc, #56]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8003968:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800396c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003976:	490a      	ldr	r1, [pc, #40]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8003978:	4313      	orrs	r3, r2
 800397a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
    
    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003984:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003988:	d105      	bne.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800398a:	4b05      	ldr	r3, [pc, #20]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	4a04      	ldr	r2, [pc, #16]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8003990:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003994:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003996:	7fbb      	ldrb	r3, [r7, #30]
}
 8003998:	4618      	mov	r0, r3
 800399a:	3720      	adds	r7, #32
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	40021000 	.word	0x40021000

080039a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039ae:	2300      	movs	r3, #0
 80039b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d00c      	beq.n	80039d4 <RCCEx_PLLSAI1_Config+0x30>
 80039ba:	2b03      	cmp	r3, #3
 80039bc:	d013      	beq.n	80039e6 <RCCEx_PLLSAI1_Config+0x42>
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d11a      	bne.n	80039f8 <RCCEx_PLLSAI1_Config+0x54>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039c2:	4b5d      	ldr	r3, [pc, #372]	; (8003b38 <RCCEx_PLLSAI1_Config+0x194>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d117      	bne.n	80039fe <RCCEx_PLLSAI1_Config+0x5a>
      {
        status = HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039d2:	e014      	b.n	80039fe <RCCEx_PLLSAI1_Config+0x5a>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039d4:	4b58      	ldr	r3, [pc, #352]	; (8003b38 <RCCEx_PLLSAI1_Config+0x194>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d110      	bne.n	8003a02 <RCCEx_PLLSAI1_Config+0x5e>
      {
        status = HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039e4:	e00d      	b.n	8003a02 <RCCEx_PLLSAI1_Config+0x5e>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80039e6:	4b54      	ldr	r3, [pc, #336]	; (8003b38 <RCCEx_PLLSAI1_Config+0x194>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d109      	bne.n	8003a06 <RCCEx_PLLSAI1_Config+0x62>
      {
        status = HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039f6:	e006      	b.n	8003a06 <RCCEx_PLLSAI1_Config+0x62>
    default:
      status = HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	73fb      	strb	r3, [r7, #15]
      break;
 80039fc:	e004      	b.n	8003a08 <RCCEx_PLLSAI1_Config+0x64>
      break;
 80039fe:	bf00      	nop
 8003a00:	e002      	b.n	8003a08 <RCCEx_PLLSAI1_Config+0x64>
      break;
 8003a02:	bf00      	nop
 8003a04:	e000      	b.n	8003a08 <RCCEx_PLLSAI1_Config+0x64>
      break;
 8003a06:	bf00      	nop
  }

  if (status == HAL_OK)
 8003a08:	7bfb      	ldrb	r3, [r7, #15]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f040 808f 	bne.w	8003b2e <RCCEx_PLLSAI1_Config+0x18a>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a10:	4b49      	ldr	r3, [pc, #292]	; (8003b38 <RCCEx_PLLSAI1_Config+0x194>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a48      	ldr	r2, [pc, #288]	; (8003b38 <RCCEx_PLLSAI1_Config+0x194>)
 8003a16:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a1c:	f7fe f8f2 	bl	8001c04 <HAL_GetTick>
 8003a20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a22:	e009      	b.n	8003a38 <RCCEx_PLLSAI1_Config+0x94>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a24:	f7fe f8ee 	bl	8001c04 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d902      	bls.n	8003a38 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	73fb      	strb	r3, [r7, #15]
        break;
 8003a36:	e005      	b.n	8003a44 <RCCEx_PLLSAI1_Config+0xa0>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a38:	4b3f      	ldr	r3, [pc, #252]	; (8003b38 <RCCEx_PLLSAI1_Config+0x194>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1ef      	bne.n	8003a24 <RCCEx_PLLSAI1_Config+0x80>
      }
    }

    if (status == HAL_OK)
 8003a44:	7bfb      	ldrb	r3, [r7, #15]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d171      	bne.n	8003b2e <RCCEx_PLLSAI1_Config+0x18a>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d116      	bne.n	8003a7e <RCCEx_PLLSAI1_Config+0xda>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a50:	4b39      	ldr	r3, [pc, #228]	; (8003b38 <RCCEx_PLLSAI1_Config+0x194>)
 8003a52:	691a      	ldr	r2, [r3, #16]
 8003a54:	4b39      	ldr	r3, [pc, #228]	; (8003b3c <RCCEx_PLLSAI1_Config+0x198>)
 8003a56:	4013      	ands	r3, r2
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	6892      	ldr	r2, [r2, #8]
 8003a5c:	0211      	lsls	r1, r2, #8
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	68d2      	ldr	r2, [r2, #12]
 8003a62:	06d2      	lsls	r2, r2, #27
 8003a64:	4311      	orrs	r1, r2
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	6852      	ldr	r2, [r2, #4]
 8003a6a:	3a01      	subs	r2, #1
 8003a6c:	0112      	lsls	r2, r2, #4
 8003a6e:	4311      	orrs	r1, r2
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	6812      	ldr	r2, [r2, #0]
 8003a74:	430a      	orrs	r2, r1
 8003a76:	4930      	ldr	r1, [pc, #192]	; (8003b38 <RCCEx_PLLSAI1_Config+0x194>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	610b      	str	r3, [r1, #16]
 8003a7c:	e033      	b.n	8003ae6 <RCCEx_PLLSAI1_Config+0x142>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d118      	bne.n	8003ab6 <RCCEx_PLLSAI1_Config+0x112>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a84:	4b2c      	ldr	r3, [pc, #176]	; (8003b38 <RCCEx_PLLSAI1_Config+0x194>)
 8003a86:	691a      	ldr	r2, [r3, #16]
 8003a88:	4b2d      	ldr	r3, [pc, #180]	; (8003b40 <RCCEx_PLLSAI1_Config+0x19c>)
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	6892      	ldr	r2, [r2, #8]
 8003a90:	0211      	lsls	r1, r2, #8
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	6912      	ldr	r2, [r2, #16]
 8003a96:	0852      	lsrs	r2, r2, #1
 8003a98:	3a01      	subs	r2, #1
 8003a9a:	0552      	lsls	r2, r2, #21
 8003a9c:	4311      	orrs	r1, r2
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	6852      	ldr	r2, [r2, #4]
 8003aa2:	3a01      	subs	r2, #1
 8003aa4:	0112      	lsls	r2, r2, #4
 8003aa6:	4311      	orrs	r1, r2
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	6812      	ldr	r2, [r2, #0]
 8003aac:	430a      	orrs	r2, r1
 8003aae:	4922      	ldr	r1, [pc, #136]	; (8003b38 <RCCEx_PLLSAI1_Config+0x194>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	610b      	str	r3, [r1, #16]
 8003ab4:	e017      	b.n	8003ae6 <RCCEx_PLLSAI1_Config+0x142>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ab6:	4b20      	ldr	r3, [pc, #128]	; (8003b38 <RCCEx_PLLSAI1_Config+0x194>)
 8003ab8:	691a      	ldr	r2, [r3, #16]
 8003aba:	4b22      	ldr	r3, [pc, #136]	; (8003b44 <RCCEx_PLLSAI1_Config+0x1a0>)
 8003abc:	4013      	ands	r3, r2
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	6892      	ldr	r2, [r2, #8]
 8003ac2:	0211      	lsls	r1, r2, #8
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	6952      	ldr	r2, [r2, #20]
 8003ac8:	0852      	lsrs	r2, r2, #1
 8003aca:	3a01      	subs	r2, #1
 8003acc:	0652      	lsls	r2, r2, #25
 8003ace:	4311      	orrs	r1, r2
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	6852      	ldr	r2, [r2, #4]
 8003ad4:	3a01      	subs	r2, #1
 8003ad6:	0112      	lsls	r2, r2, #4
 8003ad8:	4311      	orrs	r1, r2
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	6812      	ldr	r2, [r2, #0]
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	4915      	ldr	r1, [pc, #84]	; (8003b38 <RCCEx_PLLSAI1_Config+0x194>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003ae6:	4b14      	ldr	r3, [pc, #80]	; (8003b38 <RCCEx_PLLSAI1_Config+0x194>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a13      	ldr	r2, [pc, #76]	; (8003b38 <RCCEx_PLLSAI1_Config+0x194>)
 8003aec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003af0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af2:	f7fe f887 	bl	8001c04 <HAL_GetTick>
 8003af6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003af8:	e009      	b.n	8003b0e <RCCEx_PLLSAI1_Config+0x16a>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003afa:	f7fe f883 	bl	8001c04 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d902      	bls.n	8003b0e <RCCEx_PLLSAI1_Config+0x16a>
        {
          status = HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	73fb      	strb	r3, [r7, #15]
          break;
 8003b0c:	e005      	b.n	8003b1a <RCCEx_PLLSAI1_Config+0x176>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b0e:	4b0a      	ldr	r3, [pc, #40]	; (8003b38 <RCCEx_PLLSAI1_Config+0x194>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d0ef      	beq.n	8003afa <RCCEx_PLLSAI1_Config+0x156>
        }
      }

      if (status == HAL_OK)
 8003b1a:	7bfb      	ldrb	r3, [r7, #15]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d106      	bne.n	8003b2e <RCCEx_PLLSAI1_Config+0x18a>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8003b20:	4b05      	ldr	r3, [pc, #20]	; (8003b38 <RCCEx_PLLSAI1_Config+0x194>)
 8003b22:	691a      	ldr	r2, [r3, #16]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	4903      	ldr	r1, [pc, #12]	; (8003b38 <RCCEx_PLLSAI1_Config+0x194>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	07ff800c 	.word	0x07ff800c
 8003b40:	ff9f800c 	.word	0xff9f800c
 8003b44:	f9ff800c 	.word	0xf9ff800c

08003b48 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b52:	2300      	movs	r3, #0
 8003b54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d00c      	beq.n	8003b78 <RCCEx_PLLSAI2_Config+0x30>
 8003b5e:	2b03      	cmp	r3, #3
 8003b60:	d013      	beq.n	8003b8a <RCCEx_PLLSAI2_Config+0x42>
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d11a      	bne.n	8003b9c <RCCEx_PLLSAI2_Config+0x54>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b66:	4b42      	ldr	r3, [pc, #264]	; (8003c70 <RCCEx_PLLSAI2_Config+0x128>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d117      	bne.n	8003ba2 <RCCEx_PLLSAI2_Config+0x5a>
      {
        status = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b76:	e014      	b.n	8003ba2 <RCCEx_PLLSAI2_Config+0x5a>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b78:	4b3d      	ldr	r3, [pc, #244]	; (8003c70 <RCCEx_PLLSAI2_Config+0x128>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d110      	bne.n	8003ba6 <RCCEx_PLLSAI2_Config+0x5e>
      {
        status = HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b88:	e00d      	b.n	8003ba6 <RCCEx_PLLSAI2_Config+0x5e>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8003b8a:	4b39      	ldr	r3, [pc, #228]	; (8003c70 <RCCEx_PLLSAI2_Config+0x128>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d109      	bne.n	8003baa <RCCEx_PLLSAI2_Config+0x62>
      {
        status = HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b9a:	e006      	b.n	8003baa <RCCEx_PLLSAI2_Config+0x62>
    default:
      status = HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	73fb      	strb	r3, [r7, #15]
      break;
 8003ba0:	e004      	b.n	8003bac <RCCEx_PLLSAI2_Config+0x64>
      break;
 8003ba2:	bf00      	nop
 8003ba4:	e002      	b.n	8003bac <RCCEx_PLLSAI2_Config+0x64>
      break;
 8003ba6:	bf00      	nop
 8003ba8:	e000      	b.n	8003bac <RCCEx_PLLSAI2_Config+0x64>
      break;
 8003baa:	bf00      	nop
  }

  if (status == HAL_OK)
 8003bac:	7bfb      	ldrb	r3, [r7, #15]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d159      	bne.n	8003c66 <RCCEx_PLLSAI2_Config+0x11e>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003bb2:	4b2f      	ldr	r3, [pc, #188]	; (8003c70 <RCCEx_PLLSAI2_Config+0x128>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a2e      	ldr	r2, [pc, #184]	; (8003c70 <RCCEx_PLLSAI2_Config+0x128>)
 8003bb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bbe:	f7fe f821 	bl	8001c04 <HAL_GetTick>
 8003bc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003bc4:	e009      	b.n	8003bda <RCCEx_PLLSAI2_Config+0x92>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003bc6:	f7fe f81d 	bl	8001c04 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d902      	bls.n	8003bda <RCCEx_PLLSAI2_Config+0x92>
      {
        status = HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	73fb      	strb	r3, [r7, #15]
        break;
 8003bd8:	e005      	b.n	8003be6 <RCCEx_PLLSAI2_Config+0x9e>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003bda:	4b25      	ldr	r3, [pc, #148]	; (8003c70 <RCCEx_PLLSAI2_Config+0x128>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1ef      	bne.n	8003bc6 <RCCEx_PLLSAI2_Config+0x7e>
      }
    }

    if (status == HAL_OK)
 8003be6:	7bfb      	ldrb	r3, [r7, #15]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d13c      	bne.n	8003c66 <RCCEx_PLLSAI2_Config+0x11e>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d115      	bne.n	8003c1e <RCCEx_PLLSAI2_Config+0xd6>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003bf2:	4b1f      	ldr	r3, [pc, #124]	; (8003c70 <RCCEx_PLLSAI2_Config+0x128>)
 8003bf4:	695a      	ldr	r2, [r3, #20]
 8003bf6:	4b1f      	ldr	r3, [pc, #124]	; (8003c74 <RCCEx_PLLSAI2_Config+0x12c>)
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	6892      	ldr	r2, [r2, #8]
 8003bfe:	0211      	lsls	r1, r2, #8
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	68d2      	ldr	r2, [r2, #12]
 8003c04:	06d2      	lsls	r2, r2, #27
 8003c06:	4311      	orrs	r1, r2
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	6852      	ldr	r2, [r2, #4]
 8003c0c:	3a01      	subs	r2, #1
 8003c0e:	0112      	lsls	r2, r2, #4
 8003c10:	4311      	orrs	r1, r2
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	6812      	ldr	r2, [r2, #0]
 8003c16:	430a      	orrs	r2, r1
 8003c18:	4915      	ldr	r1, [pc, #84]	; (8003c70 <RCCEx_PLLSAI2_Config+0x128>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003c1e:	4b14      	ldr	r3, [pc, #80]	; (8003c70 <RCCEx_PLLSAI2_Config+0x128>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a13      	ldr	r2, [pc, #76]	; (8003c70 <RCCEx_PLLSAI2_Config+0x128>)
 8003c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c28:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c2a:	f7fd ffeb 	bl	8001c04 <HAL_GetTick>
 8003c2e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c30:	e009      	b.n	8003c46 <RCCEx_PLLSAI2_Config+0xfe>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c32:	f7fd ffe7 	bl	8001c04 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d902      	bls.n	8003c46 <RCCEx_PLLSAI2_Config+0xfe>
        {
          status = HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	73fb      	strb	r3, [r7, #15]
          break;
 8003c44:	e005      	b.n	8003c52 <RCCEx_PLLSAI2_Config+0x10a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c46:	4b0a      	ldr	r3, [pc, #40]	; (8003c70 <RCCEx_PLLSAI2_Config+0x128>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d0ef      	beq.n	8003c32 <RCCEx_PLLSAI2_Config+0xea>
        }
      }

      if (status == HAL_OK)
 8003c52:	7bfb      	ldrb	r3, [r7, #15]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d106      	bne.n	8003c66 <RCCEx_PLLSAI2_Config+0x11e>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8003c58:	4b05      	ldr	r3, [pc, #20]	; (8003c70 <RCCEx_PLLSAI2_Config+0x128>)
 8003c5a:	695a      	ldr	r2, [r3, #20]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	4903      	ldr	r1, [pc, #12]	; (8003c70 <RCCEx_PLLSAI2_Config+0x128>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40021000 	.word	0x40021000
 8003c74:	07ff800c 	.word	0x07ff800c

08003c78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e049      	b.n	8003d1e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d106      	bne.n	8003ca4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f7fd fd7c 	bl	800179c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2202      	movs	r2, #2
 8003ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	3304      	adds	r3, #4
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	4610      	mov	r0, r2
 8003cb8:	f000 f89e 	bl	8003df8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
	...

08003d28 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d001      	beq.n	8003d40 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e047      	b.n	8003dd0 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2202      	movs	r2, #2
 8003d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a23      	ldr	r2, [pc, #140]	; (8003ddc <HAL_TIM_Base_Start+0xb4>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d01d      	beq.n	8003d8e <HAL_TIM_Base_Start+0x66>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d5a:	d018      	beq.n	8003d8e <HAL_TIM_Base_Start+0x66>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a1f      	ldr	r2, [pc, #124]	; (8003de0 <HAL_TIM_Base_Start+0xb8>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d013      	beq.n	8003d8e <HAL_TIM_Base_Start+0x66>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a1e      	ldr	r2, [pc, #120]	; (8003de4 <HAL_TIM_Base_Start+0xbc>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d00e      	beq.n	8003d8e <HAL_TIM_Base_Start+0x66>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a1c      	ldr	r2, [pc, #112]	; (8003de8 <HAL_TIM_Base_Start+0xc0>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d009      	beq.n	8003d8e <HAL_TIM_Base_Start+0x66>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a1b      	ldr	r2, [pc, #108]	; (8003dec <HAL_TIM_Base_Start+0xc4>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d004      	beq.n	8003d8e <HAL_TIM_Base_Start+0x66>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a19      	ldr	r2, [pc, #100]	; (8003df0 <HAL_TIM_Base_Start+0xc8>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d115      	bne.n	8003dba <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	4b17      	ldr	r3, [pc, #92]	; (8003df4 <HAL_TIM_Base_Start+0xcc>)
 8003d96:	4013      	ands	r3, r2
 8003d98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2b06      	cmp	r3, #6
 8003d9e:	d015      	beq.n	8003dcc <HAL_TIM_Base_Start+0xa4>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003da6:	d011      	beq.n	8003dcc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f042 0201 	orr.w	r2, r2, #1
 8003db6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003db8:	e008      	b.n	8003dcc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f042 0201 	orr.w	r2, r2, #1
 8003dc8:	601a      	str	r2, [r3, #0]
 8003dca:	e000      	b.n	8003dce <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dcc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3714      	adds	r7, #20
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr
 8003ddc:	40012c00 	.word	0x40012c00
 8003de0:	40000400 	.word	0x40000400
 8003de4:	40000800 	.word	0x40000800
 8003de8:	40000c00 	.word	0x40000c00
 8003dec:	40013400 	.word	0x40013400
 8003df0:	40014000 	.word	0x40014000
 8003df4:	00010007 	.word	0x00010007

08003df8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a40      	ldr	r2, [pc, #256]	; (8003f0c <TIM_Base_SetConfig+0x114>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d013      	beq.n	8003e38 <TIM_Base_SetConfig+0x40>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e16:	d00f      	beq.n	8003e38 <TIM_Base_SetConfig+0x40>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a3d      	ldr	r2, [pc, #244]	; (8003f10 <TIM_Base_SetConfig+0x118>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d00b      	beq.n	8003e38 <TIM_Base_SetConfig+0x40>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a3c      	ldr	r2, [pc, #240]	; (8003f14 <TIM_Base_SetConfig+0x11c>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d007      	beq.n	8003e38 <TIM_Base_SetConfig+0x40>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a3b      	ldr	r2, [pc, #236]	; (8003f18 <TIM_Base_SetConfig+0x120>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d003      	beq.n	8003e38 <TIM_Base_SetConfig+0x40>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a3a      	ldr	r2, [pc, #232]	; (8003f1c <TIM_Base_SetConfig+0x124>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d108      	bne.n	8003e4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a2f      	ldr	r2, [pc, #188]	; (8003f0c <TIM_Base_SetConfig+0x114>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d01f      	beq.n	8003e92 <TIM_Base_SetConfig+0x9a>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e58:	d01b      	beq.n	8003e92 <TIM_Base_SetConfig+0x9a>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a2c      	ldr	r2, [pc, #176]	; (8003f10 <TIM_Base_SetConfig+0x118>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d017      	beq.n	8003e92 <TIM_Base_SetConfig+0x9a>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a2b      	ldr	r2, [pc, #172]	; (8003f14 <TIM_Base_SetConfig+0x11c>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d013      	beq.n	8003e92 <TIM_Base_SetConfig+0x9a>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a2a      	ldr	r2, [pc, #168]	; (8003f18 <TIM_Base_SetConfig+0x120>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d00f      	beq.n	8003e92 <TIM_Base_SetConfig+0x9a>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a29      	ldr	r2, [pc, #164]	; (8003f1c <TIM_Base_SetConfig+0x124>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d00b      	beq.n	8003e92 <TIM_Base_SetConfig+0x9a>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a28      	ldr	r2, [pc, #160]	; (8003f20 <TIM_Base_SetConfig+0x128>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d007      	beq.n	8003e92 <TIM_Base_SetConfig+0x9a>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a27      	ldr	r2, [pc, #156]	; (8003f24 <TIM_Base_SetConfig+0x12c>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d003      	beq.n	8003e92 <TIM_Base_SetConfig+0x9a>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a26      	ldr	r2, [pc, #152]	; (8003f28 <TIM_Base_SetConfig+0x130>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d108      	bne.n	8003ea4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	689a      	ldr	r2, [r3, #8]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a10      	ldr	r2, [pc, #64]	; (8003f0c <TIM_Base_SetConfig+0x114>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d00f      	beq.n	8003ef0 <TIM_Base_SetConfig+0xf8>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a12      	ldr	r2, [pc, #72]	; (8003f1c <TIM_Base_SetConfig+0x124>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d00b      	beq.n	8003ef0 <TIM_Base_SetConfig+0xf8>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a11      	ldr	r2, [pc, #68]	; (8003f20 <TIM_Base_SetConfig+0x128>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d007      	beq.n	8003ef0 <TIM_Base_SetConfig+0xf8>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a10      	ldr	r2, [pc, #64]	; (8003f24 <TIM_Base_SetConfig+0x12c>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d003      	beq.n	8003ef0 <TIM_Base_SetConfig+0xf8>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a0f      	ldr	r2, [pc, #60]	; (8003f28 <TIM_Base_SetConfig+0x130>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d103      	bne.n	8003ef8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	691a      	ldr	r2, [r3, #16]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	615a      	str	r2, [r3, #20]
}
 8003efe:	bf00      	nop
 8003f00:	3714      	adds	r7, #20
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	40012c00 	.word	0x40012c00
 8003f10:	40000400 	.word	0x40000400
 8003f14:	40000800 	.word	0x40000800
 8003f18:	40000c00 	.word	0x40000c00
 8003f1c:	40013400 	.word	0x40013400
 8003f20:	40014000 	.word	0x40014000
 8003f24:	40014400 	.word	0x40014400
 8003f28:	40014800 	.word	0x40014800

08003f2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e042      	b.n	8003fc4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d106      	bne.n	8003f56 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f7fd fc43 	bl	80017dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2224      	movs	r2, #36	; 0x24
 8003f5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f022 0201 	bic.w	r2, r2, #1
 8003f6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f8c2 	bl	80040f8 <UART_SetConfig>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d101      	bne.n	8003f7e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e022      	b.n	8003fc4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d002      	beq.n	8003f8c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 fb8c 	bl	80046a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	685a      	ldr	r2, [r3, #4]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689a      	ldr	r2, [r3, #8]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003faa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f042 0201 	orr.w	r2, r2, #1
 8003fba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 fc13 	bl	80047e8 <UART_CheckIdleState>
 8003fc2:	4603      	mov	r3, r0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3708      	adds	r7, #8
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b08a      	sub	sp, #40	; 0x28
 8003fd0:	af02      	add	r7, sp, #8
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	603b      	str	r3, [r7, #0]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fe2:	2b20      	cmp	r3, #32
 8003fe4:	f040 8083 	bne.w	80040ee <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d002      	beq.n	8003ff4 <HAL_UART_Transmit+0x28>
 8003fee:	88fb      	ldrh	r3, [r7, #6]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d101      	bne.n	8003ff8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e07b      	b.n	80040f0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d101      	bne.n	8004006 <HAL_UART_Transmit+0x3a>
 8004002:	2302      	movs	r3, #2
 8004004:	e074      	b.n	80040f0 <HAL_UART_Transmit+0x124>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2221      	movs	r2, #33	; 0x21
 800401a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800401e:	f7fd fdf1 	bl	8001c04 <HAL_GetTick>
 8004022:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	88fa      	ldrh	r2, [r7, #6]
 8004028:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	88fa      	ldrh	r2, [r7, #6]
 8004030:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800403c:	d108      	bne.n	8004050 <HAL_UART_Transmit+0x84>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d104      	bne.n	8004050 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004046:	2300      	movs	r3, #0
 8004048:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	61bb      	str	r3, [r7, #24]
 800404e:	e003      	b.n	8004058 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004054:	2300      	movs	r3, #0
 8004056:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004060:	e02c      	b.n	80040bc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	9300      	str	r3, [sp, #0]
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	2200      	movs	r2, #0
 800406a:	2180      	movs	r1, #128	; 0x80
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f000 fc06 	bl	800487e <UART_WaitOnFlagUntilTimeout>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d001      	beq.n	800407c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e039      	b.n	80040f0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10b      	bne.n	800409a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	881b      	ldrh	r3, [r3, #0]
 8004086:	461a      	mov	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004090:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	3302      	adds	r3, #2
 8004096:	61bb      	str	r3, [r7, #24]
 8004098:	e007      	b.n	80040aa <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	781a      	ldrb	r2, [r3, #0]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	3301      	adds	r3, #1
 80040a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	3b01      	subs	r3, #1
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1cc      	bne.n	8004062 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	9300      	str	r3, [sp, #0]
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	2200      	movs	r2, #0
 80040d0:	2140      	movs	r1, #64	; 0x40
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	f000 fbd3 	bl	800487e <UART_WaitOnFlagUntilTimeout>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d001      	beq.n	80040e2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e006      	b.n	80040f0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2220      	movs	r2, #32
 80040e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80040ea:	2300      	movs	r3, #0
 80040ec:	e000      	b.n	80040f0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80040ee:	2302      	movs	r3, #2
  }
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3720      	adds	r7, #32
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040f8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80040fc:	b088      	sub	sp, #32
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004102:	2300      	movs	r3, #0
 8004104:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	689a      	ldr	r2, [r3, #8]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	431a      	orrs	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	431a      	orrs	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	69db      	ldr	r3, [r3, #28]
 800411a:	4313      	orrs	r3, r2
 800411c:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004122:	69fa      	ldr	r2, [r7, #28]
 8004124:	4313      	orrs	r3, r2
 8004126:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	4bb1      	ldr	r3, [pc, #708]	; (80043f4 <UART_SetConfig+0x2fc>)
 8004130:	4013      	ands	r3, r2
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	6812      	ldr	r2, [r2, #0]
 8004136:	69f9      	ldr	r1, [r7, #28]
 8004138:	430b      	orrs	r3, r1
 800413a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	68da      	ldr	r2, [r3, #12]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4aa6      	ldr	r2, [pc, #664]	; (80043f8 <UART_SetConfig+0x300>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d004      	beq.n	800416c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	69fa      	ldr	r2, [r7, #28]
 8004168:	4313      	orrs	r3, r2
 800416a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004176:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	6812      	ldr	r2, [r2, #0]
 800417e:	69f9      	ldr	r1, [r7, #28]
 8004180:	430b      	orrs	r3, r1
 8004182:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418a:	f023 010f 	bic.w	r1, r3, #15
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	430a      	orrs	r2, r1
 8004198:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a97      	ldr	r2, [pc, #604]	; (80043fc <UART_SetConfig+0x304>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d121      	bne.n	80041e8 <UART_SetConfig+0xf0>
 80041a4:	4b96      	ldr	r3, [pc, #600]	; (8004400 <UART_SetConfig+0x308>)
 80041a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041aa:	f003 0303 	and.w	r3, r3, #3
 80041ae:	2b03      	cmp	r3, #3
 80041b0:	d816      	bhi.n	80041e0 <UART_SetConfig+0xe8>
 80041b2:	a201      	add	r2, pc, #4	; (adr r2, 80041b8 <UART_SetConfig+0xc0>)
 80041b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b8:	080041c9 	.word	0x080041c9
 80041bc:	080041d5 	.word	0x080041d5
 80041c0:	080041cf 	.word	0x080041cf
 80041c4:	080041db 	.word	0x080041db
 80041c8:	2301      	movs	r3, #1
 80041ca:	76fb      	strb	r3, [r7, #27]
 80041cc:	e0e8      	b.n	80043a0 <UART_SetConfig+0x2a8>
 80041ce:	2302      	movs	r3, #2
 80041d0:	76fb      	strb	r3, [r7, #27]
 80041d2:	e0e5      	b.n	80043a0 <UART_SetConfig+0x2a8>
 80041d4:	2304      	movs	r3, #4
 80041d6:	76fb      	strb	r3, [r7, #27]
 80041d8:	e0e2      	b.n	80043a0 <UART_SetConfig+0x2a8>
 80041da:	2308      	movs	r3, #8
 80041dc:	76fb      	strb	r3, [r7, #27]
 80041de:	e0df      	b.n	80043a0 <UART_SetConfig+0x2a8>
 80041e0:	2310      	movs	r3, #16
 80041e2:	76fb      	strb	r3, [r7, #27]
 80041e4:	bf00      	nop
 80041e6:	e0db      	b.n	80043a0 <UART_SetConfig+0x2a8>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a85      	ldr	r2, [pc, #532]	; (8004404 <UART_SetConfig+0x30c>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d134      	bne.n	800425c <UART_SetConfig+0x164>
 80041f2:	4b83      	ldr	r3, [pc, #524]	; (8004400 <UART_SetConfig+0x308>)
 80041f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f8:	f003 030c 	and.w	r3, r3, #12
 80041fc:	2b0c      	cmp	r3, #12
 80041fe:	d829      	bhi.n	8004254 <UART_SetConfig+0x15c>
 8004200:	a201      	add	r2, pc, #4	; (adr r2, 8004208 <UART_SetConfig+0x110>)
 8004202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004206:	bf00      	nop
 8004208:	0800423d 	.word	0x0800423d
 800420c:	08004255 	.word	0x08004255
 8004210:	08004255 	.word	0x08004255
 8004214:	08004255 	.word	0x08004255
 8004218:	08004249 	.word	0x08004249
 800421c:	08004255 	.word	0x08004255
 8004220:	08004255 	.word	0x08004255
 8004224:	08004255 	.word	0x08004255
 8004228:	08004243 	.word	0x08004243
 800422c:	08004255 	.word	0x08004255
 8004230:	08004255 	.word	0x08004255
 8004234:	08004255 	.word	0x08004255
 8004238:	0800424f 	.word	0x0800424f
 800423c:	2300      	movs	r3, #0
 800423e:	76fb      	strb	r3, [r7, #27]
 8004240:	e0ae      	b.n	80043a0 <UART_SetConfig+0x2a8>
 8004242:	2302      	movs	r3, #2
 8004244:	76fb      	strb	r3, [r7, #27]
 8004246:	e0ab      	b.n	80043a0 <UART_SetConfig+0x2a8>
 8004248:	2304      	movs	r3, #4
 800424a:	76fb      	strb	r3, [r7, #27]
 800424c:	e0a8      	b.n	80043a0 <UART_SetConfig+0x2a8>
 800424e:	2308      	movs	r3, #8
 8004250:	76fb      	strb	r3, [r7, #27]
 8004252:	e0a5      	b.n	80043a0 <UART_SetConfig+0x2a8>
 8004254:	2310      	movs	r3, #16
 8004256:	76fb      	strb	r3, [r7, #27]
 8004258:	bf00      	nop
 800425a:	e0a1      	b.n	80043a0 <UART_SetConfig+0x2a8>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a69      	ldr	r2, [pc, #420]	; (8004408 <UART_SetConfig+0x310>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d120      	bne.n	80042a8 <UART_SetConfig+0x1b0>
 8004266:	4b66      	ldr	r3, [pc, #408]	; (8004400 <UART_SetConfig+0x308>)
 8004268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800426c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004270:	2b10      	cmp	r3, #16
 8004272:	d00f      	beq.n	8004294 <UART_SetConfig+0x19c>
 8004274:	2b10      	cmp	r3, #16
 8004276:	d802      	bhi.n	800427e <UART_SetConfig+0x186>
 8004278:	2b00      	cmp	r3, #0
 800427a:	d005      	beq.n	8004288 <UART_SetConfig+0x190>
 800427c:	e010      	b.n	80042a0 <UART_SetConfig+0x1a8>
 800427e:	2b20      	cmp	r3, #32
 8004280:	d005      	beq.n	800428e <UART_SetConfig+0x196>
 8004282:	2b30      	cmp	r3, #48	; 0x30
 8004284:	d009      	beq.n	800429a <UART_SetConfig+0x1a2>
 8004286:	e00b      	b.n	80042a0 <UART_SetConfig+0x1a8>
 8004288:	2300      	movs	r3, #0
 800428a:	76fb      	strb	r3, [r7, #27]
 800428c:	e088      	b.n	80043a0 <UART_SetConfig+0x2a8>
 800428e:	2302      	movs	r3, #2
 8004290:	76fb      	strb	r3, [r7, #27]
 8004292:	e085      	b.n	80043a0 <UART_SetConfig+0x2a8>
 8004294:	2304      	movs	r3, #4
 8004296:	76fb      	strb	r3, [r7, #27]
 8004298:	e082      	b.n	80043a0 <UART_SetConfig+0x2a8>
 800429a:	2308      	movs	r3, #8
 800429c:	76fb      	strb	r3, [r7, #27]
 800429e:	e07f      	b.n	80043a0 <UART_SetConfig+0x2a8>
 80042a0:	2310      	movs	r3, #16
 80042a2:	76fb      	strb	r3, [r7, #27]
 80042a4:	bf00      	nop
 80042a6:	e07b      	b.n	80043a0 <UART_SetConfig+0x2a8>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a57      	ldr	r2, [pc, #348]	; (800440c <UART_SetConfig+0x314>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d120      	bne.n	80042f4 <UART_SetConfig+0x1fc>
 80042b2:	4b53      	ldr	r3, [pc, #332]	; (8004400 <UART_SetConfig+0x308>)
 80042b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80042bc:	2b40      	cmp	r3, #64	; 0x40
 80042be:	d00f      	beq.n	80042e0 <UART_SetConfig+0x1e8>
 80042c0:	2b40      	cmp	r3, #64	; 0x40
 80042c2:	d802      	bhi.n	80042ca <UART_SetConfig+0x1d2>
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d005      	beq.n	80042d4 <UART_SetConfig+0x1dc>
 80042c8:	e010      	b.n	80042ec <UART_SetConfig+0x1f4>
 80042ca:	2b80      	cmp	r3, #128	; 0x80
 80042cc:	d005      	beq.n	80042da <UART_SetConfig+0x1e2>
 80042ce:	2bc0      	cmp	r3, #192	; 0xc0
 80042d0:	d009      	beq.n	80042e6 <UART_SetConfig+0x1ee>
 80042d2:	e00b      	b.n	80042ec <UART_SetConfig+0x1f4>
 80042d4:	2300      	movs	r3, #0
 80042d6:	76fb      	strb	r3, [r7, #27]
 80042d8:	e062      	b.n	80043a0 <UART_SetConfig+0x2a8>
 80042da:	2302      	movs	r3, #2
 80042dc:	76fb      	strb	r3, [r7, #27]
 80042de:	e05f      	b.n	80043a0 <UART_SetConfig+0x2a8>
 80042e0:	2304      	movs	r3, #4
 80042e2:	76fb      	strb	r3, [r7, #27]
 80042e4:	e05c      	b.n	80043a0 <UART_SetConfig+0x2a8>
 80042e6:	2308      	movs	r3, #8
 80042e8:	76fb      	strb	r3, [r7, #27]
 80042ea:	e059      	b.n	80043a0 <UART_SetConfig+0x2a8>
 80042ec:	2310      	movs	r3, #16
 80042ee:	76fb      	strb	r3, [r7, #27]
 80042f0:	bf00      	nop
 80042f2:	e055      	b.n	80043a0 <UART_SetConfig+0x2a8>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a45      	ldr	r2, [pc, #276]	; (8004410 <UART_SetConfig+0x318>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d124      	bne.n	8004348 <UART_SetConfig+0x250>
 80042fe:	4b40      	ldr	r3, [pc, #256]	; (8004400 <UART_SetConfig+0x308>)
 8004300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004304:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004308:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800430c:	d012      	beq.n	8004334 <UART_SetConfig+0x23c>
 800430e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004312:	d802      	bhi.n	800431a <UART_SetConfig+0x222>
 8004314:	2b00      	cmp	r3, #0
 8004316:	d007      	beq.n	8004328 <UART_SetConfig+0x230>
 8004318:	e012      	b.n	8004340 <UART_SetConfig+0x248>
 800431a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800431e:	d006      	beq.n	800432e <UART_SetConfig+0x236>
 8004320:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004324:	d009      	beq.n	800433a <UART_SetConfig+0x242>
 8004326:	e00b      	b.n	8004340 <UART_SetConfig+0x248>
 8004328:	2300      	movs	r3, #0
 800432a:	76fb      	strb	r3, [r7, #27]
 800432c:	e038      	b.n	80043a0 <UART_SetConfig+0x2a8>
 800432e:	2302      	movs	r3, #2
 8004330:	76fb      	strb	r3, [r7, #27]
 8004332:	e035      	b.n	80043a0 <UART_SetConfig+0x2a8>
 8004334:	2304      	movs	r3, #4
 8004336:	76fb      	strb	r3, [r7, #27]
 8004338:	e032      	b.n	80043a0 <UART_SetConfig+0x2a8>
 800433a:	2308      	movs	r3, #8
 800433c:	76fb      	strb	r3, [r7, #27]
 800433e:	e02f      	b.n	80043a0 <UART_SetConfig+0x2a8>
 8004340:	2310      	movs	r3, #16
 8004342:	76fb      	strb	r3, [r7, #27]
 8004344:	bf00      	nop
 8004346:	e02b      	b.n	80043a0 <UART_SetConfig+0x2a8>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a2a      	ldr	r2, [pc, #168]	; (80043f8 <UART_SetConfig+0x300>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d124      	bne.n	800439c <UART_SetConfig+0x2a4>
 8004352:	4b2b      	ldr	r3, [pc, #172]	; (8004400 <UART_SetConfig+0x308>)
 8004354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004358:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800435c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004360:	d012      	beq.n	8004388 <UART_SetConfig+0x290>
 8004362:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004366:	d802      	bhi.n	800436e <UART_SetConfig+0x276>
 8004368:	2b00      	cmp	r3, #0
 800436a:	d007      	beq.n	800437c <UART_SetConfig+0x284>
 800436c:	e012      	b.n	8004394 <UART_SetConfig+0x29c>
 800436e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004372:	d006      	beq.n	8004382 <UART_SetConfig+0x28a>
 8004374:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004378:	d009      	beq.n	800438e <UART_SetConfig+0x296>
 800437a:	e00b      	b.n	8004394 <UART_SetConfig+0x29c>
 800437c:	2300      	movs	r3, #0
 800437e:	76fb      	strb	r3, [r7, #27]
 8004380:	e00e      	b.n	80043a0 <UART_SetConfig+0x2a8>
 8004382:	2302      	movs	r3, #2
 8004384:	76fb      	strb	r3, [r7, #27]
 8004386:	e00b      	b.n	80043a0 <UART_SetConfig+0x2a8>
 8004388:	2304      	movs	r3, #4
 800438a:	76fb      	strb	r3, [r7, #27]
 800438c:	e008      	b.n	80043a0 <UART_SetConfig+0x2a8>
 800438e:	2308      	movs	r3, #8
 8004390:	76fb      	strb	r3, [r7, #27]
 8004392:	e005      	b.n	80043a0 <UART_SetConfig+0x2a8>
 8004394:	2310      	movs	r3, #16
 8004396:	76fb      	strb	r3, [r7, #27]
 8004398:	bf00      	nop
 800439a:	e001      	b.n	80043a0 <UART_SetConfig+0x2a8>
 800439c:	2310      	movs	r3, #16
 800439e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a14      	ldr	r2, [pc, #80]	; (80043f8 <UART_SetConfig+0x300>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	f040 80a5 	bne.w	80044f6 <UART_SetConfig+0x3fe>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80043ac:	7efb      	ldrb	r3, [r7, #27]
 80043ae:	2b08      	cmp	r3, #8
 80043b0:	d83a      	bhi.n	8004428 <UART_SetConfig+0x330>
 80043b2:	a201      	add	r2, pc, #4	; (adr r2, 80043b8 <UART_SetConfig+0x2c0>)
 80043b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b8:	080043dd 	.word	0x080043dd
 80043bc:	080043e5 	.word	0x080043e5
 80043c0:	080043ed 	.word	0x080043ed
 80043c4:	08004429 	.word	0x08004429
 80043c8:	08004419 	.word	0x08004419
 80043cc:	08004429 	.word	0x08004429
 80043d0:	08004429 	.word	0x08004429
 80043d4:	08004429 	.word	0x08004429
 80043d8:	08004421 	.word	0x08004421
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043dc:	f7fe fe74 	bl	80030c8 <HAL_RCC_GetPCLK1Freq>
 80043e0:	6178      	str	r0, [r7, #20]
        break;
 80043e2:	e026      	b.n	8004432 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043e4:	f7fe fe84 	bl	80030f0 <HAL_RCC_GetPCLK2Freq>
 80043e8:	6178      	str	r0, [r7, #20]
        break;
 80043ea:	e022      	b.n	8004432 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043ec:	4b09      	ldr	r3, [pc, #36]	; (8004414 <UART_SetConfig+0x31c>)
 80043ee:	617b      	str	r3, [r7, #20]
        break;
 80043f0:	e01f      	b.n	8004432 <UART_SetConfig+0x33a>
 80043f2:	bf00      	nop
 80043f4:	cfff69f3 	.word	0xcfff69f3
 80043f8:	40008000 	.word	0x40008000
 80043fc:	40013800 	.word	0x40013800
 8004400:	40021000 	.word	0x40021000
 8004404:	40004400 	.word	0x40004400
 8004408:	40004800 	.word	0x40004800
 800440c:	40004c00 	.word	0x40004c00
 8004410:	40005000 	.word	0x40005000
 8004414:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004418:	f7fe fda8 	bl	8002f6c <HAL_RCC_GetSysClockFreq>
 800441c:	6178      	str	r0, [r7, #20]
        break;
 800441e:	e008      	b.n	8004432 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004420:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004424:	617b      	str	r3, [r7, #20]
        break;
 8004426:	e004      	b.n	8004432 <UART_SetConfig+0x33a>
      default:
        pclk = 0U;
 8004428:	2300      	movs	r3, #0
 800442a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	76bb      	strb	r3, [r7, #26]
        break;
 8004430:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	2b00      	cmp	r3, #0
 8004436:	f000 811d 	beq.w	8004674 <UART_SetConfig+0x57c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443e:	4a97      	ldr	r2, [pc, #604]	; (800469c <UART_SetConfig+0x5a4>)
 8004440:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004444:	461a      	mov	r2, r3
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	fbb3 f3f2 	udiv	r3, r3, r2
 800444c:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685a      	ldr	r2, [r3, #4]
 8004452:	4613      	mov	r3, r2
 8004454:	005b      	lsls	r3, r3, #1
 8004456:	4413      	add	r3, r2
 8004458:	68ba      	ldr	r2, [r7, #8]
 800445a:	429a      	cmp	r2, r3
 800445c:	d305      	bcc.n	800446a <UART_SetConfig+0x372>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004464:	68ba      	ldr	r2, [r7, #8]
 8004466:	429a      	cmp	r2, r3
 8004468:	d902      	bls.n	8004470 <UART_SetConfig+0x378>
      {
        ret = HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	76bb      	strb	r3, [r7, #26]
 800446e:	e101      	b.n	8004674 <UART_SetConfig+0x57c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	4618      	mov	r0, r3
 8004474:	f04f 0100 	mov.w	r1, #0
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447c:	4a87      	ldr	r2, [pc, #540]	; (800469c <UART_SetConfig+0x5a4>)
 800447e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004482:	b29b      	uxth	r3, r3
 8004484:	f04f 0400 	mov.w	r4, #0
 8004488:	461a      	mov	r2, r3
 800448a:	4623      	mov	r3, r4
 800448c:	f7fc fbc0 	bl	8000c10 <__aeabi_uldivmod>
 8004490:	4603      	mov	r3, r0
 8004492:	460c      	mov	r4, r1
 8004494:	4619      	mov	r1, r3
 8004496:	4622      	mov	r2, r4
 8004498:	f04f 0300 	mov.w	r3, #0
 800449c:	f04f 0400 	mov.w	r4, #0
 80044a0:	0214      	lsls	r4, r2, #8
 80044a2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80044a6:	020b      	lsls	r3, r1, #8
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	6852      	ldr	r2, [r2, #4]
 80044ac:	0852      	lsrs	r2, r2, #1
 80044ae:	4611      	mov	r1, r2
 80044b0:	f04f 0200 	mov.w	r2, #0
 80044b4:	eb13 0b01 	adds.w	fp, r3, r1
 80044b8:	eb44 0c02 	adc.w	ip, r4, r2
 80044bc:	4658      	mov	r0, fp
 80044be:	4661      	mov	r1, ip
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f04f 0400 	mov.w	r4, #0
 80044c8:	461a      	mov	r2, r3
 80044ca:	4623      	mov	r3, r4
 80044cc:	f7fc fba0 	bl	8000c10 <__aeabi_uldivmod>
 80044d0:	4603      	mov	r3, r0
 80044d2:	460c      	mov	r4, r1
 80044d4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044dc:	d308      	bcc.n	80044f0 <UART_SetConfig+0x3f8>
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044e4:	d204      	bcs.n	80044f0 <UART_SetConfig+0x3f8>
        {
          huart->Instance->BRR = usartdiv;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	60da      	str	r2, [r3, #12]
 80044ee:	e0c1      	b.n	8004674 <UART_SetConfig+0x57c>
        }
        else
        {
          ret = HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	76bb      	strb	r3, [r7, #26]
 80044f4:	e0be      	b.n	8004674 <UART_SetConfig+0x57c>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	69db      	ldr	r3, [r3, #28]
 80044fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044fe:	d164      	bne.n	80045ca <UART_SetConfig+0x4d2>
  {
    switch (clocksource)
 8004500:	7efb      	ldrb	r3, [r7, #27]
 8004502:	2b08      	cmp	r3, #8
 8004504:	d827      	bhi.n	8004556 <UART_SetConfig+0x45e>
 8004506:	a201      	add	r2, pc, #4	; (adr r2, 800450c <UART_SetConfig+0x414>)
 8004508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450c:	08004531 	.word	0x08004531
 8004510:	08004539 	.word	0x08004539
 8004514:	08004541 	.word	0x08004541
 8004518:	08004557 	.word	0x08004557
 800451c:	08004547 	.word	0x08004547
 8004520:	08004557 	.word	0x08004557
 8004524:	08004557 	.word	0x08004557
 8004528:	08004557 	.word	0x08004557
 800452c:	0800454f 	.word	0x0800454f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004530:	f7fe fdca 	bl	80030c8 <HAL_RCC_GetPCLK1Freq>
 8004534:	6178      	str	r0, [r7, #20]
        break;
 8004536:	e013      	b.n	8004560 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004538:	f7fe fdda 	bl	80030f0 <HAL_RCC_GetPCLK2Freq>
 800453c:	6178      	str	r0, [r7, #20]
        break;
 800453e:	e00f      	b.n	8004560 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004540:	4b57      	ldr	r3, [pc, #348]	; (80046a0 <UART_SetConfig+0x5a8>)
 8004542:	617b      	str	r3, [r7, #20]
        break;
 8004544:	e00c      	b.n	8004560 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004546:	f7fe fd11 	bl	8002f6c <HAL_RCC_GetSysClockFreq>
 800454a:	6178      	str	r0, [r7, #20]
        break;
 800454c:	e008      	b.n	8004560 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800454e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004552:	617b      	str	r3, [r7, #20]
        break;
 8004554:	e004      	b.n	8004560 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004556:	2300      	movs	r3, #0
 8004558:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	76bb      	strb	r3, [r7, #26]
        break;
 800455e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	2b00      	cmp	r3, #0
 8004564:	f000 8086 	beq.w	8004674 <UART_SetConfig+0x57c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456c:	4a4b      	ldr	r2, [pc, #300]	; (800469c <UART_SetConfig+0x5a4>)
 800456e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004572:	461a      	mov	r2, r3
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	fbb3 f3f2 	udiv	r3, r3, r2
 800457a:	005a      	lsls	r2, r3, #1
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	085b      	lsrs	r3, r3, #1
 8004582:	441a      	add	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	fbb2 f3f3 	udiv	r3, r2, r3
 800458c:	b29b      	uxth	r3, r3
 800458e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	2b0f      	cmp	r3, #15
 8004594:	d916      	bls.n	80045c4 <UART_SetConfig+0x4cc>
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800459c:	d212      	bcs.n	80045c4 <UART_SetConfig+0x4cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	f023 030f 	bic.w	r3, r3, #15
 80045a6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	085b      	lsrs	r3, r3, #1
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	f003 0307 	and.w	r3, r3, #7
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	89fb      	ldrh	r3, [r7, #14]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	89fa      	ldrh	r2, [r7, #14]
 80045c0:	60da      	str	r2, [r3, #12]
 80045c2:	e057      	b.n	8004674 <UART_SetConfig+0x57c>
      }
      else
      {
        ret = HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	76bb      	strb	r3, [r7, #26]
 80045c8:	e054      	b.n	8004674 <UART_SetConfig+0x57c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045ca:	7efb      	ldrb	r3, [r7, #27]
 80045cc:	2b08      	cmp	r3, #8
 80045ce:	d828      	bhi.n	8004622 <UART_SetConfig+0x52a>
 80045d0:	a201      	add	r2, pc, #4	; (adr r2, 80045d8 <UART_SetConfig+0x4e0>)
 80045d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d6:	bf00      	nop
 80045d8:	080045fd 	.word	0x080045fd
 80045dc:	08004605 	.word	0x08004605
 80045e0:	0800460d 	.word	0x0800460d
 80045e4:	08004623 	.word	0x08004623
 80045e8:	08004613 	.word	0x08004613
 80045ec:	08004623 	.word	0x08004623
 80045f0:	08004623 	.word	0x08004623
 80045f4:	08004623 	.word	0x08004623
 80045f8:	0800461b 	.word	0x0800461b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045fc:	f7fe fd64 	bl	80030c8 <HAL_RCC_GetPCLK1Freq>
 8004600:	6178      	str	r0, [r7, #20]
        break;
 8004602:	e013      	b.n	800462c <UART_SetConfig+0x534>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004604:	f7fe fd74 	bl	80030f0 <HAL_RCC_GetPCLK2Freq>
 8004608:	6178      	str	r0, [r7, #20]
        break;
 800460a:	e00f      	b.n	800462c <UART_SetConfig+0x534>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800460c:	4b24      	ldr	r3, [pc, #144]	; (80046a0 <UART_SetConfig+0x5a8>)
 800460e:	617b      	str	r3, [r7, #20]
        break;
 8004610:	e00c      	b.n	800462c <UART_SetConfig+0x534>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004612:	f7fe fcab 	bl	8002f6c <HAL_RCC_GetSysClockFreq>
 8004616:	6178      	str	r0, [r7, #20]
        break;
 8004618:	e008      	b.n	800462c <UART_SetConfig+0x534>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800461a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800461e:	617b      	str	r3, [r7, #20]
        break;
 8004620:	e004      	b.n	800462c <UART_SetConfig+0x534>
      default:
        pclk = 0U;
 8004622:	2300      	movs	r3, #0
 8004624:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	76bb      	strb	r3, [r7, #26]
        break;
 800462a:	bf00      	nop
    }

    if (pclk != 0U)
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d020      	beq.n	8004674 <UART_SetConfig+0x57c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004636:	4a19      	ldr	r2, [pc, #100]	; (800469c <UART_SetConfig+0x5a4>)
 8004638:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800463c:	461a      	mov	r2, r3
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	fbb3 f2f2 	udiv	r2, r3, r2
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	085b      	lsrs	r3, r3, #1
 800464a:	441a      	add	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	fbb2 f3f3 	udiv	r3, r2, r3
 8004654:	b29b      	uxth	r3, r3
 8004656:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	2b0f      	cmp	r3, #15
 800465c:	d908      	bls.n	8004670 <UART_SetConfig+0x578>
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004664:	d204      	bcs.n	8004670 <UART_SetConfig+0x578>
      {
        huart->Instance->BRR = usartdiv;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	60da      	str	r2, [r3, #12]
 800466e:	e001      	b.n	8004674 <UART_SetConfig+0x57c>
      }
      else
      {
        ret = HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004690:	7ebb      	ldrb	r3, [r7, #26]
}
 8004692:	4618      	mov	r0, r3
 8004694:	3720      	adds	r7, #32
 8004696:	46bd      	mov	sp, r7
 8004698:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800469c:	0800d5e8 	.word	0x0800d5e8
 80046a0:	00f42400 	.word	0x00f42400

080046a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00a      	beq.n	80046ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	430a      	orrs	r2, r1
 80046cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00a      	beq.n	80046f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	430a      	orrs	r2, r1
 80046ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00a      	beq.n	8004712 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004716:	f003 0308 	and.w	r3, r3, #8
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00a      	beq.n	8004734 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	430a      	orrs	r2, r1
 8004732:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004738:	f003 0310 	and.w	r3, r3, #16
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00a      	beq.n	8004756 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800475a:	f003 0320 	and.w	r3, r3, #32
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00a      	beq.n	8004778 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	430a      	orrs	r2, r1
 8004776:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004780:	2b00      	cmp	r3, #0
 8004782:	d01a      	beq.n	80047ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	430a      	orrs	r2, r1
 8004798:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800479e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047a2:	d10a      	bne.n	80047ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00a      	beq.n	80047dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	430a      	orrs	r2, r1
 80047da:	605a      	str	r2, [r3, #4]
  }
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af02      	add	r7, sp, #8
 80047ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047f8:	f7fd fa04 	bl	8001c04 <HAL_GetTick>
 80047fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0308 	and.w	r3, r3, #8
 8004808:	2b08      	cmp	r3, #8
 800480a:	d10e      	bne.n	800482a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800480c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004810:	9300      	str	r3, [sp, #0]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 f82f 	bl	800487e <UART_WaitOnFlagUntilTimeout>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e025      	b.n	8004876 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0304 	and.w	r3, r3, #4
 8004834:	2b04      	cmp	r3, #4
 8004836:	d10e      	bne.n	8004856 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004838:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800483c:	9300      	str	r3, [sp, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f819 	bl	800487e <UART_WaitOnFlagUntilTimeout>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e00f      	b.n	8004876 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2220      	movs	r2, #32
 800485a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2220      	movs	r2, #32
 8004862:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	b084      	sub	sp, #16
 8004882:	af00      	add	r7, sp, #0
 8004884:	60f8      	str	r0, [r7, #12]
 8004886:	60b9      	str	r1, [r7, #8]
 8004888:	603b      	str	r3, [r7, #0]
 800488a:	4613      	mov	r3, r2
 800488c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800488e:	e062      	b.n	8004956 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004896:	d05e      	beq.n	8004956 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004898:	f7fd f9b4 	bl	8001c04 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	69ba      	ldr	r2, [r7, #24]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d302      	bcc.n	80048ae <UART_WaitOnFlagUntilTimeout+0x30>
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d11d      	bne.n	80048ea <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80048bc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f022 0201 	bic.w	r2, r2, #1
 80048cc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2220      	movs	r2, #32
 80048d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2220      	movs	r2, #32
 80048da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e045      	b.n	8004976 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0304 	and.w	r3, r3, #4
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d02e      	beq.n	8004956 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	69db      	ldr	r3, [r3, #28]
 80048fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004902:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004906:	d126      	bne.n	8004956 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004910:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004920:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	689a      	ldr	r2, [r3, #8]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f022 0201 	bic.w	r2, r2, #1
 8004930:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2220      	movs	r2, #32
 8004936:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2220      	movs	r2, #32
 800493e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2220      	movs	r2, #32
 8004946:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e00f      	b.n	8004976 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	69da      	ldr	r2, [r3, #28]
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	4013      	ands	r3, r2
 8004960:	68ba      	ldr	r2, [r7, #8]
 8004962:	429a      	cmp	r2, r3
 8004964:	bf0c      	ite	eq
 8004966:	2301      	moveq	r3, #1
 8004968:	2300      	movne	r3, #0
 800496a:	b2db      	uxtb	r3, r3
 800496c:	461a      	mov	r2, r3
 800496e:	79fb      	ldrb	r3, [r7, #7]
 8004970:	429a      	cmp	r2, r3
 8004972:	d08d      	beq.n	8004890 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800497e:	b480      	push	{r7}
 8004980:	b085      	sub	sp, #20
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800498c:	2b01      	cmp	r3, #1
 800498e:	d101      	bne.n	8004994 <HAL_UARTEx_DisableFifoMode+0x16>
 8004990:	2302      	movs	r3, #2
 8004992:	e027      	b.n	80049e4 <HAL_UARTEx_DisableFifoMode+0x66>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2224      	movs	r2, #36	; 0x24
 80049a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f022 0201 	bic.w	r2, r2, #1
 80049ba:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80049c2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2220      	movs	r2, #32
 80049d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3714      	adds	r7, #20
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d101      	bne.n	8004a08 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004a04:	2302      	movs	r3, #2
 8004a06:	e02d      	b.n	8004a64 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2224      	movs	r2, #36	; 0x24
 8004a14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f022 0201 	bic.w	r2, r2, #1
 8004a2e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	430a      	orrs	r2, r1
 8004a42:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 f84f 	bl	8004ae8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2220      	movs	r2, #32
 8004a56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3710      	adds	r7, #16
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d101      	bne.n	8004a84 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004a80:	2302      	movs	r3, #2
 8004a82:	e02d      	b.n	8004ae0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2224      	movs	r2, #36	; 0x24
 8004a90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f022 0201 	bic.w	r2, r2, #1
 8004aaa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	430a      	orrs	r2, r1
 8004abe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 f811 	bl	8004ae8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2220      	movs	r2, #32
 8004ad2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3710      	adds	r7, #16
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b089      	sub	sp, #36	; 0x24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004af0:	4a2f      	ldr	r2, [pc, #188]	; (8004bb0 <UARTEx_SetNbDataToProcess+0xc8>)
 8004af2:	f107 0314 	add.w	r3, r7, #20
 8004af6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004afa:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004afe:	4a2d      	ldr	r2, [pc, #180]	; (8004bb4 <UARTEx_SetNbDataToProcess+0xcc>)
 8004b00:	f107 030c 	add.w	r3, r7, #12
 8004b04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004b08:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d108      	bne.n	8004b26 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004b24:	e03d      	b.n	8004ba2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004b26:	2308      	movs	r3, #8
 8004b28:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004b2a:	2308      	movs	r3, #8
 8004b2c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	0e5b      	lsrs	r3, r3, #25
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	f003 0307 	and.w	r3, r3, #7
 8004b3c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	0f5b      	lsrs	r3, r3, #29
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	f003 0307 	and.w	r3, r3, #7
 8004b4c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004b4e:	7fbb      	ldrb	r3, [r7, #30]
 8004b50:	7f3a      	ldrb	r2, [r7, #28]
 8004b52:	f107 0120 	add.w	r1, r7, #32
 8004b56:	440a      	add	r2, r1
 8004b58:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004b5c:	fb02 f303 	mul.w	r3, r2, r3
 8004b60:	7f3a      	ldrb	r2, [r7, #28]
 8004b62:	f107 0120 	add.w	r1, r7, #32
 8004b66:	440a      	add	r2, r1
 8004b68:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004b6c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004b78:	7ffb      	ldrb	r3, [r7, #31]
 8004b7a:	7f7a      	ldrb	r2, [r7, #29]
 8004b7c:	f107 0120 	add.w	r1, r7, #32
 8004b80:	440a      	add	r2, r1
 8004b82:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004b86:	fb02 f303 	mul.w	r3, r2, r3
 8004b8a:	7f7a      	ldrb	r2, [r7, #29]
 8004b8c:	f107 0120 	add.w	r1, r7, #32
 8004b90:	440a      	add	r2, r1
 8004b92:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004b96:	fb93 f3f2 	sdiv	r3, r3, r2
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004ba2:	bf00      	nop
 8004ba4:	3724      	adds	r7, #36	; 0x24
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	0800c97c 	.word	0x0800c97c
 8004bb4:	0800c984 	.word	0x0800c984

08004bb8 <facedetection_configure_activations>:


AI_DECLARE_STATIC
ai_bool facedetection_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, AI_FACEDETECTION_ACTIVATIONS_ALIGNMENT));
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	3303      	adds	r3, #3
 8004bc8:	f023 0303 	bic.w	r3, r3, #3
 8004bcc:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    conv2d_4_scratch1_array.data = AI_PTR(activations + 10624);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f503 5326 	add.w	r3, r3, #10624	; 0x2980
 8004bd4:	4a41      	ldr	r2, [pc, #260]	; (8004cdc <facedetection_configure_activations+0x124>)
 8004bd6:	6093      	str	r3, [r2, #8]
    conv2d_4_scratch1_array.data_start = AI_PTR(activations + 10624);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f503 5326 	add.w	r3, r3, #10624	; 0x2980
 8004bde:	4a3f      	ldr	r2, [pc, #252]	; (8004cdc <facedetection_configure_activations+0x124>)
 8004be0:	60d3      	str	r3, [r2, #12]
    conv2d_4_scratch0_array.data = AI_PTR(activations + 2048);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004be8:	4a3d      	ldr	r2, [pc, #244]	; (8004ce0 <facedetection_configure_activations+0x128>)
 8004bea:	6093      	str	r3, [r2, #8]
    conv2d_4_scratch0_array.data_start = AI_PTR(activations + 2048);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bf2:	4a3b      	ldr	r2, [pc, #236]	; (8004ce0 <facedetection_configure_activations+0x128>)
 8004bf4:	60d3      	str	r3, [r2, #12]
    conv2d_2_scratch1_array.data = AI_PTR(activations + 17504);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f503 4388 	add.w	r3, r3, #17408	; 0x4400
 8004bfc:	3360      	adds	r3, #96	; 0x60
 8004bfe:	4a39      	ldr	r2, [pc, #228]	; (8004ce4 <facedetection_configure_activations+0x12c>)
 8004c00:	6093      	str	r3, [r2, #8]
    conv2d_2_scratch1_array.data_start = AI_PTR(activations + 17504);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f503 4388 	add.w	r3, r3, #17408	; 0x4400
 8004c08:	3360      	adds	r3, #96	; 0x60
 8004c0a:	4a36      	ldr	r2, [pc, #216]	; (8004ce4 <facedetection_configure_activations+0x12c>)
 8004c0c:	60d3      	str	r3, [r2, #12]
    conv2d_2_scratch0_array.data = AI_PTR(activations + 9056);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f503 530d 	add.w	r3, r3, #9024	; 0x2340
 8004c14:	3320      	adds	r3, #32
 8004c16:	4a34      	ldr	r2, [pc, #208]	; (8004ce8 <facedetection_configure_activations+0x130>)
 8004c18:	6093      	str	r3, [r2, #8]
    conv2d_2_scratch0_array.data_start = AI_PTR(activations + 9056);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f503 530d 	add.w	r3, r3, #9024	; 0x2340
 8004c20:	3320      	adds	r3, #32
 8004c22:	4a31      	ldr	r2, [pc, #196]	; (8004ce8 <facedetection_configure_activations+0x130>)
 8004c24:	60d3      	str	r3, [r2, #12]
    conv2d_0_scratch1_array.data = AI_PTR(activations + 14284);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f503 535f 	add.w	r3, r3, #14272	; 0x37c0
 8004c2c:	330c      	adds	r3, #12
 8004c2e:	4a2f      	ldr	r2, [pc, #188]	; (8004cec <facedetection_configure_activations+0x134>)
 8004c30:	6093      	str	r3, [r2, #8]
    conv2d_0_scratch1_array.data_start = AI_PTR(activations + 14284);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f503 535f 	add.w	r3, r3, #14272	; 0x37c0
 8004c38:	330c      	adds	r3, #12
 8004c3a:	4a2c      	ldr	r2, [pc, #176]	; (8004cec <facedetection_configure_activations+0x134>)
 8004c3c:	60d3      	str	r3, [r2, #12]
    conv2d_0_scratch0_array.data = AI_PTR(activations + 9056);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f503 530d 	add.w	r3, r3, #9024	; 0x2340
 8004c44:	3320      	adds	r3, #32
 8004c46:	4a2a      	ldr	r2, [pc, #168]	; (8004cf0 <facedetection_configure_activations+0x138>)
 8004c48:	6093      	str	r3, [r2, #8]
    conv2d_0_scratch0_array.data_start = AI_PTR(activations + 9056);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f503 530d 	add.w	r3, r3, #9024	; 0x2340
 8004c50:	3320      	adds	r3, #32
 8004c52:	4a27      	ldr	r2, [pc, #156]	; (8004cf0 <facedetection_configure_activations+0x138>)
 8004c54:	60d3      	str	r3, [r2, #12]
    input_output_array.data = AI_PTR(NULL);
 8004c56:	4b27      	ldr	r3, [pc, #156]	; (8004cf4 <facedetection_configure_activations+0x13c>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	609a      	str	r2, [r3, #8]
    input_output_array.data_start = AI_PTR(NULL);
 8004c5c:	4b25      	ldr	r3, [pc, #148]	; (8004cf4 <facedetection_configure_activations+0x13c>)
 8004c5e:	2200      	movs	r2, #0
 8004c60:	60da      	str	r2, [r3, #12]
    conv2d_0_output_array.data = AI_PTR(activations + 864);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004c68:	4a23      	ldr	r2, [pc, #140]	; (8004cf8 <facedetection_configure_activations+0x140>)
 8004c6a:	6093      	str	r3, [r2, #8]
    conv2d_0_output_array.data_start = AI_PTR(activations + 864);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004c72:	4a21      	ldr	r2, [pc, #132]	; (8004cf8 <facedetection_configure_activations+0x140>)
 8004c74:	60d3      	str	r3, [r2, #12]
    conv2d_2_output_array.data = AI_PTR(activations + 0);
 8004c76:	4a21      	ldr	r2, [pc, #132]	; (8004cfc <facedetection_configure_activations+0x144>)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6093      	str	r3, [r2, #8]
    conv2d_2_output_array.data_start = AI_PTR(activations + 0);
 8004c7c:	4a1f      	ldr	r2, [pc, #124]	; (8004cfc <facedetection_configure_activations+0x144>)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	60d3      	str	r3, [r2, #12]
    conv2d_4_output_array.data = AI_PTR(activations + 11136);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f503 532e 	add.w	r3, r3, #11136	; 0x2b80
 8004c88:	4a1d      	ldr	r2, [pc, #116]	; (8004d00 <facedetection_configure_activations+0x148>)
 8004c8a:	6093      	str	r3, [r2, #8]
    conv2d_4_output_array.data_start = AI_PTR(activations + 11136);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f503 532e 	add.w	r3, r3, #11136	; 0x2b80
 8004c92:	4a1b      	ldr	r2, [pc, #108]	; (8004d00 <facedetection_configure_activations+0x148>)
 8004c94:	60d3      	str	r3, [r2, #12]
    dense_6_output_array.data = AI_PTR(activations + 0);
 8004c96:	4a1b      	ldr	r2, [pc, #108]	; (8004d04 <facedetection_configure_activations+0x14c>)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6093      	str	r3, [r2, #8]
    dense_6_output_array.data_start = AI_PTR(activations + 0);
 8004c9c:	4a19      	ldr	r2, [pc, #100]	; (8004d04 <facedetection_configure_activations+0x14c>)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	60d3      	str	r3, [r2, #12]
    dense_6_fmt_output_array.data = AI_PTR(activations + 12);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	330c      	adds	r3, #12
 8004ca6:	4a18      	ldr	r2, [pc, #96]	; (8004d08 <facedetection_configure_activations+0x150>)
 8004ca8:	6093      	str	r3, [r2, #8]
    dense_6_fmt_output_array.data_start = AI_PTR(activations + 12);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	330c      	adds	r3, #12
 8004cae:	4a16      	ldr	r2, [pc, #88]	; (8004d08 <facedetection_configure_activations+0x150>)
 8004cb0:	60d3      	str	r3, [r2, #12]
    nl_7_output_array.data = AI_PTR(activations + 52);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	3334      	adds	r3, #52	; 0x34
 8004cb6:	4a15      	ldr	r2, [pc, #84]	; (8004d0c <facedetection_configure_activations+0x154>)
 8004cb8:	6093      	str	r3, [r2, #8]
    nl_7_output_array.data_start = AI_PTR(activations + 52);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	3334      	adds	r3, #52	; 0x34
 8004cbe:	4a13      	ldr	r2, [pc, #76]	; (8004d0c <facedetection_configure_activations+0x154>)
 8004cc0:	60d3      	str	r3, [r2, #12]
    nl_7_fmt_output_array.data = AI_PTR(NULL);
 8004cc2:	4b13      	ldr	r3, [pc, #76]	; (8004d10 <facedetection_configure_activations+0x158>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	609a      	str	r2, [r3, #8]
    nl_7_fmt_output_array.data_start = AI_PTR(NULL);
 8004cc8:	4b11      	ldr	r3, [pc, #68]	; (8004d10 <facedetection_configure_activations+0x158>)
 8004cca:	2200      	movs	r2, #0
 8004ccc:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 8004cce:	2301      	movs	r3, #1
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3714      	adds	r7, #20
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr
 8004cdc:	20000094 	.word	0x20000094
 8004ce0:	200000a4 	.word	0x200000a4
 8004ce4:	200000b4 	.word	0x200000b4
 8004ce8:	200000c4 	.word	0x200000c4
 8004cec:	200000d4 	.word	0x200000d4
 8004cf0:	200000e4 	.word	0x200000e4
 8004cf4:	20000174 	.word	0x20000174
 8004cf8:	20000184 	.word	0x20000184
 8004cfc:	20000194 	.word	0x20000194
 8004d00:	200001a4 	.word	0x200001a4
 8004d04:	200001b4 	.word	0x200001b4
 8004d08:	200001c4 	.word	0x200001c4
 8004d0c:	200001d4 	.word	0x200001d4
 8004d10:	200001e4 	.word	0x200001e4

08004d14 <facedetection_configure_weights>:


AI_DECLARE_STATIC
ai_bool facedetection_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_6_bias_array.format |= AI_FMT_FLAG_CONST;
 8004d24:	4b48      	ldr	r3, [pc, #288]	; (8004e48 <facedetection_configure_weights+0x134>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d2c:	4a46      	ldr	r2, [pc, #280]	; (8004e48 <facedetection_configure_weights+0x134>)
 8004d2e:	6013      	str	r3, [r2, #0]
    dense_6_bias_array.data = AI_PTR(weights + 89952);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 8004d36:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8004d3a:	4a43      	ldr	r2, [pc, #268]	; (8004e48 <facedetection_configure_weights+0x134>)
 8004d3c:	6093      	str	r3, [r2, #8]
    dense_6_bias_array.data_start = AI_PTR(weights + 89952);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 8004d44:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8004d48:	4a3f      	ldr	r2, [pc, #252]	; (8004e48 <facedetection_configure_weights+0x134>)
 8004d4a:	60d3      	str	r3, [r2, #12]
    dense_6_weights_array.format |= AI_FMT_FLAG_CONST;
 8004d4c:	4b3f      	ldr	r3, [pc, #252]	; (8004e4c <facedetection_configure_weights+0x138>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d54:	4a3d      	ldr	r2, [pc, #244]	; (8004e4c <facedetection_configure_weights+0x138>)
 8004d56:	6013      	str	r3, [r2, #0]
    dense_6_weights_array.data = AI_PTR(weights + 79712);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f503 339b 	add.w	r3, r3, #79360	; 0x13600
 8004d5e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8004d62:	4a3a      	ldr	r2, [pc, #232]	; (8004e4c <facedetection_configure_weights+0x138>)
 8004d64:	6093      	str	r3, [r2, #8]
    dense_6_weights_array.data_start = AI_PTR(weights + 79712);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f503 339b 	add.w	r3, r3, #79360	; 0x13600
 8004d6c:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8004d70:	4a36      	ldr	r2, [pc, #216]	; (8004e4c <facedetection_configure_weights+0x138>)
 8004d72:	60d3      	str	r3, [r2, #12]
    conv2d_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8004d74:	4b36      	ldr	r3, [pc, #216]	; (8004e50 <facedetection_configure_weights+0x13c>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d7c:	4a34      	ldr	r2, [pc, #208]	; (8004e50 <facedetection_configure_weights+0x13c>)
 8004d7e:	6013      	str	r3, [r2, #0]
    conv2d_4_bias_array.data = AI_PTR(weights + 79456);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f503 339b 	add.w	r3, r3, #79360	; 0x13600
 8004d86:	3360      	adds	r3, #96	; 0x60
 8004d88:	4a31      	ldr	r2, [pc, #196]	; (8004e50 <facedetection_configure_weights+0x13c>)
 8004d8a:	6093      	str	r3, [r2, #8]
    conv2d_4_bias_array.data_start = AI_PTR(weights + 79456);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f503 339b 	add.w	r3, r3, #79360	; 0x13600
 8004d92:	3360      	adds	r3, #96	; 0x60
 8004d94:	4a2e      	ldr	r2, [pc, #184]	; (8004e50 <facedetection_configure_weights+0x13c>)
 8004d96:	60d3      	str	r3, [r2, #12]
    conv2d_4_weights_array.format |= AI_FMT_FLAG_CONST;
 8004d98:	4b2e      	ldr	r3, [pc, #184]	; (8004e54 <facedetection_configure_weights+0x140>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004da0:	4a2c      	ldr	r2, [pc, #176]	; (8004e54 <facedetection_configure_weights+0x140>)
 8004da2:	6013      	str	r3, [r2, #0]
    conv2d_4_weights_array.data = AI_PTR(weights + 28256);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f503 43dc 	add.w	r3, r3, #28160	; 0x6e00
 8004daa:	3360      	adds	r3, #96	; 0x60
 8004dac:	4a29      	ldr	r2, [pc, #164]	; (8004e54 <facedetection_configure_weights+0x140>)
 8004dae:	6093      	str	r3, [r2, #8]
    conv2d_4_weights_array.data_start = AI_PTR(weights + 28256);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f503 43dc 	add.w	r3, r3, #28160	; 0x6e00
 8004db6:	3360      	adds	r3, #96	; 0x60
 8004db8:	4a26      	ldr	r2, [pc, #152]	; (8004e54 <facedetection_configure_weights+0x140>)
 8004dba:	60d3      	str	r3, [r2, #12]
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8004dbc:	4b26      	ldr	r3, [pc, #152]	; (8004e58 <facedetection_configure_weights+0x144>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004dc4:	4a24      	ldr	r2, [pc, #144]	; (8004e58 <facedetection_configure_weights+0x144>)
 8004dc6:	6013      	str	r3, [r2, #0]
    conv2d_2_bias_array.data = AI_PTR(weights + 28128);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f503 43db 	add.w	r3, r3, #28032	; 0x6d80
 8004dce:	3360      	adds	r3, #96	; 0x60
 8004dd0:	4a21      	ldr	r2, [pc, #132]	; (8004e58 <facedetection_configure_weights+0x144>)
 8004dd2:	6093      	str	r3, [r2, #8]
    conv2d_2_bias_array.data_start = AI_PTR(weights + 28128);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f503 43db 	add.w	r3, r3, #28032	; 0x6d80
 8004dda:	3360      	adds	r3, #96	; 0x60
 8004ddc:	4a1e      	ldr	r2, [pc, #120]	; (8004e58 <facedetection_configure_weights+0x144>)
 8004dde:	60d3      	str	r3, [r2, #12]
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8004de0:	4b1e      	ldr	r3, [pc, #120]	; (8004e5c <facedetection_configure_weights+0x148>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004de8:	4a1c      	ldr	r2, [pc, #112]	; (8004e5c <facedetection_configure_weights+0x148>)
 8004dea:	6013      	str	r3, [r2, #0]
    conv2d_2_weights_array.data = AI_PTR(weights + 2528);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 8004df2:	4a1a      	ldr	r2, [pc, #104]	; (8004e5c <facedetection_configure_weights+0x148>)
 8004df4:	6093      	str	r3, [r2, #8]
    conv2d_2_weights_array.data_start = AI_PTR(weights + 2528);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 8004dfc:	4a17      	ldr	r2, [pc, #92]	; (8004e5c <facedetection_configure_weights+0x148>)
 8004dfe:	60d3      	str	r3, [r2, #12]
    conv2d_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8004e00:	4b17      	ldr	r3, [pc, #92]	; (8004e60 <facedetection_configure_weights+0x14c>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e08:	4a15      	ldr	r2, [pc, #84]	; (8004e60 <facedetection_configure_weights+0x14c>)
 8004e0a:	6013      	str	r3, [r2, #0]
    conv2d_0_bias_array.data = AI_PTR(weights + 2400);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 8004e12:	4a13      	ldr	r2, [pc, #76]	; (8004e60 <facedetection_configure_weights+0x14c>)
 8004e14:	6093      	str	r3, [r2, #8]
    conv2d_0_bias_array.data_start = AI_PTR(weights + 2400);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 8004e1c:	4a10      	ldr	r2, [pc, #64]	; (8004e60 <facedetection_configure_weights+0x14c>)
 8004e1e:	60d3      	str	r3, [r2, #12]
    conv2d_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8004e20:	4b10      	ldr	r3, [pc, #64]	; (8004e64 <facedetection_configure_weights+0x150>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e28:	4a0e      	ldr	r2, [pc, #56]	; (8004e64 <facedetection_configure_weights+0x150>)
 8004e2a:	6013      	str	r3, [r2, #0]
    conv2d_0_weights_array.data = AI_PTR(weights + 0);
 8004e2c:	4a0d      	ldr	r2, [pc, #52]	; (8004e64 <facedetection_configure_weights+0x150>)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6093      	str	r3, [r2, #8]
    conv2d_0_weights_array.data_start = AI_PTR(weights + 0);
 8004e32:	4a0c      	ldr	r2, [pc, #48]	; (8004e64 <facedetection_configure_weights+0x150>)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	60d3      	str	r3, [r2, #12]
  }

  return true;
 8004e38:	2301      	movs	r3, #1
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3714      	adds	r7, #20
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	200000f4 	.word	0x200000f4
 8004e4c:	20000104 	.word	0x20000104
 8004e50:	20000114 	.word	0x20000114
 8004e54:	20000124 	.word	0x20000124
 8004e58:	20000134 	.word	0x20000134
 8004e5c:	20000144 	.word	0x20000144
 8004e60:	20000154 	.word	0x20000154
 8004e64:	20000164 	.word	0x20000164

08004e68 <ai_facedetection_create>:
}

AI_API_ENTRY
ai_error ai_facedetection_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af02      	add	r7, sp, #8
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8004e72:	2300      	movs	r3, #0
 8004e74:	9301      	str	r3, [sp, #4]
 8004e76:	2303      	movs	r3, #3
 8004e78:	9300      	str	r3, [sp, #0]
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	4a04      	ldr	r2, [pc, #16]	; (8004e90 <ai_facedetection_create+0x28>)
 8004e7e:	6839      	ldr	r1, [r7, #0]
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 f881 	bl	8004f88 <ai_platform_network_create>
 8004e86:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3708      	adds	r7, #8
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	20000034 	.word	0x20000034

08004e94 <ai_facedetection_init>:
}

AI_API_ENTRY
ai_bool ai_facedetection_init(
  ai_handle network, const ai_network_params* params)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8004e9e:	6839      	ldr	r1, [r7, #0]
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 f8cb 	bl	800503c <ai_platform_network_init>
 8004ea6:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d101      	bne.n	8004eb2 <ai_facedetection_init+0x1e>
 8004eae:	2300      	movs	r3, #0
 8004eb0:	e02b      	b.n	8004f0a <ai_facedetection_init+0x76>

  ai_bool ok = true;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	72fb      	strb	r3, [r7, #11]
  ok &= facedetection_configure_weights(net_ctx, &params->params);
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	4619      	mov	r1, r3
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f7ff ff2a 	bl	8004d14 <facedetection_configure_weights>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	7afb      	ldrb	r3, [r7, #11]
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	bf14      	ite	ne
 8004ecc:	2301      	movne	r3, #1
 8004ece:	2300      	moveq	r3, #0
 8004ed0:	72fb      	strb	r3, [r7, #11]
  ok &= facedetection_configure_activations(net_ctx, &params->activations);
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	3318      	adds	r3, #24
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	68f8      	ldr	r0, [r7, #12]
 8004eda:	f7ff fe6d 	bl	8004bb8 <facedetection_configure_activations>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	7afb      	ldrb	r3, [r7, #11]
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	bf14      	ite	ne
 8004eea:	2301      	movne	r3, #1
 8004eec:	2300      	moveq	r3, #0
 8004eee:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 f923 	bl	800513c <ai_platform_network_post_init>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	461a      	mov	r2, r3
 8004efa:	7afb      	ldrb	r3, [r7, #11]
 8004efc:	4013      	ands	r3, r2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	bf14      	ite	ne
 8004f02:	2301      	movne	r3, #1
 8004f04:	2300      	moveq	r3, #0
 8004f06:	72fb      	strb	r3, [r7, #11]

  return ok;
 8004f08:	7afb      	ldrb	r3, [r7, #11]
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}

08004f12 <ai_facedetection_run>:


AI_API_ENTRY
ai_i32 ai_facedetection_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b084      	sub	sp, #16
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	60f8      	str	r0, [r7, #12]
 8004f1a:	60b9      	str	r1, [r7, #8]
 8004f1c:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	68b9      	ldr	r1, [r7, #8]
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f000 f952 	bl	80051cc <ai_platform_network_process>
 8004f28:	4603      	mov	r3, r0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3710      	adds	r7, #16
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
	...

08004f34 <ai_facedetection_data_weights_get>:
#include "facedetection_data.h"

ai_handle ai_facedetection_data_weights_get(void)
{
 8004f34:	b480      	push	{r7}
 8004f36:	af00      	add	r7, sp, #0
    0x0e, 0x00, 0x00, 0x67, 0x03, 0x00, 0x00, 0x2d, 0x05,
    0x00, 0x00, 0xf4, 0x08, 0x00, 0x00, 0x31, 0xff, 0xff,
    0xff, 0x92, 0xf8, 0xff, 0xff, 0xdc, 0xf3, 0xff, 0xff
  };

  return AI_HANDLE_PTR(s_facedetection_weights);
 8004f38:	4b02      	ldr	r3, [pc, #8]	; (8004f44 <ai_facedetection_data_weights_get+0x10>)

}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr
 8004f44:	0800d7d0 	.word	0x0800d7d0

08004f48 <_platform_network_state_setup.isra.1>:
 8004f48:	b430      	push	{r4, r5}
 8004f4a:	68dd      	ldr	r5, [r3, #12]
 8004f4c:	695c      	ldr	r4, [r3, #20]
 8004f4e:	68ed      	ldr	r5, [r5, #12]
 8004f50:	68e4      	ldr	r4, [r4, #12]
 8004f52:	fb04 f405 	mul.w	r4, r4, r5
 8004f56:	6084      	str	r4, [r0, #8]
 8004f58:	8809      	ldrh	r1, [r1, #0]
 8004f5a:	fb04 f401 	mul.w	r4, r4, r1
 8004f5e:	60c4      	str	r4, [r0, #12]
 8004f60:	6811      	ldr	r1, [r2, #0]
 8004f62:	6041      	str	r1, [r0, #4]
 8004f64:	6812      	ldr	r2, [r2, #0]
 8004f66:	4414      	add	r4, r2
 8004f68:	6004      	str	r4, [r0, #0]
 8004f6a:	699a      	ldr	r2, [r3, #24]
 8004f6c:	6814      	ldr	r4, [r2, #0]
 8004f6e:	00a4      	lsls	r4, r4, #2
 8004f70:	d407      	bmi.n	8004f82 <_platform_network_state_setup.isra.1+0x3a>
 8004f72:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
 8004f76:	1b64      	subs	r4, r4, r5
 8004f78:	4421      	add	r1, r4
 8004f7a:	6091      	str	r1, [r2, #8]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	6842      	ldr	r2, [r0, #4]
 8004f80:	60da      	str	r2, [r3, #12]
 8004f82:	bc30      	pop	{r4, r5}
 8004f84:	4770      	bx	lr
	...

08004f88 <ai_platform_network_create>:
 8004f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f8c:	4d24      	ldr	r5, [pc, #144]	; (8005020 <ai_platform_network_create+0x98>)
 8004f8e:	2701      	movs	r7, #1
 8004f90:	46ac      	mov	ip, r5
 8004f92:	4e24      	ldr	r6, [pc, #144]	; (8005024 <ai_platform_network_create+0x9c>)
 8004f94:	b082      	sub	sp, #8
 8004f96:	6831      	ldr	r1, [r6, #0]
 8004f98:	f89d 8020 	ldrb.w	r8, [sp, #32]
 8004f9c:	f021 0101 	bic.w	r1, r1, #1
 8004fa0:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8004fa4:	6031      	str	r1, [r6, #0]
 8004fa6:	602f      	str	r7, [r5, #0]
 8004fa8:	f8dc 5000 	ldr.w	r5, [ip]
 8004fac:	2d00      	cmp	r5, #0
 8004fae:	d1fb      	bne.n	8004fa8 <ai_platform_network_create+0x20>
 8004fb0:	491d      	ldr	r1, [pc, #116]	; (8005028 <ai_platform_network_create+0xa0>)
 8004fb2:	4f1e      	ldr	r7, [pc, #120]	; (800502c <ai_platform_network_create+0xa4>)
 8004fb4:	4e1e      	ldr	r6, [pc, #120]	; (8005030 <ai_platform_network_create+0xa8>)
 8004fb6:	600f      	str	r7, [r1, #0]
 8004fb8:	6809      	ldr	r1, [r1, #0]
 8004fba:	42b1      	cmp	r1, r6
 8004fbc:	d000      	beq.n	8004fc0 <ai_platform_network_create+0x38>
 8004fbe:	e7fe      	b.n	8004fbe <ai_platform_network_create+0x36>
 8004fc0:	b1d0      	cbz	r0, 8004ff8 <ai_platform_network_create+0x70>
 8004fc2:	461f      	mov	r7, r3
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	4a1b      	ldr	r2, [pc, #108]	; (8005034 <ai_platform_network_create+0xac>)
 8004fc8:	4606      	mov	r6, r0
 8004fca:	601a      	str	r2, [r3, #0]
 8004fcc:	6003      	str	r3, [r0, #0]
 8004fce:	f000 fc53 	bl	8005878 <core_init>
 8004fd2:	b1b0      	cbz	r0, 8005002 <ai_platform_network_create+0x7a>
 8004fd4:	0223      	lsls	r3, r4, #8
 8004fd6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8004fda:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 8004fde:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 8004fe2:	d910      	bls.n	8005006 <ai_platform_network_create+0x7e>
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	2100      	movs	r1, #0
 8004fe8:	2310      	movs	r3, #16
 8004fea:	6031      	str	r1, [r6, #0]
 8004fec:	2000      	movs	r0, #0
 8004fee:	f362 0007 	bfi	r0, r2, #0, #8
 8004ff2:	f363 201f 	bfi	r0, r3, #8, #24
 8004ff6:	e001      	b.n	8004ffc <ai_platform_network_create+0x74>
 8004ff8:	f241 0010 	movw	r0, #4112	; 0x1010
 8004ffc:	b002      	add	sp, #8
 8004ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005002:	2230      	movs	r2, #48	; 0x30
 8005004:	e7ef      	b.n	8004fe6 <ai_platform_network_create+0x5e>
 8005006:	4b0c      	ldr	r3, [pc, #48]	; (8005038 <ai_platform_network_create+0xb0>)
 8005008:	a802      	add	r0, sp, #8
 800500a:	f840 3d04 	str.w	r3, [r0, #-4]!
 800500e:	f001 f93f 	bl	8006290 <ai_check_custom_types>
 8005012:	b110      	cbz	r0, 800501a <ai_platform_network_create+0x92>
 8005014:	462b      	mov	r3, r5
 8005016:	462a      	mov	r2, r5
 8005018:	e7e8      	b.n	8004fec <ai_platform_network_create+0x64>
 800501a:	2202      	movs	r2, #2
 800501c:	e7e3      	b.n	8004fe6 <ai_platform_network_create+0x5e>
 800501e:	bf00      	nop
 8005020:	40023008 	.word	0x40023008
 8005024:	e0002000 	.word	0xe0002000
 8005028:	40023000 	.word	0x40023000
 800502c:	f407a5c2 	.word	0xf407a5c2
 8005030:	b5e8b5cd 	.word	0xb5e8b5cd
 8005034:	a1c00100 	.word	0xa1c00100
 8005038:	84048403 	.word	0x84048403

0800503c <ai_platform_network_init>:
 800503c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800503e:	460c      	mov	r4, r1
 8005040:	4605      	mov	r5, r0
 8005042:	b120      	cbz	r0, 800504e <ai_platform_network_init+0x12>
 8005044:	4b37      	ldr	r3, [pc, #220]	; (8005124 <ai_platform_network_init+0xe8>)
 8005046:	6802      	ldr	r2, [r0, #0]
 8005048:	429a      	cmp	r2, r3
 800504a:	bf18      	it	ne
 800504c:	2500      	movne	r5, #0
 800504e:	4a36      	ldr	r2, [pc, #216]	; (8005128 <ai_platform_network_init+0xec>)
 8005050:	2001      	movs	r0, #1
 8005052:	4616      	mov	r6, r2
 8005054:	4935      	ldr	r1, [pc, #212]	; (800512c <ai_platform_network_init+0xf0>)
 8005056:	680b      	ldr	r3, [r1, #0]
 8005058:	f023 0301 	bic.w	r3, r3, #1
 800505c:	600b      	str	r3, [r1, #0]
 800505e:	6010      	str	r0, [r2, #0]
 8005060:	6833      	ldr	r3, [r6, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1fc      	bne.n	8005060 <ai_platform_network_init+0x24>
 8005066:	4b32      	ldr	r3, [pc, #200]	; (8005130 <ai_platform_network_init+0xf4>)
 8005068:	4932      	ldr	r1, [pc, #200]	; (8005134 <ai_platform_network_init+0xf8>)
 800506a:	4a33      	ldr	r2, [pc, #204]	; (8005138 <ai_platform_network_init+0xfc>)
 800506c:	6019      	str	r1, [r3, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4293      	cmp	r3, r2
 8005072:	d000      	beq.n	8005076 <ai_platform_network_init+0x3a>
 8005074:	e7fe      	b.n	8005074 <ai_platform_network_init+0x38>
 8005076:	b34d      	cbz	r5, 80050cc <ai_platform_network_init+0x90>
 8005078:	b354      	cbz	r4, 80050d0 <ai_platform_network_init+0x94>
 800507a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800507c:	6926      	ldr	r6, [r4, #16]
 800507e:	2f00      	cmp	r7, #0
 8005080:	d03f      	beq.n	8005102 <ai_platform_network_init+0xc6>
 8005082:	b36e      	cbz	r6, 80050e0 <ai_platform_network_init+0xa4>
 8005084:	4627      	mov	r7, r4
 8005086:	f04f 0c03 	mov.w	ip, #3
 800508a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800508c:	f105 0618 	add.w	r6, r5, #24
 8005090:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005092:	e897 0003 	ldmia.w	r7, {r0, r1}
 8005096:	e886 0003 	stmia.w	r6, {r0, r1}
 800509a:	3418      	adds	r4, #24
 800509c:	f105 0630 	add.w	r6, r5, #48	; 0x30
 80050a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050a2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80050a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80050a8:	e886 0003 	stmia.w	r6, {r0, r1}
 80050ac:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 80050ae:	f8c5 c00c 	str.w	ip, [r5, #12]
 80050b2:	b15a      	cbz	r2, 80050cc <ai_platform_network_init+0x90>
 80050b4:	68d3      	ldr	r3, [r2, #12]
 80050b6:	6095      	str	r5, [r2, #8]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d007      	beq.n	80050cc <ai_platform_network_init+0x90>
 80050bc:	b133      	cbz	r3, 80050cc <ai_platform_network_init+0x90>
 80050be:	68da      	ldr	r2, [r3, #12]
 80050c0:	609d      	str	r5, [r3, #8]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d002      	beq.n	80050cc <ai_platform_network_init+0x90>
 80050c6:	4613      	mov	r3, r2
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d1f8      	bne.n	80050be <ai_platform_network_init+0x82>
 80050cc:	4628      	mov	r0, r5
 80050ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050d0:	f105 0010 	add.w	r0, r5, #16
 80050d4:	2211      	movs	r2, #17
 80050d6:	2110      	movs	r1, #16
 80050d8:	f000 fbd0 	bl	800587c <core_set_error>
 80050dc:	4625      	mov	r5, r4
 80050de:	e7f5      	b.n	80050cc <ai_platform_network_init+0x90>
 80050e0:	8921      	ldrh	r1, [r4, #8]
 80050e2:	88e2      	ldrh	r2, [r4, #6]
 80050e4:	68e3      	ldr	r3, [r4, #12]
 80050e6:	fb02 f201 	mul.w	r2, r2, r1
 80050ea:	fb03 f302 	mul.w	r3, r3, r2
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d0c8      	beq.n	8005084 <ai_platform_network_init+0x48>
 80050f2:	f105 0010 	add.w	r0, r5, #16
 80050f6:	2212      	movs	r2, #18
 80050f8:	2110      	movs	r1, #16
 80050fa:	f000 fbbf 	bl	800587c <core_set_error>
 80050fe:	4635      	mov	r5, r6
 8005100:	e7e4      	b.n	80050cc <ai_platform_network_init+0x90>
 8005102:	8c21      	ldrh	r1, [r4, #32]
 8005104:	8be2      	ldrh	r2, [r4, #30]
 8005106:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005108:	fb02 f201 	mul.w	r2, r2, r1
 800510c:	fb03 f302 	mul.w	r3, r3, r2
 8005110:	2b00      	cmp	r3, #0
 8005112:	d0b6      	beq.n	8005082 <ai_platform_network_init+0x46>
 8005114:	f105 0010 	add.w	r0, r5, #16
 8005118:	2213      	movs	r2, #19
 800511a:	2110      	movs	r1, #16
 800511c:	f000 fbae 	bl	800587c <core_set_error>
 8005120:	463d      	mov	r5, r7
 8005122:	e7d3      	b.n	80050cc <ai_platform_network_init+0x90>
 8005124:	a1c00100 	.word	0xa1c00100
 8005128:	40023008 	.word	0x40023008
 800512c:	e0002000 	.word	0xe0002000
 8005130:	40023000 	.word	0x40023000
 8005134:	f407a5c2 	.word	0xf407a5c2
 8005138:	b5e8b5cd 	.word	0xb5e8b5cd

0800513c <ai_platform_network_post_init>:
 800513c:	b538      	push	{r3, r4, r5, lr}
 800513e:	4604      	mov	r4, r0
 8005140:	b120      	cbz	r0, 800514c <ai_platform_network_post_init+0x10>
 8005142:	4b1c      	ldr	r3, [pc, #112]	; (80051b4 <ai_platform_network_post_init+0x78>)
 8005144:	6802      	ldr	r2, [r0, #0]
 8005146:	429a      	cmp	r2, r3
 8005148:	bf18      	it	ne
 800514a:	2400      	movne	r4, #0
 800514c:	4a1a      	ldr	r2, [pc, #104]	; (80051b8 <ai_platform_network_post_init+0x7c>)
 800514e:	2001      	movs	r0, #1
 8005150:	4615      	mov	r5, r2
 8005152:	491a      	ldr	r1, [pc, #104]	; (80051bc <ai_platform_network_post_init+0x80>)
 8005154:	680b      	ldr	r3, [r1, #0]
 8005156:	f023 0301 	bic.w	r3, r3, #1
 800515a:	600b      	str	r3, [r1, #0]
 800515c:	6010      	str	r0, [r2, #0]
 800515e:	682b      	ldr	r3, [r5, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1fc      	bne.n	800515e <ai_platform_network_post_init+0x22>
 8005164:	4b16      	ldr	r3, [pc, #88]	; (80051c0 <ai_platform_network_post_init+0x84>)
 8005166:	4917      	ldr	r1, [pc, #92]	; (80051c4 <ai_platform_network_post_init+0x88>)
 8005168:	4a17      	ldr	r2, [pc, #92]	; (80051c8 <ai_platform_network_post_init+0x8c>)
 800516a:	6019      	str	r1, [r3, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4293      	cmp	r3, r2
 8005170:	d000      	beq.n	8005174 <ai_platform_network_post_init+0x38>
 8005172:	e7fe      	b.n	8005172 <ai_platform_network_post_init+0x36>
 8005174:	b1a4      	cbz	r4, 80051a0 <ai_platform_network_post_init+0x64>
 8005176:	68e3      	ldr	r3, [r4, #12]
 8005178:	f013 0502 	ands.w	r5, r3, #2
 800517c:	d012      	beq.n	80051a4 <ai_platform_network_post_init+0x68>
 800517e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005180:	b163      	cbz	r3, 800519c <ai_platform_network_post_init+0x60>
 8005182:	6d25      	ldr	r5, [r4, #80]	; 0x50
 8005184:	b91d      	cbnz	r5, 800518e <ai_platform_network_post_init+0x52>
 8005186:	e009      	b.n	800519c <ai_platform_network_post_init+0x60>
 8005188:	461d      	mov	r5, r3
 800518a:	b13b      	cbz	r3, 800519c <ai_platform_network_post_init+0x60>
 800518c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800518e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005190:	4629      	mov	r1, r5
 8005192:	2000      	movs	r0, #0
 8005194:	4798      	blx	r3
 8005196:	68eb      	ldr	r3, [r5, #12]
 8005198:	42ab      	cmp	r3, r5
 800519a:	d1f5      	bne.n	8005188 <ai_platform_network_post_init+0x4c>
 800519c:	2001      	movs	r0, #1
 800519e:	bd38      	pop	{r3, r4, r5, pc}
 80051a0:	4620      	mov	r0, r4
 80051a2:	bd38      	pop	{r3, r4, r5, pc}
 80051a4:	f104 0010 	add.w	r0, r4, #16
 80051a8:	2210      	movs	r2, #16
 80051aa:	2111      	movs	r1, #17
 80051ac:	f000 fb66 	bl	800587c <core_set_error>
 80051b0:	4628      	mov	r0, r5
 80051b2:	bd38      	pop	{r3, r4, r5, pc}
 80051b4:	a1c00100 	.word	0xa1c00100
 80051b8:	40023008 	.word	0x40023008
 80051bc:	e0002000 	.word	0xe0002000
 80051c0:	40023000 	.word	0x40023000
 80051c4:	f407a5c2 	.word	0xf407a5c2
 80051c8:	b5e8b5cd 	.word	0xb5e8b5cd

080051cc <ai_platform_network_process>:
 80051cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051d0:	b083      	sub	sp, #12
 80051d2:	9201      	str	r2, [sp, #4]
 80051d4:	4604      	mov	r4, r0
 80051d6:	b120      	cbz	r0, 80051e2 <ai_platform_network_process+0x16>
 80051d8:	4ba3      	ldr	r3, [pc, #652]	; (8005468 <ai_platform_network_process+0x29c>)
 80051da:	6802      	ldr	r2, [r0, #0]
 80051dc:	429a      	cmp	r2, r3
 80051de:	bf18      	it	ne
 80051e0:	2400      	movne	r4, #0
 80051e2:	4aa2      	ldr	r2, [pc, #648]	; (800546c <ai_platform_network_process+0x2a0>)
 80051e4:	2501      	movs	r5, #1
 80051e6:	4616      	mov	r6, r2
 80051e8:	48a1      	ldr	r0, [pc, #644]	; (8005470 <ai_platform_network_process+0x2a4>)
 80051ea:	6803      	ldr	r3, [r0, #0]
 80051ec:	f023 0301 	bic.w	r3, r3, #1
 80051f0:	6003      	str	r3, [r0, #0]
 80051f2:	6015      	str	r5, [r2, #0]
 80051f4:	6833      	ldr	r3, [r6, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1fc      	bne.n	80051f4 <ai_platform_network_process+0x28>
 80051fa:	4b9e      	ldr	r3, [pc, #632]	; (8005474 <ai_platform_network_process+0x2a8>)
 80051fc:	489e      	ldr	r0, [pc, #632]	; (8005478 <ai_platform_network_process+0x2ac>)
 80051fe:	4a9f      	ldr	r2, [pc, #636]	; (800547c <ai_platform_network_process+0x2b0>)
 8005200:	6018      	str	r0, [r3, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4293      	cmp	r3, r2
 8005206:	d000      	beq.n	800520a <ai_platform_network_process+0x3e>
 8005208:	e7fe      	b.n	8005208 <ai_platform_network_process+0x3c>
 800520a:	2c00      	cmp	r4, #0
 800520c:	d063      	beq.n	80052d6 <ai_platform_network_process+0x10a>
 800520e:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
 8005212:	b107      	cbz	r7, 8005216 <ai_platform_network_process+0x4a>
 8005214:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 8005216:	2600      	movs	r6, #0
 8005218:	68e3      	ldr	r3, [r4, #12]
 800521a:	6166      	str	r6, [r4, #20]
 800521c:	f003 0303 	and.w	r3, r3, #3
 8005220:	2b03      	cmp	r3, #3
 8005222:	f040 80f8 	bne.w	8005416 <ai_platform_network_process+0x24a>
 8005226:	2900      	cmp	r1, #0
 8005228:	d07d      	beq.n	8005326 <ai_platform_network_process+0x15a>
 800522a:	2f00      	cmp	r7, #0
 800522c:	d07b      	beq.n	8005326 <ai_platform_network_process+0x15a>
 800522e:	883b      	ldrh	r3, [r7, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d078      	beq.n	8005326 <ai_platform_network_process+0x15a>
 8005234:	460d      	mov	r5, r1
 8005236:	46a0      	mov	r8, r4
 8005238:	f835 9f04 	ldrh.w	r9, [r5, #4]!
 800523c:	429e      	cmp	r6, r3
 800523e:	d27b      	bcs.n	8005338 <ai_platform_network_process+0x16c>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d078      	beq.n	8005338 <ai_platform_network_process+0x16c>
 8005246:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 800524a:	2c00      	cmp	r4, #0
 800524c:	d074      	beq.n	8005338 <ai_platform_network_process+0x16c>
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	eb13 1a06 	adds.w	sl, r3, r6, lsl #4
 8005256:	d065      	beq.n	8005324 <ai_platform_network_process+0x158>
 8005258:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 800525c:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 8005260:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8005264:	fb0b f30e 	mul.w	r3, fp, lr
 8005268:	69a0      	ldr	r0, [r4, #24]
 800526a:	fb0c f303 	mul.w	r3, ip, r3
 800526e:	6841      	ldr	r1, [r0, #4]
 8005270:	4299      	cmp	r1, r3
 8005272:	d34e      	bcc.n	8005312 <ai_platform_network_process+0x146>
 8005274:	68e3      	ldr	r3, [r4, #12]
 8005276:	68da      	ldr	r2, [r3, #12]
 8005278:	455a      	cmp	r2, fp
 800527a:	d14a      	bne.n	8005312 <ai_platform_network_process+0x146>
 800527c:	689a      	ldr	r2, [r3, #8]
 800527e:	4572      	cmp	r2, lr
 8005280:	d147      	bne.n	8005312 <ai_platform_network_process+0x146>
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	459c      	cmp	ip, r3
 8005286:	d144      	bne.n	8005312 <ai_platform_network_process+0x146>
 8005288:	6800      	ldr	r0, [r0, #0]
 800528a:	f004 fba5 	bl	80099d8 <ai_array_get_byte_size>
 800528e:	68e2      	ldr	r2, [r4, #12]
 8005290:	6963      	ldr	r3, [r4, #20]
 8005292:	68d2      	ldr	r2, [r2, #12]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	fb03 f302 	mul.w	r3, r3, r2
 800529a:	4298      	cmp	r0, r3
 800529c:	d339      	bcc.n	8005312 <ai_platform_network_process+0x146>
 800529e:	69a3      	ldr	r3, [r4, #24]
 80052a0:	6818      	ldr	r0, [r3, #0]
 80052a2:	f004 fb4d 	bl	8009940 <ai_array_to_buffer_fmt>
 80052a6:	f855 3c04 	ldr.w	r3, [r5, #-4]
 80052aa:	4043      	eors	r3, r0
 80052ac:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 80052b0:	d126      	bne.n	8005300 <ai_platform_network_process+0x134>
 80052b2:	68eb      	ldr	r3, [r5, #12]
 80052b4:	b1e3      	cbz	r3, 80052f0 <ai_platform_network_process+0x124>
 80052b6:	882b      	ldrh	r3, [r5, #0]
 80052b8:	b193      	cbz	r3, 80052e0 <ai_platform_network_process+0x114>
 80052ba:	4599      	cmp	r9, r3
 80052bc:	bf38      	it	cc
 80052be:	4699      	movcc	r9, r3
 80052c0:	f105 020c 	add.w	r2, r5, #12
 80052c4:	4623      	mov	r3, r4
 80052c6:	4629      	mov	r1, r5
 80052c8:	4650      	mov	r0, sl
 80052ca:	f7ff fe3d 	bl	8004f48 <_platform_network_state_setup.isra.1>
 80052ce:	3601      	adds	r6, #1
 80052d0:	883b      	ldrh	r3, [r7, #0]
 80052d2:	3518      	adds	r5, #24
 80052d4:	e7b2      	b.n	800523c <ai_platform_network_process+0x70>
 80052d6:	46a3      	mov	fp, r4
 80052d8:	4658      	mov	r0, fp
 80052da:	b003      	add	sp, #12
 80052dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052e0:	f108 0010 	add.w	r0, r8, #16
 80052e4:	2221      	movs	r2, #33	; 0x21
 80052e6:	2112      	movs	r1, #18
 80052e8:	469b      	mov	fp, r3
 80052ea:	f000 fac7 	bl	800587c <core_set_error>
 80052ee:	e7f3      	b.n	80052d8 <ai_platform_network_process+0x10c>
 80052f0:	f108 0010 	add.w	r0, r8, #16
 80052f4:	2217      	movs	r2, #23
 80052f6:	2112      	movs	r1, #18
 80052f8:	469b      	mov	fp, r3
 80052fa:	f000 fabf 	bl	800587c <core_set_error>
 80052fe:	e7eb      	b.n	80052d8 <ai_platform_network_process+0x10c>
 8005300:	f108 0010 	add.w	r0, r8, #16
 8005304:	2219      	movs	r2, #25
 8005306:	2112      	movs	r1, #18
 8005308:	f000 fab8 	bl	800587c <core_set_error>
 800530c:	f04f 0b00 	mov.w	fp, #0
 8005310:	e7e2      	b.n	80052d8 <ai_platform_network_process+0x10c>
 8005312:	f108 0010 	add.w	r0, r8, #16
 8005316:	2218      	movs	r2, #24
 8005318:	2112      	movs	r1, #18
 800531a:	f000 faaf 	bl	800587c <core_set_error>
 800531e:	f04f 0b00 	mov.w	fp, #0
 8005322:	e7d9      	b.n	80052d8 <ai_platform_network_process+0x10c>
 8005324:	4644      	mov	r4, r8
 8005326:	f104 0010 	add.w	r0, r4, #16
 800532a:	2217      	movs	r2, #23
 800532c:	2112      	movs	r1, #18
 800532e:	f000 faa5 	bl	800587c <core_set_error>
 8005332:	f04f 0b00 	mov.w	fp, #0
 8005336:	e7cf      	b.n	80052d8 <ai_platform_network_process+0x10c>
 8005338:	9a01      	ldr	r2, [sp, #4]
 800533a:	4644      	mov	r4, r8
 800533c:	f8b8 3048 	ldrh.w	r3, [r8, #72]	; 0x48
 8005340:	2a00      	cmp	r2, #0
 8005342:	f000 80a1 	beq.w	8005488 <ai_platform_network_process+0x2bc>
 8005346:	2b01      	cmp	r3, #1
 8005348:	f240 8142 	bls.w	80055d0 <ai_platform_network_process+0x404>
 800534c:	f8d8 804c 	ldr.w	r8, [r8, #76]	; 0x4c
 8005350:	f118 0f0c 	cmn.w	r8, #12
 8005354:	f000 813c 	beq.w	80055d0 <ai_platform_network_process+0x404>
 8005358:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800535c:	2b00      	cmp	r3, #0
 800535e:	f000 8137 	beq.w	80055d0 <ai_platform_network_process+0x404>
 8005362:	3204      	adds	r2, #4
 8005364:	4615      	mov	r5, r2
 8005366:	2700      	movs	r7, #0
 8005368:	429f      	cmp	r7, r3
 800536a:	f080 8089 	bcs.w	8005480 <ai_platform_network_process+0x2b4>
 800536e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8005372:	2b00      	cmp	r3, #0
 8005374:	f000 8084 	beq.w	8005480 <ai_platform_network_process+0x2b4>
 8005378:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 800537c:	2e00      	cmp	r6, #0
 800537e:	d07f      	beq.n	8005480 <ai_platform_network_process+0x2b4>
 8005380:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	eb13 1a07 	adds.w	sl, r3, r7, lsl #4
 800538a:	d065      	beq.n	8005458 <ai_platform_network_process+0x28c>
 800538c:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8005390:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 8005394:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8005398:	fb0b f30e 	mul.w	r3, fp, lr
 800539c:	69b0      	ldr	r0, [r6, #24]
 800539e:	fb0c f303 	mul.w	r3, ip, r3
 80053a2:	6841      	ldr	r1, [r0, #4]
 80053a4:	4299      	cmp	r1, r3
 80053a6:	f0c0 8113 	bcc.w	80055d0 <ai_platform_network_process+0x404>
 80053aa:	68f3      	ldr	r3, [r6, #12]
 80053ac:	68da      	ldr	r2, [r3, #12]
 80053ae:	455a      	cmp	r2, fp
 80053b0:	f040 810e 	bne.w	80055d0 <ai_platform_network_process+0x404>
 80053b4:	689a      	ldr	r2, [r3, #8]
 80053b6:	4572      	cmp	r2, lr
 80053b8:	f040 810a 	bne.w	80055d0 <ai_platform_network_process+0x404>
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	459c      	cmp	ip, r3
 80053c0:	f040 8106 	bne.w	80055d0 <ai_platform_network_process+0x404>
 80053c4:	6800      	ldr	r0, [r0, #0]
 80053c6:	f004 fb07 	bl	80099d8 <ai_array_get_byte_size>
 80053ca:	68f2      	ldr	r2, [r6, #12]
 80053cc:	6973      	ldr	r3, [r6, #20]
 80053ce:	68d2      	ldr	r2, [r2, #12]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	fb03 f302 	mul.w	r3, r3, r2
 80053d6:	4298      	cmp	r0, r3
 80053d8:	f0c0 80fa 	bcc.w	80055d0 <ai_platform_network_process+0x404>
 80053dc:	69b3      	ldr	r3, [r6, #24]
 80053de:	6818      	ldr	r0, [r3, #0]
 80053e0:	f004 faae 	bl	8009940 <ai_array_to_buffer_fmt>
 80053e4:	f855 3c04 	ldr.w	r3, [r5, #-4]
 80053e8:	4043      	eors	r3, r0
 80053ea:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 80053ee:	d12a      	bne.n	8005446 <ai_platform_network_process+0x27a>
 80053f0:	68eb      	ldr	r3, [r5, #12]
 80053f2:	b303      	cbz	r3, 8005436 <ai_platform_network_process+0x26a>
 80053f4:	882b      	ldrh	r3, [r5, #0]
 80053f6:	b1b3      	cbz	r3, 8005426 <ai_platform_network_process+0x25a>
 80053f8:	4599      	cmp	r9, r3
 80053fa:	bf38      	it	cc
 80053fc:	4699      	movcc	r9, r3
 80053fe:	f105 020c 	add.w	r2, r5, #12
 8005402:	4633      	mov	r3, r6
 8005404:	4629      	mov	r1, r5
 8005406:	4650      	mov	r0, sl
 8005408:	f7ff fd9e 	bl	8004f48 <_platform_network_state_setup.isra.1>
 800540c:	3701      	adds	r7, #1
 800540e:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8005412:	3518      	adds	r5, #24
 8005414:	e7a8      	b.n	8005368 <ai_platform_network_process+0x19c>
 8005416:	f104 0010 	add.w	r0, r4, #16
 800541a:	2230      	movs	r2, #48	; 0x30
 800541c:	2111      	movs	r1, #17
 800541e:	f000 fa2d 	bl	800587c <core_set_error>
 8005422:	46b3      	mov	fp, r6
 8005424:	e758      	b.n	80052d8 <ai_platform_network_process+0x10c>
 8005426:	f104 0010 	add.w	r0, r4, #16
 800542a:	2221      	movs	r2, #33	; 0x21
 800542c:	2113      	movs	r1, #19
 800542e:	469b      	mov	fp, r3
 8005430:	f000 fa24 	bl	800587c <core_set_error>
 8005434:	e750      	b.n	80052d8 <ai_platform_network_process+0x10c>
 8005436:	f104 0010 	add.w	r0, r4, #16
 800543a:	2217      	movs	r2, #23
 800543c:	2113      	movs	r1, #19
 800543e:	469b      	mov	fp, r3
 8005440:	f000 fa1c 	bl	800587c <core_set_error>
 8005444:	e748      	b.n	80052d8 <ai_platform_network_process+0x10c>
 8005446:	f104 0010 	add.w	r0, r4, #16
 800544a:	2219      	movs	r2, #25
 800544c:	2113      	movs	r1, #19
 800544e:	f000 fa15 	bl	800587c <core_set_error>
 8005452:	f04f 0b00 	mov.w	fp, #0
 8005456:	e73f      	b.n	80052d8 <ai_platform_network_process+0x10c>
 8005458:	f104 0010 	add.w	r0, r4, #16
 800545c:	2217      	movs	r2, #23
 800545e:	2113      	movs	r1, #19
 8005460:	f000 fa0c 	bl	800587c <core_set_error>
 8005464:	46d3      	mov	fp, sl
 8005466:	e737      	b.n	80052d8 <ai_platform_network_process+0x10c>
 8005468:	a1c00100 	.word	0xa1c00100
 800546c:	40023008 	.word	0x40023008
 8005470:	e0002000 	.word	0xe0002000
 8005474:	40023000 	.word	0x40023000
 8005478:	f407a5c2 	.word	0xf407a5c2
 800547c:	b5e8b5cd 	.word	0xb5e8b5cd
 8005480:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8005484:	f8a4 9014 	strh.w	r9, [r4, #20]
 8005488:	2b00      	cmp	r3, #0
 800548a:	f000 809e 	beq.w	80055ca <ai_platform_network_process+0x3fe>
 800548e:	2b01      	cmp	r3, #1
 8005490:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8005492:	f240 8098 	bls.w	80055c6 <ai_platform_network_process+0x3fa>
 8005496:	f105 070c 	add.w	r7, r5, #12
 800549a:	8ae0      	ldrh	r0, [r4, #22]
 800549c:	8aa3      	ldrh	r3, [r4, #20]
 800549e:	4283      	cmp	r3, r0
 80054a0:	d97b      	bls.n	800559a <ai_platform_network_process+0x3ce>
 80054a2:	2d00      	cmp	r5, #0
 80054a4:	d035      	beq.n	8005512 <ai_platform_network_process+0x346>
 80054a6:	882b      	ldrh	r3, [r5, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d032      	beq.n	8005512 <ai_platform_network_process+0x346>
 80054ac:	686b      	ldr	r3, [r5, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d02f      	beq.n	8005512 <ai_platform_network_process+0x346>
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f04f 0800 	mov.w	r8, #0
 80054b8:	b35b      	cbz	r3, 8005512 <ai_platform_network_process+0x346>
 80054ba:	68a9      	ldr	r1, [r5, #8]
 80054bc:	699a      	ldr	r2, [r3, #24]
 80054be:	f8d1 a000 	ldr.w	sl, [r1]
 80054c2:	6811      	ldr	r1, [r2, #0]
 80054c4:	ea4f 1908 	mov.w	r9, r8, lsl #4
 80054c8:	eb0a 0609 	add.w	r6, sl, r9
 80054cc:	0089      	lsls	r1, r1, #2
 80054ce:	f8d6 c004 	ldr.w	ip, [r6, #4]
 80054d2:	6890      	ldr	r0, [r2, #8]
 80054d4:	d463      	bmi.n	800559e <ai_platform_network_process+0x3d2>
 80054d6:	68d1      	ldr	r1, [r2, #12]
 80054d8:	1a40      	subs	r0, r0, r1
 80054da:	eb0c 0100 	add.w	r1, ip, r0
 80054de:	6091      	str	r1, [r2, #8]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	6872      	ldr	r2, [r6, #4]
 80054e4:	60da      	str	r2, [r3, #12]
 80054e6:	f85a 2009 	ldr.w	r2, [sl, r9]
 80054ea:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 80054ee:	440b      	add	r3, r1
 80054f0:	4293      	cmp	r3, r2
 80054f2:	bf28      	it	cs
 80054f4:	68f3      	ldrcs	r3, [r6, #12]
 80054f6:	f108 0801 	add.w	r8, r8, #1
 80054fa:	bf28      	it	cs
 80054fc:	1ad3      	subcs	r3, r2, r3
 80054fe:	6073      	str	r3, [r6, #4]
 8005500:	882b      	ldrh	r3, [r5, #0]
 8005502:	4598      	cmp	r8, r3
 8005504:	d205      	bcs.n	8005512 <ai_platform_network_process+0x346>
 8005506:	686b      	ldr	r3, [r5, #4]
 8005508:	b11b      	cbz	r3, 8005512 <ai_platform_network_process+0x346>
 800550a:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d1d3      	bne.n	80054ba <ai_platform_network_process+0x2ee>
 8005512:	4620      	mov	r0, r4
 8005514:	f000 fee6 	bl	80062e4 <ai_layers_forward_all>
 8005518:	2f00      	cmp	r7, #0
 800551a:	d037      	beq.n	800558c <ai_platform_network_process+0x3c0>
 800551c:	883b      	ldrh	r3, [r7, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d034      	beq.n	800558c <ai_platform_network_process+0x3c0>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d031      	beq.n	800558c <ai_platform_network_process+0x3c0>
 8005528:	6818      	ldr	r0, [r3, #0]
 800552a:	b378      	cbz	r0, 800558c <ai_platform_network_process+0x3c0>
 800552c:	f04f 0800 	mov.w	r8, #0
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	6981      	ldr	r1, [r0, #24]
 8005534:	f8d3 a000 	ldr.w	sl, [r3]
 8005538:	680b      	ldr	r3, [r1, #0]
 800553a:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800553e:	eb0a 0609 	add.w	r6, sl, r9
 8005542:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8005546:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 800554a:	eb0c 0e02 	add.w	lr, ip, r2
 800554e:	d12b      	bne.n	80055a8 <ai_platform_network_process+0x3dc>
 8005550:	f85a 2009 	ldr.w	r2, [sl, r9]
 8005554:	4596      	cmp	lr, r2
 8005556:	bf24      	itt	cs
 8005558:	68f3      	ldrcs	r3, [r6, #12]
 800555a:	eba2 0e03 	subcs.w	lr, r2, r3
 800555e:	f8c6 e004 	str.w	lr, [r6, #4]
 8005562:	6981      	ldr	r1, [r0, #24]
 8005564:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8005568:	1ad2      	subs	r2, r2, r3
 800556a:	eb0e 0302 	add.w	r3, lr, r2
 800556e:	608b      	str	r3, [r1, #8]
 8005570:	6983      	ldr	r3, [r0, #24]
 8005572:	6872      	ldr	r2, [r6, #4]
 8005574:	60da      	str	r2, [r3, #12]
 8005576:	883b      	ldrh	r3, [r7, #0]
 8005578:	f108 0801 	add.w	r8, r8, #1
 800557c:	4598      	cmp	r8, r3
 800557e:	d205      	bcs.n	800558c <ai_platform_network_process+0x3c0>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	b11b      	cbz	r3, 800558c <ai_platform_network_process+0x3c0>
 8005584:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005588:	2800      	cmp	r0, #0
 800558a:	d1d1      	bne.n	8005530 <ai_platform_network_process+0x364>
 800558c:	8ae0      	ldrh	r0, [r4, #22]
 800558e:	8aa3      	ldrh	r3, [r4, #20]
 8005590:	3001      	adds	r0, #1
 8005592:	b280      	uxth	r0, r0
 8005594:	4283      	cmp	r3, r0
 8005596:	82e0      	strh	r0, [r4, #22]
 8005598:	d883      	bhi.n	80054a2 <ai_platform_network_process+0x2d6>
 800559a:	4683      	mov	fp, r0
 800559c:	e69c      	b.n	80052d8 <ai_platform_network_process+0x10c>
 800559e:	4661      	mov	r1, ip
 80055a0:	68b2      	ldr	r2, [r6, #8]
 80055a2:	f005 f8e5 	bl	800a770 <memcpy>
 80055a6:	e79e      	b.n	80054e6 <ai_platform_network_process+0x31a>
 80055a8:	6889      	ldr	r1, [r1, #8]
 80055aa:	4660      	mov	r0, ip
 80055ac:	f005 f8e0 	bl	800a770 <memcpy>
 80055b0:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 80055b4:	f85a 2009 	ldr.w	r2, [sl, r9]
 80055b8:	440b      	add	r3, r1
 80055ba:	4293      	cmp	r3, r2
 80055bc:	bf24      	itt	cs
 80055be:	68f3      	ldrcs	r3, [r6, #12]
 80055c0:	1ad3      	subcs	r3, r2, r3
 80055c2:	6073      	str	r3, [r6, #4]
 80055c4:	e7d7      	b.n	8005576 <ai_platform_network_process+0x3aa>
 80055c6:	2700      	movs	r7, #0
 80055c8:	e767      	b.n	800549a <ai_platform_network_process+0x2ce>
 80055ca:	461d      	mov	r5, r3
 80055cc:	461f      	mov	r7, r3
 80055ce:	e764      	b.n	800549a <ai_platform_network_process+0x2ce>
 80055d0:	f104 0010 	add.w	r0, r4, #16
 80055d4:	2218      	movs	r2, #24
 80055d6:	2113      	movs	r1, #19
 80055d8:	f000 f950 	bl	800587c <core_set_error>
 80055dc:	f04f 0b00 	mov.w	fp, #0
 80055e0:	e67a      	b.n	80052d8 <ai_platform_network_process+0x10c>
 80055e2:	bf00      	nop

080055e4 <node_convert>:
 80055e4:	6942      	ldr	r2, [r0, #20]
 80055e6:	8813      	ldrh	r3, [r2, #0]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d04a      	beq.n	8005682 <node_convert+0x9e>
 80055ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055ee:	6852      	ldr	r2, [r2, #4]
 80055f0:	b083      	sub	sp, #12
 80055f2:	6855      	ldr	r5, [r2, #4]
 80055f4:	b105      	cbz	r5, 80055f8 <node_convert+0x14>
 80055f6:	682d      	ldr	r5, [r5, #0]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d93f      	bls.n	800567c <node_convert+0x98>
 80055fc:	6916      	ldr	r6, [r2, #16]
 80055fe:	b106      	cbz	r6, 8005602 <node_convert+0x1e>
 8005600:	6836      	ldr	r6, [r6, #0]
 8005602:	68ab      	ldr	r3, [r5, #8]
 8005604:	2401      	movs	r4, #1
 8005606:	0a1b      	lsrs	r3, r3, #8
 8005608:	d008      	beq.n	800561c <node_convert+0x38>
 800560a:	68e9      	ldr	r1, [r5, #12]
 800560c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8005610:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005614:	428b      	cmp	r3, r1
 8005616:	fb02 f404 	mul.w	r4, r2, r4
 800561a:	d1f9      	bne.n	8005610 <node_convert+0x2c>
 800561c:	69aa      	ldr	r2, [r5, #24]
 800561e:	69b7      	ldr	r7, [r6, #24]
 8005620:	6813      	ldr	r3, [r2, #0]
 8005622:	6890      	ldr	r0, [r2, #8]
 8005624:	f3c3 4243 	ubfx	r2, r3, #17, #4
 8005628:	2a01      	cmp	r2, #1
 800562a:	d054      	beq.n	80056d6 <node_convert+0xf2>
 800562c:	6829      	ldr	r1, [r5, #0]
 800562e:	15da      	asrs	r2, r3, #23
 8005630:	68bd      	ldr	r5, [r7, #8]
 8005632:	b341      	cbz	r1, 8005686 <node_convert+0xa2>
 8005634:	684e      	ldr	r6, [r1, #4]
 8005636:	f002 0201 	and.w	r2, r2, #1
 800563a:	2e00      	cmp	r6, #0
 800563c:	f000 80c4 	beq.w	80057c8 <node_convert+0x1e4>
 8005640:	884b      	ldrh	r3, [r1, #2]
 8005642:	2b00      	cmp	r3, #0
 8005644:	f000 8084 	beq.w	8005750 <node_convert+0x16c>
 8005648:	6833      	ldr	r3, [r6, #0]
 800564a:	ed93 7a00 	vldr	s14, [r3]
 800564e:	6873      	ldr	r3, [r6, #4]
 8005650:	2a00      	cmp	r2, #0
 8005652:	f000 80d0 	beq.w	80057f6 <node_convert+0x212>
 8005656:	f993 2000 	ldrsb.w	r2, [r3]
 800565a:	b16c      	cbz	r4, 8005678 <node_convert+0x94>
 800565c:	4404      	add	r4, r0
 800565e:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8005662:	1a9b      	subs	r3, r3, r2
 8005664:	ee07 3a90 	vmov	s15, r3
 8005668:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800566c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005670:	42a0      	cmp	r0, r4
 8005672:	ece5 7a01 	vstmia	r5!, {s15}
 8005676:	d1f2      	bne.n	800565e <node_convert+0x7a>
 8005678:	b003      	add	sp, #12
 800567a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800567c:	2300      	movs	r3, #0
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	deff      	udf	#255	; 0xff
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	deff      	udf	#255	; 0xff
 8005686:	f3c3 11c6 	ubfx	r1, r3, #7, #7
 800568a:	f003 067f 	and.w	r6, r3, #127	; 0x7f
 800568e:	1b8e      	subs	r6, r1, r6
 8005690:	f002 0201 	and.w	r2, r2, #1
 8005694:	3640      	adds	r6, #64	; 0x40
 8005696:	2908      	cmp	r1, #8
 8005698:	eba6 0602 	sub.w	r6, r6, r2
 800569c:	4629      	mov	r1, r5
 800569e:	4622      	mov	r2, r4
 80056a0:	d05c      	beq.n	800575c <node_convert+0x178>
 80056a2:	f001 f881 	bl	80067a8 <arm_q15_to_float>
 80056a6:	2e00      	cmp	r6, #0
 80056a8:	d0e6      	beq.n	8005678 <node_convert+0x94>
 80056aa:	ee07 6a90 	vmov	s15, r6
 80056ae:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80056b2:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 80056b6:	f004 faab 	bl	8009c10 <powf>
 80056ba:	2c00      	cmp	r4, #0
 80056bc:	d0dc      	beq.n	8005678 <node_convert+0x94>
 80056be:	2300      	movs	r3, #0
 80056c0:	ecf5 7a01 	vldmia	r5!, {s15}
 80056c4:	ee67 7a80 	vmul.f32	s15, s15, s0
 80056c8:	3301      	adds	r3, #1
 80056ca:	429c      	cmp	r4, r3
 80056cc:	ed45 7a01 	vstr	s15, [r5, #-4]
 80056d0:	d1f6      	bne.n	80056c0 <node_convert+0xdc>
 80056d2:	b003      	add	sp, #12
 80056d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	6835      	ldr	r5, [r6, #0]
 80056da:	15d9      	asrs	r1, r3, #23
 80056dc:	2d00      	cmp	r5, #0
 80056de:	f000 808c 	beq.w	80057fa <node_convert+0x216>
 80056e2:	686b      	ldr	r3, [r5, #4]
 80056e4:	68ba      	ldr	r2, [r7, #8]
 80056e6:	f001 0101 	and.w	r1, r1, #1
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d039      	beq.n	8005762 <node_convert+0x17e>
 80056ee:	886d      	ldrh	r5, [r5, #2]
 80056f0:	2d00      	cmp	r5, #0
 80056f2:	d03c      	beq.n	800576e <node_convert+0x18a>
 80056f4:	681d      	ldr	r5, [r3, #0]
 80056f6:	edd5 7a00 	vldr	s15, [r5]
 80056fa:	2900      	cmp	r1, #0
 80056fc:	f000 80af 	beq.w	800585e <node_convert+0x27a>
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f993 3000 	ldrsb.w	r3, [r3]
 8005706:	ee07 3a10 	vmov	s14, r3
 800570a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800570e:	2c00      	cmp	r4, #0
 8005710:	d0b2      	beq.n	8005678 <node_convert+0x94>
 8005712:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8005716:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800571a:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 800571e:	4414      	add	r4, r2
 8005720:	ecf0 7a01 	vldmia	r0!, {s15}
 8005724:	eef0 5a47 	vmov.f32	s11, s14
 8005728:	eee7 5aa6 	vfma.f32	s11, s15, s13
 800572c:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8005730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005734:	db3b      	blt.n	80057ae <node_convert+0x1ca>
 8005736:	ee75 7a86 	vadd.f32	s15, s11, s12
 800573a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800573e:	ee17 3a90 	vmov	r3, s15
 8005742:	f303 0307 	ssat	r3, #8, r3
 8005746:	f802 3b01 	strb.w	r3, [r2], #1
 800574a:	42a2      	cmp	r2, r4
 800574c:	d1e8      	bne.n	8005720 <node_convert+0x13c>
 800574e:	e793      	b.n	8005678 <node_convert+0x94>
 8005750:	2a00      	cmp	r2, #0
 8005752:	d03b      	beq.n	80057cc <node_convert+0x1e8>
 8005754:	461a      	mov	r2, r3
 8005756:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8005874 <node_convert+0x290>
 800575a:	e77e      	b.n	800565a <node_convert+0x76>
 800575c:	f001 f88c 	bl	8006878 <arm_q7_to_float>
 8005760:	e7a1      	b.n	80056a6 <node_convert+0xc2>
 8005762:	b131      	cbz	r1, 8005772 <node_convert+0x18e>
 8005764:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8005874 <node_convert+0x290>
 8005768:	eef0 7a47 	vmov.f32	s15, s14
 800576c:	e7cf      	b.n	800570e <node_convert+0x12a>
 800576e:	2900      	cmp	r1, #0
 8005770:	d1f8      	bne.n	8005764 <node_convert+0x180>
 8005772:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005776:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8005874 <node_convert+0x290>
 800577a:	2c00      	cmp	r4, #0
 800577c:	f43f af7c 	beq.w	8005678 <node_convert+0x94>
 8005780:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005784:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8005788:	4414      	add	r4, r2
 800578a:	ecf0 7a01 	vldmia	r0!, {s15}
 800578e:	eeb0 6a47 	vmov.f32	s12, s14
 8005792:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8005796:	eefd 7ac6 	vcvt.s32.f32	s15, s12
 800579a:	ee17 3a90 	vmov	r3, s15
 800579e:	f383 0308 	usat	r3, #8, r3
 80057a2:	f802 3b01 	strb.w	r3, [r2], #1
 80057a6:	42a2      	cmp	r2, r4
 80057a8:	d1ef      	bne.n	800578a <node_convert+0x1a6>
 80057aa:	b003      	add	sp, #12
 80057ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057ae:	ee75 7ac6 	vsub.f32	s15, s11, s12
 80057b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057b6:	ee17 3a90 	vmov	r3, s15
 80057ba:	f303 0307 	ssat	r3, #8, r3
 80057be:	f802 3b01 	strb.w	r3, [r2], #1
 80057c2:	4294      	cmp	r4, r2
 80057c4:	d1ac      	bne.n	8005720 <node_convert+0x13c>
 80057c6:	e757      	b.n	8005678 <node_convert+0x94>
 80057c8:	2a00      	cmp	r2, #0
 80057ca:	d13f      	bne.n	800584c <node_convert+0x268>
 80057cc:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8005874 <node_convert+0x290>
 80057d0:	2c00      	cmp	r4, #0
 80057d2:	f43f af51 	beq.w	8005678 <node_convert+0x94>
 80057d6:	4404      	add	r4, r0
 80057d8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80057dc:	1a9b      	subs	r3, r3, r2
 80057de:	ee07 3a90 	vmov	s15, r3
 80057e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80057ea:	42a0      	cmp	r0, r4
 80057ec:	ece5 7a01 	vstmia	r5!, {s15}
 80057f0:	d1f2      	bne.n	80057d8 <node_convert+0x1f4>
 80057f2:	b003      	add	sp, #12
 80057f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057f6:	781a      	ldrb	r2, [r3, #0]
 80057f8:	e7ea      	b.n	80057d0 <node_convert+0x1ec>
 80057fa:	f3c3 16c6 	ubfx	r6, r3, #7, #7
 80057fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005802:	1af3      	subs	r3, r6, r3
 8005804:	f001 0101 	and.w	r1, r1, #1
 8005808:	3340      	adds	r3, #64	; 0x40
 800580a:	1a5b      	subs	r3, r3, r1
 800580c:	d015      	beq.n	800583a <node_convert+0x256>
 800580e:	425b      	negs	r3, r3
 8005810:	ee00 3a90 	vmov	s1, r3
 8005814:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8005818:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 800581c:	9001      	str	r0, [sp, #4]
 800581e:	f004 f9f7 	bl	8009c10 <powf>
 8005822:	9801      	ldr	r0, [sp, #4]
 8005824:	b14c      	cbz	r4, 800583a <node_convert+0x256>
 8005826:	4603      	mov	r3, r0
 8005828:	ecf3 7a01 	vldmia	r3!, {s15}
 800582c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005830:	3501      	adds	r5, #1
 8005832:	42ac      	cmp	r4, r5
 8005834:	ed43 7a01 	vstr	s15, [r3, #-4]
 8005838:	d1f6      	bne.n	8005828 <node_convert+0x244>
 800583a:	2e08      	cmp	r6, #8
 800583c:	68b9      	ldr	r1, [r7, #8]
 800583e:	4622      	mov	r2, r4
 8005840:	d008      	beq.n	8005854 <node_convert+0x270>
 8005842:	b003      	add	sp, #12
 8005844:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8005848:	f000 be30 	b.w	80064ac <arm_float_to_q15>
 800584c:	4632      	mov	r2, r6
 800584e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8005874 <node_convert+0x290>
 8005852:	e702      	b.n	800565a <node_convert+0x76>
 8005854:	b003      	add	sp, #12
 8005856:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800585a:	f000 bedb 	b.w	8006614 <arm_float_to_q7>
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	ee07 3a10 	vmov	s14, r3
 800586a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800586e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005872:	e782      	b.n	800577a <node_convert+0x196>
 8005874:	00000000 	.word	0x00000000

08005878 <core_init>:
 8005878:	2001      	movs	r0, #1
 800587a:	4770      	bx	lr

0800587c <core_set_error>:
 800587c:	4603      	mov	r3, r0
 800587e:	7800      	ldrb	r0, [r0, #0]
 8005880:	b930      	cbnz	r0, 8005890 <core_set_error+0x14>
 8005882:	7019      	strb	r1, [r3, #0]
 8005884:	6819      	ldr	r1, [r3, #0]
 8005886:	2001      	movs	r0, #1
 8005888:	f362 211f 	bfi	r1, r2, #8, #24
 800588c:	6019      	str	r1, [r3, #0]
 800588e:	4770      	bx	lr
 8005890:	2000      	movs	r0, #0
 8005892:	4770      	bx	lr

08005894 <func_dummy>:
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop

08005898 <forward_conv2d_nl_pool_integer_UAUA>:
 8005898:	6943      	ldr	r3, [r0, #20]
 800589a:	8819      	ldrh	r1, [r3, #0]
 800589c:	b321      	cbz	r1, 80058e8 <forward_conv2d_nl_pool_integer_UAUA+0x50>
 800589e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058a2:	685a      	ldr	r2, [r3, #4]
 80058a4:	b0d3      	sub	sp, #332	; 0x14c
 80058a6:	6853      	ldr	r3, [r2, #4]
 80058a8:	b32b      	cbz	r3, 80058f6 <forward_conv2d_nl_pool_integer_UAUA+0x5e>
 80058aa:	f8d3 b000 	ldr.w	fp, [r3]
 80058ae:	2901      	cmp	r1, #1
 80058b0:	d917      	bls.n	80058e2 <forward_conv2d_nl_pool_integer_UAUA+0x4a>
 80058b2:	6913      	ldr	r3, [r2, #16]
 80058b4:	b1eb      	cbz	r3, 80058f2 <forward_conv2d_nl_pool_integer_UAUA+0x5a>
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	931a      	str	r3, [sp, #104]	; 0x68
 80058ba:	2902      	cmp	r1, #2
 80058bc:	d016      	beq.n	80058ec <forward_conv2d_nl_pool_integer_UAUA+0x54>
 80058be:	69d3      	ldr	r3, [r2, #28]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f000 830a 	beq.w	8005eda <forward_conv2d_nl_pool_integer_UAUA+0x642>
 80058c6:	681c      	ldr	r4, [r3, #0]
 80058c8:	9414      	str	r4, [sp, #80]	; 0x50
 80058ca:	f112 0418 	adds.w	r4, r2, #24
 80058ce:	f000 8302 	beq.w	8005ed6 <forward_conv2d_nl_pool_integer_UAUA+0x63e>
 80058d2:	8b14      	ldrh	r4, [r2, #24]
 80058d4:	2c01      	cmp	r4, #1
 80058d6:	f240 82fb 	bls.w	8005ed0 <forward_conv2d_nl_pool_integer_UAUA+0x638>
 80058da:	b173      	cbz	r3, 80058fa <forward_conv2d_nl_pool_integer_UAUA+0x62>
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	9313      	str	r3, [sp, #76]	; 0x4c
 80058e0:	e00c      	b.n	80058fc <forward_conv2d_nl_pool_integer_UAUA+0x64>
 80058e2:	2300      	movs	r3, #0
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	deff      	udf	#255	; 0xff
 80058e8:	684b      	ldr	r3, [r1, #4]
 80058ea:	deff      	udf	#255	; 0xff
 80058ec:	2300      	movs	r3, #0
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	deff      	udf	#255	; 0xff
 80058f2:	931a      	str	r3, [sp, #104]	; 0x68
 80058f4:	e7e1      	b.n	80058ba <forward_conv2d_nl_pool_integer_UAUA+0x22>
 80058f6:	469b      	mov	fp, r3
 80058f8:	e7d9      	b.n	80058ae <forward_conv2d_nl_pool_integer_UAUA+0x16>
 80058fa:	9313      	str	r3, [sp, #76]	; 0x4c
 80058fc:	2903      	cmp	r1, #3
 80058fe:	f000 82da 	beq.w	8005eb6 <forward_conv2d_nl_pool_integer_UAUA+0x61e>
 8005902:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8005904:	2b00      	cmp	r3, #0
 8005906:	f000 8142 	beq.w	8005b8e <forward_conv2d_nl_pool_integer_UAUA+0x2f6>
 800590a:	6a02      	ldr	r2, [r0, #32]
 800590c:	6819      	ldr	r1, [r3, #0]
 800590e:	922f      	str	r2, [sp, #188]	; 0xbc
 8005910:	911d      	str	r1, [sp, #116]	; 0x74
 8005912:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8005916:	2a00      	cmp	r2, #0
 8005918:	f000 82e1 	beq.w	8005ede <forward_conv2d_nl_pool_integer_UAUA+0x646>
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	9325      	str	r3, [sp, #148]	; 0x94
 8005920:	f8db 200c 	ldr.w	r2, [fp, #12]
 8005924:	f8da 300c 	ldr.w	r3, [sl, #12]
 8005928:	6856      	ldr	r6, [r2, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	6b85      	ldr	r5, [r0, #56]	; 0x38
 800592e:	9318      	str	r3, [sp, #96]	; 0x60
 8005930:	9627      	str	r6, [sp, #156]	; 0x9c
 8005932:	b2b6      	uxth	r6, r6
 8005934:	6829      	ldr	r1, [r5, #0]
 8005936:	961f      	str	r6, [sp, #124]	; 0x7c
 8005938:	f8bd 6060 	ldrh.w	r6, [sp, #96]	; 0x60
 800593c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800593e:	9615      	str	r6, [sp, #84]	; 0x54
 8005940:	b28e      	uxth	r6, r1
 8005942:	9616      	str	r6, [sp, #88]	; 0x58
 8005944:	68d6      	ldr	r6, [r2, #12]
 8005946:	6892      	ldr	r2, [r2, #8]
 8005948:	68e7      	ldr	r7, [r4, #12]
 800594a:	922c      	str	r2, [sp, #176]	; 0xb0
 800594c:	88aa      	ldrh	r2, [r5, #4]
 800594e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005950:	921b      	str	r2, [sp, #108]	; 0x6c
 8005952:	68aa      	ldr	r2, [r5, #8]
 8005954:	68fd      	ldr	r5, [r7, #12]
 8005956:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8005958:	9530      	str	r5, [sp, #192]	; 0xc0
 800595a:	68bd      	ldr	r5, [r7, #8]
 800595c:	f8d0 e050 	ldr.w	lr, [r0, #80]	; 0x50
 8005960:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8005964:	9537      	str	r5, [sp, #220]	; 0xdc
 8005966:	b2a5      	uxth	r5, r4
 8005968:	69c3      	ldr	r3, [r0, #28]
 800596a:	9617      	str	r6, [sp, #92]	; 0x5c
 800596c:	9521      	str	r5, [sp, #132]	; 0x84
 800596e:	e9dc 5901 	ldrd	r5, r9, [ip, #4]
 8005972:	9519      	str	r5, [sp, #100]	; 0x64
 8005974:	f8de 5000 	ldr.w	r5, [lr]
 8005978:	952a      	str	r5, [sp, #168]	; 0xa8
 800597a:	f8de 5004 	ldr.w	r5, [lr, #4]
 800597e:	953a      	str	r5, [sp, #232]	; 0xe8
 8005980:	8c85      	ldrh	r5, [r0, #36]	; 0x24
 8005982:	9520      	str	r5, [sp, #128]	; 0x80
 8005984:	6985      	ldr	r5, [r0, #24]
 8005986:	9523      	str	r5, [sp, #140]	; 0x8c
 8005988:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800598a:	9538      	str	r5, [sp, #224]	; 0xe0
 800598c:	6c45      	ldr	r5, [r0, #68]	; 0x44
 800598e:	9539      	str	r5, [sp, #228]	; 0xe4
 8005990:	6c85      	ldr	r5, [r0, #72]	; 0x48
 8005992:	9529      	str	r5, [sp, #164]	; 0xa4
 8005994:	2b00      	cmp	r3, #0
 8005996:	f000 825b 	beq.w	8005e50 <forward_conv2d_nl_pool_integer_UAUA+0x5b8>
 800599a:	4635      	mov	r5, r6
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	9332      	str	r3, [sp, #200]	; 0xc8
 80059a0:	b289      	uxth	r1, r1
 80059a2:	fa11 f282 	uxtah	r2, r1, r2
 80059a6:	442a      	add	r2, r5
 80059a8:	b2a4      	uxth	r4, r4
 80059aa:	eba2 0209 	sub.w	r2, r2, r9
 80059ae:	fbb2 f2f4 	udiv	r2, r2, r4
 80059b2:	ae4b      	add	r6, sp, #300	; 0x12c
 80059b4:	902d      	str	r0, [sp, #180]	; 0xb4
 80059b6:	4630      	mov	r0, r6
 80059b8:	1c56      	adds	r6, r2, #1
 80059ba:	9624      	str	r6, [sp, #144]	; 0x90
 80059bc:	f240 4601 	movw	r6, #1025	; 0x401
 80059c0:	941e      	str	r4, [sp, #120]	; 0x78
 80059c2:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
 80059c6:	2300      	movs	r3, #0
 80059c8:	f44f 6e80 	mov.w	lr, #1024	; 0x400
 80059cc:	964f      	str	r6, [sp, #316]	; 0x13c
 80059ce:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80059d0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80059d2:	69b6      	ldr	r6, [r6, #24]
 80059d4:	911c      	str	r1, [sp, #112]	; 0x70
 80059d6:	9925      	ldr	r1, [sp, #148]	; 0x94
 80059d8:	9631      	str	r6, [sp, #196]	; 0xc4
 80059da:	698f      	ldr	r7, [r1, #24]
 80059dc:	6c16      	ldr	r6, [r2, #64]	; 0x40
 80059de:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80059e0:	f10d 0cfc 	add.w	ip, sp, #252	; 0xfc
 80059e4:	ad43      	add	r5, sp, #268	; 0x10c
 80059e6:	944c      	str	r4, [sp, #304]	; 0x130
 80059e8:	ac47      	add	r4, sp, #284	; 0x11c
 80059ea:	f8da 8018 	ldr.w	r8, [sl, #24]
 80059ee:	934b      	str	r3, [sp, #300]	; 0x12c
 80059f0:	933f      	str	r3, [sp, #252]	; 0xfc
 80059f2:	9343      	str	r3, [sp, #268]	; 0x10c
 80059f4:	9340      	str	r3, [sp, #256]	; 0x100
 80059f6:	9341      	str	r3, [sp, #260]	; 0x104
 80059f8:	9344      	str	r3, [sp, #272]	; 0x110
 80059fa:	9345      	str	r3, [sp, #276]	; 0x114
 80059fc:	f8cd e134 	str.w	lr, [sp, #308]	; 0x134
 8005a00:	9342      	str	r3, [sp, #264]	; 0x108
 8005a02:	9351      	str	r3, [sp, #324]	; 0x144
 8005a04:	9346      	str	r3, [sp, #280]	; 0x118
 8005a06:	923b      	str	r2, [sp, #236]	; 0xec
 8005a08:	f8cd c138 	str.w	ip, [sp, #312]	; 0x138
 8005a0c:	9550      	str	r5, [sp, #320]	; 0x140
 8005a0e:	962b      	str	r6, [sp, #172]	; 0xac
 8005a10:	f004 f804 	bl	8009a1c <core_tensor_clone>
 8005a14:	4620      	mov	r0, r4
 8005a16:	4639      	mov	r1, r7
 8005a18:	f004 f832 	bl	8009a80 <core_array_clone>
 8005a1c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005a1e:	9451      	str	r4, [sp, #324]	; 0x144
 8005a20:	6992      	ldr	r2, [r2, #24]
 8005a22:	f8da 300c 	ldr.w	r3, [sl, #12]
 8005a26:	6892      	ldr	r2, [r2, #8]
 8005a28:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005a2a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	921c      	str	r2, [sp, #112]	; 0x70
 8005a30:	f8db 5000 	ldr.w	r5, [fp]
 8005a34:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005a36:	4401      	add	r1, r0
 8005a38:	932e      	str	r3, [sp, #184]	; 0xb8
 8005a3a:	9126      	str	r1, [sp, #152]	; 0x98
 8005a3c:	f8da 3000 	ldr.w	r3, [sl]
 8005a40:	f8d2 e000 	ldr.w	lr, [r2]
 8005a44:	f9bd 40a8 	ldrsh.w	r4, [sp, #168]	; 0xa8
 8005a48:	2d00      	cmp	r5, #0
 8005a4a:	f000 80a2 	beq.w	8005b92 <forward_conv2d_nl_pool_integer_UAUA+0x2fa>
 8005a4e:	686a      	ldr	r2, [r5, #4]
 8005a50:	2a00      	cmp	r2, #0
 8005a52:	f000 809e 	beq.w	8005b92 <forward_conv2d_nl_pool_integer_UAUA+0x2fa>
 8005a56:	8869      	ldrh	r1, [r5, #2]
 8005a58:	2900      	cmp	r1, #0
 8005a5a:	f000 809a 	beq.w	8005b92 <forward_conv2d_nl_pool_integer_UAUA+0x2fa>
 8005a5e:	6812      	ldr	r2, [r2, #0]
 8005a60:	edd2 7a00 	vldr	s15, [r2]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f000 8099 	beq.w	8005b9c <forward_conv2d_nl_pool_integer_UAUA+0x304>
 8005a6a:	685a      	ldr	r2, [r3, #4]
 8005a6c:	2a00      	cmp	r2, #0
 8005a6e:	f000 8095 	beq.w	8005b9c <forward_conv2d_nl_pool_integer_UAUA+0x304>
 8005a72:	8859      	ldrh	r1, [r3, #2]
 8005a74:	2900      	cmp	r1, #0
 8005a76:	f000 8091 	beq.w	8005b9c <forward_conv2d_nl_pool_integer_UAUA+0x304>
 8005a7a:	6812      	ldr	r2, [r2, #0]
 8005a7c:	ed92 0a00 	vldr	s0, [r2]
 8005a80:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005a82:	2a01      	cmp	r2, #1
 8005a84:	f000 8090 	beq.w	8005ba8 <forward_conv2d_nl_pool_integer_UAUA+0x310>
 8005a88:	2200      	movs	r2, #0
 8005a8a:	9814      	ldr	r0, [sp, #80]	; 0x50
 8005a8c:	f8db 1018 	ldr.w	r1, [fp, #24]
 8005a90:	6980      	ldr	r0, [r0, #24]
 8005a92:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8005a94:	f8d1 b008 	ldr.w	fp, [r1, #8]
 8005a98:	f8d6 c018 	ldr.w	ip, [r6, #24]
 8005a9c:	6881      	ldr	r1, [r0, #8]
 8005a9e:	911d      	str	r1, [sp, #116]	; 0x74
 8005aa0:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8005aa4:	9122      	str	r1, [sp, #136]	; 0x88
 8005aa6:	b13d      	cbz	r5, 8005ab8 <forward_conv2d_nl_pool_integer_UAUA+0x220>
 8005aa8:	6869      	ldr	r1, [r5, #4]
 8005aaa:	2900      	cmp	r1, #0
 8005aac:	f000 822f 	beq.w	8005f0e <forward_conv2d_nl_pool_integer_UAUA+0x676>
 8005ab0:	886d      	ldrh	r5, [r5, #2]
 8005ab2:	b10d      	cbz	r5, 8005ab8 <forward_conv2d_nl_pool_integer_UAUA+0x220>
 8005ab4:	6849      	ldr	r1, [r1, #4]
 8005ab6:	780d      	ldrb	r5, [r1, #0]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f000 816b 	beq.w	8005d94 <forward_conv2d_nl_pool_integer_UAUA+0x4fc>
 8005abe:	6859      	ldr	r1, [r3, #4]
 8005ac0:	2900      	cmp	r1, #0
 8005ac2:	f000 81fb 	beq.w	8005ebc <forward_conv2d_nl_pool_integer_UAUA+0x624>
 8005ac6:	885b      	ldrh	r3, [r3, #2]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	f000 8163 	beq.w	8005d94 <forward_conv2d_nl_pool_integer_UAUA+0x4fc>
 8005ace:	684b      	ldr	r3, [r1, #4]
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	9313      	str	r3, [sp, #76]	; 0x4c
 8005ad4:	f1be 0f00 	cmp.w	lr, #0
 8005ad8:	f000 8161 	beq.w	8005d9e <forward_conv2d_nl_pool_integer_UAUA+0x506>
 8005adc:	f8de 3004 	ldr.w	r3, [lr, #4]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f000 81f2 	beq.w	8005eca <forward_conv2d_nl_pool_integer_UAUA+0x632>
 8005ae6:	e9d3 1300 	ldrd	r1, r3, [r3]
 8005aea:	9314      	str	r3, [sp, #80]	; 0x50
 8005aec:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8005aee:	f8bd 309c 	ldrh.w	r3, [sp, #156]	; 0x9c
 8005af2:	2801      	cmp	r0, #1
 8005af4:	f000 815c 	beq.w	8005db0 <forward_conv2d_nl_pool_integer_UAUA+0x518>
 8005af8:	4298      	cmp	r0, r3
 8005afa:	bf0c      	ite	eq
 8005afc:	2203      	moveq	r2, #3
 8005afe:	2200      	movne	r2, #0
 8005b00:	9233      	str	r2, [sp, #204]	; 0xcc
 8005b02:	2200      	movs	r2, #0
 8005b04:	f8ad 20f6 	strh.w	r2, [sp, #246]	; 0xf6
 8005b08:	923e      	str	r2, [sp, #248]	; 0xf8
 8005b0a:	ed91 7a00 	vldr	s14, [r1]
 8005b0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b12:	f10d 00f6 	add.w	r0, sp, #246	; 0xf6
 8005b16:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8005b1a:	9334      	str	r3, [sp, #208]	; 0xd0
 8005b1c:	9223      	str	r2, [sp, #140]	; 0x8c
 8005b1e:	f001 f9f5 	bl	8006f0c <align_factor>
 8005b22:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 8005b26:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
 8005b2a:	9317      	str	r3, [sp, #92]	; 0x5c
 8005b2c:	fa1f f389 	uxth.w	r3, r9
 8005b30:	9318      	str	r3, [sp, #96]	; 0x60
 8005b32:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8005b34:	903e      	str	r0, [sp, #248]	; 0xf8
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	f000 80f7 	beq.w	8005d2a <forward_conv2d_nl_pool_integer_UAUA+0x492>
 8005b3c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8005b3e:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8005b40:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
 8005b42:	9219      	str	r2, [sp, #100]	; 0x64
 8005b44:	e9cd 4227 	strd	r4, r2, [sp, #156]	; 0x9c
 8005b48:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005b4a:	fb06 f101 	mul.w	r1, r6, r1
 8005b4e:	fb00 f202 	mul.w	r2, r0, r2
 8005b52:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8005b54:	912e      	str	r1, [sp, #184]	; 0xb8
 8005b56:	fb03 f202 	mul.w	r2, r3, r2
 8005b5a:	fb03 f100 	mul.w	r1, r3, r0
 8005b5e:	b2b3      	uxth	r3, r6
 8005b60:	9323      	str	r3, [sp, #140]	; 0x8c
 8005b62:	b283      	uxth	r3, r0
 8005b64:	932c      	str	r3, [sp, #176]	; 0xb0
 8005b66:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 8005b6a:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8005b6c:	9235      	str	r2, [sp, #212]	; 0xd4
 8005b6e:	9136      	str	r1, [sp, #216]	; 0xd8
 8005b70:	9334      	str	r3, [sp, #208]	; 0xd0
 8005b72:	9516      	str	r5, [sp, #88]	; 0x58
 8005b74:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	dd6c      	ble.n	8005c54 <forward_conv2d_nl_pool_integer_UAUA+0x3bc>
 8005b7a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8005b7c:	2b03      	cmp	r3, #3
 8005b7e:	f000 816a 	beq.w	8005e56 <forward_conv2d_nl_pool_integer_UAUA+0x5be>
 8005b82:	2b04      	cmp	r3, #4
 8005b84:	f000 811c 	beq.w	8005dc0 <forward_conv2d_nl_pool_integer_UAUA+0x528>
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d01f      	beq.n	8005bcc <forward_conv2d_nl_pool_integer_UAUA+0x334>
 8005b8c:	e7fe      	b.n	8005b8c <forward_conv2d_nl_pool_integer_UAUA+0x2f4>
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	deff      	udf	#255	; 0xff
 8005b92:	eddf 7a8a 	vldr	s15, [pc, #552]	; 8005dbc <forward_conv2d_nl_pool_integer_UAUA+0x524>
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	f47f af67 	bne.w	8005a6a <forward_conv2d_nl_pool_integer_UAUA+0x1d2>
 8005b9c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005b9e:	ed9f 0a87 	vldr	s0, [pc, #540]	; 8005dbc <forward_conv2d_nl_pool_integer_UAUA+0x524>
 8005ba2:	2a01      	cmp	r2, #1
 8005ba4:	f47f af70 	bne.w	8005a88 <forward_conv2d_nl_pool_integer_UAUA+0x1f0>
 8005ba8:	f1b9 0f01 	cmp.w	r9, #1
 8005bac:	f47f af6c 	bne.w	8005a88 <forward_conv2d_nl_pool_integer_UAUA+0x1f0>
 8005bb0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005bb2:	2a00      	cmp	r2, #0
 8005bb4:	f47f af68 	bne.w	8005a88 <forward_conv2d_nl_pool_integer_UAUA+0x1f0>
 8005bb8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005bba:	2a00      	cmp	r2, #0
 8005bbc:	f47f af64 	bne.w	8005a88 <forward_conv2d_nl_pool_integer_UAUA+0x1f0>
 8005bc0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005bc2:	2a01      	cmp	r2, #1
 8005bc4:	f000 817c 	beq.w	8005ec0 <forward_conv2d_nl_pool_integer_UAUA+0x628>
 8005bc8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005bca:	e75e      	b.n	8005a8a <forward_conv2d_nl_pool_integer_UAUA+0x1f2>
 8005bcc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005bce:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005bd0:	9311      	str	r3, [sp, #68]	; 0x44
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	9310      	str	r3, [sp, #64]	; 0x40
 8005bd6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005bd8:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8005bda:	930f      	str	r3, [sp, #60]	; 0x3c
 8005bdc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005be0:	920c      	str	r2, [sp, #48]	; 0x30
 8005be2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005be4:	930e      	str	r3, [sp, #56]	; 0x38
 8005be6:	920b      	str	r2, [sp, #44]	; 0x2c
 8005be8:	f10d 02f6 	add.w	r2, sp, #246	; 0xf6
 8005bec:	920a      	str	r2, [sp, #40]	; 0x28
 8005bee:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005bf0:	ab3e      	add	r3, sp, #248	; 0xf8
 8005bf2:	9208      	str	r2, [sp, #32]
 8005bf4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005bf6:	9309      	str	r3, [sp, #36]	; 0x24
 8005bf8:	9207      	str	r2, [sp, #28]
 8005bfa:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005bfc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005bfe:	e9cd 6205 	strd	r6, r2, [sp, #20]
 8005c02:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005c04:	4658      	mov	r0, fp
 8005c06:	9204      	str	r2, [sp, #16]
 8005c08:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005c0a:	9203      	str	r2, [sp, #12]
 8005c0c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005c0e:	9202      	str	r2, [sp, #8]
 8005c10:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005c12:	9201      	str	r2, [sp, #4]
 8005c14:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005c16:	9200      	str	r2, [sp, #0]
 8005c18:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8005c1a:	fa1f f289 	uxth.w	r2, r9
 8005c1e:	950d      	str	r5, [sp, #52]	; 0x34
 8005c20:	f001 f9d2 	bl	8006fc8 <st_uaua8_convolve_1x1>
 8005c24:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005c26:	9926      	ldr	r1, [sp, #152]	; 0x98
 8005c28:	428b      	cmp	r3, r1
 8005c2a:	f000 80fe 	beq.w	8005e2a <forward_conv2d_nl_pool_integer_UAUA+0x592>
 8005c2e:	1acb      	subs	r3, r1, r3
 8005c30:	4599      	cmp	r9, r3
 8005c32:	9326      	str	r3, [sp, #152]	; 0x98
 8005c34:	bf28      	it	cs
 8005c36:	4699      	movcs	r9, r3
 8005c38:	2e00      	cmp	r6, #0
 8005c3a:	f040 80fd 	bne.w	8005e38 <forward_conv2d_nl_pool_integer_UAUA+0x5a0>
 8005c3e:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8005c40:	449b      	add	fp, r3
 8005c42:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8005c44:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8005c46:	4641      	mov	r1, r8
 8005c48:	4638      	mov	r0, r7
 8005c4a:	9d2f      	ldr	r5, [sp, #188]	; 0xbc
 8005c4c:	47a8      	blx	r5
 8005c4e:	3401      	adds	r4, #1
 8005c50:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005c52:	b224      	sxth	r4, r4
 8005c54:	3b01      	subs	r3, #1
 8005c56:	9324      	str	r3, [sp, #144]	; 0x90
 8005c58:	d473      	bmi.n	8005d42 <forward_conv2d_nl_pool_integer_UAUA+0x4aa>
 8005c5a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8005c5c:	429c      	cmp	r4, r3
 8005c5e:	db39      	blt.n	8005cd4 <forward_conv2d_nl_pool_integer_UAUA+0x43c>
 8005c60:	f04f 0e01 	mov.w	lr, #1
 8005c64:	f8bd 10ac 	ldrh.w	r1, [sp, #172]	; 0xac
 8005c68:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005c6a:	f8bd c0dc 	ldrh.w	ip, [sp, #220]	; 0xdc
 8005c6e:	1aca      	subs	r2, r1, r3
 8005c70:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8005c72:	f8bd 30a4 	ldrh.w	r3, [sp, #164]	; 0xa4
 8005c76:	f8bd 00e4 	ldrh.w	r0, [sp, #228]	; 0xe4
 8005c7a:	9508      	str	r5, [sp, #32]
 8005c7c:	9101      	str	r1, [sp, #4]
 8005c7e:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8005c80:	f8bd 109c 	ldrh.w	r1, [sp, #156]	; 0x9c
 8005c84:	1ae4      	subs	r4, r4, r3
 8005c86:	9305      	str	r3, [sp, #20]
 8005c88:	f8cd c018 	str.w	ip, [sp, #24]
 8005c8c:	f8bd 30e8 	ldrh.w	r3, [sp, #232]	; 0xe8
 8005c90:	f8bd c0e0 	ldrh.w	ip, [sp, #224]	; 0xe0
 8005c94:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8005c98:	b292      	uxth	r2, r2
 8005c9a:	9302      	str	r3, [sp, #8]
 8005c9c:	f8cd c000 	str.w	ip, [sp]
 8005ca0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005ca2:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8005ca4:	a84b      	add	r0, sp, #300	; 0x12c
 8005ca6:	46ac      	mov	ip, r5
 8005ca8:	f8cd e01c 	str.w	lr, [sp, #28]
 8005cac:	47e0      	blx	ip
 8005cae:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8005cb0:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8005cb2:	696b      	ldr	r3, [r5, #20]
 8005cb4:	6882      	ldr	r2, [r0, #8]
 8005cb6:	68d9      	ldr	r1, [r3, #12]
 8005cb8:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8005cba:	f9bd 30a4 	ldrsh.w	r3, [sp, #164]	; 0xa4
 8005cbe:	440a      	add	r2, r1
 8005cc0:	1aeb      	subs	r3, r5, r3
 8005cc2:	9919      	ldr	r1, [sp, #100]	; 0x64
 8005cc4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005cc8:	3101      	adds	r1, #1
 8005cca:	b21b      	sxth	r3, r3
 8005ccc:	b224      	sxth	r4, r4
 8005cce:	9119      	str	r1, [sp, #100]	; 0x64
 8005cd0:	6082      	str	r2, [r0, #8]
 8005cd2:	9327      	str	r3, [sp, #156]	; 0x9c
 8005cd4:	f8da 3014 	ldr.w	r3, [sl, #20]
 8005cd8:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	4413      	add	r3, r2
 8005ce0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8005ce2:	f8c8 3008 	str.w	r3, [r8, #8]
 8005ce6:	6a12      	ldr	r2, [r2, #32]
 8005ce8:	b13a      	cbz	r2, 8005cfa <forward_conv2d_nl_pool_integer_UAUA+0x462>
 8005cea:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8005cec:	695a      	ldr	r2, [r3, #20]
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	68d2      	ldr	r2, [r2, #12]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	60bb      	str	r3, [r7, #8]
 8005cf6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005cfa:	f8da 1014 	ldr.w	r1, [sl, #20]
 8005cfe:	f8da 200c 	ldr.w	r2, [sl, #12]
 8005d02:	68c8      	ldr	r0, [r1, #12]
 8005d04:	68d2      	ldr	r2, [r2, #12]
 8005d06:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8005d0a:	fb00 1202 	mla	r2, r0, r2, r1
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d306      	bcc.n	8005d20 <forward_conv2d_nl_pool_integer_UAUA+0x488>
 8005d12:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8005d14:	f8c8 1008 	str.w	r1, [r8, #8]
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	b10b      	cbz	r3, 8005d20 <forward_conv2d_nl_pool_integer_UAUA+0x488>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	60bb      	str	r3, [r7, #8]
 8005d20:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005d22:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8005d24:	4293      	cmp	r3, r2
 8005d26:	f4ff af25 	bcc.w	8005b74 <forward_conv2d_nl_pool_integer_UAUA+0x2dc>
 8005d2a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005d2e:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8005d30:	f8c8 3008 	str.w	r3, [r8, #8]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	60bb      	str	r3, [r7, #8]
 8005d38:	68d3      	ldr	r3, [r2, #12]
 8005d3a:	6093      	str	r3, [r2, #8]
 8005d3c:	b053      	add	sp, #332	; 0x14c
 8005d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d42:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8005d44:	e9d7 2102 	ldrd	r2, r1, [r7, #8]
 8005d48:	fb03 2314 	mls	r3, r3, r4, r2
 8005d4c:	4299      	cmp	r1, r3
 8005d4e:	bf84      	itt	hi
 8005d50:	6878      	ldrhi	r0, [r7, #4]
 8005d52:	181b      	addhi	r3, r3, r0
 8005d54:	4299      	cmp	r1, r3
 8005d56:	d212      	bcs.n	8005d7e <forward_conv2d_nl_pool_integer_UAUA+0x4e6>
 8005d58:	9834      	ldr	r0, [sp, #208]	; 0xd0
 8005d5a:	4284      	cmp	r4, r0
 8005d5c:	d00f      	beq.n	8005d7e <forward_conv2d_nl_pool_integer_UAUA+0x4e6>
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	4401      	add	r1, r0
 8005d62:	428b      	cmp	r3, r1
 8005d64:	d20b      	bcs.n	8005d7e <forward_conv2d_nl_pool_integer_UAUA+0x4e6>
 8005d66:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8005d68:	3a01      	subs	r2, #1
 8005d6a:	f813 1b01 	ldrb.w	r1, [r3], #1
 8005d6e:	f802 1f01 	strb.w	r1, [r2, #1]!
 8005d72:	68f9      	ldr	r1, [r7, #12]
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	4401      	add	r1, r0
 8005d78:	428b      	cmp	r3, r1
 8005d7a:	d3f6      	bcc.n	8005d6a <forward_conv2d_nl_pool_integer_UAUA+0x4d2>
 8005d7c:	9516      	str	r5, [sp, #88]	; 0x58
 8005d7e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005d80:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8005d82:	b2a4      	uxth	r4, r4
 8005d84:	4413      	add	r3, r2
 8005d86:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8005d88:	1b1b      	subs	r3, r3, r4
 8005d8a:	b21b      	sxth	r3, r3
 8005d8c:	4414      	add	r4, r2
 8005d8e:	9328      	str	r3, [sp, #160]	; 0xa0
 8005d90:	b224      	sxth	r4, r4
 8005d92:	e762      	b.n	8005c5a <forward_conv2d_nl_pool_integer_UAUA+0x3c2>
 8005d94:	9313      	str	r3, [sp, #76]	; 0x4c
 8005d96:	f1be 0f00 	cmp.w	lr, #0
 8005d9a:	f47f ae9f 	bne.w	8005adc <forward_conv2d_nl_pool_integer_UAUA+0x244>
 8005d9e:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8005da0:	4671      	mov	r1, lr
 8005da2:	2801      	cmp	r0, #1
 8005da4:	f8cd e050 	str.w	lr, [sp, #80]	; 0x50
 8005da8:	f8bd 309c 	ldrh.w	r3, [sp, #156]	; 0x9c
 8005dac:	f47f aea4 	bne.w	8005af8 <forward_conv2d_nl_pool_integer_UAUA+0x260>
 8005db0:	2a00      	cmp	r2, #0
 8005db2:	bf0c      	ite	eq
 8005db4:	2204      	moveq	r2, #4
 8005db6:	2202      	movne	r2, #2
 8005db8:	9233      	str	r2, [sp, #204]	; 0xcc
 8005dba:	e6a2      	b.n	8005b02 <forward_conv2d_nl_pool_integer_UAUA+0x26a>
 8005dbc:	00000000 	.word	0x00000000
 8005dc0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8005dc2:	429c      	cmp	r4, r3
 8005dc4:	f000 8090 	beq.w	8005ee8 <forward_conv2d_nl_pool_integer_UAUA+0x650>
 8005dc8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005dca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005dcc:	9311      	str	r3, [sp, #68]	; 0x44
 8005dce:	2301      	movs	r3, #1
 8005dd0:	9310      	str	r3, [sp, #64]	; 0x40
 8005dd2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005dd4:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8005dd6:	930f      	str	r3, [sp, #60]	; 0x3c
 8005dd8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005ddc:	920c      	str	r2, [sp, #48]	; 0x30
 8005dde:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005de0:	930e      	str	r3, [sp, #56]	; 0x38
 8005de2:	920b      	str	r2, [sp, #44]	; 0x2c
 8005de4:	f10d 02f6 	add.w	r2, sp, #246	; 0xf6
 8005de8:	920a      	str	r2, [sp, #40]	; 0x28
 8005dea:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005dec:	ab3e      	add	r3, sp, #248	; 0xf8
 8005dee:	9208      	str	r2, [sp, #32]
 8005df0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005df2:	9309      	str	r3, [sp, #36]	; 0x24
 8005df4:	9207      	str	r2, [sp, #28]
 8005df6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005df8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005dfa:	e9cd 6205 	strd	r6, r2, [sp, #20]
 8005dfe:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005e00:	4658      	mov	r0, fp
 8005e02:	9204      	str	r2, [sp, #16]
 8005e04:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005e06:	9203      	str	r2, [sp, #12]
 8005e08:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005e0a:	9202      	str	r2, [sp, #8]
 8005e0c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005e0e:	9201      	str	r2, [sp, #4]
 8005e10:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005e12:	9200      	str	r2, [sp, #0]
 8005e14:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8005e16:	fa1f f289 	uxth.w	r2, r9
 8005e1a:	950d      	str	r5, [sp, #52]	; 0x34
 8005e1c:	f000 fe14 	bl	8006a48 <st_uaua8_convolve>
 8005e20:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005e22:	9926      	ldr	r1, [sp, #152]	; 0x98
 8005e24:	428b      	cmp	r3, r1
 8005e26:	f47f af02 	bne.w	8005c2e <forward_conv2d_nl_pool_integer_UAUA+0x396>
 8005e2a:	f04f 0900 	mov.w	r9, #0
 8005e2e:	f8cd 9098 	str.w	r9, [sp, #152]	; 0x98
 8005e32:	2e00      	cmp	r6, #0
 8005e34:	f43f af03 	beq.w	8005c3e <forward_conv2d_nl_pool_integer_UAUA+0x3a6>
 8005e38:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005e3a:	1af3      	subs	r3, r6, r3
 8005e3c:	d504      	bpl.n	8005e48 <forward_conv2d_nl_pool_integer_UAUA+0x5b0>
 8005e3e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005e40:	1b96      	subs	r6, r2, r6
 8005e42:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8005e44:	fb02 bb06 	mla	fp, r2, r6, fp
 8005e48:	ea23 76e3 	bic.w	r6, r3, r3, asr #31
 8005e4c:	b2b6      	uxth	r6, r6
 8005e4e:	e6f8      	b.n	8005c42 <forward_conv2d_nl_pool_integer_UAUA+0x3aa>
 8005e50:	9332      	str	r3, [sp, #200]	; 0xc8
 8005e52:	4635      	mov	r5, r6
 8005e54:	e5a4      	b.n	80059a0 <forward_conv2d_nl_pool_integer_UAUA+0x108>
 8005e56:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8005e58:	429c      	cmp	r4, r3
 8005e5a:	d05a      	beq.n	8005f12 <forward_conv2d_nl_pool_integer_UAUA+0x67a>
 8005e5c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005e5e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005e60:	9311      	str	r3, [sp, #68]	; 0x44
 8005e62:	2301      	movs	r3, #1
 8005e64:	9310      	str	r3, [sp, #64]	; 0x40
 8005e66:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005e68:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8005e6a:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e6c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005e70:	920c      	str	r2, [sp, #48]	; 0x30
 8005e72:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005e74:	930e      	str	r3, [sp, #56]	; 0x38
 8005e76:	920b      	str	r2, [sp, #44]	; 0x2c
 8005e78:	f10d 02f6 	add.w	r2, sp, #246	; 0xf6
 8005e7c:	920a      	str	r2, [sp, #40]	; 0x28
 8005e7e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005e80:	ab3e      	add	r3, sp, #248	; 0xf8
 8005e82:	9208      	str	r2, [sp, #32]
 8005e84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005e86:	9309      	str	r3, [sp, #36]	; 0x24
 8005e88:	9207      	str	r2, [sp, #28]
 8005e8a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005e8c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005e8e:	e9cd 6205 	strd	r6, r2, [sp, #20]
 8005e92:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005e94:	4658      	mov	r0, fp
 8005e96:	9204      	str	r2, [sp, #16]
 8005e98:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005e9a:	9203      	str	r2, [sp, #12]
 8005e9c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005e9e:	9202      	str	r2, [sp, #8]
 8005ea0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005ea2:	9201      	str	r2, [sp, #4]
 8005ea4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005ea6:	9200      	str	r2, [sp, #0]
 8005ea8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8005eaa:	fa1f f289 	uxth.w	r2, r9
 8005eae:	950d      	str	r5, [sp, #52]	; 0x34
 8005eb0:	f001 f9a8 	bl	8007204 <st_uaua8_convolve_dw>
 8005eb4:	e6b6      	b.n	8005c24 <forward_conv2d_nl_pool_integer_UAUA+0x38c>
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	deff      	udf	#255	; 0xff
 8005ebc:	9113      	str	r1, [sp, #76]	; 0x4c
 8005ebe:	e609      	b.n	8005ad4 <forward_conv2d_nl_pool_integer_UAUA+0x23c>
 8005ec0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005ec2:	1e51      	subs	r1, r2, #1
 8005ec4:	424a      	negs	r2, r1
 8005ec6:	414a      	adcs	r2, r1
 8005ec8:	e5df      	b.n	8005a8a <forward_conv2d_nl_pool_integer_UAUA+0x1f2>
 8005eca:	4619      	mov	r1, r3
 8005ecc:	9314      	str	r3, [sp, #80]	; 0x50
 8005ece:	e60d      	b.n	8005aec <forward_conv2d_nl_pool_integer_UAUA+0x254>
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	9313      	str	r3, [sp, #76]	; 0x4c
 8005ed4:	e512      	b.n	80058fc <forward_conv2d_nl_pool_integer_UAUA+0x64>
 8005ed6:	9413      	str	r4, [sp, #76]	; 0x4c
 8005ed8:	e510      	b.n	80058fc <forward_conv2d_nl_pool_integer_UAUA+0x64>
 8005eda:	9314      	str	r3, [sp, #80]	; 0x50
 8005edc:	e4f5      	b.n	80058ca <forward_conv2d_nl_pool_integer_UAUA+0x32>
 8005ede:	4b14      	ldr	r3, [pc, #80]	; (8005f30 <forward_conv2d_nl_pool_integer_UAUA+0x698>)
 8005ee0:	f8cd a094 	str.w	sl, [sp, #148]	; 0x94
 8005ee4:	932f      	str	r3, [sp, #188]	; 0xbc
 8005ee6:	e51b      	b.n	8005920 <forward_conv2d_nl_pool_integer_UAUA+0x88>
 8005ee8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	f47f af6c 	bne.w	8005dc8 <forward_conv2d_nl_pool_integer_UAUA+0x530>
 8005ef0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005ef2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005ef4:	9303      	str	r3, [sp, #12]
 8005ef6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005ef8:	991d      	ldr	r1, [sp, #116]	; 0x74
 8005efa:	9302      	str	r3, [sp, #8]
 8005efc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005efe:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8005f00:	9301      	str	r3, [sp, #4]
 8005f02:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8005f04:	9300      	str	r3, [sp, #0]
 8005f06:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005f08:	f000 fd1c 	bl	8006944 <st_uaua8_convolve_rank1upd>
 8005f0c:	e75c      	b.n	8005dc8 <forward_conv2d_nl_pool_integer_UAUA+0x530>
 8005f0e:	460d      	mov	r5, r1
 8005f10:	e5d2      	b.n	8005ab8 <forward_conv2d_nl_pool_integer_UAUA+0x220>
 8005f12:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d1a1      	bne.n	8005e5c <forward_conv2d_nl_pool_integer_UAUA+0x5c4>
 8005f18:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005f1a:	9915      	ldr	r1, [sp, #84]	; 0x54
 8005f1c:	9301      	str	r3, [sp, #4]
 8005f1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005f20:	981d      	ldr	r0, [sp, #116]	; 0x74
 8005f22:	9300      	str	r3, [sp, #0]
 8005f24:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8005f28:	f001 f8a0 	bl	800706c <st_uaua8_conv_dw_Wadapt>
 8005f2c:	e796      	b.n	8005e5c <forward_conv2d_nl_pool_integer_UAUA+0x5c4>
 8005f2e:	bf00      	nop
 8005f30:	08005895 	.word	0x08005895

08005f34 <forward_dense_integer_UAUA>:
 8005f34:	6943      	ldr	r3, [r0, #20]
 8005f36:	881a      	ldrh	r2, [r3, #0]
 8005f38:	2a00      	cmp	r2, #0
 8005f3a:	f000 80b1 	beq.w	80060a0 <forward_dense_integer_UAUA+0x16c>
 8005f3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f42:	685c      	ldr	r4, [r3, #4]
 8005f44:	b093      	sub	sp, #76	; 0x4c
 8005f46:	6863      	ldr	r3, [r4, #4]
 8005f48:	b103      	cbz	r3, 8005f4c <forward_dense_integer_UAUA+0x18>
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2a01      	cmp	r2, #1
 8005f4e:	f240 809e 	bls.w	800608e <forward_dense_integer_UAUA+0x15a>
 8005f52:	6921      	ldr	r1, [r4, #16]
 8005f54:	b101      	cbz	r1, 8005f58 <forward_dense_integer_UAUA+0x24>
 8005f56:	6809      	ldr	r1, [r1, #0]
 8005f58:	2a02      	cmp	r2, #2
 8005f5a:	f000 809e 	beq.w	800609a <forward_dense_integer_UAUA+0x166>
 8005f5e:	69e5      	ldr	r5, [r4, #28]
 8005f60:	2d00      	cmp	r5, #0
 8005f62:	f000 80f1 	beq.w	8006148 <forward_dense_integer_UAUA+0x214>
 8005f66:	6828      	ldr	r0, [r5, #0]
 8005f68:	f114 0618 	adds.w	r6, r4, #24
 8005f6c:	d007      	beq.n	8005f7e <forward_dense_integer_UAUA+0x4a>
 8005f6e:	8b26      	ldrh	r6, [r4, #24]
 8005f70:	2e01      	cmp	r6, #1
 8005f72:	f240 80dc 	bls.w	800612e <forward_dense_integer_UAUA+0x1fa>
 8005f76:	2d00      	cmp	r5, #0
 8005f78:	f000 80d0 	beq.w	800611c <forward_dense_integer_UAUA+0x1e8>
 8005f7c:	686e      	ldr	r6, [r5, #4]
 8005f7e:	2a03      	cmp	r2, #3
 8005f80:	f000 8088 	beq.w	8006094 <forward_dense_integer_UAUA+0x160>
 8005f84:	69b5      	ldr	r5, [r6, #24]
 8005f86:	68df      	ldr	r7, [r3, #12]
 8005f88:	68ca      	ldr	r2, [r1, #12]
 8005f8a:	68ad      	ldr	r5, [r5, #8]
 8005f8c:	f8d7 b004 	ldr.w	fp, [r7, #4]
 8005f90:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005f92:	950e      	str	r5, [sp, #56]	; 0x38
 8005f94:	e9d2 a401 	ldrd	sl, r4, [r2, #4]
 8005f98:	fa1f f58b 	uxth.w	r5, fp
 8005f9c:	68d2      	ldr	r2, [r2, #12]
 8005f9e:	950f      	str	r5, [sp, #60]	; 0x3c
 8005fa0:	fa1f f58a 	uxth.w	r5, sl
 8005fa4:	950d      	str	r5, [sp, #52]	; 0x34
 8005fa6:	fb02 f804 	mul.w	r8, r2, r4
 8005faa:	698d      	ldr	r5, [r1, #24]
 8005fac:	699c      	ldr	r4, [r3, #24]
 8005fae:	2e00      	cmp	r6, #0
 8005fb0:	f000 80cc 	beq.w	800614c <forward_dense_integer_UAUA+0x218>
 8005fb4:	6832      	ldr	r2, [r6, #0]
 8005fb6:	2a00      	cmp	r2, #0
 8005fb8:	f000 80a1 	beq.w	80060fe <forward_dense_integer_UAUA+0x1ca>
 8005fbc:	6992      	ldr	r2, [r2, #24]
 8005fbe:	6892      	ldr	r2, [r2, #8]
 8005fc0:	9209      	str	r2, [sp, #36]	; 0x24
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	6983      	ldr	r3, [r0, #24]
 8005fc6:	68ae      	ldr	r6, [r5, #8]
 8005fc8:	6809      	ldr	r1, [r1, #0]
 8005fca:	68a5      	ldr	r5, [r4, #8]
 8005fcc:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8005fd0:	6800      	ldr	r0, [r0, #0]
 8005fd2:	2a00      	cmp	r2, #0
 8005fd4:	d073      	beq.n	80060be <forward_dense_integer_UAUA+0x18a>
 8005fd6:	6854      	ldr	r4, [r2, #4]
 8005fd8:	4627      	mov	r7, r4
 8005fda:	2c00      	cmp	r4, #0
 8005fdc:	d062      	beq.n	80060a4 <forward_dense_integer_UAUA+0x170>
 8005fde:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 8005fe2:	f1bc 0f00 	cmp.w	ip, #0
 8005fe6:	f000 808e 	beq.w	8006106 <forward_dense_integer_UAUA+0x1d2>
 8005fea:	6823      	ldr	r3, [r4, #0]
 8005fec:	edd3 7a00 	vldr	s15, [r3]
 8005ff0:	2900      	cmp	r1, #0
 8005ff2:	f000 80b4 	beq.w	800615e <forward_dense_integer_UAUA+0x22a>
 8005ff6:	684b      	ldr	r3, [r1, #4]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f000 8087 	beq.w	800610c <forward_dense_integer_UAUA+0x1d8>
 8005ffe:	884c      	ldrh	r4, [r1, #2]
 8006000:	2c00      	cmp	r4, #0
 8006002:	d066      	beq.n	80060d2 <forward_dense_integer_UAUA+0x19e>
 8006004:	681f      	ldr	r7, [r3, #0]
 8006006:	ed97 0a00 	vldr	s0, [r7]
 800600a:	2a00      	cmp	r2, #0
 800600c:	f040 8091 	bne.w	8006132 <forward_dense_integer_UAUA+0x1fe>
 8006010:	920b      	str	r2, [sp, #44]	; 0x2c
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	930c      	str	r3, [sp, #48]	; 0x30
 8006018:	2800      	cmp	r0, #0
 800601a:	d04a      	beq.n	80060b2 <forward_dense_integer_UAUA+0x17e>
 800601c:	6843      	ldr	r3, [r0, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d047      	beq.n	80060b2 <forward_dense_integer_UAUA+0x17e>
 8006022:	2400      	movs	r4, #0
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	f8ad 4042 	strh.w	r4, [sp, #66]	; 0x42
 800602a:	9411      	str	r4, [sp, #68]	; 0x44
 800602c:	ed92 7a00 	vldr	s14, [r2]
 8006030:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	f10d 0742 	add.w	r7, sp, #66	; 0x42
 800603a:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800603e:	4638      	mov	r0, r7
 8006040:	930a      	str	r3, [sp, #40]	; 0x28
 8006042:	f000 ff63 	bl	8006f0c <align_factor>
 8006046:	9011      	str	r0, [sp, #68]	; 0x44
 8006048:	f1b8 0f00 	cmp.w	r8, #0
 800604c:	d01c      	beq.n	8006088 <forward_dense_integer_UAUA+0x154>
 800604e:	fa1f fb8b 	uxth.w	fp, fp
 8006052:	fa1f fa8a 	uxth.w	sl, sl
 8006056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006058:	4628      	mov	r0, r5
 800605a:	e9cd 6306 	strd	r6, r3, [sp, #24]
 800605e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006060:	3401      	adds	r4, #1
 8006062:	9305      	str	r3, [sp, #20]
 8006064:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006066:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006068:	9304      	str	r3, [sp, #16]
 800606a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800606c:	4649      	mov	r1, r9
 800606e:	9303      	str	r3, [sp, #12]
 8006070:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006072:	4456      	add	r6, sl
 8006074:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8006078:	ab11      	add	r3, sp, #68	; 0x44
 800607a:	9300      	str	r3, [sp, #0]
 800607c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800607e:	f001 fe55 	bl	8007d2c <st_uaua8_fully_connected>
 8006082:	4544      	cmp	r4, r8
 8006084:	445d      	add	r5, fp
 8006086:	d1e6      	bne.n	8006056 <forward_dense_integer_UAUA+0x122>
 8006088:	b013      	add	sp, #76	; 0x4c
 800608a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800608e:	2300      	movs	r3, #0
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	deff      	udf	#255	; 0xff
 8006094:	2300      	movs	r3, #0
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	deff      	udf	#255	; 0xff
 800609a:	2300      	movs	r3, #0
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	deff      	udf	#255	; 0xff
 80060a0:	6853      	ldr	r3, [r2, #4]
 80060a2:	deff      	udf	#255	; 0xff
 80060a4:	2900      	cmp	r1, #0
 80060a6:	d03b      	beq.n	8006120 <forward_dense_integer_UAUA+0x1ec>
 80060a8:	684b      	ldr	r3, [r1, #4]
 80060aa:	b96b      	cbnz	r3, 80060c8 <forward_dense_integer_UAUA+0x194>
 80060ac:	eddf 7a2f 	vldr	s15, [pc, #188]	; 800616c <forward_dense_integer_UAUA+0x238>
 80060b0:	e012      	b.n	80060d8 <forward_dense_integer_UAUA+0x1a4>
 80060b2:	2300      	movs	r3, #0
 80060b4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80060b8:	9311      	str	r3, [sp, #68]	; 0x44
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	deff      	udf	#255	; 0xff
 80060be:	2900      	cmp	r1, #0
 80060c0:	d02e      	beq.n	8006120 <forward_dense_integer_UAUA+0x1ec>
 80060c2:	684b      	ldr	r3, [r1, #4]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d043      	beq.n	8006150 <forward_dense_integer_UAUA+0x21c>
 80060c8:	884c      	ldrh	r4, [r1, #2]
 80060ca:	eddf 7a28 	vldr	s15, [pc, #160]	; 800616c <forward_dense_integer_UAUA+0x238>
 80060ce:	2c00      	cmp	r4, #0
 80060d0:	d198      	bne.n	8006004 <forward_dense_integer_UAUA+0xd0>
 80060d2:	2a00      	cmp	r2, #0
 80060d4:	d03f      	beq.n	8006156 <forward_dense_integer_UAUA+0x222>
 80060d6:	6854      	ldr	r4, [r2, #4]
 80060d8:	4627      	mov	r7, r4
 80060da:	2c00      	cmp	r4, #0
 80060dc:	d02e      	beq.n	800613c <forward_dense_integer_UAUA+0x208>
 80060de:	ed9f 0a23 	vldr	s0, [pc, #140]	; 800616c <forward_dense_integer_UAUA+0x238>
 80060e2:	8852      	ldrh	r2, [r2, #2]
 80060e4:	b16a      	cbz	r2, 8006102 <forward_dense_integer_UAUA+0x1ce>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80060ec:	b351      	cbz	r1, 8006144 <forward_dense_integer_UAUA+0x210>
 80060ee:	684b      	ldr	r3, [r1, #4]
 80060f0:	b11b      	cbz	r3, 80060fa <forward_dense_integer_UAUA+0x1c6>
 80060f2:	884c      	ldrh	r4, [r1, #2]
 80060f4:	2c00      	cmp	r4, #0
 80060f6:	d18c      	bne.n	8006012 <forward_dense_integer_UAUA+0xde>
 80060f8:	2300      	movs	r3, #0
 80060fa:	930c      	str	r3, [sp, #48]	; 0x30
 80060fc:	e78c      	b.n	8006018 <forward_dense_integer_UAUA+0xe4>
 80060fe:	9209      	str	r2, [sp, #36]	; 0x24
 8006100:	e75f      	b.n	8005fc2 <forward_dense_integer_UAUA+0x8e>
 8006102:	920b      	str	r2, [sp, #44]	; 0x2c
 8006104:	e7f4      	b.n	80060f0 <forward_dense_integer_UAUA+0x1bc>
 8006106:	eddf 7a19 	vldr	s15, [pc, #100]	; 800616c <forward_dense_integer_UAUA+0x238>
 800610a:	e771      	b.n	8005ff0 <forward_dense_integer_UAUA+0xbc>
 800610c:	2a00      	cmp	r2, #0
 800610e:	d1e3      	bne.n	80060d8 <forward_dense_integer_UAUA+0x1a4>
 8006110:	2300      	movs	r3, #0
 8006112:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800616c <forward_dense_integer_UAUA+0x238>
 8006116:	930b      	str	r3, [sp, #44]	; 0x2c
 8006118:	930c      	str	r3, [sp, #48]	; 0x30
 800611a:	e77d      	b.n	8006018 <forward_dense_integer_UAUA+0xe4>
 800611c:	462e      	mov	r6, r5
 800611e:	e72e      	b.n	8005f7e <forward_dense_integer_UAUA+0x4a>
 8006120:	eddf 7a12 	vldr	s15, [pc, #72]	; 800616c <forward_dense_integer_UAUA+0x238>
 8006124:	910b      	str	r1, [sp, #44]	; 0x2c
 8006126:	910c      	str	r1, [sp, #48]	; 0x30
 8006128:	eeb0 0a67 	vmov.f32	s0, s15
 800612c:	e774      	b.n	8006018 <forward_dense_integer_UAUA+0xe4>
 800612e:	2600      	movs	r6, #0
 8006130:	e725      	b.n	8005f7e <forward_dense_integer_UAUA+0x4a>
 8006132:	6857      	ldr	r7, [r2, #4]
 8006134:	2f00      	cmp	r7, #0
 8006136:	d1d4      	bne.n	80060e2 <forward_dense_integer_UAUA+0x1ae>
 8006138:	970b      	str	r7, [sp, #44]	; 0x2c
 800613a:	e7db      	b.n	80060f4 <forward_dense_integer_UAUA+0x1c0>
 800613c:	940b      	str	r4, [sp, #44]	; 0x2c
 800613e:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800616c <forward_dense_integer_UAUA+0x238>
 8006142:	e7d5      	b.n	80060f0 <forward_dense_integer_UAUA+0x1bc>
 8006144:	910c      	str	r1, [sp, #48]	; 0x30
 8006146:	e767      	b.n	8006018 <forward_dense_integer_UAUA+0xe4>
 8006148:	4628      	mov	r0, r5
 800614a:	e70d      	b.n	8005f68 <forward_dense_integer_UAUA+0x34>
 800614c:	9609      	str	r6, [sp, #36]	; 0x24
 800614e:	e738      	b.n	8005fc2 <forward_dense_integer_UAUA+0x8e>
 8006150:	eddf 7a06 	vldr	s15, [pc, #24]	; 800616c <forward_dense_integer_UAUA+0x238>
 8006154:	e7dc      	b.n	8006110 <forward_dense_integer_UAUA+0x1dc>
 8006156:	920b      	str	r2, [sp, #44]	; 0x2c
 8006158:	ed9f 0a04 	vldr	s0, [pc, #16]	; 800616c <forward_dense_integer_UAUA+0x238>
 800615c:	e7cc      	b.n	80060f8 <forward_dense_integer_UAUA+0x1c4>
 800615e:	f1bc 0f00 	cmp.w	ip, #0
 8006162:	d0d5      	beq.n	8006110 <forward_dense_integer_UAUA+0x1dc>
 8006164:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800616c <forward_dense_integer_UAUA+0x238>
 8006168:	e7bd      	b.n	80060e6 <forward_dense_integer_UAUA+0x1b2>
 800616a:	bf00      	nop
 800616c:	00000000 	.word	0x00000000

08006170 <forward_sm>:
 8006170:	6942      	ldr	r2, [r0, #20]
 8006172:	8813      	ldrh	r3, [r2, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	f000 8086 	beq.w	8006286 <forward_sm+0x116>
 800617a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800617e:	ed2d 8b04 	vpush	{d8-d9}
 8006182:	6852      	ldr	r2, [r2, #4]
 8006184:	b085      	sub	sp, #20
 8006186:	6855      	ldr	r5, [r2, #4]
 8006188:	b105      	cbz	r5, 800618c <forward_sm+0x1c>
 800618a:	682d      	ldr	r5, [r5, #0]
 800618c:	2b01      	cmp	r3, #1
 800618e:	d972      	bls.n	8006276 <forward_sm+0x106>
 8006190:	6913      	ldr	r3, [r2, #16]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d06d      	beq.n	8006272 <forward_sm+0x102>
 8006196:	681f      	ldr	r7, [r3, #0]
 8006198:	68ec      	ldr	r4, [r5, #12]
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	68ab      	ldr	r3, [r5, #8]
 800619e:	6850      	ldr	r0, [r2, #4]
 80061a0:	6862      	ldr	r2, [r4, #4]
 80061a2:	0a1b      	lsrs	r3, r3, #8
 80061a4:	9201      	str	r2, [sp, #4]
 80061a6:	f04f 0201 	mov.w	r2, #1
 80061aa:	d007      	beq.n	80061bc <forward_sm+0x4c>
 80061ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80061b0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80061b4:	429c      	cmp	r4, r3
 80061b6:	fb01 f202 	mul.w	r2, r1, r2
 80061ba:	d1f9      	bne.n	80061b0 <forward_sm+0x40>
 80061bc:	69ae      	ldr	r6, [r5, #24]
 80061be:	9901      	ldr	r1, [sp, #4]
 80061c0:	68b5      	ldr	r5, [r6, #8]
 80061c2:	1a53      	subs	r3, r2, r1
 80061c4:	f8d7 9018 	ldr.w	r9, [r7, #24]
 80061c8:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 80061cc:	68f3      	ldr	r3, [r6, #12]
 80061ce:	f8d9 4008 	ldr.w	r4, [r9, #8]
 80061d2:	1a12      	subs	r2, r2, r0
 80061d4:	429d      	cmp	r5, r3
 80061d6:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 80061da:	d340      	bcc.n	800625e <forward_sm+0xee>
 80061dc:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80061e0:	008b      	lsls	r3, r1, #2
 80061e2:	ea4f 0880 	mov.w	r8, r0, lsl #2
 80061e6:	9300      	str	r3, [sp, #0]
 80061e8:	f1c8 0200 	rsb	r2, r8, #0
 80061ec:	425b      	negs	r3, r3
 80061ee:	9203      	str	r2, [sp, #12]
 80061f0:	9302      	str	r3, [sp, #8]
 80061f2:	60b5      	str	r5, [r6, #8]
 80061f4:	9b01      	ldr	r3, [sp, #4]
 80061f6:	f8c9 4008 	str.w	r4, [r9, #8]
 80061fa:	68b2      	ldr	r2, [r6, #8]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	ed92 8a00 	vldr	s16, [r2]
 8006202:	d93b      	bls.n	800627c <forward_sm+0x10c>
 8006204:	9900      	ldr	r1, [sp, #0]
 8006206:	1d13      	adds	r3, r2, #4
 8006208:	1857      	adds	r7, r2, r1
 800620a:	ecf3 7a01 	vldmia	r3!, {s15}
 800620e:	429f      	cmp	r7, r3
 8006210:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
 8006214:	d1f9      	bne.n	800620a <forward_sm+0x9a>
 8006216:	4692      	mov	sl, r2
 8006218:	46a3      	mov	fp, r4
 800621a:	46a0      	mov	r8, r4
 800621c:	eddf 8a1b 	vldr	s17, [pc, #108]	; 800628c <forward_sm+0x11c>
 8006220:	ecba 0a01 	vldmia	sl!, {s0}
 8006224:	ee30 0a48 	vsub.f32	s0, s0, s16
 8006228:	f003 fc78 	bl	8009b1c <expf>
 800622c:	4557      	cmp	r7, sl
 800622e:	eca8 0a01 	vstmia	r8!, {s0}
 8006232:	ee78 8a80 	vadd.f32	s17, s17, s0
 8006236:	d1f3      	bne.n	8006220 <forward_sm+0xb0>
 8006238:	ee89 7a28 	vdiv.f32	s14, s18, s17
 800623c:	9b00      	ldr	r3, [sp, #0]
 800623e:	18e2      	adds	r2, r4, r3
 8006240:	eddb 7a00 	vldr	s15, [fp]
 8006244:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006248:	eceb 7a01 	vstmia	fp!, {s15}
 800624c:	455a      	cmp	r2, fp
 800624e:	d1f7      	bne.n	8006240 <forward_sm+0xd0>
 8006250:	9a02      	ldr	r2, [sp, #8]
 8006252:	68f3      	ldr	r3, [r6, #12]
 8006254:	4415      	add	r5, r2
 8006256:	9a03      	ldr	r2, [sp, #12]
 8006258:	429d      	cmp	r5, r3
 800625a:	4414      	add	r4, r2
 800625c:	d2c9      	bcs.n	80061f2 <forward_sm+0x82>
 800625e:	60b3      	str	r3, [r6, #8]
 8006260:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8006264:	f8c9 3008 	str.w	r3, [r9, #8]
 8006268:	b005      	add	sp, #20
 800626a:	ecbd 8b04 	vpop	{d8-d9}
 800626e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	deff      	udf	#255	; 0xff
 8006276:	2300      	movs	r3, #0
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	deff      	udf	#255	; 0xff
 800627c:	2b00      	cmp	r3, #0
 800627e:	d0e7      	beq.n	8006250 <forward_sm+0xe0>
 8006280:	9b00      	ldr	r3, [sp, #0]
 8006282:	18d7      	adds	r7, r2, r3
 8006284:	e7c7      	b.n	8006216 <forward_sm+0xa6>
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	deff      	udf	#255	; 0xff
 800628a:	bf00      	nop
 800628c:	00000000 	.word	0x00000000

08006290 <ai_check_custom_types>:
 8006290:	4b13      	ldr	r3, [pc, #76]	; (80062e0 <ai_check_custom_types+0x50>)
 8006292:	b082      	sub	sp, #8
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	9301      	str	r3, [sp, #4]
 8006298:	b118      	cbz	r0, 80062a2 <ai_check_custom_types+0x12>
 800629a:	7803      	ldrb	r3, [r0, #0]
 800629c:	2b03      	cmp	r3, #3
 800629e:	d002      	beq.n	80062a6 <ai_check_custom_types+0x16>
 80062a0:	2000      	movs	r0, #0
 80062a2:	b002      	add	sp, #8
 80062a4:	4770      	bx	lr
 80062a6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d004      	beq.n	80062b8 <ai_check_custom_types+0x28>
 80062ae:	2001      	movs	r0, #1
 80062b0:	f080 0001 	eor.w	r0, r0, #1
 80062b4:	b002      	add	sp, #8
 80062b6:	4770      	bx	lr
 80062b8:	7842      	ldrb	r2, [r0, #1]
 80062ba:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80062be:	3001      	adds	r0, #1
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d1f4      	bne.n	80062ae <ai_check_custom_types+0x1e>
 80062c4:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80062c8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d1ee      	bne.n	80062ae <ai_check_custom_types+0x1e>
 80062d0:	7842      	ldrb	r2, [r0, #1]
 80062d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d1e9      	bne.n	80062ae <ai_check_custom_types+0x1e>
 80062da:	2000      	movs	r0, #0
 80062dc:	e7e8      	b.n	80062b0 <ai_check_custom_types+0x20>
 80062de:	bf00      	nop
 80062e0:	0800c98c 	.word	0x0800c98c

080062e4 <ai_layers_forward_all>:
 80062e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062e6:	6d86      	ldr	r6, [r0, #88]	; 0x58
 80062e8:	4604      	mov	r4, r0
 80062ea:	6d05      	ldr	r5, [r0, #80]	; 0x50
 80062ec:	b316      	cbz	r6, 8006334 <ai_layers_forward_all+0x50>
 80062ee:	b1bd      	cbz	r5, 8006320 <ai_layers_forward_all+0x3c>
 80062f0:	2700      	movs	r7, #0
 80062f2:	6545      	str	r5, [r0, #84]	; 0x54
 80062f4:	4629      	mov	r1, r5
 80062f6:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80062f8:	2001      	movs	r0, #1
 80062fa:	47b0      	blx	r6
 80062fc:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80062fe:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006300:	2002      	movs	r0, #2
 8006302:	47b0      	blx	r6
 8006304:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8006306:	692b      	ldr	r3, [r5, #16]
 8006308:	4628      	mov	r0, r5
 800630a:	4798      	blx	r3
 800630c:	68e9      	ldr	r1, [r5, #12]
 800630e:	428d      	cmp	r5, r1
 8006310:	d007      	beq.n	8006322 <ai_layers_forward_all+0x3e>
 8006312:	6561      	str	r1, [r4, #84]	; 0x54
 8006314:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006316:	2003      	movs	r0, #3
 8006318:	47b0      	blx	r6
 800631a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800631c:	2900      	cmp	r1, #0
 800631e:	d1ee      	bne.n	80062fe <ai_layers_forward_all+0x1a>
 8006320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006322:	2100      	movs	r1, #0
 8006324:	6567      	str	r7, [r4, #84]	; 0x54
 8006326:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006328:	2003      	movs	r0, #3
 800632a:	47b0      	blx	r6
 800632c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800632e:	2900      	cmp	r1, #0
 8006330:	d1e5      	bne.n	80062fe <ai_layers_forward_all+0x1a>
 8006332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006334:	2d00      	cmp	r5, #0
 8006336:	d0f3      	beq.n	8006320 <ai_layers_forward_all+0x3c>
 8006338:	6545      	str	r5, [r0, #84]	; 0x54
 800633a:	692b      	ldr	r3, [r5, #16]
 800633c:	4628      	mov	r0, r5
 800633e:	4798      	blx	r3
 8006340:	68eb      	ldr	r3, [r5, #12]
 8006342:	42ab      	cmp	r3, r5
 8006344:	d004      	beq.n	8006350 <ai_layers_forward_all+0x6c>
 8006346:	6563      	str	r3, [r4, #84]	; 0x54
 8006348:	461d      	mov	r5, r3
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1f5      	bne.n	800633a <ai_layers_forward_all+0x56>
 800634e:	e7e7      	b.n	8006320 <ai_layers_forward_all+0x3c>
 8006350:	2300      	movs	r3, #0
 8006352:	6563      	str	r3, [r4, #84]	; 0x54
 8006354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006356:	bf00      	nop

08006358 <pool_func_mp_array_integer_UINT8>:
 8006358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800635c:	b093      	sub	sp, #76	; 0x4c
 800635e:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8006360:	468c      	mov	ip, r1
 8006362:	69b5      	ldr	r5, [r6, #24]
 8006364:	6987      	ldr	r7, [r0, #24]
 8006366:	68a9      	ldr	r1, [r5, #8]
 8006368:	f8bd 5074 	ldrh.w	r5, [sp, #116]	; 0x74
 800636c:	6804      	ldr	r4, [r0, #0]
 800636e:	950d      	str	r5, [sp, #52]	; 0x34
 8006370:	f8bd 5078 	ldrh.w	r5, [sp, #120]	; 0x78
 8006374:	68b8      	ldr	r0, [r7, #8]
 8006376:	950e      	str	r5, [sp, #56]	; 0x38
 8006378:	f8bd 507c 	ldrh.w	r5, [sp, #124]	; 0x7c
 800637c:	6836      	ldr	r6, [r6, #0]
 800637e:	950f      	str	r5, [sp, #60]	; 0x3c
 8006380:	f8bd 5080 	ldrh.w	r5, [sp, #128]	; 0x80
 8006384:	f8bd a070 	ldrh.w	sl, [sp, #112]	; 0x70
 8006388:	9510      	str	r5, [sp, #64]	; 0x40
 800638a:	f8bd e084 	ldrh.w	lr, [sp, #132]	; 0x84
 800638e:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8006392:	f8bd 908c 	ldrh.w	r9, [sp, #140]	; 0x8c
 8006396:	2c00      	cmp	r4, #0
 8006398:	d038      	beq.n	800640c <pool_func_mp_array_integer_UINT8+0xb4>
 800639a:	6867      	ldr	r7, [r4, #4]
 800639c:	46bb      	mov	fp, r7
 800639e:	2f00      	cmp	r7, #0
 80063a0:	d02d      	beq.n	80063fe <pool_func_mp_array_integer_UINT8+0xa6>
 80063a2:	8865      	ldrh	r5, [r4, #2]
 80063a4:	9511      	str	r5, [sp, #68]	; 0x44
 80063a6:	2d00      	cmp	r5, #0
 80063a8:	d04d      	beq.n	8006446 <pool_func_mp_array_integer_UINT8+0xee>
 80063aa:	683d      	ldr	r5, [r7, #0]
 80063ac:	ed95 0a00 	vldr	s0, [r5]
 80063b0:	2e00      	cmp	r6, #0
 80063b2:	d064      	beq.n	800647e <pool_func_mp_array_integer_UINT8+0x126>
 80063b4:	6875      	ldr	r5, [r6, #4]
 80063b6:	2d00      	cmp	r5, #0
 80063b8:	d04f      	beq.n	800645a <pool_func_mp_array_integer_UINT8+0x102>
 80063ba:	8877      	ldrh	r7, [r6, #2]
 80063bc:	9711      	str	r7, [sp, #68]	; 0x44
 80063be:	2f00      	cmp	r7, #0
 80063c0:	d02f      	beq.n	8006422 <pool_func_mp_array_integer_UINT8+0xca>
 80063c2:	682f      	ldr	r7, [r5, #0]
 80063c4:	edd7 0a00 	vldr	s1, [r7]
 80063c8:	2c00      	cmp	r4, #0
 80063ca:	d150      	bne.n	800646e <pool_func_mp_array_integer_UINT8+0x116>
 80063cc:	686d      	ldr	r5, [r5, #4]
 80063ce:	782d      	ldrb	r5, [r5, #0]
 80063d0:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
 80063d4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80063d6:	9300      	str	r3, [sp, #0]
 80063d8:	9405      	str	r4, [sp, #20]
 80063da:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80063dc:	4613      	mov	r3, r2
 80063de:	9404      	str	r4, [sp, #16]
 80063e0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80063e2:	e9cd 8907 	strd	r8, r9, [sp, #28]
 80063e6:	9403      	str	r4, [sp, #12]
 80063e8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80063ea:	f8cd e018 	str.w	lr, [sp, #24]
 80063ee:	e9cd a401 	strd	sl, r4, [sp, #4]
 80063f2:	4662      	mov	r2, ip
 80063f4:	f003 f908 	bl	8009608 <st_uint8_maxpool>
 80063f8:	b013      	add	sp, #76	; 0x4c
 80063fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063fe:	2e00      	cmp	r6, #0
 8006400:	d02e      	beq.n	8006460 <pool_func_mp_array_integer_UINT8+0x108>
 8006402:	6875      	ldr	r5, [r6, #4]
 8006404:	b93d      	cbnz	r5, 8006416 <pool_func_mp_array_integer_UINT8+0xbe>
 8006406:	ed9f 0a28 	vldr	s0, [pc, #160]	; 80064a8 <pool_func_mp_array_integer_UINT8+0x150>
 800640a:	e00d      	b.n	8006428 <pool_func_mp_array_integer_UINT8+0xd0>
 800640c:	2e00      	cmp	r6, #0
 800640e:	d027      	beq.n	8006460 <pool_func_mp_array_integer_UINT8+0x108>
 8006410:	6875      	ldr	r5, [r6, #4]
 8006412:	2d00      	cmp	r5, #0
 8006414:	d03e      	beq.n	8006494 <pool_func_mp_array_integer_UINT8+0x13c>
 8006416:	8877      	ldrh	r7, [r6, #2]
 8006418:	ed9f 0a23 	vldr	s0, [pc, #140]	; 80064a8 <pool_func_mp_array_integer_UINT8+0x150>
 800641c:	9711      	str	r7, [sp, #68]	; 0x44
 800641e:	2f00      	cmp	r7, #0
 8006420:	d1cf      	bne.n	80063c2 <pool_func_mp_array_integer_UINT8+0x6a>
 8006422:	2c00      	cmp	r4, #0
 8006424:	d03d      	beq.n	80064a2 <pool_func_mp_array_integer_UINT8+0x14a>
 8006426:	6867      	ldr	r7, [r4, #4]
 8006428:	46bb      	mov	fp, r7
 800642a:	2f00      	cmp	r7, #0
 800642c:	d02e      	beq.n	800648c <pool_func_mp_array_integer_UINT8+0x134>
 800642e:	eddf 0a1e 	vldr	s1, [pc, #120]	; 80064a8 <pool_func_mp_array_integer_UINT8+0x150>
 8006432:	8864      	ldrh	r4, [r4, #2]
 8006434:	b954      	cbnz	r4, 800644c <pool_func_mp_array_integer_UINT8+0xf4>
 8006436:	2d00      	cmp	r5, #0
 8006438:	d0ca      	beq.n	80063d0 <pool_func_mp_array_integer_UINT8+0x78>
 800643a:	8876      	ldrh	r6, [r6, #2]
 800643c:	9611      	str	r6, [sp, #68]	; 0x44
 800643e:	2e00      	cmp	r6, #0
 8006440:	d1c4      	bne.n	80063cc <pool_func_mp_array_integer_UINT8+0x74>
 8006442:	2500      	movs	r5, #0
 8006444:	e7c4      	b.n	80063d0 <pool_func_mp_array_integer_UINT8+0x78>
 8006446:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80064a8 <pool_func_mp_array_integer_UINT8+0x150>
 800644a:	e7b1      	b.n	80063b0 <pool_func_mp_array_integer_UINT8+0x58>
 800644c:	f8db 4004 	ldr.w	r4, [fp, #4]
 8006450:	7824      	ldrb	r4, [r4, #0]
 8006452:	2e00      	cmp	r6, #0
 8006454:	d0f5      	beq.n	8006442 <pool_func_mp_array_integer_UINT8+0xea>
 8006456:	6875      	ldr	r5, [r6, #4]
 8006458:	e7ed      	b.n	8006436 <pool_func_mp_array_integer_UINT8+0xde>
 800645a:	2c00      	cmp	r4, #0
 800645c:	d1e4      	bne.n	8006428 <pool_func_mp_array_integer_UINT8+0xd0>
 800645e:	e01b      	b.n	8006498 <pool_func_mp_array_integer_UINT8+0x140>
 8006460:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80064a8 <pool_func_mp_array_integer_UINT8+0x150>
 8006464:	4634      	mov	r4, r6
 8006466:	4635      	mov	r5, r6
 8006468:	eef0 0a40 	vmov.f32	s1, s0
 800646c:	e7b0      	b.n	80063d0 <pool_func_mp_array_integer_UINT8+0x78>
 800646e:	f8d4 b004 	ldr.w	fp, [r4, #4]
 8006472:	f1bb 0f00 	cmp.w	fp, #0
 8006476:	d1dc      	bne.n	8006432 <pool_func_mp_array_integer_UINT8+0xda>
 8006478:	465c      	mov	r4, fp
 800647a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800647c:	e7df      	b.n	800643e <pool_func_mp_array_integer_UINT8+0xe6>
 800647e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8006480:	eddf 0a09 	vldr	s1, [pc, #36]	; 80064a8 <pool_func_mp_array_integer_UINT8+0x150>
 8006484:	2c00      	cmp	r4, #0
 8006486:	d1e1      	bne.n	800644c <pool_func_mp_array_integer_UINT8+0xf4>
 8006488:	4625      	mov	r5, r4
 800648a:	e7a1      	b.n	80063d0 <pool_func_mp_array_integer_UINT8+0x78>
 800648c:	463c      	mov	r4, r7
 800648e:	eddf 0a06 	vldr	s1, [pc, #24]	; 80064a8 <pool_func_mp_array_integer_UINT8+0x150>
 8006492:	e7d0      	b.n	8006436 <pool_func_mp_array_integer_UINT8+0xde>
 8006494:	ed9f 0a04 	vldr	s0, [pc, #16]	; 80064a8 <pool_func_mp_array_integer_UINT8+0x150>
 8006498:	2400      	movs	r4, #0
 800649a:	eddf 0a03 	vldr	s1, [pc, #12]	; 80064a8 <pool_func_mp_array_integer_UINT8+0x150>
 800649e:	4625      	mov	r5, r4
 80064a0:	e796      	b.n	80063d0 <pool_func_mp_array_integer_UINT8+0x78>
 80064a2:	eddf 0a01 	vldr	s1, [pc, #4]	; 80064a8 <pool_func_mp_array_integer_UINT8+0x150>
 80064a6:	e7cc      	b.n	8006442 <pool_func_mp_array_integer_UINT8+0xea>
 80064a8:	00000000 	.word	0x00000000

080064ac <arm_float_to_q15>:
 80064ac:	b4f0      	push	{r4, r5, r6, r7}
 80064ae:	0897      	lsrs	r7, r2, #2
 80064b0:	d065      	beq.n	800657e <arm_float_to_q15+0xd2>
 80064b2:	463e      	mov	r6, r7
 80064b4:	ed9f 6a56 	vldr	s12, [pc, #344]	; 8006610 <arm_float_to_q15+0x164>
 80064b8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80064bc:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 80064c0:	f100 0510 	add.w	r5, r0, #16
 80064c4:	f101 0408 	add.w	r4, r1, #8
 80064c8:	ed55 7a04 	vldr	s15, [r5, #-16]
 80064cc:	ee27 7a86 	vmul.f32	s14, s15, s12
 80064d0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80064d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064d8:	fe76 7aa5 	vselgt.f32	s15, s13, s11
 80064dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80064e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064e4:	ee17 3a90 	vmov	r3, s15
 80064e8:	f303 030f 	ssat	r3, #16, r3
 80064ec:	f824 3c08 	strh.w	r3, [r4, #-8]
 80064f0:	ed55 7a03 	vldr	s15, [r5, #-12]
 80064f4:	ee27 7a86 	vmul.f32	s14, s15, s12
 80064f8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80064fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006500:	fe76 7aa5 	vselgt.f32	s15, s13, s11
 8006504:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006508:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800650c:	ee17 3a90 	vmov	r3, s15
 8006510:	f303 030f 	ssat	r3, #16, r3
 8006514:	f824 3c06 	strh.w	r3, [r4, #-6]
 8006518:	ed55 7a02 	vldr	s15, [r5, #-8]
 800651c:	ee27 7a86 	vmul.f32	s14, s15, s12
 8006520:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8006524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006528:	fe76 7aa5 	vselgt.f32	s15, s13, s11
 800652c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006530:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006534:	ee17 3a90 	vmov	r3, s15
 8006538:	f303 030f 	ssat	r3, #16, r3
 800653c:	f824 3c04 	strh.w	r3, [r4, #-4]
 8006540:	ed55 7a01 	vldr	s15, [r5, #-4]
 8006544:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006548:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800654c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006550:	bfcc      	ite	gt
 8006552:	ee77 7aa6 	vaddgt.f32	s15, s15, s13
 8006556:	ee77 7ae6 	vsuble.f32	s15, s15, s13
 800655a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800655e:	ee17 3a90 	vmov	r3, s15
 8006562:	f303 030f 	ssat	r3, #16, r3
 8006566:	3e01      	subs	r6, #1
 8006568:	f824 3c02 	strh.w	r3, [r4, #-2]
 800656c:	f105 0510 	add.w	r5, r5, #16
 8006570:	f104 0408 	add.w	r4, r4, #8
 8006574:	d1a8      	bne.n	80064c8 <arm_float_to_q15+0x1c>
 8006576:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 800657a:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 800657e:	f012 0203 	ands.w	r2, r2, #3
 8006582:	d042      	beq.n	800660a <arm_float_to_q15+0x15e>
 8006584:	edd0 7a00 	vldr	s15, [r0]
 8006588:	eddf 5a21 	vldr	s11, [pc, #132]	; 8006610 <arm_float_to_q15+0x164>
 800658c:	ee67 6aa5 	vmul.f32	s13, s15, s11
 8006590:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8006594:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800659c:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 80065a0:	fe77 7a06 	vselgt.f32	s15, s14, s12
 80065a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80065ac:	ee17 3a90 	vmov	r3, s15
 80065b0:	f303 030f 	ssat	r3, #16, r3
 80065b4:	2a01      	cmp	r2, #1
 80065b6:	800b      	strh	r3, [r1, #0]
 80065b8:	d027      	beq.n	800660a <arm_float_to_q15+0x15e>
 80065ba:	edd0 7a01 	vldr	s15, [r0, #4]
 80065be:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80065c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80065c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065ca:	fe77 6a06 	vselgt.f32	s13, s14, s12
 80065ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80065d6:	ee17 3a90 	vmov	r3, s15
 80065da:	f303 030f 	ssat	r3, #16, r3
 80065de:	2a02      	cmp	r2, #2
 80065e0:	804b      	strh	r3, [r1, #2]
 80065e2:	d012      	beq.n	800660a <arm_float_to_q15+0x15e>
 80065e4:	edd0 7a02 	vldr	s15, [r0, #8]
 80065e8:	ee67 5aa5 	vmul.f32	s11, s15, s11
 80065ec:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 80065f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065f4:	fe37 7a06 	vselgt.f32	s14, s14, s12
 80065f8:	ee37 7a25 	vadd.f32	s14, s14, s11
 80065fc:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8006600:	ee17 3a10 	vmov	r3, s14
 8006604:	f303 030f 	ssat	r3, #16, r3
 8006608:	808b      	strh	r3, [r1, #4]
 800660a:	bcf0      	pop	{r4, r5, r6, r7}
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop
 8006610:	47000000 	.word	0x47000000

08006614 <arm_float_to_q7>:
 8006614:	b4f0      	push	{r4, r5, r6, r7}
 8006616:	0897      	lsrs	r7, r2, #2
 8006618:	d067      	beq.n	80066ea <arm_float_to_q7+0xd6>
 800661a:	ed9f 6a62 	vldr	s12, [pc, #392]	; 80067a4 <arm_float_to_q7+0x190>
 800661e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8006622:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 8006626:	1d0c      	adds	r4, r1, #4
 8006628:	ea4f 0c87 	mov.w	ip, r7, lsl #2
 800662c:	eb04 060c 	add.w	r6, r4, ip
 8006630:	f100 0510 	add.w	r5, r0, #16
 8006634:	ed55 7a04 	vldr	s15, [r5, #-16]
 8006638:	ee27 7a86 	vmul.f32	s14, s15, s12
 800663c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8006640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006644:	fe76 7aa5 	vselgt.f32	s15, s13, s11
 8006648:	ee77 7a87 	vadd.f32	s15, s15, s14
 800664c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006650:	ee17 3a90 	vmov	r3, s15
 8006654:	b21b      	sxth	r3, r3
 8006656:	f303 0307 	ssat	r3, #8, r3
 800665a:	f804 3c04 	strb.w	r3, [r4, #-4]
 800665e:	ed55 7a03 	vldr	s15, [r5, #-12]
 8006662:	ee27 7a86 	vmul.f32	s14, s15, s12
 8006666:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800666a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800666e:	fe76 7aa5 	vselgt.f32	s15, s13, s11
 8006672:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006676:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800667a:	ee17 3a90 	vmov	r3, s15
 800667e:	b21b      	sxth	r3, r3
 8006680:	f303 0307 	ssat	r3, #8, r3
 8006684:	f804 3c03 	strb.w	r3, [r4, #-3]
 8006688:	ed55 7a02 	vldr	s15, [r5, #-8]
 800668c:	ee27 7a86 	vmul.f32	s14, s15, s12
 8006690:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8006694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006698:	fe76 7aa5 	vselgt.f32	s15, s13, s11
 800669c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80066a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80066a4:	ee17 3a90 	vmov	r3, s15
 80066a8:	b21b      	sxth	r3, r3
 80066aa:	f303 0307 	ssat	r3, #8, r3
 80066ae:	f804 3c02 	strb.w	r3, [r4, #-2]
 80066b2:	ed55 7a01 	vldr	s15, [r5, #-4]
 80066b6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80066ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80066be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066c2:	dd5d      	ble.n	8006780 <arm_float_to_q7+0x16c>
 80066c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80066cc:	ee17 3a90 	vmov	r3, s15
 80066d0:	b21b      	sxth	r3, r3
 80066d2:	f303 0307 	ssat	r3, #8, r3
 80066d6:	f804 3c01 	strb.w	r3, [r4, #-1]
 80066da:	3404      	adds	r4, #4
 80066dc:	42a6      	cmp	r6, r4
 80066de:	f105 0510 	add.w	r5, r5, #16
 80066e2:	d1a7      	bne.n	8006634 <arm_float_to_q7+0x20>
 80066e4:	4461      	add	r1, ip
 80066e6:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 80066ea:	f012 0203 	ands.w	r2, r2, #3
 80066ee:	d045      	beq.n	800677c <arm_float_to_q7+0x168>
 80066f0:	edd0 7a00 	vldr	s15, [r0]
 80066f4:	ed9f 5a2b 	vldr	s10, [pc, #172]	; 80067a4 <arm_float_to_q7+0x190>
 80066f8:	ee67 6a85 	vmul.f32	s13, s15, s10
 80066fc:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8006700:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006708:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 800670c:	fe77 7a25 	vselgt.f32	s15, s14, s11
 8006710:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006714:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006718:	ee17 3a90 	vmov	r3, s15
 800671c:	b21b      	sxth	r3, r3
 800671e:	f303 0307 	ssat	r3, #8, r3
 8006722:	2a01      	cmp	r2, #1
 8006724:	700b      	strb	r3, [r1, #0]
 8006726:	d029      	beq.n	800677c <arm_float_to_q7+0x168>
 8006728:	edd0 6a01 	vldr	s13, [r0, #4]
 800672c:	ee26 6a85 	vmul.f32	s12, s13, s10
 8006730:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8006734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006738:	fe77 6a25 	vselgt.f32	s13, s14, s11
 800673c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8006740:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8006744:	ee16 3a90 	vmov	r3, s13
 8006748:	b21b      	sxth	r3, r3
 800674a:	f303 0307 	ssat	r3, #8, r3
 800674e:	2a02      	cmp	r2, #2
 8006750:	704b      	strb	r3, [r1, #1]
 8006752:	d013      	beq.n	800677c <arm_float_to_q7+0x168>
 8006754:	edd0 7a02 	vldr	s15, [r0, #8]
 8006758:	ee27 5a85 	vmul.f32	s10, s15, s10
 800675c:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 8006760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006764:	fe77 7a25 	vselgt.f32	s15, s14, s11
 8006768:	ee77 7a85 	vadd.f32	s15, s15, s10
 800676c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006770:	ee17 3a90 	vmov	r3, s15
 8006774:	b21b      	sxth	r3, r3
 8006776:	f303 0307 	ssat	r3, #8, r3
 800677a:	708b      	strb	r3, [r1, #2]
 800677c:	bcf0      	pop	{r4, r5, r6, r7}
 800677e:	4770      	bx	lr
 8006780:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006784:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006788:	ee17 3a90 	vmov	r3, s15
 800678c:	b21b      	sxth	r3, r3
 800678e:	f303 0307 	ssat	r3, #8, r3
 8006792:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006796:	3404      	adds	r4, #4
 8006798:	42b4      	cmp	r4, r6
 800679a:	f105 0510 	add.w	r5, r5, #16
 800679e:	f47f af49 	bne.w	8006634 <arm_float_to_q7+0x20>
 80067a2:	e79f      	b.n	80066e4 <arm_float_to_q7+0xd0>
 80067a4:	43000000 	.word	0x43000000

080067a8 <arm_q15_to_float>:
 80067a8:	b470      	push	{r4, r5, r6}
 80067aa:	0896      	lsrs	r6, r2, #2
 80067ac:	d038      	beq.n	8006820 <arm_q15_to_float+0x78>
 80067ae:	4635      	mov	r5, r6
 80067b0:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8006874 <arm_q15_to_float+0xcc>
 80067b4:	f100 0408 	add.w	r4, r0, #8
 80067b8:	f101 0310 	add.w	r3, r1, #16
 80067bc:	f934 cc08 	ldrsh.w	ip, [r4, #-8]
 80067c0:	3d01      	subs	r5, #1
 80067c2:	ee07 ca90 	vmov	s15, ip
 80067c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80067ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80067ce:	ed43 7a04 	vstr	s15, [r3, #-16]
 80067d2:	f934 cc06 	ldrsh.w	ip, [r4, #-6]
 80067d6:	f103 0310 	add.w	r3, r3, #16
 80067da:	ee07 ca90 	vmov	s15, ip
 80067de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80067e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80067e6:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 80067ea:	f934 cc04 	ldrsh.w	ip, [r4, #-4]
 80067ee:	f104 0408 	add.w	r4, r4, #8
 80067f2:	ee07 ca90 	vmov	s15, ip
 80067f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80067fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80067fe:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 8006802:	f934 cc0a 	ldrsh.w	ip, [r4, #-10]
 8006806:	ee07 ca90 	vmov	s15, ip
 800680a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800680e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006812:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8006816:	d1d1      	bne.n	80067bc <arm_q15_to_float+0x14>
 8006818:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800681c:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8006820:	f012 0203 	ands.w	r2, r2, #3
 8006824:	d023      	beq.n	800686e <arm_q15_to_float+0xc6>
 8006826:	f9b0 3000 	ldrsh.w	r3, [r0]
 800682a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8006874 <arm_q15_to_float+0xcc>
 800682e:	ee07 3a90 	vmov	s15, r3
 8006832:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006836:	ee67 7a87 	vmul.f32	s15, s15, s14
 800683a:	2a01      	cmp	r2, #1
 800683c:	edc1 7a00 	vstr	s15, [r1]
 8006840:	d015      	beq.n	800686e <arm_q15_to_float+0xc6>
 8006842:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8006846:	2a02      	cmp	r2, #2
 8006848:	ee07 3a90 	vmov	s15, r3
 800684c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006850:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006854:	edc1 7a01 	vstr	s15, [r1, #4]
 8006858:	d009      	beq.n	800686e <arm_q15_to_float+0xc6>
 800685a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800685e:	ee07 3a90 	vmov	s15, r3
 8006862:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006866:	ee67 7a87 	vmul.f32	s15, s15, s14
 800686a:	edc1 7a02 	vstr	s15, [r1, #8]
 800686e:	bc70      	pop	{r4, r5, r6}
 8006870:	4770      	bx	lr
 8006872:	bf00      	nop
 8006874:	38000000 	.word	0x38000000

08006878 <arm_q7_to_float>:
 8006878:	b470      	push	{r4, r5, r6}
 800687a:	0895      	lsrs	r5, r2, #2
 800687c:	d036      	beq.n	80068ec <arm_q7_to_float+0x74>
 800687e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8006940 <arm_q7_to_float+0xc8>
 8006882:	eb00 0685 	add.w	r6, r0, r5, lsl #2
 8006886:	1d34      	adds	r4, r6, #4
 8006888:	3004      	adds	r0, #4
 800688a:	f101 0310 	add.w	r3, r1, #16
 800688e:	f910 cc04 	ldrsb.w	ip, [r0, #-4]
 8006892:	3004      	adds	r0, #4
 8006894:	ee07 ca90 	vmov	s15, ip
 8006898:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800689c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80068a0:	ed43 7a04 	vstr	s15, [r3, #-16]
 80068a4:	f910 cc07 	ldrsb.w	ip, [r0, #-7]
 80068a8:	3310      	adds	r3, #16
 80068aa:	ee07 ca90 	vmov	s15, ip
 80068ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80068b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80068b6:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 80068ba:	f910 cc06 	ldrsb.w	ip, [r0, #-6]
 80068be:	ee07 ca90 	vmov	s15, ip
 80068c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80068c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80068ca:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 80068ce:	f910 cc05 	ldrsb.w	ip, [r0, #-5]
 80068d2:	42a0      	cmp	r0, r4
 80068d4:	ee07 ca90 	vmov	s15, ip
 80068d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80068dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80068e0:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 80068e4:	d1d3      	bne.n	800688e <arm_q7_to_float+0x16>
 80068e6:	4630      	mov	r0, r6
 80068e8:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 80068ec:	f012 0203 	ands.w	r2, r2, #3
 80068f0:	d023      	beq.n	800693a <arm_q7_to_float+0xc2>
 80068f2:	f990 3000 	ldrsb.w	r3, [r0]
 80068f6:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8006940 <arm_q7_to_float+0xc8>
 80068fa:	ee07 3a90 	vmov	s15, r3
 80068fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006902:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006906:	2a01      	cmp	r2, #1
 8006908:	edc1 7a00 	vstr	s15, [r1]
 800690c:	d015      	beq.n	800693a <arm_q7_to_float+0xc2>
 800690e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8006912:	2a02      	cmp	r2, #2
 8006914:	ee07 3a90 	vmov	s15, r3
 8006918:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800691c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006920:	edc1 7a01 	vstr	s15, [r1, #4]
 8006924:	d009      	beq.n	800693a <arm_q7_to_float+0xc2>
 8006926:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800692a:	ee07 3a90 	vmov	s15, r3
 800692e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006932:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006936:	edc1 7a02 	vstr	s15, [r1, #8]
 800693a:	bc70      	pop	{r4, r5, r6}
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	3c000000 	.word	0x3c000000

08006944 <st_uaua8_convolve_rank1upd>:
 8006944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006948:	b083      	sub	sp, #12
 800694a:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 800694e:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
 8006952:	fb13 f304 	smulbb	r3, r3, r4
 8006956:	fb13 f500 	smulbb	r5, r3, r0
 800695a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800695c:	2a00      	cmp	r2, #0
 800695e:	d06b      	beq.n	8006a38 <st_uaua8_convolve_rank1upd+0xf4>
 8006960:	b2ad      	uxth	r5, r5
 8006962:	ea4f 0895 	mov.w	r8, r5, lsr #2
 8006966:	f1a8 0381 	sub.w	r3, r8, #129	; 0x81
 800696a:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 800696e:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8006972:	00ac      	lsls	r4, r5, #2
 8006974:	ebc3 2643 	rsb	r6, r3, r3, lsl #9
 8006978:	f1a8 0e80 	sub.w	lr, r8, #128	; 0x80
 800697c:	3301      	adds	r3, #1
 800697e:	3c04      	subs	r4, #4
 8006980:	eb0e 1ec6 	add.w	lr, lr, r6, lsl #7
 8006984:	025f      	lsls	r7, r3, #9
 8006986:	eb0c 0382 	add.w	r3, ip, r2, lsl #2
 800698a:	eb00 0a04 	add.w	sl, r0, r4
 800698e:	f005 0503 	and.w	r5, r5, #3
 8006992:	fa1f fe8e 	uxth.w	lr, lr
 8006996:	9301      	str	r3, [sp, #4]
 8006998:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 800699c:	d94f      	bls.n	8006a3e <st_uaua8_convolve_rank1upd+0xfa>
 800699e:	2400      	movs	r4, #0
 80069a0:	19ce      	adds	r6, r1, r7
 80069a2:	2300      	movs	r3, #0
 80069a4:	469b      	mov	fp, r3
 80069a6:	4608      	mov	r0, r1
 80069a8:	f501 7100 	add.w	r1, r1, #512	; 0x200
 80069ac:	f850 2b04 	ldr.w	r2, [r0], #4
 80069b0:	fa3f f382 	uxtb16	r3, r2
 80069b4:	4288      	cmp	r0, r1
 80069b6:	ea4f 2232 	mov.w	r2, r2, ror #8
 80069ba:	fa9b f353 	uqadd16	r3, fp, r3
 80069be:	fa3f f282 	uxtb16	r2, r2
 80069c2:	fa93 fb52 	uqadd16	fp, r3, r2
 80069c6:	d1f1      	bne.n	80069ac <st_uaua8_convolve_rank1upd+0x68>
 80069c8:	fa1f f28b 	uxth.w	r2, fp
 80069cc:	eb02 431b 	add.w	r3, r2, fp, lsr #16
 80069d0:	42b0      	cmp	r0, r6
 80069d2:	4601      	mov	r1, r0
 80069d4:	441c      	add	r4, r3
 80069d6:	d1e4      	bne.n	80069a2 <st_uaua8_convolve_rank1upd+0x5e>
 80069d8:	4670      	mov	r0, lr
 80069da:	b1b8      	cbz	r0, 8006a0c <st_uaua8_convolve_rank1upd+0xc8>
 80069dc:	2200      	movs	r2, #0
 80069de:	3801      	subs	r0, #1
 80069e0:	b280      	uxth	r0, r0
 80069e2:	3001      	adds	r0, #1
 80069e4:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 80069e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80069ec:	fa3f f683 	uxtb16	r6, r3
 80069f0:	4281      	cmp	r1, r0
 80069f2:	ea4f 2333 	mov.w	r3, r3, ror #8
 80069f6:	fa92 f256 	uqadd16	r2, r2, r6
 80069fa:	fa3f f383 	uxtb16	r3, r3
 80069fe:	fa92 f253 	uqadd16	r2, r2, r3
 8006a02:	d1f1      	bne.n	80069e8 <st_uaua8_convolve_rank1upd+0xa4>
 8006a04:	b293      	uxth	r3, r2
 8006a06:	eb03 4212 	add.w	r2, r3, r2, lsr #16
 8006a0a:	4414      	add	r4, r2
 8006a0c:	b15d      	cbz	r5, 8006a26 <st_uaua8_convolve_rank1upd+0xe2>
 8006a0e:	780b      	ldrb	r3, [r1, #0]
 8006a10:	2d01      	cmp	r5, #1
 8006a12:	441c      	add	r4, r3
 8006a14:	d016      	beq.n	8006a44 <st_uaua8_convolve_rank1upd+0x100>
 8006a16:	784b      	ldrb	r3, [r1, #1]
 8006a18:	2d02      	cmp	r5, #2
 8006a1a:	441c      	add	r4, r3
 8006a1c:	bf17      	itett	ne
 8006a1e:	788b      	ldrbne	r3, [r1, #2]
 8006a20:	3102      	addeq	r1, #2
 8006a22:	3103      	addne	r1, #3
 8006a24:	18e4      	addne	r4, r4, r3
 8006a26:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006a2a:	fb09 3414 	mls	r4, r9, r4, r3
 8006a2e:	9b01      	ldr	r3, [sp, #4]
 8006a30:	f84a 4f04 	str.w	r4, [sl, #4]!
 8006a34:	4563      	cmp	r3, ip
 8006a36:	d1af      	bne.n	8006998 <st_uaua8_convolve_rank1upd+0x54>
 8006a38:	b003      	add	sp, #12
 8006a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a3e:	4640      	mov	r0, r8
 8006a40:	2400      	movs	r4, #0
 8006a42:	e7ca      	b.n	80069da <st_uaua8_convolve_rank1upd+0x96>
 8006a44:	3101      	adds	r1, #1
 8006a46:	e7ee      	b.n	8006a26 <st_uaua8_convolve_rank1upd+0xe2>

08006a48 <st_uaua8_convolve>:
 8006a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a4c:	469b      	mov	fp, r3
 8006a4e:	b0c3      	sub	sp, #268	; 0x10c
 8006a50:	f8bd 4138 	ldrh.w	r4, [sp, #312]	; 0x138
 8006a54:	f8bd 513c 	ldrh.w	r5, [sp, #316]	; 0x13c
 8006a58:	9b56      	ldr	r3, [sp, #344]	; 0x158
 8006a5a:	fb14 fe05 	smulbb	lr, r4, r5
 8006a5e:	9520      	str	r5, [sp, #128]	; 0x80
 8006a60:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006a64:	9b58      	ldr	r3, [sp, #352]	; 0x160
 8006a66:	fb1e fe0b 	smulbb	lr, lr, fp
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	9417      	str	r4, [sp, #92]	; 0x5c
 8006a6e:	931e      	str	r3, [sp, #120]	; 0x78
 8006a70:	f8bd 3134 	ldrh.w	r3, [sp, #308]	; 0x134
 8006a74:	9c55      	ldr	r4, [sp, #340]	; 0x154
 8006a76:	931f      	str	r3, [sp, #124]	; 0x7c
 8006a78:	f8bd 3140 	ldrh.w	r3, [sp, #320]	; 0x140
 8006a7c:	920c      	str	r2, [sp, #48]	; 0x30
 8006a7e:	9314      	str	r3, [sp, #80]	; 0x50
 8006a80:	f8bd 3144 	ldrh.w	r3, [sp, #324]	; 0x144
 8006a84:	fa1f f28e 	uxth.w	r2, lr
 8006a88:	9321      	str	r3, [sp, #132]	; 0x84
 8006a8a:	f8bd 3148 	ldrh.w	r3, [sp, #328]	; 0x148
 8006a8e:	921a      	str	r2, [sp, #104]	; 0x68
 8006a90:	930d      	str	r3, [sp, #52]	; 0x34
 8006a92:	6822      	ldr	r2, [r4, #0]
 8006a94:	f8bd 314c 	ldrh.w	r3, [sp, #332]	; 0x14c
 8006a98:	9219      	str	r2, [sp, #100]	; 0x64
 8006a9a:	9316      	str	r3, [sp, #88]	; 0x58
 8006a9c:	f8bd 216c 	ldrh.w	r2, [sp, #364]	; 0x16c
 8006aa0:	f89d 315c 	ldrb.w	r3, [sp, #348]	; 0x15c
 8006aa4:	951d      	str	r5, [sp, #116]	; 0x74
 8006aa6:	931b      	str	r3, [sp, #108]	; 0x6c
 8006aa8:	9010      	str	r0, [sp, #64]	; 0x40
 8006aaa:	9106      	str	r1, [sp, #24]
 8006aac:	f89d 3164 	ldrb.w	r3, [sp, #356]	; 0x164
 8006ab0:	920e      	str	r2, [sp, #56]	; 0x38
 8006ab2:	f8bd 2170 	ldrh.w	r2, [sp, #368]	; 0x170
 8006ab6:	2d00      	cmp	r5, #0
 8006ab8:	921c      	str	r2, [sp, #112]	; 0x70
 8006aba:	f340 821d 	ble.w	8006ef8 <st_uaua8_convolve+0x4b0>
 8006abe:	2201      	movs	r2, #1
 8006ac0:	460c      	mov	r4, r1
 8006ac2:	40ab      	lsls	r3, r5
 8006ac4:	40aa      	lsls	r2, r5
 8006ac6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8006aca:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8006acc:	9318      	str	r3, [sp, #96]	; 0x60
 8006ace:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006ad0:	9424      	str	r4, [sp, #144]	; 0x90
 8006ad2:	973a      	str	r7, [sp, #232]	; 0xe8
 8006ad4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8006ad6:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8006ad8:	9423      	str	r4, [sp, #140]	; 0x8c
 8006ada:	973b      	str	r7, [sp, #236]	; 0xec
 8006adc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8006ade:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006ae0:	ab2a      	add	r3, sp, #168	; 0xa8
 8006ae2:	e9cd 5427 	strd	r5, r4, [sp, #156]	; 0x9c
 8006ae6:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8006ae8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8006aea:	973c      	str	r7, [sp, #240]	; 0xf0
 8006aec:	9f21      	ldr	r7, [sp, #132]	; 0x84
 8006aee:	9300      	str	r3, [sp, #0]
 8006af0:	a82e      	add	r0, sp, #184	; 0xb8
 8006af2:	ab26      	add	r3, sp, #152	; 0x98
 8006af4:	aa22      	add	r2, sp, #136	; 0x88
 8006af6:	a938      	add	r1, sp, #224	; 0xe0
 8006af8:	942c      	str	r4, [sp, #176]	; 0xb0
 8006afa:	962b      	str	r6, [sp, #172]	; 0xac
 8006afc:	973d      	str	r7, [sp, #244]	; 0xf4
 8006afe:	f001 fc29 	bl	8008354 <ai_padding_opt_init>
 8006b02:	2d00      	cmp	r5, #0
 8006b04:	f000 8156 	beq.w	8006db4 <st_uaua8_convolve+0x36c>
 8006b08:	2300      	movs	r3, #0
 8006b0a:	9315      	str	r3, [sp, #84]	; 0x54
 8006b0c:	461d      	mov	r5, r3
 8006b0e:	0073      	lsls	r3, r6, #1
 8006b10:	fb04 f303 	mul.w	r3, r4, r3
 8006b14:	f8dd a174 	ldr.w	sl, [sp, #372]	; 0x174
 8006b18:	ea4f 084b 	mov.w	r8, fp, lsl #1
 8006b1c:	fb08 a303 	mla	r3, r8, r3, sl
 8006b20:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b22:	427b      	negs	r3, r7
 8006b24:	465f      	mov	r7, fp
 8006b26:	fb0b f204 	mul.w	r2, fp, r4
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	9211      	str	r2, [sp, #68]	; 0x44
 8006b2e:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
 8006b32:	0052      	lsls	r2, r2, #1
 8006b34:	9212      	str	r2, [sp, #72]	; 0x48
 8006b36:	9313      	str	r3, [sp, #76]	; 0x4c
 8006b38:	a82e      	add	r0, sp, #184	; 0xb8
 8006b3a:	f001 fc65 	bl	8008408 <ai_padding_opt_phase1>
 8006b3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d060      	beq.n	8006c06 <st_uaua8_convolve+0x1be>
 8006b44:	e9dd 3220 	ldrd	r3, r2, [sp, #128]	; 0x80
 8006b48:	2400      	movs	r4, #0
 8006b4a:	1a9a      	subs	r2, r3, r2
 8006b4c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006b4e:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006b50:	425b      	negs	r3, r3
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	fb01 2605 	mla	r6, r1, r5, r2
 8006b58:	9307      	str	r3, [sp, #28]
 8006b5a:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 8006b5e:	9409      	str	r4, [sp, #36]	; 0x24
 8006b60:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b62:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	f000 8136 	beq.w	8006dd6 <st_uaua8_convolve+0x38e>
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	3b01      	subs	r3, #1
 8006b6e:	932e      	str	r3, [sp, #184]	; 0xb8
 8006b70:	f8ad 20de 	strh.w	r2, [sp, #222]	; 0xde
 8006b74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b76:	42b3      	cmp	r3, r6
 8006b78:	da34      	bge.n	8006be4 <st_uaua8_convolve+0x19c>
 8006b7a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006b7c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8006b7e:	9608      	str	r6, [sp, #32]
 8006b80:	fb04 1402 	mla	r4, r4, r2, r1
 8006b84:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8006b88:	461d      	mov	r5, r3
 8006b8a:	4616      	mov	r6, r2
 8006b8c:	9914      	ldr	r1, [sp, #80]	; 0x50
 8006b8e:	1a64      	subs	r4, r4, r1
 8006b90:	42b4      	cmp	r4, r6
 8006b92:	dd20      	ble.n	8006bd6 <st_uaua8_convolve+0x18e>
 8006b94:	9a06      	ldr	r2, [sp, #24]
 8006b96:	2d00      	cmp	r5, #0
 8006b98:	fb02 f203 	mul.w	r2, r2, r3
 8006b9c:	920a      	str	r2, [sp, #40]	; 0x28
 8006b9e:	f2c0 8177 	blt.w	8006e90 <st_uaua8_convolve+0x448>
 8006ba2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ba4:	46b3      	mov	fp, r6
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	f340 8108 	ble.w	8006dbc <st_uaua8_convolve+0x374>
 8006bac:	4630      	mov	r0, r6
 8006bae:	f1bb 0f00 	cmp.w	fp, #0
 8006bb2:	db03      	blt.n	8006bbc <st_uaua8_convolve+0x174>
 8006bb4:	9b06      	ldr	r3, [sp, #24]
 8006bb6:	4283      	cmp	r3, r0
 8006bb8:	f300 8178 	bgt.w	8006eac <st_uaua8_convolve+0x464>
 8006bbc:	463a      	mov	r2, r7
 8006bbe:	4651      	mov	r1, sl
 8006bc0:	4648      	mov	r0, r9
 8006bc2:	f002 ff87 	bl	8009ad4 <arm_fill_q15>
 8006bc6:	f10b 0b01 	add.w	fp, fp, #1
 8006bca:	fa0f fb8b 	sxth.w	fp, fp
 8006bce:	455c      	cmp	r4, fp
 8006bd0:	44c2      	add	sl, r8
 8006bd2:	4658      	mov	r0, fp
 8006bd4:	dceb      	bgt.n	8006bae <st_uaua8_convolve+0x166>
 8006bd6:	3501      	adds	r5, #1
 8006bd8:	9a08      	ldr	r2, [sp, #32]
 8006bda:	b22d      	sxth	r5, r5
 8006bdc:	4295      	cmp	r5, r2
 8006bde:	462b      	mov	r3, r5
 8006be0:	dbd6      	blt.n	8006b90 <st_uaua8_convolve+0x148>
 8006be2:	4616      	mov	r6, r2
 8006be4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006be6:	4553      	cmp	r3, sl
 8006be8:	f000 812e 	beq.w	8006e48 <st_uaua8_convolve+0x400>
 8006bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bee:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	b21a      	sxth	r2, r3
 8006bf4:	9b07      	ldr	r3, [sp, #28]
 8006bf6:	9209      	str	r2, [sp, #36]	; 0x24
 8006bf8:	440b      	add	r3, r1
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	9307      	str	r3, [sp, #28]
 8006bfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c00:	4614      	mov	r4, r2
 8006c02:	4293      	cmp	r3, r2
 8006c04:	dcad      	bgt.n	8006b62 <st_uaua8_convolve+0x11a>
 8006c06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c08:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	b21a      	sxth	r2, r3
 8006c0e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006c10:	9215      	str	r2, [sp, #84]	; 0x54
 8006c12:	440b      	add	r3, r1
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	9313      	str	r3, [sp, #76]	; 0x4c
 8006c18:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8006c1a:	4615      	mov	r5, r2
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	dc8b      	bgt.n	8006b38 <st_uaua8_convolve+0xf0>
 8006c20:	9b5d      	ldr	r3, [sp, #372]	; 0x174
 8006c22:	4553      	cmp	r3, sl
 8006c24:	f000 80c6 	beq.w	8006db4 <st_uaua8_convolve+0x36c>
 8006c28:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006c2a:	9c5d      	ldr	r4, [sp, #372]	; 0x174
 8006c2c:	ea4f 0893 	mov.w	r8, r3, lsr #2
 8006c30:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 8006c34:	f240 8164 	bls.w	8006f00 <st_uaua8_convolve+0x4b8>
 8006c38:	2500      	movs	r5, #0
 8006c3a:	f1a8 0781 	sub.w	r7, r8, #129	; 0x81
 8006c3e:	f3c7 17c8 	ubfx	r7, r7, #7, #9
 8006c42:	1c7e      	adds	r6, r7, #1
 8006c44:	eb04 2686 	add.w	r6, r4, r6, lsl #10
 8006c48:	2300      	movs	r3, #0
 8006c4a:	4621      	mov	r1, r4
 8006c4c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006c50:	6808      	ldr	r0, [r1, #0]
 8006c52:	684a      	ldr	r2, [r1, #4]
 8006c54:	3108      	adds	r1, #8
 8006c56:	428c      	cmp	r4, r1
 8006c58:	fa93 f350 	uqadd16	r3, r3, r0
 8006c5c:	fa93 f352 	uqadd16	r3, r3, r2
 8006c60:	d1f6      	bne.n	8006c50 <st_uaua8_convolve+0x208>
 8006c62:	0c1a      	lsrs	r2, r3, #16
 8006c64:	fa12 f383 	uxtah	r3, r2, r3
 8006c68:	42b4      	cmp	r4, r6
 8006c6a:	441d      	add	r5, r3
 8006c6c:	d1ec      	bne.n	8006c48 <st_uaua8_convolve+0x200>
 8006c6e:	ebc7 2747 	rsb	r7, r7, r7, lsl #9
 8006c72:	f1a8 0280 	sub.w	r2, r8, #128	; 0x80
 8006c76:	eb02 12c7 	add.w	r2, r2, r7, lsl #7
 8006c7a:	b292      	uxth	r2, r2
 8006c7c:	b192      	cbz	r2, 8006ca4 <st_uaua8_convolve+0x25c>
 8006c7e:	2300      	movs	r3, #0
 8006c80:	1e51      	subs	r1, r2, #1
 8006c82:	b289      	uxth	r1, r1
 8006c84:	3101      	adds	r1, #1
 8006c86:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8006c8a:	6820      	ldr	r0, [r4, #0]
 8006c8c:	6862      	ldr	r2, [r4, #4]
 8006c8e:	3408      	adds	r4, #8
 8006c90:	428c      	cmp	r4, r1
 8006c92:	fa93 f350 	uqadd16	r3, r3, r0
 8006c96:	fa93 f352 	uqadd16	r3, r3, r2
 8006c9a:	d1f6      	bne.n	8006c8a <st_uaua8_convolve+0x242>
 8006c9c:	0c1a      	lsrs	r2, r3, #16
 8006c9e:	fa12 f383 	uxtah	r3, r2, r3
 8006ca2:	441d      	add	r5, r3
 8006ca4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006ca6:	f013 0c03 	ands.w	ip, r3, #3
 8006caa:	d00b      	beq.n	8006cc4 <st_uaua8_convolve+0x27c>
 8006cac:	8823      	ldrh	r3, [r4, #0]
 8006cae:	f1bc 0f01 	cmp.w	ip, #1
 8006cb2:	441d      	add	r5, r3
 8006cb4:	d006      	beq.n	8006cc4 <st_uaua8_convolve+0x27c>
 8006cb6:	8863      	ldrh	r3, [r4, #2]
 8006cb8:	f1bc 0f02 	cmp.w	ip, #2
 8006cbc:	441d      	add	r5, r3
 8006cbe:	bf1c      	itt	ne
 8006cc0:	88a3      	ldrhne	r3, [r4, #4]
 8006cc2:	18ed      	addne	r5, r5, r3
 8006cc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006cc6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006cc8:	4619      	mov	r1, r3
 8006cca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006ccc:	fb11 f903 	smulbb	r9, r1, r3
 8006cd0:	fb02 f909 	mul.w	r9, r2, r9
 8006cd4:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8006cd6:	fb05 9913 	mls	r9, r5, r3, r9
 8006cda:	2900      	cmp	r1, #0
 8006cdc:	d06a      	beq.n	8006db4 <st_uaua8_convolve+0x36c>
 8006cde:	f108 33ff 	add.w	r3, r8, #4294967295
 8006ce2:	985d      	ldr	r0, [sp, #372]	; 0x174
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 8006cec:	eb00 0e82 	add.w	lr, r0, r2, lsl #2
 8006cf0:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8006cf4:	9a5a      	ldr	r2, [sp, #360]	; 0x168
 8006cf6:	9308      	str	r3, [sp, #32]
 8006cf8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006cfa:	4411      	add	r1, r2
 8006cfc:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006d00:	468a      	mov	sl, r1
 8006d02:	4699      	mov	r9, r3
 8006d04:	f1c3 0201 	rsb	r2, r3, #1
 8006d08:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8006d0c:	4f7e      	ldr	r7, [pc, #504]	; (8006f08 <st_uaua8_convolve+0x4c0>)
 8006d0e:	9e4c      	ldr	r6, [sp, #304]	; 0x130
 8006d10:	f8dd b168 	ldr.w	fp, [sp, #360]	; 0x168
 8006d14:	920a      	str	r2, [sp, #40]	; 0x28
 8006d16:	9b07      	ldr	r3, [sp, #28]
 8006d18:	f85e 1b04 	ldr.w	r1, [lr], #4
 8006d1c:	4419      	add	r1, r3
 8006d1e:	9b06      	ldr	r3, [sp, #24]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	f000 80e5 	beq.w	8006ef0 <st_uaua8_convolve+0x4a8>
 8006d26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d28:	9d5d      	ldr	r5, [sp, #372]	; 0x174
 8006d2a:	eb06 0803 	add.w	r8, r6, r3
 8006d2e:	f856 2b04 	ldr.w	r2, [r6], #4
 8006d32:	fa3f f082 	uxtb16	r0, r2
 8006d36:	b284      	uxth	r4, r0
 8006d38:	ea4f 2332 	mov.w	r3, r2, ror #8
 8006d3c:	682a      	ldr	r2, [r5, #0]
 8006d3e:	fa3f f383 	uxtb16	r3, r3
 8006d42:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8006d46:	fb24 1102 	smlad	r1, r4, r2, r1
 8006d4a:	403b      	ands	r3, r7
 8006d4c:	686a      	ldr	r2, [r5, #4]
 8006d4e:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8006d52:	3508      	adds	r5, #8
 8006d54:	fb23 1102 	smlad	r1, r3, r2, r1
 8006d58:	4546      	cmp	r6, r8
 8006d5a:	d1e8      	bne.n	8006d2e <st_uaua8_convolve+0x2e6>
 8006d5c:	9b08      	ldr	r3, [sp, #32]
 8006d5e:	f1bc 0f00 	cmp.w	ip, #0
 8006d62:	d014      	beq.n	8006d8e <st_uaua8_convolve+0x346>
 8006d64:	7832      	ldrb	r2, [r6, #0]
 8006d66:	8818      	ldrh	r0, [r3, #0]
 8006d68:	f1bc 0f01 	cmp.w	ip, #1
 8006d6c:	fb00 1102 	mla	r1, r0, r2, r1
 8006d70:	f000 80bc 	beq.w	8006eec <st_uaua8_convolve+0x4a4>
 8006d74:	7872      	ldrb	r2, [r6, #1]
 8006d76:	8858      	ldrh	r0, [r3, #2]
 8006d78:	f1bc 0f02 	cmp.w	ip, #2
 8006d7c:	fb00 1102 	mla	r1, r0, r2, r1
 8006d80:	f000 80b8 	beq.w	8006ef4 <st_uaua8_convolve+0x4ac>
 8006d84:	889a      	ldrh	r2, [r3, #4]
 8006d86:	78b3      	ldrb	r3, [r6, #2]
 8006d88:	3603      	adds	r6, #3
 8006d8a:	fb02 1103 	mla	r1, r2, r3, r1
 8006d8e:	f1b9 0f00 	cmp.w	r9, #0
 8006d92:	f10b 0b01 	add.w	fp, fp, #1
 8006d96:	f340 809a 	ble.w	8006ece <st_uaua8_convolve+0x486>
 8006d9a:	004b      	lsls	r3, r1, #1
 8006d9c:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	; 0x60
 8006da0:	fb53 1302 	smmla	r3, r3, r2, r1
 8006da4:	fa43 f309 	asr.w	r3, r3, r9
 8006da8:	f383 0308 	usat	r3, #8, r3
 8006dac:	f80b 3c01 	strb.w	r3, [fp, #-1]
 8006db0:	45da      	cmp	sl, fp
 8006db2:	d1b0      	bne.n	8006d16 <st_uaua8_convolve+0x2ce>
 8006db4:	2000      	movs	r0, #0
 8006db6:	b043      	add	sp, #268	; 0x10c
 8006db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dbc:	f10b 0b01 	add.w	fp, fp, #1
 8006dc0:	4651      	mov	r1, sl
 8006dc2:	463a      	mov	r2, r7
 8006dc4:	4648      	mov	r0, r9
 8006dc6:	fa0f fb8b 	sxth.w	fp, fp
 8006dca:	f002 fe83 	bl	8009ad4 <arm_fill_q15>
 8006dce:	455c      	cmp	r4, fp
 8006dd0:	44c2      	add	sl, r8
 8006dd2:	dcf3      	bgt.n	8006dbc <st_uaua8_convolve+0x374>
 8006dd4:	e6ff      	b.n	8006bd6 <st_uaua8_convolve+0x18e>
 8006dd6:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d071      	beq.n	8006ec0 <st_uaua8_convolve+0x478>
 8006ddc:	f8bd 20dc 	ldrh.w	r2, [sp, #220]	; 0xdc
 8006de0:	3b01      	subs	r3, #1
 8006de2:	2a01      	cmp	r2, #1
 8006de4:	932f      	str	r3, [sp, #188]	; 0xbc
 8006de6:	f8ad 20de 	strh.w	r2, [sp, #222]	; 0xde
 8006dea:	f43f aec3 	beq.w	8006b74 <st_uaua8_convolve+0x12c>
 8006dee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006df0:	f9bd 401c 	ldrsh.w	r4, [sp, #28]
 8006df4:	42b3      	cmp	r3, r6
 8006df6:	f6bf aef5 	bge.w	8006be4 <st_uaua8_convolve+0x19c>
 8006dfa:	461d      	mov	r5, r3
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f8cd 8020 	str.w	r8, [sp, #32]
 8006e02:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8006e06:	46b8      	mov	r8, r7
 8006e08:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8006e0c:	4657      	mov	r7, sl
 8006e0e:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 8006e12:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
 8006e16:	9b06      	ldr	r3, [sp, #24]
 8006e18:	3501      	adds	r5, #1
 8006e1a:	fb00 4003 	mla	r0, r0, r3, r4
 8006e1e:	4639      	mov	r1, r7
 8006e20:	fb08 b000 	mla	r0, r8, r0, fp
 8006e24:	b22d      	sxth	r5, r5
 8006e26:	464a      	mov	r2, r9
 8006e28:	f002 fb50 	bl	80094cc <st_uint8_to16_no_shift>
 8006e2c:	42b5      	cmp	r5, r6
 8006e2e:	4457      	add	r7, sl
 8006e30:	4628      	mov	r0, r5
 8006e32:	dbf0      	blt.n	8006e16 <st_uaua8_convolve+0x3ce>
 8006e34:	46ba      	mov	sl, r7
 8006e36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e38:	4647      	mov	r7, r8
 8006e3a:	4553      	cmp	r3, sl
 8006e3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e40:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8006e44:	f47f aed2 	bne.w	8006bec <st_uaua8_convolve+0x1a4>
 8006e48:	9b5a      	ldr	r3, [sp, #360]	; 0x168
 8006e4a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006e4c:	9305      	str	r3, [sp, #20]
 8006e4e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8006e50:	995d      	ldr	r1, [sp, #372]	; 0x174
 8006e52:	9304      	str	r3, [sp, #16]
 8006e54:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006e56:	984c      	ldr	r0, [sp, #304]	; 0x130
 8006e58:	9303      	str	r3, [sp, #12]
 8006e5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006e5c:	9302      	str	r3, [sp, #8]
 8006e5e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006e60:	9301      	str	r3, [sp, #4]
 8006e62:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006e64:	9300      	str	r3, [sp, #0]
 8006e66:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006e68:	f001 ff6c 	bl	8008d44 <st_uaua8_nn_mat_mult_kernel>
 8006e6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e6e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006e70:	3301      	adds	r3, #1
 8006e72:	b21a      	sxth	r2, r3
 8006e74:	9b07      	ldr	r3, [sp, #28]
 8006e76:	905a      	str	r0, [sp, #360]	; 0x168
 8006e78:	440b      	add	r3, r1
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	9307      	str	r3, [sp, #28]
 8006e7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e80:	9209      	str	r2, [sp, #36]	; 0x24
 8006e82:	4293      	cmp	r3, r2
 8006e84:	4614      	mov	r4, r2
 8006e86:	f8dd a174 	ldr.w	sl, [sp, #372]	; 0x174
 8006e8a:	f73f ae6a 	bgt.w	8006b62 <st_uaua8_convolve+0x11a>
 8006e8e:	e6ba      	b.n	8006c06 <st_uaua8_convolve+0x1be>
 8006e90:	46b3      	mov	fp, r6
 8006e92:	f10b 0b01 	add.w	fp, fp, #1
 8006e96:	4651      	mov	r1, sl
 8006e98:	463a      	mov	r2, r7
 8006e9a:	4648      	mov	r0, r9
 8006e9c:	fa0f fb8b 	sxth.w	fp, fp
 8006ea0:	f002 fe18 	bl	8009ad4 <arm_fill_q15>
 8006ea4:	45a3      	cmp	fp, r4
 8006ea6:	44c2      	add	sl, r8
 8006ea8:	dbf3      	blt.n	8006e92 <st_uaua8_convolve+0x44a>
 8006eaa:	e694      	b.n	8006bd6 <st_uaua8_convolve+0x18e>
 8006eac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006eae:	463a      	mov	r2, r7
 8006eb0:	4418      	add	r0, r3
 8006eb2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006eb4:	4651      	mov	r1, sl
 8006eb6:	fb07 3000 	mla	r0, r7, r0, r3
 8006eba:	f002 fb07 	bl	80094cc <st_uint8_to16_no_shift>
 8006ebe:	e682      	b.n	8006bc6 <st_uaua8_convolve+0x17e>
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8006ec4:	f8ad 20de 	strh.w	r2, [sp, #222]	; 0xde
 8006ec8:	3b01      	subs	r3, #1
 8006eca:	9330      	str	r3, [sp, #192]	; 0xc0
 8006ecc:	e652      	b.n	8006b74 <st_uaua8_convolve+0x12c>
 8006ece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ed4:	f303 031f 	ssat	r3, #32, r3
 8006ed8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006eda:	fb53 f312 	smmulr	r3, r3, r2
 8006ede:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006ee0:	4413      	add	r3, r2
 8006ee2:	f383 0308 	usat	r3, #8, r3
 8006ee6:	f80b 3c01 	strb.w	r3, [fp, #-1]
 8006eea:	e761      	b.n	8006db0 <st_uaua8_convolve+0x368>
 8006eec:	3601      	adds	r6, #1
 8006eee:	e74e      	b.n	8006d8e <st_uaua8_convolve+0x346>
 8006ef0:	9b5d      	ldr	r3, [sp, #372]	; 0x174
 8006ef2:	e734      	b.n	8006d5e <st_uaua8_convolve+0x316>
 8006ef4:	3602      	adds	r6, #2
 8006ef6:	e74a      	b.n	8006d8e <st_uaua8_convolve+0x346>
 8006ef8:	9318      	str	r3, [sp, #96]	; 0x60
 8006efa:	460c      	mov	r4, r1
 8006efc:	4615      	mov	r5, r2
 8006efe:	e5e6      	b.n	8006ace <st_uaua8_convolve+0x86>
 8006f00:	4642      	mov	r2, r8
 8006f02:	2500      	movs	r5, #0
 8006f04:	e6ba      	b.n	8006c7c <st_uaua8_convolve+0x234>
 8006f06:	bf00      	nop
 8006f08:	ffff0000 	.word	0xffff0000

08006f0c <align_factor>:
 8006f0c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006f10:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8006f14:	b508      	push	{r3, lr}
 8006f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f1a:	f04f 0300 	mov.w	r3, #0
 8006f1e:	8003      	strh	r3, [r0, #0]
 8006f20:	d429      	bmi.n	8006f76 <align_factor+0x6a>
 8006f22:	dd18      	ble.n	8006f56 <align_factor+0x4a>
 8006f24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006f28:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006f2c:	8003      	strh	r3, [r0, #0]
 8006f2e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8006f32:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8006f36:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 8006f3a:	e005      	b.n	8006f48 <align_factor+0x3c>
 8006f3c:	8003      	strh	r3, [r0, #0]
 8006f3e:	b293      	uxth	r3, r2
 8006f40:	428b      	cmp	r3, r1
 8006f42:	ee20 0a07 	vmul.f32	s0, s0, s14
 8006f46:	d031      	beq.n	8006fac <align_factor+0xa0>
 8006f48:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8006f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f50:	f103 32ff 	add.w	r2, r3, #4294967295
 8006f54:	dcf2      	bgt.n	8006f3c <align_factor+0x30>
 8006f56:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8006fc4 <align_factor+0xb8>
 8006f5a:	ee60 7a27 	vmul.f32	s15, s0, s15
 8006f5e:	ee17 0a90 	vmov	r0, s15
 8006f62:	f7f9 fe6d 	bl	8000c40 <__aeabi_f2lz>
 8006f66:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 8006f6a:	bf1c      	itt	ne
 8006f6c:	f06f 4000 	mvnne.w	r0, #2147483648	; 0x80000000
 8006f70:	ea80 70e1 	eorne.w	r0, r0, r1, asr #31
 8006f74:	bd08      	pop	{r3, pc}
 8006f76:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006f7a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8006f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f82:	d5e8      	bpl.n	8006f56 <align_factor+0x4a>
 8006f84:	2301      	movs	r3, #1
 8006f86:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006f8a:	8003      	strh	r3, [r0, #0]
 8006f8c:	2302      	movs	r3, #2
 8006f8e:	e005      	b.n	8006f9c <align_factor+0x90>
 8006f90:	8003      	strh	r3, [r0, #0]
 8006f92:	b293      	uxth	r3, r2
 8006f94:	2b19      	cmp	r3, #25
 8006f96:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006f9a:	d00d      	beq.n	8006fb8 <align_factor+0xac>
 8006f9c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8006fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fa4:	f103 0201 	add.w	r2, r3, #1
 8006fa8:	d4f2      	bmi.n	8006f90 <align_factor+0x84>
 8006faa:	e7d4      	b.n	8006f56 <align_factor+0x4a>
 8006fac:	f64f 73e2 	movw	r3, #65506	; 0xffe2
 8006fb0:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006fb4:	8003      	strh	r3, [r0, #0]
 8006fb6:	e7ce      	b.n	8006f56 <align_factor+0x4a>
 8006fb8:	2317      	movs	r3, #23
 8006fba:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006fbe:	8003      	strh	r3, [r0, #0]
 8006fc0:	e7c9      	b.n	8006f56 <align_factor+0x4a>
 8006fc2:	bf00      	nop
 8006fc4:	4f000000 	.word	0x4f000000

08006fc8 <st_uaua8_convolve_1x1>:
 8006fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fcc:	b08b      	sub	sp, #44	; 0x2c
 8006fce:	f8bd 5058 	ldrh.w	r5, [sp, #88]	; 0x58
 8006fd2:	f8bd 6054 	ldrh.w	r6, [sp, #84]	; 0x54
 8006fd6:	2d01      	cmp	r5, #1
 8006fd8:	f8bd c05c 	ldrh.w	ip, [sp, #92]	; 0x5c
 8006fdc:	f8bd e060 	ldrh.w	lr, [sp, #96]	; 0x60
 8006fe0:	f8bd 9064 	ldrh.w	r9, [sp, #100]	; 0x64
 8006fe4:	f8bd a068 	ldrh.w	sl, [sp, #104]	; 0x68
 8006fe8:	f8bd 806c 	ldrh.w	r8, [sp, #108]	; 0x6c
 8006fec:	f89d 707c 	ldrb.w	r7, [sp, #124]	; 0x7c
 8006ff0:	f89d 4084 	ldrb.w	r4, [sp, #132]	; 0x84
 8006ff4:	d134      	bne.n	8007060 <st_uaua8_convolve_1x1+0x98>
 8006ff6:	f1bc 0f01 	cmp.w	ip, #1
 8006ffa:	d131      	bne.n	8007060 <st_uaua8_convolve_1x1+0x98>
 8006ffc:	f1be 0f00 	cmp.w	lr, #0
 8007000:	d12e      	bne.n	8007060 <st_uaua8_convolve_1x1+0x98>
 8007002:	f1b9 0f00 	cmp.w	r9, #0
 8007006:	d12b      	bne.n	8007060 <st_uaua8_convolve_1x1+0x98>
 8007008:	f1ba 0f01 	cmp.w	sl, #1
 800700c:	d128      	bne.n	8007060 <st_uaua8_convolve_1x1+0x98>
 800700e:	f1b8 0f01 	cmp.w	r8, #1
 8007012:	d125      	bne.n	8007060 <st_uaua8_convolve_1x1+0x98>
 8007014:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8007016:	469b      	mov	fp, r3
 8007018:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800701a:	f9b5 5000 	ldrsh.w	r5, [r5]
 800701e:	f8d3 c000 	ldr.w	ip, [r3]
 8007022:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007024:	2d00      	cmp	r5, #0
 8007026:	f893 e000 	ldrb.w	lr, [r3]
 800702a:	dd04      	ble.n	8007036 <st_uaua8_convolve_1x1+0x6e>
 800702c:	fa08 f805 	lsl.w	r8, r8, r5
 8007030:	40ac      	lsls	r4, r5
 8007032:	eb04 0458 	add.w	r4, r4, r8, lsr #1
 8007036:	fb02 f101 	mul.w	r1, r2, r1
 800703a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800703c:	9102      	str	r1, [sp, #8]
 800703e:	9208      	str	r2, [sp, #32]
 8007040:	e9cd 4e06 	strd	r4, lr, [sp, #24]
 8007044:	e9cd b704 	strd	fp, r7, [sp, #16]
 8007048:	9603      	str	r6, [sp, #12]
 800704a:	e9cd c500 	strd	ip, r5, [sp]
 800704e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007050:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007052:	9914      	ldr	r1, [sp, #80]	; 0x50
 8007054:	f001 fa42 	bl	80084dc <st_uaua8_nn_mat_mult_nt_t>
 8007058:	2000      	movs	r0, #0
 800705a:	b00b      	add	sp, #44	; 0x2c
 800705c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007060:	f06f 0002 	mvn.w	r0, #2
 8007064:	b00b      	add	sp, #44	; 0x2c
 8007066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800706a:	bf00      	nop

0800706c <st_uaua8_conv_dw_Wadapt>:
 800706c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007070:	b08b      	sub	sp, #44	; 0x2c
 8007072:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007076:	fb03 f202 	mul.w	r2, r3, r2
 800707a:	fb02 fc01 	mul.w	ip, r2, r1
 800707e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8007080:	461e      	mov	r6, r3
 8007082:	7824      	ldrb	r4, [r4, #0]
 8007084:	f10c 0c01 	add.w	ip, ip, #1
 8007088:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800708a:	f02c 0c01 	bic.w	ip, ip, #1
 800708e:	ea5f 0b91 	movs.w	fp, r1, lsr #2
 8007092:	9408      	str	r4, [sp, #32]
 8007094:	9009      	str	r0, [sp, #36]	; 0x24
 8007096:	449c      	add	ip, r3
 8007098:	ea44 4704 	orr.w	r7, r4, r4, lsl #16
 800709c:	f000 8083 	beq.w	80071a6 <st_uaua8_conv_dw_Wadapt+0x13a>
 80070a0:	f3c2 034f 	ubfx	r3, r2, #1, #16
 80070a4:	1e5d      	subs	r5, r3, #1
 80070a6:	b2ad      	uxth	r5, r5
 80070a8:	1c6c      	adds	r4, r5, #1
 80070aa:	ea4f 0941 	mov.w	r9, r1, lsl #1
 80070ae:	9300      	str	r3, [sp, #0]
 80070b0:	fb04 f309 	mul.w	r3, r4, r9
 80070b4:	9302      	str	r3, [sp, #8]
 80070b6:	f10b 33ff 	add.w	r3, fp, #4294967295
 80070ba:	4682      	mov	sl, r0
 80070bc:	b29b      	uxth	r3, r3
 80070be:	3004      	adds	r0, #4
 80070c0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80070c4:	f8cd b01c 	str.w	fp, [sp, #28]
 80070c8:	469b      	mov	fp, r3
 80070ca:	9a05      	ldr	r2, [sp, #20]
 80070cc:	012d      	lsls	r5, r5, #4
 80070ce:	fb12 f206 	smulbb	r2, r2, r6
 80070d2:	3520      	adds	r5, #32
 80070d4:	0124      	lsls	r4, r4, #4
 80070d6:	f002 0201 	and.w	r2, r2, #1
 80070da:	f8df e124 	ldr.w	lr, [pc, #292]	; 8007200 <st_uaua8_conv_dw_Wadapt+0x194>
 80070de:	9504      	str	r5, [sp, #16]
 80070e0:	9403      	str	r4, [sp, #12]
 80070e2:	9201      	str	r2, [sp, #4]
 80070e4:	9b00      	ldr	r3, [sp, #0]
 80070e6:	4656      	mov	r6, sl
 80070e8:	b393      	cbz	r3, 8007150 <st_uaua8_conv_dw_Wadapt+0xe4>
 80070ea:	9b04      	ldr	r3, [sp, #16]
 80070ec:	f10c 0510 	add.w	r5, ip, #16
 80070f0:	eb0c 0803 	add.w	r8, ip, r3
 80070f4:	6833      	ldr	r3, [r6, #0]
 80070f6:	5872      	ldr	r2, [r6, r1]
 80070f8:	b29c      	uxth	r4, r3
 80070fa:	ea02 000e 	and.w	r0, r2, lr
 80070fe:	ea40 4313 	orr.w	r3, r0, r3, lsr #16
 8007102:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 8007106:	fa3f f082 	uxtb16	r0, r2
 800710a:	fad0 f007 	ssub16	r0, r0, r7
 800710e:	ea4f 2232 	mov.w	r2, r2, ror #8
 8007112:	f845 0c10 	str.w	r0, [r5, #-16]
 8007116:	fa3f f282 	uxtb16	r2, r2
 800711a:	fad2 f207 	ssub16	r2, r2, r7
 800711e:	f845 2c0c 	str.w	r2, [r5, #-12]
 8007122:	fa3f f283 	uxtb16	r2, r3
 8007126:	fad2 f207 	ssub16	r2, r2, r7
 800712a:	ea4f 2333 	mov.w	r3, r3, ror #8
 800712e:	f845 2c08 	str.w	r2, [r5, #-8]
 8007132:	fa3f f383 	uxtb16	r3, r3
 8007136:	fad3 f307 	ssub16	r3, r3, r7
 800713a:	f845 3c04 	str.w	r3, [r5, #-4]
 800713e:	3510      	adds	r5, #16
 8007140:	45a8      	cmp	r8, r5
 8007142:	444e      	add	r6, r9
 8007144:	d1d6      	bne.n	80070f4 <st_uaua8_conv_dw_Wadapt+0x88>
 8007146:	9b03      	ldr	r3, [sp, #12]
 8007148:	449c      	add	ip, r3
 800714a:	9b02      	ldr	r3, [sp, #8]
 800714c:	eb0a 0603 	add.w	r6, sl, r3
 8007150:	9b01      	ldr	r3, [sp, #4]
 8007152:	b1f3      	cbz	r3, 8007192 <st_uaua8_conv_dw_Wadapt+0x126>
 8007154:	6830      	ldr	r0, [r6, #0]
 8007156:	ea0e 2200 	and.w	r2, lr, r0, lsl #8
 800715a:	b283      	uxth	r3, r0
 800715c:	431a      	orrs	r2, r3
 800715e:	fa3f f282 	uxtb16	r2, r2
 8007162:	fad2 f207 	ssub16	r2, r2, r7
 8007166:	ea00 030e 	and.w	r3, r0, lr
 800716a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800716e:	0c10      	lsrs	r0, r2, #16
 8007170:	f8ac 2000 	strh.w	r2, [ip]
 8007174:	f8ac 0002 	strh.w	r0, [ip, #2]
 8007178:	ea4f 4333 	mov.w	r3, r3, ror #16
 800717c:	fa3f f383 	uxtb16	r3, r3
 8007180:	fad3 f307 	ssub16	r3, r3, r7
 8007184:	0c1a      	lsrs	r2, r3, #16
 8007186:	f8ac 3004 	strh.w	r3, [ip, #4]
 800718a:	f8ac 2006 	strh.w	r2, [ip, #6]
 800718e:	f10c 0c08 	add.w	ip, ip, #8
 8007192:	f10a 0a04 	add.w	sl, sl, #4
 8007196:	45d3      	cmp	fp, sl
 8007198:	d1a4      	bne.n	80070e4 <st_uaua8_conv_dw_Wadapt+0x78>
 800719a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 800719e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80071a2:	fa1f fb8b 	uxth.w	fp, fp
 80071a6:	f011 0703 	ands.w	r7, r1, #3
 80071aa:	d026      	beq.n	80071fa <st_uaua8_conv_dw_Wadapt+0x18e>
 80071ac:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 80071b0:	fb13 f302 	smulbb	r3, r3, r2
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	b303      	cbz	r3, 80071fa <st_uaua8_conv_dw_Wadapt+0x18e>
 80071b8:	3b01      	subs	r3, #1
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	f103 0e01 	add.w	lr, r3, #1
 80071c0:	445f      	add	r7, fp
 80071c2:	005b      	lsls	r3, r3, #1
 80071c4:	f8bd 5020 	ldrh.w	r5, [sp, #32]
 80071c8:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80071cc:	b2bf      	uxth	r7, r7
 80071ce:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 80071d2:	1c9e      	adds	r6, r3, #2
 80071d4:	4660      	mov	r0, ip
 80071d6:	f10b 0301 	add.w	r3, fp, #1
 80071da:	eb08 020b 	add.w	r2, r8, fp
 80071de:	eb0c 0406 	add.w	r4, ip, r6
 80071e2:	fa1f fb83 	uxth.w	fp, r3
 80071e6:	7813      	ldrb	r3, [r2, #0]
 80071e8:	440a      	add	r2, r1
 80071ea:	1b5b      	subs	r3, r3, r5
 80071ec:	f820 3b02 	strh.w	r3, [r0], #2
 80071f0:	42a0      	cmp	r0, r4
 80071f2:	d1f8      	bne.n	80071e6 <st_uaua8_conv_dw_Wadapt+0x17a>
 80071f4:	45bb      	cmp	fp, r7
 80071f6:	44f4      	add	ip, lr
 80071f8:	d1ec      	bne.n	80071d4 <st_uaua8_conv_dw_Wadapt+0x168>
 80071fa:	b00b      	add	sp, #44	; 0x2c
 80071fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007200:	ffff0000 	.word	0xffff0000

08007204 <st_uaua8_convolve_dw>:
 8007204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007208:	b0d9      	sub	sp, #356	; 0x164
 800720a:	9d6c      	ldr	r5, [sp, #432]	; 0x1b0
 800720c:	e9cd 2109 	strd	r2, r1, [sp, #36]	; 0x24
 8007210:	f8bd 21c4 	ldrh.w	r2, [sp, #452]	; 0x1c4
 8007214:	f9b5 5000 	ldrsh.w	r5, [r5]
 8007218:	9224      	str	r2, [sp, #144]	; 0x90
 800721a:	f8bd 21c8 	ldrh.w	r2, [sp, #456]	; 0x1c8
 800721e:	2d00      	cmp	r5, #0
 8007220:	9234      	str	r2, [sp, #208]	; 0xd0
 8007222:	bfc8      	it	gt
 8007224:	2201      	movgt	r2, #1
 8007226:	9c6b      	ldr	r4, [sp, #428]	; 0x1ac
 8007228:	931a      	str	r3, [sp, #104]	; 0x68
 800722a:	6823      	ldr	r3, [r4, #0]
 800722c:	460c      	mov	r4, r1
 800722e:	9304      	str	r3, [sp, #16]
 8007230:	f8bd 3190 	ldrh.w	r3, [sp, #400]	; 0x190
 8007234:	bfc8      	it	gt
 8007236:	40aa      	lslgt	r2, r5
 8007238:	932e      	str	r3, [sp, #184]	; 0xb8
 800723a:	f8bd 3194 	ldrh.w	r3, [sp, #404]	; 0x194
 800723e:	901c      	str	r0, [sp, #112]	; 0x70
 8007240:	9335      	str	r3, [sp, #212]	; 0xd4
 8007242:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8007246:	f8bd 818c 	ldrh.w	r8, [sp, #396]	; 0x18c
 800724a:	932c      	str	r3, [sp, #176]	; 0xb0
 800724c:	f8bd 319c 	ldrh.w	r3, [sp, #412]	; 0x19c
 8007250:	9508      	str	r5, [sp, #32]
 8007252:	9336      	str	r3, [sp, #216]	; 0xd8
 8007254:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8007258:	a94e      	add	r1, sp, #312	; 0x138
 800725a:	931f      	str	r3, [sp, #124]	; 0x7c
 800725c:	f8bd 31a4 	ldrh.w	r3, [sp, #420]	; 0x1a4
 8007260:	a844      	add	r0, sp, #272	; 0x110
 8007262:	9333      	str	r3, [sp, #204]	; 0xcc
 8007264:	f89d 31b4 	ldrb.w	r3, [sp, #436]	; 0x1b4
 8007268:	9305      	str	r3, [sp, #20]
 800726a:	f89d 31bc 	ldrb.w	r3, [sp, #444]	; 0x1bc
 800726e:	bfc4      	itt	gt
 8007270:	40ab      	lslgt	r3, r5
 8007272:	eb03 0352 	addgt.w	r3, r3, r2, lsr #1
 8007276:	9303      	str	r3, [sp, #12]
 8007278:	ab40      	add	r3, sp, #256	; 0x100
 800727a:	9300      	str	r3, [sp, #0]
 800727c:	943a      	str	r4, [sp, #232]	; 0xe8
 800727e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8007280:	ab3c      	add	r3, sp, #240	; 0xf0
 8007282:	9439      	str	r4, [sp, #228]	; 0xe4
 8007284:	9c24      	ldr	r4, [sp, #144]	; 0x90
 8007286:	aa38      	add	r2, sp, #224	; 0xe0
 8007288:	943e      	str	r4, [sp, #248]	; 0xf8
 800728a:	9c34      	ldr	r4, [sp, #208]	; 0xd0
 800728c:	943d      	str	r4, [sp, #244]	; 0xf4
 800728e:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 8007290:	9442      	str	r4, [sp, #264]	; 0x108
 8007292:	9c35      	ldr	r4, [sp, #212]	; 0xd4
 8007294:	9441      	str	r4, [sp, #260]	; 0x104
 8007296:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8007298:	9450      	str	r4, [sp, #320]	; 0x140
 800729a:	9c33      	ldr	r4, [sp, #204]	; 0xcc
 800729c:	9451      	str	r4, [sp, #324]	; 0x144
 800729e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80072a0:	9452      	str	r4, [sp, #328]	; 0x148
 80072a2:	9c36      	ldr	r4, [sp, #216]	; 0xd8
 80072a4:	9453      	str	r4, [sp, #332]	; 0x14c
 80072a6:	f001 f855 	bl	8008354 <ai_padding_opt_init>
 80072aa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80072ac:	fbb8 f3f3 	udiv	r3, r8, r3
 80072b0:	079a      	lsls	r2, r3, #30
 80072b2:	9315      	str	r3, [sp, #84]	; 0x54
 80072b4:	bf02      	ittt	eq
 80072b6:	1099      	asreq	r1, r3, #2
 80072b8:	2304      	moveq	r3, #4
 80072ba:	9315      	streq	r3, [sp, #84]	; 0x54
 80072bc:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80072be:	bf18      	it	ne
 80072c0:	2101      	movne	r1, #1
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	f000 81d0 	beq.w	8007668 <st_uaua8_convolve_dw+0x464>
 80072c8:	2300      	movs	r3, #0
 80072ca:	9d35      	ldr	r5, [sp, #212]	; 0xd4
 80072cc:	469e      	mov	lr, r3
 80072ce:	9332      	str	r3, [sp, #200]	; 0xc8
 80072d0:	462b      	mov	r3, r5
 80072d2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80072d4:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80072d6:	4610      	mov	r0, r2
 80072d8:	fb03 f302 	mul.w	r3, r3, r2
 80072dc:	fb04 f101 	mul.w	r1, r4, r1
 80072e0:	fb12 f205 	smulbb	r2, r2, r5
 80072e4:	f3c3 054f 	ubfx	r5, r3, #1, #16
 80072e8:	1e6e      	subs	r6, r5, #1
 80072ea:	950b      	str	r5, [sp, #44]	; 0x2c
 80072ec:	ea4f 0548 	mov.w	r5, r8, lsl #1
 80072f0:	950f      	str	r5, [sp, #60]	; 0x3c
 80072f2:	b2b6      	uxth	r6, r6
 80072f4:	9131      	str	r1, [sp, #196]	; 0xc4
 80072f6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80072f8:	1c77      	adds	r7, r6, #1
 80072fa:	fb07 f101 	mul.w	r1, r7, r1
 80072fe:	fb04 f000 	mul.w	r0, r4, r0
 8007302:	fb03 f308 	mul.w	r3, r3, r8
 8007306:	9c6a      	ldr	r4, [sp, #424]	; 0x1a8
 8007308:	ea4f 0598 	mov.w	r5, r8, lsr #2
 800730c:	9525      	str	r5, [sp, #148]	; 0x94
 800730e:	9110      	str	r1, [sp, #64]	; 0x40
 8007310:	1e69      	subs	r1, r5, #1
 8007312:	f104 0520 	add.w	r5, r4, #32
 8007316:	9c36      	ldr	r4, [sp, #216]	; 0xd8
 8007318:	3301      	adds	r3, #1
 800731a:	f1c4 0c00 	rsb	ip, r4, #0
 800731e:	9c73      	ldr	r4, [sp, #460]	; 0x1cc
 8007320:	f023 0301 	bic.w	r3, r3, #1
 8007324:	18e3      	adds	r3, r4, r3
 8007326:	4674      	mov	r4, lr
 8007328:	b292      	uxth	r2, r2
 800732a:	9216      	str	r2, [sp, #88]	; 0x58
 800732c:	3a01      	subs	r2, #1
 800732e:	b292      	uxth	r2, r2
 8007330:	9327      	str	r3, [sp, #156]	; 0x9c
 8007332:	0133      	lsls	r3, r6, #4
 8007334:	3201      	adds	r2, #1
 8007336:	9328      	str	r3, [sp, #160]	; 0xa0
 8007338:	013b      	lsls	r3, r7, #4
 800733a:	b289      	uxth	r1, r1
 800733c:	9311      	str	r3, [sp, #68]	; 0x44
 800733e:	0053      	lsls	r3, r2, #1
 8007340:	9037      	str	r0, [sp, #220]	; 0xdc
 8007342:	9319      	str	r3, [sp, #100]	; 0x64
 8007344:	1c48      	adds	r0, r1, #1
 8007346:	eb05 1301 	add.w	r3, r5, r1, lsl #4
 800734a:	930d      	str	r3, [sp, #52]	; 0x34
 800734c:	0083      	lsls	r3, r0, #2
 800734e:	9329      	str	r3, [sp, #164]	; 0xa4
 8007350:	9b6a      	ldr	r3, [sp, #424]	; 0x1a8
 8007352:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007354:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8007358:	9925      	ldr	r1, [sp, #148]	; 0x94
 800735a:	932a      	str	r3, [sp, #168]	; 0xa8
 800735c:	f002 0301 	and.w	r3, r2, #1
 8007360:	930c      	str	r3, [sp, #48]	; 0x30
 8007362:	008b      	lsls	r3, r1, #2
 8007364:	932b      	str	r3, [sp, #172]	; 0xac
 8007366:	fa1f f38c 	uxth.w	r3, ip
 800736a:	932f      	str	r3, [sp, #188]	; 0xbc
 800736c:	9b05      	ldr	r3, [sp, #20]
 800736e:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 8007372:	9330      	str	r3, [sp, #192]	; 0xc0
 8007374:	f008 0303 	and.w	r3, r8, #3
 8007378:	931e      	str	r3, [sp, #120]	; 0x78
 800737a:	a844      	add	r0, sp, #272	; 0x110
 800737c:	f001 f844 	bl	8008408 <ai_padding_opt_phase1>
 8007380:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007382:	2b00      	cmp	r3, #0
 8007384:	f000 8162 	beq.w	800764c <st_uaua8_convolve_dw+0x448>
 8007388:	2300      	movs	r3, #0
 800738a:	46c3      	mov	fp, r8
 800738c:	931b      	str	r3, [sp, #108]	; 0x6c
 800738e:	461a      	mov	r2, r3
 8007390:	e9dd 3135 	ldrd	r3, r1, [sp, #212]	; 0xd4
 8007394:	1a5b      	subs	r3, r3, r1
 8007396:	9933      	ldr	r1, [sp, #204]	; 0xcc
 8007398:	fb01 3304 	mla	r3, r1, r4, r3
 800739c:	930e      	str	r3, [sp, #56]	; 0x38
 800739e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80073a0:	425b      	negs	r3, r3
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	9317      	str	r3, [sp, #92]	; 0x5c
 80073a6:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 80073aa:	9326      	str	r3, [sp, #152]	; 0x98
 80073ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80073ae:	3b01      	subs	r3, #1
 80073b0:	932d      	str	r3, [sp, #180]	; 0xb4
 80073b2:	9b44      	ldr	r3, [sp, #272]	; 0x110
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	f000 8228 	beq.w	800780a <st_uaua8_convolve_dw+0x606>
 80073ba:	2101      	movs	r1, #1
 80073bc:	3b01      	subs	r3, #1
 80073be:	9344      	str	r3, [sp, #272]	; 0x110
 80073c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80073c2:	f8ad 1136 	strh.w	r1, [sp, #310]	; 0x136
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	f000 83a4 	beq.w	8007b14 <st_uaua8_convolve_dw+0x910>
 80073cc:	2b04      	cmp	r3, #4
 80073ce:	f000 842a 	beq.w	8007c26 <st_uaua8_convolve_dw+0xa22>
 80073d2:	2b02      	cmp	r3, #2
 80073d4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80073d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80073d8:	f000 83d5 	beq.w	8007b86 <st_uaua8_convolve_dw+0x982>
 80073dc:	4283      	cmp	r3, r0
 80073de:	da41      	bge.n	8007464 <st_uaua8_convolve_dw+0x260>
 80073e0:	991f      	ldr	r1, [sp, #124]	; 0x7c
 80073e2:	982e      	ldr	r0, [sp, #184]	; 0xb8
 80073e4:	fb02 0201 	mla	r2, r2, r1, r0
 80073e8:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80073ea:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
 80073ee:	1a12      	subs	r2, r2, r0
 80073f0:	4291      	cmp	r1, r2
 80073f2:	9118      	str	r1, [sp, #96]	; 0x60
 80073f4:	9207      	str	r2, [sp, #28]
 80073f6:	da35      	bge.n	8007464 <st_uaua8_convolve_dw+0x260>
 80073f8:	f8dd 91cc 	ldr.w	r9, [sp, #460]	; 0x1cc
 80073fc:	46d8      	mov	r8, fp
 80073fe:	46ca      	mov	sl, r9
 8007400:	9306      	str	r3, [sp, #24]
 8007402:	9302      	str	r3, [sp, #8]
 8007404:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007408:	4689      	mov	r9, r1
 800740a:	9a06      	ldr	r2, [sp, #24]
 800740c:	f1ca 0b00 	rsb	fp, sl, #0
 8007410:	fb03 f302 	mul.w	r3, r3, r2
 8007414:	9313      	str	r3, [sp, #76]	; 0x4c
 8007416:	9b02      	ldr	r3, [sp, #8]
 8007418:	2b00      	cmp	r3, #0
 800741a:	db0a      	blt.n	8007432 <st_uaua8_convolve_dw+0x22e>
 800741c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800741e:	9a06      	ldr	r2, [sp, #24]
 8007420:	4293      	cmp	r3, r2
 8007422:	dd06      	ble.n	8007432 <st_uaua8_convolve_dw+0x22e>
 8007424:	f1b9 0f00 	cmp.w	r9, #0
 8007428:	db03      	blt.n	8007432 <st_uaua8_convolve_dw+0x22e>
 800742a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800742c:	428b      	cmp	r3, r1
 800742e:	f300 8150 	bgt.w	80076d2 <st_uaua8_convolve_dw+0x4ce>
 8007432:	4642      	mov	r2, r8
 8007434:	4651      	mov	r1, sl
 8007436:	9805      	ldr	r0, [sp, #20]
 8007438:	f000 fffe 	bl	8008438 <st_uint8_fill>
 800743c:	f109 0901 	add.w	r9, r9, #1
 8007440:	9b07      	ldr	r3, [sp, #28]
 8007442:	fa0f f989 	sxth.w	r9, r9
 8007446:	4599      	cmp	r9, r3
 8007448:	44c2      	add	sl, r8
 800744a:	ebab 0b08 	sub.w	fp, fp, r8
 800744e:	4649      	mov	r1, r9
 8007450:	dbe1      	blt.n	8007416 <st_uaua8_convolve_dw+0x212>
 8007452:	9b02      	ldr	r3, [sp, #8]
 8007454:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007456:	3301      	adds	r3, #1
 8007458:	b21b      	sxth	r3, r3
 800745a:	4293      	cmp	r3, r2
 800745c:	9302      	str	r3, [sp, #8]
 800745e:	9306      	str	r3, [sp, #24]
 8007460:	dbd0      	blt.n	8007404 <st_uaua8_convolve_dw+0x200>
 8007462:	46c3      	mov	fp, r8
 8007464:	9b05      	ldr	r3, [sp, #20]
 8007466:	2b00      	cmp	r3, #0
 8007468:	f040 8208 	bne.w	800787c <st_uaua8_convolve_dw+0x678>
 800746c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800746e:	2b00      	cmp	r3, #0
 8007470:	f000 8456 	beq.w	8007d20 <st_uaua8_convolve_dw+0xb1c>
 8007474:	9b73      	ldr	r3, [sp, #460]	; 0x1cc
 8007476:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8007478:	9302      	str	r3, [sp, #8]
 800747a:	9b70      	ldr	r3, [sp, #448]	; 0x1c0
 800747c:	9306      	str	r3, [sp, #24]
 800747e:	9b6a      	ldr	r3, [sp, #424]	; 0x1a8
 8007480:	f103 0c10 	add.w	ip, r3, #16
 8007484:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007486:	3320      	adds	r3, #32
 8007488:	9312      	str	r3, [sp, #72]	; 0x48
 800748a:	9b08      	ldr	r3, [sp, #32]
 800748c:	f1c3 0301 	rsb	r3, r3, #1
 8007490:	9313      	str	r3, [sp, #76]	; 0x4c
 8007492:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007494:	e95c 5404 	ldrd	r5, r4, [ip, #-16]
 8007498:	e95c 0102 	ldrd	r0, r1, [ip, #-8]
 800749c:	9a02      	ldr	r2, [sp, #8]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d039      	beq.n	8007516 <st_uaua8_convolve_dw+0x312>
 80074a2:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80074a4:	f106 0310 	add.w	r3, r6, #16
 80074a8:	eb06 0e07 	add.w	lr, r6, r7
 80074ac:	9607      	str	r6, [sp, #28]
 80074ae:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80074b0:	f852 900b 	ldr.w	r9, [r2, fp]
 80074b4:	6817      	ldr	r7, [r2, #0]
 80074b6:	ea4f 4819 	mov.w	r8, r9, lsr #16
 80074ba:	fa1f fa87 	uxth.w	sl, r7
 80074be:	ea4f 4808 	mov.w	r8, r8, lsl #16
 80074c2:	ea4a 4909 	orr.w	r9, sl, r9, lsl #16
 80074c6:	ea48 4817 	orr.w	r8, r8, r7, lsr #16
 80074ca:	fa3f fa89 	uxtb16	sl, r9
 80074ce:	f853 7c10 	ldr.w	r7, [r3, #-16]
 80074d2:	fb27 550a 	smlad	r5, r7, sl, r5
 80074d6:	ea4f 2939 	mov.w	r9, r9, ror #8
 80074da:	f853 7c0c 	ldr.w	r7, [r3, #-12]
 80074de:	fa3f f989 	uxtb16	r9, r9
 80074e2:	fb27 4409 	smlad	r4, r7, r9, r4
 80074e6:	fa3f f988 	uxtb16	r9, r8
 80074ea:	f853 7c08 	ldr.w	r7, [r3, #-8]
 80074ee:	fb27 0009 	smlad	r0, r7, r9, r0
 80074f2:	ea4f 2838 	mov.w	r8, r8, ror #8
 80074f6:	f853 7c04 	ldr.w	r7, [r3, #-4]
 80074fa:	fa3f f888 	uxtb16	r8, r8
 80074fe:	fb27 1108 	smlad	r1, r7, r8, r1
 8007502:	3310      	adds	r3, #16
 8007504:	459e      	cmp	lr, r3
 8007506:	4432      	add	r2, r6
 8007508:	d1d2      	bne.n	80074b0 <st_uaua8_convolve_dw+0x2ac>
 800750a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800750c:	9e07      	ldr	r6, [sp, #28]
 800750e:	9a02      	ldr	r2, [sp, #8]
 8007510:	441e      	add	r6, r3
 8007512:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007514:	189a      	adds	r2, r3, r2
 8007516:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007518:	b1b3      	cbz	r3, 8007548 <st_uaua8_convolve_dw+0x344>
 800751a:	6813      	ldr	r3, [r2, #0]
 800751c:	f9b6 2000 	ldrsh.w	r2, [r6]
 8007520:	f8b6 e002 	ldrh.w	lr, [r6, #2]
 8007524:	b2df      	uxtb	r7, r3
 8007526:	fb07 5502 	mla	r5, r7, r2, r5
 800752a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800752e:	88b7      	ldrh	r7, [r6, #4]
 8007530:	fb1e 4402 	smlabb	r4, lr, r2, r4
 8007534:	f8b6 e006 	ldrh.w	lr, [r6, #6]
 8007538:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800753c:	0e1b      	lsrs	r3, r3, #24
 800753e:	fb17 0002 	smlabb	r0, r7, r2, r0
 8007542:	fb1e 1103 	smlabb	r1, lr, r3, r1
 8007546:	3608      	adds	r6, #8
 8007548:	9b06      	ldr	r3, [sp, #24]
 800754a:	9f08      	ldr	r7, [sp, #32]
 800754c:	3304      	adds	r3, #4
 800754e:	2f00      	cmp	r7, #0
 8007550:	9306      	str	r3, [sp, #24]
 8007552:	f340 808d 	ble.w	8007670 <st_uaua8_convolve_dw+0x46c>
 8007556:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800755a:	ea4f 0e41 	mov.w	lr, r1, lsl #1
 800755e:	006d      	lsls	r5, r5, #1
 8007560:	0064      	lsls	r4, r4, #1
 8007562:	fb55 3502 	smmla	r5, r5, r2, r3
 8007566:	0040      	lsls	r0, r0, #1
 8007568:	9b03      	ldr	r3, [sp, #12]
 800756a:	413d      	asrs	r5, r7
 800756c:	fb54 3402 	smmla	r4, r4, r2, r3
 8007570:	9b03      	ldr	r3, [sp, #12]
 8007572:	fb50 3002 	smmla	r0, r0, r2, r3
 8007576:	fb5e 3102 	smmla	r1, lr, r2, r3
 800757a:	f385 0508 	usat	r5, #8, r5
 800757e:	9b06      	ldr	r3, [sp, #24]
 8007580:	413c      	asrs	r4, r7
 8007582:	f803 5c04 	strb.w	r5, [r3, #-4]
 8007586:	f384 0408 	usat	r4, #8, r4
 800758a:	f803 4c03 	strb.w	r4, [r3, #-3]
 800758e:	4138      	asrs	r0, r7
 8007590:	f380 0008 	usat	r0, #8, r0
 8007594:	f803 0c02 	strb.w	r0, [r3, #-2]
 8007598:	4139      	asrs	r1, r7
 800759a:	f381 0108 	usat	r1, #8, r1
 800759e:	f803 1c01 	strb.w	r1, [r3, #-1]
 80075a2:	9b02      	ldr	r3, [sp, #8]
 80075a4:	f10c 0c10 	add.w	ip, ip, #16
 80075a8:	3304      	adds	r3, #4
 80075aa:	9302      	str	r3, [sp, #8]
 80075ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075ae:	4563      	cmp	r3, ip
 80075b0:	f47f af6f 	bne.w	8007492 <st_uaua8_convolve_dw+0x28e>
 80075b4:	e9dd c52a 	ldrd	ip, r5, [sp, #168]	; 0xa8
 80075b8:	9b70      	ldr	r3, [sp, #448]	; 0x1c0
 80075ba:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80075bc:	4413      	add	r3, r2
 80075be:	9370      	str	r3, [sp, #448]	; 0x1c0
 80075c0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80075c2:	b3ab      	cbz	r3, 8007630 <st_uaua8_convolve_dw+0x42c>
 80075c4:	eb03 0e05 	add.w	lr, r3, r5
 80075c8:	9b08      	ldr	r3, [sp, #32]
 80075ca:	9f70      	ldr	r7, [sp, #448]	; 0x1c0
 80075cc:	4699      	mov	r9, r3
 80075ce:	f8dd a1cc 	ldr.w	sl, [sp, #460]	; 0x1cc
 80075d2:	fa1f fe8e 	uxth.w	lr, lr
 80075d6:	f1c3 0801 	rsb	r8, r3, #1
 80075da:	1c69      	adds	r1, r5, #1
 80075dc:	eb0a 0205 	add.w	r2, sl, r5
 80075e0:	b28d      	uxth	r5, r1
 80075e2:	9916      	ldr	r1, [sp, #88]	; 0x58
 80075e4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80075e8:	b149      	cbz	r1, 80075fe <st_uaua8_convolve_dw+0x3fa>
 80075ea:	9919      	ldr	r1, [sp, #100]	; 0x64
 80075ec:	1874      	adds	r4, r6, r1
 80075ee:	f836 0b02 	ldrh.w	r0, [r6], #2
 80075f2:	7811      	ldrb	r1, [r2, #0]
 80075f4:	42a6      	cmp	r6, r4
 80075f6:	445a      	add	r2, fp
 80075f8:	fb10 3301 	smlabb	r3, r0, r1, r3
 80075fc:	d1f7      	bne.n	80075ee <st_uaua8_convolve_dw+0x3ea>
 80075fe:	f1b9 0f00 	cmp.w	r9, #0
 8007602:	f340 80f5 	ble.w	80077f0 <st_uaua8_convolve_dw+0x5ec>
 8007606:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
 800760a:	005b      	lsls	r3, r3, #1
 800760c:	fb53 1302 	smmla	r3, r3, r2, r1
 8007610:	fa43 f309 	asr.w	r3, r3, r9
 8007614:	f383 0308 	usat	r3, #8, r3
 8007618:	703b      	strb	r3, [r7, #0]
 800761a:	4575      	cmp	r5, lr
 800761c:	f107 0701 	add.w	r7, r7, #1
 8007620:	d1db      	bne.n	80075da <st_uaua8_convolve_dw+0x3d6>
 8007622:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007624:	9a70      	ldr	r2, [sp, #448]	; 0x1c0
 8007626:	3b01      	subs	r3, #1
 8007628:	b29b      	uxth	r3, r3
 800762a:	3301      	adds	r3, #1
 800762c:	441a      	add	r2, r3
 800762e:	9270      	str	r2, [sp, #448]	; 0x1c0
 8007630:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007632:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8007634:	3301      	adds	r3, #1
 8007636:	b21a      	sxth	r2, r3
 8007638:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800763a:	921b      	str	r2, [sp, #108]	; 0x6c
 800763c:	440b      	add	r3, r1
 800763e:	b29b      	uxth	r3, r3
 8007640:	9317      	str	r3, [sp, #92]	; 0x5c
 8007642:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007644:	4293      	cmp	r3, r2
 8007646:	f73f aeb4 	bgt.w	80073b2 <st_uaua8_convolve_dw+0x1ae>
 800764a:	46d8      	mov	r8, fp
 800764c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800764e:	9933      	ldr	r1, [sp, #204]	; 0xcc
 8007650:	3301      	adds	r3, #1
 8007652:	b21a      	sxth	r2, r3
 8007654:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8007656:	9232      	str	r2, [sp, #200]	; 0xc8
 8007658:	440b      	add	r3, r1
 800765a:	b29b      	uxth	r3, r3
 800765c:	932f      	str	r3, [sp, #188]	; 0xbc
 800765e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8007660:	4614      	mov	r4, r2
 8007662:	4293      	cmp	r3, r2
 8007664:	f73f ae89 	bgt.w	800737a <st_uaua8_convolve_dw+0x176>
 8007668:	2000      	movs	r0, #0
 800766a:	b059      	add	sp, #356	; 0x164
 800766c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007670:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007672:	fa05 f302 	lsl.w	r3, r5, r2
 8007676:	f303 031f 	ssat	r3, #32, r3
 800767a:	9f04      	ldr	r7, [sp, #16]
 800767c:	fb53 f317 	smmulr	r3, r3, r7
 8007680:	4615      	mov	r5, r2
 8007682:	fa04 f202 	lsl.w	r2, r4, r2
 8007686:	f302 021f 	ssat	r2, #32, r2
 800768a:	fb52 f217 	smmulr	r2, r2, r7
 800768e:	40a8      	lsls	r0, r5
 8007690:	f300 001f 	ssat	r0, #32, r0
 8007694:	fb50 f017 	smmulr	r0, r0, r7
 8007698:	40a9      	lsls	r1, r5
 800769a:	f301 011f 	ssat	r1, #32, r1
 800769e:	fb51 f117 	smmulr	r1, r1, r7
 80076a2:	9c03      	ldr	r4, [sp, #12]
 80076a4:	4423      	add	r3, r4
 80076a6:	f383 0308 	usat	r3, #8, r3
 80076aa:	9d06      	ldr	r5, [sp, #24]
 80076ac:	4422      	add	r2, r4
 80076ae:	f805 3c04 	strb.w	r3, [r5, #-4]
 80076b2:	4623      	mov	r3, r4
 80076b4:	f382 0208 	usat	r2, #8, r2
 80076b8:	f805 2c03 	strb.w	r2, [r5, #-3]
 80076bc:	4418      	add	r0, r3
 80076be:	f380 0008 	usat	r0, #8, r0
 80076c2:	f805 0c02 	strb.w	r0, [r5, #-2]
 80076c6:	4419      	add	r1, r3
 80076c8:	f381 0108 	usat	r1, #8, r1
 80076cc:	f805 1c01 	strb.w	r1, [r5, #-1]
 80076d0:	e767      	b.n	80075a2 <st_uaua8_convolve_dw+0x39e>
 80076d2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80076d4:	981c      	ldr	r0, [sp, #112]	; 0x70
 80076d6:	4419      	add	r1, r3
 80076d8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80076da:	fb03 0101 	mla	r1, r3, r1, r0
 80076de:	2b00      	cmp	r3, #0
 80076e0:	f43f aeac 	beq.w	800743c <st_uaua8_convolve_dw+0x238>
 80076e4:	9f15      	ldr	r7, [sp, #84]	; 0x54
 80076e6:	2f00      	cmp	r7, #0
 80076e8:	f43f aea8 	beq.w	800743c <st_uaua8_convolve_dw+0x238>
 80076ec:	465c      	mov	r4, fp
 80076ee:	18c8      	adds	r0, r1, r3
 80076f0:	e9cd a920 	strd	sl, r9, [sp, #128]	; 0x80
 80076f4:	f8cd b088 	str.w	fp, [sp, #136]	; 0x88
 80076f8:	4653      	mov	r3, sl
 80076fa:	4683      	mov	fp, r0
 80076fc:	46a1      	mov	r9, r4
 80076fe:	1eba      	subs	r2, r7, #2
 8007700:	9212      	str	r2, [sp, #72]	; 0x48
 8007702:	1efa      	subs	r2, r7, #3
 8007704:	9214      	str	r2, [sp, #80]	; 0x50
 8007706:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
 800770a:	1f3a      	subs	r2, r7, #4
 800770c:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
 8007710:	921d      	str	r2, [sp, #116]	; 0x74
 8007712:	19de      	adds	r6, r3, r7
 8007714:	f101 0e01 	add.w	lr, r1, #1
 8007718:	42b1      	cmp	r1, r6
 800771a:	bf38      	it	cc
 800771c:	4573      	cmpcc	r3, lr
 800771e:	d359      	bcc.n	80077d4 <st_uaua8_convolve_dw+0x5d0>
 8007720:	2f0b      	cmp	r7, #11
 8007722:	d957      	bls.n	80077d4 <st_uaua8_convolve_dw+0x5d0>
 8007724:	f009 0403 	and.w	r4, r9, #3
 8007728:	1ce2      	adds	r2, r4, #3
 800772a:	4542      	cmp	r2, r8
 800772c:	f200 81e6 	bhi.w	8007afc <st_uaua8_convolve_dw+0x8f8>
 8007730:	2c00      	cmp	r4, #0
 8007732:	d05a      	beq.n	80077ea <st_uaua8_convolve_dw+0x5e6>
 8007734:	780a      	ldrb	r2, [r1, #0]
 8007736:	2c01      	cmp	r4, #1
 8007738:	f103 0a01 	add.w	sl, r3, #1
 800773c:	701a      	strb	r2, [r3, #0]
 800773e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8007740:	d00b      	beq.n	800775a <st_uaua8_convolve_dw+0x556>
 8007742:	780a      	ldrb	r2, [r1, #0]
 8007744:	2c03      	cmp	r4, #3
 8007746:	f103 0a02 	add.w	sl, r3, #2
 800774a:	705a      	strb	r2, [r3, #1]
 800774c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800774e:	d104      	bne.n	800775a <st_uaua8_convolve_dw+0x556>
 8007750:	780a      	ldrb	r2, [r1, #0]
 8007752:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8007754:	f103 0a03 	add.w	sl, r3, #3
 8007758:	709a      	strb	r2, [r3, #2]
 800775a:	2000      	movs	r0, #0
 800775c:	f891 c000 	ldrb.w	ip, [r1]
 8007760:	4602      	mov	r2, r0
 8007762:	f36c 0007 	bfi	r0, ip, #0, #8
 8007766:	f36c 200f 	bfi	r0, ip, #8, #8
 800776a:	f36c 4017 	bfi	r0, ip, #16, #8
 800776e:	4423      	add	r3, r4
 8007770:	1b3c      	subs	r4, r7, r4
 8007772:	f36c 601f 	bfi	r0, ip, #24, #8
 8007776:	ea4f 0c94 	mov.w	ip, r4, lsr #2
 800777a:	3201      	adds	r2, #1
 800777c:	4562      	cmp	r2, ip
 800777e:	f843 0b04 	str.w	r0, [r3], #4
 8007782:	d3fa      	bcc.n	800777a <st_uaua8_convolve_dw+0x576>
 8007784:	f024 0203 	bic.w	r2, r4, #3
 8007788:	42a2      	cmp	r2, r4
 800778a:	eb0a 0302 	add.w	r3, sl, r2
 800778e:	eba5 0502 	sub.w	r5, r5, r2
 8007792:	d014      	beq.n	80077be <st_uaua8_convolve_dw+0x5ba>
 8007794:	780a      	ldrb	r2, [r1, #0]
 8007796:	701a      	strb	r2, [r3, #0]
 8007798:	b18d      	cbz	r5, 80077be <st_uaua8_convolve_dw+0x5ba>
 800779a:	780a      	ldrb	r2, [r1, #0]
 800779c:	2d01      	cmp	r5, #1
 800779e:	705a      	strb	r2, [r3, #1]
 80077a0:	d00d      	beq.n	80077be <st_uaua8_convolve_dw+0x5ba>
 80077a2:	780a      	ldrb	r2, [r1, #0]
 80077a4:	2d02      	cmp	r5, #2
 80077a6:	709a      	strb	r2, [r3, #2]
 80077a8:	d009      	beq.n	80077be <st_uaua8_convolve_dw+0x5ba>
 80077aa:	780a      	ldrb	r2, [r1, #0]
 80077ac:	2d03      	cmp	r5, #3
 80077ae:	70da      	strb	r2, [r3, #3]
 80077b0:	d005      	beq.n	80077be <st_uaua8_convolve_dw+0x5ba>
 80077b2:	780a      	ldrb	r2, [r1, #0]
 80077b4:	2d04      	cmp	r5, #4
 80077b6:	711a      	strb	r2, [r3, #4]
 80077b8:	d001      	beq.n	80077be <st_uaua8_convolve_dw+0x5ba>
 80077ba:	780a      	ldrb	r2, [r1, #0]
 80077bc:	715a      	strb	r2, [r3, #5]
 80077be:	45de      	cmp	lr, fp
 80077c0:	4671      	mov	r1, lr
 80077c2:	4633      	mov	r3, r6
 80077c4:	eba9 0907 	sub.w	r9, r9, r7
 80077c8:	d1a3      	bne.n	8007712 <st_uaua8_convolve_dw+0x50e>
 80077ca:	e9dd a920 	ldrd	sl, r9, [sp, #128]	; 0x80
 80077ce:	e9dd b822 	ldrd	fp, r8, [sp, #136]	; 0x88
 80077d2:	e633      	b.n	800743c <st_uaua8_convolve_dw+0x238>
 80077d4:	780a      	ldrb	r2, [r1, #0]
 80077d6:	f803 2b01 	strb.w	r2, [r3], #1
 80077da:	429e      	cmp	r6, r3
 80077dc:	d0ef      	beq.n	80077be <st_uaua8_convolve_dw+0x5ba>
 80077de:	780a      	ldrb	r2, [r1, #0]
 80077e0:	f803 2b01 	strb.w	r2, [r3], #1
 80077e4:	429e      	cmp	r6, r3
 80077e6:	d1f5      	bne.n	80077d4 <st_uaua8_convolve_dw+0x5d0>
 80077e8:	e7e9      	b.n	80077be <st_uaua8_convolve_dw+0x5ba>
 80077ea:	4645      	mov	r5, r8
 80077ec:	469a      	mov	sl, r3
 80077ee:	e7b4      	b.n	800775a <st_uaua8_convolve_dw+0x556>
 80077f0:	fa03 f308 	lsl.w	r3, r3, r8
 80077f4:	f303 031f 	ssat	r3, #32, r3
 80077f8:	9a04      	ldr	r2, [sp, #16]
 80077fa:	fb53 f312 	smmulr	r3, r3, r2
 80077fe:	9a03      	ldr	r2, [sp, #12]
 8007800:	4413      	add	r3, r2
 8007802:	f383 0308 	usat	r3, #8, r3
 8007806:	703b      	strb	r3, [r7, #0]
 8007808:	e707      	b.n	800761a <st_uaua8_convolve_dw+0x416>
 800780a:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800780c:	2b00      	cmp	r3, #0
 800780e:	f000 8177 	beq.w	8007b00 <st_uaua8_convolve_dw+0x8fc>
 8007812:	3b01      	subs	r3, #1
 8007814:	9345      	str	r3, [sp, #276]	; 0x114
 8007816:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007818:	f8bd 1134 	ldrh.w	r1, [sp, #308]	; 0x134
 800781c:	2b01      	cmp	r3, #1
 800781e:	f8ad 1136 	strh.w	r1, [sp, #310]	; 0x136
 8007822:	f47f add3 	bne.w	80073cc <st_uaua8_convolve_dw+0x1c8>
 8007826:	2901      	cmp	r1, #1
 8007828:	f000 8174 	beq.w	8007b14 <st_uaua8_convolve_dw+0x910>
 800782c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800782e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007830:	f9bd 505c 	ldrsh.w	r5, [sp, #92]	; 0x5c
 8007834:	428b      	cmp	r3, r1
 8007836:	f6bf ae15 	bge.w	8007464 <st_uaua8_convolve_dw+0x260>
 800783a:	461c      	mov	r4, r3
 800783c:	4618      	mov	r0, r3
 800783e:	4688      	mov	r8, r1
 8007840:	9e73      	ldr	r6, [sp, #460]	; 0x1cc
 8007842:	f8cd b008 	str.w	fp, [sp, #8]
 8007846:	9f37      	ldr	r7, [sp, #220]	; 0xdc
 8007848:	46b3      	mov	fp, r6
 800784a:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
 800784e:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007852:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8007854:	fb00 500a 	mla	r0, r0, sl, r5
 8007858:	3401      	adds	r4, #1
 800785a:	fb06 9000 	mla	r0, r6, r0, r9
 800785e:	4659      	mov	r1, fp
 8007860:	b224      	sxth	r4, r4
 8007862:	463a      	mov	r2, r7
 8007864:	f002 f914 	bl	8009a90 <arm_copy_q7>
 8007868:	4544      	cmp	r4, r8
 800786a:	44bb      	add	fp, r7
 800786c:	4620      	mov	r0, r4
 800786e:	dbf1      	blt.n	8007854 <st_uaua8_convolve_dw+0x650>
 8007870:	9b05      	ldr	r3, [sp, #20]
 8007872:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007876:	2b00      	cmp	r3, #0
 8007878:	f43f adf8 	beq.w	800746c <st_uaua8_convolve_dw+0x268>
 800787c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800787e:	2b00      	cmp	r3, #0
 8007880:	f000 8249 	beq.w	8007d16 <st_uaua8_convolve_dw+0xb12>
 8007884:	9b73      	ldr	r3, [sp, #460]	; 0x1cc
 8007886:	9f27      	ldr	r7, [sp, #156]	; 0x9c
 8007888:	9306      	str	r3, [sp, #24]
 800788a:	9b70      	ldr	r3, [sp, #448]	; 0x1c0
 800788c:	f8dd 90c0 	ldr.w	r9, [sp, #192]	; 0xc0
 8007890:	9307      	str	r3, [sp, #28]
 8007892:	9b6a      	ldr	r3, [sp, #424]	; 0x1a8
 8007894:	f8cd b050 	str.w	fp, [sp, #80]	; 0x50
 8007898:	f103 0c10 	add.w	ip, r3, #16
 800789c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800789e:	3320      	adds	r3, #32
 80078a0:	9318      	str	r3, [sp, #96]	; 0x60
 80078a2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80078a6:	931d      	str	r3, [sp, #116]	; 0x74
 80078a8:	9b08      	ldr	r3, [sp, #32]
 80078aa:	f1c3 0301 	rsb	r3, r3, #1
 80078ae:	9320      	str	r3, [sp, #128]	; 0x80
 80078b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078b2:	e95c 5404 	ldrd	r5, r4, [ip, #-16]
 80078b6:	e95c 0102 	ldrd	r0, r1, [ip, #-8]
 80078ba:	9a06      	ldr	r2, [sp, #24]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d04c      	beq.n	800795a <st_uaua8_convolve_dw+0x756>
 80078c0:	9e18      	ldr	r6, [sp, #96]	; 0x60
 80078c2:	f107 0310 	add.w	r3, r7, #16
 80078c6:	eb07 0e06 	add.w	lr, r7, r6
 80078ca:	464e      	mov	r6, r9
 80078cc:	9712      	str	r7, [sp, #72]	; 0x48
 80078ce:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80078d0:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
 80078d4:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 80078d8:	9702      	str	r7, [sp, #8]
 80078da:	f852 900c 	ldr.w	r9, [r2, ip]
 80078de:	f8d2 8000 	ldr.w	r8, [r2]
 80078e2:	ea4f 4a19 	mov.w	sl, r9, lsr #16
 80078e6:	fa1f fb88 	uxth.w	fp, r8
 80078ea:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
 80078ee:	ea4b 4909 	orr.w	r9, fp, r9, lsl #16
 80078f2:	ea4a 4818 	orr.w	r8, sl, r8, lsr #16
 80078f6:	fa3f fa89 	uxtb16	sl, r9
 80078fa:	fada fa06 	ssub16	sl, sl, r6
 80078fe:	f853 7c10 	ldr.w	r7, [r3, #-16]
 8007902:	fb27 550a 	smlad	r5, r7, sl, r5
 8007906:	ea4f 2939 	mov.w	r9, r9, ror #8
 800790a:	fa3f f989 	uxtb16	r9, r9
 800790e:	fad9 f906 	ssub16	r9, r9, r6
 8007912:	f853 7c0c 	ldr.w	r7, [r3, #-12]
 8007916:	fb27 4409 	smlad	r4, r7, r9, r4
 800791a:	fa3f f988 	uxtb16	r9, r8
 800791e:	fad9 f906 	ssub16	r9, r9, r6
 8007922:	f853 7c08 	ldr.w	r7, [r3, #-8]
 8007926:	fb27 0009 	smlad	r0, r7, r9, r0
 800792a:	ea4f 2838 	mov.w	r8, r8, ror #8
 800792e:	fa3f f888 	uxtb16	r8, r8
 8007932:	fad8 f806 	ssub16	r8, r8, r6
 8007936:	f853 7c04 	ldr.w	r7, [r3, #-4]
 800793a:	fb27 1108 	smlad	r1, r7, r8, r1
 800793e:	3310      	adds	r3, #16
 8007940:	9f02      	ldr	r7, [sp, #8]
 8007942:	459e      	cmp	lr, r3
 8007944:	443a      	add	r2, r7
 8007946:	d1c8      	bne.n	80078da <st_uaua8_convolve_dw+0x6d6>
 8007948:	46b1      	mov	r9, r6
 800794a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800794c:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800794e:	9a06      	ldr	r2, [sp, #24]
 8007950:	441f      	add	r7, r3
 8007952:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007954:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
 8007958:	189a      	adds	r2, r3, r2
 800795a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800795c:	b1f3      	cbz	r3, 800799c <st_uaua8_convolve_dw+0x798>
 800795e:	6813      	ldr	r3, [r2, #0]
 8007960:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8007962:	f8b7 8000 	ldrh.w	r8, [r7]
 8007966:	b2da      	uxtb	r2, r3
 8007968:	eba2 0a06 	sub.w	sl, r2, r6
 800796c:	f3c3 2e07 	ubfx	lr, r3, #8, #8
 8007970:	fb18 550a 	smlabb	r5, r8, sl, r5
 8007974:	f8b7 8002 	ldrh.w	r8, [r7, #2]
 8007978:	ebae 0e06 	sub.w	lr, lr, r6
 800797c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8007980:	fb18 440e 	smlabb	r4, r8, lr, r4
 8007984:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 8007988:	f8b7 e006 	ldrh.w	lr, [r7, #6]
 800798c:	1b92      	subs	r2, r2, r6
 800798e:	ebc6 6313 	rsb	r3, r6, r3, lsr #24
 8007992:	fb18 0002 	smlabb	r0, r8, r2, r0
 8007996:	fb1e 1103 	smlabb	r1, lr, r3, r1
 800799a:	3708      	adds	r7, #8
 800799c:	9b07      	ldr	r3, [sp, #28]
 800799e:	9a08      	ldr	r2, [sp, #32]
 80079a0:	3304      	adds	r3, #4
 80079a2:	2a00      	cmp	r2, #0
 80079a4:	9307      	str	r3, [sp, #28]
 80079a6:	dd6a      	ble.n	8007a7e <st_uaua8_convolve_dw+0x87a>
 80079a8:	9e04      	ldr	r6, [sp, #16]
 80079aa:	006d      	lsls	r5, r5, #1
 80079ac:	46b6      	mov	lr, r6
 80079ae:	0064      	lsls	r4, r4, #1
 80079b0:	9e03      	ldr	r6, [sp, #12]
 80079b2:	0040      	lsls	r0, r0, #1
 80079b4:	fb55 650e 	smmla	r5, r5, lr, r6
 80079b8:	fb54 640e 	smmla	r4, r4, lr, r6
 80079bc:	4115      	asrs	r5, r2
 80079be:	0049      	lsls	r1, r1, #1
 80079c0:	fb50 600e 	smmla	r0, r0, lr, r6
 80079c4:	fb51 610e 	smmla	r1, r1, lr, r6
 80079c8:	f385 0508 	usat	r5, #8, r5
 80079cc:	f803 5c04 	strb.w	r5, [r3, #-4]
 80079d0:	9d08      	ldr	r5, [sp, #32]
 80079d2:	412c      	asrs	r4, r5
 80079d4:	f384 0408 	usat	r4, #8, r4
 80079d8:	f803 4c03 	strb.w	r4, [r3, #-3]
 80079dc:	4128      	asrs	r0, r5
 80079de:	f380 0008 	usat	r0, #8, r0
 80079e2:	f803 0c02 	strb.w	r0, [r3, #-2]
 80079e6:	4129      	asrs	r1, r5
 80079e8:	f381 0108 	usat	r1, #8, r1
 80079ec:	f803 1c01 	strb.w	r1, [r3, #-1]
 80079f0:	9b06      	ldr	r3, [sp, #24]
 80079f2:	f10c 0c10 	add.w	ip, ip, #16
 80079f6:	3304      	adds	r3, #4
 80079f8:	9306      	str	r3, [sp, #24]
 80079fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079fc:	4563      	cmp	r3, ip
 80079fe:	f47f af57 	bne.w	80078b0 <st_uaua8_convolve_dw+0x6ac>
 8007a02:	e9dd e62a 	ldrd	lr, r6, [sp, #168]	; 0xa8
 8007a06:	9b70      	ldr	r3, [sp, #448]	; 0x1c0
 8007a08:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8007a0a:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 8007a0e:	4413      	add	r3, r2
 8007a10:	9370      	str	r3, [sp, #448]	; 0x1c0
 8007a12:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	f43f ae0b 	beq.w	8007630 <st_uaua8_convolve_dw+0x42c>
 8007a1a:	eb03 0806 	add.w	r8, r3, r6
 8007a1e:	9b08      	ldr	r3, [sp, #32]
 8007a20:	f8dd c1c0 	ldr.w	ip, [sp, #448]	; 0x1c0
 8007a24:	469a      	mov	sl, r3
 8007a26:	f8bd 5014 	ldrh.w	r5, [sp, #20]
 8007a2a:	fa1f f888 	uxth.w	r8, r8
 8007a2e:	f1c3 0901 	rsb	r9, r3, #1
 8007a32:	9a73      	ldr	r2, [sp, #460]	; 0x1cc
 8007a34:	1c73      	adds	r3, r6, #1
 8007a36:	1991      	adds	r1, r2, r6
 8007a38:	b29e      	uxth	r6, r3
 8007a3a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007a3c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007a40:	b153      	cbz	r3, 8007a58 <st_uaua8_convolve_dw+0x854>
 8007a42:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a44:	18fc      	adds	r4, r7, r3
 8007a46:	780b      	ldrb	r3, [r1, #0]
 8007a48:	f837 0b02 	ldrh.w	r0, [r7], #2
 8007a4c:	1b5b      	subs	r3, r3, r5
 8007a4e:	42a7      	cmp	r7, r4
 8007a50:	4459      	add	r1, fp
 8007a52:	fb10 2203 	smlabb	r2, r0, r3, r2
 8007a56:	d1f6      	bne.n	8007a46 <st_uaua8_convolve_dw+0x842>
 8007a58:	f1ba 0f00 	cmp.w	sl, #0
 8007a5c:	dd40      	ble.n	8007ae0 <st_uaua8_convolve_dw+0x8dc>
 8007a5e:	0053      	lsls	r3, r2, #1
 8007a60:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
 8007a64:	fb53 1302 	smmla	r3, r3, r2, r1
 8007a68:	fa43 f30a 	asr.w	r3, r3, sl
 8007a6c:	f383 0308 	usat	r3, #8, r3
 8007a70:	f88c 3000 	strb.w	r3, [ip]
 8007a74:	4546      	cmp	r6, r8
 8007a76:	f10c 0c01 	add.w	ip, ip, #1
 8007a7a:	d1da      	bne.n	8007a32 <st_uaua8_convolve_dw+0x82e>
 8007a7c:	e5d1      	b.n	8007622 <st_uaua8_convolve_dw+0x41e>
 8007a7e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007a80:	fa05 f302 	lsl.w	r3, r5, r2
 8007a84:	f303 031f 	ssat	r3, #32, r3
 8007a88:	9e04      	ldr	r6, [sp, #16]
 8007a8a:	fb53 f316 	smmulr	r3, r3, r6
 8007a8e:	4615      	mov	r5, r2
 8007a90:	fa04 f202 	lsl.w	r2, r4, r2
 8007a94:	f302 021f 	ssat	r2, #32, r2
 8007a98:	fb52 f216 	smmulr	r2, r2, r6
 8007a9c:	40a8      	lsls	r0, r5
 8007a9e:	f300 001f 	ssat	r0, #32, r0
 8007aa2:	fb50 f016 	smmulr	r0, r0, r6
 8007aa6:	40a9      	lsls	r1, r5
 8007aa8:	f301 011f 	ssat	r1, #32, r1
 8007aac:	fb51 f116 	smmulr	r1, r1, r6
 8007ab0:	9c03      	ldr	r4, [sp, #12]
 8007ab2:	4423      	add	r3, r4
 8007ab4:	f383 0308 	usat	r3, #8, r3
 8007ab8:	9d07      	ldr	r5, [sp, #28]
 8007aba:	4422      	add	r2, r4
 8007abc:	f805 3c04 	strb.w	r3, [r5, #-4]
 8007ac0:	4623      	mov	r3, r4
 8007ac2:	f382 0208 	usat	r2, #8, r2
 8007ac6:	f805 2c03 	strb.w	r2, [r5, #-3]
 8007aca:	4418      	add	r0, r3
 8007acc:	f380 0008 	usat	r0, #8, r0
 8007ad0:	f805 0c02 	strb.w	r0, [r5, #-2]
 8007ad4:	4419      	add	r1, r3
 8007ad6:	f381 0108 	usat	r1, #8, r1
 8007ada:	f805 1c01 	strb.w	r1, [r5, #-1]
 8007ade:	e787      	b.n	80079f0 <st_uaua8_convolve_dw+0x7ec>
 8007ae0:	fa02 f309 	lsl.w	r3, r2, r9
 8007ae4:	f303 031f 	ssat	r3, #32, r3
 8007ae8:	9a04      	ldr	r2, [sp, #16]
 8007aea:	fb53 f312 	smmulr	r3, r3, r2
 8007aee:	9a03      	ldr	r2, [sp, #12]
 8007af0:	4413      	add	r3, r2
 8007af2:	f383 0308 	usat	r3, #8, r3
 8007af6:	f88c 3000 	strb.w	r3, [ip]
 8007afa:	e7bb      	b.n	8007a74 <st_uaua8_convolve_dw+0x870>
 8007afc:	4645      	mov	r5, r8
 8007afe:	e649      	b.n	8007794 <st_uaua8_convolve_dw+0x590>
 8007b00:	2101      	movs	r1, #1
 8007b02:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8007b04:	f8ad 1136 	strh.w	r1, [sp, #310]	; 0x136
 8007b08:	3b01      	subs	r3, #1
 8007b0a:	9346      	str	r3, [sp, #280]	; 0x118
 8007b0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	f47f ac5c 	bne.w	80073cc <st_uaua8_convolve_dw+0x1c8>
 8007b14:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007b16:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007b18:	4283      	cmp	r3, r0
 8007b1a:	f6bf aca3 	bge.w	8007464 <st_uaua8_convolve_dw+0x260>
 8007b1e:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8007b20:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8007b22:	461e      	mov	r6, r3
 8007b24:	fb02 0201 	mla	r2, r2, r1, r0
 8007b28:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8007b2a:	9c73      	ldr	r4, [sp, #460]	; 0x1cc
 8007b2c:	1a55      	subs	r5, r2, r1
 8007b2e:	461a      	mov	r2, r3
 8007b30:	f9bd 905c 	ldrsh.w	r9, [sp, #92]	; 0x5c
 8007b34:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007b38:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8007b3c:	45a9      	cmp	r9, r5
 8007b3e:	da1b      	bge.n	8007b78 <st_uaua8_convolve_dw+0x974>
 8007b40:	fb0a f302 	mul.w	r3, sl, r2
 8007b44:	2e00      	cmp	r6, #0
 8007b46:	9302      	str	r3, [sp, #8]
 8007b48:	f2c0 80ce 	blt.w	8007ce8 <st_uaua8_convolve_dw+0xae4>
 8007b4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b4e:	464f      	mov	r7, r9
 8007b50:	4293      	cmp	r3, r2
 8007b52:	f340 80be 	ble.w	8007cd2 <st_uaua8_convolve_dw+0xace>
 8007b56:	464a      	mov	r2, r9
 8007b58:	2f00      	cmp	r7, #0
 8007b5a:	db02      	blt.n	8007b62 <st_uaua8_convolve_dw+0x95e>
 8007b5c:	4592      	cmp	sl, r2
 8007b5e:	f300 80cf 	bgt.w	8007d00 <st_uaua8_convolve_dw+0xafc>
 8007b62:	465a      	mov	r2, fp
 8007b64:	4621      	mov	r1, r4
 8007b66:	4640      	mov	r0, r8
 8007b68:	f000 fc66 	bl	8008438 <st_uint8_fill>
 8007b6c:	3701      	adds	r7, #1
 8007b6e:	b23f      	sxth	r7, r7
 8007b70:	42bd      	cmp	r5, r7
 8007b72:	445c      	add	r4, fp
 8007b74:	463a      	mov	r2, r7
 8007b76:	dcef      	bgt.n	8007b58 <st_uaua8_convolve_dw+0x954>
 8007b78:	3601      	adds	r6, #1
 8007b7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b7c:	b236      	sxth	r6, r6
 8007b7e:	429e      	cmp	r6, r3
 8007b80:	4632      	mov	r2, r6
 8007b82:	dbdb      	blt.n	8007b3c <st_uaua8_convolve_dw+0x938>
 8007b84:	e46e      	b.n	8007464 <st_uaua8_convolve_dw+0x260>
 8007b86:	4283      	cmp	r3, r0
 8007b88:	f6bf ac6c 	bge.w	8007464 <st_uaua8_convolve_dw+0x260>
 8007b8c:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8007b8e:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8007b90:	f9bd a05c 	ldrsh.w	sl, [sp, #92]	; 0x5c
 8007b94:	fb02 0201 	mla	r2, r2, r1, r0
 8007b98:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8007b9a:	1a55      	subs	r5, r2, r1
 8007b9c:	45aa      	cmp	sl, r5
 8007b9e:	f6bf ac61 	bge.w	8007464 <st_uaua8_convolve_dw+0x260>
 8007ba2:	461e      	mov	r6, r3
 8007ba4:	461f      	mov	r7, r3
 8007ba6:	f8cd a018 	str.w	sl, [sp, #24]
 8007baa:	f8dd 91cc 	ldr.w	r9, [sp, #460]	; 0x1cc
 8007bae:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8007bb2:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8007bb6:	9a06      	ldr	r2, [sp, #24]
 8007bb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bba:	4614      	mov	r4, r2
 8007bbc:	fb07 f303 	mul.w	r3, r7, r3
 8007bc0:	9302      	str	r3, [sp, #8]
 8007bc2:	2e00      	cmp	r6, #0
 8007bc4:	db06      	blt.n	8007bd4 <st_uaua8_convolve_dw+0x9d0>
 8007bc6:	45ba      	cmp	sl, r7
 8007bc8:	dd04      	ble.n	8007bd4 <st_uaua8_convolve_dw+0x9d0>
 8007bca:	2c00      	cmp	r4, #0
 8007bcc:	db02      	blt.n	8007bd4 <st_uaua8_convolve_dw+0x9d0>
 8007bce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	dc11      	bgt.n	8007bf8 <st_uaua8_convolve_dw+0x9f4>
 8007bd4:	465a      	mov	r2, fp
 8007bd6:	4649      	mov	r1, r9
 8007bd8:	4640      	mov	r0, r8
 8007bda:	f000 fc2d 	bl	8008438 <st_uint8_fill>
 8007bde:	3401      	adds	r4, #1
 8007be0:	b224      	sxth	r4, r4
 8007be2:	42ac      	cmp	r4, r5
 8007be4:	44d9      	add	r9, fp
 8007be6:	4622      	mov	r2, r4
 8007be8:	dbeb      	blt.n	8007bc2 <st_uaua8_convolve_dw+0x9be>
 8007bea:	3601      	adds	r6, #1
 8007bec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007bee:	b236      	sxth	r6, r6
 8007bf0:	429e      	cmp	r6, r3
 8007bf2:	4637      	mov	r7, r6
 8007bf4:	dbdf      	blt.n	8007bb6 <st_uaua8_convolve_dw+0x9b2>
 8007bf6:	e435      	b.n	8007464 <st_uaua8_convolve_dw+0x260>
 8007bf8:	9b02      	ldr	r3, [sp, #8]
 8007bfa:	981c      	ldr	r0, [sp, #112]	; 0x70
 8007bfc:	441a      	add	r2, r3
 8007bfe:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007c00:	fb03 0102 	mla	r1, r3, r2, r0
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d0ea      	beq.n	8007bde <st_uaua8_convolve_dw+0x9da>
 8007c08:	4648      	mov	r0, r9
 8007c0a:	eb01 0c03 	add.w	ip, r1, r3
 8007c0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c12:	021b      	lsls	r3, r3, #8
 8007c14:	4561      	cmp	r1, ip
 8007c16:	ea4f 2233 	mov.w	r2, r3, ror #8
 8007c1a:	fa33 f382 	uxtab16	r3, r3, r2
 8007c1e:	f820 3b02 	strh.w	r3, [r0], #2
 8007c22:	d1f4      	bne.n	8007c0e <st_uaua8_convolve_dw+0xa0a>
 8007c24:	e7db      	b.n	8007bde <st_uaua8_convolve_dw+0x9da>
 8007c26:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007c28:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007c2a:	4283      	cmp	r3, r0
 8007c2c:	f6bf ac1a 	bge.w	8007464 <st_uaua8_convolve_dw+0x260>
 8007c30:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8007c32:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8007c34:	f9bd a05c 	ldrsh.w	sl, [sp, #92]	; 0x5c
 8007c38:	fb02 0201 	mla	r2, r2, r1, r0
 8007c3c:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8007c3e:	1a55      	subs	r5, r2, r1
 8007c40:	45aa      	cmp	sl, r5
 8007c42:	f6bf ac0f 	bge.w	8007464 <st_uaua8_convolve_dw+0x260>
 8007c46:	461e      	mov	r6, r3
 8007c48:	461f      	mov	r7, r3
 8007c4a:	f8cd a018 	str.w	sl, [sp, #24]
 8007c4e:	f8dd 91cc 	ldr.w	r9, [sp, #460]	; 0x1cc
 8007c52:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8007c56:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8007c5a:	9a06      	ldr	r2, [sp, #24]
 8007c5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c5e:	4614      	mov	r4, r2
 8007c60:	fb07 f303 	mul.w	r3, r7, r3
 8007c64:	9302      	str	r3, [sp, #8]
 8007c66:	2e00      	cmp	r6, #0
 8007c68:	db06      	blt.n	8007c78 <st_uaua8_convolve_dw+0xa74>
 8007c6a:	45ba      	cmp	sl, r7
 8007c6c:	dd04      	ble.n	8007c78 <st_uaua8_convolve_dw+0xa74>
 8007c6e:	2c00      	cmp	r4, #0
 8007c70:	db02      	blt.n	8007c78 <st_uaua8_convolve_dw+0xa74>
 8007c72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c74:	4293      	cmp	r3, r2
 8007c76:	dc12      	bgt.n	8007c9e <st_uaua8_convolve_dw+0xa9a>
 8007c78:	465a      	mov	r2, fp
 8007c7a:	4649      	mov	r1, r9
 8007c7c:	4640      	mov	r0, r8
 8007c7e:	f000 fbdb 	bl	8008438 <st_uint8_fill>
 8007c82:	3401      	adds	r4, #1
 8007c84:	b224      	sxth	r4, r4
 8007c86:	42ac      	cmp	r4, r5
 8007c88:	44d9      	add	r9, fp
 8007c8a:	4622      	mov	r2, r4
 8007c8c:	dbeb      	blt.n	8007c66 <st_uaua8_convolve_dw+0xa62>
 8007c8e:	3601      	adds	r6, #1
 8007c90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c92:	b236      	sxth	r6, r6
 8007c94:	429e      	cmp	r6, r3
 8007c96:	4637      	mov	r7, r6
 8007c98:	dbdf      	blt.n	8007c5a <st_uaua8_convolve_dw+0xa56>
 8007c9a:	f7ff bbe3 	b.w	8007464 <st_uaua8_convolve_dw+0x260>
 8007c9e:	9b02      	ldr	r3, [sp, #8]
 8007ca0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007ca2:	441a      	add	r2, r3
 8007ca4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007ca6:	fb03 1202 	mla	r2, r3, r2, r1
 8007caa:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d0e8      	beq.n	8007c82 <st_uaua8_convolve_dw+0xa7e>
 8007cb0:	4649      	mov	r1, r9
 8007cb2:	18d0      	adds	r0, r2, r3
 8007cb4:	f812 cb01 	ldrb.w	ip, [r2], #1
 8007cb8:	ea4f 630c 	mov.w	r3, ip, lsl #24
 8007cbc:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8007cc0:	4282      	cmp	r2, r0
 8007cc2:	ea4f 2c33 	mov.w	ip, r3, ror #8
 8007cc6:	fa33 f38c 	uxtab16	r3, r3, ip
 8007cca:	f841 3b04 	str.w	r3, [r1], #4
 8007cce:	d1f1      	bne.n	8007cb4 <st_uaua8_convolve_dw+0xab0>
 8007cd0:	e7d7      	b.n	8007c82 <st_uaua8_convolve_dw+0xa7e>
 8007cd2:	3701      	adds	r7, #1
 8007cd4:	4621      	mov	r1, r4
 8007cd6:	465a      	mov	r2, fp
 8007cd8:	4640      	mov	r0, r8
 8007cda:	b23f      	sxth	r7, r7
 8007cdc:	f000 fbac 	bl	8008438 <st_uint8_fill>
 8007ce0:	42bd      	cmp	r5, r7
 8007ce2:	445c      	add	r4, fp
 8007ce4:	dcf5      	bgt.n	8007cd2 <st_uaua8_convolve_dw+0xace>
 8007ce6:	e747      	b.n	8007b78 <st_uaua8_convolve_dw+0x974>
 8007ce8:	464f      	mov	r7, r9
 8007cea:	3701      	adds	r7, #1
 8007cec:	4621      	mov	r1, r4
 8007cee:	465a      	mov	r2, fp
 8007cf0:	4640      	mov	r0, r8
 8007cf2:	b23f      	sxth	r7, r7
 8007cf4:	f000 fba0 	bl	8008438 <st_uint8_fill>
 8007cf8:	42af      	cmp	r7, r5
 8007cfa:	445c      	add	r4, fp
 8007cfc:	dbf5      	blt.n	8007cea <st_uaua8_convolve_dw+0xae6>
 8007cfe:	e73b      	b.n	8007b78 <st_uaua8_convolve_dw+0x974>
 8007d00:	9b02      	ldr	r3, [sp, #8]
 8007d02:	981c      	ldr	r0, [sp, #112]	; 0x70
 8007d04:	441a      	add	r2, r3
 8007d06:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007d08:	4621      	mov	r1, r4
 8007d0a:	fb03 0002 	mla	r0, r3, r2, r0
 8007d0e:	461a      	mov	r2, r3
 8007d10:	f001 febe 	bl	8009a90 <arm_copy_q7>
 8007d14:	e72a      	b.n	8007b6c <st_uaua8_convolve_dw+0x968>
 8007d16:	461e      	mov	r6, r3
 8007d18:	f8dd e1a8 	ldr.w	lr, [sp, #424]	; 0x1a8
 8007d1c:	9f27      	ldr	r7, [sp, #156]	; 0x9c
 8007d1e:	e678      	b.n	8007a12 <st_uaua8_convolve_dw+0x80e>
 8007d20:	461d      	mov	r5, r3
 8007d22:	f8dd c1a8 	ldr.w	ip, [sp, #424]	; 0x1a8
 8007d26:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8007d28:	e44a      	b.n	80075c0 <st_uaua8_convolve_dw+0x3bc>
 8007d2a:	bf00      	nop

08007d2c <st_uaua8_fully_connected>:
 8007d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d30:	b097      	sub	sp, #92	; 0x5c
 8007d32:	e9dd 5420 	ldrd	r5, r4, [sp, #128]	; 0x80
 8007d36:	f9b4 6000 	ldrsh.w	r6, [r4]
 8007d3a:	9203      	str	r2, [sp, #12]
 8007d3c:	2e00      	cmp	r6, #0
 8007d3e:	bfc8      	it	gt
 8007d40:	2201      	movgt	r2, #1
 8007d42:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8007d44:	9313      	str	r3, [sp, #76]	; 0x4c
 8007d46:	682b      	ldr	r3, [r5, #0]
 8007d48:	bfc8      	it	gt
 8007d4a:	40b2      	lslgt	r2, r6
 8007d4c:	9307      	str	r3, [sp, #28]
 8007d4e:	7823      	ldrb	r3, [r4, #0]
 8007d50:	4688      	mov	r8, r1
 8007d52:	9312      	str	r3, [sp, #72]	; 0x48
 8007d54:	f89d 3090 	ldrb.w	r3, [sp, #144]	; 0x90
 8007d58:	f89d 1088 	ldrb.w	r1, [sp, #136]	; 0x88
 8007d5c:	bfc4      	itt	gt
 8007d5e:	40b3      	lslgt	r3, r6
 8007d60:	eb03 0352 	addgt.w	r3, r3, r2, lsr #1
 8007d64:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8007d66:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8007d68:	9308      	str	r3, [sp, #32]
 8007d6a:	9605      	str	r6, [sp, #20]
 8007d6c:	9004      	str	r0, [sp, #16]
 8007d6e:	ea41 4301 	orr.w	r3, r1, r1, lsl #16
 8007d72:	ea45 4705 	orr.w	r7, r5, r5, lsl #16
 8007d76:	2a00      	cmp	r2, #0
 8007d78:	f000 81ff 	beq.w	800817a <st_uaua8_fully_connected+0x44e>
 8007d7c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007d7e:	9e03      	ldr	r6, [sp, #12]
 8007d80:	0854      	lsrs	r4, r2, #1
 8007d82:	9100      	str	r1, [sp, #0]
 8007d84:	9804      	ldr	r0, [sp, #16]
 8007d86:	4632      	mov	r2, r6
 8007d88:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8007d8a:	f000 fb73 	bl	8008474 <st_uint8_reordered_no_shift_zero>
 8007d8e:	2c00      	cmp	r4, #0
 8007d90:	f000 817b 	beq.w	800808a <st_uaua8_fully_connected+0x35e>
 8007d94:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007d96:	3c01      	subs	r4, #1
 8007d98:	9306      	str	r3, [sp, #24]
 8007d9a:	f1a6 0310 	sub.w	r3, r6, #16
 8007d9e:	091b      	lsrs	r3, r3, #4
 8007da0:	3301      	adds	r3, #1
 8007da2:	b2a0      	uxth	r0, r4
 8007da4:	011c      	lsls	r4, r3, #4
 8007da6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8007da8:	940a      	str	r4, [sp, #40]	; 0x28
 8007daa:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8007dac:	3210      	adds	r2, #16
 8007dae:	eb04 1343 	add.w	r3, r4, r3, lsl #5
 8007db2:	9310      	str	r3, [sp, #64]	; 0x40
 8007db4:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
 8007db8:	930e      	str	r3, [sp, #56]	; 0x38
 8007dba:	1ef3      	subs	r3, r6, #3
 8007dbc:	930f      	str	r3, [sp, #60]	; 0x3c
 8007dbe:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8007dc0:	9015      	str	r0, [sp, #84]	; 0x54
 8007dc2:	3308      	adds	r3, #8
 8007dc4:	9304      	str	r3, [sp, #16]
 8007dc6:	1f33      	subs	r3, r6, #4
 8007dc8:	9311      	str	r3, [sp, #68]	; 0x44
 8007dca:	b2ab      	uxth	r3, r5
 8007dcc:	9309      	str	r3, [sp, #36]	; 0x24
 8007dce:	9b05      	ldr	r3, [sp, #20]
 8007dd0:	f1c3 0301 	rsb	r3, r3, #1
 8007dd4:	9314      	str	r3, [sp, #80]	; 0x50
 8007dd6:	9b04      	ldr	r3, [sp, #16]
 8007dd8:	9a03      	ldr	r2, [sp, #12]
 8007dda:	f853 0c08 	ldr.w	r0, [r3, #-8]
 8007dde:	eb08 0102 	add.w	r1, r8, r2
 8007de2:	2a0f      	cmp	r2, #15
 8007de4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8007de8:	9102      	str	r1, [sp, #8]
 8007dea:	f340 8295 	ble.w	8008318 <st_uaua8_fully_connected+0x5ec>
 8007dee:	468e      	mov	lr, r1
 8007df0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007df2:	f8dd c09c 	ldr.w	ip, [sp, #156]	; 0x9c
 8007df6:	eb08 0902 	add.w	r9, r8, r2
 8007dfa:	f8d8 5000 	ldr.w	r5, [r8]
 8007dfe:	f8de 1000 	ldr.w	r1, [lr]
 8007e02:	ea4f 2435 	mov.w	r4, r5, ror #8
 8007e06:	f8dc 2000 	ldr.w	r2, [ip]
 8007e0a:	fa3f f484 	uxtb16	r4, r4
 8007e0e:	fad4 f407 	ssub16	r4, r4, r7
 8007e12:	fa3f f585 	uxtb16	r5, r5
 8007e16:	fad5 f507 	ssub16	r5, r5, r7
 8007e1a:	ea4f 2b31 	mov.w	fp, r1, ror #8
 8007e1e:	fa3f fb8b 	uxtb16	fp, fp
 8007e22:	fadb fb07 	ssub16	fp, fp, r7
 8007e26:	fa3f f181 	uxtb16	r1, r1
 8007e2a:	fad1 f107 	ssub16	r1, r1, r7
 8007e2e:	fb22 0005 	smlad	r0, r2, r5, r0
 8007e32:	fb22 3101 	smlad	r1, r2, r1, r3
 8007e36:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8007e3a:	fb22 0404 	smlad	r4, r2, r4, r0
 8007e3e:	fb22 110b 	smlad	r1, r2, fp, r1
 8007e42:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007e46:	f8de 2004 	ldr.w	r2, [lr, #4]
 8007e4a:	ea4f 2530 	mov.w	r5, r0, ror #8
 8007e4e:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8007e52:	fa3f f585 	uxtb16	r5, r5
 8007e56:	fad5 f507 	ssub16	r5, r5, r7
 8007e5a:	fa3f f080 	uxtb16	r0, r0
 8007e5e:	fad0 f007 	ssub16	r0, r0, r7
 8007e62:	ea4f 2a32 	mov.w	sl, r2, ror #8
 8007e66:	fa3f fa8a 	uxtb16	sl, sl
 8007e6a:	fada fa07 	ssub16	sl, sl, r7
 8007e6e:	fa3f f282 	uxtb16	r2, r2
 8007e72:	fad2 f207 	ssub16	r2, r2, r7
 8007e76:	fb23 4000 	smlad	r0, r3, r0, r4
 8007e7a:	fb23 1202 	smlad	r2, r3, r2, r1
 8007e7e:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8007e82:	fb23 0505 	smlad	r5, r3, r5, r0
 8007e86:	fb23 220a 	smlad	r2, r3, sl, r2
 8007e8a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8007e8e:	f8de 3008 	ldr.w	r3, [lr, #8]
 8007e92:	ea4f 2631 	mov.w	r6, r1, ror #8
 8007e96:	f8dc b010 	ldr.w	fp, [ip, #16]
 8007e9a:	fa3f f686 	uxtb16	r6, r6
 8007e9e:	fad6 f607 	ssub16	r6, r6, r7
 8007ea2:	fa3f f181 	uxtb16	r1, r1
 8007ea6:	fad1 f107 	ssub16	r1, r1, r7
 8007eaa:	ea4f 2a33 	mov.w	sl, r3, ror #8
 8007eae:	fa3f fa8a 	uxtb16	sl, sl
 8007eb2:	fada fa07 	ssub16	sl, sl, r7
 8007eb6:	fa3f f383 	uxtb16	r3, r3
 8007eba:	fad3 f307 	ssub16	r3, r3, r7
 8007ebe:	fb2b 5501 	smlad	r5, fp, r1, r5
 8007ec2:	fb2b 2303 	smlad	r3, fp, r3, r2
 8007ec6:	f8dc 2014 	ldr.w	r2, [ip, #20]
 8007eca:	fb22 5606 	smlad	r6, r2, r6, r5
 8007ece:	fb22 330a 	smlad	r3, r2, sl, r3
 8007ed2:	f8d8 400c 	ldr.w	r4, [r8, #12]
 8007ed6:	f8de 200c 	ldr.w	r2, [lr, #12]
 8007eda:	ea4f 2034 	mov.w	r0, r4, ror #8
 8007ede:	f108 0810 	add.w	r8, r8, #16
 8007ee2:	f10e 0e10 	add.w	lr, lr, #16
 8007ee6:	fa3f f080 	uxtb16	r0, r0
 8007eea:	f8dc b018 	ldr.w	fp, [ip, #24]
 8007eee:	fad0 f007 	ssub16	r0, r0, r7
 8007ef2:	fa3f f484 	uxtb16	r4, r4
 8007ef6:	fad4 f407 	ssub16	r4, r4, r7
 8007efa:	ea4f 2a32 	mov.w	sl, r2, ror #8
 8007efe:	fa3f fa8a 	uxtb16	sl, sl
 8007f02:	fada fa07 	ssub16	sl, sl, r7
 8007f06:	fa3f f282 	uxtb16	r2, r2
 8007f0a:	fad2 f207 	ssub16	r2, r2, r7
 8007f0e:	fb2b 6604 	smlad	r6, fp, r4, r6
 8007f12:	fb2b 3202 	smlad	r2, fp, r2, r3
 8007f16:	f8dc 101c 	ldr.w	r1, [ip, #28]
 8007f1a:	f10c 0c20 	add.w	ip, ip, #32
 8007f1e:	fb21 6000 	smlad	r0, r1, r0, r6
 8007f22:	fb21 230a 	smlad	r3, r1, sl, r2
 8007f26:	45c8      	cmp	r8, r9
 8007f28:	f47f af67 	bne.w	8007dfa <st_uaua8_fully_connected+0xce>
 8007f2c:	9902      	ldr	r1, [sp, #8]
 8007f2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f30:	460c      	mov	r4, r1
 8007f32:	4691      	mov	r9, r2
 8007f34:	4414      	add	r4, r2
 8007f36:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8007f3a:	9402      	str	r4, [sp, #8]
 8007f3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007f3e:	4591      	cmp	r9, r2
 8007f40:	da41      	bge.n	8007fc6 <st_uaua8_fully_connected+0x29a>
 8007f42:	46dc      	mov	ip, fp
 8007f44:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007f46:	f8dd e008 	ldr.w	lr, [sp, #8]
 8007f4a:	eba2 0209 	sub.w	r2, r2, r9
 8007f4e:	0892      	lsrs	r2, r2, #2
 8007f50:	920d      	str	r2, [sp, #52]	; 0x34
 8007f52:	3201      	adds	r2, #1
 8007f54:	920c      	str	r2, [sp, #48]	; 0x30
 8007f56:	0092      	lsls	r2, r2, #2
 8007f58:	920b      	str	r2, [sp, #44]	; 0x2c
 8007f5a:	eb08 0a02 	add.w	sl, r8, r2
 8007f5e:	f858 1b04 	ldr.w	r1, [r8], #4
 8007f62:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007f66:	ea4f 2531 	mov.w	r5, r1, ror #8
 8007f6a:	f8dc 6000 	ldr.w	r6, [ip]
 8007f6e:	fa3f f585 	uxtb16	r5, r5
 8007f72:	fad5 f507 	ssub16	r5, r5, r7
 8007f76:	fa3f f181 	uxtb16	r1, r1
 8007f7a:	fad1 f107 	ssub16	r1, r1, r7
 8007f7e:	ea4f 2432 	mov.w	r4, r2, ror #8
 8007f82:	fa3f f484 	uxtb16	r4, r4
 8007f86:	fad4 f407 	ssub16	r4, r4, r7
 8007f8a:	fa3f f282 	uxtb16	r2, r2
 8007f8e:	fad2 f207 	ssub16	r2, r2, r7
 8007f92:	fb26 0001 	smlad	r0, r6, r1, r0
 8007f96:	fb26 3302 	smlad	r3, r6, r2, r3
 8007f9a:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8007f9e:	f10c 0c08 	add.w	ip, ip, #8
 8007fa2:	fb22 0005 	smlad	r0, r2, r5, r0
 8007fa6:	fb22 3304 	smlad	r3, r2, r4, r3
 8007faa:	45d0      	cmp	r8, sl
 8007fac:	d1d7      	bne.n	8007f5e <st_uaua8_fully_connected+0x232>
 8007fae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007fb0:	f109 0904 	add.w	r9, r9, #4
 8007fb4:	eb09 0982 	add.w	r9, r9, r2, lsl #2
 8007fb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007fba:	9a02      	ldr	r2, [sp, #8]
 8007fbc:	440a      	add	r2, r1
 8007fbe:	9202      	str	r2, [sp, #8]
 8007fc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007fc2:	eb0b 0bc2 	add.w	fp, fp, r2, lsl #3
 8007fc6:	9d03      	ldr	r5, [sp, #12]
 8007fc8:	454d      	cmp	r5, r9
 8007fca:	dd31      	ble.n	8008030 <st_uaua8_fully_connected+0x304>
 8007fcc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007fce:	f898 2000 	ldrb.w	r2, [r8]
 8007fd2:	9902      	ldr	r1, [sp, #8]
 8007fd4:	f9bb 4000 	ldrsh.w	r4, [fp]
 8007fd8:	1b92      	subs	r2, r2, r6
 8007fda:	7809      	ldrb	r1, [r1, #0]
 8007fdc:	fb14 0002 	smlabb	r0, r4, r2, r0
 8007fe0:	f109 0201 	add.w	r2, r9, #1
 8007fe4:	1b89      	subs	r1, r1, r6
 8007fe6:	4295      	cmp	r5, r2
 8007fe8:	fb14 3301 	smlabb	r3, r4, r1, r3
 8007fec:	f340 80c2 	ble.w	8008174 <st_uaua8_fully_connected+0x448>
 8007ff0:	9a02      	ldr	r2, [sp, #8]
 8007ff2:	f9bb 4002 	ldrsh.w	r4, [fp, #2]
 8007ff6:	7852      	ldrb	r2, [r2, #1]
 8007ff8:	f898 1001 	ldrb.w	r1, [r8, #1]
 8007ffc:	1b92      	subs	r2, r2, r6
 8007ffe:	fb14 3302 	smlabb	r3, r4, r2, r3
 8008002:	9a03      	ldr	r2, [sp, #12]
 8008004:	f109 0902 	add.w	r9, r9, #2
 8008008:	1b89      	subs	r1, r1, r6
 800800a:	454a      	cmp	r2, r9
 800800c:	fb14 0001 	smlabb	r0, r4, r1, r0
 8008010:	f340 8187 	ble.w	8008322 <st_uaua8_fully_connected+0x5f6>
 8008014:	9a02      	ldr	r2, [sp, #8]
 8008016:	f9bb 4004 	ldrsh.w	r4, [fp, #4]
 800801a:	7891      	ldrb	r1, [r2, #2]
 800801c:	f898 2002 	ldrb.w	r2, [r8, #2]
 8008020:	1b89      	subs	r1, r1, r6
 8008022:	1b92      	subs	r2, r2, r6
 8008024:	fb14 3301 	smlabb	r3, r4, r1, r3
 8008028:	fb14 0002 	smlabb	r0, r4, r2, r0
 800802c:	f108 0803 	add.w	r8, r8, #3
 8008030:	9a06      	ldr	r2, [sp, #24]
 8008032:	9905      	ldr	r1, [sp, #20]
 8008034:	3202      	adds	r2, #2
 8008036:	2900      	cmp	r1, #0
 8008038:	9206      	str	r2, [sp, #24]
 800803a:	f340 8081 	ble.w	8008140 <st_uaua8_fully_connected+0x414>
 800803e:	9c07      	ldr	r4, [sp, #28]
 8008040:	9e08      	ldr	r6, [sp, #32]
 8008042:	0040      	lsls	r0, r0, #1
 8008044:	005b      	lsls	r3, r3, #1
 8008046:	fb50 6004 	smmla	r0, r0, r4, r6
 800804a:	fb53 6304 	smmla	r3, r3, r4, r6
 800804e:	4108      	asrs	r0, r1
 8008050:	460c      	mov	r4, r1
 8008052:	f380 0008 	usat	r0, #8, r0
 8008056:	f802 0c02 	strb.w	r0, [r2, #-2]
 800805a:	4123      	asrs	r3, r4
 800805c:	f383 0308 	usat	r3, #8, r3
 8008060:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008064:	9a03      	ldr	r2, [sp, #12]
 8008066:	9b04      	ldr	r3, [sp, #16]
 8008068:	4490      	add	r8, r2
 800806a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800806c:	3308      	adds	r3, #8
 800806e:	429a      	cmp	r2, r3
 8008070:	9304      	str	r3, [sp, #16]
 8008072:	f47f aeb1 	bne.w	8007dd8 <st_uaua8_fully_connected+0xac>
 8008076:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8008078:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800807a:	3401      	adds	r4, #1
 800807c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008080:	9325      	str	r3, [sp, #148]	; 0x94
 8008082:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008084:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8008088:	9326      	str	r3, [sp, #152]	; 0x98
 800808a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800808c:	07db      	lsls	r3, r3, #31
 800808e:	d553      	bpl.n	8008138 <st_uaua8_fully_connected+0x40c>
 8008090:	9a03      	ldr	r2, [sp, #12]
 8008092:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8008094:	0892      	lsrs	r2, r2, #2
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	d01e      	beq.n	80080d8 <st_uaua8_fully_connected+0x3ac>
 800809a:	1e55      	subs	r5, r2, #1
 800809c:	b2ad      	uxth	r5, r5
 800809e:	3501      	adds	r5, #1
 80080a0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80080a2:	eb08 0685 	add.w	r6, r8, r5, lsl #2
 80080a6:	f858 2b04 	ldr.w	r2, [r8], #4
 80080aa:	ea4f 2132 	mov.w	r1, r2, ror #8
 80080ae:	fa3f f181 	uxtb16	r1, r1
 80080b2:	fad1 f107 	ssub16	r1, r1, r7
 80080b6:	fa3f f282 	uxtb16	r2, r2
 80080ba:	fad2 f207 	ssub16	r2, r2, r7
 80080be:	6820      	ldr	r0, [r4, #0]
 80080c0:	fb20 3202 	smlad	r2, r0, r2, r3
 80080c4:	6863      	ldr	r3, [r4, #4]
 80080c6:	3408      	adds	r4, #8
 80080c8:	fb23 2301 	smlad	r3, r3, r1, r2
 80080cc:	45b0      	cmp	r8, r6
 80080ce:	d1ea      	bne.n	80080a6 <st_uaua8_fully_connected+0x37a>
 80080d0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80080d2:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 80080d6:	9227      	str	r2, [sp, #156]	; 0x9c
 80080d8:	9a03      	ldr	r2, [sp, #12]
 80080da:	f012 0103 	ands.w	r1, r2, #3
 80080de:	d01d      	beq.n	800811c <st_uaua8_fully_connected+0x3f0>
 80080e0:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80080e2:	f898 2000 	ldrb.w	r2, [r8]
 80080e6:	f8bd e048 	ldrh.w	lr, [sp, #72]	; 0x48
 80080ea:	8800      	ldrh	r0, [r0, #0]
 80080ec:	eba2 020e 	sub.w	r2, r2, lr
 80080f0:	2901      	cmp	r1, #1
 80080f2:	fb10 3302 	smlabb	r3, r0, r2, r3
 80080f6:	d011      	beq.n	800811c <st_uaua8_fully_connected+0x3f0>
 80080f8:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80080fa:	f898 2001 	ldrb.w	r2, [r8, #1]
 80080fe:	8840      	ldrh	r0, [r0, #2]
 8008100:	eba2 020e 	sub.w	r2, r2, lr
 8008104:	2902      	cmp	r1, #2
 8008106:	fb10 3302 	smlabb	r3, r0, r2, r3
 800810a:	d007      	beq.n	800811c <st_uaua8_fully_connected+0x3f0>
 800810c:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800810e:	f898 2002 	ldrb.w	r2, [r8, #2]
 8008112:	8889      	ldrh	r1, [r1, #4]
 8008114:	eba2 0e0e 	sub.w	lr, r2, lr
 8008118:	fb11 330e 	smlabb	r3, r1, lr, r3
 800811c:	9a05      	ldr	r2, [sp, #20]
 800811e:	2a00      	cmp	r2, #0
 8008120:	f340 8105 	ble.w	800832e <st_uaua8_fully_connected+0x602>
 8008124:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
 8008128:	005b      	lsls	r3, r3, #1
 800812a:	fb53 0301 	smmla	r3, r3, r1, r0
 800812e:	4113      	asrs	r3, r2
 8008130:	f383 0308 	usat	r3, #8, r3
 8008134:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008136:	7013      	strb	r3, [r2, #0]
 8008138:	2000      	movs	r0, #0
 800813a:	b017      	add	sp, #92	; 0x5c
 800813c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008140:	9914      	ldr	r1, [sp, #80]	; 0x50
 8008142:	fa00 f201 	lsl.w	r2, r0, r1
 8008146:	f302 021f 	ssat	r2, #32, r2
 800814a:	9807      	ldr	r0, [sp, #28]
 800814c:	fb52 f210 	smmulr	r2, r2, r0
 8008150:	408b      	lsls	r3, r1
 8008152:	f303 031f 	ssat	r3, #32, r3
 8008156:	fb53 f310 	smmulr	r3, r3, r0
 800815a:	9908      	ldr	r1, [sp, #32]
 800815c:	440a      	add	r2, r1
 800815e:	f382 0208 	usat	r2, #8, r2
 8008162:	9806      	ldr	r0, [sp, #24]
 8008164:	440b      	add	r3, r1
 8008166:	f800 2c02 	strb.w	r2, [r0, #-2]
 800816a:	f383 0308 	usat	r3, #8, r3
 800816e:	f800 3c01 	strb.w	r3, [r0, #-1]
 8008172:	e777      	b.n	8008064 <st_uaua8_fully_connected+0x338>
 8008174:	f108 0801 	add.w	r8, r8, #1
 8008178:	e75a      	b.n	8008030 <st_uaua8_fully_connected+0x304>
 800817a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800817c:	2800      	cmp	r0, #0
 800817e:	d0db      	beq.n	8008138 <st_uaua8_fully_connected+0x40c>
 8008180:	9c03      	ldr	r4, [sp, #12]
 8008182:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8008184:	b289      	uxth	r1, r1
 8008186:	46a3      	mov	fp, r4
 8008188:	46aa      	mov	sl, r5
 800818a:	4689      	mov	r9, r1
 800818c:	4428      	add	r0, r5
 800818e:	f1a4 0210 	sub.w	r2, r4, #16
 8008192:	f022 020f 	bic.w	r2, r2, #15
 8008196:	9003      	str	r0, [sp, #12]
 8008198:	9804      	ldr	r0, [sp, #16]
 800819a:	3210      	adds	r2, #16
 800819c:	9202      	str	r2, [sp, #8]
 800819e:	1882      	adds	r2, r0, r2
 80081a0:	9206      	str	r2, [sp, #24]
 80081a2:	9a05      	ldr	r2, [sp, #20]
 80081a4:	f8bd e048 	ldrh.w	lr, [sp, #72]	; 0x48
 80081a8:	f1c2 0201 	rsb	r2, r2, #1
 80081ac:	9209      	str	r2, [sp, #36]	; 0x24
 80081ae:	9925      	ldr	r1, [sp, #148]	; 0x94
 80081b0:	f1bb 0f0f 	cmp.w	fp, #15
 80081b4:	f851 2b04 	ldr.w	r2, [r1], #4
 80081b8:	9125      	str	r1, [sp, #148]	; 0x94
 80081ba:	f340 80b5 	ble.w	8008328 <st_uaua8_fully_connected+0x5fc>
 80081be:	9902      	ldr	r1, [sp, #8]
 80081c0:	9e04      	ldr	r6, [sp, #16]
 80081c2:	eb08 0c01 	add.w	ip, r8, r1
 80081c6:	f8d8 4000 	ldr.w	r4, [r8]
 80081ca:	6830      	ldr	r0, [r6, #0]
 80081cc:	ea4f 2534 	mov.w	r5, r4, ror #8
 80081d0:	fa3f f585 	uxtb16	r5, r5
 80081d4:	fad5 f507 	ssub16	r5, r5, r7
 80081d8:	fa3f f484 	uxtb16	r4, r4
 80081dc:	fad4 f407 	ssub16	r4, r4, r7
 80081e0:	ea4f 2130 	mov.w	r1, r0, ror #8
 80081e4:	fa3f f181 	uxtb16	r1, r1
 80081e8:	fad1 f103 	ssub16	r1, r1, r3
 80081ec:	fa3f f080 	uxtb16	r0, r0
 80081f0:	fad0 f003 	ssub16	r0, r0, r3
 80081f4:	fb20 2204 	smlad	r2, r0, r4, r2
 80081f8:	fb21 2205 	smlad	r2, r1, r5, r2
 80081fc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8008200:	6871      	ldr	r1, [r6, #4]
 8008202:	ea4f 2534 	mov.w	r5, r4, ror #8
 8008206:	fa3f f585 	uxtb16	r5, r5
 800820a:	fad5 f007 	ssub16	r0, r5, r7
 800820e:	fa3f f584 	uxtb16	r5, r4
 8008212:	fad5 f507 	ssub16	r5, r5, r7
 8008216:	ea4f 2431 	mov.w	r4, r1, ror #8
 800821a:	fa3f f484 	uxtb16	r4, r4
 800821e:	fad4 f403 	ssub16	r4, r4, r3
 8008222:	fa3f f181 	uxtb16	r1, r1
 8008226:	fad1 f103 	ssub16	r1, r1, r3
 800822a:	fb21 2105 	smlad	r1, r1, r5, r2
 800822e:	fb24 1500 	smlad	r5, r4, r0, r1
 8008232:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8008236:	68b4      	ldr	r4, [r6, #8]
 8008238:	ea4f 2032 	mov.w	r0, r2, ror #8
 800823c:	fa3f f080 	uxtb16	r0, r0
 8008240:	fad0 f107 	ssub16	r1, r0, r7
 8008244:	fa3f f082 	uxtb16	r0, r2
 8008248:	fad0 f007 	ssub16	r0, r0, r7
 800824c:	ea4f 2234 	mov.w	r2, r4, ror #8
 8008250:	fa3f f282 	uxtb16	r2, r2
 8008254:	fad2 f203 	ssub16	r2, r2, r3
 8008258:	fa3f f484 	uxtb16	r4, r4
 800825c:	fad4 f403 	ssub16	r4, r4, r3
 8008260:	fb24 5400 	smlad	r4, r4, r0, r5
 8008264:	fb22 4001 	smlad	r0, r2, r1, r4
 8008268:	f8d8 400c 	ldr.w	r4, [r8, #12]
 800826c:	68f1      	ldr	r1, [r6, #12]
 800826e:	ea4f 2234 	mov.w	r2, r4, ror #8
 8008272:	f108 0810 	add.w	r8, r8, #16
 8008276:	3610      	adds	r6, #16
 8008278:	fa3f f282 	uxtb16	r2, r2
 800827c:	fad2 f507 	ssub16	r5, r2, r7
 8008280:	fa3f f284 	uxtb16	r2, r4
 8008284:	fad2 f207 	ssub16	r2, r2, r7
 8008288:	ea4f 2431 	mov.w	r4, r1, ror #8
 800828c:	fa3f f484 	uxtb16	r4, r4
 8008290:	fad4 f403 	ssub16	r4, r4, r3
 8008294:	fa3f f181 	uxtb16	r1, r1
 8008298:	fad1 f103 	ssub16	r1, r1, r3
 800829c:	fb21 0202 	smlad	r2, r1, r2, r0
 80082a0:	fb24 2205 	smlad	r2, r4, r5, r2
 80082a4:	45e0      	cmp	r8, ip
 80082a6:	d18e      	bne.n	80081c6 <st_uaua8_fully_connected+0x49a>
 80082a8:	9c06      	ldr	r4, [sp, #24]
 80082aa:	9d02      	ldr	r5, [sp, #8]
 80082ac:	455d      	cmp	r5, fp
 80082ae:	da11      	bge.n	80082d4 <st_uaua8_fully_connected+0x5a8>
 80082b0:	4641      	mov	r1, r8
 80082b2:	ebab 0505 	sub.w	r5, fp, r5
 80082b6:	4445      	add	r5, r8
 80082b8:	7809      	ldrb	r1, [r1, #0]
 80082ba:	f814 0b01 	ldrb.w	r0, [r4], #1
 80082be:	f108 0801 	add.w	r8, r8, #1
 80082c2:	eba1 010e 	sub.w	r1, r1, lr
 80082c6:	eba0 0009 	sub.w	r0, r0, r9
 80082ca:	45a8      	cmp	r8, r5
 80082cc:	fb10 2201 	smlabb	r2, r0, r1, r2
 80082d0:	4641      	mov	r1, r8
 80082d2:	d1f1      	bne.n	80082b8 <st_uaua8_fully_connected+0x58c>
 80082d4:	9905      	ldr	r1, [sp, #20]
 80082d6:	f10a 0a01 	add.w	sl, sl, #1
 80082da:	2900      	cmp	r1, #0
 80082dc:	dd0e      	ble.n	80082fc <st_uaua8_fully_connected+0x5d0>
 80082de:	e9dd 0407 	ldrd	r0, r4, [sp, #28]
 80082e2:	0052      	lsls	r2, r2, #1
 80082e4:	fb52 4200 	smmla	r2, r2, r0, r4
 80082e8:	410a      	asrs	r2, r1
 80082ea:	f382 0208 	usat	r2, #8, r2
 80082ee:	f80a 2c01 	strb.w	r2, [sl, #-1]
 80082f2:	9a03      	ldr	r2, [sp, #12]
 80082f4:	4552      	cmp	r2, sl
 80082f6:	f47f af5a 	bne.w	80081ae <st_uaua8_fully_connected+0x482>
 80082fa:	e71d      	b.n	8008138 <st_uaua8_fully_connected+0x40c>
 80082fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80082fe:	408a      	lsls	r2, r1
 8008300:	f302 021f 	ssat	r2, #32, r2
 8008304:	9907      	ldr	r1, [sp, #28]
 8008306:	fb52 f211 	smmulr	r2, r2, r1
 800830a:	9908      	ldr	r1, [sp, #32]
 800830c:	440a      	add	r2, r1
 800830e:	f382 0208 	usat	r2, #8, r2
 8008312:	f80a 2c01 	strb.w	r2, [sl, #-1]
 8008316:	e7ec      	b.n	80082f2 <st_uaua8_fully_connected+0x5c6>
 8008318:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 800831c:	f04f 0900 	mov.w	r9, #0
 8008320:	e60c      	b.n	8007f3c <st_uaua8_fully_connected+0x210>
 8008322:	f108 0802 	add.w	r8, r8, #2
 8008326:	e683      	b.n	8008030 <st_uaua8_fully_connected+0x304>
 8008328:	9c04      	ldr	r4, [sp, #16]
 800832a:	2500      	movs	r5, #0
 800832c:	e7be      	b.n	80082ac <st_uaua8_fully_connected+0x580>
 800832e:	f1c2 0201 	rsb	r2, r2, #1
 8008332:	4093      	lsls	r3, r2
 8008334:	f303 031f 	ssat	r3, #32, r3
 8008338:	9a07      	ldr	r2, [sp, #28]
 800833a:	fb53 f312 	smmulr	r3, r3, r2
 800833e:	9a08      	ldr	r2, [sp, #32]
 8008340:	4413      	add	r3, r2
 8008342:	f383 0308 	usat	r3, #8, r3
 8008346:	2000      	movs	r0, #0
 8008348:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800834a:	7013      	strb	r3, [r2, #0]
 800834c:	b017      	add	sp, #92	; 0x5c
 800834e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008352:	bf00      	nop

08008354 <ai_padding_opt_init>:
 8008354:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008358:	2600      	movs	r6, #0
 800835a:	e9c0 6600 	strd	r6, r6, [r0]
 800835e:	6086      	str	r6, [r0, #8]
 8008360:	689d      	ldr	r5, [r3, #8]
 8008362:	690c      	ldr	r4, [r1, #16]
 8008364:	42b5      	cmp	r5, r6
 8008366:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800836a:	dd20      	ble.n	80083ae <ai_padding_opt_init+0x5a>
 800836c:	4264      	negs	r4, r4
 800836e:	46b0      	mov	r8, r6
 8008370:	46b6      	mov	lr, r6
 8008372:	46b1      	mov	r9, r6
 8008374:	4637      	mov	r7, r6
 8008376:	e013      	b.n	80083a0 <ai_padding_opt_init+0x4c>
 8008378:	6895      	ldr	r5, [r2, #8]
 800837a:	f8dc 6008 	ldr.w	r6, [ip, #8]
 800837e:	1b2d      	subs	r5, r5, r4
 8008380:	42b5      	cmp	r5, r6
 8008382:	bfb5      	itete	lt
 8008384:	f10e 0e01 	addlt.w	lr, lr, #1
 8008388:	f108 0801 	addge.w	r8, r8, #1
 800838c:	f8c0 e008 	strlt.w	lr, [r0, #8]
 8008390:	f8c0 8004 	strge.w	r8, [r0, #4]
 8008394:	689d      	ldr	r5, [r3, #8]
 8008396:	3701      	adds	r7, #1
 8008398:	688e      	ldr	r6, [r1, #8]
 800839a:	42bd      	cmp	r5, r7
 800839c:	4434      	add	r4, r6
 800839e:	dd09      	ble.n	80083b4 <ai_padding_opt_init+0x60>
 80083a0:	2c00      	cmp	r4, #0
 80083a2:	dae9      	bge.n	8008378 <ai_padding_opt_init+0x24>
 80083a4:	f109 0901 	add.w	r9, r9, #1
 80083a8:	f8c0 9000 	str.w	r9, [r0]
 80083ac:	e7f2      	b.n	8008394 <ai_padding_opt_init+0x40>
 80083ae:	46b6      	mov	lr, r6
 80083b0:	46b0      	mov	r8, r6
 80083b2:	46b1      	mov	r9, r6
 80083b4:	2500      	movs	r5, #0
 80083b6:	e9c0 9803 	strd	r9, r8, [r0, #12]
 80083ba:	e9c0 e505 	strd	lr, r5, [r0, #20]
 80083be:	e9c0 5507 	strd	r5, r5, [r0, #28]
 80083c2:	685e      	ldr	r6, [r3, #4]
 80083c4:	694c      	ldr	r4, [r1, #20]
 80083c6:	42ae      	cmp	r6, r5
 80083c8:	f1c4 0400 	rsb	r4, r4, #0
 80083cc:	dc0f      	bgt.n	80083ee <ai_padding_opt_init+0x9a>
 80083ce:	e018      	b.n	8008402 <ai_padding_opt_init+0xae>
 80083d0:	6856      	ldr	r6, [r2, #4]
 80083d2:	f8dc 7004 	ldr.w	r7, [ip, #4]
 80083d6:	1b36      	subs	r6, r6, r4
 80083d8:	42be      	cmp	r6, r7
 80083da:	da0e      	bge.n	80083fa <ai_padding_opt_init+0xa6>
 80083dc:	6a06      	ldr	r6, [r0, #32]
 80083de:	3601      	adds	r6, #1
 80083e0:	6206      	str	r6, [r0, #32]
 80083e2:	685e      	ldr	r6, [r3, #4]
 80083e4:	68cf      	ldr	r7, [r1, #12]
 80083e6:	3501      	adds	r5, #1
 80083e8:	42ae      	cmp	r6, r5
 80083ea:	443c      	add	r4, r7
 80083ec:	dd09      	ble.n	8008402 <ai_padding_opt_init+0xae>
 80083ee:	2c00      	cmp	r4, #0
 80083f0:	daee      	bge.n	80083d0 <ai_padding_opt_init+0x7c>
 80083f2:	6986      	ldr	r6, [r0, #24]
 80083f4:	3601      	adds	r6, #1
 80083f6:	6186      	str	r6, [r0, #24]
 80083f8:	e7f3      	b.n	80083e2 <ai_padding_opt_init+0x8e>
 80083fa:	69c6      	ldr	r6, [r0, #28]
 80083fc:	3601      	adds	r6, #1
 80083fe:	61c6      	str	r6, [r0, #28]
 8008400:	e7ef      	b.n	80083e2 <ai_padding_opt_init+0x8e>
 8008402:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008406:	bf00      	nop

08008408 <ai_padding_opt_phase1>:
 8008408:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800840c:	b932      	cbnz	r2, 800841c <ai_padding_opt_phase1+0x14>
 800840e:	b943      	cbnz	r3, 8008422 <ai_padding_opt_phase1+0x1a>
 8008410:	2201      	movs	r2, #1
 8008412:	6a03      	ldr	r3, [r0, #32]
 8008414:	8482      	strh	r2, [r0, #36]	; 0x24
 8008416:	3b01      	subs	r3, #1
 8008418:	6203      	str	r3, [r0, #32]
 800841a:	e005      	b.n	8008428 <ai_padding_opt_phase1+0x20>
 800841c:	2b00      	cmp	r3, #0
 800841e:	d0f7      	beq.n	8008410 <ai_padding_opt_phase1+0x8>
 8008420:	2201      	movs	r2, #1
 8008422:	3b01      	subs	r3, #1
 8008424:	61c3      	str	r3, [r0, #28]
 8008426:	8482      	strh	r2, [r0, #36]	; 0x24
 8008428:	6943      	ldr	r3, [r0, #20]
 800842a:	e9d0 1203 	ldrd	r1, r2, [r0, #12]
 800842e:	6083      	str	r3, [r0, #8]
 8008430:	e9c0 1200 	strd	r1, r2, [r0]
 8008434:	4770      	bx	lr
 8008436:	bf00      	nop

08008438 <st_uint8_fill>:
 8008438:	0403      	lsls	r3, r0, #16
 800843a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800843e:	b410      	push	{r4}
 8008440:	4303      	orrs	r3, r0
 8008442:	0894      	lsrs	r4, r2, #2
 8008444:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8008448:	d011      	beq.n	800846e <st_uint8_fill+0x36>
 800844a:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 800844e:	f841 3b04 	str.w	r3, [r1], #4
 8008452:	42a1      	cmp	r1, r4
 8008454:	d1fb      	bne.n	800844e <st_uint8_fill+0x16>
 8008456:	f012 0203 	ands.w	r2, r2, #3
 800845a:	d005      	beq.n	8008468 <st_uint8_fill+0x30>
 800845c:	4601      	mov	r1, r0
 800845e:	4620      	mov	r0, r4
 8008460:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008464:	f002 b98f 	b.w	800a786 <memset>
 8008468:	f85d 4b04 	ldr.w	r4, [sp], #4
 800846c:	4770      	bx	lr
 800846e:	460c      	mov	r4, r1
 8008470:	e7f1      	b.n	8008456 <st_uint8_fill+0x1e>
 8008472:	bf00      	nop

08008474 <st_uint8_reordered_no_shift_zero>:
 8008474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008476:	ea5f 0e92 	movs.w	lr, r2, lsr #2
 800847a:	f8bd c014 	ldrh.w	ip, [sp, #20]
 800847e:	d02a      	beq.n	80084d6 <st_uint8_reordered_no_shift_zero+0x62>
 8008480:	460e      	mov	r6, r1
 8008482:	eb00 078e 	add.w	r7, r0, lr, lsl #2
 8008486:	f850 4b04 	ldr.w	r4, [r0], #4
 800848a:	ea4f 2534 	mov.w	r5, r4, ror #8
 800848e:	fa3f f585 	uxtb16	r5, r5
 8008492:	fad5 f503 	ssub16	r5, r5, r3
 8008496:	fa3f f484 	uxtb16	r4, r4
 800849a:	fad4 f403 	ssub16	r4, r4, r3
 800849e:	42b8      	cmp	r0, r7
 80084a0:	6034      	str	r4, [r6, #0]
 80084a2:	6075      	str	r5, [r6, #4]
 80084a4:	f106 0608 	add.w	r6, r6, #8
 80084a8:	d1ed      	bne.n	8008486 <st_uint8_reordered_no_shift_zero+0x12>
 80084aa:	eb01 01ce 	add.w	r1, r1, lr, lsl #3
 80084ae:	f012 0203 	ands.w	r2, r2, #3
 80084b2:	d00f      	beq.n	80084d4 <st_uint8_reordered_no_shift_zero+0x60>
 80084b4:	7838      	ldrb	r0, [r7, #0]
 80084b6:	fa5f f38c 	uxtb.w	r3, ip
 80084ba:	1ac0      	subs	r0, r0, r3
 80084bc:	2a01      	cmp	r2, #1
 80084be:	8008      	strh	r0, [r1, #0]
 80084c0:	d008      	beq.n	80084d4 <st_uint8_reordered_no_shift_zero+0x60>
 80084c2:	7878      	ldrb	r0, [r7, #1]
 80084c4:	2a02      	cmp	r2, #2
 80084c6:	eba0 0003 	sub.w	r0, r0, r3
 80084ca:	8048      	strh	r0, [r1, #2]
 80084cc:	d002      	beq.n	80084d4 <st_uint8_reordered_no_shift_zero+0x60>
 80084ce:	78ba      	ldrb	r2, [r7, #2]
 80084d0:	1ad3      	subs	r3, r2, r3
 80084d2:	808b      	strh	r3, [r1, #4]
 80084d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084d6:	4607      	mov	r7, r0
 80084d8:	e7e9      	b.n	80084ae <st_uint8_reordered_no_shift_zero+0x3a>
 80084da:	bf00      	nop

080084dc <st_uaua8_nn_mat_mult_nt_t>:
 80084dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e0:	b0a5      	sub	sp, #148	; 0x94
 80084e2:	f89d 40d4 	ldrb.w	r4, [sp, #212]	; 0xd4
 80084e6:	9018      	str	r0, [sp, #96]	; 0x60
 80084e8:	ea44 4004 	orr.w	r0, r4, r4, lsl #16
 80084ec:	901c      	str	r0, [sp, #112]	; 0x70
 80084ee:	f9bd 00bc 	ldrsh.w	r0, [sp, #188]	; 0xbc
 80084f2:	9420      	str	r4, [sp, #128]	; 0x80
 80084f4:	e9dd 4b31 	ldrd	r4, fp, [sp, #196]	; 0xc4
 80084f8:	2c01      	cmp	r4, #1
 80084fa:	9121      	str	r1, [sp, #132]	; 0x84
 80084fc:	9223      	str	r2, [sp, #140]	; 0x8c
 80084fe:	9311      	str	r3, [sp, #68]	; 0x44
 8008500:	900b      	str	r0, [sp, #44]	; 0x2c
 8008502:	f340 8235 	ble.w	8008970 <st_uaua8_nn_mat_mult_nt_t+0x494>
 8008506:	9212      	str	r2, [sp, #72]	; 0x48
 8008508:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800850a:	9110      	str	r1, [sp, #64]	; 0x40
 800850c:	1051      	asrs	r1, r2, #1
 800850e:	4622      	mov	r2, r4
 8008510:	461d      	mov	r5, r3
 8008512:	0064      	lsls	r4, r4, #1
 8008514:	911a      	str	r1, [sp, #104]	; 0x68
 8008516:	fb04 f101 	mul.w	r1, r4, r1
 800851a:	3a02      	subs	r2, #2
 800851c:	0852      	lsrs	r2, r2, #1
 800851e:	911f      	str	r1, [sp, #124]	; 0x7c
 8008520:	ea4f 01ab 	mov.w	r1, fp, asr #2
 8008524:	940d      	str	r4, [sp, #52]	; 0x34
 8008526:	1c54      	adds	r4, r2, #1
 8008528:	460a      	mov	r2, r1
 800852a:	f1ab 0310 	sub.w	r3, fp, #16
 800852e:	091b      	lsrs	r3, r3, #4
 8008530:	3301      	adds	r3, #1
 8008532:	9422      	str	r4, [sp, #136]	; 0x88
 8008534:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 8008538:	941b      	str	r4, [sp, #108]	; 0x6c
 800853a:	011c      	lsls	r4, r3, #4
 800853c:	9403      	str	r4, [sp, #12]
 800853e:	9c36      	ldr	r4, [sp, #216]	; 0xd8
 8008540:	9114      	str	r1, [sp, #80]	; 0x50
 8008542:	eb04 1383 	add.w	r3, r4, r3, lsl #6
 8008546:	0089      	lsls	r1, r1, #2
 8008548:	930e      	str	r3, [sp, #56]	; 0x38
 800854a:	eb0b 0301 	add.w	r3, fp, r1
 800854e:	931d      	str	r3, [sp, #116]	; 0x74
 8008550:	eb04 1302 	add.w	r3, r4, r2, lsl #4
 8008554:	9317      	str	r3, [sp, #92]	; 0x5c
 8008556:	f00b 0303 	and.w	r3, fp, #3
 800855a:	9315      	str	r3, [sp, #84]	; 0x54
 800855c:	f1ab 030f 	sub.w	r3, fp, #15
 8008560:	930c      	str	r3, [sp, #48]	; 0x30
 8008562:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8008564:	911e      	str	r1, [sp, #120]	; 0x78
 8008566:	f003 0301 	and.w	r3, r3, #1
 800856a:	9319      	str	r3, [sp, #100]	; 0x64
 800856c:	ea4f 034b 	mov.w	r3, fp, lsl #1
 8008570:	9316      	str	r3, [sp, #88]	; 0x58
 8008572:	f1ab 0304 	sub.w	r3, fp, #4
 8008576:	930f      	str	r3, [sp, #60]	; 0x3c
 8008578:	f10b 0301 	add.w	r3, fp, #1
 800857c:	9309      	str	r3, [sp, #36]	; 0x24
 800857e:	f1c0 0301 	rsb	r3, r0, #1
 8008582:	9313      	str	r3, [sp, #76]	; 0x4c
 8008584:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8008586:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8008588:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800858a:	18fe      	adds	r6, r7, r3
 800858c:	2d00      	cmp	r5, #0
 800858e:	f000 83a0 	beq.w	8008cd2 <st_uaua8_nn_mat_mult_nt_t+0x7f6>
 8008592:	9936      	ldr	r1, [sp, #216]	; 0xd8
 8008594:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 8008598:	f857 2b04 	ldr.w	r2, [r7], #4
 800859c:	f856 3b04 	ldr.w	r3, [r6], #4
 80085a0:	ea4f 2432 	mov.w	r4, r2, ror #8
 80085a4:	fa3f f484 	uxtb16	r4, r4
 80085a8:	fad4 f40c 	ssub16	r4, r4, ip
 80085ac:	fa3f f282 	uxtb16	r2, r2
 80085b0:	fad2 f20c 	ssub16	r2, r2, ip
 80085b4:	ea4f 2033 	mov.w	r0, r3, ror #8
 80085b8:	fa3f f080 	uxtb16	r0, r0
 80085bc:	fad0 f00c 	ssub16	r0, r0, ip
 80085c0:	fa3f f383 	uxtb16	r3, r3
 80085c4:	fad3 f30c 	ssub16	r3, r3, ip
 80085c8:	3d01      	subs	r5, #1
 80085ca:	600a      	str	r2, [r1, #0]
 80085cc:	604c      	str	r4, [r1, #4]
 80085ce:	608b      	str	r3, [r1, #8]
 80085d0:	60c8      	str	r0, [r1, #12]
 80085d2:	f101 0110 	add.w	r1, r1, #16
 80085d6:	d1df      	bne.n	8008598 <st_uaua8_nn_mat_mult_nt_t+0xbc>
 80085d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80085da:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80085dc:	1898      	adds	r0, r3, r2
 80085de:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80085e0:	189e      	adds	r6, r3, r2
 80085e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80085e4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80085e6:	b1dc      	cbz	r4, 8008620 <st_uaua8_nn_mat_mult_nt_t+0x144>
 80085e8:	7801      	ldrb	r1, [r0, #0]
 80085ea:	f8bd 2080 	ldrh.w	r2, [sp, #128]	; 0x80
 80085ee:	2c01      	cmp	r4, #1
 80085f0:	eba1 0102 	sub.w	r1, r1, r2
 80085f4:	8019      	strh	r1, [r3, #0]
 80085f6:	7831      	ldrb	r1, [r6, #0]
 80085f8:	eba1 0102 	sub.w	r1, r1, r2
 80085fc:	8059      	strh	r1, [r3, #2]
 80085fe:	d00f      	beq.n	8008620 <st_uaua8_nn_mat_mult_nt_t+0x144>
 8008600:	7841      	ldrb	r1, [r0, #1]
 8008602:	2c02      	cmp	r4, #2
 8008604:	eba1 0102 	sub.w	r1, r1, r2
 8008608:	8099      	strh	r1, [r3, #4]
 800860a:	7871      	ldrb	r1, [r6, #1]
 800860c:	eba1 0102 	sub.w	r1, r1, r2
 8008610:	80d9      	strh	r1, [r3, #6]
 8008612:	d005      	beq.n	8008620 <st_uaua8_nn_mat_mult_nt_t+0x144>
 8008614:	7881      	ldrb	r1, [r0, #2]
 8008616:	1a89      	subs	r1, r1, r2
 8008618:	8119      	strh	r1, [r3, #8]
 800861a:	78b1      	ldrb	r1, [r6, #2]
 800861c:	1a8a      	subs	r2, r1, r2
 800861e:	815a      	strh	r2, [r3, #10]
 8008620:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8008622:	2b00      	cmp	r3, #0
 8008624:	f040 830c 	bne.w	8008c40 <st_uaua8_nn_mat_mult_nt_t+0x764>
 8008628:	4618      	mov	r0, r3
 800862a:	4619      	mov	r1, r3
 800862c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	188a      	adds	r2, r1, r2
 8008634:	18c3      	adds	r3, r0, r3
 8008636:	9308      	str	r3, [sp, #32]
 8008638:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800863a:	9207      	str	r2, [sp, #28]
 800863c:	2b00      	cmp	r3, #0
 800863e:	f000 834b 	beq.w	8008cd8 <st_uaua8_nn_mat_mult_nt_t+0x7fc>
 8008642:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8008644:	9302      	str	r3, [sp, #8]
 8008646:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008648:	3a03      	subs	r2, #3
 800864a:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 800864e:	f8dd b0c8 	ldr.w	fp, [sp, #200]	; 0xc8
 8008652:	920a      	str	r2, [sp, #40]	; 0x28
 8008654:	9301      	str	r3, [sp, #4]
 8008656:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008658:	2b00      	cmp	r3, #0
 800865a:	f340 820b 	ble.w	8008a74 <st_uaua8_nn_mat_mult_nt_t+0x598>
 800865e:	9808      	ldr	r0, [sp, #32]
 8008660:	9e07      	ldr	r6, [sp, #28]
 8008662:	4603      	mov	r3, r0
 8008664:	4634      	mov	r4, r6
 8008666:	9a03      	ldr	r2, [sp, #12]
 8008668:	f8dd 80d8 	ldr.w	r8, [sp, #216]	; 0xd8
 800866c:	4452      	add	r2, sl
 800866e:	9200      	str	r2, [sp, #0]
 8008670:	eb0a 090b 	add.w	r9, sl, fp
 8008674:	f8da 5000 	ldr.w	r5, [sl]
 8008678:	f8d8 2000 	ldr.w	r2, [r8]
 800867c:	fa3f f185 	uxtb16	r1, r5
 8008680:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8008684:	fa3f f595 	uxtb16	r5, r5, ror #8
 8008688:	f8d8 e008 	ldr.w	lr, [r8, #8]
 800868c:	f8d8 700c 	ldr.w	r7, [r8, #12]
 8008690:	fb21 6602 	smlad	r6, r1, r2, r6
 8008694:	fb25 660c 	smlad	r6, r5, ip, r6
 8008698:	fb21 000e 	smlad	r0, r1, lr, r0
 800869c:	fb25 0007 	smlad	r0, r5, r7, r0
 80086a0:	f85a 100b 	ldr.w	r1, [sl, fp]
 80086a4:	fa3f f581 	uxtb16	r5, r1
 80086a8:	fa3f f191 	uxtb16	r1, r1, ror #8
 80086ac:	fb25 4202 	smlad	r2, r5, r2, r4
 80086b0:	fb25 330e 	smlad	r3, r5, lr, r3
 80086b4:	fb21 220c 	smlad	r2, r1, ip, r2
 80086b8:	f8d8 c010 	ldr.w	ip, [r8, #16]
 80086bc:	f8d8 4014 	ldr.w	r4, [r8, #20]
 80086c0:	fb21 3707 	smlad	r7, r1, r7, r3
 80086c4:	f8da 3004 	ldr.w	r3, [sl, #4]
 80086c8:	f8d8 e018 	ldr.w	lr, [r8, #24]
 80086cc:	fa3f f583 	uxtb16	r5, r3
 80086d0:	f8d8 101c 	ldr.w	r1, [r8, #28]
 80086d4:	fa3f f393 	uxtb16	r3, r3, ror #8
 80086d8:	fb25 660c 	smlad	r6, r5, ip, r6
 80086dc:	fb23 6604 	smlad	r6, r3, r4, r6
 80086e0:	fb25 050e 	smlad	r5, r5, lr, r0
 80086e4:	fb23 5501 	smlad	r5, r3, r1, r5
 80086e8:	f8d9 0004 	ldr.w	r0, [r9, #4]
 80086ec:	fa3f f380 	uxtb16	r3, r0
 80086f0:	fa3f f090 	uxtb16	r0, r0, ror #8
 80086f4:	fb23 2c0c 	smlad	ip, r3, ip, r2
 80086f8:	fb23 770e 	smlad	r7, r3, lr, r7
 80086fc:	fb20 cc04 	smlad	ip, r0, r4, ip
 8008700:	f8d8 4020 	ldr.w	r4, [r8, #32]
 8008704:	f8d8 e024 	ldr.w	lr, [r8, #36]	; 0x24
 8008708:	fb20 7101 	smlad	r1, r0, r1, r7
 800870c:	f8da 2008 	ldr.w	r2, [sl, #8]
 8008710:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
 8008714:	fa3f f382 	uxtb16	r3, r2
 8008718:	f8d8 702c 	ldr.w	r7, [r8, #44]	; 0x2c
 800871c:	fa3f f292 	uxtb16	r2, r2, ror #8
 8008720:	fb23 6604 	smlad	r6, r3, r4, r6
 8008724:	fb22 660e 	smlad	r6, r2, lr, r6
 8008728:	fb23 5300 	smlad	r3, r3, r0, r5
 800872c:	fb22 3207 	smlad	r2, r2, r7, r3
 8008730:	f8d9 5008 	ldr.w	r5, [r9, #8]
 8008734:	fa3f f985 	uxtb16	r9, r5
 8008738:	fa3f f595 	uxtb16	r5, r5, ror #8
 800873c:	fb29 c404 	smlad	r4, r9, r4, ip
 8008740:	fb29 1100 	smlad	r1, r9, r0, r1
 8008744:	fb25 4e0e 	smlad	lr, r5, lr, r4
 8008748:	f8d8 c030 	ldr.w	ip, [r8, #48]	; 0x30
 800874c:	f8d8 4034 	ldr.w	r4, [r8, #52]	; 0x34
 8008750:	fb25 1707 	smlad	r7, r5, r7, r1
 8008754:	f8da 000c 	ldr.w	r0, [sl, #12]
 8008758:	f8d8 1038 	ldr.w	r1, [r8, #56]	; 0x38
 800875c:	f8d8 503c 	ldr.w	r5, [r8, #60]	; 0x3c
 8008760:	fa3f f380 	uxtb16	r3, r0
 8008764:	f108 0840 	add.w	r8, r8, #64	; 0x40
 8008768:	f10a 0a10 	add.w	sl, sl, #16
 800876c:	fa3f f090 	uxtb16	r0, r0, ror #8
 8008770:	fb23 660c 	smlad	r6, r3, ip, r6
 8008774:	fb20 6604 	smlad	r6, r0, r4, r6
 8008778:	fb23 2201 	smlad	r2, r3, r1, r2
 800877c:	fb20 2005 	smlad	r0, r0, r5, r2
 8008780:	eb0a 090b 	add.w	r9, sl, fp
 8008784:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8008788:	fa3f f283 	uxtb16	r2, r3
 800878c:	fa3f f393 	uxtb16	r3, r3, ror #8
 8008790:	fb22 ee0c 	smlad	lr, r2, ip, lr
 8008794:	fb22 7701 	smlad	r7, r2, r1, r7
 8008798:	fb23 e404 	smlad	r4, r3, r4, lr
 800879c:	fb23 7305 	smlad	r3, r3, r5, r7
 80087a0:	9a00      	ldr	r2, [sp, #0]
 80087a2:	4592      	cmp	sl, r2
 80087a4:	f47f af66 	bne.w	8008674 <st_uaua8_nn_mat_mult_nt_t+0x198>
 80087a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80087aa:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80087ae:	9200      	str	r2, [sp, #0]
 80087b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087b2:	4591      	cmp	r9, r2
 80087b4:	da43      	bge.n	800883e <st_uaua8_nn_mat_mult_nt_t+0x362>
 80087b6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80087b8:	f8cd 9018 	str.w	r9, [sp, #24]
 80087bc:	eba1 0209 	sub.w	r2, r1, r9
 80087c0:	0892      	lsrs	r2, r2, #2
 80087c2:	9205      	str	r2, [sp, #20]
 80087c4:	3201      	adds	r2, #1
 80087c6:	9204      	str	r2, [sp, #16]
 80087c8:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 80087cc:	f8cd b0c8 	str.w	fp, [sp, #200]	; 0xc8
 80087d0:	4691      	mov	r9, r2
 80087d2:	468b      	mov	fp, r1
 80087d4:	9f00      	ldr	r7, [sp, #0]
 80087d6:	f85a 2b04 	ldr.w	r2, [sl], #4
 80087da:	683d      	ldr	r5, [r7, #0]
 80087dc:	f8d7 e004 	ldr.w	lr, [r7, #4]
 80087e0:	f8d7 8008 	ldr.w	r8, [r7, #8]
 80087e4:	fa3f f182 	uxtb16	r1, r2
 80087e8:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 80087ec:	fa3f f292 	uxtb16	r2, r2, ror #8
 80087f0:	3710      	adds	r7, #16
 80087f2:	fb21 6605 	smlad	r6, r1, r5, r6
 80087f6:	fb22 660e 	smlad	r6, r2, lr, r6
 80087fa:	fb21 0008 	smlad	r0, r1, r8, r0
 80087fe:	fb22 000c 	smlad	r0, r2, ip, r0
 8008802:	f85a 200b 	ldr.w	r2, [sl, fp]
 8008806:	fa3f f182 	uxtb16	r1, r2
 800880a:	fa3f f292 	uxtb16	r2, r2, ror #8
 800880e:	fb21 4405 	smlad	r4, r1, r5, r4
 8008812:	fb21 3308 	smlad	r3, r1, r8, r3
 8008816:	fb22 440e 	smlad	r4, r2, lr, r4
 800881a:	fb22 330c 	smlad	r3, r2, ip, r3
 800881e:	45ca      	cmp	sl, r9
 8008820:	d1d9      	bne.n	80087d6 <st_uaua8_nn_mat_mult_nt_t+0x2fa>
 8008822:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8008826:	9a05      	ldr	r2, [sp, #20]
 8008828:	f109 0904 	add.w	r9, r9, #4
 800882c:	eb09 0982 	add.w	r9, r9, r2, lsl #2
 8008830:	9904      	ldr	r1, [sp, #16]
 8008832:	9a00      	ldr	r2, [sp, #0]
 8008834:	f8dd b0c8 	ldr.w	fp, [sp, #200]	; 0xc8
 8008838:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800883c:	9200      	str	r2, [sp, #0]
 800883e:	45cb      	cmp	fp, r9
 8008840:	eb0a 020b 	add.w	r2, sl, fp
 8008844:	f340 80db 	ble.w	80089fe <st_uaua8_nn_mat_mult_nt_t+0x522>
 8008848:	9900      	ldr	r1, [sp, #0]
 800884a:	f89a 2000 	ldrb.w	r2, [sl]
 800884e:	f9b1 7000 	ldrsh.w	r7, [r1]
 8008852:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8008856:	f81a 100b 	ldrb.w	r1, [sl, fp]
 800885a:	fb17 6602 	smlabb	r6, r7, r2, r6
 800885e:	fb17 4401 	smlabb	r4, r7, r1, r4
 8008862:	fb15 0002 	smlabb	r0, r5, r2, r0
 8008866:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008868:	f109 0201 	add.w	r2, r9, #1
 800886c:	4593      	cmp	fp, r2
 800886e:	fb15 3301 	smlabb	r3, r5, r1, r3
 8008872:	eb0a 0107 	add.w	r1, sl, r7
 8008876:	f340 80fb 	ble.w	8008a70 <st_uaua8_nn_mat_mult_nt_t+0x594>
 800887a:	9a00      	ldr	r2, [sp, #0]
 800887c:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8008880:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 8008884:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 8008888:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800888a:	f109 0902 	add.w	r9, r9, #2
 800888e:	f81a 2002 	ldrb.w	r2, [sl, r2]
 8008892:	fb15 6607 	smlabb	r6, r5, r7, r6
 8008896:	fb11 0007 	smlabb	r0, r1, r7, r0
 800889a:	45cb      	cmp	fp, r9
 800889c:	f10a 0702 	add.w	r7, sl, #2
 80088a0:	fb15 4402 	smlabb	r4, r5, r2, r4
 80088a4:	fb11 3302 	smlabb	r3, r1, r2, r3
 80088a8:	eb07 020b 	add.w	r2, r7, fp
 80088ac:	f340 80a7 	ble.w	80089fe <st_uaua8_nn_mat_mult_nt_t+0x522>
 80088b0:	9a00      	ldr	r2, [sp, #0]
 80088b2:	f817 500b 	ldrb.w	r5, [r7, fp]
 80088b6:	f9b2 1008 	ldrsh.w	r1, [r2, #8]
 80088ba:	f9b2 700a 	ldrsh.w	r7, [r2, #10]
 80088be:	f89a 2002 	ldrb.w	r2, [sl, #2]
 80088c2:	fb11 4405 	smlabb	r4, r1, r5, r4
 80088c6:	fb17 3305 	smlabb	r3, r7, r5, r3
 80088ca:	fb11 6602 	smlabb	r6, r1, r2, r6
 80088ce:	fb17 0002 	smlabb	r0, r7, r2, r0
 80088d2:	f10a 0a03 	add.w	sl, sl, #3
 80088d6:	44da      	add	sl, fp
 80088d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80088da:	2a00      	cmp	r2, #0
 80088dc:	f340 8094 	ble.w	8008a08 <st_uaua8_nn_mat_mult_nt_t+0x52c>
 80088e0:	992e      	ldr	r1, [sp, #184]	; 0xb8
 80088e2:	9d34      	ldr	r5, [sp, #208]	; 0xd0
 80088e4:	0076      	lsls	r6, r6, #1
 80088e6:	0064      	lsls	r4, r4, #1
 80088e8:	fb56 5601 	smmla	r6, r6, r1, r5
 80088ec:	fb54 5401 	smmla	r4, r4, r1, r5
 80088f0:	4116      	asrs	r6, r2
 80088f2:	0040      	lsls	r0, r0, #1
 80088f4:	005b      	lsls	r3, r3, #1
 80088f6:	fb50 5001 	smmla	r0, r0, r1, r5
 80088fa:	fb53 5301 	smmla	r3, r3, r1, r5
 80088fe:	f386 0608 	usat	r6, #8, r6
 8008902:	9901      	ldr	r1, [sp, #4]
 8008904:	4110      	asrs	r0, r2
 8008906:	700e      	strb	r6, [r1, #0]
 8008908:	f380 0008 	usat	r0, #8, r0
 800890c:	7048      	strb	r0, [r1, #1]
 800890e:	4114      	asrs	r4, r2
 8008910:	f384 0408 	usat	r4, #8, r4
 8008914:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 8008916:	4113      	asrs	r3, r2
 8008918:	554c      	strb	r4, [r1, r5]
 800891a:	f383 0308 	usat	r3, #8, r3
 800891e:	194a      	adds	r2, r1, r5
 8008920:	7053      	strb	r3, [r2, #1]
 8008922:	460b      	mov	r3, r1
 8008924:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008926:	4413      	add	r3, r2
 8008928:	9301      	str	r3, [sp, #4]
 800892a:	9b02      	ldr	r3, [sp, #8]
 800892c:	3b01      	subs	r3, #1
 800892e:	9302      	str	r3, [sp, #8]
 8008930:	f47f ae91 	bne.w	8008656 <st_uaua8_nn_mat_mult_nt_t+0x17a>
 8008934:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008936:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008938:	eb03 0b02 	add.w	fp, r3, r2
 800893c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800893e:	2b00      	cmp	r3, #0
 8008940:	f040 80a1 	bne.w	8008a86 <st_uaua8_nn_mat_mult_nt_t+0x5aa>
 8008944:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008946:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008948:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800894a:	440a      	add	r2, r1
 800894c:	9210      	str	r2, [sp, #64]	; 0x40
 800894e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008950:	3302      	adds	r3, #2
 8008952:	3208      	adds	r2, #8
 8008954:	9212      	str	r2, [sp, #72]	; 0x48
 8008956:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008958:	9311      	str	r3, [sp, #68]	; 0x44
 800895a:	4293      	cmp	r3, r2
 800895c:	f47f ae12 	bne.w	8008584 <st_uaua8_nn_mat_mult_nt_t+0xa8>
 8008960:	460b      	mov	r3, r1
 8008962:	e9dd 1221 	ldrd	r1, r2, [sp, #132]	; 0x84
 8008966:	fb02 1303 	mla	r3, r2, r3, r1
 800896a:	f8dd b0c8 	ldr.w	fp, [sp, #200]	; 0xc8
 800896e:	9321      	str	r3, [sp, #132]	; 0x84
 8008970:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8008972:	07db      	lsls	r3, r3, #31
 8008974:	d53f      	bpl.n	80089f6 <st_uaua8_nn_mat_mult_nt_t+0x51a>
 8008976:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8008978:	2b00      	cmp	r3, #0
 800897a:	dd3c      	ble.n	80089f6 <st_uaua8_nn_mat_mult_nt_t+0x51a>
 800897c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800897e:	2500      	movs	r5, #0
 8008980:	f103 4680 	add.w	r6, r3, #1073741824	; 0x40000000
 8008984:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008986:	3e01      	subs	r6, #1
 8008988:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 800898c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800898e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8008990:	469a      	mov	sl, r3
 8008992:	f1c3 0701 	rsb	r7, r3, #1
 8008996:	9700      	str	r7, [sp, #0]
 8008998:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 800899c:	f8dd e0cc 	ldr.w	lr, [sp, #204]	; 0xcc
 80089a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80089a4:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 80089a6:	f1bb 0f00 	cmp.w	fp, #0
 80089aa:	6831      	ldr	r1, [r6, #0]
 80089ac:	dd0f      	ble.n	80089ce <st_uaua8_nn_mat_mult_nt_t+0x4f2>
 80089ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089b0:	eb00 0c0b 	add.w	ip, r0, fp
 80089b4:	1e5c      	subs	r4, r3, #1
 80089b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089ba:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80089be:	eba2 020e 	sub.w	r2, r2, lr
 80089c2:	eba3 0308 	sub.w	r3, r3, r8
 80089c6:	4560      	cmp	r0, ip
 80089c8:	fb02 1103 	mla	r1, r2, r3, r1
 80089cc:	d1f3      	bne.n	80089b6 <st_uaua8_nn_mat_mult_nt_t+0x4da>
 80089ce:	f1ba 0f00 	cmp.w	sl, #0
 80089d2:	f340 81a0 	ble.w	8008d16 <st_uaua8_nn_mat_mult_nt_t+0x83a>
 80089d6:	004b      	lsls	r3, r1, #1
 80089d8:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 80089da:	fb53 2307 	smmla	r3, r3, r7, r2
 80089de:	fa43 f30a 	asr.w	r3, r3, sl
 80089e2:	f383 0308 	usat	r3, #8, r3
 80089e6:	f889 3000 	strb.w	r3, [r9]
 80089ea:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80089ec:	3501      	adds	r5, #1
 80089ee:	4499      	add	r9, r3
 80089f0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80089f2:	42ab      	cmp	r3, r5
 80089f4:	d1d7      	bne.n	80089a6 <st_uaua8_nn_mat_mult_nt_t+0x4ca>
 80089f6:	2000      	movs	r0, #0
 80089f8:	b025      	add	sp, #148	; 0x94
 80089fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089fe:	4692      	mov	sl, r2
 8008a00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008a02:	2a00      	cmp	r2, #0
 8008a04:	f73f af6c 	bgt.w	80088e0 <st_uaua8_nn_mat_mult_nt_t+0x404>
 8008a08:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8008a0a:	fa06 f205 	lsl.w	r2, r6, r5
 8008a0e:	f302 021f 	ssat	r2, #32, r2
 8008a12:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8008a14:	fb52 f211 	smmulr	r2, r2, r1
 8008a18:	fa04 f105 	lsl.w	r1, r4, r5
 8008a1c:	f301 011f 	ssat	r1, #32, r1
 8008a20:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 8008a22:	fb51 f114 	smmulr	r1, r1, r4
 8008a26:	40a8      	lsls	r0, r5
 8008a28:	f300 001f 	ssat	r0, #32, r0
 8008a2c:	fb50 f014 	smmulr	r0, r0, r4
 8008a30:	40ab      	lsls	r3, r5
 8008a32:	f303 031f 	ssat	r3, #32, r3
 8008a36:	fb53 f314 	smmulr	r3, r3, r4
 8008a3a:	9c34      	ldr	r4, [sp, #208]	; 0xd0
 8008a3c:	4422      	add	r2, r4
 8008a3e:	f382 0208 	usat	r2, #8, r2
 8008a42:	9c01      	ldr	r4, [sp, #4]
 8008a44:	7022      	strb	r2, [r4, #0]
 8008a46:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8008a48:	4625      	mov	r5, r4
 8008a4a:	4410      	add	r0, r2
 8008a4c:	f380 0008 	usat	r0, #8, r0
 8008a50:	7060      	strb	r0, [r4, #1]
 8008a52:	9834      	ldr	r0, [sp, #208]	; 0xd0
 8008a54:	4622      	mov	r2, r4
 8008a56:	4401      	add	r1, r0
 8008a58:	f381 0108 	usat	r1, #8, r1
 8008a5c:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8008a5e:	5529      	strb	r1, [r5, r4]
 8008a60:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8008a62:	440b      	add	r3, r1
 8008a64:	f383 0308 	usat	r3, #8, r3
 8008a68:	4422      	add	r2, r4
 8008a6a:	7053      	strb	r3, [r2, #1]
 8008a6c:	9b01      	ldr	r3, [sp, #4]
 8008a6e:	e759      	b.n	8008924 <st_uaua8_nn_mat_mult_nt_t+0x448>
 8008a70:	468a      	mov	sl, r1
 8008a72:	e731      	b.n	80088d8 <st_uaua8_nn_mat_mult_nt_t+0x3fc>
 8008a74:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8008a76:	9808      	ldr	r0, [sp, #32]
 8008a78:	9e07      	ldr	r6, [sp, #28]
 8008a7a:	9300      	str	r3, [sp, #0]
 8008a7c:	4634      	mov	r4, r6
 8008a7e:	4603      	mov	r3, r0
 8008a80:	f04f 0900 	mov.w	r9, #0
 8008a84:	e694      	b.n	80087b0 <st_uaua8_nn_mat_mult_nt_t+0x2d4>
 8008a86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	f340 8156 	ble.w	8008d3a <st_uaua8_nn_mat_mult_nt_t+0x85e>
 8008a8e:	9b03      	ldr	r3, [sp, #12]
 8008a90:	9d36      	ldr	r5, [sp, #216]	; 0xd8
 8008a92:	eb0a 0e03 	add.w	lr, sl, r3
 8008a96:	e9dd 4307 	ldrd	r4, r3, [sp, #28]
 8008a9a:	f8da 2000 	ldr.w	r2, [sl]
 8008a9e:	6828      	ldr	r0, [r5, #0]
 8008aa0:	fa3f f182 	uxtb16	r1, r2
 8008aa4:	fa3f f292 	uxtb16	r2, r2, ror #8
 8008aa8:	fb21 4000 	smlad	r0, r1, r0, r4
 8008aac:	686c      	ldr	r4, [r5, #4]
 8008aae:	fb22 0404 	smlad	r4, r2, r4, r0
 8008ab2:	68a8      	ldr	r0, [r5, #8]
 8008ab4:	fb21 3300 	smlad	r3, r1, r0, r3
 8008ab8:	68e9      	ldr	r1, [r5, #12]
 8008aba:	fb22 3201 	smlad	r2, r2, r1, r3
 8008abe:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008ac2:	6928      	ldr	r0, [r5, #16]
 8008ac4:	fa3f f183 	uxtb16	r1, r3
 8008ac8:	fa3f f393 	uxtb16	r3, r3, ror #8
 8008acc:	fb21 4000 	smlad	r0, r1, r0, r4
 8008ad0:	696c      	ldr	r4, [r5, #20]
 8008ad2:	fb23 0404 	smlad	r4, r3, r4, r0
 8008ad6:	69a8      	ldr	r0, [r5, #24]
 8008ad8:	fb21 2100 	smlad	r1, r1, r0, r2
 8008adc:	69ea      	ldr	r2, [r5, #28]
 8008ade:	fb23 1302 	smlad	r3, r3, r2, r1
 8008ae2:	f8da 2008 	ldr.w	r2, [sl, #8]
 8008ae6:	6a28      	ldr	r0, [r5, #32]
 8008ae8:	fa3f f182 	uxtb16	r1, r2
 8008aec:	fa3f f292 	uxtb16	r2, r2, ror #8
 8008af0:	fb21 4000 	smlad	r0, r1, r0, r4
 8008af4:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 8008af6:	fb22 0606 	smlad	r6, r2, r6, r0
 8008afa:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8008afc:	fb21 3100 	smlad	r1, r1, r0, r3
 8008b00:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008b02:	fb22 1203 	smlad	r2, r2, r3, r1
 8008b06:	f8da 400c 	ldr.w	r4, [sl, #12]
 8008b0a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8008b0c:	f8d5 8034 	ldr.w	r8, [r5, #52]	; 0x34
 8008b10:	f8d5 c038 	ldr.w	ip, [r5, #56]	; 0x38
 8008b14:	6bef      	ldr	r7, [r5, #60]	; 0x3c
 8008b16:	f10a 0a10 	add.w	sl, sl, #16
 8008b1a:	3540      	adds	r5, #64	; 0x40
 8008b1c:	fa3f f184 	uxtb16	r1, r4
 8008b20:	fa3f f394 	uxtb16	r3, r4, ror #8
 8008b24:	fb21 6000 	smlad	r0, r1, r0, r6
 8008b28:	fb23 0408 	smlad	r4, r3, r8, r0
 8008b2c:	fb21 220c 	smlad	r2, r1, ip, r2
 8008b30:	fb23 2307 	smlad	r3, r3, r7, r2
 8008b34:	45f2      	cmp	sl, lr
 8008b36:	d1b0      	bne.n	8008a9a <st_uaua8_nn_mat_mult_nt_t+0x5be>
 8008b38:	e9cd 4307 	strd	r4, r3, [sp, #28]
 8008b3c:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 8008b40:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8008b44:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8008b46:	3b03      	subs	r3, #3
 8008b48:	459e      	cmp	lr, r3
 8008b4a:	da2e      	bge.n	8008baa <st_uaua8_nn_mat_mult_nt_t+0x6ce>
 8008b4c:	e9dd 4507 	ldrd	r4, r5, [sp, #28]
 8008b50:	4661      	mov	r1, ip
 8008b52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b54:	e9cd cb00 	strd	ip, fp, [sp]
 8008b58:	eba3 080e 	sub.w	r8, r3, lr
 8008b5c:	ea4f 0898 	mov.w	r8, r8, lsr #2
 8008b60:	f108 0901 	add.w	r9, r8, #1
 8008b64:	eb0a 0789 	add.w	r7, sl, r9, lsl #2
 8008b68:	f85a 3b04 	ldr.w	r3, [sl], #4
 8008b6c:	6808      	ldr	r0, [r1, #0]
 8008b6e:	f8d1 b004 	ldr.w	fp, [r1, #4]
 8008b72:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8008b76:	68ce      	ldr	r6, [r1, #12]
 8008b78:	fa3f f283 	uxtb16	r2, r3
 8008b7c:	3110      	adds	r1, #16
 8008b7e:	fa3f f393 	uxtb16	r3, r3, ror #8
 8008b82:	fb22 4400 	smlad	r4, r2, r0, r4
 8008b86:	fb23 440b 	smlad	r4, r3, fp, r4
 8008b8a:	fb22 550c 	smlad	r5, r2, ip, r5
 8008b8e:	fb23 5506 	smlad	r5, r3, r6, r5
 8008b92:	45ba      	cmp	sl, r7
 8008b94:	d1e8      	bne.n	8008b68 <st_uaua8_nn_mat_mult_nt_t+0x68c>
 8008b96:	e9dd cb00 	ldrd	ip, fp, [sp]
 8008b9a:	e9cd 4507 	strd	r4, r5, [sp, #28]
 8008b9e:	f10e 0e04 	add.w	lr, lr, #4
 8008ba2:	eb0e 0e88 	add.w	lr, lr, r8, lsl #2
 8008ba6:	eb0c 1c09 	add.w	ip, ip, r9, lsl #4
 8008baa:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8008bac:	4573      	cmp	r3, lr
 8008bae:	dd2f      	ble.n	8008c10 <st_uaua8_nn_mat_mult_nt_t+0x734>
 8008bb0:	f89a 2000 	ldrb.w	r2, [sl]
 8008bb4:	f8bc 3000 	ldrh.w	r3, [ip]
 8008bb8:	9807      	ldr	r0, [sp, #28]
 8008bba:	9c08      	ldr	r4, [sp, #32]
 8008bbc:	f8bc 1002 	ldrh.w	r1, [ip, #2]
 8008bc0:	fb13 0002 	smlabb	r0, r3, r2, r0
 8008bc4:	fb11 4402 	smlabb	r4, r1, r2, r4
 8008bc8:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8008bca:	f10e 0301 	add.w	r3, lr, #1
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	9007      	str	r0, [sp, #28]
 8008bd2:	9408      	str	r4, [sp, #32]
 8008bd4:	dd1c      	ble.n	8008c10 <st_uaua8_nn_mat_mult_nt_t+0x734>
 8008bd6:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8008bda:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 8008bde:	f8bc 1006 	ldrh.w	r1, [ip, #6]
 8008be2:	fb12 0003 	smlabb	r0, r2, r3, r0
 8008be6:	fb11 4403 	smlabb	r4, r1, r3, r4
 8008bea:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8008bec:	f10e 0e02 	add.w	lr, lr, #2
 8008bf0:	4573      	cmp	r3, lr
 8008bf2:	9007      	str	r0, [sp, #28]
 8008bf4:	9408      	str	r4, [sp, #32]
 8008bf6:	dd0b      	ble.n	8008c10 <st_uaua8_nn_mat_mult_nt_t+0x734>
 8008bf8:	f89a 3002 	ldrb.w	r3, [sl, #2]
 8008bfc:	f8bc 2008 	ldrh.w	r2, [ip, #8]
 8008c00:	f8bc 100a 	ldrh.w	r1, [ip, #10]
 8008c04:	fb12 0203 	smlabb	r2, r2, r3, r0
 8008c08:	fb11 4303 	smlabb	r3, r1, r3, r4
 8008c0c:	9207      	str	r2, [sp, #28]
 8008c0e:	9308      	str	r3, [sp, #32]
 8008c10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008c12:	9b07      	ldr	r3, [sp, #28]
 8008c14:	2900      	cmp	r1, #0
 8008c16:	dd64      	ble.n	8008ce2 <st_uaua8_nn_mat_mult_nt_t+0x806>
 8008c18:	9a08      	ldr	r2, [sp, #32]
 8008c1a:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8008c1c:	9c34      	ldr	r4, [sp, #208]	; 0xd0
 8008c1e:	005b      	lsls	r3, r3, #1
 8008c20:	0052      	lsls	r2, r2, #1
 8008c22:	fb53 4300 	smmla	r3, r3, r0, r4
 8008c26:	fb52 4200 	smmla	r2, r2, r0, r4
 8008c2a:	410b      	asrs	r3, r1
 8008c2c:	f383 0308 	usat	r3, #8, r3
 8008c30:	f88b 3000 	strb.w	r3, [fp]
 8008c34:	410a      	asrs	r2, r1
 8008c36:	f382 0308 	usat	r3, #8, r2
 8008c3a:	f88b 3001 	strb.w	r3, [fp, #1]
 8008c3e:	e681      	b.n	8008944 <st_uaua8_nn_mat_mult_nt_t+0x468>
 8008c40:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8008c42:	2c00      	cmp	r4, #0
 8008c44:	d075      	beq.n	8008d32 <st_uaua8_nn_mat_mult_nt_t+0x856>
 8008c46:	2300      	movs	r3, #0
 8008c48:	4619      	mov	r1, r3
 8008c4a:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8008c4c:	f102 0010 	add.w	r0, r2, #16
 8008c50:	f930 5c10 	ldrsh.w	r5, [r0, #-16]
 8008c54:	f930 2c08 	ldrsh.w	r2, [r0, #-8]
 8008c58:	1b49      	subs	r1, r1, r5
 8008c5a:	1a9b      	subs	r3, r3, r2
 8008c5c:	f930 5c0e 	ldrsh.w	r5, [r0, #-14]
 8008c60:	f930 2c06 	ldrsh.w	r2, [r0, #-6]
 8008c64:	1b49      	subs	r1, r1, r5
 8008c66:	1a9b      	subs	r3, r3, r2
 8008c68:	f930 5c0c 	ldrsh.w	r5, [r0, #-12]
 8008c6c:	f930 2c04 	ldrsh.w	r2, [r0, #-4]
 8008c70:	1b49      	subs	r1, r1, r5
 8008c72:	1a9b      	subs	r3, r3, r2
 8008c74:	f930 5c0a 	ldrsh.w	r5, [r0, #-10]
 8008c78:	f930 2c02 	ldrsh.w	r2, [r0, #-2]
 8008c7c:	3c01      	subs	r4, #1
 8008c7e:	eba1 0105 	sub.w	r1, r1, r5
 8008c82:	eba3 0302 	sub.w	r3, r3, r2
 8008c86:	f100 0010 	add.w	r0, r0, #16
 8008c8a:	d1e1      	bne.n	8008c50 <st_uaua8_nn_mat_mult_nt_t+0x774>
 8008c8c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008c8e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008c90:	b1cd      	cbz	r5, 8008cc6 <st_uaua8_nn_mat_mult_nt_t+0x7ea>
 8008c92:	f9b2 4000 	ldrsh.w	r4, [r2]
 8008c96:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 8008c9a:	2d01      	cmp	r5, #1
 8008c9c:	eba1 0104 	sub.w	r1, r1, r4
 8008ca0:	eba3 0300 	sub.w	r3, r3, r0
 8008ca4:	d00f      	beq.n	8008cc6 <st_uaua8_nn_mat_mult_nt_t+0x7ea>
 8008ca6:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
 8008caa:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
 8008cae:	2d02      	cmp	r5, #2
 8008cb0:	eba1 0104 	sub.w	r1, r1, r4
 8008cb4:	eba3 0300 	sub.w	r3, r3, r0
 8008cb8:	d005      	beq.n	8008cc6 <st_uaua8_nn_mat_mult_nt_t+0x7ea>
 8008cba:	f9b2 0008 	ldrsh.w	r0, [r2, #8]
 8008cbe:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8008cc2:	1a09      	subs	r1, r1, r0
 8008cc4:	1a9b      	subs	r3, r3, r2
 8008cc6:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8008cc8:	fb02 f101 	mul.w	r1, r2, r1
 8008ccc:	fb02 f003 	mul.w	r0, r2, r3
 8008cd0:	e4ac      	b.n	800862c <st_uaua8_nn_mat_mult_nt_t+0x150>
 8008cd2:	4638      	mov	r0, r7
 8008cd4:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8008cd6:	e485      	b.n	80085e4 <st_uaua8_nn_mat_mult_nt_t+0x108>
 8008cd8:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 8008cdc:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8008ce0:	e62c      	b.n	800893c <st_uaua8_nn_mat_mult_nt_t+0x460>
 8008ce2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008ce4:	408b      	lsls	r3, r1
 8008ce6:	f303 031f 	ssat	r3, #32, r3
 8008cea:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8008cec:	fb53 f312 	smmulr	r3, r3, r2
 8008cf0:	9a08      	ldr	r2, [sp, #32]
 8008cf2:	408a      	lsls	r2, r1
 8008cf4:	f302 021f 	ssat	r2, #32, r2
 8008cf8:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8008cfa:	fb52 f211 	smmulr	r2, r2, r1
 8008cfe:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8008d00:	440b      	add	r3, r1
 8008d02:	f383 0308 	usat	r3, #8, r3
 8008d06:	f88b 3000 	strb.w	r3, [fp]
 8008d0a:	1853      	adds	r3, r2, r1
 8008d0c:	f383 0308 	usat	r3, #8, r3
 8008d10:	f88b 3001 	strb.w	r3, [fp, #1]
 8008d14:	e616      	b.n	8008944 <st_uaua8_nn_mat_mult_nt_t+0x468>
 8008d16:	9b00      	ldr	r3, [sp, #0]
 8008d18:	fa01 f303 	lsl.w	r3, r1, r3
 8008d1c:	f303 031f 	ssat	r3, #32, r3
 8008d20:	fb53 f317 	smmulr	r3, r3, r7
 8008d24:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8008d26:	4413      	add	r3, r2
 8008d28:	f383 0308 	usat	r3, #8, r3
 8008d2c:	f889 3000 	strb.w	r3, [r9]
 8008d30:	e65b      	b.n	80089ea <st_uaua8_nn_mat_mult_nt_t+0x50e>
 8008d32:	4621      	mov	r1, r4
 8008d34:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8008d36:	4623      	mov	r3, r4
 8008d38:	e7a9      	b.n	8008c8e <st_uaua8_nn_mat_mult_nt_t+0x7b2>
 8008d3a:	f8dd c0d8 	ldr.w	ip, [sp, #216]	; 0xd8
 8008d3e:	f04f 0e00 	mov.w	lr, #0
 8008d42:	e6ff      	b.n	8008b44 <st_uaua8_nn_mat_mult_nt_t+0x668>

08008d44 <st_uaua8_nn_mat_mult_kernel>:
 8008d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d48:	461c      	mov	r4, r3
 8008d4a:	b0a1      	sub	sp, #132	; 0x84
 8008d4c:	9306      	str	r3, [sp, #24]
 8008d4e:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 8008d52:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 8008d56:	08a5      	lsrs	r5, r4, #2
 8008d58:	fb13 f30a 	smulbb	r3, r3, sl
 8008d5c:	9000      	str	r0, [sp, #0]
 8008d5e:	4620      	mov	r0, r4
 8008d60:	fb04 f403 	mul.w	r4, r4, r3
 8008d64:	9411      	str	r4, [sp, #68]	; 0x44
 8008d66:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8008d68:	0853      	lsrs	r3, r2, #1
 8008d6a:	4414      	add	r4, r2
 8008d6c:	921d      	str	r2, [sp, #116]	; 0x74
 8008d6e:	460a      	mov	r2, r1
 8008d70:	910f      	str	r1, [sp, #60]	; 0x3c
 8008d72:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8008d76:	911a      	str	r1, [sp, #104]	; 0x68
 8008d78:	f9bd 10a8 	ldrsh.w	r1, [sp, #168]	; 0xa8
 8008d7c:	9301      	str	r3, [sp, #4]
 8008d7e:	2d80      	cmp	r5, #128	; 0x80
 8008d80:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8008d84:	951b      	str	r5, [sp, #108]	; 0x6c
 8008d86:	9419      	str	r4, [sp, #100]	; 0x64
 8008d88:	930a      	str	r3, [sp, #40]	; 0x28
 8008d8a:	9110      	str	r1, [sp, #64]	; 0x40
 8008d8c:	f240 8396 	bls.w	80094bc <st_uaua8_nn_mat_mult_kernel+0x778>
 8008d90:	2700      	movs	r7, #0
 8008d92:	469e      	mov	lr, r3
 8008d94:	46bc      	mov	ip, r7
 8008d96:	f1a5 0381 	sub.w	r3, r5, #129	; 0x81
 8008d9a:	4615      	mov	r5, r2
 8008d9c:	f3c3 19c8 	ubfx	r9, r3, #7, #9
 8008da0:	f109 0301 	add.w	r3, r9, #1
 8008da4:	ea4f 2b83 	mov.w	fp, r3, lsl #10
 8008da8:	eb02 080b 	add.w	r8, r2, fp
 8008dac:	2200      	movs	r2, #0
 8008dae:	4674      	mov	r4, lr
 8008db0:	4613      	mov	r3, r2
 8008db2:	4628      	mov	r0, r5
 8008db4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008db8:	6806      	ldr	r6, [r0, #0]
 8008dba:	fa93 f646 	uadd16	r6, r3, r6
 8008dbe:	6823      	ldr	r3, [r4, #0]
 8008dc0:	fa92 f243 	uadd16	r2, r2, r3
 8008dc4:	6843      	ldr	r3, [r0, #4]
 8008dc6:	6861      	ldr	r1, [r4, #4]
 8008dc8:	3008      	adds	r0, #8
 8008dca:	3408      	adds	r4, #8
 8008dcc:	fa96 f343 	uadd16	r3, r6, r3
 8008dd0:	fa92 f241 	uadd16	r2, r2, r1
 8008dd4:	4285      	cmp	r5, r0
 8008dd6:	d1ef      	bne.n	8008db8 <st_uaua8_nn_mat_mult_kernel+0x74>
 8008dd8:	0c18      	lsrs	r0, r3, #16
 8008dda:	0c11      	lsrs	r1, r2, #16
 8008ddc:	fa10 f383 	uxtah	r3, r0, r3
 8008de0:	fa11 f282 	uxtah	r2, r1, r2
 8008de4:	45a8      	cmp	r8, r5
 8008de6:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 8008dea:	449c      	add	ip, r3
 8008dec:	4417      	add	r7, r2
 8008dee:	d1dd      	bne.n	8008dac <st_uaua8_nn_mat_mult_kernel+0x68>
 8008df0:	462e      	mov	r6, r5
 8008df2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008df4:	ebc9 2349 	rsb	r3, r9, r9, lsl #9
 8008df8:	3a80      	subs	r2, #128	; 0x80
 8008dfa:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
 8008dfe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e00:	eb02 0e0b 	add.w	lr, r2, fp
 8008e04:	b29a      	uxth	r2, r3
 8008e06:	b312      	cbz	r2, 8008e4e <st_uaua8_nn_mat_mult_kernel+0x10a>
 8008e08:	2300      	movs	r3, #0
 8008e0a:	4674      	mov	r4, lr
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	3a01      	subs	r2, #1
 8008e10:	b292      	uxth	r2, r2
 8008e12:	3201      	adds	r2, #1
 8008e14:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8008e18:	eb06 0508 	add.w	r5, r6, r8
 8008e1c:	6832      	ldr	r2, [r6, #0]
 8008e1e:	fa91 f142 	uadd16	r1, r1, r2
 8008e22:	6822      	ldr	r2, [r4, #0]
 8008e24:	fa93 f342 	uadd16	r3, r3, r2
 8008e28:	6870      	ldr	r0, [r6, #4]
 8008e2a:	6862      	ldr	r2, [r4, #4]
 8008e2c:	3608      	adds	r6, #8
 8008e2e:	3408      	adds	r4, #8
 8008e30:	fa91 f140 	uadd16	r1, r1, r0
 8008e34:	fa93 f342 	uadd16	r3, r3, r2
 8008e38:	42ae      	cmp	r6, r5
 8008e3a:	d1ef      	bne.n	8008e1c <st_uaua8_nn_mat_mult_kernel+0xd8>
 8008e3c:	0c0a      	lsrs	r2, r1, #16
 8008e3e:	fa12 f181 	uxtah	r1, r2, r1
 8008e42:	0c1a      	lsrs	r2, r3, #16
 8008e44:	fa12 f383 	uxtah	r3, r2, r3
 8008e48:	44c6      	add	lr, r8
 8008e4a:	448c      	add	ip, r1
 8008e4c:	441f      	add	r7, r3
 8008e4e:	9b06      	ldr	r3, [sp, #24]
 8008e50:	f013 0103 	ands.w	r1, r3, #3
 8008e54:	911f      	str	r1, [sp, #124]	; 0x7c
 8008e56:	d012      	beq.n	8008e7e <st_uaua8_nn_mat_mult_kernel+0x13a>
 8008e58:	8832      	ldrh	r2, [r6, #0]
 8008e5a:	f8be 3000 	ldrh.w	r3, [lr]
 8008e5e:	2901      	cmp	r1, #1
 8008e60:	4494      	add	ip, r2
 8008e62:	441f      	add	r7, r3
 8008e64:	d00b      	beq.n	8008e7e <st_uaua8_nn_mat_mult_kernel+0x13a>
 8008e66:	8872      	ldrh	r2, [r6, #2]
 8008e68:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8008e6c:	2902      	cmp	r1, #2
 8008e6e:	4494      	add	ip, r2
 8008e70:	441f      	add	r7, r3
 8008e72:	d004      	beq.n	8008e7e <st_uaua8_nn_mat_mult_kernel+0x13a>
 8008e74:	88b3      	ldrh	r3, [r6, #4]
 8008e76:	f8be 2004 	ldrh.w	r2, [lr, #4]
 8008e7a:	449c      	add	ip, r3
 8008e7c:	4417      	add	r7, r2
 8008e7e:	fb0c f30a 	mul.w	r3, ip, sl
 8008e82:	9312      	str	r3, [sp, #72]	; 0x48
 8008e84:	fb07 f30a 	mul.w	r3, r7, sl
 8008e88:	9a01      	ldr	r2, [sp, #4]
 8008e8a:	9313      	str	r3, [sp, #76]	; 0x4c
 8008e8c:	2a00      	cmp	r2, #0
 8008e8e:	f000 822f 	beq.w	80092f0 <st_uaua8_nn_mat_mult_kernel+0x5ac>
 8008e92:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008e94:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8008e96:	9308      	str	r3, [sp, #32]
 8008e98:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8008e9a:	9806      	ldr	r0, [sp, #24]
 8008e9c:	9309      	str	r3, [sp, #36]	; 0x24
 8008e9e:	1e53      	subs	r3, r2, #1
 8008ea0:	b29c      	uxth	r4, r3
 8008ea2:	462b      	mov	r3, r5
 8008ea4:	f1a0 0110 	sub.w	r1, r0, #16
 8008ea8:	0909      	lsrs	r1, r1, #4
 8008eaa:	3101      	adds	r1, #1
 8008eac:	014a      	lsls	r2, r1, #5
 8008eae:	0109      	lsls	r1, r1, #4
 8008eb0:	910b      	str	r1, [sp, #44]	; 0x2c
 8008eb2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008eb4:	3310      	adds	r3, #16
 8008eb6:	4411      	add	r1, r2
 8008eb8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008ebc:	9117      	str	r1, [sp, #92]	; 0x5c
 8008ebe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008ec0:	9314      	str	r3, [sp, #80]	; 0x50
 8008ec2:	1f03      	subs	r3, r0, #4
 8008ec4:	188a      	adds	r2, r1, r2
 8008ec6:	9318      	str	r3, [sp, #96]	; 0x60
 8008ec8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008eca:	9216      	str	r2, [sp, #88]	; 0x58
 8008ecc:	1ec2      	subs	r2, r0, #3
 8008ece:	f1c3 0301 	rsb	r3, r3, #1
 8008ed2:	9215      	str	r2, [sp, #84]	; 0x54
 8008ed4:	f105 0208 	add.w	r2, r5, #8
 8008ed8:	931c      	str	r3, [sp, #112]	; 0x70
 8008eda:	4613      	mov	r3, r2
 8008edc:	f8dd a000 	ldr.w	sl, [sp]
 8008ee0:	941e      	str	r4, [sp, #120]	; 0x78
 8008ee2:	9207      	str	r2, [sp, #28]
 8008ee4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008ee6:	f853 2c08 	ldr.w	r2, [r3, #-8]
 8008eea:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8008eee:	440a      	add	r2, r1
 8008ef0:	440b      	add	r3, r1
 8008ef2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8008ef4:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008ef6:	1a1f      	subs	r7, r3, r0
 8008ef8:	eba3 0b01 	sub.w	fp, r3, r1
 8008efc:	9b06      	ldr	r3, [sp, #24]
 8008efe:	eba2 0c01 	sub.w	ip, r2, r1
 8008f02:	1a14      	subs	r4, r2, r0
 8008f04:	2b0f      	cmp	r3, #15
 8008f06:	eb0a 0203 	add.w	r2, sl, r3
 8008f0a:	9202      	str	r2, [sp, #8]
 8008f0c:	f340 82ab 	ble.w	8009466 <st_uaua8_nn_mat_mult_kernel+0x722>
 8008f10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f12:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8008f16:	4453      	add	r3, sl
 8008f18:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8008f1c:	9200      	str	r2, [sp, #0]
 8008f1e:	9303      	str	r3, [sp, #12]
 8008f20:	f8da 3000 	ldr.w	r3, [sl]
 8008f24:	9a00      	ldr	r2, [sp, #0]
 8008f26:	ea4f 2033 	mov.w	r0, r3, ror #8
 8008f2a:	6812      	ldr	r2, [r2, #0]
 8008f2c:	fa3f fe80 	uxtb16	lr, r0
 8008f30:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8008f34:	0436      	lsls	r6, r6, #16
 8008f36:	fa3f f383 	uxtb16	r3, r3
 8008f3a:	ea4f 2532 	mov.w	r5, r2, ror #8
 8008f3e:	b298      	uxth	r0, r3
 8008f40:	fa3f f585 	uxtb16	r5, r5
 8008f44:	ea46 4313 	orr.w	r3, r6, r3, lsr #16
 8008f48:	0c2e      	lsrs	r6, r5, #16
 8008f4a:	fa3f f282 	uxtb16	r2, r2
 8008f4e:	0436      	lsls	r6, r6, #16
 8008f50:	b291      	uxth	r1, r2
 8008f52:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8008f56:	ea46 4212 	orr.w	r2, r6, r2, lsr #16
 8008f5a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8008f5e:	f8d8 5000 	ldr.w	r5, [r8]
 8008f62:	f8d9 6000 	ldr.w	r6, [r9]
 8008f66:	fb20 cc05 	smlad	ip, r0, r5, ip
 8008f6a:	fb20 4406 	smlad	r4, r0, r6, r4
 8008f6e:	fb21 bb05 	smlad	fp, r1, r5, fp
 8008f72:	fb21 7106 	smlad	r1, r1, r6, r7
 8008f76:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008f7a:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8008f7e:	fb23 cc07 	smlad	ip, r3, r7, ip
 8008f82:	fb23 4400 	smlad	r4, r3, r0, r4
 8008f86:	fb22 b707 	smlad	r7, r2, r7, fp
 8008f8a:	fb22 1200 	smlad	r2, r2, r0, r1
 8008f8e:	f8da 0004 	ldr.w	r0, [sl, #4]
 8008f92:	9b00      	ldr	r3, [sp, #0]
 8008f94:	6859      	ldr	r1, [r3, #4]
 8008f96:	ea4f 2330 	mov.w	r3, r0, ror #8
 8008f9a:	fa3f fb83 	uxtb16	fp, r3
 8008f9e:	ea4f 451b 	mov.w	r5, fp, lsr #16
 8008fa2:	042d      	lsls	r5, r5, #16
 8008fa4:	fa3f f080 	uxtb16	r0, r0
 8008fa8:	ea4f 2e31 	mov.w	lr, r1, ror #8
 8008fac:	b283      	uxth	r3, r0
 8008fae:	fa3f fe8e 	uxtb16	lr, lr
 8008fb2:	ea45 4010 	orr.w	r0, r5, r0, lsr #16
 8008fb6:	ea4f 451e 	mov.w	r5, lr, lsr #16
 8008fba:	fa3f f181 	uxtb16	r1, r1
 8008fbe:	042d      	lsls	r5, r5, #16
 8008fc0:	b28e      	uxth	r6, r1
 8008fc2:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
 8008fc6:	ea45 4111 	orr.w	r1, r5, r1, lsr #16
 8008fca:	ea43 430b 	orr.w	r3, r3, fp, lsl #16
 8008fce:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8008fd2:	f8d9 e008 	ldr.w	lr, [r9, #8]
 8008fd6:	fb23 cc05 	smlad	ip, r3, r5, ip
 8008fda:	fb23 440e 	smlad	r4, r3, lr, r4
 8008fde:	fb26 7705 	smlad	r7, r6, r5, r7
 8008fe2:	fb26 260e 	smlad	r6, r6, lr, r2
 8008fe6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008fea:	f8d9 500c 	ldr.w	r5, [r9, #12]
 8008fee:	fb20 cc03 	smlad	ip, r0, r3, ip
 8008ff2:	fb20 4405 	smlad	r4, r0, r5, r4
 8008ff6:	fb21 7703 	smlad	r7, r1, r3, r7
 8008ffa:	fb21 6505 	smlad	r5, r1, r5, r6
 8008ffe:	f8da 0008 	ldr.w	r0, [sl, #8]
 8009002:	9900      	ldr	r1, [sp, #0]
 8009004:	ea4f 2330 	mov.w	r3, r0, ror #8
 8009008:	6889      	ldr	r1, [r1, #8]
 800900a:	fa3f fb83 	uxtb16	fp, r3
 800900e:	ea4f 4e1b 	mov.w	lr, fp, lsr #16
 8009012:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 8009016:	fa3f f080 	uxtb16	r0, r0
 800901a:	ea4f 2631 	mov.w	r6, r1, ror #8
 800901e:	b283      	uxth	r3, r0
 8009020:	fa3f f686 	uxtb16	r6, r6
 8009024:	ea4e 4010 	orr.w	r0, lr, r0, lsr #16
 8009028:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 800902c:	fa3f f181 	uxtb16	r1, r1
 8009030:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 8009034:	b28a      	uxth	r2, r1
 8009036:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800903a:	ea4e 4111 	orr.w	r1, lr, r1, lsr #16
 800903e:	ea43 430b 	orr.w	r3, r3, fp, lsl #16
 8009042:	f8d8 6010 	ldr.w	r6, [r8, #16]
 8009046:	f8d9 e010 	ldr.w	lr, [r9, #16]
 800904a:	fb23 cc06 	smlad	ip, r3, r6, ip
 800904e:	fb23 430e 	smlad	r3, r3, lr, r4
 8009052:	fb22 7706 	smlad	r7, r2, r6, r7
 8009056:	fb22 520e 	smlad	r2, r2, lr, r5
 800905a:	f8d8 5014 	ldr.w	r5, [r8, #20]
 800905e:	f8d9 4014 	ldr.w	r4, [r9, #20]
 8009062:	fb20 cc05 	smlad	ip, r0, r5, ip
 8009066:	fb20 3004 	smlad	r0, r0, r4, r3
 800906a:	fb21 7705 	smlad	r7, r1, r5, r7
 800906e:	fb21 2104 	smlad	r1, r1, r4, r2
 8009072:	f8da 400c 	ldr.w	r4, [sl, #12]
 8009076:	9101      	str	r1, [sp, #4]
 8009078:	9900      	ldr	r1, [sp, #0]
 800907a:	ea4f 2334 	mov.w	r3, r4, ror #8
 800907e:	68cd      	ldr	r5, [r1, #12]
 8009080:	fa3f fb83 	uxtb16	fp, r3
 8009084:	ea4f 461b 	mov.w	r6, fp, lsr #16
 8009088:	0436      	lsls	r6, r6, #16
 800908a:	fa3f f484 	uxtb16	r4, r4
 800908e:	ea4f 2e35 	mov.w	lr, r5, ror #8
 8009092:	b2a3      	uxth	r3, r4
 8009094:	fa3f fe8e 	uxtb16	lr, lr
 8009098:	ea46 4414 	orr.w	r4, r6, r4, lsr #16
 800909c:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80090a0:	fa3f f585 	uxtb16	r5, r5
 80090a4:	0436      	lsls	r6, r6, #16
 80090a6:	b2aa      	uxth	r2, r5
 80090a8:	3110      	adds	r1, #16
 80090aa:	ea43 430b 	orr.w	r3, r3, fp, lsl #16
 80090ae:	ea46 4515 	orr.w	r5, r6, r5, lsr #16
 80090b2:	f10a 0a10 	add.w	sl, sl, #16
 80090b6:	9100      	str	r1, [sp, #0]
 80090b8:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80090bc:	f8d8 b018 	ldr.w	fp, [r8, #24]
 80090c0:	f8d9 6018 	ldr.w	r6, [r9, #24]
 80090c4:	fb23 cc0b 	smlad	ip, r3, fp, ip
 80090c8:	fb23 0306 	smlad	r3, r3, r6, r0
 80090cc:	fb22 7b0b 	smlad	fp, r2, fp, r7
 80090d0:	9901      	ldr	r1, [sp, #4]
 80090d2:	fb22 1206 	smlad	r2, r2, r6, r1
 80090d6:	f8d8 101c 	ldr.w	r1, [r8, #28]
 80090da:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80090de:	f108 0820 	add.w	r8, r8, #32
 80090e2:	f109 0920 	add.w	r9, r9, #32
 80090e6:	fb24 cc01 	smlad	ip, r4, r1, ip
 80090ea:	fb24 3407 	smlad	r4, r4, r7, r3
 80090ee:	fb25 bb01 	smlad	fp, r5, r1, fp
 80090f2:	fb25 2707 	smlad	r7, r5, r7, r2
 80090f6:	9b03      	ldr	r3, [sp, #12]
 80090f8:	459a      	cmp	sl, r3
 80090fa:	f47f af11 	bne.w	8008f20 <st_uaua8_nn_mat_mult_kernel+0x1dc>
 80090fe:	9a02      	ldr	r2, [sp, #8]
 8009100:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009102:	4611      	mov	r1, r2
 8009104:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009106:	4419      	add	r1, r3
 8009108:	9205      	str	r2, [sp, #20]
 800910a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800910c:	9102      	str	r1, [sp, #8]
 800910e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8009112:	9915      	ldr	r1, [sp, #84]	; 0x54
 8009114:	428b      	cmp	r3, r1
 8009116:	da5f      	bge.n	80091d8 <st_uaua8_nn_mat_mult_kernel+0x494>
 8009118:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800911c:	9a02      	ldr	r2, [sp, #8]
 800911e:	9200      	str	r2, [sp, #0]
 8009120:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009122:	1ad3      	subs	r3, r2, r3
 8009124:	089b      	lsrs	r3, r3, #2
 8009126:	930e      	str	r3, [sp, #56]	; 0x38
 8009128:	3301      	adds	r3, #1
 800912a:	930d      	str	r3, [sp, #52]	; 0x34
 800912c:	009b      	lsls	r3, r3, #2
 800912e:	930c      	str	r3, [sp, #48]	; 0x30
 8009130:	4453      	add	r3, sl
 8009132:	9301      	str	r3, [sp, #4]
 8009134:	9b00      	ldr	r3, [sp, #0]
 8009136:	f85a 0b04 	ldr.w	r0, [sl], #4
 800913a:	f853 1b04 	ldr.w	r1, [r3], #4
 800913e:	ea4f 2e30 	mov.w	lr, r0, ror #8
 8009142:	fa3f fe8e 	uxtb16	lr, lr
 8009146:	ea4f 451e 	mov.w	r5, lr, lsr #16
 800914a:	042d      	lsls	r5, r5, #16
 800914c:	fa3f f080 	uxtb16	r0, r0
 8009150:	ea4f 2631 	mov.w	r6, r1, ror #8
 8009154:	b282      	uxth	r2, r0
 8009156:	fa3f f686 	uxtb16	r6, r6
 800915a:	ea45 4010 	orr.w	r0, r5, r0, lsr #16
 800915e:	0c35      	lsrs	r5, r6, #16
 8009160:	9300      	str	r3, [sp, #0]
 8009162:	fa3f f181 	uxtb16	r1, r1
 8009166:	042d      	lsls	r5, r5, #16
 8009168:	b28b      	uxth	r3, r1
 800916a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800916e:	ea45 4111 	orr.w	r1, r5, r1, lsr #16
 8009172:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8009176:	f8d8 5000 	ldr.w	r5, [r8]
 800917a:	f8d9 6000 	ldr.w	r6, [r9]
 800917e:	fb22 cc05 	smlad	ip, r2, r5, ip
 8009182:	fb22 4206 	smlad	r2, r2, r6, r4
 8009186:	fb23 bb05 	smlad	fp, r3, r5, fp
 800918a:	fb23 7306 	smlad	r3, r3, r6, r7
 800918e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009192:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8009196:	f108 0808 	add.w	r8, r8, #8
 800919a:	f109 0908 	add.w	r9, r9, #8
 800919e:	fb20 cc05 	smlad	ip, r0, r5, ip
 80091a2:	fb20 2407 	smlad	r4, r0, r7, r2
 80091a6:	fb21 bb05 	smlad	fp, r1, r5, fp
 80091aa:	fb21 3707 	smlad	r7, r1, r7, r3
 80091ae:	9b01      	ldr	r3, [sp, #4]
 80091b0:	4553      	cmp	r3, sl
 80091b2:	d1bf      	bne.n	8009134 <st_uaua8_nn_mat_mult_kernel+0x3f0>
 80091b4:	9a03      	ldr	r2, [sp, #12]
 80091b6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80091b8:	3204      	adds	r2, #4
 80091ba:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80091be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091c0:	9203      	str	r2, [sp, #12]
 80091c2:	9a04      	ldr	r2, [sp, #16]
 80091c4:	00db      	lsls	r3, r3, #3
 80091c6:	441a      	add	r2, r3
 80091c8:	9204      	str	r2, [sp, #16]
 80091ca:	9a05      	ldr	r2, [sp, #20]
 80091cc:	441a      	add	r2, r3
 80091ce:	9205      	str	r2, [sp, #20]
 80091d0:	9b02      	ldr	r3, [sp, #8]
 80091d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80091d4:	4413      	add	r3, r2
 80091d6:	9302      	str	r3, [sp, #8]
 80091d8:	9d06      	ldr	r5, [sp, #24]
 80091da:	9e03      	ldr	r6, [sp, #12]
 80091dc:	42b5      	cmp	r5, r6
 80091de:	dd3b      	ble.n	8009258 <st_uaua8_nn_mat_mult_kernel+0x514>
 80091e0:	9a04      	ldr	r2, [sp, #16]
 80091e2:	f89a 3000 	ldrb.w	r3, [sl]
 80091e6:	8810      	ldrh	r0, [r2, #0]
 80091e8:	9a05      	ldr	r2, [sp, #20]
 80091ea:	9902      	ldr	r1, [sp, #8]
 80091ec:	8812      	ldrh	r2, [r2, #0]
 80091ee:	7809      	ldrb	r1, [r1, #0]
 80091f0:	fb00 cc03 	mla	ip, r0, r3, ip
 80091f4:	fb02 4403 	mla	r4, r2, r3, r4
 80091f8:	1c73      	adds	r3, r6, #1
 80091fa:	429d      	cmp	r5, r3
 80091fc:	fb01 bb00 	mla	fp, r1, r0, fp
 8009200:	fb01 7702 	mla	r7, r1, r2, r7
 8009204:	f340 812c 	ble.w	8009460 <st_uaua8_nn_mat_mult_kernel+0x71c>
 8009208:	4635      	mov	r5, r6
 800920a:	9b04      	ldr	r3, [sp, #16]
 800920c:	9a02      	ldr	r2, [sp, #8]
 800920e:	8859      	ldrh	r1, [r3, #2]
 8009210:	9b05      	ldr	r3, [sp, #20]
 8009212:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8009216:	885b      	ldrh	r3, [r3, #2]
 8009218:	7852      	ldrb	r2, [r2, #1]
 800921a:	fb03 4400 	mla	r4, r3, r0, r4
 800921e:	fb02 7703 	mla	r7, r2, r3, r7
 8009222:	9b06      	ldr	r3, [sp, #24]
 8009224:	3502      	adds	r5, #2
 8009226:	42ab      	cmp	r3, r5
 8009228:	fb01 cc00 	mla	ip, r1, r0, ip
 800922c:	fb02 bb01 	mla	fp, r2, r1, fp
 8009230:	f340 8120 	ble.w	8009474 <st_uaua8_nn_mat_mult_kernel+0x730>
 8009234:	9b04      	ldr	r3, [sp, #16]
 8009236:	f10a 0a03 	add.w	sl, sl, #3
 800923a:	889a      	ldrh	r2, [r3, #4]
 800923c:	9b05      	ldr	r3, [sp, #20]
 800923e:	8899      	ldrh	r1, [r3, #4]
 8009240:	9b02      	ldr	r3, [sp, #8]
 8009242:	7898      	ldrb	r0, [r3, #2]
 8009244:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
 8009248:	fb00 bb02 	mla	fp, r0, r2, fp
 800924c:	fb00 7701 	mla	r7, r0, r1, r7
 8009250:	fb02 cc03 	mla	ip, r2, r3, ip
 8009254:	fb01 4403 	mla	r4, r1, r3, r4
 8009258:	9809      	ldr	r0, [sp, #36]	; 0x24
 800925a:	9d08      	ldr	r5, [sp, #32]
 800925c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800925e:	3002      	adds	r0, #2
 8009260:	3502      	adds	r5, #2
 8009262:	2b00      	cmp	r3, #0
 8009264:	9009      	str	r0, [sp, #36]	; 0x24
 8009266:	9508      	str	r5, [sp, #32]
 8009268:	f340 80c3 	ble.w	80093f2 <st_uaua8_nn_mat_mult_kernel+0x6ae>
 800926c:	992b      	ldr	r1, [sp, #172]	; 0xac
 800926e:	0062      	lsls	r2, r4, #1
 8009270:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 8009274:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 8009276:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800927a:	fb52 4201 	smmla	r2, r2, r1, r4
 800927e:	fb5c 4c01 	smmla	ip, ip, r1, r4
 8009282:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8009286:	992b      	ldr	r1, [sp, #172]	; 0xac
 8009288:	fa4c fc03 	asr.w	ip, ip, r3
 800928c:	fb5b 4b01 	smmla	fp, fp, r1, r4
 8009290:	fb5e 4e01 	smmla	lr, lr, r1, r4
 8009294:	f38c 0c08 	usat	ip, #8, ip
 8009298:	f800 cc02 	strb.w	ip, [r0, #-2]
 800929c:	4619      	mov	r1, r3
 800929e:	fa4b fb03 	asr.w	fp, fp, r3
 80092a2:	f38b 0308 	usat	r3, #8, fp
 80092a6:	f800 3c01 	strb.w	r3, [r0, #-1]
 80092aa:	410a      	asrs	r2, r1
 80092ac:	f382 0308 	usat	r3, #8, r2
 80092b0:	f805 3c02 	strb.w	r3, [r5, #-2]
 80092b4:	fa4e fe01 	asr.w	lr, lr, r1
 80092b8:	f38e 0308 	usat	r3, #8, lr
 80092bc:	f805 3c01 	strb.w	r3, [r5, #-1]
 80092c0:	9a06      	ldr	r2, [sp, #24]
 80092c2:	9b07      	ldr	r3, [sp, #28]
 80092c4:	4492      	add	sl, r2
 80092c6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80092c8:	3308      	adds	r3, #8
 80092ca:	429a      	cmp	r2, r3
 80092cc:	9307      	str	r3, [sp, #28]
 80092ce:	f47f ae09 	bne.w	8008ee4 <st_uaua8_nn_mat_mult_kernel+0x1a0>
 80092d2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80092d4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80092d6:	3301      	adds	r3, #1
 80092d8:	005a      	lsls	r2, r3, #1
 80092da:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80092de:	931a      	str	r3, [sp, #104]	; 0x68
 80092e0:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80092e2:	f8cd a000 	str.w	sl, [sp]
 80092e6:	4413      	add	r3, r2
 80092e8:	932f      	str	r3, [sp, #188]	; 0xbc
 80092ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80092ec:	4413      	add	r3, r2
 80092ee:	9319      	str	r3, [sp, #100]	; 0x64
 80092f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80092f2:	07da      	lsls	r2, r3, #31
 80092f4:	d577      	bpl.n	80093e6 <st_uaua8_nn_mat_mult_kernel+0x6a2>
 80092f6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80092f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	441a      	add	r2, r3
 80092fe:	4613      	mov	r3, r2
 8009300:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009302:	1a98      	subs	r0, r3, r2
 8009304:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009306:	1a9b      	subs	r3, r3, r2
 8009308:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800930a:	b392      	cbz	r2, 8009372 <st_uaua8_nn_mat_mult_kernel+0x62e>
 800930c:	3a01      	subs	r2, #1
 800930e:	b292      	uxth	r2, r2
 8009310:	9d00      	ldr	r5, [sp, #0]
 8009312:	f102 0801 	add.w	r8, r2, #1
 8009316:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8009318:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800931a:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 80094c8 <st_uaua8_nn_mat_mult_kernel+0x784>
 800931e:	eb05 0c88 	add.w	ip, r5, r8, lsl #2
 8009322:	f855 2b04 	ldr.w	r2, [r5], #4
 8009326:	fa3f f482 	uxtb16	r4, r2
 800932a:	ea4f 2232 	mov.w	r2, r2, ror #8
 800932e:	b2a1      	uxth	r1, r4
 8009330:	fa3f f282 	uxtb16	r2, r2
 8009334:	ea02 090e 	and.w	r9, r2, lr
 8009338:	ea49 4414 	orr.w	r4, r9, r4, lsr #16
 800933c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8009340:	6831      	ldr	r1, [r6, #0]
 8009342:	fb22 0001 	smlad	r0, r2, r1, r0
 8009346:	6839      	ldr	r1, [r7, #0]
 8009348:	fb22 3201 	smlad	r2, r2, r1, r3
 800934c:	6871      	ldr	r1, [r6, #4]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	3608      	adds	r6, #8
 8009352:	3708      	adds	r7, #8
 8009354:	fb24 0001 	smlad	r0, r4, r1, r0
 8009358:	fb24 2303 	smlad	r3, r4, r3, r2
 800935c:	45ac      	cmp	ip, r5
 800935e:	d1e0      	bne.n	8009322 <st_uaua8_nn_mat_mult_kernel+0x5de>
 8009360:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009362:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009366:	4411      	add	r1, r2
 8009368:	910f      	str	r1, [sp, #60]	; 0x3c
 800936a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800936c:	9500      	str	r5, [sp, #0]
 800936e:	4411      	add	r1, r2
 8009370:	910a      	str	r1, [sp, #40]	; 0x28
 8009372:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8009374:	b1ed      	cbz	r5, 80093b2 <st_uaua8_nn_mat_mult_kernel+0x66e>
 8009376:	9e00      	ldr	r6, [sp, #0]
 8009378:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800937a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800937c:	7832      	ldrb	r2, [r6, #0]
 800937e:	883c      	ldrh	r4, [r7, #0]
 8009380:	8809      	ldrh	r1, [r1, #0]
 8009382:	2d01      	cmp	r5, #1
 8009384:	fb02 0004 	mla	r0, r2, r4, r0
 8009388:	fb02 3301 	mla	r3, r2, r1, r3
 800938c:	d011      	beq.n	80093b2 <st_uaua8_nn_mat_mult_kernel+0x66e>
 800938e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009390:	7872      	ldrb	r2, [r6, #1]
 8009392:	887c      	ldrh	r4, [r7, #2]
 8009394:	8849      	ldrh	r1, [r1, #2]
 8009396:	2d02      	cmp	r5, #2
 8009398:	fb02 0004 	mla	r0, r2, r4, r0
 800939c:	fb02 3301 	mla	r3, r2, r1, r3
 80093a0:	d007      	beq.n	80093b2 <st_uaua8_nn_mat_mult_kernel+0x66e>
 80093a2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80093a4:	78b2      	ldrb	r2, [r6, #2]
 80093a6:	88bc      	ldrh	r4, [r7, #4]
 80093a8:	8889      	ldrh	r1, [r1, #4]
 80093aa:	fb02 0004 	mla	r0, r2, r4, r0
 80093ae:	fb02 3301 	mla	r3, r2, r1, r3
 80093b2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80093b4:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80093b6:	2c00      	cmp	r4, #0
 80093b8:	f102 0101 	add.w	r1, r2, #1
 80093bc:	dd5d      	ble.n	800947a <st_uaua8_nn_mat_mult_kernel+0x736>
 80093be:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 80093c0:	0042      	lsls	r2, r0, #1
 80093c2:	005b      	lsls	r3, r3, #1
 80093c4:	982b      	ldr	r0, [sp, #172]	; 0xac
 80093c6:	fb52 5200 	smmla	r2, r2, r0, r5
 80093ca:	fb53 5300 	smmla	r3, r3, r0, r5
 80093ce:	4122      	asrs	r2, r4
 80093d0:	f382 0208 	usat	r2, #8, r2
 80093d4:	982f      	ldr	r0, [sp, #188]	; 0xbc
 80093d6:	4123      	asrs	r3, r4
 80093d8:	7002      	strb	r2, [r0, #0]
 80093da:	f383 0308 	usat	r3, #8, r3
 80093de:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80093e0:	912f      	str	r1, [sp, #188]	; 0xbc
 80093e2:	7013      	strb	r3, [r2, #0]
 80093e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80093e6:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80093e8:	4413      	add	r3, r2
 80093ea:	4618      	mov	r0, r3
 80093ec:	b021      	add	sp, #132	; 0x84
 80093ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093f2:	981c      	ldr	r0, [sp, #112]	; 0x70
 80093f4:	fa0c f300 	lsl.w	r3, ip, r0
 80093f8:	f303 031f 	ssat	r3, #32, r3
 80093fc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80093fe:	fb53 f312 	smmulr	r3, r3, r2
 8009402:	fa04 f200 	lsl.w	r2, r4, r0
 8009406:	f302 021f 	ssat	r2, #32, r2
 800940a:	992b      	ldr	r1, [sp, #172]	; 0xac
 800940c:	fb52 f211 	smmulr	r2, r2, r1
 8009410:	fa0b f100 	lsl.w	r1, fp, r0
 8009414:	f301 011f 	ssat	r1, #32, r1
 8009418:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 800941a:	fb51 f114 	smmulr	r1, r1, r4
 800941e:	fa07 f000 	lsl.w	r0, r7, r0
 8009422:	f300 001f 	ssat	r0, #32, r0
 8009426:	fb50 f014 	smmulr	r0, r0, r4
 800942a:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 800942c:	4423      	add	r3, r4
 800942e:	f383 0308 	usat	r3, #8, r3
 8009432:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8009434:	f804 3c02 	strb.w	r3, [r4, #-2]
 8009438:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800943a:	18cb      	adds	r3, r1, r3
 800943c:	f383 0308 	usat	r3, #8, r3
 8009440:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009444:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8009446:	18d3      	adds	r3, r2, r3
 8009448:	f383 0308 	usat	r3, #8, r3
 800944c:	9a08      	ldr	r2, [sp, #32]
 800944e:	f802 3c02 	strb.w	r3, [r2, #-2]
 8009452:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8009454:	18c3      	adds	r3, r0, r3
 8009456:	f383 0308 	usat	r3, #8, r3
 800945a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800945e:	e72f      	b.n	80092c0 <st_uaua8_nn_mat_mult_kernel+0x57c>
 8009460:	f10a 0a01 	add.w	sl, sl, #1
 8009464:	e6f8      	b.n	8009258 <st_uaua8_nn_mat_mult_kernel+0x514>
 8009466:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009468:	9305      	str	r3, [sp, #20]
 800946a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800946c:	9304      	str	r3, [sp, #16]
 800946e:	2300      	movs	r3, #0
 8009470:	9303      	str	r3, [sp, #12]
 8009472:	e64e      	b.n	8009112 <st_uaua8_nn_mat_mult_kernel+0x3ce>
 8009474:	f10a 0a02 	add.w	sl, sl, #2
 8009478:	e6ee      	b.n	8009258 <st_uaua8_nn_mat_mult_kernel+0x514>
 800947a:	f1c4 0201 	rsb	r2, r4, #1
 800947e:	4090      	lsls	r0, r2
 8009480:	f300 001f 	ssat	r0, #32, r0
 8009484:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 8009486:	fb50 f014 	smmulr	r0, r0, r4
 800948a:	4093      	lsls	r3, r2
 800948c:	f303 031f 	ssat	r3, #32, r3
 8009490:	fb53 f314 	smmulr	r3, r3, r4
 8009494:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8009496:	1882      	adds	r2, r0, r2
 8009498:	f382 0208 	usat	r2, #8, r2
 800949c:	982f      	ldr	r0, [sp, #188]	; 0xbc
 800949e:	7002      	strb	r2, [r0, #0]
 80094a0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80094a2:	4413      	add	r3, r2
 80094a4:	f383 0308 	usat	r3, #8, r3
 80094a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80094aa:	912f      	str	r1, [sp, #188]	; 0xbc
 80094ac:	7013      	strb	r3, [r2, #0]
 80094ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80094b0:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80094b2:	4413      	add	r3, r2
 80094b4:	4618      	mov	r0, r3
 80094b6:	b021      	add	sp, #132	; 0x84
 80094b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094bc:	2700      	movs	r7, #0
 80094be:	469e      	mov	lr, r3
 80094c0:	462a      	mov	r2, r5
 80094c2:	46bc      	mov	ip, r7
 80094c4:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80094c6:	e49e      	b.n	8008e06 <st_uaua8_nn_mat_mult_kernel+0xc2>
 80094c8:	ffff0000 	.word	0xffff0000

080094cc <st_uint8_to16_no_shift>:
 80094cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094d0:	f1b2 0610 	subs.w	r6, r2, #16
 80094d4:	f100 808d 	bmi.w	80095f2 <st_uint8_to16_no_shift+0x126>
 80094d8:	4603      	mov	r3, r0
 80094da:	0936      	lsrs	r6, r6, #4
 80094dc:	f106 0e01 	add.w	lr, r6, #1
 80094e0:	4f48      	ldr	r7, [pc, #288]	; (8009604 <st_uint8_to16_no_shift+0x138>)
 80094e2:	eb01 144e 	add.w	r4, r1, lr, lsl #5
 80094e6:	681d      	ldr	r5, [r3, #0]
 80094e8:	685e      	ldr	r6, [r3, #4]
 80094ea:	ea4f 2935 	mov.w	r9, r5, ror #8
 80094ee:	fa3f f989 	uxtb16	r9, r9
 80094f2:	ea09 0a07 	and.w	sl, r9, r7
 80094f6:	ea4f 2c36 	mov.w	ip, r6, ror #8
 80094fa:	fa3f f585 	uxtb16	r5, r5
 80094fe:	fa3f f88c 	uxtb16	r8, ip
 8009502:	fa1f fb85 	uxth.w	fp, r5
 8009506:	fa3f f686 	uxtb16	r6, r6
 800950a:	ea4a 4515 	orr.w	r5, sl, r5, lsr #16
 800950e:	fa1f fc86 	uxth.w	ip, r6
 8009512:	ea08 0a07 	and.w	sl, r8, r7
 8009516:	ea4b 4909 	orr.w	r9, fp, r9, lsl #16
 800951a:	ea4a 4616 	orr.w	r6, sl, r6, lsr #16
 800951e:	ea4c 4c08 	orr.w	ip, ip, r8, lsl #16
 8009522:	f8c1 9000 	str.w	r9, [r1]
 8009526:	f8c1 c008 	str.w	ip, [r1, #8]
 800952a:	604d      	str	r5, [r1, #4]
 800952c:	60ce      	str	r6, [r1, #12]
 800952e:	689e      	ldr	r6, [r3, #8]
 8009530:	68dd      	ldr	r5, [r3, #12]
 8009532:	ea4f 2936 	mov.w	r9, r6, ror #8
 8009536:	fa3f f989 	uxtb16	r9, r9
 800953a:	ea09 0a07 	and.w	sl, r9, r7
 800953e:	ea4f 2c35 	mov.w	ip, r5, ror #8
 8009542:	fa3f f686 	uxtb16	r6, r6
 8009546:	fa3f f88c 	uxtb16	r8, ip
 800954a:	fa1f fb86 	uxth.w	fp, r6
 800954e:	fa3f f585 	uxtb16	r5, r5
 8009552:	ea4a 4616 	orr.w	r6, sl, r6, lsr #16
 8009556:	fa1f fc85 	uxth.w	ip, r5
 800955a:	ea08 0a07 	and.w	sl, r8, r7
 800955e:	ea4b 4909 	orr.w	r9, fp, r9, lsl #16
 8009562:	ea4a 4515 	orr.w	r5, sl, r5, lsr #16
 8009566:	ea4c 4c08 	orr.w	ip, ip, r8, lsl #16
 800956a:	614e      	str	r6, [r1, #20]
 800956c:	f8c1 9010 	str.w	r9, [r1, #16]
 8009570:	61cd      	str	r5, [r1, #28]
 8009572:	f8c1 c018 	str.w	ip, [r1, #24]
 8009576:	3120      	adds	r1, #32
 8009578:	428c      	cmp	r4, r1
 800957a:	f103 0310 	add.w	r3, r3, #16
 800957e:	d1b2      	bne.n	80094e6 <st_uint8_to16_no_shift+0x1a>
 8009580:	ea4f 160e 	mov.w	r6, lr, lsl #4
 8009584:	f1a2 0c04 	sub.w	ip, r2, #4
 8009588:	45b4      	cmp	ip, r6
 800958a:	4430      	add	r0, r6
 800958c:	db37      	blt.n	80095fe <st_uint8_to16_no_shift+0x132>
 800958e:	4607      	mov	r7, r0
 8009590:	ebac 0c06 	sub.w	ip, ip, r6
 8009594:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
 8009598:	f10c 0801 	add.w	r8, ip, #1
 800959c:	f8df e064 	ldr.w	lr, [pc, #100]	; 8009604 <st_uint8_to16_no_shift+0x138>
 80095a0:	eb04 05c8 	add.w	r5, r4, r8, lsl #3
 80095a4:	f857 3b04 	ldr.w	r3, [r7], #4
 80095a8:	fa3f f983 	uxtb16	r9, r3
 80095ac:	ea4f 2333 	mov.w	r3, r3, ror #8
 80095b0:	fa1f f189 	uxth.w	r1, r9
 80095b4:	fa3f f383 	uxtb16	r3, r3
 80095b8:	ea03 0a0e 	and.w	sl, r3, lr
 80095bc:	ea4a 4919 	orr.w	r9, sl, r9, lsr #16
 80095c0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80095c4:	f8c4 9004 	str.w	r9, [r4, #4]
 80095c8:	6023      	str	r3, [r4, #0]
 80095ca:	3408      	adds	r4, #8
 80095cc:	42a5      	cmp	r5, r4
 80095ce:	d1e9      	bne.n	80095a4 <st_uint8_to16_no_shift+0xd8>
 80095d0:	3604      	adds	r6, #4
 80095d2:	eb06 068c 	add.w	r6, r6, ip, lsl #2
 80095d6:	eb00 0088 	add.w	r0, r0, r8, lsl #2
 80095da:	42b2      	cmp	r2, r6
 80095dc:	dd07      	ble.n	80095ee <st_uint8_to16_no_shift+0x122>
 80095de:	1b92      	subs	r2, r2, r6
 80095e0:	4402      	add	r2, r0
 80095e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80095e6:	4290      	cmp	r0, r2
 80095e8:	f825 3b02 	strh.w	r3, [r5], #2
 80095ec:	d1f9      	bne.n	80095e2 <st_uint8_to16_no_shift+0x116>
 80095ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095f2:	2600      	movs	r6, #0
 80095f4:	f1a2 0c04 	sub.w	ip, r2, #4
 80095f8:	45b4      	cmp	ip, r6
 80095fa:	460c      	mov	r4, r1
 80095fc:	dac7      	bge.n	800958e <st_uint8_to16_no_shift+0xc2>
 80095fe:	4625      	mov	r5, r4
 8009600:	e7eb      	b.n	80095da <st_uint8_to16_no_shift+0x10e>
 8009602:	bf00      	nop
 8009604:	ffff0000 	.word	0xffff0000

08009608 <st_uint8_maxpool>:
 8009608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800960c:	b097      	sub	sp, #92	; 0x5c
 800960e:	f89d 40a8 	ldrb.w	r4, [sp, #168]	; 0xa8
 8009612:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009616:	ee07 4a90 	vmov	s15, r4
 800961a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800961e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009622:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009626:	e9cd 1004 	strd	r1, r0, [sp, #16]
 800962a:	f8bd 0094 	ldrh.w	r0, [sp, #148]	; 0x94
 800962e:	469b      	mov	fp, r3
 8009630:	900d      	str	r0, [sp, #52]	; 0x34
 8009632:	f8bd 0098 	ldrh.w	r0, [sp, #152]	; 0x98
 8009636:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 800963a:	9013      	str	r0, [sp, #76]	; 0x4c
 800963c:	f8bd 009c 	ldrh.w	r0, [sp, #156]	; 0x9c
 8009640:	9301      	str	r3, [sp, #4]
 8009642:	900b      	str	r0, [sp, #44]	; 0x2c
 8009644:	f8bd 00a0 	ldrh.w	r0, [sp, #160]	; 0xa0
 8009648:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 800964c:	900f      	str	r0, [sp, #60]	; 0x3c
 800964e:	f89d 00a4 	ldrb.w	r0, [sp, #164]	; 0xa4
 8009652:	4692      	mov	sl, r2
 8009654:	9312      	str	r3, [sp, #72]	; 0x48
 8009656:	9002      	str	r0, [sp, #8]
 8009658:	9408      	str	r4, [sp, #32]
 800965a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800965e:	eec0 6a20 	vdiv.f32	s13, s0, s1
 8009662:	f8bd 2084 	ldrh.w	r2, [sp, #132]	; 0x84
 8009666:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 800966a:	f8bd 1090 	ldrh.w	r1, [sp, #144]	; 0x90
 800966e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009670:	f2c0 80b4 	blt.w	80097dc <st_uint8_maxpool+0x1d4>
 8009674:	2800      	cmp	r0, #0
 8009676:	f000 80a1 	beq.w	80097bc <st_uint8_maxpool+0x1b4>
 800967a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800967c:	2800      	cmp	r0, #0
 800967e:	f000 809d 	beq.w	80097bc <st_uint8_maxpool+0x1b4>
 8009682:	9801      	ldr	r0, [sp, #4]
 8009684:	2800      	cmp	r0, #0
 8009686:	f000 8099 	beq.w	80097bc <st_uint8_maxpool+0x1b4>
 800968a:	2000      	movs	r0, #0
 800968c:	1ad2      	subs	r2, r2, r3
 800968e:	425b      	negs	r3, r3
 8009690:	b29b      	uxth	r3, r3
 8009692:	9314      	str	r3, [sp, #80]	; 0x50
 8009694:	4603      	mov	r3, r0
 8009696:	4249      	negs	r1, r1
 8009698:	b289      	uxth	r1, r1
 800969a:	b292      	uxth	r2, r2
 800969c:	9011      	str	r0, [sp, #68]	; 0x44
 800969e:	9110      	str	r1, [sp, #64]	; 0x40
 80096a0:	9215      	str	r2, [sp, #84]	; 0x54
 80096a2:	2100      	movs	r1, #0
 80096a4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80096a6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80096a8:	fb03 f304 	mul.w	r3, r3, r4
 80096ac:	930e      	str	r3, [sp, #56]	; 0x38
 80096ae:	b203      	sxth	r3, r0
 80096b0:	9307      	str	r3, [sp, #28]
 80096b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80096b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80096b6:	9309      	str	r3, [sp, #36]	; 0x24
 80096b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80096ba:	4402      	add	r2, r0
 80096bc:	910c      	str	r1, [sp, #48]	; 0x30
 80096be:	fa0f f982 	sxth.w	r9, r2
 80096c2:	930a      	str	r3, [sp, #40]	; 0x28
 80096c4:	f04f 0c00 	mov.w	ip, #0
 80096c8:	46e0      	mov	r8, ip
 80096ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096cc:	9a01      	ldr	r2, [sp, #4]
 80096ce:	18cb      	adds	r3, r1, r3
 80096d0:	fb02 f303 	mul.w	r3, r2, r3
 80096d4:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 80096d8:	f9bd 7024 	ldrsh.w	r7, [sp, #36]	; 0x24
 80096dc:	9306      	str	r3, [sp, #24]
 80096de:	ea00 76e0 	and.w	r6, r0, r0, asr #31
 80096e2:	9a07      	ldr	r2, [sp, #28]
 80096e4:	f04f 0e00 	mov.w	lr, #0
 80096e8:	454a      	cmp	r2, r9
 80096ea:	da21      	bge.n	8009730 <st_uint8_maxpool+0x128>
 80096ec:	9b05      	ldr	r3, [sp, #20]
 80096ee:	4443      	add	r3, r8
 80096f0:	9303      	str	r3, [sp, #12]
 80096f2:	4287      	cmp	r7, r0
 80096f4:	da18      	bge.n	8009728 <st_uint8_maxpool+0x120>
 80096f6:	2a00      	cmp	r2, #0
 80096f8:	fb02 f40a 	mul.w	r4, r2, sl
 80096fc:	db14      	blt.n	8009728 <st_uint8_maxpool+0x120>
 80096fe:	455a      	cmp	r2, fp
 8009700:	da12      	bge.n	8009728 <st_uint8_maxpool+0x120>
 8009702:	2f00      	cmp	r7, #0
 8009704:	463b      	mov	r3, r7
 8009706:	db5c      	blt.n	80097c2 <st_uint8_maxpool+0x1ba>
 8009708:	1c59      	adds	r1, r3, #1
 800970a:	459a      	cmp	sl, r3
 800970c:	eb04 0503 	add.w	r5, r4, r3
 8009710:	b20b      	sxth	r3, r1
 8009712:	dd07      	ble.n	8009724 <st_uint8_maxpool+0x11c>
 8009714:	9901      	ldr	r1, [sp, #4]
 8009716:	fb01 f505 	mul.w	r5, r1, r5
 800971a:	9903      	ldr	r1, [sp, #12]
 800971c:	5d49      	ldrb	r1, [r1, r5]
 800971e:	458e      	cmp	lr, r1
 8009720:	bf38      	it	cc
 8009722:	468e      	movcc	lr, r1
 8009724:	4298      	cmp	r0, r3
 8009726:	dcef      	bgt.n	8009708 <st_uint8_maxpool+0x100>
 8009728:	3201      	adds	r2, #1
 800972a:	b212      	sxth	r2, r2
 800972c:	454a      	cmp	r2, r9
 800972e:	dbe0      	blt.n	80096f2 <st_uint8_maxpool+0xea>
 8009730:	eeb4 0a60 	vcmp.f32	s0, s1
 8009734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009738:	9b06      	ldr	r3, [sp, #24]
 800973a:	4498      	add	r8, r3
 800973c:	d103      	bne.n	8009746 <st_uint8_maxpool+0x13e>
 800973e:	9b08      	ldr	r3, [sp, #32]
 8009740:	9a02      	ldr	r2, [sp, #8]
 8009742:	4293      	cmp	r3, r2
 8009744:	d046      	beq.n	80097d4 <st_uint8_maxpool+0x1cc>
 8009746:	9b02      	ldr	r3, [sp, #8]
 8009748:	eeb0 6a47 	vmov.f32	s12, s14
 800974c:	ebae 0e03 	sub.w	lr, lr, r3
 8009750:	ee07 ea90 	vmov	s15, lr
 8009754:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009758:	eea7 6aa6 	vfma.f32	s12, s15, s13
 800975c:	eefd 7ac6 	vcvt.s32.f32	s15, s12
 8009760:	ee17 3a90 	vmov	r3, s15
 8009764:	f383 0308 	usat	r3, #8, r3
 8009768:	9a04      	ldr	r2, [sp, #16]
 800976a:	f802 3008 	strb.w	r3, [r2, r8]
 800976e:	f10c 0c01 	add.w	ip, ip, #1
 8009772:	9b01      	ldr	r3, [sp, #4]
 8009774:	fa0f fc8c 	sxth.w	ip, ip
 8009778:	459c      	cmp	ip, r3
 800977a:	46e0      	mov	r8, ip
 800977c:	dbb1      	blt.n	80096e2 <st_uint8_maxpool+0xda>
 800977e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009780:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009782:	3301      	adds	r3, #1
 8009784:	b219      	sxth	r1, r3
 8009786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009788:	910c      	str	r1, [sp, #48]	; 0x30
 800978a:	461a      	mov	r2, r3
 800978c:	4402      	add	r2, r0
 800978e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009790:	b292      	uxth	r2, r2
 8009792:	9209      	str	r2, [sp, #36]	; 0x24
 8009794:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009796:	4403      	add	r3, r0
 8009798:	b29b      	uxth	r3, r3
 800979a:	4291      	cmp	r1, r2
 800979c:	930a      	str	r3, [sp, #40]	; 0x28
 800979e:	db91      	blt.n	80096c4 <st_uint8_maxpool+0xbc>
 80097a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80097a2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80097a4:	3301      	adds	r3, #1
 80097a6:	b21a      	sxth	r2, r3
 80097a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80097aa:	9211      	str	r2, [sp, #68]	; 0x44
 80097ac:	440b      	add	r3, r1
 80097ae:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	428a      	cmp	r2, r1
 80097b4:	9310      	str	r3, [sp, #64]	; 0x40
 80097b6:	4613      	mov	r3, r2
 80097b8:	f6ff af73 	blt.w	80096a2 <st_uint8_maxpool+0x9a>
 80097bc:	b017      	add	sp, #92	; 0x5c
 80097be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097c2:	3301      	adds	r3, #1
 80097c4:	b21b      	sxth	r3, r3
 80097c6:	429e      	cmp	r6, r3
 80097c8:	ddac      	ble.n	8009724 <st_uint8_maxpool+0x11c>
 80097ca:	3301      	adds	r3, #1
 80097cc:	b21b      	sxth	r3, r3
 80097ce:	429e      	cmp	r6, r3
 80097d0:	dcf7      	bgt.n	80097c2 <st_uint8_maxpool+0x1ba>
 80097d2:	e7a7      	b.n	8009724 <st_uint8_maxpool+0x11c>
 80097d4:	9b04      	ldr	r3, [sp, #16]
 80097d6:	f803 e008 	strb.w	lr, [r3, r8]
 80097da:	e7c8      	b.n	800976e <st_uint8_maxpool+0x166>
 80097dc:	2800      	cmp	r0, #0
 80097de:	d0ed      	beq.n	80097bc <st_uint8_maxpool+0x1b4>
 80097e0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80097e2:	2800      	cmp	r0, #0
 80097e4:	d0ea      	beq.n	80097bc <st_uint8_maxpool+0x1b4>
 80097e6:	9801      	ldr	r0, [sp, #4]
 80097e8:	2800      	cmp	r0, #0
 80097ea:	d0e7      	beq.n	80097bc <st_uint8_maxpool+0x1b4>
 80097ec:	2000      	movs	r0, #0
 80097ee:	1ad2      	subs	r2, r2, r3
 80097f0:	425b      	negs	r3, r3
 80097f2:	b29b      	uxth	r3, r3
 80097f4:	9314      	str	r3, [sp, #80]	; 0x50
 80097f6:	4603      	mov	r3, r0
 80097f8:	4249      	negs	r1, r1
 80097fa:	b289      	uxth	r1, r1
 80097fc:	b292      	uxth	r2, r2
 80097fe:	9011      	str	r0, [sp, #68]	; 0x44
 8009800:	910e      	str	r1, [sp, #56]	; 0x38
 8009802:	9215      	str	r2, [sp, #84]	; 0x54
 8009804:	2100      	movs	r1, #0
 8009806:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009808:	980e      	ldr	r0, [sp, #56]	; 0x38
 800980a:	fb04 f303 	mul.w	r3, r4, r3
 800980e:	9310      	str	r3, [sp, #64]	; 0x40
 8009810:	b203      	sxth	r3, r0
 8009812:	9307      	str	r3, [sp, #28]
 8009814:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009816:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009818:	930a      	str	r3, [sp, #40]	; 0x28
 800981a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800981c:	1882      	adds	r2, r0, r2
 800981e:	910c      	str	r1, [sp, #48]	; 0x30
 8009820:	fa0f f982 	sxth.w	r9, r2
 8009824:	9309      	str	r3, [sp, #36]	; 0x24
 8009826:	f04f 0c00 	mov.w	ip, #0
 800982a:	46e0      	mov	r8, ip
 800982c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800982e:	9a01      	ldr	r2, [sp, #4]
 8009830:	18cb      	adds	r3, r1, r3
 8009832:	fb02 f303 	mul.w	r3, r2, r3
 8009836:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 800983a:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 800983e:	9306      	str	r3, [sp, #24]
 8009840:	ea00 77e0 	and.w	r7, r0, r0, asr #31
 8009844:	9a07      	ldr	r2, [sp, #28]
 8009846:	f04f 0eff 	mov.w	lr, #255	; 0xff
 800984a:	454a      	cmp	r2, r9
 800984c:	da21      	bge.n	8009892 <st_uint8_maxpool+0x28a>
 800984e:	9b05      	ldr	r3, [sp, #20]
 8009850:	4443      	add	r3, r8
 8009852:	9303      	str	r3, [sp, #12]
 8009854:	4286      	cmp	r6, r0
 8009856:	da18      	bge.n	800988a <st_uint8_maxpool+0x282>
 8009858:	2a00      	cmp	r2, #0
 800985a:	fb02 f40a 	mul.w	r4, r2, sl
 800985e:	db14      	blt.n	800988a <st_uint8_maxpool+0x282>
 8009860:	455a      	cmp	r2, fp
 8009862:	da12      	bge.n	800988a <st_uint8_maxpool+0x282>
 8009864:	2e00      	cmp	r6, #0
 8009866:	4633      	mov	r3, r6
 8009868:	db5a      	blt.n	8009920 <st_uint8_maxpool+0x318>
 800986a:	1c59      	adds	r1, r3, #1
 800986c:	459a      	cmp	sl, r3
 800986e:	eb04 0503 	add.w	r5, r4, r3
 8009872:	b20b      	sxth	r3, r1
 8009874:	dd07      	ble.n	8009886 <st_uint8_maxpool+0x27e>
 8009876:	9901      	ldr	r1, [sp, #4]
 8009878:	fb01 f505 	mul.w	r5, r1, r5
 800987c:	9903      	ldr	r1, [sp, #12]
 800987e:	5d49      	ldrb	r1, [r1, r5]
 8009880:	458e      	cmp	lr, r1
 8009882:	bf28      	it	cs
 8009884:	468e      	movcs	lr, r1
 8009886:	4298      	cmp	r0, r3
 8009888:	dcef      	bgt.n	800986a <st_uint8_maxpool+0x262>
 800988a:	3201      	adds	r2, #1
 800988c:	b212      	sxth	r2, r2
 800988e:	454a      	cmp	r2, r9
 8009890:	dbe0      	blt.n	8009854 <st_uint8_maxpool+0x24c>
 8009892:	eeb4 0a60 	vcmp.f32	s0, s1
 8009896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800989a:	9b06      	ldr	r3, [sp, #24]
 800989c:	4498      	add	r8, r3
 800989e:	d103      	bne.n	80098a8 <st_uint8_maxpool+0x2a0>
 80098a0:	9b08      	ldr	r3, [sp, #32]
 80098a2:	9a02      	ldr	r2, [sp, #8]
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d046      	beq.n	8009936 <st_uint8_maxpool+0x32e>
 80098a8:	9b02      	ldr	r3, [sp, #8]
 80098aa:	eeb0 6a47 	vmov.f32	s12, s14
 80098ae:	ebae 0e03 	sub.w	lr, lr, r3
 80098b2:	ee07 ea90 	vmov	s15, lr
 80098b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80098ba:	eea7 6aa6 	vfma.f32	s12, s15, s13
 80098be:	eefd 7ac6 	vcvt.s32.f32	s15, s12
 80098c2:	ee17 3a90 	vmov	r3, s15
 80098c6:	f383 0308 	usat	r3, #8, r3
 80098ca:	9a04      	ldr	r2, [sp, #16]
 80098cc:	f802 3008 	strb.w	r3, [r2, r8]
 80098d0:	f10c 0c01 	add.w	ip, ip, #1
 80098d4:	9b01      	ldr	r3, [sp, #4]
 80098d6:	fa0f fc8c 	sxth.w	ip, ip
 80098da:	459c      	cmp	ip, r3
 80098dc:	46e0      	mov	r8, ip
 80098de:	dbb1      	blt.n	8009844 <st_uint8_maxpool+0x23c>
 80098e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098e2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80098e4:	3301      	adds	r3, #1
 80098e6:	b219      	sxth	r1, r3
 80098e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098ea:	910c      	str	r1, [sp, #48]	; 0x30
 80098ec:	461a      	mov	r2, r3
 80098ee:	4402      	add	r2, r0
 80098f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098f2:	b292      	uxth	r2, r2
 80098f4:	920a      	str	r2, [sp, #40]	; 0x28
 80098f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80098f8:	4403      	add	r3, r0
 80098fa:	b29b      	uxth	r3, r3
 80098fc:	4291      	cmp	r1, r2
 80098fe:	9309      	str	r3, [sp, #36]	; 0x24
 8009900:	db91      	blt.n	8009826 <st_uint8_maxpool+0x21e>
 8009902:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009904:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009906:	3301      	adds	r3, #1
 8009908:	b21a      	sxth	r2, r3
 800990a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800990c:	9211      	str	r2, [sp, #68]	; 0x44
 800990e:	440b      	add	r3, r1
 8009910:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009912:	b29b      	uxth	r3, r3
 8009914:	428a      	cmp	r2, r1
 8009916:	930e      	str	r3, [sp, #56]	; 0x38
 8009918:	4613      	mov	r3, r2
 800991a:	f6ff af73 	blt.w	8009804 <st_uint8_maxpool+0x1fc>
 800991e:	e74d      	b.n	80097bc <st_uint8_maxpool+0x1b4>
 8009920:	3301      	adds	r3, #1
 8009922:	b21b      	sxth	r3, r3
 8009924:	42bb      	cmp	r3, r7
 8009926:	dbfb      	blt.n	8009920 <st_uint8_maxpool+0x318>
 8009928:	4283      	cmp	r3, r0
 800992a:	db9e      	blt.n	800986a <st_uint8_maxpool+0x262>
 800992c:	3201      	adds	r2, #1
 800992e:	b212      	sxth	r2, r2
 8009930:	454a      	cmp	r2, r9
 8009932:	db8f      	blt.n	8009854 <st_uint8_maxpool+0x24c>
 8009934:	e7ad      	b.n	8009892 <st_uint8_maxpool+0x28a>
 8009936:	9b04      	ldr	r3, [sp, #16]
 8009938:	f803 e008 	strb.w	lr, [r3, r8]
 800993c:	e7c8      	b.n	80098d0 <st_uint8_maxpool+0x2c8>
 800993e:	bf00      	nop

08009940 <ai_array_to_buffer_fmt>:
 8009940:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8009944:	2b02      	cmp	r3, #2
 8009946:	d01f      	beq.n	8009988 <ai_array_to_buffer_fmt+0x48>
 8009948:	4a1c      	ldr	r2, [pc, #112]	; (80099bc <ai_array_to_buffer_fmt+0x7c>)
 800994a:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 800994e:	4293      	cmp	r3, r2
 8009950:	d00a      	beq.n	8009968 <ai_array_to_buffer_fmt+0x28>
 8009952:	dc0d      	bgt.n	8009970 <ai_array_to_buffer_fmt+0x30>
 8009954:	4a1a      	ldr	r2, [pc, #104]	; (80099c0 <ai_array_to_buffer_fmt+0x80>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d006      	beq.n	8009968 <ai_array_to_buffer_fmt+0x28>
 800995a:	dd1d      	ble.n	8009998 <ai_array_to_buffer_fmt+0x58>
 800995c:	4a19      	ldr	r2, [pc, #100]	; (80099c4 <ai_array_to_buffer_fmt+0x84>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d002      	beq.n	8009968 <ai_array_to_buffer_fmt+0x28>
 8009962:	320f      	adds	r2, #15
 8009964:	4293      	cmp	r3, r2
 8009966:	d10d      	bne.n	8009984 <ai_array_to_buffer_fmt+0x44>
 8009968:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800996c:	4318      	orrs	r0, r3
 800996e:	4770      	bx	lr
 8009970:	4a15      	ldr	r2, [pc, #84]	; (80099c8 <ai_array_to_buffer_fmt+0x88>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d0f8      	beq.n	8009968 <ai_array_to_buffer_fmt+0x28>
 8009976:	dd18      	ble.n	80099aa <ai_array_to_buffer_fmt+0x6a>
 8009978:	4a14      	ldr	r2, [pc, #80]	; (80099cc <ai_array_to_buffer_fmt+0x8c>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d0f4      	beq.n	8009968 <ai_array_to_buffer_fmt+0x28>
 800997e:	4a14      	ldr	r2, [pc, #80]	; (80099d0 <ai_array_to_buffer_fmt+0x90>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d0f1      	beq.n	8009968 <ai_array_to_buffer_fmt+0x28>
 8009984:	2340      	movs	r3, #64	; 0x40
 8009986:	e7ef      	b.n	8009968 <ai_array_to_buffer_fmt+0x28>
 8009988:	4b12      	ldr	r3, [pc, #72]	; (80099d4 <ai_array_to_buffer_fmt+0x94>)
 800998a:	4003      	ands	r3, r0
 800998c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009990:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8009994:	4318      	orrs	r0, r3
 8009996:	4770      	bx	lr
 8009998:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 800999c:	4293      	cmp	r3, r2
 800999e:	d0e3      	beq.n	8009968 <ai_array_to_buffer_fmt+0x28>
 80099a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d0df      	beq.n	8009968 <ai_array_to_buffer_fmt+0x28>
 80099a8:	e7ec      	b.n	8009984 <ai_array_to_buffer_fmt+0x44>
 80099aa:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d0da      	beq.n	8009968 <ai_array_to_buffer_fmt+0x28>
 80099b2:	3207      	adds	r2, #7
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d0d7      	beq.n	8009968 <ai_array_to_buffer_fmt+0x28>
 80099b8:	e7e4      	b.n	8009984 <ai_array_to_buffer_fmt+0x44>
 80099ba:	bf00      	nop
 80099bc:	00840040 	.word	0x00840040
 80099c0:	00040447 	.word	0x00040447
 80099c4:	00040840 	.word	0x00040840
 80099c8:	00840840 	.word	0x00840840
 80099cc:	0084084f 	.word	0x0084084f
 80099d0:	01821040 	.word	0x01821040
 80099d4:	00803fff 	.word	0x00803fff

080099d8 <ai_array_get_byte_size>:
 80099d8:	b1c1      	cbz	r1, 8009a0c <ai_array_get_byte_size+0x34>
 80099da:	f3c0 3282 	ubfx	r2, r0, #14, #3
 80099de:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80099e2:	4413      	add	r3, r2
 80099e4:	fb01 f103 	mul.w	r1, r1, r3
 80099e8:	f3c0 5241 	ubfx	r2, r0, #21, #2
 80099ec:	3107      	adds	r1, #7
 80099ee:	f3c0 4043 	ubfx	r0, r0, #17, #4
 80099f2:	f021 0107 	bic.w	r1, r1, #7
 80099f6:	2804      	cmp	r0, #4
 80099f8:	fa21 f102 	lsr.w	r1, r1, r2
 80099fc:	d008      	beq.n	8009a10 <ai_array_get_byte_size+0x38>
 80099fe:	2808      	cmp	r0, #8
 8009a00:	d101      	bne.n	8009a06 <ai_array_get_byte_size+0x2e>
 8009a02:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8009a06:	3107      	adds	r1, #7
 8009a08:	08c8      	lsrs	r0, r1, #3
 8009a0a:	4770      	bx	lr
 8009a0c:	4608      	mov	r0, r1
 8009a0e:	4770      	bx	lr
 8009a10:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8009a14:	3107      	adds	r1, #7
 8009a16:	08c8      	lsrs	r0, r1, #3
 8009a18:	4770      	bx	lr
 8009a1a:	bf00      	nop

08009a1c <core_tensor_clone>:
 8009a1c:	680b      	ldr	r3, [r1, #0]
 8009a1e:	6882      	ldr	r2, [r0, #8]
 8009a20:	6003      	str	r3, [r0, #0]
 8009a22:	684b      	ldr	r3, [r1, #4]
 8009a24:	b410      	push	{r4}
 8009a26:	6043      	str	r3, [r0, #4]
 8009a28:	698b      	ldr	r3, [r1, #24]
 8009a2a:	6183      	str	r3, [r0, #24]
 8009a2c:	688b      	ldr	r3, [r1, #8]
 8009a2e:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8009a32:	f363 221f 	bfi	r2, r3, #8, #24
 8009a36:	6082      	str	r2, [r0, #8]
 8009a38:	b15b      	cbz	r3, 8009a52 <core_tensor_clone+0x36>
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	68cc      	ldr	r4, [r1, #12]
 8009a3e:	68c2      	ldr	r2, [r0, #12]
 8009a40:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8009a44:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 8009a48:	6882      	ldr	r2, [r0, #8]
 8009a4a:	3301      	adds	r3, #1
 8009a4c:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 8009a50:	d3f4      	bcc.n	8009a3c <core_tensor_clone+0x20>
 8009a52:	690b      	ldr	r3, [r1, #16]
 8009a54:	6902      	ldr	r2, [r0, #16]
 8009a56:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8009a5a:	f363 221f 	bfi	r2, r3, #8, #24
 8009a5e:	6102      	str	r2, [r0, #16]
 8009a60:	b15b      	cbz	r3, 8009a7a <core_tensor_clone+0x5e>
 8009a62:	2300      	movs	r3, #0
 8009a64:	694c      	ldr	r4, [r1, #20]
 8009a66:	6942      	ldr	r2, [r0, #20]
 8009a68:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8009a6c:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 8009a70:	6902      	ldr	r2, [r0, #16]
 8009a72:	3301      	adds	r3, #1
 8009a74:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 8009a78:	d3f4      	bcc.n	8009a64 <core_tensor_clone+0x48>
 8009a7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a7e:	4770      	bx	lr

08009a80 <core_array_clone>:
 8009a80:	b410      	push	{r4}
 8009a82:	4604      	mov	r4, r0
 8009a84:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 8009a86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8009a8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a8e:	4770      	bx	lr

08009a90 <arm_copy_q7>:
 8009a90:	b470      	push	{r4, r5, r6}
 8009a92:	0896      	lsrs	r6, r2, #2
 8009a94:	d01b      	beq.n	8009ace <arm_copy_q7+0x3e>
 8009a96:	460b      	mov	r3, r1
 8009a98:	00b6      	lsls	r6, r6, #2
 8009a9a:	1985      	adds	r5, r0, r6
 8009a9c:	f850 4b04 	ldr.w	r4, [r0], #4
 8009aa0:	42a8      	cmp	r0, r5
 8009aa2:	f843 4b04 	str.w	r4, [r3], #4
 8009aa6:	d1f9      	bne.n	8009a9c <arm_copy_q7+0xc>
 8009aa8:	4431      	add	r1, r6
 8009aaa:	f012 0203 	ands.w	r2, r2, #3
 8009aae:	d00c      	beq.n	8009aca <arm_copy_q7+0x3a>
 8009ab0:	f995 3000 	ldrsb.w	r3, [r5]
 8009ab4:	2a01      	cmp	r2, #1
 8009ab6:	700b      	strb	r3, [r1, #0]
 8009ab8:	d007      	beq.n	8009aca <arm_copy_q7+0x3a>
 8009aba:	f995 3001 	ldrsb.w	r3, [r5, #1]
 8009abe:	2a02      	cmp	r2, #2
 8009ac0:	704b      	strb	r3, [r1, #1]
 8009ac2:	bf1c      	itt	ne
 8009ac4:	f995 3002 	ldrsbne.w	r3, [r5, #2]
 8009ac8:	708b      	strbne	r3, [r1, #2]
 8009aca:	bc70      	pop	{r4, r5, r6}
 8009acc:	4770      	bx	lr
 8009ace:	4605      	mov	r5, r0
 8009ad0:	e7eb      	b.n	8009aaa <arm_copy_q7+0x1a>
 8009ad2:	bf00      	nop

08009ad4 <arm_fill_q15>:
 8009ad4:	b470      	push	{r4, r5, r6}
 8009ad6:	b285      	uxth	r5, r0
 8009ad8:	0896      	lsrs	r6, r2, #2
 8009ada:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8009ade:	d009      	beq.n	8009af4 <arm_fill_q15+0x20>
 8009ae0:	460b      	mov	r3, r1
 8009ae2:	4634      	mov	r4, r6
 8009ae4:	3c01      	subs	r4, #1
 8009ae6:	601d      	str	r5, [r3, #0]
 8009ae8:	605d      	str	r5, [r3, #4]
 8009aea:	f103 0308 	add.w	r3, r3, #8
 8009aee:	d1f9      	bne.n	8009ae4 <arm_fill_q15+0x10>
 8009af0:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009af4:	f012 0203 	ands.w	r2, r2, #3
 8009af8:	d006      	beq.n	8009b08 <arm_fill_q15+0x34>
 8009afa:	2a01      	cmp	r2, #1
 8009afc:	8008      	strh	r0, [r1, #0]
 8009afe:	d003      	beq.n	8009b08 <arm_fill_q15+0x34>
 8009b00:	2a02      	cmp	r2, #2
 8009b02:	8048      	strh	r0, [r1, #2]
 8009b04:	bf18      	it	ne
 8009b06:	8088      	strhne	r0, [r1, #4]
 8009b08:	bc70      	pop	{r4, r5, r6}
 8009b0a:	4770      	bx	lr

08009b0c <fabsf>:
 8009b0c:	ee10 3a10 	vmov	r3, s0
 8009b10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009b14:	ee00 3a10 	vmov	s0, r3
 8009b18:	4770      	bx	lr
	...

08009b1c <expf>:
 8009b1c:	b530      	push	{r4, r5, lr}
 8009b1e:	4d36      	ldr	r5, [pc, #216]	; (8009bf8 <expf+0xdc>)
 8009b20:	ed2d 8b02 	vpush	{d8}
 8009b24:	b08b      	sub	sp, #44	; 0x2c
 8009b26:	eeb0 8a40 	vmov.f32	s16, s0
 8009b2a:	f000 f9d5 	bl	8009ed8 <__ieee754_expf>
 8009b2e:	f995 3000 	ldrsb.w	r3, [r5]
 8009b32:	ee10 4a10 	vmov	r4, s0
 8009b36:	3301      	adds	r3, #1
 8009b38:	d030      	beq.n	8009b9c <expf+0x80>
 8009b3a:	eeb0 0a48 	vmov.f32	s0, s16
 8009b3e:	f000 fd64 	bl	800a60a <finitef>
 8009b42:	b358      	cbz	r0, 8009b9c <expf+0x80>
 8009b44:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8009bfc <expf+0xe0>
 8009b48:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8009b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b50:	dd35      	ble.n	8009bbe <expf+0xa2>
 8009b52:	2303      	movs	r3, #3
 8009b54:	ee18 0a10 	vmov	r0, s16
 8009b58:	9300      	str	r3, [sp, #0]
 8009b5a:	4b29      	ldr	r3, [pc, #164]	; (8009c00 <expf+0xe4>)
 8009b5c:	9301      	str	r3, [sp, #4]
 8009b5e:	2300      	movs	r3, #0
 8009b60:	9308      	str	r3, [sp, #32]
 8009b62:	f7f6 fcd5 	bl	8000510 <__aeabi_f2d>
 8009b66:	f995 3000 	ldrsb.w	r3, [r5]
 8009b6a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b72:	b9cb      	cbnz	r3, 8009ba8 <expf+0x8c>
 8009b74:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009b78:	4b22      	ldr	r3, [pc, #136]	; (8009c04 <expf+0xe8>)
 8009b7a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009b7e:	4668      	mov	r0, sp
 8009b80:	f000 fd41 	bl	800a606 <matherr>
 8009b84:	b1b0      	cbz	r0, 8009bb4 <expf+0x98>
 8009b86:	9b08      	ldr	r3, [sp, #32]
 8009b88:	b11b      	cbz	r3, 8009b92 <expf+0x76>
 8009b8a:	f000 fdbf 	bl	800a70c <__errno>
 8009b8e:	9b08      	ldr	r3, [sp, #32]
 8009b90:	6003      	str	r3, [r0, #0]
 8009b92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b96:	f7f6 ffeb 	bl	8000b70 <__aeabi_d2f>
 8009b9a:	4604      	mov	r4, r0
 8009b9c:	ee00 4a10 	vmov	s0, r4
 8009ba0:	b00b      	add	sp, #44	; 0x2c
 8009ba2:	ecbd 8b02 	vpop	{d8}
 8009ba6:	bd30      	pop	{r4, r5, pc}
 8009ba8:	2000      	movs	r0, #0
 8009baa:	4917      	ldr	r1, [pc, #92]	; (8009c08 <expf+0xec>)
 8009bac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009bb0:	2b02      	cmp	r3, #2
 8009bb2:	d1e4      	bne.n	8009b7e <expf+0x62>
 8009bb4:	f000 fdaa 	bl	800a70c <__errno>
 8009bb8:	2322      	movs	r3, #34	; 0x22
 8009bba:	6003      	str	r3, [r0, #0]
 8009bbc:	e7e3      	b.n	8009b86 <expf+0x6a>
 8009bbe:	eddf 7a13 	vldr	s15, [pc, #76]	; 8009c0c <expf+0xf0>
 8009bc2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8009bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bca:	d5e7      	bpl.n	8009b9c <expf+0x80>
 8009bcc:	2304      	movs	r3, #4
 8009bce:	ee18 0a10 	vmov	r0, s16
 8009bd2:	9300      	str	r3, [sp, #0]
 8009bd4:	4b0a      	ldr	r3, [pc, #40]	; (8009c00 <expf+0xe4>)
 8009bd6:	9301      	str	r3, [sp, #4]
 8009bd8:	2300      	movs	r3, #0
 8009bda:	9308      	str	r3, [sp, #32]
 8009bdc:	f7f6 fc98 	bl	8000510 <__aeabi_f2d>
 8009be0:	2300      	movs	r3, #0
 8009be2:	2200      	movs	r2, #0
 8009be4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009be8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009bec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009bf0:	f995 3000 	ldrsb.w	r3, [r5]
 8009bf4:	e7dc      	b.n	8009bb0 <expf+0x94>
 8009bf6:	bf00      	nop
 8009bf8:	20000b00 	.word	0x20000b00
 8009bfc:	42b17180 	.word	0x42b17180
 8009c00:	08023758 	.word	0x08023758
 8009c04:	47efffff 	.word	0x47efffff
 8009c08:	7ff00000 	.word	0x7ff00000
 8009c0c:	c2cff1b5 	.word	0xc2cff1b5

08009c10 <powf>:
 8009c10:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8009c14:	4ca8      	ldr	r4, [pc, #672]	; (8009eb8 <powf+0x2a8>)
 8009c16:	ed2d 8b04 	vpush	{d8-d9}
 8009c1a:	b08a      	sub	sp, #40	; 0x28
 8009c1c:	eef0 8a40 	vmov.f32	s17, s0
 8009c20:	eeb0 8a60 	vmov.f32	s16, s1
 8009c24:	f000 fa2a 	bl	800a07c <__ieee754_powf>
 8009c28:	f994 5000 	ldrsb.w	r5, [r4]
 8009c2c:	eeb0 9a40 	vmov.f32	s18, s0
 8009c30:	4626      	mov	r6, r4
 8009c32:	1c6b      	adds	r3, r5, #1
 8009c34:	d05f      	beq.n	8009cf6 <powf+0xe6>
 8009c36:	eeb4 8a48 	vcmp.f32	s16, s16
 8009c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c3e:	d65a      	bvs.n	8009cf6 <powf+0xe6>
 8009c40:	eef4 8a68 	vcmp.f32	s17, s17
 8009c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c48:	d721      	bvc.n	8009c8e <powf+0x7e>
 8009c4a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8009c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c52:	d150      	bne.n	8009cf6 <powf+0xe6>
 8009c54:	2301      	movs	r3, #1
 8009c56:	ee18 0a90 	vmov	r0, s17
 8009c5a:	9300      	str	r3, [sp, #0]
 8009c5c:	4b97      	ldr	r3, [pc, #604]	; (8009ebc <powf+0x2ac>)
 8009c5e:	9301      	str	r3, [sp, #4]
 8009c60:	2300      	movs	r3, #0
 8009c62:	9308      	str	r3, [sp, #32]
 8009c64:	f7f6 fc54 	bl	8000510 <__aeabi_f2d>
 8009c68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c6c:	ee18 0a10 	vmov	r0, s16
 8009c70:	f7f6 fc4e 	bl	8000510 <__aeabi_f2d>
 8009c74:	2200      	movs	r2, #0
 8009c76:	4b92      	ldr	r3, [pc, #584]	; (8009ec0 <powf+0x2b0>)
 8009c78:	2d02      	cmp	r5, #2
 8009c7a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c7e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009c82:	d032      	beq.n	8009cea <powf+0xda>
 8009c84:	4668      	mov	r0, sp
 8009c86:	f000 fcbe 	bl	800a606 <matherr>
 8009c8a:	bb40      	cbnz	r0, 8009cde <powf+0xce>
 8009c8c:	e065      	b.n	8009d5a <powf+0x14a>
 8009c8e:	eddf 9a8d 	vldr	s19, [pc, #564]	; 8009ec4 <powf+0x2b4>
 8009c92:	eef4 8a69 	vcmp.f32	s17, s19
 8009c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c9a:	d163      	bne.n	8009d64 <powf+0x154>
 8009c9c:	eeb4 8a69 	vcmp.f32	s16, s19
 8009ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ca4:	d12e      	bne.n	8009d04 <powf+0xf4>
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	ee18 0a90 	vmov	r0, s17
 8009cac:	9300      	str	r3, [sp, #0]
 8009cae:	4b83      	ldr	r3, [pc, #524]	; (8009ebc <powf+0x2ac>)
 8009cb0:	9301      	str	r3, [sp, #4]
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	9308      	str	r3, [sp, #32]
 8009cb6:	f7f6 fc2b 	bl	8000510 <__aeabi_f2d>
 8009cba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cbe:	ee18 0a10 	vmov	r0, s16
 8009cc2:	f7f6 fc25 	bl	8000510 <__aeabi_f2d>
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	2300      	movs	r3, #0
 8009cca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009cce:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009cd2:	2d00      	cmp	r5, #0
 8009cd4:	d0d6      	beq.n	8009c84 <powf+0x74>
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	4b79      	ldr	r3, [pc, #484]	; (8009ec0 <powf+0x2b0>)
 8009cda:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009cde:	9b08      	ldr	r3, [sp, #32]
 8009ce0:	b11b      	cbz	r3, 8009cea <powf+0xda>
 8009ce2:	f000 fd13 	bl	800a70c <__errno>
 8009ce6:	9b08      	ldr	r3, [sp, #32]
 8009ce8:	6003      	str	r3, [r0, #0]
 8009cea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009cee:	f7f6 ff3f 	bl	8000b70 <__aeabi_d2f>
 8009cf2:	ee09 0a10 	vmov	s18, r0
 8009cf6:	eeb0 0a49 	vmov.f32	s0, s18
 8009cfa:	b00a      	add	sp, #40	; 0x28
 8009cfc:	ecbd 8b04 	vpop	{d8-d9}
 8009d00:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8009d04:	eeb0 0a48 	vmov.f32	s0, s16
 8009d08:	f000 fc7f 	bl	800a60a <finitef>
 8009d0c:	2800      	cmp	r0, #0
 8009d0e:	d0f2      	beq.n	8009cf6 <powf+0xe6>
 8009d10:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d18:	d5ed      	bpl.n	8009cf6 <powf+0xe6>
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	ee18 0a90 	vmov	r0, s17
 8009d20:	9300      	str	r3, [sp, #0]
 8009d22:	4b66      	ldr	r3, [pc, #408]	; (8009ebc <powf+0x2ac>)
 8009d24:	9301      	str	r3, [sp, #4]
 8009d26:	2300      	movs	r3, #0
 8009d28:	9308      	str	r3, [sp, #32]
 8009d2a:	f7f6 fbf1 	bl	8000510 <__aeabi_f2d>
 8009d2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d32:	ee18 0a10 	vmov	r0, s16
 8009d36:	f7f6 fbeb 	bl	8000510 <__aeabi_f2d>
 8009d3a:	f994 3000 	ldrsb.w	r3, [r4]
 8009d3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d42:	b923      	cbnz	r3, 8009d4e <powf+0x13e>
 8009d44:	2200      	movs	r2, #0
 8009d46:	2300      	movs	r3, #0
 8009d48:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009d4c:	e79a      	b.n	8009c84 <powf+0x74>
 8009d4e:	2000      	movs	r0, #0
 8009d50:	495d      	ldr	r1, [pc, #372]	; (8009ec8 <powf+0x2b8>)
 8009d52:	2b02      	cmp	r3, #2
 8009d54:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009d58:	d194      	bne.n	8009c84 <powf+0x74>
 8009d5a:	f000 fcd7 	bl	800a70c <__errno>
 8009d5e:	2321      	movs	r3, #33	; 0x21
 8009d60:	6003      	str	r3, [r0, #0]
 8009d62:	e7bc      	b.n	8009cde <powf+0xce>
 8009d64:	f000 fc51 	bl	800a60a <finitef>
 8009d68:	4605      	mov	r5, r0
 8009d6a:	2800      	cmp	r0, #0
 8009d6c:	d173      	bne.n	8009e56 <powf+0x246>
 8009d6e:	eeb0 0a68 	vmov.f32	s0, s17
 8009d72:	f000 fc4a 	bl	800a60a <finitef>
 8009d76:	2800      	cmp	r0, #0
 8009d78:	d06d      	beq.n	8009e56 <powf+0x246>
 8009d7a:	eeb0 0a48 	vmov.f32	s0, s16
 8009d7e:	f000 fc44 	bl	800a60a <finitef>
 8009d82:	2800      	cmp	r0, #0
 8009d84:	d067      	beq.n	8009e56 <powf+0x246>
 8009d86:	ee18 0a90 	vmov	r0, s17
 8009d8a:	f7f6 fbc1 	bl	8000510 <__aeabi_f2d>
 8009d8e:	4680      	mov	r8, r0
 8009d90:	ee18 0a10 	vmov	r0, s16
 8009d94:	4689      	mov	r9, r1
 8009d96:	f7f6 fbbb 	bl	8000510 <__aeabi_f2d>
 8009d9a:	eeb4 9a49 	vcmp.f32	s18, s18
 8009d9e:	f994 4000 	ldrsb.w	r4, [r4]
 8009da2:	4b46      	ldr	r3, [pc, #280]	; (8009ebc <powf+0x2ac>)
 8009da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009da8:	d713      	bvc.n	8009dd2 <powf+0x1c2>
 8009daa:	2201      	movs	r2, #1
 8009dac:	9508      	str	r5, [sp, #32]
 8009dae:	e9cd 2300 	strd	r2, r3, [sp]
 8009db2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8009db6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009dba:	2c00      	cmp	r4, #0
 8009dbc:	d0c2      	beq.n	8009d44 <powf+0x134>
 8009dbe:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 8009dc2:	ee17 0a90 	vmov	r0, s15
 8009dc6:	f7f6 fba3 	bl	8000510 <__aeabi_f2d>
 8009dca:	2c02      	cmp	r4, #2
 8009dcc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009dd0:	e7c2      	b.n	8009d58 <powf+0x148>
 8009dd2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009dd6:	2203      	movs	r2, #3
 8009dd8:	9508      	str	r5, [sp, #32]
 8009dda:	e9cd 2300 	strd	r2, r3, [sp]
 8009dde:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8009de2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009de6:	ee28 8a27 	vmul.f32	s16, s16, s15
 8009dea:	b9fc      	cbnz	r4, 8009e2c <powf+0x21c>
 8009dec:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8009df0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009df4:	4b35      	ldr	r3, [pc, #212]	; (8009ecc <powf+0x2bc>)
 8009df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dfa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009dfe:	d553      	bpl.n	8009ea8 <powf+0x298>
 8009e00:	eeb0 0a48 	vmov.f32	s0, s16
 8009e04:	f000 fc12 	bl	800a62c <rintf>
 8009e08:	eeb4 0a48 	vcmp.f32	s0, s16
 8009e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e10:	d004      	beq.n	8009e1c <powf+0x20c>
 8009e12:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009e16:	4b2e      	ldr	r3, [pc, #184]	; (8009ed0 <powf+0x2c0>)
 8009e18:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009e1c:	f996 3000 	ldrsb.w	r3, [r6]
 8009e20:	2b02      	cmp	r3, #2
 8009e22:	d141      	bne.n	8009ea8 <powf+0x298>
 8009e24:	f000 fc72 	bl	800a70c <__errno>
 8009e28:	2322      	movs	r3, #34	; 0x22
 8009e2a:	e799      	b.n	8009d60 <powf+0x150>
 8009e2c:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8009e30:	2200      	movs	r2, #0
 8009e32:	4b28      	ldr	r3, [pc, #160]	; (8009ed4 <powf+0x2c4>)
 8009e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e38:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009e3c:	d5ee      	bpl.n	8009e1c <powf+0x20c>
 8009e3e:	eeb0 0a48 	vmov.f32	s0, s16
 8009e42:	f000 fbf3 	bl	800a62c <rintf>
 8009e46:	eeb4 0a48 	vcmp.f32	s0, s16
 8009e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e4e:	d0e5      	beq.n	8009e1c <powf+0x20c>
 8009e50:	2200      	movs	r2, #0
 8009e52:	4b1d      	ldr	r3, [pc, #116]	; (8009ec8 <powf+0x2b8>)
 8009e54:	e7e0      	b.n	8009e18 <powf+0x208>
 8009e56:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8009e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e5e:	f47f af4a 	bne.w	8009cf6 <powf+0xe6>
 8009e62:	eeb0 0a68 	vmov.f32	s0, s17
 8009e66:	f000 fbd0 	bl	800a60a <finitef>
 8009e6a:	2800      	cmp	r0, #0
 8009e6c:	f43f af43 	beq.w	8009cf6 <powf+0xe6>
 8009e70:	eeb0 0a48 	vmov.f32	s0, s16
 8009e74:	f000 fbc9 	bl	800a60a <finitef>
 8009e78:	2800      	cmp	r0, #0
 8009e7a:	f43f af3c 	beq.w	8009cf6 <powf+0xe6>
 8009e7e:	2304      	movs	r3, #4
 8009e80:	ee18 0a90 	vmov	r0, s17
 8009e84:	9300      	str	r3, [sp, #0]
 8009e86:	4b0d      	ldr	r3, [pc, #52]	; (8009ebc <powf+0x2ac>)
 8009e88:	9301      	str	r3, [sp, #4]
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	9308      	str	r3, [sp, #32]
 8009e8e:	f7f6 fb3f 	bl	8000510 <__aeabi_f2d>
 8009e92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e96:	ee18 0a10 	vmov	r0, s16
 8009e9a:	f7f6 fb39 	bl	8000510 <__aeabi_f2d>
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ea6:	e7b7      	b.n	8009e18 <powf+0x208>
 8009ea8:	4668      	mov	r0, sp
 8009eaa:	f000 fbac 	bl	800a606 <matherr>
 8009eae:	2800      	cmp	r0, #0
 8009eb0:	f47f af15 	bne.w	8009cde <powf+0xce>
 8009eb4:	e7b6      	b.n	8009e24 <powf+0x214>
 8009eb6:	bf00      	nop
 8009eb8:	20000b00 	.word	0x20000b00
 8009ebc:	0802375d 	.word	0x0802375d
 8009ec0:	3ff00000 	.word	0x3ff00000
 8009ec4:	00000000 	.word	0x00000000
 8009ec8:	fff00000 	.word	0xfff00000
 8009ecc:	47efffff 	.word	0x47efffff
 8009ed0:	c7efffff 	.word	0xc7efffff
 8009ed4:	7ff00000 	.word	0x7ff00000

08009ed8 <__ieee754_expf>:
 8009ed8:	ee10 2a10 	vmov	r2, s0
 8009edc:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8009ee0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009ee4:	d902      	bls.n	8009eec <__ieee754_expf+0x14>
 8009ee6:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009eea:	4770      	bx	lr
 8009eec:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8009ef0:	d105      	bne.n	8009efe <__ieee754_expf+0x26>
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	eddf 7a4f 	vldr	s15, [pc, #316]	; 800a034 <__ieee754_expf+0x15c>
 8009ef8:	fe00 0a27 	vseleq.f32	s0, s0, s15
 8009efc:	4770      	bx	lr
 8009efe:	484e      	ldr	r0, [pc, #312]	; (800a038 <__ieee754_expf+0x160>)
 8009f00:	4282      	cmp	r2, r0
 8009f02:	dd04      	ble.n	8009f0e <__ieee754_expf+0x36>
 8009f04:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800a03c <__ieee754_expf+0x164>
 8009f08:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009f0c:	4770      	bx	lr
 8009f0e:	2a00      	cmp	r2, #0
 8009f10:	da03      	bge.n	8009f1a <__ieee754_expf+0x42>
 8009f12:	4a4b      	ldr	r2, [pc, #300]	; (800a040 <__ieee754_expf+0x168>)
 8009f14:	4291      	cmp	r1, r2
 8009f16:	f200 808a 	bhi.w	800a02e <__ieee754_expf+0x156>
 8009f1a:	4a4a      	ldr	r2, [pc, #296]	; (800a044 <__ieee754_expf+0x16c>)
 8009f1c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009f20:	4291      	cmp	r1, r2
 8009f22:	d954      	bls.n	8009fce <__ieee754_expf+0xf6>
 8009f24:	4a48      	ldr	r2, [pc, #288]	; (800a048 <__ieee754_expf+0x170>)
 8009f26:	4291      	cmp	r1, r2
 8009f28:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8009f2c:	d836      	bhi.n	8009f9c <__ieee754_expf+0xc4>
 8009f2e:	4947      	ldr	r1, [pc, #284]	; (800a04c <__ieee754_expf+0x174>)
 8009f30:	4411      	add	r1, r2
 8009f32:	ed91 7a00 	vldr	s14, [r1]
 8009f36:	4946      	ldr	r1, [pc, #280]	; (800a050 <__ieee754_expf+0x178>)
 8009f38:	ee30 7a47 	vsub.f32	s14, s0, s14
 8009f3c:	440a      	add	r2, r1
 8009f3e:	edd2 7a00 	vldr	s15, [r2]
 8009f42:	f1c3 0201 	rsb	r2, r3, #1
 8009f46:	1ad2      	subs	r2, r2, r3
 8009f48:	ee37 0a67 	vsub.f32	s0, s14, s15
 8009f4c:	ee60 6a00 	vmul.f32	s13, s0, s0
 8009f50:	eddf 5a40 	vldr	s11, [pc, #256]	; 800a054 <__ieee754_expf+0x17c>
 8009f54:	ed9f 5a40 	vldr	s10, [pc, #256]	; 800a058 <__ieee754_expf+0x180>
 8009f58:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8009f5c:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a05c <__ieee754_expf+0x184>
 8009f60:	eee5 5a26 	vfma.f32	s11, s10, s13
 8009f64:	ed9f 5a3e 	vldr	s10, [pc, #248]	; 800a060 <__ieee754_expf+0x188>
 8009f68:	eea5 5aa6 	vfma.f32	s10, s11, s13
 8009f6c:	eddf 5a3d 	vldr	s11, [pc, #244]	; 800a064 <__ieee754_expf+0x18c>
 8009f70:	eee5 5a26 	vfma.f32	s11, s10, s13
 8009f74:	eeb0 5a40 	vmov.f32	s10, s0
 8009f78:	eea5 5ae6 	vfms.f32	s10, s11, s13
 8009f7c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8009f80:	eef0 6a45 	vmov.f32	s13, s10
 8009f84:	ee20 5a05 	vmul.f32	s10, s0, s10
 8009f88:	bb92      	cbnz	r2, 8009ff0 <__ieee754_expf+0x118>
 8009f8a:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8009f8e:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8009f92:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8009f96:	ee36 0a40 	vsub.f32	s0, s12, s0
 8009f9a:	4770      	bx	lr
 8009f9c:	4b32      	ldr	r3, [pc, #200]	; (800a068 <__ieee754_expf+0x190>)
 8009f9e:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800a06c <__ieee754_expf+0x194>
 8009fa2:	4413      	add	r3, r2
 8009fa4:	edd3 7a00 	vldr	s15, [r3]
 8009fa8:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009fac:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800a070 <__ieee754_expf+0x198>
 8009fb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009fb4:	ee17 2a90 	vmov	r2, s15
 8009fb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009fbc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8009fc0:	eeb0 7a40 	vmov.f32	s14, s0
 8009fc4:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 800a074 <__ieee754_expf+0x19c>
 8009fc8:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009fcc:	e7bc      	b.n	8009f48 <__ieee754_expf+0x70>
 8009fce:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 8009fd2:	d20b      	bcs.n	8009fec <__ieee754_expf+0x114>
 8009fd4:	eddf 6a19 	vldr	s13, [pc, #100]	; 800a03c <__ieee754_expf+0x164>
 8009fd8:	ee70 6a26 	vadd.f32	s13, s0, s13
 8009fdc:	eef4 6ac6 	vcmpe.f32	s13, s12
 8009fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fe4:	dd02      	ble.n	8009fec <__ieee754_expf+0x114>
 8009fe6:	ee30 0a06 	vadd.f32	s0, s0, s12
 8009fea:	4770      	bx	lr
 8009fec:	2200      	movs	r2, #0
 8009fee:	e7ad      	b.n	8009f4c <__ieee754_expf+0x74>
 8009ff0:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8009ff4:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8009ff8:	bfb8      	it	lt
 8009ffa:	3264      	addlt	r2, #100	; 0x64
 8009ffc:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800a000:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a004:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800a008:	ee76 7a40 	vsub.f32	s15, s12, s0
 800a00c:	ee17 3a90 	vmov	r3, s15
 800a010:	bfb5      	itete	lt
 800a012:	eddf 7a19 	vldrlt	s15, [pc, #100]	; 800a078 <__ieee754_expf+0x1a0>
 800a016:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800a01a:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800a01e:	ee00 3a10 	vmovge	s0, r3
 800a022:	bfbc      	itt	lt
 800a024:	ee00 3a10 	vmovlt	s0, r3
 800a028:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800a02c:	4770      	bx	lr
 800a02e:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a034 <__ieee754_expf+0x15c>
 800a032:	4770      	bx	lr
 800a034:	00000000 	.word	0x00000000
 800a038:	42b17217 	.word	0x42b17217
 800a03c:	7149f2ca 	.word	0x7149f2ca
 800a040:	42cff1b5 	.word	0x42cff1b5
 800a044:	3eb17218 	.word	0x3eb17218
 800a048:	3f851591 	.word	0x3f851591
 800a04c:	0802376c 	.word	0x0802376c
 800a050:	08023774 	.word	0x08023774
 800a054:	3331bb4c 	.word	0x3331bb4c
 800a058:	b5ddea0e 	.word	0xb5ddea0e
 800a05c:	388ab355 	.word	0x388ab355
 800a060:	bb360b61 	.word	0xbb360b61
 800a064:	3e2aaaab 	.word	0x3e2aaaab
 800a068:	08023764 	.word	0x08023764
 800a06c:	3fb8aa3b 	.word	0x3fb8aa3b
 800a070:	3f317180 	.word	0x3f317180
 800a074:	3717f7d1 	.word	0x3717f7d1
 800a078:	0d800000 	.word	0x0d800000

0800a07c <__ieee754_powf>:
 800a07c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a080:	ee10 5a90 	vmov	r5, s1
 800a084:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800a088:	ed2d 8b02 	vpush	{d8}
 800a08c:	eeb0 8a40 	vmov.f32	s16, s0
 800a090:	eef0 8a60 	vmov.f32	s17, s1
 800a094:	f000 8295 	beq.w	800a5c2 <__ieee754_powf+0x546>
 800a098:	ee10 8a10 	vmov	r8, s0
 800a09c:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800a0a0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800a0a4:	dc06      	bgt.n	800a0b4 <__ieee754_powf+0x38>
 800a0a6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800a0aa:	dd0a      	ble.n	800a0c2 <__ieee754_powf+0x46>
 800a0ac:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800a0b0:	f000 8287 	beq.w	800a5c2 <__ieee754_powf+0x546>
 800a0b4:	ecbd 8b02 	vpop	{d8}
 800a0b8:	48d8      	ldr	r0, [pc, #864]	; (800a41c <__ieee754_powf+0x3a0>)
 800a0ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0be:	f000 baaf 	b.w	800a620 <nanf>
 800a0c2:	f1b8 0f00 	cmp.w	r8, #0
 800a0c6:	da1d      	bge.n	800a104 <__ieee754_powf+0x88>
 800a0c8:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800a0cc:	da2c      	bge.n	800a128 <__ieee754_powf+0xac>
 800a0ce:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800a0d2:	db30      	blt.n	800a136 <__ieee754_powf+0xba>
 800a0d4:	15fb      	asrs	r3, r7, #23
 800a0d6:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800a0da:	fa47 f603 	asr.w	r6, r7, r3
 800a0de:	fa06 f303 	lsl.w	r3, r6, r3
 800a0e2:	42bb      	cmp	r3, r7
 800a0e4:	d127      	bne.n	800a136 <__ieee754_powf+0xba>
 800a0e6:	f006 0601 	and.w	r6, r6, #1
 800a0ea:	f1c6 0602 	rsb	r6, r6, #2
 800a0ee:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800a0f2:	d122      	bne.n	800a13a <__ieee754_powf+0xbe>
 800a0f4:	2d00      	cmp	r5, #0
 800a0f6:	f280 826a 	bge.w	800a5ce <__ieee754_powf+0x552>
 800a0fa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a0fe:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800a102:	e00d      	b.n	800a120 <__ieee754_powf+0xa4>
 800a104:	2600      	movs	r6, #0
 800a106:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800a10a:	d1f0      	bne.n	800a0ee <__ieee754_powf+0x72>
 800a10c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800a110:	f000 8257 	beq.w	800a5c2 <__ieee754_powf+0x546>
 800a114:	dd0a      	ble.n	800a12c <__ieee754_powf+0xb0>
 800a116:	2d00      	cmp	r5, #0
 800a118:	f280 8256 	bge.w	800a5c8 <__ieee754_powf+0x54c>
 800a11c:	ed9f 0ac0 	vldr	s0, [pc, #768]	; 800a420 <__ieee754_powf+0x3a4>
 800a120:	ecbd 8b02 	vpop	{d8}
 800a124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a128:	2602      	movs	r6, #2
 800a12a:	e7ec      	b.n	800a106 <__ieee754_powf+0x8a>
 800a12c:	2d00      	cmp	r5, #0
 800a12e:	daf5      	bge.n	800a11c <__ieee754_powf+0xa0>
 800a130:	eeb1 0a68 	vneg.f32	s0, s17
 800a134:	e7f4      	b.n	800a120 <__ieee754_powf+0xa4>
 800a136:	2600      	movs	r6, #0
 800a138:	e7d9      	b.n	800a0ee <__ieee754_powf+0x72>
 800a13a:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800a13e:	d102      	bne.n	800a146 <__ieee754_powf+0xca>
 800a140:	ee28 0a08 	vmul.f32	s0, s16, s16
 800a144:	e7ec      	b.n	800a120 <__ieee754_powf+0xa4>
 800a146:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800a14a:	eeb0 0a48 	vmov.f32	s0, s16
 800a14e:	d108      	bne.n	800a162 <__ieee754_powf+0xe6>
 800a150:	f1b8 0f00 	cmp.w	r8, #0
 800a154:	db05      	blt.n	800a162 <__ieee754_powf+0xe6>
 800a156:	ecbd 8b02 	vpop	{d8}
 800a15a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a15e:	f000 ba4f 	b.w	800a600 <__ieee754_sqrtf>
 800a162:	f7ff fcd3 	bl	8009b0c <fabsf>
 800a166:	b124      	cbz	r4, 800a172 <__ieee754_powf+0xf6>
 800a168:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800a16c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800a170:	d117      	bne.n	800a1a2 <__ieee754_powf+0x126>
 800a172:	2d00      	cmp	r5, #0
 800a174:	bfbc      	itt	lt
 800a176:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800a17a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800a17e:	f1b8 0f00 	cmp.w	r8, #0
 800a182:	dacd      	bge.n	800a120 <__ieee754_powf+0xa4>
 800a184:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800a188:	ea54 0306 	orrs.w	r3, r4, r6
 800a18c:	d104      	bne.n	800a198 <__ieee754_powf+0x11c>
 800a18e:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a192:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800a196:	e7c3      	b.n	800a120 <__ieee754_powf+0xa4>
 800a198:	2e01      	cmp	r6, #1
 800a19a:	d1c1      	bne.n	800a120 <__ieee754_powf+0xa4>
 800a19c:	eeb1 0a40 	vneg.f32	s0, s0
 800a1a0:	e7be      	b.n	800a120 <__ieee754_powf+0xa4>
 800a1a2:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800a1a6:	3801      	subs	r0, #1
 800a1a8:	ea56 0300 	orrs.w	r3, r6, r0
 800a1ac:	d104      	bne.n	800a1b8 <__ieee754_powf+0x13c>
 800a1ae:	ee38 8a48 	vsub.f32	s16, s16, s16
 800a1b2:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800a1b6:	e7b3      	b.n	800a120 <__ieee754_powf+0xa4>
 800a1b8:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800a1bc:	dd6c      	ble.n	800a298 <__ieee754_powf+0x21c>
 800a1be:	4b99      	ldr	r3, [pc, #612]	; (800a424 <__ieee754_powf+0x3a8>)
 800a1c0:	429c      	cmp	r4, r3
 800a1c2:	dc06      	bgt.n	800a1d2 <__ieee754_powf+0x156>
 800a1c4:	2d00      	cmp	r5, #0
 800a1c6:	daa9      	bge.n	800a11c <__ieee754_powf+0xa0>
 800a1c8:	ed9f 0a97 	vldr	s0, [pc, #604]	; 800a428 <__ieee754_powf+0x3ac>
 800a1cc:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a1d0:	e7a6      	b.n	800a120 <__ieee754_powf+0xa4>
 800a1d2:	4b96      	ldr	r3, [pc, #600]	; (800a42c <__ieee754_powf+0x3b0>)
 800a1d4:	429c      	cmp	r4, r3
 800a1d6:	dd02      	ble.n	800a1de <__ieee754_powf+0x162>
 800a1d8:	2d00      	cmp	r5, #0
 800a1da:	dcf5      	bgt.n	800a1c8 <__ieee754_powf+0x14c>
 800a1dc:	e79e      	b.n	800a11c <__ieee754_powf+0xa0>
 800a1de:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a1e2:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800a430 <__ieee754_powf+0x3b4>
 800a1e6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a1ea:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800a1ee:	eef1 6a40 	vneg.f32	s13, s0
 800a1f2:	ee60 0a00 	vmul.f32	s1, s0, s0
 800a1f6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a1fa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a1fe:	eee7 7a40 	vfms.f32	s15, s14, s0
 800a202:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 800a434 <__ieee754_powf+0x3b8>
 800a206:	ee67 0aa0 	vmul.f32	s1, s15, s1
 800a20a:	eddf 7a8b 	vldr	s15, [pc, #556]	; 800a438 <__ieee754_powf+0x3bc>
 800a20e:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 800a212:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a216:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800a43c <__ieee754_powf+0x3c0>
 800a21a:	eeb0 6a67 	vmov.f32	s12, s15
 800a21e:	eea0 6a07 	vfma.f32	s12, s0, s14
 800a222:	ee16 3a10 	vmov	r3, s12
 800a226:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a22a:	f023 030f 	bic.w	r3, r3, #15
 800a22e:	ee00 3a90 	vmov	s1, r3
 800a232:	eee6 0a87 	vfma.f32	s1, s13, s14
 800a236:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800a23a:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800a23e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800a242:	ee07 3a90 	vmov	s15, r3
 800a246:	3e01      	subs	r6, #1
 800a248:	f025 050f 	bic.w	r5, r5, #15
 800a24c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800a250:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800a254:	ea56 0200 	orrs.w	r2, r6, r0
 800a258:	ee07 5a10 	vmov	s14, r5
 800a25c:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800a260:	fe00 8a08 	vseleq.f32	s16, s0, s16
 800a264:	eee7 0a27 	vfma.f32	s1, s14, s15
 800a268:	ee07 5a10 	vmov	s14, r5
 800a26c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a270:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800a274:	ee17 4a10 	vmov	r4, s14
 800a278:	2c00      	cmp	r4, #0
 800a27a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a27e:	f340 8187 	ble.w	800a590 <__ieee754_powf+0x514>
 800a282:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800a286:	f340 80fb 	ble.w	800a480 <__ieee754_powf+0x404>
 800a28a:	eddf 7a67 	vldr	s15, [pc, #412]	; 800a428 <__ieee754_powf+0x3ac>
 800a28e:	ee28 0a27 	vmul.f32	s0, s16, s15
 800a292:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a296:	e743      	b.n	800a120 <__ieee754_powf+0xa4>
 800a298:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 800a29c:	bfbb      	ittet	lt
 800a29e:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 800a440 <__ieee754_powf+0x3c4>
 800a2a2:	f06f 0217 	mvnlt.w	r2, #23
 800a2a6:	2200      	movge	r2, #0
 800a2a8:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800a2ac:	bfb8      	it	lt
 800a2ae:	ee17 4a90 	vmovlt	r4, s15
 800a2b2:	15e3      	asrs	r3, r4, #23
 800a2b4:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800a2b8:	3b7f      	subs	r3, #127	; 0x7f
 800a2ba:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 800a2be:	4413      	add	r3, r2
 800a2c0:	4a60      	ldr	r2, [pc, #384]	; (800a444 <__ieee754_powf+0x3c8>)
 800a2c2:	4294      	cmp	r4, r2
 800a2c4:	dd06      	ble.n	800a2d4 <__ieee754_powf+0x258>
 800a2c6:	4a60      	ldr	r2, [pc, #384]	; (800a448 <__ieee754_powf+0x3cc>)
 800a2c8:	4294      	cmp	r4, r2
 800a2ca:	f340 80a5 	ble.w	800a418 <__ieee754_powf+0x39c>
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800a2d4:	2400      	movs	r4, #0
 800a2d6:	00a7      	lsls	r7, r4, #2
 800a2d8:	4a5c      	ldr	r2, [pc, #368]	; (800a44c <__ieee754_powf+0x3d0>)
 800a2da:	ee07 1a90 	vmov	s15, r1
 800a2de:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800a2e2:	443a      	add	r2, r7
 800a2e4:	1049      	asrs	r1, r1, #1
 800a2e6:	ed92 7a00 	vldr	s14, [r2]
 800a2ea:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800a2ee:	4a58      	ldr	r2, [pc, #352]	; (800a450 <__ieee754_powf+0x3d4>)
 800a2f0:	ee37 6a27 	vadd.f32	s12, s14, s15
 800a2f4:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800a2f8:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800a2fc:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800a300:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800a304:	ee06 1a10 	vmov	s12, r1
 800a308:	ee65 4aa6 	vmul.f32	s9, s11, s13
 800a30c:	ee14 ca90 	vmov	ip, s9
 800a310:	ea02 0c0c 	and.w	ip, r2, ip
 800a314:	ee05 ca10 	vmov	s10, ip
 800a318:	eeb1 4a45 	vneg.f32	s8, s10
 800a31c:	eee4 5a06 	vfma.f32	s11, s8, s12
 800a320:	ee36 6a47 	vsub.f32	s12, s12, s14
 800a324:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800a454 <__ieee754_powf+0x3d8>
 800a328:	ee37 6ac6 	vsub.f32	s12, s15, s12
 800a32c:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800a330:	eee4 5a06 	vfma.f32	s11, s8, s12
 800a334:	ee67 3aa7 	vmul.f32	s7, s15, s15
 800a338:	ee25 6aa6 	vmul.f32	s12, s11, s13
 800a33c:	eddf 5a46 	vldr	s11, [pc, #280]	; 800a458 <__ieee754_powf+0x3dc>
 800a340:	ee75 6a24 	vadd.f32	s13, s10, s9
 800a344:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800a348:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a45c <__ieee754_powf+0x3e0>
 800a34c:	ee66 6a86 	vmul.f32	s13, s13, s12
 800a350:	eee7 5a27 	vfma.f32	s11, s14, s15
 800a354:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800a430 <__ieee754_powf+0x3b4>
 800a358:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800a35c:	eddf 5a40 	vldr	s11, [pc, #256]	; 800a460 <__ieee754_powf+0x3e4>
 800a360:	eee7 5a27 	vfma.f32	s11, s14, s15
 800a364:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800a464 <__ieee754_powf+0x3e8>
 800a368:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800a36c:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 800a370:	eef0 7a65 	vmov.f32	s15, s11
 800a374:	eee3 6a87 	vfma.f32	s13, s7, s14
 800a378:	eee5 7a05 	vfma.f32	s15, s10, s10
 800a37c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a380:	ee17 1a90 	vmov	r1, s15
 800a384:	4011      	ands	r1, r2
 800a386:	ee07 1a90 	vmov	s15, r1
 800a38a:	ee37 7ae5 	vsub.f32	s14, s15, s11
 800a38e:	eddf 5a36 	vldr	s11, [pc, #216]	; 800a468 <__ieee754_powf+0x3ec>
 800a392:	eea4 7a05 	vfma.f32	s14, s8, s10
 800a396:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a39a:	ee27 7a24 	vmul.f32	s14, s14, s9
 800a39e:	eea7 7a86 	vfma.f32	s14, s15, s12
 800a3a2:	eeb0 6a47 	vmov.f32	s12, s14
 800a3a6:	eea5 6a27 	vfma.f32	s12, s10, s15
 800a3aa:	ee16 1a10 	vmov	r1, s12
 800a3ae:	4011      	ands	r1, r2
 800a3b0:	ee06 1a90 	vmov	s13, r1
 800a3b4:	ee06 1a10 	vmov	s12, r1
 800a3b8:	492c      	ldr	r1, [pc, #176]	; (800a46c <__ieee754_powf+0x3f0>)
 800a3ba:	eee4 6a27 	vfma.f32	s13, s8, s15
 800a3be:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800a470 <__ieee754_powf+0x3f4>
 800a3c2:	4439      	add	r1, r7
 800a3c4:	ee37 7a66 	vsub.f32	s14, s14, s13
 800a3c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a3cc:	eddf 7a29 	vldr	s15, [pc, #164]	; 800a474 <__ieee754_powf+0x3f8>
 800a3d0:	eea6 7a27 	vfma.f32	s14, s12, s15
 800a3d4:	edd1 7a00 	vldr	s15, [r1]
 800a3d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a3dc:	ee07 3a90 	vmov	s15, r3
 800a3e0:	4b25      	ldr	r3, [pc, #148]	; (800a478 <__ieee754_powf+0x3fc>)
 800a3e2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a3e6:	eef0 0a47 	vmov.f32	s1, s14
 800a3ea:	443b      	add	r3, r7
 800a3ec:	ed93 5a00 	vldr	s10, [r3]
 800a3f0:	eee6 0a25 	vfma.f32	s1, s12, s11
 800a3f4:	ee70 0a85 	vadd.f32	s1, s1, s10
 800a3f8:	ee70 7aa6 	vadd.f32	s15, s1, s13
 800a3fc:	ee17 3a90 	vmov	r3, s15
 800a400:	4013      	ands	r3, r2
 800a402:	ee07 3a90 	vmov	s15, r3
 800a406:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a40a:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800a40e:	eee6 7a65 	vfms.f32	s15, s12, s11
 800a412:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a416:	e710      	b.n	800a23a <__ieee754_powf+0x1be>
 800a418:	2401      	movs	r4, #1
 800a41a:	e75c      	b.n	800a2d6 <__ieee754_powf+0x25a>
 800a41c:	080238d9 	.word	0x080238d9
 800a420:	00000000 	.word	0x00000000
 800a424:	3f7ffff7 	.word	0x3f7ffff7
 800a428:	7149f2ca 	.word	0x7149f2ca
 800a42c:	3f800007 	.word	0x3f800007
 800a430:	3eaaaaab 	.word	0x3eaaaaab
 800a434:	36eca570 	.word	0x36eca570
 800a438:	3fb8aa3b 	.word	0x3fb8aa3b
 800a43c:	3fb8aa00 	.word	0x3fb8aa00
 800a440:	4b800000 	.word	0x4b800000
 800a444:	001cc471 	.word	0x001cc471
 800a448:	005db3d6 	.word	0x005db3d6
 800a44c:	0802377c 	.word	0x0802377c
 800a450:	fffff000 	.word	0xfffff000
 800a454:	3e6c3255 	.word	0x3e6c3255
 800a458:	3e53f142 	.word	0x3e53f142
 800a45c:	3e8ba305 	.word	0x3e8ba305
 800a460:	3edb6db7 	.word	0x3edb6db7
 800a464:	3f19999a 	.word	0x3f19999a
 800a468:	3f763800 	.word	0x3f763800
 800a46c:	0802378c 	.word	0x0802378c
 800a470:	3f76384f 	.word	0x3f76384f
 800a474:	369dc3a0 	.word	0x369dc3a0
 800a478:	08023784 	.word	0x08023784
 800a47c:	3338aa3c 	.word	0x3338aa3c
 800a480:	f040 8096 	bne.w	800a5b0 <__ieee754_powf+0x534>
 800a484:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800a47c <__ieee754_powf+0x400>
 800a488:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a48c:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800a490:	eef4 6ac7 	vcmpe.f32	s13, s14
 800a494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a498:	f73f aef7 	bgt.w	800a28a <__ieee754_powf+0x20e>
 800a49c:	15db      	asrs	r3, r3, #23
 800a49e:	494d      	ldr	r1, [pc, #308]	; (800a5d4 <__ieee754_powf+0x558>)
 800a4a0:	2c00      	cmp	r4, #0
 800a4a2:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800a4a6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a4aa:	fa43 f300 	asr.w	r3, r3, r0
 800a4ae:	4423      	add	r3, r4
 800a4b0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a4b4:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800a4b8:	f1a2 027f 	sub.w	r2, r2, #127	; 0x7f
 800a4bc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800a4c0:	fa41 f102 	asr.w	r1, r1, r2
 800a4c4:	f1c2 0217 	rsb	r2, r2, #23
 800a4c8:	ea23 0101 	bic.w	r1, r3, r1
 800a4cc:	fa40 f002 	asr.w	r0, r0, r2
 800a4d0:	ee07 1a10 	vmov	s14, r1
 800a4d4:	bfb8      	it	lt
 800a4d6:	4240      	neglt	r0, r0
 800a4d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a4dc:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800a4e0:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a5d8 <__ieee754_powf+0x55c>
 800a4e4:	ee17 3a10 	vmov	r3, s14
 800a4e8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a4ec:	f023 030f 	bic.w	r3, r3, #15
 800a4f0:	ee07 3a10 	vmov	s14, r3
 800a4f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a4f8:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800a4fc:	eddf 7a37 	vldr	s15, [pc, #220]	; 800a5dc <__ieee754_powf+0x560>
 800a500:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a504:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800a508:	eddf 6a35 	vldr	s13, [pc, #212]	; 800a5e0 <__ieee754_powf+0x564>
 800a50c:	eeb0 0a67 	vmov.f32	s0, s15
 800a510:	eea7 0a26 	vfma.f32	s0, s14, s13
 800a514:	eeb0 6a40 	vmov.f32	s12, s0
 800a518:	eea7 6a66 	vfms.f32	s12, s14, s13
 800a51c:	eddf 6a31 	vldr	s13, [pc, #196]	; 800a5e4 <__ieee754_powf+0x568>
 800a520:	ee20 7a00 	vmul.f32	s14, s0, s0
 800a524:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800a528:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800a5e8 <__ieee754_powf+0x56c>
 800a52c:	eea7 6a26 	vfma.f32	s12, s14, s13
 800a530:	eddf 6a2e 	vldr	s13, [pc, #184]	; 800a5ec <__ieee754_powf+0x570>
 800a534:	eee0 7a27 	vfma.f32	s15, s0, s15
 800a538:	eee6 6a07 	vfma.f32	s13, s12, s14
 800a53c:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800a5f0 <__ieee754_powf+0x574>
 800a540:	eea6 6a87 	vfma.f32	s12, s13, s14
 800a544:	eddf 6a2b 	vldr	s13, [pc, #172]	; 800a5f4 <__ieee754_powf+0x578>
 800a548:	eee6 6a07 	vfma.f32	s13, s12, s14
 800a54c:	eeb0 6a40 	vmov.f32	s12, s0
 800a550:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800a554:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800a558:	eeb0 7a46 	vmov.f32	s14, s12
 800a55c:	ee20 6a06 	vmul.f32	s12, s0, s12
 800a560:	ee77 6a66 	vsub.f32	s13, s14, s13
 800a564:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800a568:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a56c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800a570:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a574:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800a578:	ee10 3a10 	vmov	r3, s0
 800a57c:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800a580:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a584:	da1a      	bge.n	800a5bc <__ieee754_powf+0x540>
 800a586:	f000 f855 	bl	800a634 <scalbnf>
 800a58a:	ee20 0a08 	vmul.f32	s0, s0, s16
 800a58e:	e5c7      	b.n	800a120 <__ieee754_powf+0xa4>
 800a590:	4a19      	ldr	r2, [pc, #100]	; (800a5f8 <__ieee754_powf+0x57c>)
 800a592:	4293      	cmp	r3, r2
 800a594:	dd02      	ble.n	800a59c <__ieee754_powf+0x520>
 800a596:	eddf 7a19 	vldr	s15, [pc, #100]	; 800a5fc <__ieee754_powf+0x580>
 800a59a:	e678      	b.n	800a28e <__ieee754_powf+0x212>
 800a59c:	d108      	bne.n	800a5b0 <__ieee754_powf+0x534>
 800a59e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a5a2:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800a5a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5aa:	f6ff af77 	blt.w	800a49c <__ieee754_powf+0x420>
 800a5ae:	e7f2      	b.n	800a596 <__ieee754_powf+0x51a>
 800a5b0:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800a5b4:	f73f af72 	bgt.w	800a49c <__ieee754_powf+0x420>
 800a5b8:	2000      	movs	r0, #0
 800a5ba:	e78f      	b.n	800a4dc <__ieee754_powf+0x460>
 800a5bc:	ee00 3a10 	vmov	s0, r3
 800a5c0:	e7e3      	b.n	800a58a <__ieee754_powf+0x50e>
 800a5c2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a5c6:	e5ab      	b.n	800a120 <__ieee754_powf+0xa4>
 800a5c8:	eeb0 0a68 	vmov.f32	s0, s17
 800a5cc:	e5a8      	b.n	800a120 <__ieee754_powf+0xa4>
 800a5ce:	eeb0 0a48 	vmov.f32	s0, s16
 800a5d2:	e5a5      	b.n	800a120 <__ieee754_powf+0xa4>
 800a5d4:	007fffff 	.word	0x007fffff
 800a5d8:	3f317218 	.word	0x3f317218
 800a5dc:	35bfbe8c 	.word	0x35bfbe8c
 800a5e0:	3f317200 	.word	0x3f317200
 800a5e4:	3331bb4c 	.word	0x3331bb4c
 800a5e8:	b5ddea0e 	.word	0xb5ddea0e
 800a5ec:	388ab355 	.word	0x388ab355
 800a5f0:	bb360b61 	.word	0xbb360b61
 800a5f4:	3e2aaaab 	.word	0x3e2aaaab
 800a5f8:	43160000 	.word	0x43160000
 800a5fc:	0da24260 	.word	0x0da24260

0800a600 <__ieee754_sqrtf>:
 800a600:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a604:	4770      	bx	lr

0800a606 <matherr>:
 800a606:	2000      	movs	r0, #0
 800a608:	4770      	bx	lr

0800a60a <finitef>:
 800a60a:	ee10 3a10 	vmov	r3, s0
 800a60e:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800a612:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800a616:	bfac      	ite	ge
 800a618:	2000      	movge	r0, #0
 800a61a:	2001      	movlt	r0, #1
 800a61c:	4770      	bx	lr
	...

0800a620 <nanf>:
 800a620:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a628 <nanf+0x8>
 800a624:	4770      	bx	lr
 800a626:	bf00      	nop
 800a628:	7fc00000 	.word	0x7fc00000

0800a62c <rintf>:
 800a62c:	eeb7 0a40 	vrintx.f32	s0, s0
 800a630:	4770      	bx	lr
	...

0800a634 <scalbnf>:
 800a634:	ee10 2a10 	vmov	r2, s0
 800a638:	eef0 0a40 	vmov.f32	s1, s0
 800a63c:	b508      	push	{r3, lr}
 800a63e:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800a642:	ed2d 8b02 	vpush	{d8}
 800a646:	d004      	beq.n	800a652 <scalbnf+0x1e>
 800a648:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a64c:	d306      	bcc.n	800a65c <scalbnf+0x28>
 800a64e:	ee70 0a00 	vadd.f32	s1, s0, s0
 800a652:	eeb0 0a60 	vmov.f32	s0, s1
 800a656:	ecbd 8b02 	vpop	{d8}
 800a65a:	bd08      	pop	{r3, pc}
 800a65c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a660:	d21c      	bcs.n	800a69c <scalbnf+0x68>
 800a662:	4b1f      	ldr	r3, [pc, #124]	; (800a6e0 <scalbnf+0xac>)
 800a664:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800a6e4 <scalbnf+0xb0>
 800a668:	4298      	cmp	r0, r3
 800a66a:	ee60 0a27 	vmul.f32	s1, s0, s15
 800a66e:	db10      	blt.n	800a692 <scalbnf+0x5e>
 800a670:	ee10 2a90 	vmov	r2, s1
 800a674:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800a678:	3b19      	subs	r3, #25
 800a67a:	4403      	add	r3, r0
 800a67c:	2bfe      	cmp	r3, #254	; 0xfe
 800a67e:	dd0f      	ble.n	800a6a0 <scalbnf+0x6c>
 800a680:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800a6e8 <scalbnf+0xb4>
 800a684:	eeb0 0a48 	vmov.f32	s0, s16
 800a688:	f000 f834 	bl	800a6f4 <copysignf>
 800a68c:	ee60 0a08 	vmul.f32	s1, s0, s16
 800a690:	e7df      	b.n	800a652 <scalbnf+0x1e>
 800a692:	eddf 7a16 	vldr	s15, [pc, #88]	; 800a6ec <scalbnf+0xb8>
 800a696:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800a69a:	e7da      	b.n	800a652 <scalbnf+0x1e>
 800a69c:	0ddb      	lsrs	r3, r3, #23
 800a69e:	e7ec      	b.n	800a67a <scalbnf+0x46>
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	dd06      	ble.n	800a6b2 <scalbnf+0x7e>
 800a6a4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800a6a8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800a6ac:	ee00 3a90 	vmov	s1, r3
 800a6b0:	e7cf      	b.n	800a652 <scalbnf+0x1e>
 800a6b2:	f113 0f16 	cmn.w	r3, #22
 800a6b6:	da06      	bge.n	800a6c6 <scalbnf+0x92>
 800a6b8:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a6bc:	4298      	cmp	r0, r3
 800a6be:	dcdf      	bgt.n	800a680 <scalbnf+0x4c>
 800a6c0:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800a6ec <scalbnf+0xb8>
 800a6c4:	e7de      	b.n	800a684 <scalbnf+0x50>
 800a6c6:	3319      	adds	r3, #25
 800a6c8:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800a6cc:	eddf 7a08 	vldr	s15, [pc, #32]	; 800a6f0 <scalbnf+0xbc>
 800a6d0:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800a6d4:	ee07 3a10 	vmov	s14, r3
 800a6d8:	ee67 0a27 	vmul.f32	s1, s14, s15
 800a6dc:	e7b9      	b.n	800a652 <scalbnf+0x1e>
 800a6de:	bf00      	nop
 800a6e0:	ffff3cb0 	.word	0xffff3cb0
 800a6e4:	4c000000 	.word	0x4c000000
 800a6e8:	7149f2ca 	.word	0x7149f2ca
 800a6ec:	0da24260 	.word	0x0da24260
 800a6f0:	33000000 	.word	0x33000000

0800a6f4 <copysignf>:
 800a6f4:	ee10 3a10 	vmov	r3, s0
 800a6f8:	ee10 2a90 	vmov	r2, s1
 800a6fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a700:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800a704:	4313      	orrs	r3, r2
 800a706:	ee00 3a10 	vmov	s0, r3
 800a70a:	4770      	bx	lr

0800a70c <__errno>:
 800a70c:	4b01      	ldr	r3, [pc, #4]	; (800a714 <__errno+0x8>)
 800a70e:	6818      	ldr	r0, [r3, #0]
 800a710:	4770      	bx	lr
 800a712:	bf00      	nop
 800a714:	20000b04 	.word	0x20000b04

0800a718 <__libc_init_array>:
 800a718:	b570      	push	{r4, r5, r6, lr}
 800a71a:	4e0d      	ldr	r6, [pc, #52]	; (800a750 <__libc_init_array+0x38>)
 800a71c:	2500      	movs	r5, #0
 800a71e:	4c0d      	ldr	r4, [pc, #52]	; (800a754 <__libc_init_array+0x3c>)
 800a720:	1ba4      	subs	r4, r4, r6
 800a722:	10a4      	asrs	r4, r4, #2
 800a724:	42a5      	cmp	r5, r4
 800a726:	d109      	bne.n	800a73c <__libc_init_array+0x24>
 800a728:	4e0b      	ldr	r6, [pc, #44]	; (800a758 <__libc_init_array+0x40>)
 800a72a:	2500      	movs	r5, #0
 800a72c:	4c0b      	ldr	r4, [pc, #44]	; (800a75c <__libc_init_array+0x44>)
 800a72e:	f002 f873 	bl	800c818 <_init>
 800a732:	1ba4      	subs	r4, r4, r6
 800a734:	10a4      	asrs	r4, r4, #2
 800a736:	42a5      	cmp	r5, r4
 800a738:	d105      	bne.n	800a746 <__libc_init_array+0x2e>
 800a73a:	bd70      	pop	{r4, r5, r6, pc}
 800a73c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a740:	3501      	adds	r5, #1
 800a742:	4798      	blx	r3
 800a744:	e7ee      	b.n	800a724 <__libc_init_array+0xc>
 800a746:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a74a:	3501      	adds	r5, #1
 800a74c:	4798      	blx	r3
 800a74e:	e7f2      	b.n	800a736 <__libc_init_array+0x1e>
 800a750:	080239f8 	.word	0x080239f8
 800a754:	080239f8 	.word	0x080239f8
 800a758:	080239f8 	.word	0x080239f8
 800a75c:	080239fc 	.word	0x080239fc

0800a760 <malloc>:
 800a760:	4b02      	ldr	r3, [pc, #8]	; (800a76c <malloc+0xc>)
 800a762:	4601      	mov	r1, r0
 800a764:	6818      	ldr	r0, [r3, #0]
 800a766:	f000 b865 	b.w	800a834 <_malloc_r>
 800a76a:	bf00      	nop
 800a76c:	20000b04 	.word	0x20000b04

0800a770 <memcpy>:
 800a770:	1e43      	subs	r3, r0, #1
 800a772:	440a      	add	r2, r1
 800a774:	b510      	push	{r4, lr}
 800a776:	4291      	cmp	r1, r2
 800a778:	d100      	bne.n	800a77c <memcpy+0xc>
 800a77a:	bd10      	pop	{r4, pc}
 800a77c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a780:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a784:	e7f7      	b.n	800a776 <memcpy+0x6>

0800a786 <memset>:
 800a786:	4402      	add	r2, r0
 800a788:	4603      	mov	r3, r0
 800a78a:	4293      	cmp	r3, r2
 800a78c:	d100      	bne.n	800a790 <memset+0xa>
 800a78e:	4770      	bx	lr
 800a790:	f803 1b01 	strb.w	r1, [r3], #1
 800a794:	e7f9      	b.n	800a78a <memset+0x4>
	...

0800a798 <_free_r>:
 800a798:	b538      	push	{r3, r4, r5, lr}
 800a79a:	4605      	mov	r5, r0
 800a79c:	2900      	cmp	r1, #0
 800a79e:	d045      	beq.n	800a82c <_free_r+0x94>
 800a7a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7a4:	1f0c      	subs	r4, r1, #4
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	bfb8      	it	lt
 800a7aa:	18e4      	addlt	r4, r4, r3
 800a7ac:	f001 fb8c 	bl	800bec8 <__malloc_lock>
 800a7b0:	4a1f      	ldr	r2, [pc, #124]	; (800a830 <_free_r+0x98>)
 800a7b2:	6813      	ldr	r3, [r2, #0]
 800a7b4:	4610      	mov	r0, r2
 800a7b6:	b933      	cbnz	r3, 800a7c6 <_free_r+0x2e>
 800a7b8:	6063      	str	r3, [r4, #4]
 800a7ba:	6014      	str	r4, [r2, #0]
 800a7bc:	4628      	mov	r0, r5
 800a7be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7c2:	f001 bb82 	b.w	800beca <__malloc_unlock>
 800a7c6:	42a3      	cmp	r3, r4
 800a7c8:	d90c      	bls.n	800a7e4 <_free_r+0x4c>
 800a7ca:	6821      	ldr	r1, [r4, #0]
 800a7cc:	1862      	adds	r2, r4, r1
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	bf02      	ittt	eq
 800a7d2:	681a      	ldreq	r2, [r3, #0]
 800a7d4:	685b      	ldreq	r3, [r3, #4]
 800a7d6:	1852      	addeq	r2, r2, r1
 800a7d8:	6063      	str	r3, [r4, #4]
 800a7da:	bf08      	it	eq
 800a7dc:	6022      	streq	r2, [r4, #0]
 800a7de:	6004      	str	r4, [r0, #0]
 800a7e0:	e7ec      	b.n	800a7bc <_free_r+0x24>
 800a7e2:	4613      	mov	r3, r2
 800a7e4:	685a      	ldr	r2, [r3, #4]
 800a7e6:	b10a      	cbz	r2, 800a7ec <_free_r+0x54>
 800a7e8:	42a2      	cmp	r2, r4
 800a7ea:	d9fa      	bls.n	800a7e2 <_free_r+0x4a>
 800a7ec:	6819      	ldr	r1, [r3, #0]
 800a7ee:	1858      	adds	r0, r3, r1
 800a7f0:	42a0      	cmp	r0, r4
 800a7f2:	d10b      	bne.n	800a80c <_free_r+0x74>
 800a7f4:	6820      	ldr	r0, [r4, #0]
 800a7f6:	4401      	add	r1, r0
 800a7f8:	1858      	adds	r0, r3, r1
 800a7fa:	6019      	str	r1, [r3, #0]
 800a7fc:	4282      	cmp	r2, r0
 800a7fe:	d1dd      	bne.n	800a7bc <_free_r+0x24>
 800a800:	6810      	ldr	r0, [r2, #0]
 800a802:	6852      	ldr	r2, [r2, #4]
 800a804:	4401      	add	r1, r0
 800a806:	605a      	str	r2, [r3, #4]
 800a808:	6019      	str	r1, [r3, #0]
 800a80a:	e7d7      	b.n	800a7bc <_free_r+0x24>
 800a80c:	d902      	bls.n	800a814 <_free_r+0x7c>
 800a80e:	230c      	movs	r3, #12
 800a810:	602b      	str	r3, [r5, #0]
 800a812:	e7d3      	b.n	800a7bc <_free_r+0x24>
 800a814:	6820      	ldr	r0, [r4, #0]
 800a816:	1821      	adds	r1, r4, r0
 800a818:	428a      	cmp	r2, r1
 800a81a:	bf02      	ittt	eq
 800a81c:	6811      	ldreq	r1, [r2, #0]
 800a81e:	6852      	ldreq	r2, [r2, #4]
 800a820:	1809      	addeq	r1, r1, r0
 800a822:	6062      	str	r2, [r4, #4]
 800a824:	bf08      	it	eq
 800a826:	6021      	streq	r1, [r4, #0]
 800a828:	605c      	str	r4, [r3, #4]
 800a82a:	e7c7      	b.n	800a7bc <_free_r+0x24>
 800a82c:	bd38      	pop	{r3, r4, r5, pc}
 800a82e:	bf00      	nop
 800a830:	20000da0 	.word	0x20000da0

0800a834 <_malloc_r>:
 800a834:	b570      	push	{r4, r5, r6, lr}
 800a836:	1ccd      	adds	r5, r1, #3
 800a838:	4606      	mov	r6, r0
 800a83a:	f025 0503 	bic.w	r5, r5, #3
 800a83e:	3508      	adds	r5, #8
 800a840:	2d0c      	cmp	r5, #12
 800a842:	bf38      	it	cc
 800a844:	250c      	movcc	r5, #12
 800a846:	2d00      	cmp	r5, #0
 800a848:	db01      	blt.n	800a84e <_malloc_r+0x1a>
 800a84a:	42a9      	cmp	r1, r5
 800a84c:	d903      	bls.n	800a856 <_malloc_r+0x22>
 800a84e:	230c      	movs	r3, #12
 800a850:	6033      	str	r3, [r6, #0]
 800a852:	2000      	movs	r0, #0
 800a854:	bd70      	pop	{r4, r5, r6, pc}
 800a856:	f001 fb37 	bl	800bec8 <__malloc_lock>
 800a85a:	4a21      	ldr	r2, [pc, #132]	; (800a8e0 <_malloc_r+0xac>)
 800a85c:	6814      	ldr	r4, [r2, #0]
 800a85e:	4621      	mov	r1, r4
 800a860:	b991      	cbnz	r1, 800a888 <_malloc_r+0x54>
 800a862:	4c20      	ldr	r4, [pc, #128]	; (800a8e4 <_malloc_r+0xb0>)
 800a864:	6823      	ldr	r3, [r4, #0]
 800a866:	b91b      	cbnz	r3, 800a870 <_malloc_r+0x3c>
 800a868:	4630      	mov	r0, r6
 800a86a:	f000 fc9b 	bl	800b1a4 <_sbrk_r>
 800a86e:	6020      	str	r0, [r4, #0]
 800a870:	4629      	mov	r1, r5
 800a872:	4630      	mov	r0, r6
 800a874:	f000 fc96 	bl	800b1a4 <_sbrk_r>
 800a878:	1c43      	adds	r3, r0, #1
 800a87a:	d124      	bne.n	800a8c6 <_malloc_r+0x92>
 800a87c:	230c      	movs	r3, #12
 800a87e:	4630      	mov	r0, r6
 800a880:	6033      	str	r3, [r6, #0]
 800a882:	f001 fb22 	bl	800beca <__malloc_unlock>
 800a886:	e7e4      	b.n	800a852 <_malloc_r+0x1e>
 800a888:	680b      	ldr	r3, [r1, #0]
 800a88a:	1b5b      	subs	r3, r3, r5
 800a88c:	d418      	bmi.n	800a8c0 <_malloc_r+0x8c>
 800a88e:	2b0b      	cmp	r3, #11
 800a890:	d90f      	bls.n	800a8b2 <_malloc_r+0x7e>
 800a892:	18cc      	adds	r4, r1, r3
 800a894:	600b      	str	r3, [r1, #0]
 800a896:	50cd      	str	r5, [r1, r3]
 800a898:	4630      	mov	r0, r6
 800a89a:	f001 fb16 	bl	800beca <__malloc_unlock>
 800a89e:	f104 000b 	add.w	r0, r4, #11
 800a8a2:	1d23      	adds	r3, r4, #4
 800a8a4:	f020 0007 	bic.w	r0, r0, #7
 800a8a8:	1ac3      	subs	r3, r0, r3
 800a8aa:	d0d3      	beq.n	800a854 <_malloc_r+0x20>
 800a8ac:	425a      	negs	r2, r3
 800a8ae:	50e2      	str	r2, [r4, r3]
 800a8b0:	e7d0      	b.n	800a854 <_malloc_r+0x20>
 800a8b2:	428c      	cmp	r4, r1
 800a8b4:	684b      	ldr	r3, [r1, #4]
 800a8b6:	bf1a      	itte	ne
 800a8b8:	6063      	strne	r3, [r4, #4]
 800a8ba:	460c      	movne	r4, r1
 800a8bc:	6013      	streq	r3, [r2, #0]
 800a8be:	e7eb      	b.n	800a898 <_malloc_r+0x64>
 800a8c0:	460c      	mov	r4, r1
 800a8c2:	6849      	ldr	r1, [r1, #4]
 800a8c4:	e7cc      	b.n	800a860 <_malloc_r+0x2c>
 800a8c6:	1cc4      	adds	r4, r0, #3
 800a8c8:	f024 0403 	bic.w	r4, r4, #3
 800a8cc:	42a0      	cmp	r0, r4
 800a8ce:	d005      	beq.n	800a8dc <_malloc_r+0xa8>
 800a8d0:	1a21      	subs	r1, r4, r0
 800a8d2:	4630      	mov	r0, r6
 800a8d4:	f000 fc66 	bl	800b1a4 <_sbrk_r>
 800a8d8:	3001      	adds	r0, #1
 800a8da:	d0cf      	beq.n	800a87c <_malloc_r+0x48>
 800a8dc:	6025      	str	r5, [r4, #0]
 800a8de:	e7db      	b.n	800a898 <_malloc_r+0x64>
 800a8e0:	20000da0 	.word	0x20000da0
 800a8e4:	20000da4 	.word	0x20000da4

0800a8e8 <__cvt>:
 800a8e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8ec:	ec55 4b10 	vmov	r4, r5, d0
 800a8f0:	2d00      	cmp	r5, #0
 800a8f2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800a8f4:	460e      	mov	r6, r1
 800a8f6:	4691      	mov	r9, r2
 800a8f8:	4619      	mov	r1, r3
 800a8fa:	bfb8      	it	lt
 800a8fc:	4622      	movlt	r2, r4
 800a8fe:	462b      	mov	r3, r5
 800a900:	f027 0720 	bic.w	r7, r7, #32
 800a904:	bfb6      	itet	lt
 800a906:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a90a:	2300      	movge	r3, #0
 800a90c:	4614      	movlt	r4, r2
 800a90e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a912:	bfbc      	itt	lt
 800a914:	461d      	movlt	r5, r3
 800a916:	232d      	movlt	r3, #45	; 0x2d
 800a918:	2f46      	cmp	r7, #70	; 0x46
 800a91a:	700b      	strb	r3, [r1, #0]
 800a91c:	d004      	beq.n	800a928 <__cvt+0x40>
 800a91e:	2f45      	cmp	r7, #69	; 0x45
 800a920:	d100      	bne.n	800a924 <__cvt+0x3c>
 800a922:	3601      	adds	r6, #1
 800a924:	2102      	movs	r1, #2
 800a926:	e000      	b.n	800a92a <__cvt+0x42>
 800a928:	2103      	movs	r1, #3
 800a92a:	ab03      	add	r3, sp, #12
 800a92c:	4632      	mov	r2, r6
 800a92e:	9301      	str	r3, [sp, #4]
 800a930:	ab02      	add	r3, sp, #8
 800a932:	ec45 4b10 	vmov	d0, r4, r5
 800a936:	9300      	str	r3, [sp, #0]
 800a938:	4653      	mov	r3, sl
 800a93a:	f000 fcf5 	bl	800b328 <_dtoa_r>
 800a93e:	2f47      	cmp	r7, #71	; 0x47
 800a940:	4680      	mov	r8, r0
 800a942:	d102      	bne.n	800a94a <__cvt+0x62>
 800a944:	f019 0f01 	tst.w	r9, #1
 800a948:	d026      	beq.n	800a998 <__cvt+0xb0>
 800a94a:	2f46      	cmp	r7, #70	; 0x46
 800a94c:	eb08 0906 	add.w	r9, r8, r6
 800a950:	d111      	bne.n	800a976 <__cvt+0x8e>
 800a952:	f898 3000 	ldrb.w	r3, [r8]
 800a956:	2b30      	cmp	r3, #48	; 0x30
 800a958:	d10a      	bne.n	800a970 <__cvt+0x88>
 800a95a:	2200      	movs	r2, #0
 800a95c:	2300      	movs	r3, #0
 800a95e:	4620      	mov	r0, r4
 800a960:	4629      	mov	r1, r5
 800a962:	f7f6 f895 	bl	8000a90 <__aeabi_dcmpeq>
 800a966:	b918      	cbnz	r0, 800a970 <__cvt+0x88>
 800a968:	f1c6 0601 	rsb	r6, r6, #1
 800a96c:	f8ca 6000 	str.w	r6, [sl]
 800a970:	f8da 3000 	ldr.w	r3, [sl]
 800a974:	4499      	add	r9, r3
 800a976:	2200      	movs	r2, #0
 800a978:	2300      	movs	r3, #0
 800a97a:	4620      	mov	r0, r4
 800a97c:	4629      	mov	r1, r5
 800a97e:	f7f6 f887 	bl	8000a90 <__aeabi_dcmpeq>
 800a982:	b938      	cbnz	r0, 800a994 <__cvt+0xac>
 800a984:	2230      	movs	r2, #48	; 0x30
 800a986:	9b03      	ldr	r3, [sp, #12]
 800a988:	454b      	cmp	r3, r9
 800a98a:	d205      	bcs.n	800a998 <__cvt+0xb0>
 800a98c:	1c59      	adds	r1, r3, #1
 800a98e:	9103      	str	r1, [sp, #12]
 800a990:	701a      	strb	r2, [r3, #0]
 800a992:	e7f8      	b.n	800a986 <__cvt+0x9e>
 800a994:	f8cd 900c 	str.w	r9, [sp, #12]
 800a998:	9b03      	ldr	r3, [sp, #12]
 800a99a:	4640      	mov	r0, r8
 800a99c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a99e:	eba3 0308 	sub.w	r3, r3, r8
 800a9a2:	6013      	str	r3, [r2, #0]
 800a9a4:	b004      	add	sp, #16
 800a9a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a9aa <__exponent>:
 800a9aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9ac:	2900      	cmp	r1, #0
 800a9ae:	4604      	mov	r4, r0
 800a9b0:	bfba      	itte	lt
 800a9b2:	4249      	neglt	r1, r1
 800a9b4:	232d      	movlt	r3, #45	; 0x2d
 800a9b6:	232b      	movge	r3, #43	; 0x2b
 800a9b8:	f804 2b02 	strb.w	r2, [r4], #2
 800a9bc:	2909      	cmp	r1, #9
 800a9be:	7043      	strb	r3, [r0, #1]
 800a9c0:	dd20      	ble.n	800aa04 <__exponent+0x5a>
 800a9c2:	f10d 0307 	add.w	r3, sp, #7
 800a9c6:	260a      	movs	r6, #10
 800a9c8:	461f      	mov	r7, r3
 800a9ca:	1e5a      	subs	r2, r3, #1
 800a9cc:	fb91 f5f6 	sdiv	r5, r1, r6
 800a9d0:	fb06 1115 	mls	r1, r6, r5, r1
 800a9d4:	2d09      	cmp	r5, #9
 800a9d6:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800a9da:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a9de:	4629      	mov	r1, r5
 800a9e0:	dc09      	bgt.n	800a9f6 <__exponent+0x4c>
 800a9e2:	3130      	adds	r1, #48	; 0x30
 800a9e4:	3b02      	subs	r3, #2
 800a9e6:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a9ea:	42bb      	cmp	r3, r7
 800a9ec:	4622      	mov	r2, r4
 800a9ee:	d304      	bcc.n	800a9fa <__exponent+0x50>
 800a9f0:	1a10      	subs	r0, r2, r0
 800a9f2:	b003      	add	sp, #12
 800a9f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9f6:	4613      	mov	r3, r2
 800a9f8:	e7e7      	b.n	800a9ca <__exponent+0x20>
 800a9fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9fe:	f804 2b01 	strb.w	r2, [r4], #1
 800aa02:	e7f2      	b.n	800a9ea <__exponent+0x40>
 800aa04:	2330      	movs	r3, #48	; 0x30
 800aa06:	1d02      	adds	r2, r0, #4
 800aa08:	4419      	add	r1, r3
 800aa0a:	7083      	strb	r3, [r0, #2]
 800aa0c:	70c1      	strb	r1, [r0, #3]
 800aa0e:	e7ef      	b.n	800a9f0 <__exponent+0x46>

0800aa10 <_printf_float>:
 800aa10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa14:	b08d      	sub	sp, #52	; 0x34
 800aa16:	460c      	mov	r4, r1
 800aa18:	4616      	mov	r6, r2
 800aa1a:	461f      	mov	r7, r3
 800aa1c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800aa20:	4605      	mov	r5, r0
 800aa22:	f001 fa35 	bl	800be90 <_localeconv_r>
 800aa26:	6803      	ldr	r3, [r0, #0]
 800aa28:	4618      	mov	r0, r3
 800aa2a:	9304      	str	r3, [sp, #16]
 800aa2c:	f7f5 fc04 	bl	8000238 <strlen>
 800aa30:	2300      	movs	r3, #0
 800aa32:	9005      	str	r0, [sp, #20]
 800aa34:	930a      	str	r3, [sp, #40]	; 0x28
 800aa36:	f8d8 3000 	ldr.w	r3, [r8]
 800aa3a:	f894 a018 	ldrb.w	sl, [r4, #24]
 800aa3e:	3307      	adds	r3, #7
 800aa40:	f8d4 b000 	ldr.w	fp, [r4]
 800aa44:	f023 0307 	bic.w	r3, r3, #7
 800aa48:	f103 0208 	add.w	r2, r3, #8
 800aa4c:	f8c8 2000 	str.w	r2, [r8]
 800aa50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa54:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800aa58:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800aa5c:	f04f 32ff 	mov.w	r2, #4294967295
 800aa60:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aa64:	f8cd 8018 	str.w	r8, [sp, #24]
 800aa68:	9307      	str	r3, [sp, #28]
 800aa6a:	4ba7      	ldr	r3, [pc, #668]	; (800ad08 <_printf_float+0x2f8>)
 800aa6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa70:	f7f6 f840 	bl	8000af4 <__aeabi_dcmpun>
 800aa74:	bb70      	cbnz	r0, 800aad4 <_printf_float+0xc4>
 800aa76:	f04f 32ff 	mov.w	r2, #4294967295
 800aa7a:	4ba3      	ldr	r3, [pc, #652]	; (800ad08 <_printf_float+0x2f8>)
 800aa7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa80:	f7f6 f81a 	bl	8000ab8 <__aeabi_dcmple>
 800aa84:	bb30      	cbnz	r0, 800aad4 <_printf_float+0xc4>
 800aa86:	2200      	movs	r2, #0
 800aa88:	2300      	movs	r3, #0
 800aa8a:	4640      	mov	r0, r8
 800aa8c:	4649      	mov	r1, r9
 800aa8e:	f7f6 f809 	bl	8000aa4 <__aeabi_dcmplt>
 800aa92:	b110      	cbz	r0, 800aa9a <_printf_float+0x8a>
 800aa94:	232d      	movs	r3, #45	; 0x2d
 800aa96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa9a:	4a9c      	ldr	r2, [pc, #624]	; (800ad0c <_printf_float+0x2fc>)
 800aa9c:	4b9c      	ldr	r3, [pc, #624]	; (800ad10 <_printf_float+0x300>)
 800aa9e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800aaa2:	bf8c      	ite	hi
 800aaa4:	4690      	movhi	r8, r2
 800aaa6:	4698      	movls	r8, r3
 800aaa8:	f04f 0900 	mov.w	r9, #0
 800aaac:	2303      	movs	r3, #3
 800aaae:	f02b 0204 	bic.w	r2, fp, #4
 800aab2:	6123      	str	r3, [r4, #16]
 800aab4:	6022      	str	r2, [r4, #0]
 800aab6:	9700      	str	r7, [sp, #0]
 800aab8:	4633      	mov	r3, r6
 800aaba:	aa0b      	add	r2, sp, #44	; 0x2c
 800aabc:	4621      	mov	r1, r4
 800aabe:	4628      	mov	r0, r5
 800aac0:	f000 f9e6 	bl	800ae90 <_printf_common>
 800aac4:	3001      	adds	r0, #1
 800aac6:	f040 808d 	bne.w	800abe4 <_printf_float+0x1d4>
 800aaca:	f04f 30ff 	mov.w	r0, #4294967295
 800aace:	b00d      	add	sp, #52	; 0x34
 800aad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aad4:	4642      	mov	r2, r8
 800aad6:	464b      	mov	r3, r9
 800aad8:	4640      	mov	r0, r8
 800aada:	4649      	mov	r1, r9
 800aadc:	f7f6 f80a 	bl	8000af4 <__aeabi_dcmpun>
 800aae0:	b110      	cbz	r0, 800aae8 <_printf_float+0xd8>
 800aae2:	4a8c      	ldr	r2, [pc, #560]	; (800ad14 <_printf_float+0x304>)
 800aae4:	4b8c      	ldr	r3, [pc, #560]	; (800ad18 <_printf_float+0x308>)
 800aae6:	e7da      	b.n	800aa9e <_printf_float+0x8e>
 800aae8:	6861      	ldr	r1, [r4, #4]
 800aaea:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800aaee:	a80a      	add	r0, sp, #40	; 0x28
 800aaf0:	1c4b      	adds	r3, r1, #1
 800aaf2:	d13e      	bne.n	800ab72 <_printf_float+0x162>
 800aaf4:	2306      	movs	r3, #6
 800aaf6:	6063      	str	r3, [r4, #4]
 800aaf8:	2300      	movs	r3, #0
 800aafa:	6022      	str	r2, [r4, #0]
 800aafc:	f8cd a004 	str.w	sl, [sp, #4]
 800ab00:	6861      	ldr	r1, [r4, #4]
 800ab02:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800ab06:	ab09      	add	r3, sp, #36	; 0x24
 800ab08:	4628      	mov	r0, r5
 800ab0a:	9300      	str	r3, [sp, #0]
 800ab0c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ab10:	ec49 8b10 	vmov	d0, r8, r9
 800ab14:	f7ff fee8 	bl	800a8e8 <__cvt>
 800ab18:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800ab1c:	4680      	mov	r8, r0
 800ab1e:	2b47      	cmp	r3, #71	; 0x47
 800ab20:	d109      	bne.n	800ab36 <_printf_float+0x126>
 800ab22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab24:	1cd8      	adds	r0, r3, #3
 800ab26:	db02      	blt.n	800ab2e <_printf_float+0x11e>
 800ab28:	6862      	ldr	r2, [r4, #4]
 800ab2a:	4293      	cmp	r3, r2
 800ab2c:	dd47      	ble.n	800abbe <_printf_float+0x1ae>
 800ab2e:	f1aa 0a02 	sub.w	sl, sl, #2
 800ab32:	fa5f fa8a 	uxtb.w	sl, sl
 800ab36:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800ab3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab3c:	d824      	bhi.n	800ab88 <_printf_float+0x178>
 800ab3e:	3901      	subs	r1, #1
 800ab40:	4652      	mov	r2, sl
 800ab42:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ab46:	9109      	str	r1, [sp, #36]	; 0x24
 800ab48:	f7ff ff2f 	bl	800a9aa <__exponent>
 800ab4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab4e:	4681      	mov	r9, r0
 800ab50:	1813      	adds	r3, r2, r0
 800ab52:	2a01      	cmp	r2, #1
 800ab54:	6123      	str	r3, [r4, #16]
 800ab56:	dc02      	bgt.n	800ab5e <_printf_float+0x14e>
 800ab58:	6822      	ldr	r2, [r4, #0]
 800ab5a:	07d1      	lsls	r1, r2, #31
 800ab5c:	d501      	bpl.n	800ab62 <_printf_float+0x152>
 800ab5e:	3301      	adds	r3, #1
 800ab60:	6123      	str	r3, [r4, #16]
 800ab62:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d0a5      	beq.n	800aab6 <_printf_float+0xa6>
 800ab6a:	232d      	movs	r3, #45	; 0x2d
 800ab6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab70:	e7a1      	b.n	800aab6 <_printf_float+0xa6>
 800ab72:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800ab76:	f000 8177 	beq.w	800ae68 <_printf_float+0x458>
 800ab7a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800ab7e:	d1bb      	bne.n	800aaf8 <_printf_float+0xe8>
 800ab80:	2900      	cmp	r1, #0
 800ab82:	d1b9      	bne.n	800aaf8 <_printf_float+0xe8>
 800ab84:	2301      	movs	r3, #1
 800ab86:	e7b6      	b.n	800aaf6 <_printf_float+0xe6>
 800ab88:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800ab8c:	d119      	bne.n	800abc2 <_printf_float+0x1b2>
 800ab8e:	2900      	cmp	r1, #0
 800ab90:	6863      	ldr	r3, [r4, #4]
 800ab92:	dd0c      	ble.n	800abae <_printf_float+0x19e>
 800ab94:	6121      	str	r1, [r4, #16]
 800ab96:	b913      	cbnz	r3, 800ab9e <_printf_float+0x18e>
 800ab98:	6822      	ldr	r2, [r4, #0]
 800ab9a:	07d2      	lsls	r2, r2, #31
 800ab9c:	d502      	bpl.n	800aba4 <_printf_float+0x194>
 800ab9e:	3301      	adds	r3, #1
 800aba0:	440b      	add	r3, r1
 800aba2:	6123      	str	r3, [r4, #16]
 800aba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aba6:	f04f 0900 	mov.w	r9, #0
 800abaa:	65a3      	str	r3, [r4, #88]	; 0x58
 800abac:	e7d9      	b.n	800ab62 <_printf_float+0x152>
 800abae:	b913      	cbnz	r3, 800abb6 <_printf_float+0x1a6>
 800abb0:	6822      	ldr	r2, [r4, #0]
 800abb2:	07d0      	lsls	r0, r2, #31
 800abb4:	d501      	bpl.n	800abba <_printf_float+0x1aa>
 800abb6:	3302      	adds	r3, #2
 800abb8:	e7f3      	b.n	800aba2 <_printf_float+0x192>
 800abba:	2301      	movs	r3, #1
 800abbc:	e7f1      	b.n	800aba2 <_printf_float+0x192>
 800abbe:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800abc2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800abc6:	4293      	cmp	r3, r2
 800abc8:	db05      	blt.n	800abd6 <_printf_float+0x1c6>
 800abca:	6822      	ldr	r2, [r4, #0]
 800abcc:	6123      	str	r3, [r4, #16]
 800abce:	07d1      	lsls	r1, r2, #31
 800abd0:	d5e8      	bpl.n	800aba4 <_printf_float+0x194>
 800abd2:	3301      	adds	r3, #1
 800abd4:	e7e5      	b.n	800aba2 <_printf_float+0x192>
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	bfd4      	ite	le
 800abda:	f1c3 0302 	rsble	r3, r3, #2
 800abde:	2301      	movgt	r3, #1
 800abe0:	4413      	add	r3, r2
 800abe2:	e7de      	b.n	800aba2 <_printf_float+0x192>
 800abe4:	6823      	ldr	r3, [r4, #0]
 800abe6:	055a      	lsls	r2, r3, #21
 800abe8:	d407      	bmi.n	800abfa <_printf_float+0x1ea>
 800abea:	6923      	ldr	r3, [r4, #16]
 800abec:	4642      	mov	r2, r8
 800abee:	4631      	mov	r1, r6
 800abf0:	4628      	mov	r0, r5
 800abf2:	47b8      	blx	r7
 800abf4:	3001      	adds	r0, #1
 800abf6:	d12b      	bne.n	800ac50 <_printf_float+0x240>
 800abf8:	e767      	b.n	800aaca <_printf_float+0xba>
 800abfa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800abfe:	f240 80dc 	bls.w	800adba <_printf_float+0x3aa>
 800ac02:	2200      	movs	r2, #0
 800ac04:	2300      	movs	r3, #0
 800ac06:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ac0a:	f7f5 ff41 	bl	8000a90 <__aeabi_dcmpeq>
 800ac0e:	2800      	cmp	r0, #0
 800ac10:	d033      	beq.n	800ac7a <_printf_float+0x26a>
 800ac12:	2301      	movs	r3, #1
 800ac14:	4a41      	ldr	r2, [pc, #260]	; (800ad1c <_printf_float+0x30c>)
 800ac16:	4631      	mov	r1, r6
 800ac18:	4628      	mov	r0, r5
 800ac1a:	47b8      	blx	r7
 800ac1c:	3001      	adds	r0, #1
 800ac1e:	f43f af54 	beq.w	800aaca <_printf_float+0xba>
 800ac22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac26:	429a      	cmp	r2, r3
 800ac28:	db02      	blt.n	800ac30 <_printf_float+0x220>
 800ac2a:	6823      	ldr	r3, [r4, #0]
 800ac2c:	07d8      	lsls	r0, r3, #31
 800ac2e:	d50f      	bpl.n	800ac50 <_printf_float+0x240>
 800ac30:	4631      	mov	r1, r6
 800ac32:	4628      	mov	r0, r5
 800ac34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac38:	47b8      	blx	r7
 800ac3a:	3001      	adds	r0, #1
 800ac3c:	f43f af45 	beq.w	800aaca <_printf_float+0xba>
 800ac40:	f04f 0800 	mov.w	r8, #0
 800ac44:	f104 091a 	add.w	r9, r4, #26
 800ac48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac4a:	3b01      	subs	r3, #1
 800ac4c:	4543      	cmp	r3, r8
 800ac4e:	dc09      	bgt.n	800ac64 <_printf_float+0x254>
 800ac50:	6823      	ldr	r3, [r4, #0]
 800ac52:	079b      	lsls	r3, r3, #30
 800ac54:	f100 8103 	bmi.w	800ae5e <_printf_float+0x44e>
 800ac58:	68e0      	ldr	r0, [r4, #12]
 800ac5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac5c:	4298      	cmp	r0, r3
 800ac5e:	bfb8      	it	lt
 800ac60:	4618      	movlt	r0, r3
 800ac62:	e734      	b.n	800aace <_printf_float+0xbe>
 800ac64:	2301      	movs	r3, #1
 800ac66:	464a      	mov	r2, r9
 800ac68:	4631      	mov	r1, r6
 800ac6a:	4628      	mov	r0, r5
 800ac6c:	47b8      	blx	r7
 800ac6e:	3001      	adds	r0, #1
 800ac70:	f43f af2b 	beq.w	800aaca <_printf_float+0xba>
 800ac74:	f108 0801 	add.w	r8, r8, #1
 800ac78:	e7e6      	b.n	800ac48 <_printf_float+0x238>
 800ac7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	dc2b      	bgt.n	800acd8 <_printf_float+0x2c8>
 800ac80:	2301      	movs	r3, #1
 800ac82:	4a26      	ldr	r2, [pc, #152]	; (800ad1c <_printf_float+0x30c>)
 800ac84:	4631      	mov	r1, r6
 800ac86:	4628      	mov	r0, r5
 800ac88:	47b8      	blx	r7
 800ac8a:	3001      	adds	r0, #1
 800ac8c:	f43f af1d 	beq.w	800aaca <_printf_float+0xba>
 800ac90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac92:	b923      	cbnz	r3, 800ac9e <_printf_float+0x28e>
 800ac94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac96:	b913      	cbnz	r3, 800ac9e <_printf_float+0x28e>
 800ac98:	6823      	ldr	r3, [r4, #0]
 800ac9a:	07d9      	lsls	r1, r3, #31
 800ac9c:	d5d8      	bpl.n	800ac50 <_printf_float+0x240>
 800ac9e:	4631      	mov	r1, r6
 800aca0:	4628      	mov	r0, r5
 800aca2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aca6:	47b8      	blx	r7
 800aca8:	3001      	adds	r0, #1
 800acaa:	f43f af0e 	beq.w	800aaca <_printf_float+0xba>
 800acae:	f04f 0900 	mov.w	r9, #0
 800acb2:	f104 0a1a 	add.w	sl, r4, #26
 800acb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acb8:	425b      	negs	r3, r3
 800acba:	454b      	cmp	r3, r9
 800acbc:	dc01      	bgt.n	800acc2 <_printf_float+0x2b2>
 800acbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acc0:	e794      	b.n	800abec <_printf_float+0x1dc>
 800acc2:	2301      	movs	r3, #1
 800acc4:	4652      	mov	r2, sl
 800acc6:	4631      	mov	r1, r6
 800acc8:	4628      	mov	r0, r5
 800acca:	47b8      	blx	r7
 800accc:	3001      	adds	r0, #1
 800acce:	f43f aefc 	beq.w	800aaca <_printf_float+0xba>
 800acd2:	f109 0901 	add.w	r9, r9, #1
 800acd6:	e7ee      	b.n	800acb6 <_printf_float+0x2a6>
 800acd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800acda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800acdc:	429a      	cmp	r2, r3
 800acde:	bfa8      	it	ge
 800ace0:	461a      	movge	r2, r3
 800ace2:	2a00      	cmp	r2, #0
 800ace4:	4691      	mov	r9, r2
 800ace6:	dd07      	ble.n	800acf8 <_printf_float+0x2e8>
 800ace8:	4613      	mov	r3, r2
 800acea:	4631      	mov	r1, r6
 800acec:	4642      	mov	r2, r8
 800acee:	4628      	mov	r0, r5
 800acf0:	47b8      	blx	r7
 800acf2:	3001      	adds	r0, #1
 800acf4:	f43f aee9 	beq.w	800aaca <_printf_float+0xba>
 800acf8:	f104 031a 	add.w	r3, r4, #26
 800acfc:	f04f 0b00 	mov.w	fp, #0
 800ad00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ad04:	9306      	str	r3, [sp, #24]
 800ad06:	e015      	b.n	800ad34 <_printf_float+0x324>
 800ad08:	7fefffff 	.word	0x7fefffff
 800ad0c:	08023798 	.word	0x08023798
 800ad10:	08023794 	.word	0x08023794
 800ad14:	080237a0 	.word	0x080237a0
 800ad18:	0802379c 	.word	0x0802379c
 800ad1c:	080237a4 	.word	0x080237a4
 800ad20:	2301      	movs	r3, #1
 800ad22:	9a06      	ldr	r2, [sp, #24]
 800ad24:	4631      	mov	r1, r6
 800ad26:	4628      	mov	r0, r5
 800ad28:	47b8      	blx	r7
 800ad2a:	3001      	adds	r0, #1
 800ad2c:	f43f aecd 	beq.w	800aaca <_printf_float+0xba>
 800ad30:	f10b 0b01 	add.w	fp, fp, #1
 800ad34:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800ad38:	ebaa 0309 	sub.w	r3, sl, r9
 800ad3c:	455b      	cmp	r3, fp
 800ad3e:	dcef      	bgt.n	800ad20 <_printf_float+0x310>
 800ad40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ad44:	44d0      	add	r8, sl
 800ad46:	429a      	cmp	r2, r3
 800ad48:	db15      	blt.n	800ad76 <_printf_float+0x366>
 800ad4a:	6823      	ldr	r3, [r4, #0]
 800ad4c:	07da      	lsls	r2, r3, #31
 800ad4e:	d412      	bmi.n	800ad76 <_printf_float+0x366>
 800ad50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad52:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ad54:	eba3 020a 	sub.w	r2, r3, sl
 800ad58:	eba3 0a01 	sub.w	sl, r3, r1
 800ad5c:	4592      	cmp	sl, r2
 800ad5e:	bfa8      	it	ge
 800ad60:	4692      	movge	sl, r2
 800ad62:	f1ba 0f00 	cmp.w	sl, #0
 800ad66:	dc0e      	bgt.n	800ad86 <_printf_float+0x376>
 800ad68:	f04f 0800 	mov.w	r8, #0
 800ad6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ad70:	f104 091a 	add.w	r9, r4, #26
 800ad74:	e019      	b.n	800adaa <_printf_float+0x39a>
 800ad76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad7a:	4631      	mov	r1, r6
 800ad7c:	4628      	mov	r0, r5
 800ad7e:	47b8      	blx	r7
 800ad80:	3001      	adds	r0, #1
 800ad82:	d1e5      	bne.n	800ad50 <_printf_float+0x340>
 800ad84:	e6a1      	b.n	800aaca <_printf_float+0xba>
 800ad86:	4653      	mov	r3, sl
 800ad88:	4642      	mov	r2, r8
 800ad8a:	4631      	mov	r1, r6
 800ad8c:	4628      	mov	r0, r5
 800ad8e:	47b8      	blx	r7
 800ad90:	3001      	adds	r0, #1
 800ad92:	d1e9      	bne.n	800ad68 <_printf_float+0x358>
 800ad94:	e699      	b.n	800aaca <_printf_float+0xba>
 800ad96:	2301      	movs	r3, #1
 800ad98:	464a      	mov	r2, r9
 800ad9a:	4631      	mov	r1, r6
 800ad9c:	4628      	mov	r0, r5
 800ad9e:	47b8      	blx	r7
 800ada0:	3001      	adds	r0, #1
 800ada2:	f43f ae92 	beq.w	800aaca <_printf_float+0xba>
 800ada6:	f108 0801 	add.w	r8, r8, #1
 800adaa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800adae:	1a9b      	subs	r3, r3, r2
 800adb0:	eba3 030a 	sub.w	r3, r3, sl
 800adb4:	4543      	cmp	r3, r8
 800adb6:	dcee      	bgt.n	800ad96 <_printf_float+0x386>
 800adb8:	e74a      	b.n	800ac50 <_printf_float+0x240>
 800adba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800adbc:	2a01      	cmp	r2, #1
 800adbe:	dc01      	bgt.n	800adc4 <_printf_float+0x3b4>
 800adc0:	07db      	lsls	r3, r3, #31
 800adc2:	d53a      	bpl.n	800ae3a <_printf_float+0x42a>
 800adc4:	2301      	movs	r3, #1
 800adc6:	4642      	mov	r2, r8
 800adc8:	4631      	mov	r1, r6
 800adca:	4628      	mov	r0, r5
 800adcc:	47b8      	blx	r7
 800adce:	3001      	adds	r0, #1
 800add0:	f43f ae7b 	beq.w	800aaca <_printf_float+0xba>
 800add4:	4631      	mov	r1, r6
 800add6:	4628      	mov	r0, r5
 800add8:	f108 0801 	add.w	r8, r8, #1
 800addc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ade0:	47b8      	blx	r7
 800ade2:	3001      	adds	r0, #1
 800ade4:	f43f ae71 	beq.w	800aaca <_printf_float+0xba>
 800ade8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adea:	2200      	movs	r2, #0
 800adec:	f103 3aff 	add.w	sl, r3, #4294967295
 800adf0:	2300      	movs	r3, #0
 800adf2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800adf6:	f7f5 fe4b 	bl	8000a90 <__aeabi_dcmpeq>
 800adfa:	b9c8      	cbnz	r0, 800ae30 <_printf_float+0x420>
 800adfc:	4653      	mov	r3, sl
 800adfe:	4642      	mov	r2, r8
 800ae00:	4631      	mov	r1, r6
 800ae02:	4628      	mov	r0, r5
 800ae04:	47b8      	blx	r7
 800ae06:	3001      	adds	r0, #1
 800ae08:	d10e      	bne.n	800ae28 <_printf_float+0x418>
 800ae0a:	e65e      	b.n	800aaca <_printf_float+0xba>
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	4652      	mov	r2, sl
 800ae10:	4631      	mov	r1, r6
 800ae12:	4628      	mov	r0, r5
 800ae14:	47b8      	blx	r7
 800ae16:	3001      	adds	r0, #1
 800ae18:	f43f ae57 	beq.w	800aaca <_printf_float+0xba>
 800ae1c:	f108 0801 	add.w	r8, r8, #1
 800ae20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae22:	3b01      	subs	r3, #1
 800ae24:	4543      	cmp	r3, r8
 800ae26:	dcf1      	bgt.n	800ae0c <_printf_float+0x3fc>
 800ae28:	464b      	mov	r3, r9
 800ae2a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ae2e:	e6de      	b.n	800abee <_printf_float+0x1de>
 800ae30:	f04f 0800 	mov.w	r8, #0
 800ae34:	f104 0a1a 	add.w	sl, r4, #26
 800ae38:	e7f2      	b.n	800ae20 <_printf_float+0x410>
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	e7df      	b.n	800adfe <_printf_float+0x3ee>
 800ae3e:	2301      	movs	r3, #1
 800ae40:	464a      	mov	r2, r9
 800ae42:	4631      	mov	r1, r6
 800ae44:	4628      	mov	r0, r5
 800ae46:	47b8      	blx	r7
 800ae48:	3001      	adds	r0, #1
 800ae4a:	f43f ae3e 	beq.w	800aaca <_printf_float+0xba>
 800ae4e:	f108 0801 	add.w	r8, r8, #1
 800ae52:	68e3      	ldr	r3, [r4, #12]
 800ae54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ae56:	1a9b      	subs	r3, r3, r2
 800ae58:	4543      	cmp	r3, r8
 800ae5a:	dcf0      	bgt.n	800ae3e <_printf_float+0x42e>
 800ae5c:	e6fc      	b.n	800ac58 <_printf_float+0x248>
 800ae5e:	f04f 0800 	mov.w	r8, #0
 800ae62:	f104 0919 	add.w	r9, r4, #25
 800ae66:	e7f4      	b.n	800ae52 <_printf_float+0x442>
 800ae68:	2900      	cmp	r1, #0
 800ae6a:	f43f ae8b 	beq.w	800ab84 <_printf_float+0x174>
 800ae6e:	2300      	movs	r3, #0
 800ae70:	6022      	str	r2, [r4, #0]
 800ae72:	f8cd a004 	str.w	sl, [sp, #4]
 800ae76:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800ae7a:	ab09      	add	r3, sp, #36	; 0x24
 800ae7c:	4628      	mov	r0, r5
 800ae7e:	9300      	str	r3, [sp, #0]
 800ae80:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ae84:	ec49 8b10 	vmov	d0, r8, r9
 800ae88:	f7ff fd2e 	bl	800a8e8 <__cvt>
 800ae8c:	4680      	mov	r8, r0
 800ae8e:	e648      	b.n	800ab22 <_printf_float+0x112>

0800ae90 <_printf_common>:
 800ae90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae94:	4691      	mov	r9, r2
 800ae96:	461f      	mov	r7, r3
 800ae98:	688a      	ldr	r2, [r1, #8]
 800ae9a:	4606      	mov	r6, r0
 800ae9c:	690b      	ldr	r3, [r1, #16]
 800ae9e:	460c      	mov	r4, r1
 800aea0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aea4:	4293      	cmp	r3, r2
 800aea6:	bfb8      	it	lt
 800aea8:	4613      	movlt	r3, r2
 800aeaa:	f8c9 3000 	str.w	r3, [r9]
 800aeae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aeb2:	b112      	cbz	r2, 800aeba <_printf_common+0x2a>
 800aeb4:	3301      	adds	r3, #1
 800aeb6:	f8c9 3000 	str.w	r3, [r9]
 800aeba:	6823      	ldr	r3, [r4, #0]
 800aebc:	0699      	lsls	r1, r3, #26
 800aebe:	bf42      	ittt	mi
 800aec0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800aec4:	3302      	addmi	r3, #2
 800aec6:	f8c9 3000 	strmi.w	r3, [r9]
 800aeca:	6825      	ldr	r5, [r4, #0]
 800aecc:	f015 0506 	ands.w	r5, r5, #6
 800aed0:	d107      	bne.n	800aee2 <_printf_common+0x52>
 800aed2:	f104 0a19 	add.w	sl, r4, #25
 800aed6:	68e3      	ldr	r3, [r4, #12]
 800aed8:	f8d9 2000 	ldr.w	r2, [r9]
 800aedc:	1a9b      	subs	r3, r3, r2
 800aede:	42ab      	cmp	r3, r5
 800aee0:	dc2b      	bgt.n	800af3a <_printf_common+0xaa>
 800aee2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800aee6:	6822      	ldr	r2, [r4, #0]
 800aee8:	3300      	adds	r3, #0
 800aeea:	bf18      	it	ne
 800aeec:	2301      	movne	r3, #1
 800aeee:	0692      	lsls	r2, r2, #26
 800aef0:	d430      	bmi.n	800af54 <_printf_common+0xc4>
 800aef2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aef6:	4639      	mov	r1, r7
 800aef8:	4630      	mov	r0, r6
 800aefa:	47c0      	blx	r8
 800aefc:	3001      	adds	r0, #1
 800aefe:	d023      	beq.n	800af48 <_printf_common+0xb8>
 800af00:	6823      	ldr	r3, [r4, #0]
 800af02:	341a      	adds	r4, #26
 800af04:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 800af08:	f003 0306 	and.w	r3, r3, #6
 800af0c:	f8d9 2000 	ldr.w	r2, [r9]
 800af10:	f04f 0900 	mov.w	r9, #0
 800af14:	2b04      	cmp	r3, #4
 800af16:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800af1a:	bf08      	it	eq
 800af1c:	1aad      	subeq	r5, r5, r2
 800af1e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800af22:	bf14      	ite	ne
 800af24:	2500      	movne	r5, #0
 800af26:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800af2a:	4293      	cmp	r3, r2
 800af2c:	bfc4      	itt	gt
 800af2e:	1a9b      	subgt	r3, r3, r2
 800af30:	18ed      	addgt	r5, r5, r3
 800af32:	454d      	cmp	r5, r9
 800af34:	d11a      	bne.n	800af6c <_printf_common+0xdc>
 800af36:	2000      	movs	r0, #0
 800af38:	e008      	b.n	800af4c <_printf_common+0xbc>
 800af3a:	2301      	movs	r3, #1
 800af3c:	4652      	mov	r2, sl
 800af3e:	4639      	mov	r1, r7
 800af40:	4630      	mov	r0, r6
 800af42:	47c0      	blx	r8
 800af44:	3001      	adds	r0, #1
 800af46:	d103      	bne.n	800af50 <_printf_common+0xc0>
 800af48:	f04f 30ff 	mov.w	r0, #4294967295
 800af4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af50:	3501      	adds	r5, #1
 800af52:	e7c0      	b.n	800aed6 <_printf_common+0x46>
 800af54:	18e1      	adds	r1, r4, r3
 800af56:	1c5a      	adds	r2, r3, #1
 800af58:	2030      	movs	r0, #48	; 0x30
 800af5a:	3302      	adds	r3, #2
 800af5c:	4422      	add	r2, r4
 800af5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800af62:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800af66:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800af6a:	e7c2      	b.n	800aef2 <_printf_common+0x62>
 800af6c:	2301      	movs	r3, #1
 800af6e:	4622      	mov	r2, r4
 800af70:	4639      	mov	r1, r7
 800af72:	4630      	mov	r0, r6
 800af74:	47c0      	blx	r8
 800af76:	3001      	adds	r0, #1
 800af78:	d0e6      	beq.n	800af48 <_printf_common+0xb8>
 800af7a:	f109 0901 	add.w	r9, r9, #1
 800af7e:	e7d8      	b.n	800af32 <_printf_common+0xa2>

0800af80 <_printf_i>:
 800af80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800af84:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800af88:	460c      	mov	r4, r1
 800af8a:	7e09      	ldrb	r1, [r1, #24]
 800af8c:	b085      	sub	sp, #20
 800af8e:	4617      	mov	r7, r2
 800af90:	4606      	mov	r6, r0
 800af92:	296e      	cmp	r1, #110	; 0x6e
 800af94:	4698      	mov	r8, r3
 800af96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af98:	f000 80b3 	beq.w	800b102 <_printf_i+0x182>
 800af9c:	d822      	bhi.n	800afe4 <_printf_i+0x64>
 800af9e:	2963      	cmp	r1, #99	; 0x63
 800afa0:	d036      	beq.n	800b010 <_printf_i+0x90>
 800afa2:	d80a      	bhi.n	800afba <_printf_i+0x3a>
 800afa4:	2900      	cmp	r1, #0
 800afa6:	f000 80b9 	beq.w	800b11c <_printf_i+0x19c>
 800afaa:	2958      	cmp	r1, #88	; 0x58
 800afac:	f000 8083 	beq.w	800b0b6 <_printf_i+0x136>
 800afb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800afb4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800afb8:	e032      	b.n	800b020 <_printf_i+0xa0>
 800afba:	2964      	cmp	r1, #100	; 0x64
 800afbc:	d001      	beq.n	800afc2 <_printf_i+0x42>
 800afbe:	2969      	cmp	r1, #105	; 0x69
 800afc0:	d1f6      	bne.n	800afb0 <_printf_i+0x30>
 800afc2:	6820      	ldr	r0, [r4, #0]
 800afc4:	6813      	ldr	r3, [r2, #0]
 800afc6:	0605      	lsls	r5, r0, #24
 800afc8:	f103 0104 	add.w	r1, r3, #4
 800afcc:	d52a      	bpl.n	800b024 <_printf_i+0xa4>
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	6011      	str	r1, [r2, #0]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	da03      	bge.n	800afde <_printf_i+0x5e>
 800afd6:	222d      	movs	r2, #45	; 0x2d
 800afd8:	425b      	negs	r3, r3
 800afda:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800afde:	486f      	ldr	r0, [pc, #444]	; (800b19c <_printf_i+0x21c>)
 800afe0:	220a      	movs	r2, #10
 800afe2:	e039      	b.n	800b058 <_printf_i+0xd8>
 800afe4:	2973      	cmp	r1, #115	; 0x73
 800afe6:	f000 809d 	beq.w	800b124 <_printf_i+0x1a4>
 800afea:	d808      	bhi.n	800affe <_printf_i+0x7e>
 800afec:	296f      	cmp	r1, #111	; 0x6f
 800afee:	d020      	beq.n	800b032 <_printf_i+0xb2>
 800aff0:	2970      	cmp	r1, #112	; 0x70
 800aff2:	d1dd      	bne.n	800afb0 <_printf_i+0x30>
 800aff4:	6823      	ldr	r3, [r4, #0]
 800aff6:	f043 0320 	orr.w	r3, r3, #32
 800affa:	6023      	str	r3, [r4, #0]
 800affc:	e003      	b.n	800b006 <_printf_i+0x86>
 800affe:	2975      	cmp	r1, #117	; 0x75
 800b000:	d017      	beq.n	800b032 <_printf_i+0xb2>
 800b002:	2978      	cmp	r1, #120	; 0x78
 800b004:	d1d4      	bne.n	800afb0 <_printf_i+0x30>
 800b006:	2378      	movs	r3, #120	; 0x78
 800b008:	4865      	ldr	r0, [pc, #404]	; (800b1a0 <_printf_i+0x220>)
 800b00a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b00e:	e055      	b.n	800b0bc <_printf_i+0x13c>
 800b010:	6813      	ldr	r3, [r2, #0]
 800b012:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b016:	1d19      	adds	r1, r3, #4
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	6011      	str	r1, [r2, #0]
 800b01c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b020:	2301      	movs	r3, #1
 800b022:	e08c      	b.n	800b13e <_printf_i+0x1be>
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b02a:	6011      	str	r1, [r2, #0]
 800b02c:	bf18      	it	ne
 800b02e:	b21b      	sxthne	r3, r3
 800b030:	e7cf      	b.n	800afd2 <_printf_i+0x52>
 800b032:	6813      	ldr	r3, [r2, #0]
 800b034:	6825      	ldr	r5, [r4, #0]
 800b036:	1d18      	adds	r0, r3, #4
 800b038:	6010      	str	r0, [r2, #0]
 800b03a:	0628      	lsls	r0, r5, #24
 800b03c:	d501      	bpl.n	800b042 <_printf_i+0xc2>
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	e002      	b.n	800b048 <_printf_i+0xc8>
 800b042:	0668      	lsls	r0, r5, #25
 800b044:	d5fb      	bpl.n	800b03e <_printf_i+0xbe>
 800b046:	881b      	ldrh	r3, [r3, #0]
 800b048:	296f      	cmp	r1, #111	; 0x6f
 800b04a:	4854      	ldr	r0, [pc, #336]	; (800b19c <_printf_i+0x21c>)
 800b04c:	bf14      	ite	ne
 800b04e:	220a      	movne	r2, #10
 800b050:	2208      	moveq	r2, #8
 800b052:	2100      	movs	r1, #0
 800b054:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b058:	6865      	ldr	r5, [r4, #4]
 800b05a:	2d00      	cmp	r5, #0
 800b05c:	60a5      	str	r5, [r4, #8]
 800b05e:	f2c0 8095 	blt.w	800b18c <_printf_i+0x20c>
 800b062:	6821      	ldr	r1, [r4, #0]
 800b064:	f021 0104 	bic.w	r1, r1, #4
 800b068:	6021      	str	r1, [r4, #0]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d13d      	bne.n	800b0ea <_printf_i+0x16a>
 800b06e:	2d00      	cmp	r5, #0
 800b070:	f040 808e 	bne.w	800b190 <_printf_i+0x210>
 800b074:	4665      	mov	r5, ip
 800b076:	2a08      	cmp	r2, #8
 800b078:	d10b      	bne.n	800b092 <_printf_i+0x112>
 800b07a:	6823      	ldr	r3, [r4, #0]
 800b07c:	07db      	lsls	r3, r3, #31
 800b07e:	d508      	bpl.n	800b092 <_printf_i+0x112>
 800b080:	6923      	ldr	r3, [r4, #16]
 800b082:	6862      	ldr	r2, [r4, #4]
 800b084:	429a      	cmp	r2, r3
 800b086:	bfde      	ittt	le
 800b088:	2330      	movle	r3, #48	; 0x30
 800b08a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b08e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b092:	ebac 0305 	sub.w	r3, ip, r5
 800b096:	6123      	str	r3, [r4, #16]
 800b098:	f8cd 8000 	str.w	r8, [sp]
 800b09c:	463b      	mov	r3, r7
 800b09e:	aa03      	add	r2, sp, #12
 800b0a0:	4621      	mov	r1, r4
 800b0a2:	4630      	mov	r0, r6
 800b0a4:	f7ff fef4 	bl	800ae90 <_printf_common>
 800b0a8:	3001      	adds	r0, #1
 800b0aa:	d14d      	bne.n	800b148 <_printf_i+0x1c8>
 800b0ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b0b0:	b005      	add	sp, #20
 800b0b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b0b6:	4839      	ldr	r0, [pc, #228]	; (800b19c <_printf_i+0x21c>)
 800b0b8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b0bc:	6813      	ldr	r3, [r2, #0]
 800b0be:	6821      	ldr	r1, [r4, #0]
 800b0c0:	1d1d      	adds	r5, r3, #4
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	6015      	str	r5, [r2, #0]
 800b0c6:	060a      	lsls	r2, r1, #24
 800b0c8:	d50b      	bpl.n	800b0e2 <_printf_i+0x162>
 800b0ca:	07ca      	lsls	r2, r1, #31
 800b0cc:	bf44      	itt	mi
 800b0ce:	f041 0120 	orrmi.w	r1, r1, #32
 800b0d2:	6021      	strmi	r1, [r4, #0]
 800b0d4:	b91b      	cbnz	r3, 800b0de <_printf_i+0x15e>
 800b0d6:	6822      	ldr	r2, [r4, #0]
 800b0d8:	f022 0220 	bic.w	r2, r2, #32
 800b0dc:	6022      	str	r2, [r4, #0]
 800b0de:	2210      	movs	r2, #16
 800b0e0:	e7b7      	b.n	800b052 <_printf_i+0xd2>
 800b0e2:	064d      	lsls	r5, r1, #25
 800b0e4:	bf48      	it	mi
 800b0e6:	b29b      	uxthmi	r3, r3
 800b0e8:	e7ef      	b.n	800b0ca <_printf_i+0x14a>
 800b0ea:	4665      	mov	r5, ip
 800b0ec:	fbb3 f1f2 	udiv	r1, r3, r2
 800b0f0:	fb02 3311 	mls	r3, r2, r1, r3
 800b0f4:	5cc3      	ldrb	r3, [r0, r3]
 800b0f6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b0fa:	460b      	mov	r3, r1
 800b0fc:	2900      	cmp	r1, #0
 800b0fe:	d1f5      	bne.n	800b0ec <_printf_i+0x16c>
 800b100:	e7b9      	b.n	800b076 <_printf_i+0xf6>
 800b102:	6813      	ldr	r3, [r2, #0]
 800b104:	6825      	ldr	r5, [r4, #0]
 800b106:	1d18      	adds	r0, r3, #4
 800b108:	6961      	ldr	r1, [r4, #20]
 800b10a:	6010      	str	r0, [r2, #0]
 800b10c:	0628      	lsls	r0, r5, #24
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	d501      	bpl.n	800b116 <_printf_i+0x196>
 800b112:	6019      	str	r1, [r3, #0]
 800b114:	e002      	b.n	800b11c <_printf_i+0x19c>
 800b116:	066a      	lsls	r2, r5, #25
 800b118:	d5fb      	bpl.n	800b112 <_printf_i+0x192>
 800b11a:	8019      	strh	r1, [r3, #0]
 800b11c:	2300      	movs	r3, #0
 800b11e:	4665      	mov	r5, ip
 800b120:	6123      	str	r3, [r4, #16]
 800b122:	e7b9      	b.n	800b098 <_printf_i+0x118>
 800b124:	6813      	ldr	r3, [r2, #0]
 800b126:	1d19      	adds	r1, r3, #4
 800b128:	6011      	str	r1, [r2, #0]
 800b12a:	2100      	movs	r1, #0
 800b12c:	681d      	ldr	r5, [r3, #0]
 800b12e:	6862      	ldr	r2, [r4, #4]
 800b130:	4628      	mov	r0, r5
 800b132:	f000 febb 	bl	800beac <memchr>
 800b136:	b108      	cbz	r0, 800b13c <_printf_i+0x1bc>
 800b138:	1b40      	subs	r0, r0, r5
 800b13a:	6060      	str	r0, [r4, #4]
 800b13c:	6863      	ldr	r3, [r4, #4]
 800b13e:	6123      	str	r3, [r4, #16]
 800b140:	2300      	movs	r3, #0
 800b142:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b146:	e7a7      	b.n	800b098 <_printf_i+0x118>
 800b148:	6923      	ldr	r3, [r4, #16]
 800b14a:	462a      	mov	r2, r5
 800b14c:	4639      	mov	r1, r7
 800b14e:	4630      	mov	r0, r6
 800b150:	47c0      	blx	r8
 800b152:	3001      	adds	r0, #1
 800b154:	d0aa      	beq.n	800b0ac <_printf_i+0x12c>
 800b156:	6823      	ldr	r3, [r4, #0]
 800b158:	079b      	lsls	r3, r3, #30
 800b15a:	d413      	bmi.n	800b184 <_printf_i+0x204>
 800b15c:	68e0      	ldr	r0, [r4, #12]
 800b15e:	9b03      	ldr	r3, [sp, #12]
 800b160:	4298      	cmp	r0, r3
 800b162:	bfb8      	it	lt
 800b164:	4618      	movlt	r0, r3
 800b166:	e7a3      	b.n	800b0b0 <_printf_i+0x130>
 800b168:	2301      	movs	r3, #1
 800b16a:	464a      	mov	r2, r9
 800b16c:	4639      	mov	r1, r7
 800b16e:	4630      	mov	r0, r6
 800b170:	47c0      	blx	r8
 800b172:	3001      	adds	r0, #1
 800b174:	d09a      	beq.n	800b0ac <_printf_i+0x12c>
 800b176:	3501      	adds	r5, #1
 800b178:	68e3      	ldr	r3, [r4, #12]
 800b17a:	9a03      	ldr	r2, [sp, #12]
 800b17c:	1a9b      	subs	r3, r3, r2
 800b17e:	42ab      	cmp	r3, r5
 800b180:	dcf2      	bgt.n	800b168 <_printf_i+0x1e8>
 800b182:	e7eb      	b.n	800b15c <_printf_i+0x1dc>
 800b184:	2500      	movs	r5, #0
 800b186:	f104 0919 	add.w	r9, r4, #25
 800b18a:	e7f5      	b.n	800b178 <_printf_i+0x1f8>
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d1ac      	bne.n	800b0ea <_printf_i+0x16a>
 800b190:	7803      	ldrb	r3, [r0, #0]
 800b192:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b196:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b19a:	e76c      	b.n	800b076 <_printf_i+0xf6>
 800b19c:	080237a6 	.word	0x080237a6
 800b1a0:	080237b7 	.word	0x080237b7

0800b1a4 <_sbrk_r>:
 800b1a4:	b538      	push	{r3, r4, r5, lr}
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	4c05      	ldr	r4, [pc, #20]	; (800b1c0 <_sbrk_r+0x1c>)
 800b1aa:	4605      	mov	r5, r0
 800b1ac:	4608      	mov	r0, r1
 800b1ae:	6023      	str	r3, [r4, #0]
 800b1b0:	f7f6 fba0 	bl	80018f4 <_sbrk>
 800b1b4:	1c43      	adds	r3, r0, #1
 800b1b6:	d102      	bne.n	800b1be <_sbrk_r+0x1a>
 800b1b8:	6823      	ldr	r3, [r4, #0]
 800b1ba:	b103      	cbz	r3, 800b1be <_sbrk_r+0x1a>
 800b1bc:	602b      	str	r3, [r5, #0]
 800b1be:	bd38      	pop	{r3, r4, r5, pc}
 800b1c0:	20000eac 	.word	0x20000eac

0800b1c4 <siprintf>:
 800b1c4:	b40e      	push	{r1, r2, r3}
 800b1c6:	b500      	push	{lr}
 800b1c8:	b09c      	sub	sp, #112	; 0x70
 800b1ca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b1ce:	ab1d      	add	r3, sp, #116	; 0x74
 800b1d0:	9002      	str	r0, [sp, #8]
 800b1d2:	9006      	str	r0, [sp, #24]
 800b1d4:	9107      	str	r1, [sp, #28]
 800b1d6:	9104      	str	r1, [sp, #16]
 800b1d8:	4808      	ldr	r0, [pc, #32]	; (800b1fc <siprintf+0x38>)
 800b1da:	4909      	ldr	r1, [pc, #36]	; (800b200 <siprintf+0x3c>)
 800b1dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1e0:	9105      	str	r1, [sp, #20]
 800b1e2:	a902      	add	r1, sp, #8
 800b1e4:	6800      	ldr	r0, [r0, #0]
 800b1e6:	9301      	str	r3, [sp, #4]
 800b1e8:	f001 f9de 	bl	800c5a8 <_svfiprintf_r>
 800b1ec:	9b02      	ldr	r3, [sp, #8]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	701a      	strb	r2, [r3, #0]
 800b1f2:	b01c      	add	sp, #112	; 0x70
 800b1f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1f8:	b003      	add	sp, #12
 800b1fa:	4770      	bx	lr
 800b1fc:	20000b04 	.word	0x20000b04
 800b200:	ffff0208 	.word	0xffff0208

0800b204 <quorem>:
 800b204:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b208:	6903      	ldr	r3, [r0, #16]
 800b20a:	4680      	mov	r8, r0
 800b20c:	690c      	ldr	r4, [r1, #16]
 800b20e:	42a3      	cmp	r3, r4
 800b210:	f2c0 8086 	blt.w	800b320 <quorem+0x11c>
 800b214:	3c01      	subs	r4, #1
 800b216:	f101 0714 	add.w	r7, r1, #20
 800b21a:	f100 0614 	add.w	r6, r0, #20
 800b21e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800b222:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800b226:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800b22a:	3501      	adds	r5, #1
 800b22c:	eb06 030c 	add.w	r3, r6, ip
 800b230:	eb07 090c 	add.w	r9, r7, ip
 800b234:	9301      	str	r3, [sp, #4]
 800b236:	fbb0 f5f5 	udiv	r5, r0, r5
 800b23a:	b3a5      	cbz	r5, 800b2a6 <quorem+0xa2>
 800b23c:	f04f 0a00 	mov.w	sl, #0
 800b240:	4638      	mov	r0, r7
 800b242:	46b6      	mov	lr, r6
 800b244:	46d3      	mov	fp, sl
 800b246:	f850 2b04 	ldr.w	r2, [r0], #4
 800b24a:	b293      	uxth	r3, r2
 800b24c:	4581      	cmp	r9, r0
 800b24e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800b252:	fb05 a303 	mla	r3, r5, r3, sl
 800b256:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b25a:	b29b      	uxth	r3, r3
 800b25c:	fb05 a202 	mla	r2, r5, r2, sl
 800b260:	ebab 0303 	sub.w	r3, fp, r3
 800b264:	f8de b000 	ldr.w	fp, [lr]
 800b268:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800b26c:	fa1f fb8b 	uxth.w	fp, fp
 800b270:	445b      	add	r3, fp
 800b272:	fa1f fb82 	uxth.w	fp, r2
 800b276:	f8de 2000 	ldr.w	r2, [lr]
 800b27a:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800b27e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b282:	b29b      	uxth	r3, r3
 800b284:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800b288:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b28c:	f84e 3b04 	str.w	r3, [lr], #4
 800b290:	d2d9      	bcs.n	800b246 <quorem+0x42>
 800b292:	f856 300c 	ldr.w	r3, [r6, ip]
 800b296:	b933      	cbnz	r3, 800b2a6 <quorem+0xa2>
 800b298:	9b01      	ldr	r3, [sp, #4]
 800b29a:	3b04      	subs	r3, #4
 800b29c:	429e      	cmp	r6, r3
 800b29e:	461a      	mov	r2, r3
 800b2a0:	d332      	bcc.n	800b308 <quorem+0x104>
 800b2a2:	f8c8 4010 	str.w	r4, [r8, #16]
 800b2a6:	4640      	mov	r0, r8
 800b2a8:	f001 f826 	bl	800c2f8 <__mcmp>
 800b2ac:	2800      	cmp	r0, #0
 800b2ae:	db27      	blt.n	800b300 <quorem+0xfc>
 800b2b0:	3501      	adds	r5, #1
 800b2b2:	4630      	mov	r0, r6
 800b2b4:	f04f 0c00 	mov.w	ip, #0
 800b2b8:	f857 1b04 	ldr.w	r1, [r7], #4
 800b2bc:	f8d0 e000 	ldr.w	lr, [r0]
 800b2c0:	b28b      	uxth	r3, r1
 800b2c2:	45b9      	cmp	r9, r7
 800b2c4:	fa1f f28e 	uxth.w	r2, lr
 800b2c8:	ebac 0303 	sub.w	r3, ip, r3
 800b2cc:	4413      	add	r3, r2
 800b2ce:	ea4f 4211 	mov.w	r2, r1, lsr #16
 800b2d2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b2d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b2da:	b29b      	uxth	r3, r3
 800b2dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b2e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b2e4:	f840 3b04 	str.w	r3, [r0], #4
 800b2e8:	d2e6      	bcs.n	800b2b8 <quorem+0xb4>
 800b2ea:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800b2ee:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800b2f2:	b92a      	cbnz	r2, 800b300 <quorem+0xfc>
 800b2f4:	3b04      	subs	r3, #4
 800b2f6:	429e      	cmp	r6, r3
 800b2f8:	461a      	mov	r2, r3
 800b2fa:	d30b      	bcc.n	800b314 <quorem+0x110>
 800b2fc:	f8c8 4010 	str.w	r4, [r8, #16]
 800b300:	4628      	mov	r0, r5
 800b302:	b003      	add	sp, #12
 800b304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b308:	6812      	ldr	r2, [r2, #0]
 800b30a:	3b04      	subs	r3, #4
 800b30c:	2a00      	cmp	r2, #0
 800b30e:	d1c8      	bne.n	800b2a2 <quorem+0x9e>
 800b310:	3c01      	subs	r4, #1
 800b312:	e7c3      	b.n	800b29c <quorem+0x98>
 800b314:	6812      	ldr	r2, [r2, #0]
 800b316:	3b04      	subs	r3, #4
 800b318:	2a00      	cmp	r2, #0
 800b31a:	d1ef      	bne.n	800b2fc <quorem+0xf8>
 800b31c:	3c01      	subs	r4, #1
 800b31e:	e7ea      	b.n	800b2f6 <quorem+0xf2>
 800b320:	2000      	movs	r0, #0
 800b322:	e7ee      	b.n	800b302 <quorem+0xfe>
 800b324:	0000      	movs	r0, r0
	...

0800b328 <_dtoa_r>:
 800b328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b32c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b32e:	b097      	sub	sp, #92	; 0x5c
 800b330:	4604      	mov	r4, r0
 800b332:	9106      	str	r1, [sp, #24]
 800b334:	920b      	str	r2, [sp, #44]	; 0x2c
 800b336:	9312      	str	r3, [sp, #72]	; 0x48
 800b338:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b33c:	ec57 6b10 	vmov	r6, r7, d0
 800b340:	e9cd 6700 	strd	r6, r7, [sp]
 800b344:	b93d      	cbnz	r5, 800b356 <_dtoa_r+0x2e>
 800b346:	2010      	movs	r0, #16
 800b348:	f7ff fa0a 	bl	800a760 <malloc>
 800b34c:	6260      	str	r0, [r4, #36]	; 0x24
 800b34e:	6005      	str	r5, [r0, #0]
 800b350:	60c5      	str	r5, [r0, #12]
 800b352:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b356:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b358:	6819      	ldr	r1, [r3, #0]
 800b35a:	b151      	cbz	r1, 800b372 <_dtoa_r+0x4a>
 800b35c:	685a      	ldr	r2, [r3, #4]
 800b35e:	2301      	movs	r3, #1
 800b360:	4620      	mov	r0, r4
 800b362:	4093      	lsls	r3, r2
 800b364:	604a      	str	r2, [r1, #4]
 800b366:	608b      	str	r3, [r1, #8]
 800b368:	f000 fde4 	bl	800bf34 <_Bfree>
 800b36c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b36e:	2200      	movs	r2, #0
 800b370:	601a      	str	r2, [r3, #0]
 800b372:	1e3b      	subs	r3, r7, #0
 800b374:	bfb7      	itett	lt
 800b376:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b37a:	2300      	movge	r3, #0
 800b37c:	2201      	movlt	r2, #1
 800b37e:	9301      	strlt	r3, [sp, #4]
 800b380:	bfac      	ite	ge
 800b382:	f8c8 3000 	strge.w	r3, [r8]
 800b386:	f8c8 2000 	strlt.w	r2, [r8]
 800b38a:	4baf      	ldr	r3, [pc, #700]	; (800b648 <_dtoa_r+0x320>)
 800b38c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b390:	ea33 0308 	bics.w	r3, r3, r8
 800b394:	d114      	bne.n	800b3c0 <_dtoa_r+0x98>
 800b396:	f242 730f 	movw	r3, #9999	; 0x270f
 800b39a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b39c:	6013      	str	r3, [r2, #0]
 800b39e:	9b00      	ldr	r3, [sp, #0]
 800b3a0:	b923      	cbnz	r3, 800b3ac <_dtoa_r+0x84>
 800b3a2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800b3a6:	2800      	cmp	r0, #0
 800b3a8:	f000 853e 	beq.w	800be28 <_dtoa_r+0xb00>
 800b3ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b3ae:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800b65c <_dtoa_r+0x334>
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	f000 8540 	beq.w	800be38 <_dtoa_r+0xb10>
 800b3b8:	f10b 0303 	add.w	r3, fp, #3
 800b3bc:	f000 bd3a 	b.w	800be34 <_dtoa_r+0xb0c>
 800b3c0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	4630      	mov	r0, r6
 800b3ca:	4639      	mov	r1, r7
 800b3cc:	f7f5 fb60 	bl	8000a90 <__aeabi_dcmpeq>
 800b3d0:	4681      	mov	r9, r0
 800b3d2:	b168      	cbz	r0, 800b3f0 <_dtoa_r+0xc8>
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b3d8:	6013      	str	r3, [r2, #0]
 800b3da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	f000 8520 	beq.w	800be22 <_dtoa_r+0xafa>
 800b3e2:	4b9a      	ldr	r3, [pc, #616]	; (800b64c <_dtoa_r+0x324>)
 800b3e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b3e6:	f103 3bff 	add.w	fp, r3, #4294967295
 800b3ea:	6013      	str	r3, [r2, #0]
 800b3ec:	f000 bd24 	b.w	800be38 <_dtoa_r+0xb10>
 800b3f0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b3f4:	aa14      	add	r2, sp, #80	; 0x50
 800b3f6:	a915      	add	r1, sp, #84	; 0x54
 800b3f8:	4620      	mov	r0, r4
 800b3fa:	ec47 6b10 	vmov	d0, r6, r7
 800b3fe:	f000 fff5 	bl	800c3ec <__d2b>
 800b402:	9004      	str	r0, [sp, #16]
 800b404:	2d00      	cmp	r5, #0
 800b406:	d07a      	beq.n	800b4fe <_dtoa_r+0x1d6>
 800b408:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b40c:	46b2      	mov	sl, r6
 800b40e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b412:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800b416:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800b41a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800b41e:	2200      	movs	r2, #0
 800b420:	4b8b      	ldr	r3, [pc, #556]	; (800b650 <_dtoa_r+0x328>)
 800b422:	4650      	mov	r0, sl
 800b424:	4659      	mov	r1, fp
 800b426:	f7f4 ff13 	bl	8000250 <__aeabi_dsub>
 800b42a:	a381      	add	r3, pc, #516	; (adr r3, 800b630 <_dtoa_r+0x308>)
 800b42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b430:	f7f5 f8c6 	bl	80005c0 <__aeabi_dmul>
 800b434:	a380      	add	r3, pc, #512	; (adr r3, 800b638 <_dtoa_r+0x310>)
 800b436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b43a:	f7f4 ff0b 	bl	8000254 <__adddf3>
 800b43e:	4606      	mov	r6, r0
 800b440:	460f      	mov	r7, r1
 800b442:	4628      	mov	r0, r5
 800b444:	f7f5 f852 	bl	80004ec <__aeabi_i2d>
 800b448:	a37d      	add	r3, pc, #500	; (adr r3, 800b640 <_dtoa_r+0x318>)
 800b44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b44e:	f7f5 f8b7 	bl	80005c0 <__aeabi_dmul>
 800b452:	4602      	mov	r2, r0
 800b454:	460b      	mov	r3, r1
 800b456:	4630      	mov	r0, r6
 800b458:	4639      	mov	r1, r7
 800b45a:	f7f4 fefb 	bl	8000254 <__adddf3>
 800b45e:	4606      	mov	r6, r0
 800b460:	460f      	mov	r7, r1
 800b462:	f7f5 fb5d 	bl	8000b20 <__aeabi_d2iz>
 800b466:	2200      	movs	r2, #0
 800b468:	4682      	mov	sl, r0
 800b46a:	2300      	movs	r3, #0
 800b46c:	4630      	mov	r0, r6
 800b46e:	4639      	mov	r1, r7
 800b470:	f7f5 fb18 	bl	8000aa4 <__aeabi_dcmplt>
 800b474:	b148      	cbz	r0, 800b48a <_dtoa_r+0x162>
 800b476:	4650      	mov	r0, sl
 800b478:	f7f5 f838 	bl	80004ec <__aeabi_i2d>
 800b47c:	4632      	mov	r2, r6
 800b47e:	463b      	mov	r3, r7
 800b480:	f7f5 fb06 	bl	8000a90 <__aeabi_dcmpeq>
 800b484:	b908      	cbnz	r0, 800b48a <_dtoa_r+0x162>
 800b486:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b48a:	f1ba 0f16 	cmp.w	sl, #22
 800b48e:	d857      	bhi.n	800b540 <_dtoa_r+0x218>
 800b490:	4970      	ldr	r1, [pc, #448]	; (800b654 <_dtoa_r+0x32c>)
 800b492:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b496:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b49a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b49e:	f7f5 fb1f 	bl	8000ae0 <__aeabi_dcmpgt>
 800b4a2:	2800      	cmp	r0, #0
 800b4a4:	d04e      	beq.n	800b544 <_dtoa_r+0x21c>
 800b4a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	930f      	str	r3, [sp, #60]	; 0x3c
 800b4ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b4b0:	1b5d      	subs	r5, r3, r5
 800b4b2:	f1b5 0801 	subs.w	r8, r5, #1
 800b4b6:	bf49      	itett	mi
 800b4b8:	f1c5 0301 	rsbmi	r3, r5, #1
 800b4bc:	2300      	movpl	r3, #0
 800b4be:	f04f 0800 	movmi.w	r8, #0
 800b4c2:	9305      	strmi	r3, [sp, #20]
 800b4c4:	bf58      	it	pl
 800b4c6:	9305      	strpl	r3, [sp, #20]
 800b4c8:	f1ba 0f00 	cmp.w	sl, #0
 800b4cc:	db3c      	blt.n	800b548 <_dtoa_r+0x220>
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	44d0      	add	r8, sl
 800b4d2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800b4d6:	9307      	str	r3, [sp, #28]
 800b4d8:	9b06      	ldr	r3, [sp, #24]
 800b4da:	2b09      	cmp	r3, #9
 800b4dc:	f200 808e 	bhi.w	800b5fc <_dtoa_r+0x2d4>
 800b4e0:	2b05      	cmp	r3, #5
 800b4e2:	bfc5      	ittet	gt
 800b4e4:	3b04      	subgt	r3, #4
 800b4e6:	2500      	movgt	r5, #0
 800b4e8:	2501      	movle	r5, #1
 800b4ea:	9306      	strgt	r3, [sp, #24]
 800b4ec:	9b06      	ldr	r3, [sp, #24]
 800b4ee:	3b02      	subs	r3, #2
 800b4f0:	2b03      	cmp	r3, #3
 800b4f2:	f200 808f 	bhi.w	800b614 <_dtoa_r+0x2ec>
 800b4f6:	e8df f003 	tbb	[pc, r3]
 800b4fa:	7f7d      	.short	0x7f7d
 800b4fc:	7131      	.short	0x7131
 800b4fe:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800b502:	441d      	add	r5, r3
 800b504:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800b508:	2820      	cmp	r0, #32
 800b50a:	dd13      	ble.n	800b534 <_dtoa_r+0x20c>
 800b50c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800b510:	9b00      	ldr	r3, [sp, #0]
 800b512:	fa08 f800 	lsl.w	r8, r8, r0
 800b516:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800b51a:	fa23 f000 	lsr.w	r0, r3, r0
 800b51e:	ea48 0000 	orr.w	r0, r8, r0
 800b522:	f7f4 ffd3 	bl	80004cc <__aeabi_ui2d>
 800b526:	2301      	movs	r3, #1
 800b528:	4682      	mov	sl, r0
 800b52a:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800b52e:	3d01      	subs	r5, #1
 800b530:	9313      	str	r3, [sp, #76]	; 0x4c
 800b532:	e774      	b.n	800b41e <_dtoa_r+0xf6>
 800b534:	f1c0 0020 	rsb	r0, r0, #32
 800b538:	9b00      	ldr	r3, [sp, #0]
 800b53a:	fa03 f000 	lsl.w	r0, r3, r0
 800b53e:	e7f0      	b.n	800b522 <_dtoa_r+0x1fa>
 800b540:	2301      	movs	r3, #1
 800b542:	e7b3      	b.n	800b4ac <_dtoa_r+0x184>
 800b544:	900f      	str	r0, [sp, #60]	; 0x3c
 800b546:	e7b2      	b.n	800b4ae <_dtoa_r+0x186>
 800b548:	9b05      	ldr	r3, [sp, #20]
 800b54a:	eba3 030a 	sub.w	r3, r3, sl
 800b54e:	9305      	str	r3, [sp, #20]
 800b550:	f1ca 0300 	rsb	r3, sl, #0
 800b554:	9307      	str	r3, [sp, #28]
 800b556:	2300      	movs	r3, #0
 800b558:	930e      	str	r3, [sp, #56]	; 0x38
 800b55a:	e7bd      	b.n	800b4d8 <_dtoa_r+0x1b0>
 800b55c:	2301      	movs	r3, #1
 800b55e:	930a      	str	r3, [sp, #40]	; 0x28
 800b560:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b562:	2b00      	cmp	r3, #0
 800b564:	dd59      	ble.n	800b61a <_dtoa_r+0x2f2>
 800b566:	4699      	mov	r9, r3
 800b568:	9302      	str	r3, [sp, #8]
 800b56a:	2200      	movs	r2, #0
 800b56c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b56e:	6072      	str	r2, [r6, #4]
 800b570:	2204      	movs	r2, #4
 800b572:	f102 0014 	add.w	r0, r2, #20
 800b576:	6871      	ldr	r1, [r6, #4]
 800b578:	4298      	cmp	r0, r3
 800b57a:	d953      	bls.n	800b624 <_dtoa_r+0x2fc>
 800b57c:	4620      	mov	r0, r4
 800b57e:	f000 fca5 	bl	800becc <_Balloc>
 800b582:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b584:	f1b9 0f0e 	cmp.w	r9, #14
 800b588:	6030      	str	r0, [r6, #0]
 800b58a:	f8d3 b000 	ldr.w	fp, [r3]
 800b58e:	f200 80e8 	bhi.w	800b762 <_dtoa_r+0x43a>
 800b592:	2d00      	cmp	r5, #0
 800b594:	f000 80e5 	beq.w	800b762 <_dtoa_r+0x43a>
 800b598:	f1ba 0f00 	cmp.w	sl, #0
 800b59c:	ed9d 7b00 	vldr	d7, [sp]
 800b5a0:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800b5a4:	dd76      	ble.n	800b694 <_dtoa_r+0x36c>
 800b5a6:	f00a 030f 	and.w	r3, sl, #15
 800b5aa:	4a2a      	ldr	r2, [pc, #168]	; (800b654 <_dtoa_r+0x32c>)
 800b5ac:	ea4f 162a 	mov.w	r6, sl, asr #4
 800b5b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b5b4:	06f0      	lsls	r0, r6, #27
 800b5b6:	ed93 7b00 	vldr	d7, [r3]
 800b5ba:	ed8d 7b08 	vstr	d7, [sp, #32]
 800b5be:	d567      	bpl.n	800b690 <_dtoa_r+0x368>
 800b5c0:	4b25      	ldr	r3, [pc, #148]	; (800b658 <_dtoa_r+0x330>)
 800b5c2:	f006 060f 	and.w	r6, r6, #15
 800b5c6:	2503      	movs	r5, #3
 800b5c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b5cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b5d0:	f7f5 f920 	bl	8000814 <__aeabi_ddiv>
 800b5d4:	e9cd 0100 	strd	r0, r1, [sp]
 800b5d8:	4f1f      	ldr	r7, [pc, #124]	; (800b658 <_dtoa_r+0x330>)
 800b5da:	e04e      	b.n	800b67a <_dtoa_r+0x352>
 800b5dc:	2301      	movs	r3, #1
 800b5de:	930a      	str	r3, [sp, #40]	; 0x28
 800b5e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5e2:	4453      	add	r3, sl
 800b5e4:	f103 0901 	add.w	r9, r3, #1
 800b5e8:	9302      	str	r3, [sp, #8]
 800b5ea:	464b      	mov	r3, r9
 800b5ec:	2b01      	cmp	r3, #1
 800b5ee:	bfb8      	it	lt
 800b5f0:	2301      	movlt	r3, #1
 800b5f2:	e7ba      	b.n	800b56a <_dtoa_r+0x242>
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	e7b2      	b.n	800b55e <_dtoa_r+0x236>
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	e7f0      	b.n	800b5de <_dtoa_r+0x2b6>
 800b5fc:	2501      	movs	r5, #1
 800b5fe:	2300      	movs	r3, #0
 800b600:	950a      	str	r5, [sp, #40]	; 0x28
 800b602:	9306      	str	r3, [sp, #24]
 800b604:	f04f 33ff 	mov.w	r3, #4294967295
 800b608:	2200      	movs	r2, #0
 800b60a:	9302      	str	r3, [sp, #8]
 800b60c:	4699      	mov	r9, r3
 800b60e:	2312      	movs	r3, #18
 800b610:	920b      	str	r2, [sp, #44]	; 0x2c
 800b612:	e7aa      	b.n	800b56a <_dtoa_r+0x242>
 800b614:	2301      	movs	r3, #1
 800b616:	930a      	str	r3, [sp, #40]	; 0x28
 800b618:	e7f4      	b.n	800b604 <_dtoa_r+0x2dc>
 800b61a:	2301      	movs	r3, #1
 800b61c:	9302      	str	r3, [sp, #8]
 800b61e:	4699      	mov	r9, r3
 800b620:	461a      	mov	r2, r3
 800b622:	e7f5      	b.n	800b610 <_dtoa_r+0x2e8>
 800b624:	3101      	adds	r1, #1
 800b626:	0052      	lsls	r2, r2, #1
 800b628:	6071      	str	r1, [r6, #4]
 800b62a:	e7a2      	b.n	800b572 <_dtoa_r+0x24a>
 800b62c:	f3af 8000 	nop.w
 800b630:	636f4361 	.word	0x636f4361
 800b634:	3fd287a7 	.word	0x3fd287a7
 800b638:	8b60c8b3 	.word	0x8b60c8b3
 800b63c:	3fc68a28 	.word	0x3fc68a28
 800b640:	509f79fb 	.word	0x509f79fb
 800b644:	3fd34413 	.word	0x3fd34413
 800b648:	7ff00000 	.word	0x7ff00000
 800b64c:	080237a5 	.word	0x080237a5
 800b650:	3ff80000 	.word	0x3ff80000
 800b654:	08023800 	.word	0x08023800
 800b658:	080237d8 	.word	0x080237d8
 800b65c:	080237d1 	.word	0x080237d1
 800b660:	07f1      	lsls	r1, r6, #31
 800b662:	d508      	bpl.n	800b676 <_dtoa_r+0x34e>
 800b664:	3501      	adds	r5, #1
 800b666:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b66a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b66e:	f7f4 ffa7 	bl	80005c0 <__aeabi_dmul>
 800b672:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b676:	1076      	asrs	r6, r6, #1
 800b678:	3708      	adds	r7, #8
 800b67a:	2e00      	cmp	r6, #0
 800b67c:	d1f0      	bne.n	800b660 <_dtoa_r+0x338>
 800b67e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b682:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b686:	f7f5 f8c5 	bl	8000814 <__aeabi_ddiv>
 800b68a:	e9cd 0100 	strd	r0, r1, [sp]
 800b68e:	e01a      	b.n	800b6c6 <_dtoa_r+0x39e>
 800b690:	2502      	movs	r5, #2
 800b692:	e7a1      	b.n	800b5d8 <_dtoa_r+0x2b0>
 800b694:	f000 80a0 	beq.w	800b7d8 <_dtoa_r+0x4b0>
 800b698:	f1ca 0600 	rsb	r6, sl, #0
 800b69c:	4b9f      	ldr	r3, [pc, #636]	; (800b91c <_dtoa_r+0x5f4>)
 800b69e:	4fa0      	ldr	r7, [pc, #640]	; (800b920 <_dtoa_r+0x5f8>)
 800b6a0:	2502      	movs	r5, #2
 800b6a2:	f006 020f 	and.w	r2, r6, #15
 800b6a6:	1136      	asrs	r6, r6, #4
 800b6a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b6ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b4:	f7f4 ff84 	bl	80005c0 <__aeabi_dmul>
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	e9cd 0100 	strd	r0, r1, [sp]
 800b6be:	2e00      	cmp	r6, #0
 800b6c0:	d17f      	bne.n	800b7c2 <_dtoa_r+0x49a>
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d1e1      	bne.n	800b68a <_dtoa_r+0x362>
 800b6c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	f000 8087 	beq.w	800b7dc <_dtoa_r+0x4b4>
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	4b94      	ldr	r3, [pc, #592]	; (800b924 <_dtoa_r+0x5fc>)
 800b6d2:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b6d6:	4630      	mov	r0, r6
 800b6d8:	4639      	mov	r1, r7
 800b6da:	f7f5 f9e3 	bl	8000aa4 <__aeabi_dcmplt>
 800b6de:	2800      	cmp	r0, #0
 800b6e0:	d07c      	beq.n	800b7dc <_dtoa_r+0x4b4>
 800b6e2:	f1b9 0f00 	cmp.w	r9, #0
 800b6e6:	d079      	beq.n	800b7dc <_dtoa_r+0x4b4>
 800b6e8:	9b02      	ldr	r3, [sp, #8]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	dd35      	ble.n	800b75a <_dtoa_r+0x432>
 800b6ee:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b6f2:	4639      	mov	r1, r7
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	4630      	mov	r0, r6
 800b6f8:	9308      	str	r3, [sp, #32]
 800b6fa:	3501      	adds	r5, #1
 800b6fc:	4b8a      	ldr	r3, [pc, #552]	; (800b928 <_dtoa_r+0x600>)
 800b6fe:	f7f4 ff5f 	bl	80005c0 <__aeabi_dmul>
 800b702:	9f02      	ldr	r7, [sp, #8]
 800b704:	e9cd 0100 	strd	r0, r1, [sp]
 800b708:	4628      	mov	r0, r5
 800b70a:	f7f4 feef 	bl	80004ec <__aeabi_i2d>
 800b70e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b712:	f7f4 ff55 	bl	80005c0 <__aeabi_dmul>
 800b716:	2200      	movs	r2, #0
 800b718:	4b84      	ldr	r3, [pc, #528]	; (800b92c <_dtoa_r+0x604>)
 800b71a:	f7f4 fd9b 	bl	8000254 <__adddf3>
 800b71e:	4605      	mov	r5, r0
 800b720:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800b724:	2f00      	cmp	r7, #0
 800b726:	d15d      	bne.n	800b7e4 <_dtoa_r+0x4bc>
 800b728:	2200      	movs	r2, #0
 800b72a:	4b81      	ldr	r3, [pc, #516]	; (800b930 <_dtoa_r+0x608>)
 800b72c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b730:	f7f4 fd8e 	bl	8000250 <__aeabi_dsub>
 800b734:	462a      	mov	r2, r5
 800b736:	4633      	mov	r3, r6
 800b738:	e9cd 0100 	strd	r0, r1, [sp]
 800b73c:	f7f5 f9d0 	bl	8000ae0 <__aeabi_dcmpgt>
 800b740:	2800      	cmp	r0, #0
 800b742:	f040 8287 	bne.w	800bc54 <_dtoa_r+0x92c>
 800b746:	462a      	mov	r2, r5
 800b748:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b74c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b750:	f7f5 f9a8 	bl	8000aa4 <__aeabi_dcmplt>
 800b754:	2800      	cmp	r0, #0
 800b756:	f040 827b 	bne.w	800bc50 <_dtoa_r+0x928>
 800b75a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b75e:	e9cd 2300 	strd	r2, r3, [sp]
 800b762:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b764:	2b00      	cmp	r3, #0
 800b766:	f2c0 814f 	blt.w	800ba08 <_dtoa_r+0x6e0>
 800b76a:	f1ba 0f0e 	cmp.w	sl, #14
 800b76e:	f300 814b 	bgt.w	800ba08 <_dtoa_r+0x6e0>
 800b772:	4b6a      	ldr	r3, [pc, #424]	; (800b91c <_dtoa_r+0x5f4>)
 800b774:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b778:	ed93 7b00 	vldr	d7, [r3]
 800b77c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b77e:	2b00      	cmp	r3, #0
 800b780:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b784:	f280 80d8 	bge.w	800b938 <_dtoa_r+0x610>
 800b788:	f1b9 0f00 	cmp.w	r9, #0
 800b78c:	f300 80d4 	bgt.w	800b938 <_dtoa_r+0x610>
 800b790:	f040 825d 	bne.w	800bc4e <_dtoa_r+0x926>
 800b794:	2200      	movs	r2, #0
 800b796:	4b66      	ldr	r3, [pc, #408]	; (800b930 <_dtoa_r+0x608>)
 800b798:	464f      	mov	r7, r9
 800b79a:	464e      	mov	r6, r9
 800b79c:	ec51 0b17 	vmov	r0, r1, d7
 800b7a0:	f7f4 ff0e 	bl	80005c0 <__aeabi_dmul>
 800b7a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b7a8:	f7f5 f990 	bl	8000acc <__aeabi_dcmpge>
 800b7ac:	2800      	cmp	r0, #0
 800b7ae:	f040 8233 	bne.w	800bc18 <_dtoa_r+0x8f0>
 800b7b2:	2331      	movs	r3, #49	; 0x31
 800b7b4:	f10b 0501 	add.w	r5, fp, #1
 800b7b8:	f10a 0a01 	add.w	sl, sl, #1
 800b7bc:	f88b 3000 	strb.w	r3, [fp]
 800b7c0:	e22e      	b.n	800bc20 <_dtoa_r+0x8f8>
 800b7c2:	07f2      	lsls	r2, r6, #31
 800b7c4:	d505      	bpl.n	800b7d2 <_dtoa_r+0x4aa>
 800b7c6:	3501      	adds	r5, #1
 800b7c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7cc:	f7f4 fef8 	bl	80005c0 <__aeabi_dmul>
 800b7d0:	2301      	movs	r3, #1
 800b7d2:	1076      	asrs	r6, r6, #1
 800b7d4:	3708      	adds	r7, #8
 800b7d6:	e772      	b.n	800b6be <_dtoa_r+0x396>
 800b7d8:	2502      	movs	r5, #2
 800b7da:	e774      	b.n	800b6c6 <_dtoa_r+0x39e>
 800b7dc:	f8cd a020 	str.w	sl, [sp, #32]
 800b7e0:	464f      	mov	r7, r9
 800b7e2:	e791      	b.n	800b708 <_dtoa_r+0x3e0>
 800b7e4:	4b4d      	ldr	r3, [pc, #308]	; (800b91c <_dtoa_r+0x5f4>)
 800b7e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b7ea:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800b7ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d047      	beq.n	800b884 <_dtoa_r+0x55c>
 800b7f4:	4602      	mov	r2, r0
 800b7f6:	460b      	mov	r3, r1
 800b7f8:	2000      	movs	r0, #0
 800b7fa:	494e      	ldr	r1, [pc, #312]	; (800b934 <_dtoa_r+0x60c>)
 800b7fc:	f7f5 f80a 	bl	8000814 <__aeabi_ddiv>
 800b800:	462a      	mov	r2, r5
 800b802:	465d      	mov	r5, fp
 800b804:	4633      	mov	r3, r6
 800b806:	f7f4 fd23 	bl	8000250 <__aeabi_dsub>
 800b80a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b80e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b812:	f7f5 f985 	bl	8000b20 <__aeabi_d2iz>
 800b816:	4606      	mov	r6, r0
 800b818:	f7f4 fe68 	bl	80004ec <__aeabi_i2d>
 800b81c:	4602      	mov	r2, r0
 800b81e:	3630      	adds	r6, #48	; 0x30
 800b820:	460b      	mov	r3, r1
 800b822:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b826:	f7f4 fd13 	bl	8000250 <__aeabi_dsub>
 800b82a:	f805 6b01 	strb.w	r6, [r5], #1
 800b82e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b832:	e9cd 0100 	strd	r0, r1, [sp]
 800b836:	f7f5 f935 	bl	8000aa4 <__aeabi_dcmplt>
 800b83a:	2800      	cmp	r0, #0
 800b83c:	d162      	bne.n	800b904 <_dtoa_r+0x5dc>
 800b83e:	2000      	movs	r0, #0
 800b840:	4938      	ldr	r1, [pc, #224]	; (800b924 <_dtoa_r+0x5fc>)
 800b842:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b846:	f7f4 fd03 	bl	8000250 <__aeabi_dsub>
 800b84a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b84e:	f7f5 f929 	bl	8000aa4 <__aeabi_dcmplt>
 800b852:	2800      	cmp	r0, #0
 800b854:	f040 80b7 	bne.w	800b9c6 <_dtoa_r+0x69e>
 800b858:	eba5 030b 	sub.w	r3, r5, fp
 800b85c:	429f      	cmp	r7, r3
 800b85e:	f77f af7c 	ble.w	800b75a <_dtoa_r+0x432>
 800b862:	2200      	movs	r2, #0
 800b864:	4b30      	ldr	r3, [pc, #192]	; (800b928 <_dtoa_r+0x600>)
 800b866:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b86a:	f7f4 fea9 	bl	80005c0 <__aeabi_dmul>
 800b86e:	2200      	movs	r2, #0
 800b870:	4b2d      	ldr	r3, [pc, #180]	; (800b928 <_dtoa_r+0x600>)
 800b872:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b876:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b87a:	f7f4 fea1 	bl	80005c0 <__aeabi_dmul>
 800b87e:	e9cd 0100 	strd	r0, r1, [sp]
 800b882:	e7c4      	b.n	800b80e <_dtoa_r+0x4e6>
 800b884:	462a      	mov	r2, r5
 800b886:	4633      	mov	r3, r6
 800b888:	eb0b 0507 	add.w	r5, fp, r7
 800b88c:	465e      	mov	r6, fp
 800b88e:	f7f4 fe97 	bl	80005c0 <__aeabi_dmul>
 800b892:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b896:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b89a:	f7f5 f941 	bl	8000b20 <__aeabi_d2iz>
 800b89e:	4607      	mov	r7, r0
 800b8a0:	f7f4 fe24 	bl	80004ec <__aeabi_i2d>
 800b8a4:	4602      	mov	r2, r0
 800b8a6:	3730      	adds	r7, #48	; 0x30
 800b8a8:	460b      	mov	r3, r1
 800b8aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b8ae:	f7f4 fccf 	bl	8000250 <__aeabi_dsub>
 800b8b2:	f806 7b01 	strb.w	r7, [r6], #1
 800b8b6:	42ae      	cmp	r6, r5
 800b8b8:	f04f 0200 	mov.w	r2, #0
 800b8bc:	e9cd 0100 	strd	r0, r1, [sp]
 800b8c0:	d125      	bne.n	800b90e <_dtoa_r+0x5e6>
 800b8c2:	4b1c      	ldr	r3, [pc, #112]	; (800b934 <_dtoa_r+0x60c>)
 800b8c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b8c8:	f7f4 fcc4 	bl	8000254 <__adddf3>
 800b8cc:	4602      	mov	r2, r0
 800b8ce:	460b      	mov	r3, r1
 800b8d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b8d4:	f7f5 f904 	bl	8000ae0 <__aeabi_dcmpgt>
 800b8d8:	2800      	cmp	r0, #0
 800b8da:	d174      	bne.n	800b9c6 <_dtoa_r+0x69e>
 800b8dc:	2000      	movs	r0, #0
 800b8de:	4915      	ldr	r1, [pc, #84]	; (800b934 <_dtoa_r+0x60c>)
 800b8e0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b8e4:	f7f4 fcb4 	bl	8000250 <__aeabi_dsub>
 800b8e8:	4602      	mov	r2, r0
 800b8ea:	460b      	mov	r3, r1
 800b8ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b8f0:	f7f5 f8d8 	bl	8000aa4 <__aeabi_dcmplt>
 800b8f4:	2800      	cmp	r0, #0
 800b8f6:	f43f af30 	beq.w	800b75a <_dtoa_r+0x432>
 800b8fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b8fe:	1e6a      	subs	r2, r5, #1
 800b900:	2b30      	cmp	r3, #48	; 0x30
 800b902:	d002      	beq.n	800b90a <_dtoa_r+0x5e2>
 800b904:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b908:	e04b      	b.n	800b9a2 <_dtoa_r+0x67a>
 800b90a:	4615      	mov	r5, r2
 800b90c:	e7f5      	b.n	800b8fa <_dtoa_r+0x5d2>
 800b90e:	4b06      	ldr	r3, [pc, #24]	; (800b928 <_dtoa_r+0x600>)
 800b910:	f7f4 fe56 	bl	80005c0 <__aeabi_dmul>
 800b914:	e9cd 0100 	strd	r0, r1, [sp]
 800b918:	e7bd      	b.n	800b896 <_dtoa_r+0x56e>
 800b91a:	bf00      	nop
 800b91c:	08023800 	.word	0x08023800
 800b920:	080237d8 	.word	0x080237d8
 800b924:	3ff00000 	.word	0x3ff00000
 800b928:	40240000 	.word	0x40240000
 800b92c:	401c0000 	.word	0x401c0000
 800b930:	40140000 	.word	0x40140000
 800b934:	3fe00000 	.word	0x3fe00000
 800b938:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b93c:	465d      	mov	r5, fp
 800b93e:	4630      	mov	r0, r6
 800b940:	4639      	mov	r1, r7
 800b942:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b946:	f7f4 ff65 	bl	8000814 <__aeabi_ddiv>
 800b94a:	f7f5 f8e9 	bl	8000b20 <__aeabi_d2iz>
 800b94e:	4680      	mov	r8, r0
 800b950:	f7f4 fdcc 	bl	80004ec <__aeabi_i2d>
 800b954:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b958:	f7f4 fe32 	bl	80005c0 <__aeabi_dmul>
 800b95c:	4602      	mov	r2, r0
 800b95e:	4630      	mov	r0, r6
 800b960:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800b964:	460b      	mov	r3, r1
 800b966:	4639      	mov	r1, r7
 800b968:	f7f4 fc72 	bl	8000250 <__aeabi_dsub>
 800b96c:	f805 6b01 	strb.w	r6, [r5], #1
 800b970:	eba5 060b 	sub.w	r6, r5, fp
 800b974:	4602      	mov	r2, r0
 800b976:	460b      	mov	r3, r1
 800b978:	45b1      	cmp	r9, r6
 800b97a:	d138      	bne.n	800b9ee <_dtoa_r+0x6c6>
 800b97c:	f7f4 fc6a 	bl	8000254 <__adddf3>
 800b980:	4606      	mov	r6, r0
 800b982:	460f      	mov	r7, r1
 800b984:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b988:	f7f5 f8aa 	bl	8000ae0 <__aeabi_dcmpgt>
 800b98c:	b9c8      	cbnz	r0, 800b9c2 <_dtoa_r+0x69a>
 800b98e:	4630      	mov	r0, r6
 800b990:	4639      	mov	r1, r7
 800b992:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b996:	f7f5 f87b 	bl	8000a90 <__aeabi_dcmpeq>
 800b99a:	b110      	cbz	r0, 800b9a2 <_dtoa_r+0x67a>
 800b99c:	f018 0f01 	tst.w	r8, #1
 800b9a0:	d10f      	bne.n	800b9c2 <_dtoa_r+0x69a>
 800b9a2:	9904      	ldr	r1, [sp, #16]
 800b9a4:	4620      	mov	r0, r4
 800b9a6:	f000 fac5 	bl	800bf34 <_Bfree>
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b9ae:	702b      	strb	r3, [r5, #0]
 800b9b0:	f10a 0301 	add.w	r3, sl, #1
 800b9b4:	6013      	str	r3, [r2, #0]
 800b9b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	f000 823d 	beq.w	800be38 <_dtoa_r+0xb10>
 800b9be:	601d      	str	r5, [r3, #0]
 800b9c0:	e23a      	b.n	800be38 <_dtoa_r+0xb10>
 800b9c2:	f8cd a020 	str.w	sl, [sp, #32]
 800b9c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b9ca:	1e6b      	subs	r3, r5, #1
 800b9cc:	2a39      	cmp	r2, #57	; 0x39
 800b9ce:	d108      	bne.n	800b9e2 <_dtoa_r+0x6ba>
 800b9d0:	459b      	cmp	fp, r3
 800b9d2:	d10a      	bne.n	800b9ea <_dtoa_r+0x6c2>
 800b9d4:	9b08      	ldr	r3, [sp, #32]
 800b9d6:	3301      	adds	r3, #1
 800b9d8:	9308      	str	r3, [sp, #32]
 800b9da:	2330      	movs	r3, #48	; 0x30
 800b9dc:	f88b 3000 	strb.w	r3, [fp]
 800b9e0:	465b      	mov	r3, fp
 800b9e2:	781a      	ldrb	r2, [r3, #0]
 800b9e4:	3201      	adds	r2, #1
 800b9e6:	701a      	strb	r2, [r3, #0]
 800b9e8:	e78c      	b.n	800b904 <_dtoa_r+0x5dc>
 800b9ea:	461d      	mov	r5, r3
 800b9ec:	e7eb      	b.n	800b9c6 <_dtoa_r+0x69e>
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	4b9a      	ldr	r3, [pc, #616]	; (800bc5c <_dtoa_r+0x934>)
 800b9f2:	f7f4 fde5 	bl	80005c0 <__aeabi_dmul>
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	4606      	mov	r6, r0
 800b9fc:	460f      	mov	r7, r1
 800b9fe:	f7f5 f847 	bl	8000a90 <__aeabi_dcmpeq>
 800ba02:	2800      	cmp	r0, #0
 800ba04:	d09b      	beq.n	800b93e <_dtoa_r+0x616>
 800ba06:	e7cc      	b.n	800b9a2 <_dtoa_r+0x67a>
 800ba08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba0a:	2a00      	cmp	r2, #0
 800ba0c:	f000 808b 	beq.w	800bb26 <_dtoa_r+0x7fe>
 800ba10:	9a06      	ldr	r2, [sp, #24]
 800ba12:	2a01      	cmp	r2, #1
 800ba14:	dc6e      	bgt.n	800baf4 <_dtoa_r+0x7cc>
 800ba16:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ba18:	2a00      	cmp	r2, #0
 800ba1a:	d067      	beq.n	800baec <_dtoa_r+0x7c4>
 800ba1c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ba20:	9f07      	ldr	r7, [sp, #28]
 800ba22:	9d05      	ldr	r5, [sp, #20]
 800ba24:	9a05      	ldr	r2, [sp, #20]
 800ba26:	2101      	movs	r1, #1
 800ba28:	4620      	mov	r0, r4
 800ba2a:	4498      	add	r8, r3
 800ba2c:	441a      	add	r2, r3
 800ba2e:	9205      	str	r2, [sp, #20]
 800ba30:	f000 fb22 	bl	800c078 <__i2b>
 800ba34:	4606      	mov	r6, r0
 800ba36:	2d00      	cmp	r5, #0
 800ba38:	dd0c      	ble.n	800ba54 <_dtoa_r+0x72c>
 800ba3a:	f1b8 0f00 	cmp.w	r8, #0
 800ba3e:	dd09      	ble.n	800ba54 <_dtoa_r+0x72c>
 800ba40:	4545      	cmp	r5, r8
 800ba42:	462b      	mov	r3, r5
 800ba44:	9a05      	ldr	r2, [sp, #20]
 800ba46:	bfa8      	it	ge
 800ba48:	4643      	movge	r3, r8
 800ba4a:	1ad2      	subs	r2, r2, r3
 800ba4c:	1aed      	subs	r5, r5, r3
 800ba4e:	eba8 0803 	sub.w	r8, r8, r3
 800ba52:	9205      	str	r2, [sp, #20]
 800ba54:	9b07      	ldr	r3, [sp, #28]
 800ba56:	b1eb      	cbz	r3, 800ba94 <_dtoa_r+0x76c>
 800ba58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d067      	beq.n	800bb2e <_dtoa_r+0x806>
 800ba5e:	b18f      	cbz	r7, 800ba84 <_dtoa_r+0x75c>
 800ba60:	4631      	mov	r1, r6
 800ba62:	463a      	mov	r2, r7
 800ba64:	4620      	mov	r0, r4
 800ba66:	f000 fba5 	bl	800c1b4 <__pow5mult>
 800ba6a:	9a04      	ldr	r2, [sp, #16]
 800ba6c:	4601      	mov	r1, r0
 800ba6e:	4606      	mov	r6, r0
 800ba70:	4620      	mov	r0, r4
 800ba72:	f000 fb0a 	bl	800c08a <__multiply>
 800ba76:	9904      	ldr	r1, [sp, #16]
 800ba78:	9008      	str	r0, [sp, #32]
 800ba7a:	4620      	mov	r0, r4
 800ba7c:	f000 fa5a 	bl	800bf34 <_Bfree>
 800ba80:	9b08      	ldr	r3, [sp, #32]
 800ba82:	9304      	str	r3, [sp, #16]
 800ba84:	9b07      	ldr	r3, [sp, #28]
 800ba86:	1bda      	subs	r2, r3, r7
 800ba88:	d004      	beq.n	800ba94 <_dtoa_r+0x76c>
 800ba8a:	9904      	ldr	r1, [sp, #16]
 800ba8c:	4620      	mov	r0, r4
 800ba8e:	f000 fb91 	bl	800c1b4 <__pow5mult>
 800ba92:	9004      	str	r0, [sp, #16]
 800ba94:	2101      	movs	r1, #1
 800ba96:	4620      	mov	r0, r4
 800ba98:	f000 faee 	bl	800c078 <__i2b>
 800ba9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba9e:	4607      	mov	r7, r0
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	f000 81cd 	beq.w	800be40 <_dtoa_r+0xb18>
 800baa6:	461a      	mov	r2, r3
 800baa8:	4601      	mov	r1, r0
 800baaa:	4620      	mov	r0, r4
 800baac:	f000 fb82 	bl	800c1b4 <__pow5mult>
 800bab0:	9b06      	ldr	r3, [sp, #24]
 800bab2:	4607      	mov	r7, r0
 800bab4:	2b01      	cmp	r3, #1
 800bab6:	dc40      	bgt.n	800bb3a <_dtoa_r+0x812>
 800bab8:	9b00      	ldr	r3, [sp, #0]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d139      	bne.n	800bb32 <_dtoa_r+0x80a>
 800babe:	9b01      	ldr	r3, [sp, #4]
 800bac0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d136      	bne.n	800bb36 <_dtoa_r+0x80e>
 800bac8:	9b01      	ldr	r3, [sp, #4]
 800baca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bace:	0d1b      	lsrs	r3, r3, #20
 800bad0:	051b      	lsls	r3, r3, #20
 800bad2:	b12b      	cbz	r3, 800bae0 <_dtoa_r+0x7b8>
 800bad4:	9b05      	ldr	r3, [sp, #20]
 800bad6:	f108 0801 	add.w	r8, r8, #1
 800bada:	3301      	adds	r3, #1
 800badc:	9305      	str	r3, [sp, #20]
 800bade:	2301      	movs	r3, #1
 800bae0:	9307      	str	r3, [sp, #28]
 800bae2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d12a      	bne.n	800bb3e <_dtoa_r+0x816>
 800bae8:	2001      	movs	r0, #1
 800baea:	e030      	b.n	800bb4e <_dtoa_r+0x826>
 800baec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800baee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800baf2:	e795      	b.n	800ba20 <_dtoa_r+0x6f8>
 800baf4:	9b07      	ldr	r3, [sp, #28]
 800baf6:	f109 37ff 	add.w	r7, r9, #4294967295
 800bafa:	42bb      	cmp	r3, r7
 800bafc:	bfb7      	itett	lt
 800bafe:	9b07      	ldrlt	r3, [sp, #28]
 800bb00:	1bdf      	subge	r7, r3, r7
 800bb02:	9707      	strlt	r7, [sp, #28]
 800bb04:	1afa      	sublt	r2, r7, r3
 800bb06:	bfbf      	itttt	lt
 800bb08:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800bb0a:	2700      	movlt	r7, #0
 800bb0c:	189b      	addlt	r3, r3, r2
 800bb0e:	930e      	strlt	r3, [sp, #56]	; 0x38
 800bb10:	f1b9 0f00 	cmp.w	r9, #0
 800bb14:	bfb3      	iteet	lt
 800bb16:	9b05      	ldrlt	r3, [sp, #20]
 800bb18:	464b      	movge	r3, r9
 800bb1a:	9d05      	ldrge	r5, [sp, #20]
 800bb1c:	eba3 0509 	sublt.w	r5, r3, r9
 800bb20:	bfb8      	it	lt
 800bb22:	2300      	movlt	r3, #0
 800bb24:	e77e      	b.n	800ba24 <_dtoa_r+0x6fc>
 800bb26:	9f07      	ldr	r7, [sp, #28]
 800bb28:	9d05      	ldr	r5, [sp, #20]
 800bb2a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800bb2c:	e783      	b.n	800ba36 <_dtoa_r+0x70e>
 800bb2e:	9a07      	ldr	r2, [sp, #28]
 800bb30:	e7ab      	b.n	800ba8a <_dtoa_r+0x762>
 800bb32:	2300      	movs	r3, #0
 800bb34:	e7d4      	b.n	800bae0 <_dtoa_r+0x7b8>
 800bb36:	9b00      	ldr	r3, [sp, #0]
 800bb38:	e7d2      	b.n	800bae0 <_dtoa_r+0x7b8>
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	9307      	str	r3, [sp, #28]
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800bb44:	6918      	ldr	r0, [r3, #16]
 800bb46:	f000 fa49 	bl	800bfdc <__hi0bits>
 800bb4a:	f1c0 0020 	rsb	r0, r0, #32
 800bb4e:	4440      	add	r0, r8
 800bb50:	f010 001f 	ands.w	r0, r0, #31
 800bb54:	d047      	beq.n	800bbe6 <_dtoa_r+0x8be>
 800bb56:	f1c0 0320 	rsb	r3, r0, #32
 800bb5a:	2b04      	cmp	r3, #4
 800bb5c:	dd3b      	ble.n	800bbd6 <_dtoa_r+0x8ae>
 800bb5e:	f1c0 001c 	rsb	r0, r0, #28
 800bb62:	9b05      	ldr	r3, [sp, #20]
 800bb64:	4405      	add	r5, r0
 800bb66:	4403      	add	r3, r0
 800bb68:	4480      	add	r8, r0
 800bb6a:	9305      	str	r3, [sp, #20]
 800bb6c:	9b05      	ldr	r3, [sp, #20]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	dd05      	ble.n	800bb7e <_dtoa_r+0x856>
 800bb72:	461a      	mov	r2, r3
 800bb74:	9904      	ldr	r1, [sp, #16]
 800bb76:	4620      	mov	r0, r4
 800bb78:	f000 fb6a 	bl	800c250 <__lshift>
 800bb7c:	9004      	str	r0, [sp, #16]
 800bb7e:	f1b8 0f00 	cmp.w	r8, #0
 800bb82:	dd05      	ble.n	800bb90 <_dtoa_r+0x868>
 800bb84:	4639      	mov	r1, r7
 800bb86:	4642      	mov	r2, r8
 800bb88:	4620      	mov	r0, r4
 800bb8a:	f000 fb61 	bl	800c250 <__lshift>
 800bb8e:	4607      	mov	r7, r0
 800bb90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bb92:	b353      	cbz	r3, 800bbea <_dtoa_r+0x8c2>
 800bb94:	4639      	mov	r1, r7
 800bb96:	9804      	ldr	r0, [sp, #16]
 800bb98:	f000 fbae 	bl	800c2f8 <__mcmp>
 800bb9c:	2800      	cmp	r0, #0
 800bb9e:	da24      	bge.n	800bbea <_dtoa_r+0x8c2>
 800bba0:	2300      	movs	r3, #0
 800bba2:	220a      	movs	r2, #10
 800bba4:	9904      	ldr	r1, [sp, #16]
 800bba6:	4620      	mov	r0, r4
 800bba8:	f000 f9db 	bl	800bf62 <__multadd>
 800bbac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbae:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bbb2:	9004      	str	r0, [sp, #16]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	f000 814a 	beq.w	800be4e <_dtoa_r+0xb26>
 800bbba:	2300      	movs	r3, #0
 800bbbc:	4631      	mov	r1, r6
 800bbbe:	220a      	movs	r2, #10
 800bbc0:	4620      	mov	r0, r4
 800bbc2:	f000 f9ce 	bl	800bf62 <__multadd>
 800bbc6:	9b02      	ldr	r3, [sp, #8]
 800bbc8:	4606      	mov	r6, r0
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	dc4e      	bgt.n	800bc6c <_dtoa_r+0x944>
 800bbce:	9b06      	ldr	r3, [sp, #24]
 800bbd0:	2b02      	cmp	r3, #2
 800bbd2:	dd4b      	ble.n	800bc6c <_dtoa_r+0x944>
 800bbd4:	e011      	b.n	800bbfa <_dtoa_r+0x8d2>
 800bbd6:	d0c9      	beq.n	800bb6c <_dtoa_r+0x844>
 800bbd8:	331c      	adds	r3, #28
 800bbda:	9a05      	ldr	r2, [sp, #20]
 800bbdc:	441a      	add	r2, r3
 800bbde:	441d      	add	r5, r3
 800bbe0:	4498      	add	r8, r3
 800bbe2:	9205      	str	r2, [sp, #20]
 800bbe4:	e7c2      	b.n	800bb6c <_dtoa_r+0x844>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	e7f6      	b.n	800bbd8 <_dtoa_r+0x8b0>
 800bbea:	f1b9 0f00 	cmp.w	r9, #0
 800bbee:	dc37      	bgt.n	800bc60 <_dtoa_r+0x938>
 800bbf0:	9b06      	ldr	r3, [sp, #24]
 800bbf2:	2b02      	cmp	r3, #2
 800bbf4:	dd34      	ble.n	800bc60 <_dtoa_r+0x938>
 800bbf6:	f8cd 9008 	str.w	r9, [sp, #8]
 800bbfa:	9b02      	ldr	r3, [sp, #8]
 800bbfc:	b963      	cbnz	r3, 800bc18 <_dtoa_r+0x8f0>
 800bbfe:	4639      	mov	r1, r7
 800bc00:	2205      	movs	r2, #5
 800bc02:	4620      	mov	r0, r4
 800bc04:	f000 f9ad 	bl	800bf62 <__multadd>
 800bc08:	4601      	mov	r1, r0
 800bc0a:	4607      	mov	r7, r0
 800bc0c:	9804      	ldr	r0, [sp, #16]
 800bc0e:	f000 fb73 	bl	800c2f8 <__mcmp>
 800bc12:	2800      	cmp	r0, #0
 800bc14:	f73f adcd 	bgt.w	800b7b2 <_dtoa_r+0x48a>
 800bc18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc1a:	465d      	mov	r5, fp
 800bc1c:	ea6f 0a03 	mvn.w	sl, r3
 800bc20:	f04f 0900 	mov.w	r9, #0
 800bc24:	4639      	mov	r1, r7
 800bc26:	4620      	mov	r0, r4
 800bc28:	f000 f984 	bl	800bf34 <_Bfree>
 800bc2c:	2e00      	cmp	r6, #0
 800bc2e:	f43f aeb8 	beq.w	800b9a2 <_dtoa_r+0x67a>
 800bc32:	f1b9 0f00 	cmp.w	r9, #0
 800bc36:	d005      	beq.n	800bc44 <_dtoa_r+0x91c>
 800bc38:	45b1      	cmp	r9, r6
 800bc3a:	d003      	beq.n	800bc44 <_dtoa_r+0x91c>
 800bc3c:	4649      	mov	r1, r9
 800bc3e:	4620      	mov	r0, r4
 800bc40:	f000 f978 	bl	800bf34 <_Bfree>
 800bc44:	4631      	mov	r1, r6
 800bc46:	4620      	mov	r0, r4
 800bc48:	f000 f974 	bl	800bf34 <_Bfree>
 800bc4c:	e6a9      	b.n	800b9a2 <_dtoa_r+0x67a>
 800bc4e:	2700      	movs	r7, #0
 800bc50:	463e      	mov	r6, r7
 800bc52:	e7e1      	b.n	800bc18 <_dtoa_r+0x8f0>
 800bc54:	f8dd a020 	ldr.w	sl, [sp, #32]
 800bc58:	463e      	mov	r6, r7
 800bc5a:	e5aa      	b.n	800b7b2 <_dtoa_r+0x48a>
 800bc5c:	40240000 	.word	0x40240000
 800bc60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc62:	f8cd 9008 	str.w	r9, [sp, #8]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	f000 80f8 	beq.w	800be5c <_dtoa_r+0xb34>
 800bc6c:	2d00      	cmp	r5, #0
 800bc6e:	dd05      	ble.n	800bc7c <_dtoa_r+0x954>
 800bc70:	4631      	mov	r1, r6
 800bc72:	462a      	mov	r2, r5
 800bc74:	4620      	mov	r0, r4
 800bc76:	f000 faeb 	bl	800c250 <__lshift>
 800bc7a:	4606      	mov	r6, r0
 800bc7c:	9b07      	ldr	r3, [sp, #28]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d04c      	beq.n	800bd1c <_dtoa_r+0x9f4>
 800bc82:	6871      	ldr	r1, [r6, #4]
 800bc84:	4620      	mov	r0, r4
 800bc86:	f000 f921 	bl	800becc <_Balloc>
 800bc8a:	6932      	ldr	r2, [r6, #16]
 800bc8c:	4605      	mov	r5, r0
 800bc8e:	f106 010c 	add.w	r1, r6, #12
 800bc92:	3202      	adds	r2, #2
 800bc94:	300c      	adds	r0, #12
 800bc96:	0092      	lsls	r2, r2, #2
 800bc98:	f7fe fd6a 	bl	800a770 <memcpy>
 800bc9c:	2201      	movs	r2, #1
 800bc9e:	4629      	mov	r1, r5
 800bca0:	4620      	mov	r0, r4
 800bca2:	f000 fad5 	bl	800c250 <__lshift>
 800bca6:	9b00      	ldr	r3, [sp, #0]
 800bca8:	46b1      	mov	r9, r6
 800bcaa:	4606      	mov	r6, r0
 800bcac:	f8cd b014 	str.w	fp, [sp, #20]
 800bcb0:	f003 0301 	and.w	r3, r3, #1
 800bcb4:	9307      	str	r3, [sp, #28]
 800bcb6:	4639      	mov	r1, r7
 800bcb8:	9804      	ldr	r0, [sp, #16]
 800bcba:	f7ff faa3 	bl	800b204 <quorem>
 800bcbe:	4649      	mov	r1, r9
 800bcc0:	4605      	mov	r5, r0
 800bcc2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800bcc6:	9804      	ldr	r0, [sp, #16]
 800bcc8:	f000 fb16 	bl	800c2f8 <__mcmp>
 800bccc:	4632      	mov	r2, r6
 800bcce:	9000      	str	r0, [sp, #0]
 800bcd0:	4639      	mov	r1, r7
 800bcd2:	4620      	mov	r0, r4
 800bcd4:	f000 fb2a 	bl	800c32c <__mdiff>
 800bcd8:	68c3      	ldr	r3, [r0, #12]
 800bcda:	4602      	mov	r2, r0
 800bcdc:	bb03      	cbnz	r3, 800bd20 <_dtoa_r+0x9f8>
 800bcde:	4601      	mov	r1, r0
 800bce0:	9008      	str	r0, [sp, #32]
 800bce2:	9804      	ldr	r0, [sp, #16]
 800bce4:	f000 fb08 	bl	800c2f8 <__mcmp>
 800bce8:	9a08      	ldr	r2, [sp, #32]
 800bcea:	4603      	mov	r3, r0
 800bcec:	4611      	mov	r1, r2
 800bcee:	4620      	mov	r0, r4
 800bcf0:	9308      	str	r3, [sp, #32]
 800bcf2:	f000 f91f 	bl	800bf34 <_Bfree>
 800bcf6:	9b08      	ldr	r3, [sp, #32]
 800bcf8:	b9a3      	cbnz	r3, 800bd24 <_dtoa_r+0x9fc>
 800bcfa:	9a06      	ldr	r2, [sp, #24]
 800bcfc:	b992      	cbnz	r2, 800bd24 <_dtoa_r+0x9fc>
 800bcfe:	9a07      	ldr	r2, [sp, #28]
 800bd00:	b982      	cbnz	r2, 800bd24 <_dtoa_r+0x9fc>
 800bd02:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800bd06:	d029      	beq.n	800bd5c <_dtoa_r+0xa34>
 800bd08:	9b00      	ldr	r3, [sp, #0]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	dd01      	ble.n	800bd12 <_dtoa_r+0x9ea>
 800bd0e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800bd12:	9b05      	ldr	r3, [sp, #20]
 800bd14:	1c5d      	adds	r5, r3, #1
 800bd16:	f883 8000 	strb.w	r8, [r3]
 800bd1a:	e783      	b.n	800bc24 <_dtoa_r+0x8fc>
 800bd1c:	4630      	mov	r0, r6
 800bd1e:	e7c2      	b.n	800bca6 <_dtoa_r+0x97e>
 800bd20:	2301      	movs	r3, #1
 800bd22:	e7e3      	b.n	800bcec <_dtoa_r+0x9c4>
 800bd24:	9a00      	ldr	r2, [sp, #0]
 800bd26:	2a00      	cmp	r2, #0
 800bd28:	db04      	blt.n	800bd34 <_dtoa_r+0xa0c>
 800bd2a:	d124      	bne.n	800bd76 <_dtoa_r+0xa4e>
 800bd2c:	9a06      	ldr	r2, [sp, #24]
 800bd2e:	bb12      	cbnz	r2, 800bd76 <_dtoa_r+0xa4e>
 800bd30:	9a07      	ldr	r2, [sp, #28]
 800bd32:	bb02      	cbnz	r2, 800bd76 <_dtoa_r+0xa4e>
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	ddec      	ble.n	800bd12 <_dtoa_r+0x9ea>
 800bd38:	2201      	movs	r2, #1
 800bd3a:	9904      	ldr	r1, [sp, #16]
 800bd3c:	4620      	mov	r0, r4
 800bd3e:	f000 fa87 	bl	800c250 <__lshift>
 800bd42:	4639      	mov	r1, r7
 800bd44:	9004      	str	r0, [sp, #16]
 800bd46:	f000 fad7 	bl	800c2f8 <__mcmp>
 800bd4a:	2800      	cmp	r0, #0
 800bd4c:	dc03      	bgt.n	800bd56 <_dtoa_r+0xa2e>
 800bd4e:	d1e0      	bne.n	800bd12 <_dtoa_r+0x9ea>
 800bd50:	f018 0f01 	tst.w	r8, #1
 800bd54:	d0dd      	beq.n	800bd12 <_dtoa_r+0x9ea>
 800bd56:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800bd5a:	d1d8      	bne.n	800bd0e <_dtoa_r+0x9e6>
 800bd5c:	9b05      	ldr	r3, [sp, #20]
 800bd5e:	9a05      	ldr	r2, [sp, #20]
 800bd60:	1c5d      	adds	r5, r3, #1
 800bd62:	2339      	movs	r3, #57	; 0x39
 800bd64:	7013      	strb	r3, [r2, #0]
 800bd66:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bd6a:	1e6a      	subs	r2, r5, #1
 800bd6c:	2b39      	cmp	r3, #57	; 0x39
 800bd6e:	d04e      	beq.n	800be0e <_dtoa_r+0xae6>
 800bd70:	3301      	adds	r3, #1
 800bd72:	7013      	strb	r3, [r2, #0]
 800bd74:	e756      	b.n	800bc24 <_dtoa_r+0x8fc>
 800bd76:	9a05      	ldr	r2, [sp, #20]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	f102 0501 	add.w	r5, r2, #1
 800bd7e:	dd06      	ble.n	800bd8e <_dtoa_r+0xa66>
 800bd80:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800bd84:	d0ea      	beq.n	800bd5c <_dtoa_r+0xa34>
 800bd86:	f108 0801 	add.w	r8, r8, #1
 800bd8a:	9b05      	ldr	r3, [sp, #20]
 800bd8c:	e7c3      	b.n	800bd16 <_dtoa_r+0x9ee>
 800bd8e:	eba5 030b 	sub.w	r3, r5, fp
 800bd92:	9a02      	ldr	r2, [sp, #8]
 800bd94:	f805 8c01 	strb.w	r8, [r5, #-1]
 800bd98:	4293      	cmp	r3, r2
 800bd9a:	d021      	beq.n	800bde0 <_dtoa_r+0xab8>
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	220a      	movs	r2, #10
 800bda0:	9904      	ldr	r1, [sp, #16]
 800bda2:	4620      	mov	r0, r4
 800bda4:	f000 f8dd 	bl	800bf62 <__multadd>
 800bda8:	45b1      	cmp	r9, r6
 800bdaa:	9004      	str	r0, [sp, #16]
 800bdac:	f04f 0300 	mov.w	r3, #0
 800bdb0:	f04f 020a 	mov.w	r2, #10
 800bdb4:	4649      	mov	r1, r9
 800bdb6:	4620      	mov	r0, r4
 800bdb8:	d105      	bne.n	800bdc6 <_dtoa_r+0xa9e>
 800bdba:	f000 f8d2 	bl	800bf62 <__multadd>
 800bdbe:	4681      	mov	r9, r0
 800bdc0:	4606      	mov	r6, r0
 800bdc2:	9505      	str	r5, [sp, #20]
 800bdc4:	e777      	b.n	800bcb6 <_dtoa_r+0x98e>
 800bdc6:	f000 f8cc 	bl	800bf62 <__multadd>
 800bdca:	4631      	mov	r1, r6
 800bdcc:	4681      	mov	r9, r0
 800bdce:	2300      	movs	r3, #0
 800bdd0:	220a      	movs	r2, #10
 800bdd2:	4620      	mov	r0, r4
 800bdd4:	f000 f8c5 	bl	800bf62 <__multadd>
 800bdd8:	4606      	mov	r6, r0
 800bdda:	e7f2      	b.n	800bdc2 <_dtoa_r+0xa9a>
 800bddc:	f04f 0900 	mov.w	r9, #0
 800bde0:	2201      	movs	r2, #1
 800bde2:	9904      	ldr	r1, [sp, #16]
 800bde4:	4620      	mov	r0, r4
 800bde6:	f000 fa33 	bl	800c250 <__lshift>
 800bdea:	4639      	mov	r1, r7
 800bdec:	9004      	str	r0, [sp, #16]
 800bdee:	f000 fa83 	bl	800c2f8 <__mcmp>
 800bdf2:	2800      	cmp	r0, #0
 800bdf4:	dcb7      	bgt.n	800bd66 <_dtoa_r+0xa3e>
 800bdf6:	d102      	bne.n	800bdfe <_dtoa_r+0xad6>
 800bdf8:	f018 0f01 	tst.w	r8, #1
 800bdfc:	d1b3      	bne.n	800bd66 <_dtoa_r+0xa3e>
 800bdfe:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800be02:	1e6a      	subs	r2, r5, #1
 800be04:	2b30      	cmp	r3, #48	; 0x30
 800be06:	f47f af0d 	bne.w	800bc24 <_dtoa_r+0x8fc>
 800be0a:	4615      	mov	r5, r2
 800be0c:	e7f7      	b.n	800bdfe <_dtoa_r+0xad6>
 800be0e:	4593      	cmp	fp, r2
 800be10:	d105      	bne.n	800be1e <_dtoa_r+0xaf6>
 800be12:	2331      	movs	r3, #49	; 0x31
 800be14:	f10a 0a01 	add.w	sl, sl, #1
 800be18:	f88b 3000 	strb.w	r3, [fp]
 800be1c:	e702      	b.n	800bc24 <_dtoa_r+0x8fc>
 800be1e:	4615      	mov	r5, r2
 800be20:	e7a1      	b.n	800bd66 <_dtoa_r+0xa3e>
 800be22:	f8df b064 	ldr.w	fp, [pc, #100]	; 800be88 <_dtoa_r+0xb60>
 800be26:	e007      	b.n	800be38 <_dtoa_r+0xb10>
 800be28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be2a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800be8c <_dtoa_r+0xb64>
 800be2e:	b11b      	cbz	r3, 800be38 <_dtoa_r+0xb10>
 800be30:	f10b 0308 	add.w	r3, fp, #8
 800be34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800be36:	6013      	str	r3, [r2, #0]
 800be38:	4658      	mov	r0, fp
 800be3a:	b017      	add	sp, #92	; 0x5c
 800be3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be40:	9b06      	ldr	r3, [sp, #24]
 800be42:	2b01      	cmp	r3, #1
 800be44:	f77f ae38 	ble.w	800bab8 <_dtoa_r+0x790>
 800be48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800be4a:	9307      	str	r3, [sp, #28]
 800be4c:	e64c      	b.n	800bae8 <_dtoa_r+0x7c0>
 800be4e:	9b02      	ldr	r3, [sp, #8]
 800be50:	2b00      	cmp	r3, #0
 800be52:	dc03      	bgt.n	800be5c <_dtoa_r+0xb34>
 800be54:	9b06      	ldr	r3, [sp, #24]
 800be56:	2b02      	cmp	r3, #2
 800be58:	f73f aecf 	bgt.w	800bbfa <_dtoa_r+0x8d2>
 800be5c:	465d      	mov	r5, fp
 800be5e:	4639      	mov	r1, r7
 800be60:	9804      	ldr	r0, [sp, #16]
 800be62:	f7ff f9cf 	bl	800b204 <quorem>
 800be66:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800be6a:	9a02      	ldr	r2, [sp, #8]
 800be6c:	f805 8b01 	strb.w	r8, [r5], #1
 800be70:	eba5 030b 	sub.w	r3, r5, fp
 800be74:	429a      	cmp	r2, r3
 800be76:	ddb1      	ble.n	800bddc <_dtoa_r+0xab4>
 800be78:	2300      	movs	r3, #0
 800be7a:	220a      	movs	r2, #10
 800be7c:	9904      	ldr	r1, [sp, #16]
 800be7e:	4620      	mov	r0, r4
 800be80:	f000 f86f 	bl	800bf62 <__multadd>
 800be84:	9004      	str	r0, [sp, #16]
 800be86:	e7ea      	b.n	800be5e <_dtoa_r+0xb36>
 800be88:	080237a4 	.word	0x080237a4
 800be8c:	080237c8 	.word	0x080237c8

0800be90 <_localeconv_r>:
 800be90:	4b04      	ldr	r3, [pc, #16]	; (800bea4 <_localeconv_r+0x14>)
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	6a18      	ldr	r0, [r3, #32]
 800be96:	4b04      	ldr	r3, [pc, #16]	; (800bea8 <_localeconv_r+0x18>)
 800be98:	2800      	cmp	r0, #0
 800be9a:	bf08      	it	eq
 800be9c:	4618      	moveq	r0, r3
 800be9e:	30f0      	adds	r0, #240	; 0xf0
 800bea0:	4770      	bx	lr
 800bea2:	bf00      	nop
 800bea4:	20000b04 	.word	0x20000b04
 800bea8:	20000b68 	.word	0x20000b68

0800beac <memchr>:
 800beac:	b2c9      	uxtb	r1, r1
 800beae:	4402      	add	r2, r0
 800beb0:	b510      	push	{r4, lr}
 800beb2:	4290      	cmp	r0, r2
 800beb4:	4603      	mov	r3, r0
 800beb6:	d101      	bne.n	800bebc <memchr+0x10>
 800beb8:	2300      	movs	r3, #0
 800beba:	e003      	b.n	800bec4 <memchr+0x18>
 800bebc:	781c      	ldrb	r4, [r3, #0]
 800bebe:	3001      	adds	r0, #1
 800bec0:	428c      	cmp	r4, r1
 800bec2:	d1f6      	bne.n	800beb2 <memchr+0x6>
 800bec4:	4618      	mov	r0, r3
 800bec6:	bd10      	pop	{r4, pc}

0800bec8 <__malloc_lock>:
 800bec8:	4770      	bx	lr

0800beca <__malloc_unlock>:
 800beca:	4770      	bx	lr

0800becc <_Balloc>:
 800becc:	b570      	push	{r4, r5, r6, lr}
 800bece:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bed0:	4604      	mov	r4, r0
 800bed2:	460e      	mov	r6, r1
 800bed4:	b93d      	cbnz	r5, 800bee6 <_Balloc+0x1a>
 800bed6:	2010      	movs	r0, #16
 800bed8:	f7fe fc42 	bl	800a760 <malloc>
 800bedc:	6260      	str	r0, [r4, #36]	; 0x24
 800bede:	6005      	str	r5, [r0, #0]
 800bee0:	60c5      	str	r5, [r0, #12]
 800bee2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bee6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800bee8:	68eb      	ldr	r3, [r5, #12]
 800beea:	b183      	cbz	r3, 800bf0e <_Balloc+0x42>
 800beec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800beee:	68db      	ldr	r3, [r3, #12]
 800bef0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800bef4:	b9b8      	cbnz	r0, 800bf26 <_Balloc+0x5a>
 800bef6:	2101      	movs	r1, #1
 800bef8:	4620      	mov	r0, r4
 800befa:	fa01 f506 	lsl.w	r5, r1, r6
 800befe:	1d6a      	adds	r2, r5, #5
 800bf00:	0092      	lsls	r2, r2, #2
 800bf02:	f000 fac2 	bl	800c48a <_calloc_r>
 800bf06:	b160      	cbz	r0, 800bf22 <_Balloc+0x56>
 800bf08:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800bf0c:	e00e      	b.n	800bf2c <_Balloc+0x60>
 800bf0e:	2221      	movs	r2, #33	; 0x21
 800bf10:	2104      	movs	r1, #4
 800bf12:	4620      	mov	r0, r4
 800bf14:	f000 fab9 	bl	800c48a <_calloc_r>
 800bf18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf1a:	60e8      	str	r0, [r5, #12]
 800bf1c:	68db      	ldr	r3, [r3, #12]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d1e4      	bne.n	800beec <_Balloc+0x20>
 800bf22:	2000      	movs	r0, #0
 800bf24:	bd70      	pop	{r4, r5, r6, pc}
 800bf26:	6802      	ldr	r2, [r0, #0]
 800bf28:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bf32:	e7f7      	b.n	800bf24 <_Balloc+0x58>

0800bf34 <_Bfree>:
 800bf34:	b570      	push	{r4, r5, r6, lr}
 800bf36:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800bf38:	4606      	mov	r6, r0
 800bf3a:	460d      	mov	r5, r1
 800bf3c:	b93c      	cbnz	r4, 800bf4e <_Bfree+0x1a>
 800bf3e:	2010      	movs	r0, #16
 800bf40:	f7fe fc0e 	bl	800a760 <malloc>
 800bf44:	6270      	str	r0, [r6, #36]	; 0x24
 800bf46:	6004      	str	r4, [r0, #0]
 800bf48:	60c4      	str	r4, [r0, #12]
 800bf4a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bf4e:	b13d      	cbz	r5, 800bf60 <_Bfree+0x2c>
 800bf50:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bf52:	686a      	ldr	r2, [r5, #4]
 800bf54:	68db      	ldr	r3, [r3, #12]
 800bf56:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bf5a:	6029      	str	r1, [r5, #0]
 800bf5c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800bf60:	bd70      	pop	{r4, r5, r6, pc}

0800bf62 <__multadd>:
 800bf62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf66:	f101 0c14 	add.w	ip, r1, #20
 800bf6a:	461f      	mov	r7, r3
 800bf6c:	4606      	mov	r6, r0
 800bf6e:	460c      	mov	r4, r1
 800bf70:	690d      	ldr	r5, [r1, #16]
 800bf72:	2300      	movs	r3, #0
 800bf74:	f8dc 0000 	ldr.w	r0, [ip]
 800bf78:	3301      	adds	r3, #1
 800bf7a:	b281      	uxth	r1, r0
 800bf7c:	429d      	cmp	r5, r3
 800bf7e:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800bf82:	fb02 7101 	mla	r1, r2, r1, r7
 800bf86:	ea4f 4711 	mov.w	r7, r1, lsr #16
 800bf8a:	b289      	uxth	r1, r1
 800bf8c:	fb02 7000 	mla	r0, r2, r0, r7
 800bf90:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800bf94:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800bf98:	f84c 1b04 	str.w	r1, [ip], #4
 800bf9c:	dcea      	bgt.n	800bf74 <__multadd+0x12>
 800bf9e:	b1d7      	cbz	r7, 800bfd6 <__multadd+0x74>
 800bfa0:	68a3      	ldr	r3, [r4, #8]
 800bfa2:	42ab      	cmp	r3, r5
 800bfa4:	dc12      	bgt.n	800bfcc <__multadd+0x6a>
 800bfa6:	6861      	ldr	r1, [r4, #4]
 800bfa8:	4630      	mov	r0, r6
 800bfaa:	3101      	adds	r1, #1
 800bfac:	f7ff ff8e 	bl	800becc <_Balloc>
 800bfb0:	6922      	ldr	r2, [r4, #16]
 800bfb2:	4680      	mov	r8, r0
 800bfb4:	f104 010c 	add.w	r1, r4, #12
 800bfb8:	3202      	adds	r2, #2
 800bfba:	300c      	adds	r0, #12
 800bfbc:	0092      	lsls	r2, r2, #2
 800bfbe:	f7fe fbd7 	bl	800a770 <memcpy>
 800bfc2:	4621      	mov	r1, r4
 800bfc4:	4644      	mov	r4, r8
 800bfc6:	4630      	mov	r0, r6
 800bfc8:	f7ff ffb4 	bl	800bf34 <_Bfree>
 800bfcc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bfd0:	3501      	adds	r5, #1
 800bfd2:	615f      	str	r7, [r3, #20]
 800bfd4:	6125      	str	r5, [r4, #16]
 800bfd6:	4620      	mov	r0, r4
 800bfd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bfdc <__hi0bits>:
 800bfdc:	0c02      	lsrs	r2, r0, #16
 800bfde:	4603      	mov	r3, r0
 800bfe0:	0412      	lsls	r2, r2, #16
 800bfe2:	b9b2      	cbnz	r2, 800c012 <__hi0bits+0x36>
 800bfe4:	0403      	lsls	r3, r0, #16
 800bfe6:	2010      	movs	r0, #16
 800bfe8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800bfec:	bf04      	itt	eq
 800bfee:	021b      	lsleq	r3, r3, #8
 800bff0:	3008      	addeq	r0, #8
 800bff2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800bff6:	bf04      	itt	eq
 800bff8:	011b      	lsleq	r3, r3, #4
 800bffa:	3004      	addeq	r0, #4
 800bffc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c000:	bf04      	itt	eq
 800c002:	009b      	lsleq	r3, r3, #2
 800c004:	3002      	addeq	r0, #2
 800c006:	2b00      	cmp	r3, #0
 800c008:	db06      	blt.n	800c018 <__hi0bits+0x3c>
 800c00a:	005b      	lsls	r3, r3, #1
 800c00c:	d503      	bpl.n	800c016 <__hi0bits+0x3a>
 800c00e:	3001      	adds	r0, #1
 800c010:	4770      	bx	lr
 800c012:	2000      	movs	r0, #0
 800c014:	e7e8      	b.n	800bfe8 <__hi0bits+0xc>
 800c016:	2020      	movs	r0, #32
 800c018:	4770      	bx	lr

0800c01a <__lo0bits>:
 800c01a:	6803      	ldr	r3, [r0, #0]
 800c01c:	4601      	mov	r1, r0
 800c01e:	f013 0207 	ands.w	r2, r3, #7
 800c022:	d00b      	beq.n	800c03c <__lo0bits+0x22>
 800c024:	07da      	lsls	r2, r3, #31
 800c026:	d423      	bmi.n	800c070 <__lo0bits+0x56>
 800c028:	0798      	lsls	r0, r3, #30
 800c02a:	bf47      	ittee	mi
 800c02c:	085b      	lsrmi	r3, r3, #1
 800c02e:	2001      	movmi	r0, #1
 800c030:	089b      	lsrpl	r3, r3, #2
 800c032:	2002      	movpl	r0, #2
 800c034:	bf4c      	ite	mi
 800c036:	600b      	strmi	r3, [r1, #0]
 800c038:	600b      	strpl	r3, [r1, #0]
 800c03a:	4770      	bx	lr
 800c03c:	b298      	uxth	r0, r3
 800c03e:	b9a8      	cbnz	r0, 800c06c <__lo0bits+0x52>
 800c040:	0c1b      	lsrs	r3, r3, #16
 800c042:	2010      	movs	r0, #16
 800c044:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c048:	bf04      	itt	eq
 800c04a:	0a1b      	lsreq	r3, r3, #8
 800c04c:	3008      	addeq	r0, #8
 800c04e:	071a      	lsls	r2, r3, #28
 800c050:	bf04      	itt	eq
 800c052:	091b      	lsreq	r3, r3, #4
 800c054:	3004      	addeq	r0, #4
 800c056:	079a      	lsls	r2, r3, #30
 800c058:	bf04      	itt	eq
 800c05a:	089b      	lsreq	r3, r3, #2
 800c05c:	3002      	addeq	r0, #2
 800c05e:	07da      	lsls	r2, r3, #31
 800c060:	d402      	bmi.n	800c068 <__lo0bits+0x4e>
 800c062:	085b      	lsrs	r3, r3, #1
 800c064:	d006      	beq.n	800c074 <__lo0bits+0x5a>
 800c066:	3001      	adds	r0, #1
 800c068:	600b      	str	r3, [r1, #0]
 800c06a:	4770      	bx	lr
 800c06c:	4610      	mov	r0, r2
 800c06e:	e7e9      	b.n	800c044 <__lo0bits+0x2a>
 800c070:	2000      	movs	r0, #0
 800c072:	4770      	bx	lr
 800c074:	2020      	movs	r0, #32
 800c076:	4770      	bx	lr

0800c078 <__i2b>:
 800c078:	b510      	push	{r4, lr}
 800c07a:	460c      	mov	r4, r1
 800c07c:	2101      	movs	r1, #1
 800c07e:	f7ff ff25 	bl	800becc <_Balloc>
 800c082:	2201      	movs	r2, #1
 800c084:	6144      	str	r4, [r0, #20]
 800c086:	6102      	str	r2, [r0, #16]
 800c088:	bd10      	pop	{r4, pc}

0800c08a <__multiply>:
 800c08a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c08e:	4614      	mov	r4, r2
 800c090:	690a      	ldr	r2, [r1, #16]
 800c092:	4688      	mov	r8, r1
 800c094:	6923      	ldr	r3, [r4, #16]
 800c096:	429a      	cmp	r2, r3
 800c098:	bfbe      	ittt	lt
 800c09a:	460b      	movlt	r3, r1
 800c09c:	46a0      	movlt	r8, r4
 800c09e:	461c      	movlt	r4, r3
 800c0a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c0a4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c0a8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c0ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c0b0:	eb07 0609 	add.w	r6, r7, r9
 800c0b4:	42b3      	cmp	r3, r6
 800c0b6:	bfb8      	it	lt
 800c0b8:	3101      	addlt	r1, #1
 800c0ba:	f7ff ff07 	bl	800becc <_Balloc>
 800c0be:	f100 0514 	add.w	r5, r0, #20
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800c0c8:	462b      	mov	r3, r5
 800c0ca:	4573      	cmp	r3, lr
 800c0cc:	d316      	bcc.n	800c0fc <__multiply+0x72>
 800c0ce:	f108 0114 	add.w	r1, r8, #20
 800c0d2:	f104 0214 	add.w	r2, r4, #20
 800c0d6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800c0da:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800c0de:	9300      	str	r3, [sp, #0]
 800c0e0:	9b00      	ldr	r3, [sp, #0]
 800c0e2:	9201      	str	r2, [sp, #4]
 800c0e4:	4293      	cmp	r3, r2
 800c0e6:	d80c      	bhi.n	800c102 <__multiply+0x78>
 800c0e8:	2e00      	cmp	r6, #0
 800c0ea:	dd03      	ble.n	800c0f4 <__multiply+0x6a>
 800c0ec:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d05d      	beq.n	800c1b0 <__multiply+0x126>
 800c0f4:	6106      	str	r6, [r0, #16]
 800c0f6:	b003      	add	sp, #12
 800c0f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0fc:	f843 2b04 	str.w	r2, [r3], #4
 800c100:	e7e3      	b.n	800c0ca <__multiply+0x40>
 800c102:	f8b2 b000 	ldrh.w	fp, [r2]
 800c106:	f1bb 0f00 	cmp.w	fp, #0
 800c10a:	d023      	beq.n	800c154 <__multiply+0xca>
 800c10c:	4689      	mov	r9, r1
 800c10e:	46ac      	mov	ip, r5
 800c110:	f04f 0800 	mov.w	r8, #0
 800c114:	f859 4b04 	ldr.w	r4, [r9], #4
 800c118:	f8dc a000 	ldr.w	sl, [ip]
 800c11c:	b2a3      	uxth	r3, r4
 800c11e:	454f      	cmp	r7, r9
 800c120:	fa1f fa8a 	uxth.w	sl, sl
 800c124:	fb0b a303 	mla	r3, fp, r3, sl
 800c128:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c12c:	f8dc 4000 	ldr.w	r4, [ip]
 800c130:	4443      	add	r3, r8
 800c132:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c136:	fb0b 840a 	mla	r4, fp, sl, r8
 800c13a:	46e2      	mov	sl, ip
 800c13c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800c140:	b29b      	uxth	r3, r3
 800c142:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c146:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c14a:	f84a 3b04 	str.w	r3, [sl], #4
 800c14e:	d82b      	bhi.n	800c1a8 <__multiply+0x11e>
 800c150:	f8cc 8004 	str.w	r8, [ip, #4]
 800c154:	9b01      	ldr	r3, [sp, #4]
 800c156:	3204      	adds	r2, #4
 800c158:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800c15c:	f1ba 0f00 	cmp.w	sl, #0
 800c160:	d020      	beq.n	800c1a4 <__multiply+0x11a>
 800c162:	682b      	ldr	r3, [r5, #0]
 800c164:	4689      	mov	r9, r1
 800c166:	46a8      	mov	r8, r5
 800c168:	f04f 0b00 	mov.w	fp, #0
 800c16c:	f8b9 c000 	ldrh.w	ip, [r9]
 800c170:	b29b      	uxth	r3, r3
 800c172:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800c176:	fb0a 440c 	mla	r4, sl, ip, r4
 800c17a:	46c4      	mov	ip, r8
 800c17c:	445c      	add	r4, fp
 800c17e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c182:	f84c 3b04 	str.w	r3, [ip], #4
 800c186:	f859 3b04 	ldr.w	r3, [r9], #4
 800c18a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800c18e:	0c1b      	lsrs	r3, r3, #16
 800c190:	454f      	cmp	r7, r9
 800c192:	fb0a b303 	mla	r3, sl, r3, fp
 800c196:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800c19a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800c19e:	d805      	bhi.n	800c1ac <__multiply+0x122>
 800c1a0:	f8c8 3004 	str.w	r3, [r8, #4]
 800c1a4:	3504      	adds	r5, #4
 800c1a6:	e79b      	b.n	800c0e0 <__multiply+0x56>
 800c1a8:	46d4      	mov	ip, sl
 800c1aa:	e7b3      	b.n	800c114 <__multiply+0x8a>
 800c1ac:	46e0      	mov	r8, ip
 800c1ae:	e7dd      	b.n	800c16c <__multiply+0xe2>
 800c1b0:	3e01      	subs	r6, #1
 800c1b2:	e799      	b.n	800c0e8 <__multiply+0x5e>

0800c1b4 <__pow5mult>:
 800c1b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1b8:	4615      	mov	r5, r2
 800c1ba:	f012 0203 	ands.w	r2, r2, #3
 800c1be:	4606      	mov	r6, r0
 800c1c0:	460f      	mov	r7, r1
 800c1c2:	d007      	beq.n	800c1d4 <__pow5mult+0x20>
 800c1c4:	3a01      	subs	r2, #1
 800c1c6:	4c21      	ldr	r4, [pc, #132]	; (800c24c <__pow5mult+0x98>)
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c1ce:	f7ff fec8 	bl	800bf62 <__multadd>
 800c1d2:	4607      	mov	r7, r0
 800c1d4:	10ad      	asrs	r5, r5, #2
 800c1d6:	d035      	beq.n	800c244 <__pow5mult+0x90>
 800c1d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c1da:	b93c      	cbnz	r4, 800c1ec <__pow5mult+0x38>
 800c1dc:	2010      	movs	r0, #16
 800c1de:	f7fe fabf 	bl	800a760 <malloc>
 800c1e2:	6270      	str	r0, [r6, #36]	; 0x24
 800c1e4:	6004      	str	r4, [r0, #0]
 800c1e6:	60c4      	str	r4, [r0, #12]
 800c1e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c1ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c1f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c1f4:	b94c      	cbnz	r4, 800c20a <__pow5mult+0x56>
 800c1f6:	f240 2171 	movw	r1, #625	; 0x271
 800c1fa:	4630      	mov	r0, r6
 800c1fc:	f7ff ff3c 	bl	800c078 <__i2b>
 800c200:	2300      	movs	r3, #0
 800c202:	4604      	mov	r4, r0
 800c204:	f8c8 0008 	str.w	r0, [r8, #8]
 800c208:	6003      	str	r3, [r0, #0]
 800c20a:	f04f 0800 	mov.w	r8, #0
 800c20e:	07eb      	lsls	r3, r5, #31
 800c210:	d50a      	bpl.n	800c228 <__pow5mult+0x74>
 800c212:	4639      	mov	r1, r7
 800c214:	4622      	mov	r2, r4
 800c216:	4630      	mov	r0, r6
 800c218:	f7ff ff37 	bl	800c08a <__multiply>
 800c21c:	4681      	mov	r9, r0
 800c21e:	4639      	mov	r1, r7
 800c220:	4630      	mov	r0, r6
 800c222:	464f      	mov	r7, r9
 800c224:	f7ff fe86 	bl	800bf34 <_Bfree>
 800c228:	106d      	asrs	r5, r5, #1
 800c22a:	d00b      	beq.n	800c244 <__pow5mult+0x90>
 800c22c:	6820      	ldr	r0, [r4, #0]
 800c22e:	b938      	cbnz	r0, 800c240 <__pow5mult+0x8c>
 800c230:	4622      	mov	r2, r4
 800c232:	4621      	mov	r1, r4
 800c234:	4630      	mov	r0, r6
 800c236:	f7ff ff28 	bl	800c08a <__multiply>
 800c23a:	6020      	str	r0, [r4, #0]
 800c23c:	f8c0 8000 	str.w	r8, [r0]
 800c240:	4604      	mov	r4, r0
 800c242:	e7e4      	b.n	800c20e <__pow5mult+0x5a>
 800c244:	4638      	mov	r0, r7
 800c246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c24a:	bf00      	nop
 800c24c:	080238c8 	.word	0x080238c8

0800c250 <__lshift>:
 800c250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c254:	460c      	mov	r4, r1
 800c256:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c25a:	4607      	mov	r7, r0
 800c25c:	4616      	mov	r6, r2
 800c25e:	6923      	ldr	r3, [r4, #16]
 800c260:	6849      	ldr	r1, [r1, #4]
 800c262:	eb0a 0903 	add.w	r9, sl, r3
 800c266:	68a3      	ldr	r3, [r4, #8]
 800c268:	f109 0501 	add.w	r5, r9, #1
 800c26c:	42ab      	cmp	r3, r5
 800c26e:	db32      	blt.n	800c2d6 <__lshift+0x86>
 800c270:	4638      	mov	r0, r7
 800c272:	f7ff fe2b 	bl	800becc <_Balloc>
 800c276:	2300      	movs	r3, #0
 800c278:	4680      	mov	r8, r0
 800c27a:	f100 0114 	add.w	r1, r0, #20
 800c27e:	461a      	mov	r2, r3
 800c280:	4553      	cmp	r3, sl
 800c282:	db2b      	blt.n	800c2dc <__lshift+0x8c>
 800c284:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c288:	f104 0314 	add.w	r3, r4, #20
 800c28c:	6920      	ldr	r0, [r4, #16]
 800c28e:	f016 021f 	ands.w	r2, r6, #31
 800c292:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c296:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c29a:	d025      	beq.n	800c2e8 <__lshift+0x98>
 800c29c:	f1c2 0e20 	rsb	lr, r2, #32
 800c2a0:	2000      	movs	r0, #0
 800c2a2:	681e      	ldr	r6, [r3, #0]
 800c2a4:	468a      	mov	sl, r1
 800c2a6:	4096      	lsls	r6, r2
 800c2a8:	4330      	orrs	r0, r6
 800c2aa:	f84a 0b04 	str.w	r0, [sl], #4
 800c2ae:	f853 0b04 	ldr.w	r0, [r3], #4
 800c2b2:	459c      	cmp	ip, r3
 800c2b4:	fa20 f00e 	lsr.w	r0, r0, lr
 800c2b8:	d814      	bhi.n	800c2e4 <__lshift+0x94>
 800c2ba:	6048      	str	r0, [r1, #4]
 800c2bc:	b108      	cbz	r0, 800c2c2 <__lshift+0x72>
 800c2be:	f109 0502 	add.w	r5, r9, #2
 800c2c2:	3d01      	subs	r5, #1
 800c2c4:	4638      	mov	r0, r7
 800c2c6:	4621      	mov	r1, r4
 800c2c8:	f8c8 5010 	str.w	r5, [r8, #16]
 800c2cc:	f7ff fe32 	bl	800bf34 <_Bfree>
 800c2d0:	4640      	mov	r0, r8
 800c2d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2d6:	3101      	adds	r1, #1
 800c2d8:	005b      	lsls	r3, r3, #1
 800c2da:	e7c7      	b.n	800c26c <__lshift+0x1c>
 800c2dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c2e0:	3301      	adds	r3, #1
 800c2e2:	e7cd      	b.n	800c280 <__lshift+0x30>
 800c2e4:	4651      	mov	r1, sl
 800c2e6:	e7dc      	b.n	800c2a2 <__lshift+0x52>
 800c2e8:	3904      	subs	r1, #4
 800c2ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2ee:	459c      	cmp	ip, r3
 800c2f0:	f841 2f04 	str.w	r2, [r1, #4]!
 800c2f4:	d8f9      	bhi.n	800c2ea <__lshift+0x9a>
 800c2f6:	e7e4      	b.n	800c2c2 <__lshift+0x72>

0800c2f8 <__mcmp>:
 800c2f8:	6903      	ldr	r3, [r0, #16]
 800c2fa:	690a      	ldr	r2, [r1, #16]
 800c2fc:	1a9b      	subs	r3, r3, r2
 800c2fe:	b530      	push	{r4, r5, lr}
 800c300:	d10c      	bne.n	800c31c <__mcmp+0x24>
 800c302:	0092      	lsls	r2, r2, #2
 800c304:	3014      	adds	r0, #20
 800c306:	3114      	adds	r1, #20
 800c308:	1884      	adds	r4, r0, r2
 800c30a:	4411      	add	r1, r2
 800c30c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c310:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c314:	4295      	cmp	r5, r2
 800c316:	d003      	beq.n	800c320 <__mcmp+0x28>
 800c318:	d305      	bcc.n	800c326 <__mcmp+0x2e>
 800c31a:	2301      	movs	r3, #1
 800c31c:	4618      	mov	r0, r3
 800c31e:	bd30      	pop	{r4, r5, pc}
 800c320:	42a0      	cmp	r0, r4
 800c322:	d3f3      	bcc.n	800c30c <__mcmp+0x14>
 800c324:	e7fa      	b.n	800c31c <__mcmp+0x24>
 800c326:	f04f 33ff 	mov.w	r3, #4294967295
 800c32a:	e7f7      	b.n	800c31c <__mcmp+0x24>

0800c32c <__mdiff>:
 800c32c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c330:	460d      	mov	r5, r1
 800c332:	4607      	mov	r7, r0
 800c334:	4611      	mov	r1, r2
 800c336:	4614      	mov	r4, r2
 800c338:	4628      	mov	r0, r5
 800c33a:	f7ff ffdd 	bl	800c2f8 <__mcmp>
 800c33e:	1e06      	subs	r6, r0, #0
 800c340:	d108      	bne.n	800c354 <__mdiff+0x28>
 800c342:	4631      	mov	r1, r6
 800c344:	4638      	mov	r0, r7
 800c346:	f7ff fdc1 	bl	800becc <_Balloc>
 800c34a:	2301      	movs	r3, #1
 800c34c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c354:	bfa3      	ittte	ge
 800c356:	4623      	movge	r3, r4
 800c358:	462c      	movge	r4, r5
 800c35a:	2600      	movge	r6, #0
 800c35c:	2601      	movlt	r6, #1
 800c35e:	bfa8      	it	ge
 800c360:	461d      	movge	r5, r3
 800c362:	6861      	ldr	r1, [r4, #4]
 800c364:	4638      	mov	r0, r7
 800c366:	f7ff fdb1 	bl	800becc <_Balloc>
 800c36a:	f105 0914 	add.w	r9, r5, #20
 800c36e:	60c6      	str	r6, [r0, #12]
 800c370:	f104 0214 	add.w	r2, r4, #20
 800c374:	6926      	ldr	r6, [r4, #16]
 800c376:	f100 0114 	add.w	r1, r0, #20
 800c37a:	692b      	ldr	r3, [r5, #16]
 800c37c:	f04f 0e00 	mov.w	lr, #0
 800c380:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800c384:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800c388:	f852 ab04 	ldr.w	sl, [r2], #4
 800c38c:	f859 5b04 	ldr.w	r5, [r9], #4
 800c390:	fa1f f38a 	uxth.w	r3, sl
 800c394:	4694      	mov	ip, r2
 800c396:	b2ac      	uxth	r4, r5
 800c398:	45c8      	cmp	r8, r9
 800c39a:	4473      	add	r3, lr
 800c39c:	eba3 0304 	sub.w	r3, r3, r4
 800c3a0:	ea4f 4415 	mov.w	r4, r5, lsr #16
 800c3a4:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800c3a8:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800c3ac:	b29b      	uxth	r3, r3
 800c3ae:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800c3b2:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800c3b6:	f841 4b04 	str.w	r4, [r1], #4
 800c3ba:	d8e5      	bhi.n	800c388 <__mdiff+0x5c>
 800c3bc:	45bc      	cmp	ip, r7
 800c3be:	d304      	bcc.n	800c3ca <__mdiff+0x9e>
 800c3c0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800c3c4:	b183      	cbz	r3, 800c3e8 <__mdiff+0xbc>
 800c3c6:	6106      	str	r6, [r0, #16]
 800c3c8:	e7c2      	b.n	800c350 <__mdiff+0x24>
 800c3ca:	f85c 4b04 	ldr.w	r4, [ip], #4
 800c3ce:	b2a2      	uxth	r2, r4
 800c3d0:	4472      	add	r2, lr
 800c3d2:	1413      	asrs	r3, r2, #16
 800c3d4:	b292      	uxth	r2, r2
 800c3d6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800c3da:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c3de:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800c3e2:	f841 2b04 	str.w	r2, [r1], #4
 800c3e6:	e7e9      	b.n	800c3bc <__mdiff+0x90>
 800c3e8:	3e01      	subs	r6, #1
 800c3ea:	e7e9      	b.n	800c3c0 <__mdiff+0x94>

0800c3ec <__d2b>:
 800c3ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c3f0:	ec59 8b10 	vmov	r8, r9, d0
 800c3f4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800c3f8:	460e      	mov	r6, r1
 800c3fa:	2101      	movs	r1, #1
 800c3fc:	4615      	mov	r5, r2
 800c3fe:	f7ff fd65 	bl	800becc <_Balloc>
 800c402:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c406:	4607      	mov	r7, r0
 800c408:	bb34      	cbnz	r4, 800c458 <__d2b+0x6c>
 800c40a:	9301      	str	r3, [sp, #4]
 800c40c:	f1b8 0300 	subs.w	r3, r8, #0
 800c410:	d027      	beq.n	800c462 <__d2b+0x76>
 800c412:	a802      	add	r0, sp, #8
 800c414:	f840 3d08 	str.w	r3, [r0, #-8]!
 800c418:	f7ff fdff 	bl	800c01a <__lo0bits>
 800c41c:	9900      	ldr	r1, [sp, #0]
 800c41e:	b1f0      	cbz	r0, 800c45e <__d2b+0x72>
 800c420:	9a01      	ldr	r2, [sp, #4]
 800c422:	f1c0 0320 	rsb	r3, r0, #32
 800c426:	fa02 f303 	lsl.w	r3, r2, r3
 800c42a:	40c2      	lsrs	r2, r0
 800c42c:	430b      	orrs	r3, r1
 800c42e:	9201      	str	r2, [sp, #4]
 800c430:	617b      	str	r3, [r7, #20]
 800c432:	9b01      	ldr	r3, [sp, #4]
 800c434:	2b00      	cmp	r3, #0
 800c436:	61bb      	str	r3, [r7, #24]
 800c438:	bf14      	ite	ne
 800c43a:	2102      	movne	r1, #2
 800c43c:	2101      	moveq	r1, #1
 800c43e:	6139      	str	r1, [r7, #16]
 800c440:	b1c4      	cbz	r4, 800c474 <__d2b+0x88>
 800c442:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800c446:	4404      	add	r4, r0
 800c448:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c44c:	6034      	str	r4, [r6, #0]
 800c44e:	6028      	str	r0, [r5, #0]
 800c450:	4638      	mov	r0, r7
 800c452:	b003      	add	sp, #12
 800c454:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c458:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c45c:	e7d5      	b.n	800c40a <__d2b+0x1e>
 800c45e:	6179      	str	r1, [r7, #20]
 800c460:	e7e7      	b.n	800c432 <__d2b+0x46>
 800c462:	a801      	add	r0, sp, #4
 800c464:	f7ff fdd9 	bl	800c01a <__lo0bits>
 800c468:	9b01      	ldr	r3, [sp, #4]
 800c46a:	2101      	movs	r1, #1
 800c46c:	3020      	adds	r0, #32
 800c46e:	617b      	str	r3, [r7, #20]
 800c470:	6139      	str	r1, [r7, #16]
 800c472:	e7e5      	b.n	800c440 <__d2b+0x54>
 800c474:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c478:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800c47c:	6030      	str	r0, [r6, #0]
 800c47e:	6918      	ldr	r0, [r3, #16]
 800c480:	f7ff fdac 	bl	800bfdc <__hi0bits>
 800c484:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800c488:	e7e1      	b.n	800c44e <__d2b+0x62>

0800c48a <_calloc_r>:
 800c48a:	b538      	push	{r3, r4, r5, lr}
 800c48c:	fb02 f401 	mul.w	r4, r2, r1
 800c490:	4621      	mov	r1, r4
 800c492:	f7fe f9cf 	bl	800a834 <_malloc_r>
 800c496:	4605      	mov	r5, r0
 800c498:	b118      	cbz	r0, 800c4a2 <_calloc_r+0x18>
 800c49a:	4622      	mov	r2, r4
 800c49c:	2100      	movs	r1, #0
 800c49e:	f7fe f972 	bl	800a786 <memset>
 800c4a2:	4628      	mov	r0, r5
 800c4a4:	bd38      	pop	{r3, r4, r5, pc}

0800c4a6 <_realloc_r>:
 800c4a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4a8:	4607      	mov	r7, r0
 800c4aa:	4614      	mov	r4, r2
 800c4ac:	460e      	mov	r6, r1
 800c4ae:	b921      	cbnz	r1, 800c4ba <_realloc_r+0x14>
 800c4b0:	4611      	mov	r1, r2
 800c4b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c4b6:	f7fe b9bd 	b.w	800a834 <_malloc_r>
 800c4ba:	b922      	cbnz	r2, 800c4c6 <_realloc_r+0x20>
 800c4bc:	4625      	mov	r5, r4
 800c4be:	f7fe f96b 	bl	800a798 <_free_r>
 800c4c2:	4628      	mov	r0, r5
 800c4c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4c6:	f000 f992 	bl	800c7ee <_malloc_usable_size_r>
 800c4ca:	42a0      	cmp	r0, r4
 800c4cc:	d20f      	bcs.n	800c4ee <_realloc_r+0x48>
 800c4ce:	4621      	mov	r1, r4
 800c4d0:	4638      	mov	r0, r7
 800c4d2:	f7fe f9af 	bl	800a834 <_malloc_r>
 800c4d6:	4605      	mov	r5, r0
 800c4d8:	2800      	cmp	r0, #0
 800c4da:	d0f2      	beq.n	800c4c2 <_realloc_r+0x1c>
 800c4dc:	4631      	mov	r1, r6
 800c4de:	4622      	mov	r2, r4
 800c4e0:	f7fe f946 	bl	800a770 <memcpy>
 800c4e4:	4631      	mov	r1, r6
 800c4e6:	4638      	mov	r0, r7
 800c4e8:	f7fe f956 	bl	800a798 <_free_r>
 800c4ec:	e7e9      	b.n	800c4c2 <_realloc_r+0x1c>
 800c4ee:	4635      	mov	r5, r6
 800c4f0:	e7e7      	b.n	800c4c2 <_realloc_r+0x1c>

0800c4f2 <__ssputs_r>:
 800c4f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4f6:	688e      	ldr	r6, [r1, #8]
 800c4f8:	4682      	mov	sl, r0
 800c4fa:	460c      	mov	r4, r1
 800c4fc:	4690      	mov	r8, r2
 800c4fe:	429e      	cmp	r6, r3
 800c500:	4699      	mov	r9, r3
 800c502:	d837      	bhi.n	800c574 <__ssputs_r+0x82>
 800c504:	898a      	ldrh	r2, [r1, #12]
 800c506:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c50a:	d031      	beq.n	800c570 <__ssputs_r+0x7e>
 800c50c:	6825      	ldr	r5, [r4, #0]
 800c50e:	2302      	movs	r3, #2
 800c510:	6909      	ldr	r1, [r1, #16]
 800c512:	1a6f      	subs	r7, r5, r1
 800c514:	6965      	ldr	r5, [r4, #20]
 800c516:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c51a:	fb95 f5f3 	sdiv	r5, r5, r3
 800c51e:	f109 0301 	add.w	r3, r9, #1
 800c522:	443b      	add	r3, r7
 800c524:	429d      	cmp	r5, r3
 800c526:	bf38      	it	cc
 800c528:	461d      	movcc	r5, r3
 800c52a:	0553      	lsls	r3, r2, #21
 800c52c:	d530      	bpl.n	800c590 <__ssputs_r+0x9e>
 800c52e:	4629      	mov	r1, r5
 800c530:	f7fe f980 	bl	800a834 <_malloc_r>
 800c534:	4606      	mov	r6, r0
 800c536:	b950      	cbnz	r0, 800c54e <__ssputs_r+0x5c>
 800c538:	230c      	movs	r3, #12
 800c53a:	f04f 30ff 	mov.w	r0, #4294967295
 800c53e:	f8ca 3000 	str.w	r3, [sl]
 800c542:	89a3      	ldrh	r3, [r4, #12]
 800c544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c548:	81a3      	strh	r3, [r4, #12]
 800c54a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c54e:	463a      	mov	r2, r7
 800c550:	6921      	ldr	r1, [r4, #16]
 800c552:	f7fe f90d 	bl	800a770 <memcpy>
 800c556:	89a3      	ldrh	r3, [r4, #12]
 800c558:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c55c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c560:	81a3      	strh	r3, [r4, #12]
 800c562:	6126      	str	r6, [r4, #16]
 800c564:	443e      	add	r6, r7
 800c566:	6165      	str	r5, [r4, #20]
 800c568:	1bed      	subs	r5, r5, r7
 800c56a:	6026      	str	r6, [r4, #0]
 800c56c:	464e      	mov	r6, r9
 800c56e:	60a5      	str	r5, [r4, #8]
 800c570:	454e      	cmp	r6, r9
 800c572:	d900      	bls.n	800c576 <__ssputs_r+0x84>
 800c574:	464e      	mov	r6, r9
 800c576:	4632      	mov	r2, r6
 800c578:	4641      	mov	r1, r8
 800c57a:	6820      	ldr	r0, [r4, #0]
 800c57c:	f000 f91e 	bl	800c7bc <memmove>
 800c580:	68a3      	ldr	r3, [r4, #8]
 800c582:	2000      	movs	r0, #0
 800c584:	1b9b      	subs	r3, r3, r6
 800c586:	60a3      	str	r3, [r4, #8]
 800c588:	6823      	ldr	r3, [r4, #0]
 800c58a:	441e      	add	r6, r3
 800c58c:	6026      	str	r6, [r4, #0]
 800c58e:	e7dc      	b.n	800c54a <__ssputs_r+0x58>
 800c590:	462a      	mov	r2, r5
 800c592:	f7ff ff88 	bl	800c4a6 <_realloc_r>
 800c596:	4606      	mov	r6, r0
 800c598:	2800      	cmp	r0, #0
 800c59a:	d1e2      	bne.n	800c562 <__ssputs_r+0x70>
 800c59c:	6921      	ldr	r1, [r4, #16]
 800c59e:	4650      	mov	r0, sl
 800c5a0:	f7fe f8fa 	bl	800a798 <_free_r>
 800c5a4:	e7c8      	b.n	800c538 <__ssputs_r+0x46>
	...

0800c5a8 <_svfiprintf_r>:
 800c5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5ac:	461d      	mov	r5, r3
 800c5ae:	898b      	ldrh	r3, [r1, #12]
 800c5b0:	b09d      	sub	sp, #116	; 0x74
 800c5b2:	4680      	mov	r8, r0
 800c5b4:	061f      	lsls	r7, r3, #24
 800c5b6:	460c      	mov	r4, r1
 800c5b8:	4616      	mov	r6, r2
 800c5ba:	d50f      	bpl.n	800c5dc <_svfiprintf_r+0x34>
 800c5bc:	690b      	ldr	r3, [r1, #16]
 800c5be:	b96b      	cbnz	r3, 800c5dc <_svfiprintf_r+0x34>
 800c5c0:	2140      	movs	r1, #64	; 0x40
 800c5c2:	f7fe f937 	bl	800a834 <_malloc_r>
 800c5c6:	6020      	str	r0, [r4, #0]
 800c5c8:	6120      	str	r0, [r4, #16]
 800c5ca:	b928      	cbnz	r0, 800c5d8 <_svfiprintf_r+0x30>
 800c5cc:	230c      	movs	r3, #12
 800c5ce:	f8c8 3000 	str.w	r3, [r8]
 800c5d2:	f04f 30ff 	mov.w	r0, #4294967295
 800c5d6:	e0c8      	b.n	800c76a <_svfiprintf_r+0x1c2>
 800c5d8:	2340      	movs	r3, #64	; 0x40
 800c5da:	6163      	str	r3, [r4, #20]
 800c5dc:	2300      	movs	r3, #0
 800c5de:	f04f 0b01 	mov.w	fp, #1
 800c5e2:	9503      	str	r5, [sp, #12]
 800c5e4:	9309      	str	r3, [sp, #36]	; 0x24
 800c5e6:	2320      	movs	r3, #32
 800c5e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c5ec:	2330      	movs	r3, #48	; 0x30
 800c5ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c5f2:	4637      	mov	r7, r6
 800c5f4:	463d      	mov	r5, r7
 800c5f6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c5fa:	b10b      	cbz	r3, 800c600 <_svfiprintf_r+0x58>
 800c5fc:	2b25      	cmp	r3, #37	; 0x25
 800c5fe:	d13e      	bne.n	800c67e <_svfiprintf_r+0xd6>
 800c600:	ebb7 0a06 	subs.w	sl, r7, r6
 800c604:	d00b      	beq.n	800c61e <_svfiprintf_r+0x76>
 800c606:	4653      	mov	r3, sl
 800c608:	4632      	mov	r2, r6
 800c60a:	4621      	mov	r1, r4
 800c60c:	4640      	mov	r0, r8
 800c60e:	f7ff ff70 	bl	800c4f2 <__ssputs_r>
 800c612:	3001      	adds	r0, #1
 800c614:	f000 80a4 	beq.w	800c760 <_svfiprintf_r+0x1b8>
 800c618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c61a:	4453      	add	r3, sl
 800c61c:	9309      	str	r3, [sp, #36]	; 0x24
 800c61e:	783b      	ldrb	r3, [r7, #0]
 800c620:	2b00      	cmp	r3, #0
 800c622:	f000 809d 	beq.w	800c760 <_svfiprintf_r+0x1b8>
 800c626:	2300      	movs	r3, #0
 800c628:	f04f 32ff 	mov.w	r2, #4294967295
 800c62c:	9304      	str	r3, [sp, #16]
 800c62e:	9307      	str	r3, [sp, #28]
 800c630:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c634:	931a      	str	r3, [sp, #104]	; 0x68
 800c636:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c63a:	462f      	mov	r7, r5
 800c63c:	2205      	movs	r2, #5
 800c63e:	4851      	ldr	r0, [pc, #324]	; (800c784 <_svfiprintf_r+0x1dc>)
 800c640:	f817 1b01 	ldrb.w	r1, [r7], #1
 800c644:	f7ff fc32 	bl	800beac <memchr>
 800c648:	9b04      	ldr	r3, [sp, #16]
 800c64a:	b9d0      	cbnz	r0, 800c682 <_svfiprintf_r+0xda>
 800c64c:	06d9      	lsls	r1, r3, #27
 800c64e:	bf44      	itt	mi
 800c650:	2220      	movmi	r2, #32
 800c652:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c656:	071a      	lsls	r2, r3, #28
 800c658:	bf44      	itt	mi
 800c65a:	222b      	movmi	r2, #43	; 0x2b
 800c65c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c660:	782a      	ldrb	r2, [r5, #0]
 800c662:	2a2a      	cmp	r2, #42	; 0x2a
 800c664:	d015      	beq.n	800c692 <_svfiprintf_r+0xea>
 800c666:	462f      	mov	r7, r5
 800c668:	9a07      	ldr	r2, [sp, #28]
 800c66a:	2000      	movs	r0, #0
 800c66c:	250a      	movs	r5, #10
 800c66e:	4639      	mov	r1, r7
 800c670:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c674:	3b30      	subs	r3, #48	; 0x30
 800c676:	2b09      	cmp	r3, #9
 800c678:	d94d      	bls.n	800c716 <_svfiprintf_r+0x16e>
 800c67a:	b1b8      	cbz	r0, 800c6ac <_svfiprintf_r+0x104>
 800c67c:	e00f      	b.n	800c69e <_svfiprintf_r+0xf6>
 800c67e:	462f      	mov	r7, r5
 800c680:	e7b8      	b.n	800c5f4 <_svfiprintf_r+0x4c>
 800c682:	4a40      	ldr	r2, [pc, #256]	; (800c784 <_svfiprintf_r+0x1dc>)
 800c684:	463d      	mov	r5, r7
 800c686:	1a80      	subs	r0, r0, r2
 800c688:	fa0b f000 	lsl.w	r0, fp, r0
 800c68c:	4318      	orrs	r0, r3
 800c68e:	9004      	str	r0, [sp, #16]
 800c690:	e7d3      	b.n	800c63a <_svfiprintf_r+0x92>
 800c692:	9a03      	ldr	r2, [sp, #12]
 800c694:	1d11      	adds	r1, r2, #4
 800c696:	6812      	ldr	r2, [r2, #0]
 800c698:	2a00      	cmp	r2, #0
 800c69a:	9103      	str	r1, [sp, #12]
 800c69c:	db01      	blt.n	800c6a2 <_svfiprintf_r+0xfa>
 800c69e:	9207      	str	r2, [sp, #28]
 800c6a0:	e004      	b.n	800c6ac <_svfiprintf_r+0x104>
 800c6a2:	4252      	negs	r2, r2
 800c6a4:	f043 0302 	orr.w	r3, r3, #2
 800c6a8:	9207      	str	r2, [sp, #28]
 800c6aa:	9304      	str	r3, [sp, #16]
 800c6ac:	783b      	ldrb	r3, [r7, #0]
 800c6ae:	2b2e      	cmp	r3, #46	; 0x2e
 800c6b0:	d10c      	bne.n	800c6cc <_svfiprintf_r+0x124>
 800c6b2:	787b      	ldrb	r3, [r7, #1]
 800c6b4:	2b2a      	cmp	r3, #42	; 0x2a
 800c6b6:	d133      	bne.n	800c720 <_svfiprintf_r+0x178>
 800c6b8:	9b03      	ldr	r3, [sp, #12]
 800c6ba:	3702      	adds	r7, #2
 800c6bc:	1d1a      	adds	r2, r3, #4
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	9203      	str	r2, [sp, #12]
 800c6c4:	bfb8      	it	lt
 800c6c6:	f04f 33ff 	movlt.w	r3, #4294967295
 800c6ca:	9305      	str	r3, [sp, #20]
 800c6cc:	4d2e      	ldr	r5, [pc, #184]	; (800c788 <_svfiprintf_r+0x1e0>)
 800c6ce:	2203      	movs	r2, #3
 800c6d0:	7839      	ldrb	r1, [r7, #0]
 800c6d2:	4628      	mov	r0, r5
 800c6d4:	f7ff fbea 	bl	800beac <memchr>
 800c6d8:	b138      	cbz	r0, 800c6ea <_svfiprintf_r+0x142>
 800c6da:	2340      	movs	r3, #64	; 0x40
 800c6dc:	1b40      	subs	r0, r0, r5
 800c6de:	3701      	adds	r7, #1
 800c6e0:	fa03 f000 	lsl.w	r0, r3, r0
 800c6e4:	9b04      	ldr	r3, [sp, #16]
 800c6e6:	4303      	orrs	r3, r0
 800c6e8:	9304      	str	r3, [sp, #16]
 800c6ea:	7839      	ldrb	r1, [r7, #0]
 800c6ec:	2206      	movs	r2, #6
 800c6ee:	4827      	ldr	r0, [pc, #156]	; (800c78c <_svfiprintf_r+0x1e4>)
 800c6f0:	1c7e      	adds	r6, r7, #1
 800c6f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c6f6:	f7ff fbd9 	bl	800beac <memchr>
 800c6fa:	2800      	cmp	r0, #0
 800c6fc:	d038      	beq.n	800c770 <_svfiprintf_r+0x1c8>
 800c6fe:	4b24      	ldr	r3, [pc, #144]	; (800c790 <_svfiprintf_r+0x1e8>)
 800c700:	bb13      	cbnz	r3, 800c748 <_svfiprintf_r+0x1a0>
 800c702:	9b03      	ldr	r3, [sp, #12]
 800c704:	3307      	adds	r3, #7
 800c706:	f023 0307 	bic.w	r3, r3, #7
 800c70a:	3308      	adds	r3, #8
 800c70c:	9303      	str	r3, [sp, #12]
 800c70e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c710:	444b      	add	r3, r9
 800c712:	9309      	str	r3, [sp, #36]	; 0x24
 800c714:	e76d      	b.n	800c5f2 <_svfiprintf_r+0x4a>
 800c716:	fb05 3202 	mla	r2, r5, r2, r3
 800c71a:	2001      	movs	r0, #1
 800c71c:	460f      	mov	r7, r1
 800c71e:	e7a6      	b.n	800c66e <_svfiprintf_r+0xc6>
 800c720:	2300      	movs	r3, #0
 800c722:	3701      	adds	r7, #1
 800c724:	250a      	movs	r5, #10
 800c726:	4619      	mov	r1, r3
 800c728:	9305      	str	r3, [sp, #20]
 800c72a:	4638      	mov	r0, r7
 800c72c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c730:	3a30      	subs	r2, #48	; 0x30
 800c732:	2a09      	cmp	r2, #9
 800c734:	d903      	bls.n	800c73e <_svfiprintf_r+0x196>
 800c736:	2b00      	cmp	r3, #0
 800c738:	d0c8      	beq.n	800c6cc <_svfiprintf_r+0x124>
 800c73a:	9105      	str	r1, [sp, #20]
 800c73c:	e7c6      	b.n	800c6cc <_svfiprintf_r+0x124>
 800c73e:	fb05 2101 	mla	r1, r5, r1, r2
 800c742:	2301      	movs	r3, #1
 800c744:	4607      	mov	r7, r0
 800c746:	e7f0      	b.n	800c72a <_svfiprintf_r+0x182>
 800c748:	ab03      	add	r3, sp, #12
 800c74a:	4622      	mov	r2, r4
 800c74c:	a904      	add	r1, sp, #16
 800c74e:	4640      	mov	r0, r8
 800c750:	9300      	str	r3, [sp, #0]
 800c752:	4b10      	ldr	r3, [pc, #64]	; (800c794 <_svfiprintf_r+0x1ec>)
 800c754:	f7fe f95c 	bl	800aa10 <_printf_float>
 800c758:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c75c:	4681      	mov	r9, r0
 800c75e:	d1d6      	bne.n	800c70e <_svfiprintf_r+0x166>
 800c760:	89a3      	ldrh	r3, [r4, #12]
 800c762:	065b      	lsls	r3, r3, #25
 800c764:	f53f af35 	bmi.w	800c5d2 <_svfiprintf_r+0x2a>
 800c768:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c76a:	b01d      	add	sp, #116	; 0x74
 800c76c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c770:	ab03      	add	r3, sp, #12
 800c772:	4622      	mov	r2, r4
 800c774:	a904      	add	r1, sp, #16
 800c776:	4640      	mov	r0, r8
 800c778:	9300      	str	r3, [sp, #0]
 800c77a:	4b06      	ldr	r3, [pc, #24]	; (800c794 <_svfiprintf_r+0x1ec>)
 800c77c:	f7fe fc00 	bl	800af80 <_printf_i>
 800c780:	e7ea      	b.n	800c758 <_svfiprintf_r+0x1b0>
 800c782:	bf00      	nop
 800c784:	080238d4 	.word	0x080238d4
 800c788:	080238da 	.word	0x080238da
 800c78c:	080238de 	.word	0x080238de
 800c790:	0800aa11 	.word	0x0800aa11
 800c794:	0800c4f3 	.word	0x0800c4f3

0800c798 <__ascii_mbtowc>:
 800c798:	b082      	sub	sp, #8
 800c79a:	b901      	cbnz	r1, 800c79e <__ascii_mbtowc+0x6>
 800c79c:	a901      	add	r1, sp, #4
 800c79e:	b142      	cbz	r2, 800c7b2 <__ascii_mbtowc+0x1a>
 800c7a0:	b14b      	cbz	r3, 800c7b6 <__ascii_mbtowc+0x1e>
 800c7a2:	7813      	ldrb	r3, [r2, #0]
 800c7a4:	600b      	str	r3, [r1, #0]
 800c7a6:	7812      	ldrb	r2, [r2, #0]
 800c7a8:	1c10      	adds	r0, r2, #0
 800c7aa:	bf18      	it	ne
 800c7ac:	2001      	movne	r0, #1
 800c7ae:	b002      	add	sp, #8
 800c7b0:	4770      	bx	lr
 800c7b2:	4610      	mov	r0, r2
 800c7b4:	e7fb      	b.n	800c7ae <__ascii_mbtowc+0x16>
 800c7b6:	f06f 0001 	mvn.w	r0, #1
 800c7ba:	e7f8      	b.n	800c7ae <__ascii_mbtowc+0x16>

0800c7bc <memmove>:
 800c7bc:	4288      	cmp	r0, r1
 800c7be:	eb01 0302 	add.w	r3, r1, r2
 800c7c2:	b510      	push	{r4, lr}
 800c7c4:	d807      	bhi.n	800c7d6 <memmove+0x1a>
 800c7c6:	1e42      	subs	r2, r0, #1
 800c7c8:	4299      	cmp	r1, r3
 800c7ca:	d00a      	beq.n	800c7e2 <memmove+0x26>
 800c7cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7d0:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c7d4:	e7f8      	b.n	800c7c8 <memmove+0xc>
 800c7d6:	4283      	cmp	r3, r0
 800c7d8:	d9f5      	bls.n	800c7c6 <memmove+0xa>
 800c7da:	1881      	adds	r1, r0, r2
 800c7dc:	1ad2      	subs	r2, r2, r3
 800c7de:	42d3      	cmn	r3, r2
 800c7e0:	d100      	bne.n	800c7e4 <memmove+0x28>
 800c7e2:	bd10      	pop	{r4, pc}
 800c7e4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c7e8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c7ec:	e7f7      	b.n	800c7de <memmove+0x22>

0800c7ee <_malloc_usable_size_r>:
 800c7ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7f2:	1f18      	subs	r0, r3, #4
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	bfbc      	itt	lt
 800c7f8:	580b      	ldrlt	r3, [r1, r0]
 800c7fa:	18c0      	addlt	r0, r0, r3
 800c7fc:	4770      	bx	lr

0800c7fe <__ascii_wctomb>:
 800c7fe:	b149      	cbz	r1, 800c814 <__ascii_wctomb+0x16>
 800c800:	2aff      	cmp	r2, #255	; 0xff
 800c802:	bf8d      	iteet	hi
 800c804:	238a      	movhi	r3, #138	; 0x8a
 800c806:	700a      	strbls	r2, [r1, #0]
 800c808:	2001      	movls	r0, #1
 800c80a:	6003      	strhi	r3, [r0, #0]
 800c80c:	bf88      	it	hi
 800c80e:	f04f 30ff 	movhi.w	r0, #4294967295
 800c812:	4770      	bx	lr
 800c814:	4608      	mov	r0, r1
 800c816:	4770      	bx	lr

0800c818 <_init>:
 800c818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c81a:	bf00      	nop
 800c81c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c81e:	bc08      	pop	{r3}
 800c820:	469e      	mov	lr, r3
 800c822:	4770      	bx	lr

0800c824 <_fini>:
 800c824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c826:	bf00      	nop
 800c828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c82a:	bc08      	pop	{r3}
 800c82c:	469e      	mov	lr, r3
 800c82e:	4770      	bx	lr
